package com.urbanairship.api.experiments.parse;


import com.google.common.base.Optional;
import com.urbanairship.api.experiments.model.VariantPushPayload;
import com.urbanairship.api.push.model.InApp;
import com.urbanairship.api.push.model.notification.Notification;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Iterator;
import junit.framework.AssertionFailedError;
import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.node.ObjectNode;
import org.junit.Assert;
import org.junit.Test;

import static junit.framework.Assert.assertEquals;


public class AmplVariantPushPayloadSerializerTest {
    private static final ObjectMapper MAPPER = ExperimentObjectMapper.getInstance();

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add45_failAssert44_add1953() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add45_failAssert44_add1953__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add45_failAssert44_add1953__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add45_failAssert44_add1953__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add45_failAssert44_add1953__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add45_failAssert44_add1953__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add45_failAssert44_add1953__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add45_failAssert44_add1953__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add45_failAssert44_add1953__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add45_failAssert44_add1953__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add45_failAssert44_add1953__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add45 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add42_failAssert41_add2847() throws Exception {
        try {
            Notification.newBuilder().setAlert("hello everyone");
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add42_failAssert41_add2847__18 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2847__18)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2847__18)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2847__18)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2847__18)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2847__18)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2847__18)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2847__18)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2847__18)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2847__18)).getInApp())).isPresent());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add42 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_literalMutationString26266() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("ThiZs is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_literalMutationString26262() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("ThCs is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add45_failAssert44_add1956() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add45 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add42_failAssert41_add2845() throws Exception {
        try {
            Notification o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__3 = Notification.newBuilder().setAlert("hello everyone").build();
            Assert.assertEquals("Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}", ((Notification) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__3)).toString());
            Assert.assertEquals(-108459316, ((int) (((Notification) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__3)).hashCode())));
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__3)).getActions())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__3)).getActions())).isPresent());
            Assert.assertEquals("hello everyone", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__3)).getAlert())).get());
            Assert.assertEquals("Optional.of(hello everyone)", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__3)).getAlert())).toString());
            Assert.assertEquals(-906285547, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__3)).getAlert())).hashCode())));
            Assert.assertTrue(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__3)).getAlert())).isPresent());
            Assert.assertTrue(((Notification) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__3)).getDeviceTypePayloadOverrides().isEmpty());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__3)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__3)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__3)).getOverrideDeviceTypes())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__3)).getOverrideDeviceTypes())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__3)).getOverrideDeviceTypes())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__19 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__19)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__19)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__19)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__19)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__19)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__19)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__19)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__19)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2845__19)).getInApp())).isPresent());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add42 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add45011() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getBooleanValue();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20692() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20692__28 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20692__28)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20692__28)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20692__28)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20692__28)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20692__28)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20692__28)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20692__28)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20692__28)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20692__28)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20453() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23782() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__16)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__16)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__16)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__16)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__16)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__16)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__16)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__16)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__16)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).isObject());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).getFieldNames())).hasNext());
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).getFields())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).getNumberType());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).getValueAsBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).isValueNode());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).getIntValue())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).isBoolean());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22)).isNull());
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21586() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3)).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23471_failAssert115() throws Exception {
        try {
            InApp.newBuilder().setAlert("This is in-app!").build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23471 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add42_failAssert41_add2840() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add42_failAssert41_add2840__21 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2840__21)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2840__21)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2840__21)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2840__21)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2840__21)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2840__21)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2840__21)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2840__21)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2840__21)).getInApp())).isPresent());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add42 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23474_failAssert118_add24677() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23474_failAssert118_add24677__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23474_failAssert118_add24677__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23474_failAssert118_add24677__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23474_failAssert118_add24677__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23474_failAssert118_add24677__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23474_failAssert118_add24677__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23474_failAssert118_add24677__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23474_failAssert118_add24677__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23474_failAssert118_add24677__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23474_failAssert118_add24677__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String o_testPartialPushPayloadSerializer_add23474_failAssert118_add24677__24 = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", o_testPartialPushPayloadSerializer_add23474_failAssert118_add24677__24);
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23474 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19082() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).isFloatingPointNumber();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_literalMutationString26257() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("s%YQ.!sA6]Y%P{j").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_literalMutationString26253() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("At least one variant must be present.").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23475_failAssert119_add24977_add27802() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23475 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20445() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20445__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20445__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20445__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20445__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20445__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20445__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20445__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20445__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20445__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20445__3)).toString());
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19078() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).isIntegralNumber();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2817() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            Notification.newBuilder();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add40_failAssert39_add1827() throws Exception {
        try {
            InApp.newBuilder();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add40 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add40_failAssert39_add1824() throws Exception {
        try {
            InApp.newBuilder();
            VariantPushPayload o_testPartialPushPayloadSerializer_add40_failAssert39_add1824__4 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add40_failAssert39_add1824__4)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add40_failAssert39_add1824__4)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add40_failAssert39_add1824__4)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add40_failAssert39_add1824__4)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add40_failAssert39_add1824__4)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add40_failAssert39_add1824__4)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add40_failAssert39_add1824__4)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add40_failAssert39_add1824__4)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add40_failAssert39_add1824__4)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add40 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2819() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            InApp o_testPartialPushPayloadSerializer_add32_failAssert31_add2819__12 = InApp.newBuilder().setAlert("This is in-app!").build();
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2819__12)).getExtra())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2819__12)).getExtra())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2819__12)).getExtra())).isPresent());
            Assert.assertEquals("InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()}", ((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2819__12)).toString());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2819__12)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2819__12)).getActions())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2819__12)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2819__12)).getExpiry())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2819__12)).getExpiry())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2819__12)).getExpiry())).isPresent());
            Assert.assertEquals("This is in-app!", ((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2819__12)).getAlert());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2819__12)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2819__12)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2819__12)).getInteractive())).isPresent());
            Assert.assertEquals("banner", ((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2819__12)).getDisplayType());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2819__12)).getDisplay())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2819__12)).getDisplay())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2819__12)).getDisplay())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2812() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            Notification o_testPartialPushPayloadSerializer_add32_failAssert31_add2812__12 = Notification.newBuilder().setAlert("hello everyone").build();
            Assert.assertEquals("Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}", ((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2812__12)).toString());
            Assert.assertEquals(-108459316, ((int) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2812__12)).hashCode())));
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2812__12)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2812__12)).getActions())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2812__12)).getActions())).isPresent());
            Assert.assertEquals("hello everyone", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2812__12)).getAlert())).get());
            Assert.assertEquals("Optional.of(hello everyone)", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2812__12)).getAlert())).toString());
            Assert.assertEquals(-906285547, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2812__12)).getAlert())).hashCode())));
            Assert.assertTrue(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2812__12)).getAlert())).isPresent());
            Assert.assertTrue(((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2812__12)).getDeviceTypePayloadOverrides().isEmpty());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2812__12)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2812__12)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2812__12)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2812__12)).getOverrideDeviceTypes())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2812__12)).getOverrideDeviceTypes())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2812__12)).getOverrideDeviceTypes())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add39_failAssert38_add1611() throws Exception {
        try {
            InApp.newBuilder().setAlert("This is in-app!");
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add39 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20556() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3)).getPushOptions())).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2815() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            Notification.newBuilder().setAlert("hello everyone");
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21689() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3)).getInApp())).isPresent();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2828() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            expected.getMessage();
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add46013() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getBigIntegerValue())).toString();
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add42_failAssert41_add2837() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add42_failAssert41_add2837__25 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2837__25)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2837__25)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2837__25)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2837__25)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2837__25)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2837__25)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2837__25)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2837__25)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2837__25)).getInApp())).isPresent());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add42 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add45120() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).isIntegralNumber();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add42_failAssert41_add2833() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add42_failAssert41_add2833__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2833__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2833__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2833__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2833__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2833__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2833__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2833__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2833__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2833__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add42_failAssert41_add2833__26 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2833__26)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2833__26)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2833__26)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2833__26)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2833__26)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2833__26)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2833__26)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2833__26)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2833__26)).getInApp())).isPresent());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add42 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2821() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            InApp.newBuilder();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2820() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            InApp.newBuilder().setAlert("This is in-app!");
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2823() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add32_failAssert31_add2823__25 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2823__25)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2823__25)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2823__25)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2823__25)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2823__25)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2823__25)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2823__25)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2823__25)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2823__25)).getInApp())).isPresent());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2822() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String o_testPartialPushPayloadSerializer_add32_failAssert31_add2822__23 = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", o_testPartialPushPayloadSerializer_add32_failAssert31_add2822__23);
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2825() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).getFields())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).getFieldNames())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).isObject());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).getNumberType());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).isNull());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).getValueAsBoolean());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).getIntValue())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).isBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2825__30)).isValueNode());
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2824() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).getFields())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).getFieldNames())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).isObject());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).getNumberType());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).isNull());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).getValueAsBoolean());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).getIntValue())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).isBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2824__28)).isValueNode());
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20542() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3)).getNotification())).isPresent();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2827() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_remove47_failAssert46() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_remove47 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2826() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21672() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3)).getInApp())).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21795() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            ((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getFields())).hasNext();
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23474_failAssert118_add24685() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String o_testPartialPushPayloadSerializer_add23474_failAssert118_add24685__19 = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", o_testPartialPushPayloadSerializer_add23474_failAssert118_add24685__19);
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23474 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add45125() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).isFloatingPointNumber();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23474_failAssert118_add24682() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String o_testPartialPushPayloadSerializer_add23474_failAssert118_add24682__23 = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", o_testPartialPushPayloadSerializer_add23474_failAssert118_add24682__23);
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23474 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_literalMutationString26223() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("At least one variant must be present.").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_literalMutationString26220() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("8{c00BP3[_Yb7S").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add40_failAssert39() throws Exception {
        try {
            InApp.newBuilder();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add40 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43897() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43897__28 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43897__28)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43897__28)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43897__28)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43897__28)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43897__28)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43897__28)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43897__28)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43897__28)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43897__28)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add36_failAssert35_add883() throws Exception {
        try {
            Notification.newBuilder().setAlert("hello everyone");
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add36 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23471_failAssert115_add24806() throws Exception {
        try {
            InApp o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__3 = InApp.newBuilder().setAlert("This is in-app!").build();
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__3)).getExtra())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__3)).getExtra())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__3)).getExtra())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__3)).getExpiry())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__3)).getExpiry())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__3)).getExpiry())).hashCode())));
            Assert.assertEquals("This is in-app!", ((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__3)).getAlert());
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__3)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__3)).getInteractive())).hashCode())));
            Assert.assertEquals("banner", ((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__3)).getDisplayType());
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__3)).getDisplay())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__3)).getDisplay())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__3)).getDisplay())).hashCode())));
            Assert.assertEquals("InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()}", ((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__3)).toString());
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__3)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__3)).getActions())).hashCode())));
            VariantPushPayload o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__6 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__6)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__6)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__6)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__6)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__6)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__6)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__6)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__6)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24806__6)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23471 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23745() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).isObject());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).getFieldNames())).hasNext());
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).getFields())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).getNumberType());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).getValueAsBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).isValueNode());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).getIntValue())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).isBoolean());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23745__30)).isNull());
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2759() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_literalMutationString26228() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello veryone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add36_failAssert35_add886() throws Exception {
        try {
            Notification.newBuilder().setAlert("hello everyone");
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add36 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23740() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).isObject());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getFieldNames())).hasNext());
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getFields())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getNumberType());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getValueAsBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).isValueNode());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getIntValue())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).isBoolean());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).isNull());
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add33_failAssert32_add3102() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add33 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26083() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26083__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26083__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26083__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26083__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26083__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26083__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26083__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26083__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26083__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26083__3)).toString());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add33_failAssert32_add3106() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add33 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26089() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26089__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26089__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26089__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26089__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26089__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26089__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26089__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26089__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26089__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26089__3)).toString());
            VariantPushPayload.newBuilder();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23749() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).isObject());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).getFieldNames())).hasNext());
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).getFields())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).getNumberType());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).getValueAsBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).isValueNode());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).getIntValue())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).isBoolean());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23749__26)).isNull());
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23479_failAssert123_add24236() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23479 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23479_failAssert123_add24233() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23479 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add41_failAssert40() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add41 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add39_failAssert38_add1606() throws Exception {
        try {
            InApp.newBuilder().setAlert("This is in-app!");
            VariantPushPayload o_testPartialPushPayloadSerializer_add39_failAssert38_add1606__5 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add39_failAssert38_add1606__5)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add39_failAssert38_add1606__5)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add39_failAssert38_add1606__5)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add39_failAssert38_add1606__5)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add39_failAssert38_add1606__5)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add39_failAssert38_add1606__5)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add39_failAssert38_add1606__5)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add39_failAssert38_add1606__5)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add39_failAssert38_add1606__5)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add39 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_literalMutationString26217() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2769() throws Exception {
        try {
            VariantPushPayload.newBuilder();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).getFieldNames())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).getElements())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).isObject());
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).getFields())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).getNumberType());
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).getDecimalValue())).hashCode())));
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).getValueAsBoolean());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).getNumberValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).isBoolean());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).getIntValue())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).getLongValue())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).getDoubleValue())), 0.1);
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).isValueNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18909__31)).isNull());
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23471_failAssert115_add24814() throws Exception {
        try {
            InApp o_testPartialPushPayloadSerializer_add23471_failAssert115_add24814__3 = InApp.newBuilder().setAlert("This is in-app!").build();
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24814__3)).getExtra())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24814__3)).getExtra())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24814__3)).getExtra())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24814__3)).getExpiry())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24814__3)).getExpiry())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24814__3)).getExpiry())).hashCode())));
            Assert.assertEquals("This is in-app!", ((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24814__3)).getAlert());
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24814__3)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24814__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24814__3)).getInteractive())).hashCode())));
            Assert.assertEquals("banner", ((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24814__3)).getDisplayType());
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24814__3)).getDisplay())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24814__3)).getDisplay())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24814__3)).getDisplay())).hashCode())));
            Assert.assertEquals("InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()}", ((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24814__3)).toString());
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24814__3)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24814__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24814__3)).getActions())).hashCode())));
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23471 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23479_failAssert123_add24228() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23479_failAssert123_add24228__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23479_failAssert123_add24228__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23479_failAssert123_add24228__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23479_failAssert123_add24228__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23479_failAssert123_add24228__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23479_failAssert123_add24228__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23479_failAssert123_add24228__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23479_failAssert123_add24228__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23479_failAssert123_add24228__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23479_failAssert123_add24228__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23479 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add36_failAssert35_add879() throws Exception {
        try {
            Notification.newBuilder().setAlert("hello everyone");
            VariantPushPayload o_testPartialPushPayloadSerializer_add36_failAssert35_add879__5 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add36_failAssert35_add879__5)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add36_failAssert35_add879__5)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add36_failAssert35_add879__5)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add36_failAssert35_add879__5)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add36_failAssert35_add879__5)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add36_failAssert35_add879__5)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add36_failAssert35_add879__5)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add36_failAssert35_add879__5)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add36_failAssert35_add879__5)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add36 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26072() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26072__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26072__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26072__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26072__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26072__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26072__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26072__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26072__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26072__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26072__3)).toString());
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26072__13 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26072__13)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26072__13)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26072__13)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26072__13)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26072__13)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26072__13)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26072__13)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26072__13)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26072__13)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21773() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21773__28 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21773__28)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21773__28)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21773__28)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21773__28)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21773__28)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21773__28)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21773__28)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21773__28)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21773__28)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21894() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getBigIntegerValue())).toString();
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23471_failAssert115_add24810() throws Exception {
        try {
            InApp o_testPartialPushPayloadSerializer_add23471_failAssert115_add24810__3 = InApp.newBuilder().setAlert("This is in-app!").build();
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24810__3)).getExtra())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24810__3)).getExtra())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24810__3)).getExtra())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24810__3)).getExpiry())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24810__3)).getExpiry())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24810__3)).getExpiry())).hashCode())));
            Assert.assertEquals("This is in-app!", ((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24810__3)).getAlert());
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24810__3)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24810__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24810__3)).getInteractive())).hashCode())));
            Assert.assertEquals("banner", ((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24810__3)).getDisplayType());
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24810__3)).getDisplay())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24810__3)).getDisplay())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24810__3)).getDisplay())).hashCode())));
            Assert.assertEquals("InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()}", ((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24810__3)).toString());
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24810__3)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24810__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23471_failAssert115_add24810__3)).getActions())).hashCode())));
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23471 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18904() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18904__28 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18904__28)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18904__28)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18904__28)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18904__28)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18904__28)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18904__28)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18904__28)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18904__28)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18904__28)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21534() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2764() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21656() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3)).getPushOptions())).isPresent();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18901() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18901__26 = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18901__26);
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26078() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26078__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26078__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26078__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26078__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26078__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26078__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26078__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26078__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26078__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26078__3)).toString());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23472_failAssert116() throws Exception {
        try {
            InApp.newBuilder().setAlert("This is in-app!");
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23472 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23475_failAssert119_add24973_add42678() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23475 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43792() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3)).getPushOptions())).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_literalMutationString26242() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23478_failAssert122_add23984() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23478 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18819() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3)).getInApp())).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23478_failAssert122_add23981() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23478_failAssert122_add23981__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23478_failAssert122_add23981__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23478_failAssert122_add23981__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23478_failAssert122_add23981__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23478_failAssert122_add23981__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23478_failAssert122_add23981__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23478_failAssert122_add23981__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23478_failAssert122_add23981__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23478_failAssert122_add23981__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23478_failAssert122_add23981__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23478 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21528() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20597() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3)).getInApp())).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add33_failAssert32_add3125() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            InApp o_testPartialPushPayloadSerializer_add33_failAssert32_add3125__8 = InApp.newBuilder().setAlert("This is in-app!").build();
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3125__8)).getExtra())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3125__8)).getExtra())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3125__8)).getExtra())).isPresent());
            Assert.assertEquals("InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()}", ((InApp) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3125__8)).toString());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3125__8)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3125__8)).getActions())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3125__8)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3125__8)).getExpiry())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3125__8)).getExpiry())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3125__8)).getExpiry())).isPresent());
            Assert.assertEquals("This is in-app!", ((InApp) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3125__8)).getAlert());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3125__8)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3125__8)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3125__8)).getInteractive())).isPresent());
            Assert.assertEquals("banner", ((InApp) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3125__8)).getDisplayType());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3125__8)).getDisplay())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3125__8)).getDisplay())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3125__8)).getDisplay())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add33 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_literalMutationString26248() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("Ths is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21521() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21521__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21521__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21521__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21521__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21521__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21521__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21521__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21521__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21521__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21521__3)).toString());
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18935() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getElements())).hasNext();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23475_failAssert119_add24973_add42671() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973_add42671__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973_add42671__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973_add42671__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973_add42671__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973_add42671__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973_add42671__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973_add42671__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973_add42671__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973_add42671__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973_add42671__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23475 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add45035() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getValueAsBoolean();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_literalMutationString26235() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hel!lo everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43781() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3)).getPushOptions())).isPresent();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_literalMutationString26231() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hel1o everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20460() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18808() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3)).getPushOptions())).isPresent();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20583() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3)).getPushOptions())).isPresent();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add33_failAssert32_add3111() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            Notification o_testPartialPushPayloadSerializer_add33_failAssert32_add3111__8 = Notification.newBuilder().setAlert("hello everyone").build();
            Assert.assertEquals("Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}", ((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3111__8)).toString());
            Assert.assertEquals(-108459316, ((int) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3111__8)).hashCode())));
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3111__8)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3111__8)).getActions())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3111__8)).getActions())).isPresent());
            Assert.assertEquals("hello everyone", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3111__8)).getAlert())).get());
            Assert.assertEquals("Optional.of(hello everyone)", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3111__8)).getAlert())).toString());
            Assert.assertEquals(-906285547, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3111__8)).getAlert())).hashCode())));
            Assert.assertTrue(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3111__8)).getAlert())).isPresent());
            Assert.assertTrue(((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3111__8)).getDeviceTypePayloadOverrides().isEmpty());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3111__8)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3111__8)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3111__8)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3111__8)).getOverrideDeviceTypes())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3111__8)).getOverrideDeviceTypes())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3111__8)).getOverrideDeviceTypes())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add33 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18927() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getFields())).hasNext();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add37_failAssert36_add1084() throws Exception {
        try {
            Notification.newBuilder();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add37 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add33_failAssert32_add3115() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            Notification.newBuilder().setAlert("hello everyone");
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add33 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add37_failAssert36_add1082() throws Exception {
        try {
            Notification.newBuilder();
            VariantPushPayload o_testPartialPushPayloadSerializer_add37_failAssert36_add1082__4 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add37_failAssert36_add1082__4)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add37_failAssert36_add1082__4)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add37_failAssert36_add1082__4)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add37_failAssert36_add1082__4)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add37_failAssert36_add1082__4)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add37_failAssert36_add1082__4)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add37_failAssert36_add1082__4)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add37_failAssert36_add1082__4)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add37_failAssert36_add1082__4)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add37 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26098() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26098__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26098__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26098__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26098__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26098__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26098__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26098__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26098__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26098__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26098__3)).toString());
            Notification.newBuilder().setAlert("hello everyone");
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26093() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__3)).toString());
            Notification o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__13 = Notification.newBuilder().setAlert("hello everyone").build();
            Assert.assertTrue(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__13)).getAlert())).isPresent());
            Assert.assertEquals("hello everyone", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__13)).getAlert())).get());
            Assert.assertEquals("Optional.of(hello everyone)", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__13)).getAlert())).toString());
            Assert.assertEquals(-906285547, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__13)).getAlert())).hashCode())));
            Assert.assertTrue(((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__13)).getDeviceTypePayloadOverrides().isEmpty());
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__13)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__13)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__13)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__13)).getOverrideDeviceTypes())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__13)).getOverrideDeviceTypes())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__13)).getOverrideDeviceTypes())).hashCode())));
            Assert.assertEquals("Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}", ((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__13)).toString());
            Assert.assertEquals(-108459316, ((int) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__13)).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__13)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__13)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26093__13)).getActions())).hashCode())));
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23470_failAssert114() throws Exception {
        try {
            Notification.newBuilder();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23470 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2389() throws Exception {
        try {
            Notification.newBuilder().setAlert("hello everyone");
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2389__5 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2389__5)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2389__5)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2389__5)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2389__5)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2389__5)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2389__5)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2389__5)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2389__5)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2389__5)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2387() throws Exception {
        try {
            Notification o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__3 = Notification.newBuilder().setAlert("hello everyone").build();
            Assert.assertEquals("Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}", ((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__3)).toString());
            Assert.assertEquals(-108459316, ((int) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__3)).hashCode())));
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__3)).getActions())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__3)).getActions())).isPresent());
            Assert.assertEquals("hello everyone", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__3)).getAlert())).get());
            Assert.assertEquals("Optional.of(hello everyone)", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__3)).getAlert())).toString());
            Assert.assertEquals(-906285547, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__3)).getAlert())).hashCode())));
            Assert.assertTrue(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__3)).getAlert())).isPresent());
            Assert.assertTrue(((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__3)).getDeviceTypePayloadOverrides().isEmpty());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__3)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__3)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__3)).getOverrideDeviceTypes())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__3)).getOverrideDeviceTypes())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__3)).getOverrideDeviceTypes())).isPresent());
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__6 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__6)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__6)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__6)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__6)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__6)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__6)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__6)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__6)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2387__6)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43975() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getNumberValue();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2383() throws Exception {
        try {
            VariantPushPayload.newBuilder();
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2383__4 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2383__4)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2383__4)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2383__4)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2383__4)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2383__4)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2383__4)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2383__4)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2383__4)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2383__4)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43851() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2798() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload o_testPartialPushPayloadSerializer_add32_failAssert31_add2798__12 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2798__12)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2798__12)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2798__12)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2798__12)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2798__12)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2798__12)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2798__12)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2798__12)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2798__12)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2137() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2137__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("At least one variant must be present.").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(At least one variant must be present.), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2137__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(At least one variant must be present.), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2137__3)).getNotification())).toString());
            Assert.assertEquals(521026511, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2137__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2137__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2137__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2137__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2137__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2137__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2137__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2132() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2132__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2132__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2132__3)).getNotification())).toString());
            Assert.assertEquals(512722817, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2132__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2132__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2132__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2132__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2132__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2132__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2132__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20611() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3)).getInApp())).isPresent();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2792() throws Exception {
        try {
            InApp.newBuilder().setAlert("This is in-app!");
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2795() throws Exception {
        try {
            InApp.newBuilder();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20727() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            ((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getElements())).hasNext();
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26044() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26044__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26044__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26044__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26044__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26044__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26044__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26044__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26044__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26044__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26044__3)).toString());
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26044__13 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26044__13)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26044__13)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26044__13)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26044__13)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26044__13)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26044__13)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26044__13)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26044__13)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26044__13)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45613() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getDecimalValue())).toString();
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44685() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44685__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44685__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44685__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44685__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44685__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44685__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44685__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44685__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44685__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44685__3)).toString());
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19006() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getValueAsBoolean();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2397() throws Exception {
        try {
            InApp.newBuilder().setAlert("This is in-app!");
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2397__5 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2397__5)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2397__5)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2397__5)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2397__5)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2397__5)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2397__5)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2397__5)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2397__5)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2397__5)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43963() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getValueAsText();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2394() throws Exception {
        try {
            InApp o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__3 = InApp.newBuilder().setAlert("This is in-app!").build();
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__3)).getExtra())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__3)).getExtra())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__3)).getExtra())).isPresent());
            Assert.assertEquals("InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()}", ((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__3)).toString());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__3)).getActions())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__3)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__3)).getExpiry())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__3)).getExpiry())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__3)).getExpiry())).isPresent());
            Assert.assertEquals("This is in-app!", ((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__3)).getAlert());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__3)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__3)).getInteractive())).isPresent());
            Assert.assertEquals("banner", ((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__3)).getDisplayType());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__3)).getDisplay())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__3)).getDisplay())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__3)).getDisplay())).isPresent());
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__6 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__6)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__6)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__6)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__6)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__6)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__6)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__6)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__6)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2394__6)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44692() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43840() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43840__15 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43840__15)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43840__15)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43840__15)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43840__15)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43840__15)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43840__15)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43840__15)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43840__15)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43840__15)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2392() throws Exception {
        try {
            Notification.newBuilder();
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2392__4 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2392__4)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2392__4)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2392__4)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2392__4)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2392__4)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2392__4)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2392__4)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2392__4)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2392__4)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20715() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            ((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getFields())).hasNext();
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43846() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44699() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26058() throws Exception {
        try {
            Notification.newBuilder();
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26058__4 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26058__4)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26058__4)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26058__4)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26058__4)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26058__4)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26058__4)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26058__4)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26058__4)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26058__4)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2778() throws Exception {
        try {
            Notification.newBuilder().setAlert("hello everyone");
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20952() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).isFloatingPointNumber();
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26062() throws Exception {
        try {
            InApp.newBuilder().setAlert("This is in-app!");
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26062__5 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26062__5)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26062__5)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26062__5)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26062__5)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26062__5)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26062__5)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26062__5)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26062__5)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26062__5)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2773() throws Exception {
        try {
            Notification o_testPartialPushPayloadSerializer_add32_failAssert31_add2773__3 = Notification.newBuilder().setAlert("hello everyone").build();
            Assert.assertEquals("Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}", ((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2773__3)).toString());
            Assert.assertEquals(-108459316, ((int) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2773__3)).hashCode())));
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2773__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2773__3)).getActions())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2773__3)).getActions())).isPresent());
            Assert.assertEquals("hello everyone", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2773__3)).getAlert())).get());
            Assert.assertEquals("Optional.of(hello everyone)", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2773__3)).getAlert())).toString());
            Assert.assertEquals(-906285547, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2773__3)).getAlert())).hashCode())));
            Assert.assertTrue(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2773__3)).getAlert())).isPresent());
            Assert.assertTrue(((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2773__3)).getDeviceTypePayloadOverrides().isEmpty());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2773__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2773__3)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2773__3)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2773__3)).getOverrideDeviceTypes())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2773__3)).getOverrideDeviceTypes())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2773__3)).getOverrideDeviceTypes())).isPresent());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26066() throws Exception {
        try {
            InApp.newBuilder();
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26066__4 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26066__4)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26066__4)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26066__4)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26066__4)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26066__4)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26066__4)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26066__4)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26066__4)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26066__4)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19481() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19481__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19481__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19481__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19481__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19481__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19481__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19481__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19481__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19481__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19481__3)).toString());
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add35_failAssert34_add616() throws Exception {
        try {
            Notification o_testPartialPushPayloadSerializer_add35_failAssert34_add616__3 = Notification.newBuilder().setAlert("hello everyone").build();
            Assert.assertEquals("Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}", ((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__3)).toString());
            Assert.assertEquals(-108459316, ((int) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__3)).hashCode())));
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__3)).getActions())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__3)).getActions())).isPresent());
            Assert.assertEquals("hello everyone", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__3)).getAlert())).get());
            Assert.assertEquals("Optional.of(hello everyone)", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__3)).getAlert())).toString());
            Assert.assertEquals(-906285547, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__3)).getAlert())).hashCode())));
            Assert.assertTrue(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__3)).getAlert())).isPresent());
            Assert.assertTrue(((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__3)).getDeviceTypePayloadOverrides().isEmpty());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__3)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__3)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__3)).getOverrideDeviceTypes())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__3)).getOverrideDeviceTypes())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__3)).getOverrideDeviceTypes())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add35_failAssert34_add616__19 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__19)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__19)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__19)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__19)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__19)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__19)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__19)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__19)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add35_failAssert34_add616__19)).getInApp())).isPresent());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add35 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45633() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).isFloatingPointNumber();
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19486() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43758() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3)).getNotification())).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26060() throws Exception {
        try {
            InApp o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__3 = InApp.newBuilder().setAlert("This is in-app!").build();
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__3)).getExtra())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__3)).getExtra())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__3)).getExtra())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__3)).getExpiry())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__3)).getExpiry())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__3)).getExpiry())).hashCode())));
            Assert.assertEquals("This is in-app!", ((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__3)).getAlert());
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__3)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__3)).getInteractive())).hashCode())));
            Assert.assertEquals("banner", ((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__3)).getDisplayType());
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__3)).getDisplay())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__3)).getDisplay())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__3)).getDisplay())).hashCode())));
            Assert.assertEquals("InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()}", ((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__3)).toString());
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__3)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__3)).getActions())).hashCode())));
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__6 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__6)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__6)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__6)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__6)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__6)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__6)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__6)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__6)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26060__6)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45519() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            ((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getElements())).hasNext();
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43982() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getBooleanValue();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44790() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3)).getPushOptions())).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2787() throws Exception {
        try {
            InApp o_testPartialPushPayloadSerializer_add32_failAssert31_add2787__3 = InApp.newBuilder().setAlert("This is in-app!").build();
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2787__3)).getExtra())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2787__3)).getExtra())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2787__3)).getExtra())).isPresent());
            Assert.assertEquals("InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()}", ((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2787__3)).toString());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2787__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2787__3)).getActions())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2787__3)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2787__3)).getExpiry())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2787__3)).getExpiry())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2787__3)).getExpiry())).isPresent());
            Assert.assertEquals("This is in-app!", ((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2787__3)).getAlert());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2787__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2787__3)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2787__3)).getInteractive())).isPresent());
            Assert.assertEquals("banner", ((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2787__3)).getDisplayType());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2787__3)).getDisplay())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2787__3)).getDisplay())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add32_failAssert31_add2787__3)).getDisplay())).isPresent());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26047() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26047__12 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26047__12)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26047__12)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26047__12)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26047__12)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26047__12)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26047__12)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26047__12)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26047__12)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26047__12)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26049() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26049__8 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26049__8)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26049__8)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26049__8)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26049__8)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26049__8)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26049__8)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26049__8)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26049__8)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26049__8)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add37_failAssert36() throws Exception {
        try {
            Notification.newBuilder();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add37 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26051() throws Exception {
        try {
            VariantPushPayload.newBuilder();
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26051__4 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26051__4)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26051__4)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26051__4)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26051__4)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26051__4)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26051__4)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26051__4)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26051__4)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26051__4)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2782() throws Exception {
        try {
            Notification.newBuilder();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19490() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).getFieldNames())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).getElements())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).isObject());
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).getFields())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).getNumberType());
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).getDecimalValue())).hashCode())));
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).getValueAsBoolean());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).getNumberValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).isBoolean());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).getIntValue())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).getLongValue())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).getDoubleValue())), 0.1);
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).isValueNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19139__34)).isNull());
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26054() throws Exception {
        try {
            Notification o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__3 = Notification.newBuilder().setAlert("hello everyone").build();
            Assert.assertTrue(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__3)).getAlert())).isPresent());
            Assert.assertEquals("hello everyone", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__3)).getAlert())).get());
            Assert.assertEquals("Optional.of(hello everyone)", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__3)).getAlert())).toString());
            Assert.assertEquals(-906285547, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__3)).getAlert())).hashCode())));
            Assert.assertTrue(((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__3)).getDeviceTypePayloadOverrides().isEmpty());
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__3)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__3)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__3)).getOverrideDeviceTypes())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__3)).getOverrideDeviceTypes())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__3)).getOverrideDeviceTypes())).hashCode())));
            Assert.assertEquals("Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}", ((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__3)).toString());
            Assert.assertEquals(-108459316, ((int) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__3)).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__3)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__3)).getActions())).hashCode())));
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__6 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__6)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__6)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__6)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__6)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__6)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__6)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__6)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__6)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26054__6)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45503() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45503__28 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45503__28)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45503__28)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45503__28)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45503__28)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45503__28)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45503__28)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45503__28)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45503__28)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45503__28)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26056() throws Exception {
        try {
            Notification.newBuilder().setAlert("hello everyone");
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26056__5 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26056__5)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26056__5)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26056__5)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26056__5)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26056__5)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26056__5)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26056__5)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26056__5)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26056__5)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43748() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3)).getNotification())).isPresent();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43987() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getBinaryValue();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19017() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getBigIntegerValue())).toString();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add41_failAssert40_add2632() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add41_failAssert40_add2632__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add41_failAssert40_add2632__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add41_failAssert40_add2632__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add41_failAssert40_add2632__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add41_failAssert40_add2632__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add41_failAssert40_add2632__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add41_failAssert40_add2632__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add41_failAssert40_add2632__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add41_failAssert40_add2632__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add41_failAssert40_add2632__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String o_testPartialPushPayloadSerializer_add41_failAssert40_add2632__24 = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", o_testPartialPushPayloadSerializer_add41_failAssert40_add2632__24);
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add41 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2463() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2463__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2463__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2463__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2463__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2463__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2463__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2463__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2463__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2463__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2463__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            expected.getMessage();
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2460() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2460__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2460__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2460__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2460__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2460__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2460__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2460__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2460__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2460__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2460__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26116() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26116__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26116__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26116__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26116__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26116__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26116__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26116__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26116__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26116__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26116__3)).toString());
            InApp.newBuilder();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add46028() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getDecimalValue())).toString();
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26119() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26119__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26119__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26119__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26119__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26119__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26119__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26119__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26119__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26119__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26119__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String o_testPartialPushPayloadSerializer_add23464_failAssert108_add26119__24 = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", o_testPartialPushPayloadSerializer_add23464_failAssert108_add26119__24);
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23473_failAssert117_add25386() throws Exception {
        try {
            InApp.newBuilder();
            VariantPushPayload o_testPartialPushPayloadSerializer_add23473_failAssert117_add25386__4 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23473_failAssert117_add25386__4)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23473_failAssert117_add25386__4)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23473_failAssert117_add25386__4)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23473_failAssert117_add25386__4)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23473_failAssert117_add25386__4)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23473_failAssert117_add25386__4)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23473_failAssert117_add25386__4)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23473_failAssert117_add25386__4)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23473_failAssert117_add25386__4)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23473 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26122() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26122__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26122__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26122__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26122__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26122__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26122__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26122__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26122__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26122__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26122__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26122__26 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26122__26)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26122__26)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26122__26)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26122__26)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26122__26)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26122__26)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26122__26)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26122__26)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26122__26)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23473_failAssert117_add25388() throws Exception {
        try {
            InApp.newBuilder();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23473 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add41_failAssert40_add2635() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String o_testPartialPushPayloadSerializer_add41_failAssert40_add2635__19 = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", o_testPartialPushPayloadSerializer_add41_failAssert40_add2635__19);
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add41 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43813() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3)).getInApp())).isPresent();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add42_failAssert41_add2884() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__16)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__16)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__16)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__16)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__16)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__16)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__16)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__16)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__16)).getInApp())).isPresent());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).getFields())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).getFieldNames())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).isObject());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).getNumberType());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).isNull());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).getValueAsBoolean());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).getIntValue())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).isBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22)).isValueNode());
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add42 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add41_failAssert40_add2634() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String o_testPartialPushPayloadSerializer_add41_failAssert40_add2634__23 = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", o_testPartialPushPayloadSerializer_add41_failAssert40_add2634__23);
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add41 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add19049() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getDecimalValue())).toString();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add42_failAssert41_add2880() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__16)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__16)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__16)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__16)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__16)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__16)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__16)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__16)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__16)).getInApp())).isPresent());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).getFields())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).getFieldNames())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).isObject());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).getNumberType());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).isNull());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).getValueAsBoolean());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).getIntValue())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).isBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20)).isValueNode());
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add42 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23467_failAssert111_add23725() throws Exception {
        try {
            VariantPushPayload.newBuilder();
            VariantPushPayload o_testPartialPushPayloadSerializer_add23467_failAssert111_add23725__4 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23467_failAssert111_add23725__4)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23467_failAssert111_add23725__4)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23467_failAssert111_add23725__4)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23467_failAssert111_add23725__4)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23467_failAssert111_add23725__4)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23467_failAssert111_add23725__4)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23467_failAssert111_add23725__4)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23467_failAssert111_add23725__4)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23467_failAssert111_add23725__4)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23467 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26491() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            Notification.newBuilder().setAlert("hello everyone");
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3104_add13434() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3104_add13434__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104_add13434__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104_add13434__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104_add13434__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104_add13434__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104_add13434__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104_add13434__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104_add13434__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104_add13434__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104_add13434__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26496() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            InApp o_testPartialPushPayloadSerializer_add23465_failAssert109_add26496__12 = InApp.newBuilder().setAlert("This is in-app!").build();
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26496__12)).getExtra())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26496__12)).getExtra())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26496__12)).getExtra())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26496__12)).getExpiry())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26496__12)).getExpiry())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26496__12)).getExpiry())).hashCode())));
            Assert.assertEquals("This is in-app!", ((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26496__12)).getAlert());
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26496__12)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26496__12)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26496__12)).getInteractive())).hashCode())));
            Assert.assertEquals("banner", ((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26496__12)).getDisplayType());
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26496__12)).getDisplay())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26496__12)).getDisplay())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26496__12)).getDisplay())).hashCode())));
            Assert.assertEquals("InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()}", ((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26496__12)).toString());
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26496__12)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26496__12)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26496__12)).getActions())).hashCode())));
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26103() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26103__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26103__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26103__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26103__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26103__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26103__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26103__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26103__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26103__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26103__3)).toString());
            Notification.newBuilder();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26499() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            InApp.newBuilder().setAlert("This is in-app!");
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20520() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3)).getNotification())).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26106() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__3)).toString());
            InApp o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__13 = InApp.newBuilder().setAlert("This is in-app!").build();
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__13)).getExtra())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__13)).getExtra())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__13)).getExtra())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__13)).getExpiry())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__13)).getExpiry())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__13)).getExpiry())).hashCode())));
            Assert.assertEquals("This is in-app!", ((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__13)).getAlert());
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__13)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__13)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__13)).getInteractive())).hashCode())));
            Assert.assertEquals("banner", ((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__13)).getDisplayType());
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__13)).getDisplay())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__13)).getDisplay())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__13)).getDisplay())).hashCode())));
            Assert.assertEquals("InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()}", ((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__13)).toString());
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__13)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__13)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26106__13)).getActions())).hashCode())));
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26494() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            Notification.newBuilder();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20515() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3)).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45527() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            ((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getFieldNames())).hasNext();
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26489() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            Notification o_testPartialPushPayloadSerializer_add23465_failAssert109_add26489__12 = Notification.newBuilder().setAlert("hello everyone").build();
            Assert.assertTrue(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26489__12)).getAlert())).isPresent());
            Assert.assertEquals("hello everyone", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26489__12)).getAlert())).get());
            Assert.assertEquals("Optional.of(hello everyone)", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26489__12)).getAlert())).toString());
            Assert.assertEquals(-906285547, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26489__12)).getAlert())).hashCode())));
            Assert.assertTrue(((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26489__12)).getDeviceTypePayloadOverrides().isEmpty());
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26489__12)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26489__12)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26489__12)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26489__12)).getOverrideDeviceTypes())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26489__12)).getOverrideDeviceTypes())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26489__12)).getOverrideDeviceTypes())).hashCode())));
            Assert.assertEquals("Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}", ((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26489__12)).toString());
            Assert.assertEquals(-108459316, ((int) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26489__12)).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26489__12)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26489__12)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26489__12)).getActions())).hashCode())));
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26110() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26110__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26110__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26110__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26110__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26110__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26110__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26110__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26110__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26110__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26110__3)).toString());
            InApp.newBuilder().setAlert("This is in-app!");
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20638() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19594() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3)).getPushOptions())).isPresent();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43923() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getFieldNames())).hasNext();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1734() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).getFields())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).getFieldNames())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).isObject());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).getNumberType());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).isNull());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).getValueAsBoolean());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).getIntValue())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).isBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1734__30)).isValueNode());
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23467_failAssert111_add23729() throws Exception {
        try {
            VariantPushPayload.newBuilder();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23467 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1737() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).getFields())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).getFieldNames())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).isObject());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).getNumberType());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).isNull());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).getValueAsBoolean());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).getIntValue())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).isBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1737__26)).isValueNode());
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2368() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2368__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2368__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2368__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2368__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2368__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2368__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2368__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2368__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2368__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2368__3)).getInApp())).isPresent());
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2368__13 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2368__13)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2368__13)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2368__13)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2368__13)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2368__13)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2368__13)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2368__13)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2368__13)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2368__13)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43710() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43710__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43710__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43710__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43710__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43710__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43710__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43710__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43710__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43710__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43710__3)).toString());
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add42_failAssert41_add2866() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String o_testPartialPushPayloadSerializer_add42_failAssert41_add2866__14 = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", o_testPartialPushPayloadSerializer_add42_failAssert41_add2866__14);
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add42_failAssert41_add2866__17 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2866__17)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2866__17)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2866__17)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2866__17)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2866__17)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2866__17)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2866__17)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2866__17)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2866__17)).getInApp())).isPresent());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add42 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26486() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload.newBuilder();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26137() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26137__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26137__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26137__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26137__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26137__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26137__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26137__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26137__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26137__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26137__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45431() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3)).getNotification())).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3104_add13441() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26482() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload o_testPartialPushPayloadSerializer_add23465_failAssert109_add26482__12 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26482__12)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26482__12)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26482__12)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26482__12)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26482__12)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26482__12)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26482__12)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26482__12)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26482__12)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26483() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20632() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26484() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20745() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            ((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getFieldNames())).hasNext();
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1729() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getFields())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getFieldNames())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).isObject());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getNumberType());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).isNull());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getValueAsBoolean());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getIntValue())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).isBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).isValueNode());
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20625() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20625__15 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20625__15)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20625__15)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20625__15)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20625__15)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20625__15)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20625__15)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20625__15)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20625__15)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20625__15)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26478() throws Exception {
        try {
            InApp.newBuilder();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26142() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26142__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26142__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26142__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26142__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26142__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26142__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26142__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26142__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26142__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26142__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            expected.getMessage();
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43715() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19683() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19683__28 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19683__28)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19683__28)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19683__28)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19683__28)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19683__28)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19683__28)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19683__28)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19683__28)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19683__28)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43835() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3)).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43719() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43958() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).isContainerNode();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2379() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2379__8 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2379__8)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2379__8)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2379__8)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2379__8)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2379__8)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2379__8)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2379__8)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2379__8)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2379__8)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add36_failAssert35() throws Exception {
        try {
            Notification.newBuilder().setAlert("hello everyone");
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add36 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2374() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2374__12 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2374__12)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2374__12)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2374__12)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2374__12)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2374__12)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2374__12)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2374__12)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2374__12)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2374__12)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add42_failAssert41_add2876() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add42_failAssert41_add2876__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2876__16)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2876__16)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2876__16)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2876__16)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2876__16)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2876__16)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2876__16)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2876__16)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2876__16)).getInApp())).isPresent());
            VariantPushPayload o_testPartialPushPayloadSerializer_add42_failAssert41_add2876__17 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2876__17)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2876__17)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2876__17)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2876__17)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2876__17)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2876__17)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2876__17)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2876__17)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2876__17)).getInApp())).isPresent());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add42 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25207_add43763() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207_add43763__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207_add43763__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207_add43763__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207_add43763__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207_add43763__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207_add43763__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207_add43763__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207_add43763__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207_add43763__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207_add43763__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add41_failAssert40_add2663() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String o_testPartialPushPayloadSerializer_add41_failAssert40_add2663__14 = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", o_testPartialPushPayloadSerializer_add41_failAssert40_add2663__14);
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add41_failAssert40_add2663__17 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add41_failAssert40_add2663__17)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add41_failAssert40_add2663__17)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add41_failAssert40_add2663__17)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add41_failAssert40_add2663__17)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add41_failAssert40_add2663__17)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add41_failAssert40_add2663__17)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add41_failAssert40_add2663__17)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add41_failAssert40_add2663__17)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add41_failAssert40_add2663__17)).getInApp())).isPresent());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add41 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).isObject());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getFieldNames())).hasNext());
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getFields())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getNumberType());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getValueAsBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).isValueNode());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getIntValue())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).isBoolean());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).isNull());
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26474() throws Exception {
        try {
            InApp.newBuilder().setAlert("This is in-app!");
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45543() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            ((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getFields())).hasNext();
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26470() throws Exception {
        try {
            InApp o_testPartialPushPayloadSerializer_add23465_failAssert109_add26470__3 = InApp.newBuilder().setAlert("This is in-app!").build();
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26470__3)).getExtra())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26470__3)).getExtra())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26470__3)).getExtra())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26470__3)).getExpiry())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26470__3)).getExpiry())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26470__3)).getExpiry())).hashCode())));
            Assert.assertEquals("This is in-app!", ((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26470__3)).getAlert());
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26470__3)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26470__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26470__3)).getInteractive())).hashCode())));
            Assert.assertEquals("banner", ((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26470__3)).getDisplayType());
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26470__3)).getDisplay())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26470__3)).getDisplay())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26470__3)).getDisplay())).hashCode())));
            Assert.assertEquals("InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()}", ((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26470__3)).toString());
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26470__3)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26470__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26470__3)).getActions())).hashCode())));
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26128() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).isObject());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getFieldNames())).hasNext());
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getFields())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getNumberType());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getValueAsBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).isValueNode());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getIntValue())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).isBoolean());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).isNull());
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20863() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getBigIntegerValue())).toString();
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19570() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3)).getPushOptions())).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26132() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26132__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26132__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26132__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26132__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26132__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26132__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26132__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26132__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26132__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26132__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45424() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3)).getNotification())).isPresent();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43946() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getFields())).hasNext();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43824() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3)).getInApp())).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21591() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3)).getNotification())).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add42_failAssert41_add2870() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add42_failAssert41_add2870__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2870__16)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2870__16)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2870__16)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2870__16)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2870__16)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2870__16)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2870__16)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2870__16)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2870__16)).getInApp())).isPresent());
            VariantPushPayload o_testPartialPushPayloadSerializer_add42_failAssert41_add2870__17 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2870__17)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2870__17)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2870__17)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2870__17)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2870__17)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2870__17)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2870__17)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2870__17)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2870__17)).getInApp())).isPresent());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add42 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2423() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2423__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2423__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2423__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2423__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2423__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2423__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2423__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2423__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2423__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2423__3)).getInApp())).isPresent());
            Notification.newBuilder().setAlert("hello everyone");
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23467_failAssert111() throws Exception {
        try {
            VariantPushPayload.newBuilder();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23467 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25207_add43771() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2421() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__3)).getInApp())).isPresent());
            Notification o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__13 = Notification.newBuilder().setAlert("hello everyone").build();
            Assert.assertEquals("Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}", ((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__13)).toString());
            Assert.assertEquals(-108459316, ((int) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__13)).hashCode())));
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__13)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__13)).getActions())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__13)).getActions())).isPresent());
            Assert.assertEquals("hello everyone", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__13)).getAlert())).get());
            Assert.assertEquals("Optional.of(hello everyone)", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__13)).getAlert())).toString());
            Assert.assertEquals(-906285547, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__13)).getAlert())).hashCode())));
            Assert.assertTrue(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__13)).getAlert())).isPresent());
            Assert.assertTrue(((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__13)).getDeviceTypePayloadOverrides().isEmpty());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__13)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__13)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__13)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__13)).getOverrideDeviceTypes())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__13)).getOverrideDeviceTypes())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2421__13)).getOverrideDeviceTypes())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26465() throws Exception {
        try {
            Notification.newBuilder();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23466_failAssert110_add26720() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23466 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45451() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3)).getPushOptions())).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26461() throws Exception {
        try {
            Notification.newBuilder().setAlert("hello everyone");
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add38_failAssert37_add1342() throws Exception {
        try {
            InApp o_testPartialPushPayloadSerializer_add38_failAssert37_add1342__3 = InApp.newBuilder().setAlert("This is in-app!").build();
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1342__3)).getExtra())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1342__3)).getExtra())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1342__3)).getExtra())).isPresent());
            Assert.assertEquals("InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()}", ((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1342__3)).toString());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1342__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1342__3)).getActions())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1342__3)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1342__3)).getExpiry())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1342__3)).getExpiry())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1342__3)).getExpiry())).isPresent());
            Assert.assertEquals("This is in-app!", ((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1342__3)).getAlert());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1342__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1342__3)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1342__3)).getInteractive())).isPresent());
            Assert.assertEquals("banner", ((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1342__3)).getDisplayType());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1342__3)).getDisplay())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1342__3)).getDisplay())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1342__3)).getDisplay())).isPresent());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add38 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2426() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2426__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2426__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2426__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2426__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2426__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2426__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2426__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2426__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2426__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2426__3)).getInApp())).isPresent());
            Notification.newBuilder();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44843() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2434() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2434__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2434__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2434__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2434__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2434__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2434__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2434__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2434__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2434__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2434__3)).getInApp())).isPresent());
            InApp.newBuilder().setAlert("This is in-app!");
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2430() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__3)).getInApp())).isPresent());
            InApp o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__13 = InApp.newBuilder().setAlert("This is in-app!").build();
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__13)).getExtra())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__13)).getExtra())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__13)).getExtra())).isPresent());
            Assert.assertEquals("InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()}", ((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__13)).toString());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__13)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__13)).getActions())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__13)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__13)).getExpiry())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__13)).getExpiry())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__13)).getExpiry())).isPresent());
            Assert.assertEquals("This is in-app!", ((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__13)).getAlert());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__13)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__13)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__13)).getInteractive())).isPresent());
            Assert.assertEquals("banner", ((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__13)).getDisplayType());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__13)).getDisplay())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__13)).getDisplay())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2430__13)).getDisplay())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add46_failAssert45() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add46 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45444() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3)).getPushOptions())).isPresent();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26454() throws Exception {
        try {
            Notification o_testPartialPushPayloadSerializer_add23465_failAssert109_add26454__3 = Notification.newBuilder().setAlert("hello everyone").build();
            Assert.assertTrue(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26454__3)).getAlert())).isPresent());
            Assert.assertEquals("hello everyone", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26454__3)).getAlert())).get());
            Assert.assertEquals("Optional.of(hello everyone)", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26454__3)).getAlert())).toString());
            Assert.assertEquals(-906285547, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26454__3)).getAlert())).hashCode())));
            Assert.assertTrue(((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26454__3)).getDeviceTypePayloadOverrides().isEmpty());
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26454__3)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26454__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26454__3)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26454__3)).getOverrideDeviceTypes())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26454__3)).getOverrideDeviceTypes())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26454__3)).getOverrideDeviceTypes())).hashCode())));
            Assert.assertEquals("Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}", ((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26454__3)).toString());
            Assert.assertEquals(-108459316, ((int) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26454__3)).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26454__3)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26454__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26454__3)).getActions())).hashCode())));
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add33_failAssert32_add3098() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload o_testPartialPushPayloadSerializer_add33_failAssert32_add3098__8 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3098__8)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3098__8)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3098__8)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3098__8)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3098__8)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3098__8)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3098__8)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3098__8)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3098__8)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add33 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45940() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45940__28 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45940__28)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45940__28)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45940__28)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45940__28)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45940__28)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45940__28)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45940__28)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45940__28)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45940__28)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26450() throws Exception {
        try {
            VariantPushPayload.newBuilder();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18788() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3)).getPushOptions())).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26446() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18781() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3)).getNotification())).isPresent();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2437() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2437__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2437__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2437__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2437__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2437__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2437__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2437__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2437__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2437__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2437__3)).getInApp())).isPresent());
            InApp.newBuilder();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44852() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19558() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3)).getNotification())).isPresent();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44976() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getFields())).hasNext();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2444() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2444__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2444__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2444__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2444__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2444__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2444__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2444__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2444__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2444__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2444__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2444__26 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2444__26)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2444__26)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2444__26)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2444__26)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2444__26)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2444__26)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2444__26)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2444__26)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2444__26)).getInApp())).isPresent());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23475_failAssert119_add24922() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23475_failAssert119_add24922__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24922__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24922__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24922__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24922__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24922__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24922__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24922__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24922__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24922__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23475_failAssert119_add24922__26 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24922__26)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24922__26)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24922__26)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24922__26)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24922__26)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24922__26)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24922__26)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24922__26)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24922__26)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23475 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_literalMutationString2580() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This iszin-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23475_failAssert119_add24926() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23475_failAssert119_add24926__25 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24926__25)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24926__25)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24926__25)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24926__25)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24926__25)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24926__25)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24926__25)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24926__25)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24926__25)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23475 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2441() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2441__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2441__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2441__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2441__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2441__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2441__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2441__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2441__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2441__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2441__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String o_testPartialPushPayloadSerializer_add31_failAssert30_add2441__24 = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", o_testPartialPushPayloadSerializer_add31_failAssert30_add2441__24);
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1762() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__16)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__16)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__16)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__16)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__16)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__16)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__16)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__16)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__16)).getInApp())).isPresent());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).getFields())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).getFieldNames())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).isObject());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).getNumberType());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).isNull());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).getValueAsBoolean());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).getIntValue())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).isBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22)).isValueNode());
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26441() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23466_failAssert110_add26702() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            Notification.newBuilder().setAlert("hello everyone");
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23466 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23466_failAssert110_add26701() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            Notification o_testPartialPushPayloadSerializer_add23466_failAssert110_add26701__8 = Notification.newBuilder().setAlert("hello everyone").build();
            Assert.assertTrue(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26701__8)).getAlert())).isPresent());
            Assert.assertEquals("hello everyone", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26701__8)).getAlert())).get());
            Assert.assertEquals("Optional.of(hello everyone)", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26701__8)).getAlert())).toString());
            Assert.assertEquals(-906285547, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26701__8)).getAlert())).hashCode())));
            Assert.assertTrue(((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26701__8)).getDeviceTypePayloadOverrides().isEmpty());
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26701__8)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26701__8)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26701__8)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26701__8)).getOverrideDeviceTypes())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26701__8)).getOverrideDeviceTypes())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26701__8)).getOverrideDeviceTypes())).hashCode())));
            Assert.assertEquals("Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}", ((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26701__8)).toString());
            Assert.assertEquals(-108459316, ((int) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26701__8)).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26701__8)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26701__8)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26701__8)).getActions())).hashCode())));
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23466 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45956() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            ((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getFieldNames())).hasNext();
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23466_failAssert110_add26704() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            InApp o_testPartialPushPayloadSerializer_add23466_failAssert110_add26704__8 = InApp.newBuilder().setAlert("This is in-app!").build();
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26704__8)).getExtra())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26704__8)).getExtra())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26704__8)).getExtra())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26704__8)).getExpiry())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26704__8)).getExpiry())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26704__8)).getExpiry())).hashCode())));
            Assert.assertEquals("This is in-app!", ((InApp) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26704__8)).getAlert());
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26704__8)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26704__8)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26704__8)).getInteractive())).hashCode())));
            Assert.assertEquals("banner", ((InApp) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26704__8)).getDisplayType());
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26704__8)).getDisplay())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26704__8)).getDisplay())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26704__8)).getDisplay())).hashCode())));
            Assert.assertEquals("InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()}", ((InApp) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26704__8)).toString());
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26704__8)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26704__8)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26704__8)).getActions())).hashCode())));
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23466 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45832() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45832__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45832__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45832__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45832__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45832__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45832__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45832__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45832__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45832__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45832__3)).toString());
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45951() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            ((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getElements())).hasNext();
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add35_failAssert34_add576() throws Exception {
        try {
            Notification o_testPartialPushPayloadSerializer_add35_failAssert34_add576__3 = Notification.newBuilder().setAlert("hello everyone").build();
            Assert.assertEquals("Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}", ((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__3)).toString());
            Assert.assertEquals(-108459316, ((int) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__3)).hashCode())));
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__3)).getActions())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__3)).getActions())).isPresent());
            Assert.assertEquals("hello everyone", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__3)).getAlert())).get());
            Assert.assertEquals("Optional.of(hello everyone)", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__3)).getAlert())).toString());
            Assert.assertEquals(-906285547, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__3)).getAlert())).hashCode())));
            Assert.assertTrue(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__3)).getAlert())).isPresent());
            Assert.assertTrue(((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__3)).getDeviceTypePayloadOverrides().isEmpty());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__3)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__3)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__3)).getOverrideDeviceTypes())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__3)).getOverrideDeviceTypes())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__3)).getOverrideDeviceTypes())).isPresent());
            VariantPushPayload o_testPartialPushPayloadSerializer_add35_failAssert34_add576__6 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__6)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__6)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__6)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__6)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__6)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__6)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__6)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__6)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add35_failAssert34_add576__6)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add35 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45471() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3)).getInApp())).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23466_failAssert110_add26709() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String o_testPartialPushPayloadSerializer_add23466_failAssert110_add26709__19 = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", o_testPartialPushPayloadSerializer_add23466_failAssert110_add26709__19);
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23466 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44828() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3)).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45839() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44948() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getFieldNames())).hasNext();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45836() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45599() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31)).getBigIntegerValue())).toString();
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45479() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3)).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add43912() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getElements())).hasNext();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add46_failAssert45_add2194() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add46_failAssert45_add2194__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add46_failAssert45_add2194__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add46_failAssert45_add2194__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add46_failAssert45_add2194__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add46_failAssert45_add2194__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add46_failAssert45_add2194__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add46_failAssert45_add2194__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add46_failAssert45_add2194__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add46_failAssert45_add2194__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add46_failAssert45_add2194__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add46 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_literalMutationString2587() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is iQn-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44940() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getElements())).hasNext();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2447() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getFields())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getFieldNames())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).isObject());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getNumberType());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).isNull());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getValueAsBoolean());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getIntValue())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).isBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).isValueNode());
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add35_failAssert34() throws Exception {
        try {
            Notification.newBuilder().setAlert("hello everyone").build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add35 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2456() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2456__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2456__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2456__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2456__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2456__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2456__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2456__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2456__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2456__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2456__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add33_failAssert32() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add33 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2451() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getFields())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getFieldNames())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).isObject());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getNumberType());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).isNull());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getValueAsBoolean());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getIntValue())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).isBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).isValueNode());
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23475_failAssert119_add24937() throws Exception {
        try {
            Notification o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__3 = Notification.newBuilder().setAlert("hello everyone").build();
            Assert.assertTrue(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__3)).getAlert())).isPresent());
            Assert.assertEquals("hello everyone", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__3)).getAlert())).get());
            Assert.assertEquals("Optional.of(hello everyone)", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__3)).getAlert())).toString());
            Assert.assertEquals(-906285547, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__3)).getAlert())).hashCode())));
            Assert.assertTrue(((Notification) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__3)).getDeviceTypePayloadOverrides().isEmpty());
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__3)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__3)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__3)).getOverrideDeviceTypes())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__3)).getOverrideDeviceTypes())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__3)).getOverrideDeviceTypes())).hashCode())));
            Assert.assertEquals("Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}", ((Notification) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__3)).toString());
            Assert.assertEquals(-108459316, ((int) (((Notification) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__3)).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__3)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__3)).getActions())).hashCode())));
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__19 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__19)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__19)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__19)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__19)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__19)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__19)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__19)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__19)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24937__19)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23475 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23466_failAssert110_add26712() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23466_failAssert110_add26712__21 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26712__21)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26712__21)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26712__21)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26712__21)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26712__21)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26712__21)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26712__21)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26712__21)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26712__21)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23466 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23466_failAssert110_add26714() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).isObject());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).getFieldNames())).hasNext());
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).getFields())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).getNumberType());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).getValueAsBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).isValueNode());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).getIntValue())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).isBoolean());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26714__24)).isNull());
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23466 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45464() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3)).getInApp())).isPresent();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23475_failAssert119_add24931() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23475_failAssert119_add24931__21 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24931__21)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24931__21)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24931__21)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24931__21)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24931__21)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24931__21)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24931__21)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24931__21)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24931__21)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23475 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23468_failAssert112() throws Exception {
        try {
            Notification.newBuilder().setAlert("hello everyone").build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23468 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2181() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2181__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("Tpis is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=Tpis is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2181__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2181__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2181__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2181__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2181__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2181__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2181__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=Tpis is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2181__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2181__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44836() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44836__15 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44836__15)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44836__15)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44836__15)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44836__15)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44836__15)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44836__15)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44836__15)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44836__15)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44836__15)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23466_failAssert110_add26716() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).isObject());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).getFieldNames())).hasNext());
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).getFields())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).getNumberType());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).getValueAsBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).isValueNode());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).getIntValue())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).isBoolean());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26716__26)).isNull());
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23466 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45968() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            ((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31)).getFields())).hasNext();
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19890() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getDecimalValue())).toString();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_literalMutationString2571() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("eYsLT/@!]){7LFQ").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19531() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3)).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_literalMutationString2576() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("At least one variant must be present.").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19536() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3)).getNotification())).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45491() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25838() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25838__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25838__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25838__3)).getNotification())).toString());
            Assert.assertEquals(512722817, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25838__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25838__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25838__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25838__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25838__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25838__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25838__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23472_failAssert116_add25087() throws Exception {
        try {
            InApp.newBuilder().setAlert("This is in-app!");
            VariantPushPayload o_testPartialPushPayloadSerializer_add23472_failAssert116_add25087__5 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23472_failAssert116_add25087__5)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23472_failAssert116_add25087__5)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23472_failAssert116_add25087__5)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23472_failAssert116_add25087__5)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23472_failAssert116_add25087__5)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23472_failAssert116_add25087__5)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23472_failAssert116_add25087__5)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23472_failAssert116_add25087__5)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23472_failAssert116_add25087__5)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23472 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25839() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25839__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("At least one variant must be present.").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25839__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(At least one variant must be present.), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25839__3)).getNotification())).toString());
            Assert.assertEquals(521026511, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25839__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25839__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25839__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25839__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25839__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25839__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(At least one variant must be present.), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25839__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2179() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2179__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("bDa(;k]3PYV@-[o").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=bDa(;k]3PYV@-[o, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2179__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2179__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2179__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2179__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2179__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2179__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2179__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=bDa(;k]3PYV@-[o, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2179__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2179__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23475_failAssert119_add24940() throws Exception {
        try {
            Notification.newBuilder().setAlert("hello everyone");
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23475_failAssert119_add24940__18 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24940__18)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24940__18)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24940__18)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24940__18)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24940__18)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24940__18)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24940__18)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24940__18)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24940__18)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23475 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2177() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2177__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("At least one variant must be present.").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=At least one variant must be present., displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2177__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2177__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2177__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2177__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2177__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2177__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2177__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=At least one variant must be present., displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2177__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2177__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3069() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).getFields())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).getFieldNames())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).isObject());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).getNumberType());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).isNull());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).getValueAsBoolean());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).getIntValue())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).isBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3069__28)).isValueNode());
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2172() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2172__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("Ths is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=Ths is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2172__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2172__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2172__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2172__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2172__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2172__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2172__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=Ths is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2172__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2172__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1762_add4168() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25177() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).isObject());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).getFieldNames())).hasNext());
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).getFields())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).getNumberType());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).getValueAsBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).isValueNode());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).getIntValue())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).isBoolean());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25177__24)).isNull());
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25171() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).isObject());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).getFieldNames())).hasNext());
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).getFields())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).getNumberType());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).getValueAsBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).isValueNode());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).getIntValue())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).isBoolean());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25171__28)).isNull());
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getFields())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getFieldNames())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).isObject());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getNumberType());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).isNull());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getValueAsBoolean());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getIntValue())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).isBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).isValueNode());
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23472_failAssert116_add25093() throws Exception {
        try {
            InApp.newBuilder().setAlert("This is in-app!");
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23472 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19620() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19620__15 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19620__15)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19620__15)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19620__15)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19620__15)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19620__15)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19620__15)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19620__15)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19620__15)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19620__15)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1762_add4160() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1762_add4160__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762_add4160__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762_add4160__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762_add4160__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762_add4160__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762_add4160__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762_add4160__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762_add4160__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762_add4160__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1762_add4160__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1762__22 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25840() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25840__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("X3|,#&V1ZFZ]ZI").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25840__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(X3|,#&V1ZFZ]ZI), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25840__3)).getNotification())).toString());
            Assert.assertEquals(1827574266, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25840__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25840__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25840__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25840__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25840__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25840__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(X3|,#&V1ZFZ]ZI), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25840__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25841() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25841__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello evqeryone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25841__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello evqeryone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25841__3)).getNotification())).toString());
            Assert.assertEquals(-1557729675, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25841__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25841__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25841__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25841__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25841__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25841__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello evqeryone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25841__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25842() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25842__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("he`lo everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25842__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(he`lo everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25842__3)).getNotification())).toString());
            Assert.assertEquals(483264732, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25842__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25842__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25842__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25842__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25842__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25842__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(he`lo everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25842__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25843() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25843__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyoe").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25843__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyoe), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25843__3)).getNotification())).toString());
            Assert.assertEquals(679333822, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25843__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25843__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25843__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25843__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25843__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25843__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyoe), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25843__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25844() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25844__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25844__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25844__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25844__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25844__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25844__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25844__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25844__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25844__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25844__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19626() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25846() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25846__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("P.`Zs2s#)3)aYZ+").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25846__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25846__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25846__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25846__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25846__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25846__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25846__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=P.`Zs2s#)3)aYZ+, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25846__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=P.`Zs2s#)3)aYZ+, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25846__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add35_failAssert34_add582() throws Exception {
        try {
            Notification o_testPartialPushPayloadSerializer_add35_failAssert34_add582__3 = Notification.newBuilder().setAlert("hello everyone").build();
            Assert.assertEquals("Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}", ((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add582__3)).toString());
            Assert.assertEquals(-108459316, ((int) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add582__3)).hashCode())));
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add582__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add582__3)).getActions())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add582__3)).getActions())).isPresent());
            Assert.assertEquals("hello everyone", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add582__3)).getAlert())).get());
            Assert.assertEquals("Optional.of(hello everyone)", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add582__3)).getAlert())).toString());
            Assert.assertEquals(-906285547, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add582__3)).getAlert())).hashCode())));
            Assert.assertTrue(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add582__3)).getAlert())).isPresent());
            Assert.assertTrue(((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add582__3)).getDeviceTypePayloadOverrides().isEmpty());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add582__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add582__3)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add582__3)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add582__3)).getOverrideDeviceTypes())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add582__3)).getOverrideDeviceTypes())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add582__3)).getOverrideDeviceTypes())).isPresent());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add35 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25848() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25848__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("At least one variant must be present.").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25848__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25848__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25848__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25848__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25848__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25848__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25848__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=At least one variant must be present., displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25848__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=At least one variant must be present., displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25848__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add34_failAssert33_add299() throws Exception {
        try {
            VariantPushPayload.newBuilder();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add34 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45487() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add34_failAssert33_add296() throws Exception {
        try {
            VariantPushPayload.newBuilder();
            VariantPushPayload o_testPartialPushPayloadSerializer_add34_failAssert33_add296__4 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add34_failAssert33_add296__4)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add34_failAssert33_add296__4)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add34_failAssert33_add296__4)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add34_failAssert33_add296__4)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add34_failAssert33_add296__4)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add34_failAssert33_add296__4)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add34_failAssert33_add296__4)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add34_failAssert33_add296__4)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add34_failAssert33_add296__4)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add34 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2169() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2169__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("Th^is is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=Th^is is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2169__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2169__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2169__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2169__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2169__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2169__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2169__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=Th^is is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2169__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2169__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45483() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45483__15 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45483__15)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45483__15)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45483__15)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45483__15)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45483__15)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45483__15)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45483__15)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45483__15)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45483__15)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add44055() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getBigIntegerValue())).toString();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add35_failAssert34_add586() throws Exception {
        try {
            Notification o_testPartialPushPayloadSerializer_add35_failAssert34_add586__3 = Notification.newBuilder().setAlert("hello everyone").build();
            Assert.assertEquals("Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}", ((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add586__3)).toString());
            Assert.assertEquals(-108459316, ((int) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add586__3)).hashCode())));
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add586__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add586__3)).getActions())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add586__3)).getActions())).isPresent());
            Assert.assertEquals("hello everyone", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add586__3)).getAlert())).get());
            Assert.assertEquals("Optional.of(hello everyone)", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add586__3)).getAlert())).toString());
            Assert.assertEquals(-906285547, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add586__3)).getAlert())).hashCode())));
            Assert.assertTrue(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add586__3)).getAlert())).isPresent());
            Assert.assertTrue(((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add586__3)).getDeviceTypePayloadOverrides().isEmpty());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add586__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add586__3)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add586__3)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add586__3)).getOverrideDeviceTypes())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add586__3)).getOverrideDeviceTypes())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add35_failAssert34_add586__3)).getOverrideDeviceTypes())).isPresent());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add35 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2165() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2165__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2165__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2165__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2165__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2165__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2165__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2165__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2165__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2165__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2165__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add45_failAssert44() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add45 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45907() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3)).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26522() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45902() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3)).getInApp())).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add44_failAssert43_add1729_add20915() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add44_failAssert43_add1729__31)).getDecimalValue())).toString();
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add44 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26525() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            expected.getMessage();
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3072() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).getFields())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).getFieldNames())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).isObject());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).getNumberType());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).isNull());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).getValueAsBoolean());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).getIntValue())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).isBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3072__24)).isValueNode());
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23469_failAssert113_add24296() throws Exception {
        try {
            Notification.newBuilder().setAlert("hello everyone");
            VariantPushPayload o_testPartialPushPayloadSerializer_add23469_failAssert113_add24296__5 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23469_failAssert113_add24296__5)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23469_failAssert113_add24296__5)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23469_failAssert113_add24296__5)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23469_failAssert113_add24296__5)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23469_failAssert113_add24296__5)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23469_failAssert113_add24296__5)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23469_failAssert113_add24296__5)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23469_failAssert113_add24296__5)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23469_failAssert113_add24296__5)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23469 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25851() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25851__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-a0p!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25851__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25851__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25851__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25851__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25851__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25851__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25851__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-a0p!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25851__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-a0p!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25851__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19633() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25854() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25854__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is iUn-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25854__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25854__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25854__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25854__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25854__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25854__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25854__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is iUn-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25854__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is iUn-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25854__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44778() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3)).getPushOptions())).isPresent();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2400() throws Exception {
        try {
            InApp.newBuilder();
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2400__4 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2400__4)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2400__4)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2400__4)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2400__4)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2400__4)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2400__4)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2400__4)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2400__4)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2400__4)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25857() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25857__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("Thisis in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25857__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25857__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25857__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25857__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25857__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25857__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25857__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=Thisis in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25857__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=Thisis in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_literalMutationString25857__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45392() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45392__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45392__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45392__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45392__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45392__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45392__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45392__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45392__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45392__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45392__3)).toString());
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23475_failAssert119_add24969() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23475_failAssert119_add24969__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24969__16)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24969__16)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24969__16)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24969__16)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24969__16)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24969__16)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24969__16)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24969__16)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24969__16)).toString());
            VariantPushPayload o_testPartialPushPayloadSerializer_add23475_failAssert119_add24969__17 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24969__17)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24969__17)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24969__17)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24969__17)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24969__17)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24969__17)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24969__17)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24969__17)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24969__17)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23475 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19719() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getElements())).hasNext();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2157() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2157__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("helo everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(helo everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2157__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(helo everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2157__3)).getNotification())).toString());
            Assert.assertEquals(-1110801066, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2157__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2157__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2157__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2157__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2157__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2157__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2157__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23475_failAssert119_add24960() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String o_testPartialPushPayloadSerializer_add23475_failAssert119_add24960__14 = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", o_testPartialPushPayloadSerializer_add23475_failAssert119_add24960__14);
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23475_failAssert119_add24960__17 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24960__17)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24960__17)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24960__17)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24960__17)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24960__17)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24960__17)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24960__17)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24960__17)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24960__17)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23475 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45910() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45910__15 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45910__15)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45910__15)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45910__15)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45910__15)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45910__15)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45910__15)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45910__15)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45910__15)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45910__15)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45398() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2152() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2152__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hell| everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hell| everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2152__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hell| everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2152__3)).getNotification())).toString());
            Assert.assertEquals(1874745461, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2152__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2152__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2152__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2152__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2152__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2152__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2152__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26128_add45396() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26128__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add44087() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getDecimalValue())).toString();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23475_failAssert119_add24965() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23475_failAssert119_add24965__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24965__16)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24965__16)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24965__16)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24965__16)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24965__16)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24965__16)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24965__16)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24965__16)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24965__16)).toString());
            VariantPushPayload o_testPartialPushPayloadSerializer_add23475_failAssert119_add24965__17 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24965__17)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24965__17)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24965__17)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24965__17)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24965__17)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24965__17)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24965__17)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24965__17)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24965__17)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23475 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26517() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45915() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26513() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).isObject());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).getFieldNames())).hasNext());
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).getFields())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).getNumberType());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).getValueAsBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).isValueNode());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).getIntValue())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).isBoolean());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26513__30)).isNull());
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45913() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2409() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2409__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2409__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2409__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2409__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2409__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2409__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2409__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2409__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2409__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2409__3)).getInApp())).isPresent());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19842() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getBigIntegerValue())).toString();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2405() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2405__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2405__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2405__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2405__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2405__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2405__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2405__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2405__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2405__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2405__3)).getInApp())).isPresent());
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2405__13 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2405__13)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2405__13)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2405__13)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2405__13)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2405__13)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2405__13)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2405__13)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2405__13)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2405__13)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44745() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3)).getNotification())).isPresent();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23475_failAssert119_add24977() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__16)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__16)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__16)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__16)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__16)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__16)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__16)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__16)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__16)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).isObject());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).getFieldNames())).hasNext());
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).getFields())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).getNumberType());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).getValueAsBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).isValueNode());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).getIntValue())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).isBoolean());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22)).isNull());
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23475 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19605() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3)).getInApp())).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add34_failAssert33() throws Exception {
        try {
            VariantPushPayload.newBuilder();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add34 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44990() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).isContainerNode();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add38_failAssert37() throws Exception {
        try {
            InApp.newBuilder().setAlert("This is in-app!").build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add38 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2148() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2148__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello evezryone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello evezryone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2148__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello evezryone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2148__3)).getNotification())).toString());
            Assert.assertEquals(1498594326, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2148__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2148__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2148__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2148__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2148__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2148__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2148__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2141() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2141__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("&`UI!I7|s[pL-[").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(&`UI!I7|s[pL-[), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2141__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(&`UI!I7|s[pL-[), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2141__3)).getNotification())).toString());
            Assert.assertEquals(1588212276, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2141__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2141__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2141__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2141__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2141__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2141__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_literalMutationString2141__3)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23475_failAssert119_add24973() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__16)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__16)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__16)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__16)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__16)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__16)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__16)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__16)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__16)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).isObject());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).getFieldNames())).hasNext());
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).getFields())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).getNumberType());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).getValueAsBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).isValueNode());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).getIntValue())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).isBoolean());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24973__20)).isNull());
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23475 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26504() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23465_failAssert109_add26504__25 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26504__25)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26504__25)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26504__25)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26504__25)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26504__25)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26504__25)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26504__25)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26504__25)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26504__25)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).isObject());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getFieldNames())).hasNext());
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getFields())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getNumberType());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getValueAsBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).isValueNode());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getIntValue())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).isBoolean());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).isNull());
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26501() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            InApp.newBuilder();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26502() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String o_testPartialPushPayloadSerializer_add23465_failAssert109_add26502__23 = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", o_testPartialPushPayloadSerializer_add23465_failAssert109_add26502__23);
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2418() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2418__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2418__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2418__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2418__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2418__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2418__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2418__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2418__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2418__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2418__3)).getInApp())).isPresent());
            VariantPushPayload.newBuilder();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2415() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2415__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2415__3)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2415__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2415__3)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2415__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2415__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2415__3)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2415__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2415__3)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2415__3)).getInApp())).isPresent());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19610() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3)).getInApp())).isPresent();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109_add26509() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).isObject());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).getFieldNames())).hasNext());
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).getFields())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).getNumberType());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).getValueAsBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).isValueNode());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).getIntValue())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).isBoolean());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23465_failAssert109_add26509__28)).isNull());
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19733() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getFieldNames())).hasNext();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44755() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3)).getNotification())).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23470_failAssert114_add24546() throws Exception {
        try {
            Notification.newBuilder();
            VariantPushPayload o_testPartialPushPayloadSerializer_add23470_failAssert114_add24546__4 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23470_failAssert114_add24546__4)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23470_failAssert114_add24546__4)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23470_failAssert114_add24546__4)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23470_failAssert114_add24546__4)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23470_failAssert114_add24546__4)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23470_failAssert114_add24546__4)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23470_failAssert114_add24546__4)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23470_failAssert114_add24546__4)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23470_failAssert114_add24546__4)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23470 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add45096() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getDecimalValue())).toString();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19937() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).isIntegralNumber();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add33_failAssert32_add3143() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).getFields())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).getFieldNames())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).isObject());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).getNumberType());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).isNull());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).getValueAsBoolean());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).getIntValue())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).isBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3143__24)).isValueNode());
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add33 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45896() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3)).getInApp())).isPresent();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add42_failAssert41_add2880_add12584() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add42 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add33_failAssert32_add3146() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).getFields())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).getFieldNames())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).isObject());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).getNumberType());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).isNull());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).getValueAsBoolean());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).getIntValue())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).isBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3146__26)).isValueNode());
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add33 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add42_failAssert41_add2884_add9377() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add42_failAssert41_add2884_add9377__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884_add9377__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884_add9377__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884_add9377__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884_add9377__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884_add9377__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884_add9377__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884_add9377__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884_add9377__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2884_add9377__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add42 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18712() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18954() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).isContainerNode();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18831() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3)).getInApp())).isPresent();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21624() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3)).getPushOptions())).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19824() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getValueAsBoolean();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23466_failAssert110_add26694() throws Exception {
        try {
            Notification o_testPartialPushPayloadSerializer_add23466_failAssert110_add26694__3 = Notification.newBuilder().setAlert("hello everyone").build();
            Assert.assertTrue(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26694__3)).getAlert())).isPresent());
            Assert.assertEquals("hello everyone", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26694__3)).getAlert())).get());
            Assert.assertEquals("Optional.of(hello everyone)", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26694__3)).getAlert())).toString());
            Assert.assertEquals(-906285547, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26694__3)).getAlert())).hashCode())));
            Assert.assertTrue(((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26694__3)).getDeviceTypePayloadOverrides().isEmpty());
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26694__3)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26694__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26694__3)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26694__3)).getOverrideDeviceTypes())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26694__3)).getOverrideDeviceTypes())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26694__3)).getOverrideDeviceTypes())).hashCode())));
            Assert.assertEquals("Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}", ((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26694__3)).toString());
            Assert.assertEquals(-108459316, ((int) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26694__3)).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26694__3)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26694__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26694__3)).getActions())).hashCode())));
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23466 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add42_failAssert41_add2880_add12577() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add42_failAssert41_add2880_add12577__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880_add12577__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880_add12577__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880_add12577__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880_add12577__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880_add12577__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880_add12577__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880_add12577__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880_add12577__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add42_failAssert41_add2880_add12577__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add42_failAssert41_add2880__20 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add42 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19944() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).isFloatingPointNumber();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23466_failAssert110_add26695() throws Exception {
        try {
            Notification.newBuilder().setAlert("hello everyone");
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23466 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2447_add19707() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2447__29)).getFields())).hasNext();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add42_failAssert41() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add42 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23466_failAssert110_add26691() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23466 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add44137() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).isFloatingPointNumber();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18707() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23466_failAssert110_add26698() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23466 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23466_failAssert110_add26697() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload o_testPartialPushPayloadSerializer_add23466_failAssert110_add26697__8 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26697__8)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26697__8)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26697__8)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26697__8)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26697__8)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26697__8)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26697__8)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26697__8)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23466_failAssert110_add26697__8)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23466 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add33_failAssert32_add3136() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String o_testPartialPushPayloadSerializer_add33_failAssert32_add3136__19 = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", o_testPartialPushPayloadSerializer_add33_failAssert32_add3136__19);
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add33 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23466_failAssert110_add26699() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23466 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18701() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18701__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18701__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18701__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18701__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18701__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18701__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18701__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18701__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18701__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18701__3)).toString());
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18944() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getFieldNames())).hasNext();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add33_failAssert32_add3139() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add33_failAssert32_add3139__21 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3139__21)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3139__21)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3139__21)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3139__21)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3139__21)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3139__21)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3139__21)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3139__21)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3139__21)).getInApp())).isPresent());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add33 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21612() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3)).getNotification())).isPresent();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23470_failAssert114_add24550() throws Exception {
        try {
            Notification.newBuilder();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23470 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23468_failAssert112_add24051() throws Exception {
        try {
            Notification o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__3 = Notification.newBuilder().setAlert("hello everyone").build();
            Assert.assertTrue(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__3)).getAlert())).isPresent());
            Assert.assertEquals("hello everyone", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__3)).getAlert())).get());
            Assert.assertEquals("Optional.of(hello everyone)", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__3)).getAlert())).toString());
            Assert.assertEquals(-906285547, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__3)).getAlert())).hashCode())));
            Assert.assertTrue(((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__3)).getDeviceTypePayloadOverrides().isEmpty());
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__3)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__3)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__3)).getOverrideDeviceTypes())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__3)).getOverrideDeviceTypes())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__3)).getOverrideDeviceTypes())).hashCode())));
            Assert.assertEquals("Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}", ((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__3)).toString());
            Assert.assertEquals(-108459316, ((int) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__3)).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__3)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__3)).getActions())).hashCode())));
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__19 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__19)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__19)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__19)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__19)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__19)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__19)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__19)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__19)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24051__19)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23468 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23473_failAssert117() throws Exception {
        try {
            InApp.newBuilder();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23473 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add45077() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29)).getBigIntegerValue())).toString();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18856() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18979() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getNumberValue();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18850() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add42_failAssert41_add2884_add9382() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add42_failAssert41_add2884__22 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add42 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_remove23480_failAssert124() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_remove23480 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23469_failAssert113_add24301() throws Exception {
        try {
            Notification.newBuilder().setAlert("hello everyone");
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23469 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add33_failAssert32_add3154() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add33 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23474_failAssert118() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23474 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add39_failAssert38() throws Exception {
        try {
            InApp.newBuilder().setAlert("This is in-app!");
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add39 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23469_failAssert113_add24305() throws Exception {
        try {
            Notification.newBuilder().setAlert("hello everyone");
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23469 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18844() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18844__15 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18844__15)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18844__15)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18844__15)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18844__15)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18844__15)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18844__15)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18844__15)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18844__15)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18844__15)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23469_failAssert113() throws Exception {
        try {
            Notification.newBuilder().setAlert("hello everyone");
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23469 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23474_failAssert118_add24722() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String o_testPartialPushPayloadSerializer_add23474_failAssert118_add24722__14 = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", o_testPartialPushPayloadSerializer_add23474_failAssert118_add24722__14);
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23474_failAssert118_add24722__17 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23474_failAssert118_add24722__17)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23474_failAssert118_add24722__17)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23474_failAssert118_add24722__17)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23474_failAssert118_add24722__17)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23474_failAssert118_add24722__17)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23474_failAssert118_add24722__17)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23474_failAssert118_add24722__17)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23474_failAssert118_add24722__17)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23474_failAssert118_add24722__17)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23474 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21712() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23475_failAssert119_add24977_add27796() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977_add27796__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977_add27796__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977_add27796__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977_add27796__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977_add27796__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977_add27796__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977_add27796__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977_add27796__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977_add27796__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977_add27796__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23475_failAssert119_add24977__22 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23475 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21706() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21706__15 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21706__15)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21706__15)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21706__15)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21706__15)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21706__15)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21706__15)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21706__15)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21706__15)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21706__15)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23475_failAssert119() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23475 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21709() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3104() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__16)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__16)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__16)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__16)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__16)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__16)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__16)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__16)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__16)).getInApp())).isPresent());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).getFields())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).getFieldNames())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).isObject());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).getNumberType());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).isNull());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).getValueAsBoolean());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).getIntValue())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).isBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3104__20)).isValueNode());
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44804() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3)).getInApp())).isPresent();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21820() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            ((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getFieldNames())).hasNext();
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18758() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3)).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_literalMutationString2561() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23468_failAssert112_add24021() throws Exception {
        try {
            Notification o_testPartialPushPayloadSerializer_add23468_failAssert112_add24021__3 = Notification.newBuilder().setAlert("hello everyone").build();
            Assert.assertTrue(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24021__3)).getAlert())).isPresent());
            Assert.assertEquals("hello everyone", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24021__3)).getAlert())).get());
            Assert.assertEquals("Optional.of(hello everyone)", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24021__3)).getAlert())).toString());
            Assert.assertEquals(-906285547, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24021__3)).getAlert())).hashCode())));
            Assert.assertTrue(((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24021__3)).getDeviceTypePayloadOverrides().isEmpty());
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24021__3)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24021__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24021__3)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24021__3)).getOverrideDeviceTypes())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24021__3)).getOverrideDeviceTypes())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24021__3)).getOverrideDeviceTypes())).hashCode())));
            Assert.assertEquals("Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}", ((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24021__3)).toString());
            Assert.assertEquals(-108459316, ((int) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24021__3)).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24021__3)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24021__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24021__3)).getActions())).hashCode())));
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23468 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_literalMutationString2566() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("Tis is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2808() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload.newBuilder();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23466_failAssert110() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23466 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add46_failAssert45_add2204() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add46 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21937() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getDecimalValue())).toString();
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45863() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3)).getNotification())).isPresent();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2802() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_add2805() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add36_failAssert35_add911() throws Exception {
        try {
            Notification.newBuilder().setAlert("hello everyone");
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add36_failAssert35_add911__18 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add36_failAssert35_add911__18)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add36_failAssert35_add911__18)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add36_failAssert35_add911__18)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add36_failAssert35_add911__18)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add36_failAssert35_add911__18)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add36_failAssert35_add911__18)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add36_failAssert35_add911__18)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add36_failAssert35_add911__18)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add36_failAssert35_add911__18)).getInApp())).isPresent());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add36 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add46_failAssert45_add2200() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add46 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18988() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getBinaryValue();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23782_add28550() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782_add28550__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782_add28550__3)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782_add28550__3)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782_add28550__3)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782_add28550__3)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782_add28550__3)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782_add28550__3)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782_add28550__3)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782_add28550__3)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782_add28550__3)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44814() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3)).getInApp())).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45869() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3)).getNotification())).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23782_add28555() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23782__22 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18983() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29)).getBooleanValue();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_literalMutationString2553() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyoe").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add44129() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).isIntegralNumber();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add33_failAssert32_add3085() throws Exception {
        try {
            Notification o_testPartialPushPayloadSerializer_add33_failAssert32_add3085__3 = Notification.newBuilder().setAlert("hello everyone").build();
            Assert.assertEquals("Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}", ((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3085__3)).toString());
            Assert.assertEquals(-108459316, ((int) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3085__3)).hashCode())));
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3085__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3085__3)).getActions())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3085__3)).getActions())).isPresent());
            Assert.assertEquals("hello everyone", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3085__3)).getAlert())).get());
            Assert.assertEquals("Optional.of(hello everyone)", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3085__3)).getAlert())).toString());
            Assert.assertEquals(-906285547, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3085__3)).getAlert())).hashCode())));
            Assert.assertTrue(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3085__3)).getAlert())).isPresent());
            Assert.assertTrue(((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3085__3)).getDeviceTypePayloadOverrides().isEmpty());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3085__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3085__3)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3085__3)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3085__3)).getOverrideDeviceTypes())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3085__3)).getOverrideDeviceTypes())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add33_failAssert32_add3085__3)).getOverrideDeviceTypes())).isPresent());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add33 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25167_add44007() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            ((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25167__29)).getValueAsBoolean();
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add33_failAssert32_add3089() throws Exception {
        try {
            Notification.newBuilder().setAlert("hello everyone");
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add33 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add31_failAssert30_add2451_add21807() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            ((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add31_failAssert30_add2451__31)).getElements())).hasNext();
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add31 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_literalMutationString2549() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello e-veryone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_literalMutationString2544() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("H3cH2Z!BPgsBj`").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23479_failAssert123() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23479 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_literalMutationString2541() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello ever4one").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23465_failAssert109() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23465 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45881() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3)).getPushOptions())).isPresent();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add38_failAssert37_add1339() throws Exception {
        try {
            InApp o_testPartialPushPayloadSerializer_add38_failAssert37_add1339__3 = InApp.newBuilder().setAlert("This is in-app!").build();
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1339__3)).getExtra())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1339__3)).getExtra())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1339__3)).getExtra())).isPresent());
            Assert.assertEquals("InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()}", ((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1339__3)).toString());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1339__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1339__3)).getActions())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1339__3)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1339__3)).getExpiry())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1339__3)).getExpiry())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1339__3)).getExpiry())).isPresent());
            Assert.assertEquals("This is in-app!", ((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1339__3)).getAlert());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1339__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1339__3)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1339__3)).getInteractive())).isPresent());
            Assert.assertEquals("banner", ((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1339__3)).getDisplayType());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1339__3)).getDisplay())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1339__3)).getDisplay())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1339__3)).getDisplay())).isPresent());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add38 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add38_failAssert37_add1335() throws Exception {
        try {
            InApp o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__3 = InApp.newBuilder().setAlert("This is in-app!").build();
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__3)).getExtra())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__3)).getExtra())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__3)).getExtra())).isPresent());
            Assert.assertEquals("InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()}", ((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__3)).toString());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__3)).getActions())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__3)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__3)).getExpiry())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__3)).getExpiry())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__3)).getExpiry())).isPresent());
            Assert.assertEquals("This is in-app!", ((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__3)).getAlert());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__3)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__3)).getInteractive())).isPresent());
            Assert.assertEquals("banner", ((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__3)).getDisplayType());
            Assert.assertEquals("Optional.absent()", ((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__3)).getDisplay())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__3)).getDisplay())).hashCode())));
            Assert.assertFalse(((Optional) (((InApp) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__3)).getDisplay())).isPresent());
            VariantPushPayload o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__6 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__6)).toString());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__6)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__6)).getNotification())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__6)).getNotification())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__6)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__6)).getPushOptions())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__6)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__6)).getInApp())).toString());
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add38_failAssert37_add1335__6)).getInApp())).isPresent());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add38 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23469_failAssert113_add24341() throws Exception {
        try {
            Notification.newBuilder().setAlert("hello everyone");
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23469_failAssert113_add24341__18 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23469_failAssert113_add24341__18)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23469_failAssert113_add24341__18)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23469_failAssert113_add24341__18)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23469_failAssert113_add24341__18)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23469_failAssert113_add24341__18)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23469_failAssert113_add24341__18)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23469_failAssert113_add24341__18)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23469_failAssert113_add24341__18)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23469_failAssert113_add24341__18)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23469 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add33_failAssert32_add3077() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add33 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23476_failAssert120_add25207() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__16 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__16)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__16)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__16)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__16)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__16)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__16)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__16)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__16)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__16)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).isObject());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).getElements())).hasNext());
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).getFieldNames())).hasNext());
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", ((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).toString());
            Assert.assertEquals(-217942222, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).hashCode())));
            Assert.assertTrue(((Iterator) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).getFields())).hasNext());
            Assert.assertTrue(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).isContainerNode());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).getValueAsText());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).getNumberType());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).getNumberValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).getBooleanValue());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).getBinaryValue());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).getValueAsInt())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).getValueAsLong())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).getValueAsDouble())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).getValueAsBoolean());
            Assert.assertNull(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).getTextValue());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).isBinary());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).isPojo());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).isNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).isValueNode());
            Assert.assertEquals(0, ((int) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).getIntValue())));
            Assert.assertEquals(-1, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).getBigIntegerValue())).getLowestSetBit())));
            Assert.assertEquals("0", ((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).getBigIntegerValue())).toString());
            Assert.assertEquals(0, ((int) (((BigInteger) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).getBigIntegerValue())).hashCode())));
            Assert.assertEquals(0L, ((long) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).getLongValue())));
            Assert.assertEquals("0", ((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).getDecimalValue())).toString());
            Assert.assertEquals(0, ((int) (((BigDecimal) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).getDecimalValue())).hashCode())));
            Assert.assertEquals(0.0, ((double) (((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).getDoubleValue())), 0.1);
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).isMissingNode());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).isIntegralNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).isFloatingPointNumber());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).isInt());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).isLong());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).isDouble());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).isBigDecimal());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).isBigInteger());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).isTextual());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).isBoolean());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).isArray());
            Assert.assertFalse(((ObjectNode) (o_testPartialPushPayloadSerializer_add23476_failAssert120_add25207__20)).isNull());
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23476 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23477_failAssert121_add23740_add45883() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__3)).getPushOptions())).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode o_testPartialPushPayloadSerializer_add23477_failAssert121_add23740__31 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23477 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_literalMutationString2535() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23468_failAssert112_add24017() throws Exception {
        try {
            Notification o_testPartialPushPayloadSerializer_add23468_failAssert112_add24017__3 = Notification.newBuilder().setAlert("hello everyone").build();
            Assert.assertTrue(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24017__3)).getAlert())).isPresent());
            Assert.assertEquals("hello everyone", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24017__3)).getAlert())).get());
            Assert.assertEquals("Optional.of(hello everyone)", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24017__3)).getAlert())).toString());
            Assert.assertEquals(-906285547, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24017__3)).getAlert())).hashCode())));
            Assert.assertTrue(((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24017__3)).getDeviceTypePayloadOverrides().isEmpty());
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24017__3)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24017__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24017__3)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24017__3)).getOverrideDeviceTypes())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24017__3)).getOverrideDeviceTypes())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24017__3)).getOverrideDeviceTypes())).hashCode())));
            Assert.assertEquals("Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}", ((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24017__3)).toString());
            Assert.assertEquals(-108459316, ((int) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24017__3)).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24017__3)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24017__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24017__3)).getActions())).hashCode())));
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23468 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44918() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44918__28 = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44918__28)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44918__28)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44918__28)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44918__28)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44918__28)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44918__28)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44918__28)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44918__28)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125_add44918__28)).toString());
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add23464_failAssert108_add26125__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23464 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31_literalMutationString2538() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("At least one variant must be present.").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add32_failAssert31() throws Exception {
        try {
            VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add32 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add43_failAssert42_add3064_add18764() throws Exception {
        try {
            VariantPushPayload o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__3)).getNotification())).toString();
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode o_testPartialPushPayloadSerializer_add43_failAssert42_add3064__29 = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add43 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23468_failAssert112_add24013() throws Exception {
        try {
            Notification o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__3 = Notification.newBuilder().setAlert("hello everyone").build();
            Assert.assertTrue(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__3)).getAlert())).isPresent());
            Assert.assertEquals("hello everyone", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__3)).getAlert())).get());
            Assert.assertEquals("Optional.of(hello everyone)", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__3)).getAlert())).toString());
            Assert.assertEquals(-906285547, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__3)).getAlert())).hashCode())));
            Assert.assertTrue(((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__3)).getDeviceTypePayloadOverrides().isEmpty());
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__3)).getInteractive())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__3)).getInteractive())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__3)).getInteractive())).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__3)).getOverrideDeviceTypes())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__3)).getOverrideDeviceTypes())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__3)).getOverrideDeviceTypes())).hashCode())));
            Assert.assertEquals("Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}", ((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__3)).toString());
            Assert.assertEquals(-108459316, ((int) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__3)).hashCode())));
            Assert.assertFalse(((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__3)).getActions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__3)).getActions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((Notification) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__3)).getActions())).hashCode())));
            VariantPushPayload o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__6 = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__6)).getNotification())).isPresent());
            Assert.assertEquals("Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__6)).getNotification())).toString());
            Assert.assertEquals(1394017256, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__6)).getNotification())).hashCode())));
            Assert.assertFalse(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__6)).getPushOptions())).isPresent());
            Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__6)).getPushOptions())).toString());
            Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__6)).getPushOptions())).hashCode())));
            Assert.assertTrue(((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__6)).getInApp())).isPresent());
            Assert.assertEquals("Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})", ((Optional) (((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__6)).getInApp())).toString());
            Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}", ((VariantPushPayload) (o_testPartialPushPayloadSerializer_add23468_failAssert112_add24013__6)).toString());
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadSerialized);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            Assert.assertEquals("{\"notification\":{\"alert\":\"hello everyone\"},\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}}", partialPushPayloadString);
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23468 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
        }
    }

    @Test(timeout = 10000)
    public void testPartialPushPayloadSerializer_add23478_failAssert122() throws Exception {
        try {
            VariantPushPayload partialPushPayload = VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("hello everyone").build()).setInApp(InApp.newBuilder().setAlert("This is in-app!").build()).build();
            String partialPushPayloadSerialized = AmplVariantPushPayloadSerializerTest.MAPPER.writeValueAsString(partialPushPayload);
            VariantPushPayload partialPushPayloadFromJson = AmplVariantPushPayloadSerializerTest.MAPPER.readValue(partialPushPayloadSerialized, VariantPushPayload.class);
            String partialPushPayloadString = "{" + (("\"notification\":{\"alert\":\"hello everyone\"}," + "\"in_app\":{\"alert\":\"This is in-app!\",\"display_type\":\"banner\"}") + "}");
            JsonNode fromObject = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadSerialized);
            JsonNode fromString = AmplVariantPushPayloadSerializerTest.MAPPER.readTree(partialPushPayloadString);
            assertEquals(fromObject, fromString);
            assertEquals(fromObject, fromString);
            assertEquals(partialPushPayloadFromJson, partialPushPayload);
            org.junit.Assert.fail("testPartialPushPayloadSerializer_add23478 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}> but was:<VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(hello everyone), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.of(InApp{alert=This is in-app!, displayType=banner, expiry=Optional.absent(), actions=Optional.absent(), interactive=Optional.absent(), extra=Optional.absent()})}>", expected.getMessage());
        }
    }
}

