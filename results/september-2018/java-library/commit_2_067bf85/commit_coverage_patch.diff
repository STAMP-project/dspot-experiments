diff --git a/CHANGELOG b/CHANGELOG
index 0ad3508..e03efc6 100644
--- a/CHANGELOG
+++ b/CHANGELOG
@@ -1,4 +1,14 @@
 -------------------------
+3.1.0 17SEPT18
+-------------------------
+- Added support for the Require Interaction web notify feature.
+
+-------------------------
+3.1.0 11SEPT18
+-------------------------
+- Added support for Predictive Send Time Optimization.
+
+-------------------------
 3.0.1 28JUN18
 -------------------------
 - Updated to async-http-client 2.4.8.
diff --git a/VERSION.txt b/VERSION.txt
index cb2b00e..944880f 100644
--- a/VERSION.txt
+++ b/VERSION.txt
@@ -1 +1 @@
-3.0.1
+3.2.0
diff --git a/pom.xml b/pom.xml
index 39518dc..ed7f59a 100644
--- a/pom.xml
+++ b/pom.xml
@@ -10,7 +10,7 @@
 
     <groupId>com.urbanairship</groupId>
     <artifactId>java-client</artifactId>
-    <version>1.3.1-SNAPSHOT</version>
+    <version>3.2.1-SNAPSHOT</version>
     <packaging>jar</packaging>
 
     <name>Java Client</name>
diff --git a/src/main/java/com/urbanairship/api/common/parse/DateFormats.java b/src/main/java/com/urbanairship/api/common/parse/DateFormats.java
index e962a08..b89e80d 100644
--- a/src/main/java/com/urbanairship/api/common/parse/DateFormats.java
+++ b/src/main/java/com/urbanairship/api/common/parse/DateFormats.java
@@ -9,16 +9,14 @@ import org.joda.time.format.DateTimeFormatterBuilder;
 import org.joda.time.format.DateTimeParser;
 import org.joda.time.format.ISODateTimeFormat;
 
-import static org.joda.time.format.ISODateTimeFormat.date;
-
 public class DateFormats {
 
     private static final DateTimeParser SPACE_PARSER = new DateTimeFormatterBuilder().appendLiteral(' ').toParser();
     private static final DateTimeParser T_PARSER = new DateTimeFormatterBuilder().appendLiteral('T').toParser();
 
     public static final DateTimeFormatter DATE_PARSER = new DateTimeFormatterBuilder()
-            .append(date())
-            .append(null, new DateTimeParser[] {SPACE_PARSER, T_PARSER})
+            .append(ISODateTimeFormat.date())
+            .append(null, new DateTimeParser[]{SPACE_PARSER, T_PARSER})
             .append(ISODateTimeFormat.hourMinuteSecond())
             .toFormatter()
             .withZoneUTC();
@@ -28,22 +26,22 @@ public class DateFormats {
     public static final DateTimeFormatter SPACE_FORMATTER = new DateTimeFormatterBuilder().appendLiteral(' ').toFormatter();
 
     public static final DateTimeFormatter SECONDS_FORMAT = new DateTimeFormatterBuilder()
-            .append(date())
-            .append(null, new DateTimeParser[] {SPACE_PARSER, T_PARSER})
+            .append(ISODateTimeFormat.date())
+            .append(null, new DateTimeParser[]{SPACE_PARSER, T_PARSER})
             .append(ISODateTimeFormat.hourMinuteSecond())
             .toFormatter()
             .withZoneUTC();
 
     public static final DateTimeFormatter MINUTES_FORMAT = new DateTimeFormatterBuilder()
-            .append(date())
-            .append(null, new DateTimeParser[] {SPACE_PARSER, T_PARSER})
+            .append(ISODateTimeFormat.date())
+            .append(null, new DateTimeParser[]{SPACE_PARSER, T_PARSER})
             .append(ISODateTimeFormat.hourMinute())
             .toFormatter()
             .withZoneUTC();
 
     public static final DateTimeFormatter HOURS_FORMAT = new DateTimeFormatterBuilder()
-            .append(date())
-            .append(null, new DateTimeParser[] {SPACE_PARSER, T_PARSER})
+            .append(ISODateTimeFormat.date())
+            .append(null, new DateTimeParser[]{SPACE_PARSER, T_PARSER})
             .append(ISODateTimeFormat.hour())
             .toFormatter()
             .withZoneUTC();
@@ -56,5 +54,6 @@ public class DateFormats {
 
     public static final DateTimeFormatter YEARS_FORMAT = ISODateTimeFormat.year().withZoneUTC();
 
-    private DateFormats() { }
+    private DateFormats() {
+    }
 }
diff --git a/src/main/java/com/urbanairship/api/push/model/PushOptions.java b/src/main/java/com/urbanairship/api/push/model/PushOptions.java
index 0128849..dc4ddcb 100644
--- a/src/main/java/com/urbanairship/api/push/model/PushOptions.java
+++ b/src/main/java/com/urbanairship/api/push/model/PushOptions.java
@@ -6,7 +6,6 @@ package com.urbanairship.api.push.model;
 
 import com.google.common.base.Optional;
 
-
 /**
  * Optional features for a Push payload for the Urban Airship API.
  * Created for future optional features to be added.
@@ -48,7 +47,6 @@ public class PushOptions extends PushModelObject {
         PushOptions that = (PushOptions) o;
 
         return !(expiry != null ? !expiry.equals(that.expiry) : that.expiry != null);
-
     }
 
     @Override
@@ -82,6 +80,4 @@ public class PushOptions extends PushModelObject {
             return new PushOptions(Optional.fromNullable(expiry));
         }
     }
-
-
 }
diff --git a/src/main/java/com/urbanairship/api/push/model/notification/web/WebDevicePayload.java b/src/main/java/com/urbanairship/api/push/model/notification/web/WebDevicePayload.java
index 3b816b2..455992a 100644
--- a/src/main/java/com/urbanairship/api/push/model/notification/web/WebDevicePayload.java
+++ b/src/main/java/com/urbanairship/api/push/model/notification/web/WebDevicePayload.java
@@ -18,11 +18,13 @@ public final class WebDevicePayload extends PushModelObject implements DevicePay
     private final Optional<String> title;
     private final Optional<ImmutableMap<String, String>> extra;
     private final Optional<WebIcon> webIcon;
+    private final Optional<Boolean> requireInteraction;
 
     private WebDevicePayload(Builder builder) {
         this.alert = Optional.fromNullable(builder.alert);
         this.title = Optional.fromNullable(builder.title);
         this.webIcon = Optional.fromNullable(builder.webIcon);
+        this.requireInteraction = Optional.fromNullable(builder.requireInteraction);
 
         if (builder.extra.build().isEmpty()) {
             this.extra = Optional.absent();
@@ -87,6 +89,15 @@ public final class WebDevicePayload extends PushModelObject implements DevicePay
         return webIcon;
     }
 
+    /**
+     * Get the Require Interaction flag.
+     *
+     * @return Optional Boolean require interaction flag.
+     */
+    public Optional<Boolean> getRequireInteraction() {
+        return requireInteraction;
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -100,12 +111,14 @@ public final class WebDevicePayload extends PushModelObject implements DevicePay
         return Objects.equal(alert, payload.alert) &&
                 Objects.equal(title, payload.title) &&
                 Objects.equal(extra, payload.extra) &&
-                Objects.equal(webIcon, payload.webIcon);
+                Objects.equal(webIcon, payload.webIcon)&&
+                Objects.equal(requireInteraction, payload.requireInteraction);
     }
 
     @Override
     public int hashCode() {
-        return Objects.hashCode(alert, title, extra, webIcon);
+        return Objects.hashCode(alert, title, extra, webIcon,
+                requireInteraction);
     }
 
     @Override
@@ -115,6 +128,7 @@ public final class WebDevicePayload extends PushModelObject implements DevicePay
                 ", title=" + title +
                 ", extra=" + extra +
                 ", webIcon=" + webIcon +
+                ", requireInteraction=" + requireInteraction +
                 '}';
     }
 
@@ -126,6 +140,7 @@ public final class WebDevicePayload extends PushModelObject implements DevicePay
         private String title = null;
         private ImmutableMap.Builder<String, String> extra = ImmutableMap.builder();
         private WebIcon webIcon = null;
+        private Boolean requireInteraction = null;
 
         private Builder() { }
 
@@ -185,6 +200,22 @@ public final class WebDevicePayload extends PushModelObject implements DevicePay
             return this;
         }
 
+        /**
+         * Set the Require Interaction flag.
+         *
+         * @param value Boolean
+         * @return Builder
+         */
+        public Builder setRequireInteraction(boolean value){
+            this.requireInteraction = value;
+            return this;
+        }
+
+        /**
+         * Build the WebDevicePayload object.
+         *
+         * @return WebDevicePayload
+         */
         public WebDevicePayload build() {
             return new WebDevicePayload(this);
         }
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadDeserializer.java
index 1f88f9f..f0b2372 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadDeserializer.java
@@ -37,6 +37,11 @@ public class WebDevicePayloadDeserializer extends JsonDeserializer<WebDevicePayl
                             reader.readWebIcon(json);
                         }
                     })
+                    .put("require_interaction", new FieldParser<WebDevicePayloadReader>() {
+                        public void parse(WebDevicePayloadReader reader, JsonParser json, DeserializationContext context) throws IOException {
+                            reader.readRequireInteraction(json);
+                        }
+                    })
                     .build()
     );
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadReader.java
index dac6b27..77d824e 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadReader.java
@@ -2,6 +2,7 @@ package com.urbanairship.api.push.parse.notification.web;
 
 import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
+import com.urbanairship.api.common.parse.BooleanFieldDeserializer;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.common.parse.MapOfStringsDeserializer;
 import com.urbanairship.api.common.parse.StringFieldDeserializer;
@@ -34,6 +35,10 @@ public class WebDevicePayloadReader implements JsonObjectReader<WebDevicePayload
         builder.setWebIcon(parser.readValueAs(WebIcon.class));
     }
 
+    public void readRequireInteraction(JsonParser parser) throws IOException {
+        builder.setRequireInteraction(BooleanFieldDeserializer.INSTANCE.deserialize(parser, "require_interaction"));
+    }
+
     @Override
     public WebDevicePayload validateAndBuild() throws IOException {
         try{
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadSerializer.java
index 4666f6d..1aea676 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadSerializer.java
@@ -28,6 +28,10 @@ public class WebDevicePayloadSerializer extends JsonSerializer<WebDevicePayload>
             jgen.writeStringField("title", payload.getTitle().get());
         }
 
+        if (payload.getRequireInteraction().isPresent()) {
+            jgen.writeObjectField("require_interaction", payload.getRequireInteraction().get());
+        }
+
         jgen.writeEndObject();
     }
 }
diff --git a/src/main/java/com/urbanairship/api/schedule/model/BestTime.java b/src/main/java/com/urbanairship/api/schedule/model/BestTime.java
index d6e519e..82c7075 100644
--- a/src/main/java/com/urbanairship/api/schedule/model/BestTime.java
+++ b/src/main/java/com/urbanairship/api/schedule/model/BestTime.java
@@ -3,27 +3,53 @@ package com.urbanairship.api.schedule.model;
 import com.google.common.base.Preconditions;
 import org.joda.time.DateTime;
 
-public class BestTime {
+import java.util.Objects;
+
+/**
+ * Represents that a push will be sent on the scheduled day, at the best time determined by optimization.
+ */
+public final class BestTime {
 
     private DateTime sendDate;
 
+    private BestTime() {}
+
     private BestTime(DateTime sendDate) {
         this.sendDate = sendDate;
     }
 
     @Override
-    public String toString() {
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (!(o instanceof BestTime)) return false;
+        BestTime bestTime = (BestTime) o;
+        return Objects.equals(getSendDate(), bestTime.getSendDate());
+    }
 
+    @Override
+    public int hashCode() {
+        return Objects.hash(getSendDate());
+    }
+
+    @Override
+    public String toString() {
         return "BestTime{" +
                 ", sendDate=" + sendDate +
                 '}';
-
     }
 
+    /**
+     * BestTime builder
+     * @return Builder
+     */
     public static Builder newBuilder() {
         return new Builder();
     }
 
+    /**
+     * Get the scheduled day that push will be sent.
+     * @return DateTime
+     * */
     public DateTime getSendDate() {
         return sendDate;
     }
@@ -32,10 +58,13 @@ public class BestTime {
      * BestTime Builder
      */
     public static class Builder {
+
         private DateTime sendDate = null;
+
         private Builder() { }
 
         /**
+         * Set the day to send the push
          * @param sendDate DateTime
          * @return BestTime Builder
          */
@@ -49,9 +78,7 @@ public class BestTime {
          * @return Schedule
          */
         public BestTime build() {
-            Preconditions.checkArgument((sendDate != null),"" +
-                    "sendDate cannot be null");
-
+            Preconditions.checkArgument((sendDate != null),"sendDate cannot be null");
             return new BestTime(sendDate);
         }
     }
diff --git a/src/main/java/com/urbanairship/api/schedule/model/Schedule.java b/src/main/java/com/urbanairship/api/schedule/model/Schedule.java
index a4b0e50..c6ec46f 100644
--- a/src/main/java/com/urbanairship/api/schedule/model/Schedule.java
+++ b/src/main/java/com/urbanairship/api/schedule/model/Schedule.java
@@ -10,6 +10,10 @@ import org.joda.time.DateTime;
 
 import java.util.Optional;
 
+
+/**
+ * Represents the schedule details for a push. A Schedule defines when a push will be sent.
+ */
 public final class Schedule extends ScheduleModelObject {
 
     private final DateTime scheduledTimestamp;
@@ -22,11 +26,10 @@ public final class Schedule extends ScheduleModelObject {
         this.scheduledTimestamp = builder.scheduledTimestamp;
         this.localTimePresent = builder.localTimePresent;
         this.bestTime = Optional.ofNullable(builder.bestTime);
-
     }
 
     /**
-     * Get the DateTime for this schedule
+     * Get the DateTime for this schedule.
      * @return DateTime
      */
     public DateTime getScheduledTimestamp () {
@@ -34,19 +37,21 @@ public final class Schedule extends ScheduleModelObject {
     }
 
     /**
-     * Get the boolean indicating if the scheduled time is local
+     * Get the boolean indicating if the scheduled time is in local time.
      * @return boolean
      */
     public Boolean getLocalTimePresent() {
         return localTimePresent;
     }
 
+    /**
+     * Get the BestTime for this schedule.
+     * @return
+     */
     public Optional<BestTime> getBestTime() {
         return bestTime;
     }
 
-
-
     @Override
     public String toString() {
         return "Schedule{" +
@@ -132,14 +137,26 @@ public final class Schedule extends ScheduleModelObject {
          * @return Schedule
          */
         public Schedule build() {
-            Preconditions.checkArgument((scheduledTimestamp != null || bestTime != null ),
-                    "Either scheduled_time, local_scheduled_time, or best time must be set.");
-
-            Preconditions.checkArgument(((scheduledTimestamp != null) ^ (bestTime != null)),
-                    "If bestTime is selected, scheduleTimestamp must be null and vice versa.");
 
+            Preconditions.checkArgument(argumentValidator(scheduledTimestamp,bestTime),
+                    "Either scheduled_time or best_time must be set.");
 
             return new Schedule(this);
         }
+
+        // ensure that exactly one argument is set
+        private boolean argumentValidator(DateTime scheduledTimestamp, BestTime bestTime) {
+            int argumentSet = 0;
+            if (scheduledTimestamp != null) {
+                argumentSet++;
+            }
+
+            if (bestTime != null) {
+                argumentSet++;
+            }
+            return argumentSet == 1;
+        }
+
     }
+
 }
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleObjectMapper.java b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleObjectMapper.java
index ef61b21..8886489 100644
--- a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleObjectMapper.java
+++ b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleObjectMapper.java
@@ -6,7 +6,13 @@ import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.module.SimpleModule;
 import com.fasterxml.jackson.datatype.joda.JodaModule;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import com.urbanairship.api.schedule.model.*;
+import com.urbanairship.api.schedule.model.BestTime;
+import com.urbanairship.api.schedule.model.ListAllSchedulesResponse;
+import com.urbanairship.api.schedule.model.Schedule;
+import com.urbanairship.api.schedule.model.ScheduleDetails;
+import com.urbanairship.api.schedule.model.SchedulePayload;
+import com.urbanairship.api.schedule.model.ScheduleResponse;
+
 
 public class ScheduleObjectMapper {
 
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleResponseDeserializer.java b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleResponseDeserializer.java
index d770277..6b37f2e 100644
--- a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleResponseDeserializer.java
+++ b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleResponseDeserializer.java
@@ -92,7 +92,4 @@ public final class ScheduleResponseDeserializer extends JsonDeserializer<Schedul
             throws IOException {
         return deserializer.deserialize(jsonParser, deserializationContext);
     }
-
-
-
 }
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleSerializer.java b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleSerializer.java
index 6fe62e0..4d8e60b 100644
--- a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleSerializer.java
+++ b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleSerializer.java
@@ -22,16 +22,12 @@ public class ScheduleSerializer extends JsonSerializer<Schedule> {
 
         if (value.getBestTime().isPresent()) {
             jgen.writeObjectField("best_time", value.getBestTime().get());
-        } else {
-
-            if (!value.getLocalTimePresent()) {
+        } else if (!value.getLocalTimePresent()){
                 jgen.writeStringField("scheduled_time", DateFormats.DATE_FORMATTER.print(value.getScheduledTimestamp()));
             }
-            if (value.getLocalTimePresent()) {
+            else {
                 jgen.writeStringField("local_scheduled_time", DateFormats.DATE_FORMATTER.print(value.getScheduledTimestamp()));
             }
-        }
-
         jgen.writeEndObject();
     }
 }
diff --git a/src/test/java/com/urbanairship/api/push/model/notification/web/WebSettingsDevicePayloadTest.java b/src/test/java/com/urbanairship/api/push/model/notification/web/WebSettingsDevicePayloadTest.java
index 3974d89..07a0f71 100644
--- a/src/test/java/com/urbanairship/api/push/model/notification/web/WebSettingsDevicePayloadTest.java
+++ b/src/test/java/com/urbanairship/api/push/model/notification/web/WebSettingsDevicePayloadTest.java
@@ -19,6 +19,7 @@ public class WebSettingsDevicePayloadTest {
                 .addExtraEntry("key", "value")
                 .addExtraEntry("key2", "value2")
                 .setWebIcon(webIcon)
+                .setRequireInteraction(true)
                 .build();
 
         assertTrue(m.getExtra().isPresent());
@@ -37,6 +38,9 @@ public class WebSettingsDevicePayloadTest {
 
         assertTrue(m.getWebIcon().isPresent());
         assertEquals(m.getWebIcon().get(), webIcon);
+
+        assertTrue(m.getRequireInteraction().isPresent());
+        assertEquals(true, m.getRequireInteraction().get());
     }
 }
 
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/web/PayloadDeserializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/web/PayloadDeserializerTest.java
index b60d73d..071441d 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/web/PayloadDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/web/PayloadDeserializerTest.java
@@ -100,4 +100,21 @@ public class PayloadDeserializerTest {
         assertNotNull(payload);
         assertEquals(webIcon, payload.getWebIcon().get());
     }
+
+    @Test
+    public void testRequireInteraction() throws Exception {
+        String json =
+                "{" +
+                        "\"require_interaction\":" +
+                        "true" +
+                        "}";
+
+        WebDevicePayload expected = WebDevicePayload.newBuilder()
+                .setRequireInteraction(true)
+                .build();
+
+        WebDevicePayload payload = MAPPER.readValue(json, WebDevicePayload.class);
+        assertNotNull(payload);
+        assertEquals(expected.getRequireInteraction().get(), payload.getRequireInteraction().get());
+    }
 }
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/web/PayloadSerializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/web/PayloadSerializerTest.java
index a8be15f..2793a03 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/web/PayloadSerializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/web/PayloadSerializerTest.java
@@ -24,14 +24,17 @@ public class PayloadSerializerTest {
                 .setTitle("WebSettings title")
                 .addExtraEntry("extrakey", "extravalue")
                 .setWebIcon(webIcon)
+                .setRequireInteraction(true)
                 .build();
 
         String expected = "{" +
                     "\"alert\":\"WebSettings specific alert\"," +
                     "\"extra\":{\"extrakey\":\"extravalue\"}," +
                     "\"icon\":{\"url\":\"https://i.ytimg.com/vi/PNgykntrIzE/maxresdefault.jpg\"}," +
-                    "\"title\":\"WebSettings title\"" +
-                "}";
+                    "\"title\":\"WebSettings title\"," +
+                    "\"require_interaction\":true" +
+
+        "}";
 
         String parsedJson = MAPPER.writeValueAsString(webPayload);
         WebDevicePayload roundTripWebPayload = MAPPER.readValue(parsedJson, WebDevicePayload.class);
diff --git a/src/test/java/com/urbanairship/api/schedule/ListSchedulesResponseTest.java b/src/test/java/com/urbanairship/api/schedule/ListSchedulesResponseTest.java
new file mode 100644
index 0000000..79772a8
--- /dev/null
+++ b/src/test/java/com/urbanairship/api/schedule/ListSchedulesResponseTest.java
@@ -0,0 +1,125 @@
+package com.urbanairship.api.schedule;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.urbanairship.api.push.model.DeviceType;
+import com.urbanairship.api.push.model.PushPayload;
+import com.urbanairship.api.schedule.model.ListAllSchedulesResponse;
+import com.urbanairship.api.schedule.model.Schedule;
+import com.urbanairship.api.schedule.model.SchedulePayload;
+import com.urbanairship.api.schedule.parse.ScheduleObjectMapper;
+import org.junit.Test;
+
+import java.util.List;
+
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+
+public class ListSchedulesResponseTest {
+
+    @Test
+    public void testAPIScheduleResponse() {
+
+        String listscheduleresponse = "{\"ok\":true,\"count\":5,\"total_count\":6,\"schedules\":" +
+                "[{\"url\":\"https://go.urbanairship.com/api/schedules/5a60e0a6-9aa7-449f-a038-6806e572baf3\",\"" +
+                "schedule\":{\"scheduled_time\":\"2015-01-01T08:00:00\"},\"push\":{\"audience\":\"ALL\",\"device" +
+                "_types\":[\"android\",\"ios\"],\"notification\":{\"alert\":\"Happy New Year 2015!\",\"android\"" +
+                ":{},\"ios\":{}}},\"push_ids\":[\"8430f2e0-ec07-4c1e-adc4-0c7c7978e648\"]},{\"url\":\"https://go" +
+                ".urbanairship.com/api/schedules/f53aa2bd-018a-4482-8d7d-691d13407973\",\"schedule\":{\"schedule" +
+                "d_time\":\"2016-01-01T08:00:00\"},\"push\":{\"audience\":\"ALL\",\"device_types\":[\"android\"," +
+                "\"ios\"],\"notification\":{\"alert\":\"Happy New Year 2016!\",\"android\":{},\"ios\":{}}},\"pus" +
+                "h_ids\":[\"b217a321-922f-4aee-b239-ca1b58c6b652\"]}]}";
+
+        ObjectMapper mapper = ScheduleObjectMapper.getInstance();
+
+        try {
+            ListAllSchedulesResponse response = mapper.readValue(listscheduleresponse, ListAllSchedulesResponse.class);
+            assertTrue(response.getOk());
+            assertTrue(response.getCount() == 5);
+            assertTrue(response.getTotal_Count() == 6);
+            assertTrue(response.getNext_Page() == null);
+
+            List<SchedulePayload> list = response.getSchedules();
+
+            assertTrue(list.get(0).getUrl().get().equals("https://go.urbanairship.com/api/schedules/5a60e0a6-9aa7-449f-a038-6806e572baf3"));
+            assertTrue(list.get(0).getPushIds().toString().equals("[8430f2e0-ec07-4c1e-adc4-0c7c7978e648]"));
+
+            Schedule firstschedule = list.get(0).getSchedule();
+            assertTrue(firstschedule.getScheduledTimestamp().toString().equals("2015-01-01T08:00:00.000Z"));
+
+            PushPayload firstpush = list.get(0).getPushPayload();
+            assertTrue(firstpush.getAudience().getType().getIdentifier().equals("all"));
+            assertTrue(firstpush.getDeviceTypes().getDeviceTypes().get().contains(DeviceType.IOS));
+            assertTrue(firstpush.getDeviceTypes().getDeviceTypes().get().contains(DeviceType.ANDROID));
+            assertTrue(firstpush.getNotification().get().getAlert().get().equals("Happy New Year 2015!"));
+
+            assertTrue(list.get(1).getUrl().get().equals("https://go.urbanairship.com/api/schedules/f53aa2bd-018a-4482-8d7d-691d13407973"));
+            assertTrue(list.get(1).getPushIds().toString().equals("[b217a321-922f-4aee-b239-ca1b58c6b652]"));
+
+            Schedule secondschedule = list.get(1).getSchedule();
+            assertTrue(secondschedule.getScheduledTimestamp().toString().equals("2016-01-01T08:00:00.000Z"));
+
+            PushPayload secondpush = list.get(1).getPushPayload();
+            assertTrue(secondpush.getAudience().getType().getIdentifier().equals("all"));
+            assertTrue(secondpush.getDeviceTypes().getDeviceTypes().get().contains(DeviceType.IOS));
+            assertTrue(secondpush.getDeviceTypes().getDeviceTypes().get().contains(DeviceType.ANDROID));
+            assertTrue(secondpush.getNotification().get().getAlert().get().equals("Happy New Year 2016!"));
+
+        } catch (Exception ex) {
+            fail("Exception " + ex.getMessage());
+        }
+    }
+
+    @Test
+    public void testAPIScheduleResponseWithNextPage() {
+
+        String listscheduleresponse = "{\"ok\":true,\"count\":5,\"total_count\":6,\"next_page\":\"puppies\",\"schedules\":" +
+                "[{\"url\":\"https://go.urbanairship.com/api/schedules/5a60e0a6-9aa7-449f-a038-6806e572baf3\",\"" +
+                "schedule\":{\"scheduled_time\":\"2015-01-01T08:00:00\"},\"push\":{\"audience\":\"ALL\",\"device" +
+                "_types\":[\"android\",\"ios\"],\"notification\":{\"alert\":\"Happy New Year 2015!\",\"android\"" +
+                ":{},\"ios\":{}}},\"push_ids\":[\"8430f2e0-ec07-4c1e-adc4-0c7c7978e648\"]},{\"url\":\"https://go" +
+                ".urbanairship.com/api/schedules/f53aa2bd-018a-4482-8d7d-691d13407973\",\"schedule\":{\"schedule" +
+                "d_time\":\"2016-01-01T08:00:00\"},\"push\":{\"audience\":\"ALL\",\"device_types\":[\"android\"," +
+                "\"ios\"],\"notification\":{\"alert\":\"Happy New Year 2016!\",\"android\":{},\"ios\":{}}},\"pus" +
+                "h_ids\":[\"b217a321-922f-4aee-b239-ca1b58c6b652\"]}]}";
+
+        ObjectMapper mapper = ScheduleObjectMapper.getInstance();
+
+        try {
+            ListAllSchedulesResponse response = mapper.readValue(listscheduleresponse, ListAllSchedulesResponse.class);
+            assertTrue(response.getOk());
+            assertTrue(response.getCount() == 5);
+            assertTrue(response.getTotal_Count() == 6);
+            assertTrue(response.getNext_Page().equals("puppies"));
+
+            List<SchedulePayload> list = response.getSchedules();
+
+            assertTrue(list.get(0).getUrl().get().equals("https://go.urbanairship.com/api/schedules/5a60e0a6-9aa7-449f-a038-6806e572baf3"));
+            assertTrue(list.get(0).getPushIds().toString().equals("[8430f2e0-ec07-4c1e-adc4-0c7c7978e648]"));
+
+            Schedule firstschedule = list.get(0).getSchedule();
+            assertTrue(firstschedule.getScheduledTimestamp().toString().equals("2015-01-01T08:00:00.000Z"));
+
+            PushPayload firstpush = list.get(0).getPushPayload();
+            assertTrue(firstpush.getAudience().getType().getIdentifier().equals("all"));
+            assertTrue(firstpush.getDeviceTypes().getDeviceTypes().get().contains(DeviceType.IOS));
+            assertTrue(firstpush.getDeviceTypes().getDeviceTypes().get().contains(DeviceType.ANDROID));
+            assertTrue(firstpush.getNotification().get().getAlert().get().equals("Happy New Year 2015!"));
+
+            assertTrue(list.get(1).getUrl().get().equals("https://go.urbanairship.com/api/schedules/f53aa2bd-018a-4482-8d7d-691d13407973"));
+            assertTrue(list.get(1).getPushIds().toString().equals("[b217a321-922f-4aee-b239-ca1b58c6b652]"));
+
+            Schedule secondschedule = list.get(1).getSchedule();
+            assertTrue(secondschedule.getScheduledTimestamp().toString().equals("2016-01-01T08:00:00.000Z"));
+
+            PushPayload secondpush = list.get(1).getPushPayload();
+            assertTrue(secondpush.getAudience().getType().getIdentifier().equals("all"));
+            assertTrue(secondpush.getDeviceTypes().getDeviceTypes().get().contains(DeviceType.IOS));
+            assertTrue(secondpush.getDeviceTypes().getDeviceTypes().get().contains(DeviceType.ANDROID));
+            assertTrue(secondpush.getNotification().get().getAlert().get().equals("Happy New Year 2016!"));
+        } catch (Exception ex) {
+            fail("Exception " + ex.getMessage());
+        }
+    }
+
+}
diff --git a/src/test/java/com/urbanairship/api/schedule/SchedulePayloadDeserializerTest.java b/src/test/java/com/urbanairship/api/schedule/SchedulePayloadDeserializerTest.java
new file mode 100644
index 0000000..0fd0dc7
--- /dev/null
+++ b/src/test/java/com/urbanairship/api/schedule/SchedulePayloadDeserializerTest.java
@@ -0,0 +1,148 @@
+package com.urbanairship.api.schedule;
+
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.google.common.base.Optional;
+import com.urbanairship.api.common.parse.APIParsingException;
+import com.urbanairship.api.common.parse.DateFormats;
+import com.urbanairship.api.push.model.DeviceTypeData;
+import com.urbanairship.api.push.model.PushPayload;
+import com.urbanairship.api.push.model.audience.Selectors;
+import com.urbanairship.api.push.model.notification.Notification;
+import com.urbanairship.api.push.parse.PushObjectMapper;
+import com.urbanairship.api.schedule.model.BestTime;
+import com.urbanairship.api.schedule.model.Schedule;
+import com.urbanairship.api.schedule.model.SchedulePayload;
+import org.apache.commons.lang.RandomStringUtils;
+import org.joda.time.DateTime;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.ExpectedException;
+import java.util.List;
+
+public class SchedulePayloadDeserializerTest {
+
+    @Rule
+    public ExpectedException thrown = ExpectedException.none();
+
+    private static final ObjectMapper MAPPER = PushObjectMapper.getInstance();
+
+    @Test
+    public void testDeserialization() throws Exception {
+        String name = RandomStringUtils.randomAlphabetic(5);
+
+        String json =
+                "{" +
+                        "\"schedule\": {" +
+                        "\"scheduled_time\": \"2013-05-05 00:00:01\"" +
+                        "}," +
+                        "\"name\": " +
+                        "\"" + name + "\"" +
+                        "," +
+                        "\"push\": {" +
+                        "\"audience\" : \"all\"," +
+                        "\"device_types\" : [ \"ios\" ]," +
+                        "\"notification\" : { \"alert\" : \"derp\" }" +
+                        "}" +
+                        "}";
+
+        SchedulePayload payload = MAPPER.readValue(json, SchedulePayload.class);
+
+        org.junit.Assert.assertNotNull(payload);
+        junit.framework.Assert.assertEquals(payload.getName(), Optional.of(name));
+        junit.framework.Assert.assertEquals(payload.getSchedule().getScheduledTimestamp(), DateFormats.DATE_PARSER.parseDateTime("2013-05-05 00:00:01"));
+
+        List<SchedulePayload> payloadList = MAPPER.readValue(json, new TypeReference<List<SchedulePayload>>() {
+        });
+
+        org.junit.Assert.assertNotNull(payloadList);
+        junit.framework.Assert.assertEquals(payloadList.size(), 1);
+    }
+
+    @Test
+    public void testBestTimeDeserialization() throws Exception {
+
+        SchedulePayload payload = SchedulePayload.newBuilder()
+                .setSchedule(Schedule.newBuilder()
+                        .setBestTime(BestTime.newBuilder()
+                                .setSendDate(DateTime.now())
+                                .build())
+                        .build())
+                .setName("BestTimePushPayload")
+                .setPushPayload(PushPayload.newBuilder()
+                        .setAudience(Selectors.all())
+                        .setDeviceTypes(DeviceTypeData.all())
+                        .setNotification(Notification.newBuilder()
+                                .setAlert("Hello Everyone")
+                                .build())
+                        .build())
+                .build();
+
+        String json = MAPPER.writeValueAsString(payload);
+
+        SchedulePayload fromJson = MAPPER.readValue(json, SchedulePayload.class);
+
+        junit.framework.Assert.assertEquals(payload, fromJson);
+    }
+
+    @Test
+    public void testDeserializationWithoutName() throws Exception {
+        String json =
+                "{" +
+                        "\"schedule\": {" +
+                        "\"scheduled_time\": \"2013-05-05 00:00:01\"" +
+                        "}," +
+                        "\"push\": {" +
+                        "\"audience\" : \"all\"," +
+                        "\"device_types\" : [ \"ios\" ]," +
+                        "\"notification\" : { \"alert\" : \"derp\" }" +
+                        "}" +
+                        "}";
+
+        SchedulePayload payload = MAPPER.readValue(json, SchedulePayload.class);
+
+        org.junit.Assert.assertNotNull(payload);
+        junit.framework.Assert.assertEquals(payload.getName(), Optional.<String>absent());
+        junit.framework.Assert.assertEquals(payload.getSchedule().getScheduledTimestamp(), DateFormats.DATE_PARSER.parseDateTime("2013-05-05 00:00:01"));
+    }
+
+    @Test
+    public void testInvalidScheduleObject() throws Exception {
+        thrown.expect(APIParsingException.class);
+        String json =
+                "{" +
+                        "\"schedule\": {" +
+                        " \"2013-05-05 00:00:01\"" +
+                        "}," +
+                        "\"push\": {" +
+                        "\"audience\" : \"all\"," +
+                        "\"device_types\" : [ \"ios\" ]," +
+                        "\"notification\" : { \"alert\" : \"derp\" }" +
+                        "}" +
+                        "}";
+
+        MAPPER.readValue(json, SchedulePayload.class);
+
+    }
+
+    @Test
+    public void testInvalidName() throws Exception {
+        thrown.expect(APIParsingException .class);
+        String json =
+                "{" +
+                        "\"schedule\": {" +
+                        "\"scheduled_time\": \"2013-05-05 00:00:01\"" +
+                        "}," +
+                        "\"name\": " +
+                        "\"" + " " + "\"" +
+                        "," +
+                        "\"push\": {" +
+                        "\"audience\" : \"all\"," +
+                        "\"device_types\" : [ \"ios\" ]," +
+                        "\"notification\" : { \"alert\" : \"derp\" }" +
+                        "}" +
+                        "}";
+
+        MAPPER.readValue(json, SchedulePayload.class);
+    }
+}
\ No newline at end of file
diff --git a/src/test/java/com/urbanairship/api/schedule/SchedulePayloadSerializerTest.java b/src/test/java/com/urbanairship/api/schedule/SchedulePayloadSerializerTest.java
new file mode 100644
index 0000000..8b0244e
--- /dev/null
+++ b/src/test/java/com/urbanairship/api/schedule/SchedulePayloadSerializerTest.java
@@ -0,0 +1,136 @@
+package com.urbanairship.api.schedule;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.urbanairship.api.push.model.DeviceType;
+import com.urbanairship.api.push.model.DeviceTypeData;
+import com.urbanairship.api.push.model.PushOptions;
+import com.urbanairship.api.push.model.PushPayload;
+import com.urbanairship.api.push.model.audience.Selectors;
+import com.urbanairship.api.push.model.notification.Notification;
+import com.urbanairship.api.schedule.model.BestTime;
+import com.urbanairship.api.schedule.model.Schedule;
+import com.urbanairship.api.schedule.model.SchedulePayload;
+import com.urbanairship.api.schedule.parse.ScheduleObjectMapper;
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeZone;
+import org.junit.Test;
+
+public class SchedulePayloadSerializerTest {
+
+    private static final ObjectMapper MAPPER = ScheduleObjectMapper.getInstance();
+
+    @Test
+    public void testSerialization() throws Exception {
+
+        PushPayload pushPayload = PushPayload.newBuilder()
+                .setAudience(Selectors.tag("tag"))
+                .setDeviceTypes(DeviceTypeData.newBuilder().addDeviceType(DeviceType.IOS).build())
+                .setNotification(Notification.newBuilder().setAlert("alert").build())
+                .setPushOptions(PushOptions.newBuilder().build())
+                .build();
+        SchedulePayload schedulePayload = SchedulePayload.newBuilder()
+                .setSchedule(Schedule.newBuilder()
+                        .setScheduledTimestamp(new DateTime("2013-05-05T00:00:01", DateTimeZone.UTC))
+                        .build())
+                .setPushPayload(pushPayload)
+                .build();
+
+        String json = MAPPER.writeValueAsString(schedulePayload);
+
+        String properJson = "{\"schedule\":{\"scheduled_time\":\"2013-05-05T00:00:01\"},\"push\":{\"audience\":{\"tag\":\"tag\"},\"device_types\":[\"ios\"],\"notification\":{\"alert\":\"alert\"},\"options\":{}}}";
+
+        org.junit.Assert.assertEquals(json, properJson);
+    }
+
+    @Test
+    public void testBestTimeSerialization() throws Exception {
+        BestTime bestTime = BestTime.newBuilder()
+                .setSendDate(new DateTime("2013-05-05T00:00:01", DateTimeZone.UTC))
+                .build();
+
+        PushPayload pushPayload = PushPayload.newBuilder()
+                .setAudience(Selectors.tag("tag"))
+                .setDeviceTypes(DeviceTypeData.newBuilder().addDeviceType(DeviceType.IOS).build())
+                .setNotification(Notification.newBuilder().setAlert("alert").build())
+                .setPushOptions(PushOptions.newBuilder().build())
+                .build();
+        SchedulePayload schedulePayload = SchedulePayload.newBuilder()
+                .setSchedule(Schedule.newBuilder()
+                        .setBestTime(bestTime)
+                        .build())
+                .setPushPayload(pushPayload)
+                .build();
+
+        String json = MAPPER.writeValueAsString(schedulePayload);
+
+        String properJson = "{\"schedule\":{\"best_time\":{\"send_date\":\"2013-05-05\"}},\"push\":{\"audience\":{\"tag\":\"tag\"},\"device_types\":[\"ios\"],\"notification\":{\"alert\":\"alert\"},\"options\":{}}}";
+        org.junit.Assert.assertEquals(json, properJson);
+    }
+
+    @Test(expected = Exception.class)
+    public void testNoSchedule() throws Exception {
+
+        PushPayload pushPayload = PushPayload.newBuilder()
+                .setAudience(Selectors.tag("tag"))
+                .setDeviceTypes(DeviceTypeData.newBuilder().addDeviceType(DeviceType.IOS).build())
+                .setNotification(Notification.newBuilder().setAlert("alert").build())
+                .setPushOptions(PushOptions.newBuilder().build())
+                .build();
+        SchedulePayload schedulePayload = SchedulePayload.newBuilder()
+                .setSchedule(Schedule.newBuilder()
+                        .build())
+                .setPushPayload(pushPayload)
+                .build();
+        String json = MAPPER.writeValueAsString(schedulePayload);
+        String properJson = "{\"schedule\":{},\"push\":{\"audience\":{\"tag\":\"tag\"},\"device_types\":[\"ios\"],\"notification\":{\"alert\":\"alert\"},\"options\":{\"present\":true}}}";
+
+        org.junit.Assert.assertEquals(json, properJson);
+
+    }
+
+    @Test
+    public void testLocalTimeFlag() throws Exception {
+
+        PushPayload pushPayload = PushPayload.newBuilder()
+                .setAudience(Selectors.tag("tag"))
+                .setDeviceTypes(DeviceTypeData.newBuilder().addDeviceType(DeviceType.IOS).build())
+                .setNotification(Notification.newBuilder().setAlert("alert").build())
+                .setPushOptions(PushOptions.newBuilder().build())
+                .build();
+        SchedulePayload schedulePayload = SchedulePayload.newBuilder()
+                .setSchedule(Schedule.newBuilder()
+                        .setScheduledTimestamp(new DateTime("2013-05-05T00:00:01", DateTimeZone.UTC))
+                        .build())
+                .setPushPayload(pushPayload)
+                .build();
+
+        org.junit.Assert.assertFalse(schedulePayload.getSchedule().getLocalTimePresent());
+
+        PushPayload pushPayloadLocal = PushPayload.newBuilder()
+                .setAudience(Selectors.tag("tag"))
+                .setDeviceTypes(DeviceTypeData.newBuilder().addDeviceType(DeviceType.IOS).build())
+                .setNotification(Notification.newBuilder().setAlert("alert").build())
+                .setPushOptions(PushOptions.newBuilder().build())
+                .build();
+
+        Schedule schedule = Schedule.newBuilder()
+                .setLocalScheduledTimestamp(new DateTime("2013-05-05T00:00:01", DateTimeZone.UTC))
+                .build();
+
+        SchedulePayload schedulePayloadLocal = SchedulePayload.newBuilder()
+                .setSchedule(schedule)
+                .setPushPayload(pushPayloadLocal)
+                .build();
+
+        String expectedScheduled = "{\"local_scheduled_time\":\"2013-05-05T00:00:01\"}";
+        String scheduleString = MAPPER.writeValueAsString(schedulePayloadLocal.getSchedule());
+
+        JsonNode jsonNode = MAPPER.readTree(scheduleString);
+        JsonNode jsonNodeExpected = MAPPER.readTree(expectedScheduled);
+
+        org.junit.Assert.assertTrue(schedulePayloadLocal.getSchedule().getLocalTimePresent());
+        org.junit.Assert.assertEquals(jsonNodeExpected, jsonNode);
+    }
+
+}
diff --git a/src/test/java/com/urbanairship/api/schedule/ScheduleResponseTest.java b/src/test/java/com/urbanairship/api/schedule/ScheduleResponseTest.java
new file mode 100644
index 0000000..b283d9d
--- /dev/null
+++ b/src/test/java/com/urbanairship/api/schedule/ScheduleResponseTest.java
@@ -0,0 +1,43 @@
+package com.urbanairship.api.schedule;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.urbanairship.api.schedule.model.ScheduleResponse;
+import com.urbanairship.api.schedule.parse.ScheduleObjectMapper;
+import org.junit.Test;
+
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+public class ScheduleResponseTest {
+
+    @Test
+    public void testAPIScheduleResponse() {
+        String scheduleJSON = "{\"ok\":true,\"operation_id\":\"47ecebe0-27c4-11e4-ad5c-001b21c78f20\",\"schedule_urls\":[\"https://go.urbanairship.com/api/schedules/4f636bb9-e278-4af8-8fe4-873809acbd87\"],\"schedule_ids\":[\"4f636bb9-e278-4af8-8fe4-873809acbd87\"],\"schedules\":[{\"url\":\"https://go.urbanairship.com/api/schedules/4f636bb9-e278-4af8-8fe4-873809acbd87\",\"schedule\":{\"scheduled_time\":\"2014-08-19T17:15:27\"},\"name\":\"Urban Airship Scheduled Push\",\"push\":{\"audience\":\"ALL\",\"device_types\":[\"ios\"],\"notification\":{\"alert\":\"Scheduled API v3\"}},\"push_ids\":[\"70d84384-4c0a-4917-8e05-4443cf4e9575\"]}]}";
+
+        ObjectMapper mapper = ScheduleObjectMapper.getInstance();
+        try {
+            ScheduleResponse response = mapper.readValue(scheduleJSON, ScheduleResponse.class);
+            assertTrue(response.getOk());
+            assertTrue(response.getOperationId().equals("47ecebe0-27c4-11e4-ad5c-001b21c78f20"));
+            assertTrue(response.getScheduleUrls().get(0).equals("https://go.urbanairship.com/api/schedules/4f636bb9-e278-4af8-8fe4-873809acbd87"));
+            assertTrue(response.getScheduleIds().get(0).equals("4f636bb9-e278-4af8-8fe4-873809acbd87"));
+            assertTrue(response.getSchedulePayloads().get(0).getUrl().get().equals("https://go.urbanairship.com/api/schedules/4f636bb9-e278-4af8-8fe4-873809acbd87"));
+            assertTrue(response.getSchedulePayloads().get(0).getPushPayload().getNotification().get().getAlert().get().equals("Scheduled API v3"));
+        } catch (Exception ex) {
+            fail("Exception " + ex.getMessage());
+        }
+    }
+
+    @Test
+    public void testUpdateAPIScheduleResponse() {
+        String scheduleJSON = "{\"ok\":true,\"operation_id\":\"47ecebe0-27c4-11e4-ad5c-001b21c78f20\" }";
+
+        ObjectMapper mapper = ScheduleObjectMapper.getInstance();
+        try {
+            ScheduleResponse response = mapper.readValue(scheduleJSON, ScheduleResponse.class);
+            assertTrue(response.getOperationId().equals("47ecebe0-27c4-11e4-ad5c-001b21c78f20"));
+        } catch (Exception ex) {
+            fail("Exception " + ex.getMessage());
+        }
+    }
+}
diff --git a/src/test/java/com/urbanairship/api/schedule/ScheduleSerializerTest.java b/src/test/java/com/urbanairship/api/schedule/ScheduleSerializerTest.java
new file mode 100644
index 0000000..5e54db3
--- /dev/null
+++ b/src/test/java/com/urbanairship/api/schedule/ScheduleSerializerTest.java
@@ -0,0 +1,61 @@
+package com.urbanairship.api.schedule;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.urbanairship.api.push.model.DeviceType;
+import com.urbanairship.api.push.model.DeviceTypeData;
+import com.urbanairship.api.push.model.PushOptions;
+import com.urbanairship.api.push.model.PushPayload;
+import com.urbanairship.api.push.model.audience.Selectors;
+import com.urbanairship.api.push.model.notification.Notification;
+import com.urbanairship.api.push.parse.PushObjectMapper;
+import com.urbanairship.api.schedule.model.BestTime;
+import com.urbanairship.api.schedule.model.Schedule;
+import com.urbanairship.api.schedule.model.SchedulePayload;
+import com.urbanairship.api.schedule.parse.ScheduleObjectMapper;
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeZone;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+
+public class ScheduleSerializerTest {
+
+    private static final ObjectMapper MAPPER = ScheduleObjectMapper.getInstance();
+
+    @Test
+    public void testSerialization() throws Exception {
+
+        PushPayload pushPayload = PushPayload.newBuilder()
+                .setAudience(Selectors.tag("tag"))
+                .setDeviceTypes(DeviceTypeData.newBuilder().addDeviceType(DeviceType.IOS).build())
+                .setNotification(Notification.newBuilder().setAlert("alert").build())
+                .setPushOptions(PushOptions.newBuilder().build())
+                .build();
+        SchedulePayload schedulePayload = SchedulePayload.newBuilder()
+                .setSchedule(Schedule.newBuilder()
+                        .setScheduledTimestamp(new DateTime("2013-05-05T00:00:01", DateTimeZone.UTC))
+                        .build())
+                .setPushPayload(pushPayload)
+                .build();
+
+        String json = MAPPER.writeValueAsString(schedulePayload);
+
+        String properJson = "{\"schedule\":{\"scheduled_time\":\"2013-05-05T00:00:01\"},\"push\":{\"audience\":{\"tag\":\"tag\"},\"device_types\":[\"ios\"],\"notification\":{\"alert\":\"alert\"},\"options\":{}}}";
+
+        assertEquals(json, properJson);
+
+        BestTime bestTime = BestTime.newBuilder()
+                .setSendDate(DateTime.now())
+                .build();
+
+        Schedule schedule = Schedule.newBuilder()
+                .setBestTime(bestTime)
+                .build();
+
+        String scheduledBestTimeJson = MAPPER.writeValueAsString(schedule);
+
+        System.out.println(scheduledBestTimeJson);
+
+    }
+
+}
diff --git a/src/test/java/com/urbanairship/api/schedule/ScheduleTest.java b/src/test/java/com/urbanairship/api/schedule/ScheduleTest.java
new file mode 100644
index 0000000..d9d0918
--- /dev/null
+++ b/src/test/java/com/urbanairship/api/schedule/ScheduleTest.java
@@ -0,0 +1,76 @@
+package com.urbanairship.api.schedule;
+
+import com.urbanairship.api.schedule.model.BestTime;
+import com.urbanairship.api.schedule.model.Schedule;
+import org.joda.time.DateTime;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.ExpectedException;
+
+public class ScheduleTest {
+
+    private DateTime dateTime;
+
+    @Before
+    public void setUp() {
+        dateTime = DateTime.now();
+    }
+
+    @Rule
+    public ExpectedException thrown = ExpectedException.none();
+
+    /**
+     * Neither setScheduledTimestamp nor setBestTime called
+     */
+    @Test
+    public void testScheduledTimeAndBestTimeBothAbsent() throws Exception {
+        thrown.expect(IllegalArgumentException.class);
+        Schedule schedule = Schedule.newBuilder()
+                .build();
+    }
+
+    /**
+     * Both setScheduledTimestamp and setBestTime called
+     */
+    @Test
+    public void testScheduledTimeAndBestTimeBothPresent() throws Exception {
+        thrown.expect(IllegalArgumentException.class);
+
+        Schedule schedule = Schedule.newBuilder()
+                .setScheduledTimestamp(dateTime)
+                .setBestTime(BestTime.newBuilder()
+                        .setSendDate(dateTime)
+                        .build())
+                .build();
+    }
+
+    /**
+     * Only setScheduledTimestamp, not setBestTime called
+     */
+    @Test
+    public void testScheduledTime() {
+
+        Schedule schedule = Schedule.newBuilder()
+                .setScheduledTimestamp(dateTime)
+                .build();
+
+        Assert.assertNotNull(schedule.getScheduledTimestamp() );
+    }
+
+    /**
+     * Only setBestTime called, not setScheduledTimestamp
+     */
+    @Test
+    public void testBestTime() {
+
+        Schedule schedule = Schedule.newBuilder()
+                .setBestTime(BestTime.newBuilder()
+                        .setSendDate(dateTime)
+                        .build())
+                .build();
+
+        Assert.assertNotNull(schedule.getBestTime());
+    }
+}
diff --git a/src/test/java/com/urbanairship/api/schedule/model/ListSchedulesResponseTest.java b/src/test/java/com/urbanairship/api/schedule/model/ListSchedulesResponseTest.java
deleted file mode 100644
index 8dcd5d2..0000000
--- a/src/test/java/com/urbanairship/api/schedule/model/ListSchedulesResponseTest.java
+++ /dev/null
@@ -1,125 +0,0 @@
-package com.urbanairship.api.schedule.model;
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-import com.urbanairship.api.push.model.DeviceType;
-import com.urbanairship.api.push.model.PushPayload;
-import com.urbanairship.api.schedule.model.ListAllSchedulesResponse;
-import com.urbanairship.api.schedule.model.Schedule;
-import com.urbanairship.api.schedule.model.SchedulePayload;
-import com.urbanairship.api.schedule.parse.ScheduleObjectMapper;
-import org.junit.Test;
-
-import java.util.List;
-
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
-
-public class ListSchedulesResponseTest {
-
-    @Test
-    public void testAPIScheduleResponse() {
-
-        String listscheduleresponse = "{\"ok\":true,\"count\":5,\"total_count\":6,\"schedules\":" +
-                "[{\"url\":\"https://go.urbanairship.com/api/schedules/5a60e0a6-9aa7-449f-a038-6806e572baf3\",\"" +
-                "schedule\":{\"scheduled_time\":\"2015-01-01T08:00:00\"},\"push\":{\"audience\":\"ALL\",\"device" +
-                "_types\":[\"android\",\"ios\"],\"notification\":{\"alert\":\"Happy New Year 2015!\",\"android\"" +
-                ":{},\"ios\":{}}},\"push_ids\":[\"8430f2e0-ec07-4c1e-adc4-0c7c7978e648\"]},{\"url\":\"https://go" +
-                ".urbanairship.com/api/schedules/f53aa2bd-018a-4482-8d7d-691d13407973\",\"schedule\":{\"schedule" +
-                "d_time\":\"2016-01-01T08:00:00\"},\"push\":{\"audience\":\"ALL\",\"device_types\":[\"android\"," +
-                "\"ios\"],\"notification\":{\"alert\":\"Happy New Year 2016!\",\"android\":{},\"ios\":{}}},\"pus" +
-                "h_ids\":[\"b217a321-922f-4aee-b239-ca1b58c6b652\"]}]}";
-
-        ObjectMapper mapper = ScheduleObjectMapper.getInstance();
-
-        try {
-            ListAllSchedulesResponse response = mapper.readValue(listscheduleresponse, ListAllSchedulesResponse.class);
-            assertTrue(response.getOk());
-            assertTrue(response.getCount() == 5);
-            assertTrue(response.getTotal_Count() == 6);
-            assertTrue(response.getNext_Page() == null);
-
-            List<SchedulePayload> list = response.getSchedules();
-
-            assertTrue(list.get(0).getUrl().get().equals("https://go.urbanairship.com/api/schedules/5a60e0a6-9aa7-449f-a038-6806e572baf3"));
-            assertTrue(list.get(0).getPushIds().toString().equals("[8430f2e0-ec07-4c1e-adc4-0c7c7978e648]"));
-
-            Schedule firstschedule = list.get(0).getSchedule();
-            assertTrue(firstschedule.getScheduledTimestamp().toString().equals("2015-01-01T08:00:00.000Z"));
-
-            PushPayload firstpush = list.get(0).getPushPayload();
-            assertTrue(firstpush.getAudience().getType().getIdentifier().equals("all"));
-            assertTrue(firstpush.getDeviceTypes().getDeviceTypes().get().contains(DeviceType.IOS));
-            assertTrue(firstpush.getDeviceTypes().getDeviceTypes().get().contains(DeviceType.ANDROID));
-            assertTrue(firstpush.getNotification().get().getAlert().get().equals("Happy New Year 2015!"));
-
-            assertTrue(list.get(1).getUrl().get().equals("https://go.urbanairship.com/api/schedules/f53aa2bd-018a-4482-8d7d-691d13407973"));
-            assertTrue(list.get(1).getPushIds().toString().equals("[b217a321-922f-4aee-b239-ca1b58c6b652]"));
-
-            Schedule secondschedule = list.get(1).getSchedule();
-            assertTrue(secondschedule.getScheduledTimestamp().toString().equals("2016-01-01T08:00:00.000Z"));
-
-            PushPayload secondpush = list.get(1).getPushPayload();
-            assertTrue(secondpush.getAudience().getType().getIdentifier().equals("all"));
-            assertTrue(secondpush.getDeviceTypes().getDeviceTypes().get().contains(DeviceType.IOS));
-            assertTrue(secondpush.getDeviceTypes().getDeviceTypes().get().contains(DeviceType.ANDROID));
-            assertTrue(secondpush.getNotification().get().getAlert().get().equals("Happy New Year 2016!"));
-
-        } catch (Exception ex) {
-            fail("Exception " + ex.getMessage());
-        }
-    }
-
-    @Test
-    public void testAPIScheduleResponseWithNextPage() {
-
-        String listscheduleresponse = "{\"ok\":true,\"count\":5,\"total_count\":6,\"next_page\":\"puppies\",\"schedules\":" +
-                "[{\"url\":\"https://go.urbanairship.com/api/schedules/5a60e0a6-9aa7-449f-a038-6806e572baf3\",\"" +
-                "schedule\":{\"scheduled_time\":\"2015-01-01T08:00:00\"},\"push\":{\"audience\":\"ALL\",\"device" +
-                "_types\":[\"android\",\"ios\"],\"notification\":{\"alert\":\"Happy New Year 2015!\",\"android\"" +
-                ":{},\"ios\":{}}},\"push_ids\":[\"8430f2e0-ec07-4c1e-adc4-0c7c7978e648\"]},{\"url\":\"https://go" +
-                ".urbanairship.com/api/schedules/f53aa2bd-018a-4482-8d7d-691d13407973\",\"schedule\":{\"schedule" +
-                "d_time\":\"2016-01-01T08:00:00\"},\"push\":{\"audience\":\"ALL\",\"device_types\":[\"android\"," +
-                "\"ios\"],\"notification\":{\"alert\":\"Happy New Year 2016!\",\"android\":{},\"ios\":{}}},\"pus" +
-                "h_ids\":[\"b217a321-922f-4aee-b239-ca1b58c6b652\"]}]}";
-
-        ObjectMapper mapper = ScheduleObjectMapper.getInstance();
-
-        try {
-            ListAllSchedulesResponse response = mapper.readValue(listscheduleresponse, ListAllSchedulesResponse.class);
-            assertTrue(response.getOk());
-            assertTrue(response.getCount() == 5);
-            assertTrue(response.getTotal_Count() == 6);
-            assertTrue(response.getNext_Page().equals("puppies"));
-
-            List<SchedulePayload> list = response.getSchedules();
-
-            assertTrue(list.get(0).getUrl().get().equals("https://go.urbanairship.com/api/schedules/5a60e0a6-9aa7-449f-a038-6806e572baf3"));
-            assertTrue(list.get(0).getPushIds().toString().equals("[8430f2e0-ec07-4c1e-adc4-0c7c7978e648]"));
-
-            Schedule firstschedule = list.get(0).getSchedule();
-            assertTrue(firstschedule.getScheduledTimestamp().toString().equals("2015-01-01T08:00:00.000Z"));
-
-            PushPayload firstpush = list.get(0).getPushPayload();
-            assertTrue(firstpush.getAudience().getType().getIdentifier().equals("all"));
-            assertTrue(firstpush.getDeviceTypes().getDeviceTypes().get().contains(DeviceType.IOS));
-            assertTrue(firstpush.getDeviceTypes().getDeviceTypes().get().contains(DeviceType.ANDROID));
-            assertTrue(firstpush.getNotification().get().getAlert().get().equals("Happy New Year 2015!"));
-
-            assertTrue(list.get(1).getUrl().get().equals("https://go.urbanairship.com/api/schedules/f53aa2bd-018a-4482-8d7d-691d13407973"));
-            assertTrue(list.get(1).getPushIds().toString().equals("[b217a321-922f-4aee-b239-ca1b58c6b652]"));
-
-            Schedule secondschedule = list.get(1).getSchedule();
-            assertTrue(secondschedule.getScheduledTimestamp().toString().equals("2016-01-01T08:00:00.000Z"));
-
-            PushPayload secondpush = list.get(1).getPushPayload();
-            assertTrue(secondpush.getAudience().getType().getIdentifier().equals("all"));
-            assertTrue(secondpush.getDeviceTypes().getDeviceTypes().get().contains(DeviceType.IOS));
-            assertTrue(secondpush.getDeviceTypes().getDeviceTypes().get().contains(DeviceType.ANDROID));
-            assertTrue(secondpush.getNotification().get().getAlert().get().equals("Happy New Year 2016!"));
-        } catch (Exception ex) {
-            fail("Exception " + ex.getMessage());
-        }
-    }
-
-}
diff --git a/src/test/java/com/urbanairship/api/schedule/model/ScheduleResponseTest.java b/src/test/java/com/urbanairship/api/schedule/model/ScheduleResponseTest.java
deleted file mode 100644
index 63f83d7..0000000
--- a/src/test/java/com/urbanairship/api/schedule/model/ScheduleResponseTest.java
+++ /dev/null
@@ -1,43 +0,0 @@
-package com.urbanairship.api.schedule.model;
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-import com.urbanairship.api.schedule.model.ScheduleResponse;
-import com.urbanairship.api.schedule.parse.ScheduleObjectMapper;
-import org.junit.Test;
-
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
-public class ScheduleResponseTest {
-
-    @Test
-    public void testAPIScheduleResponse() {
-        String scheduleJSON = "{\"ok\":true,\"operation_id\":\"47ecebe0-27c4-11e4-ad5c-001b21c78f20\",\"schedule_urls\":[\"https://go.urbanairship.com/api/schedules/4f636bb9-e278-4af8-8fe4-873809acbd87\"],\"schedule_ids\":[\"4f636bb9-e278-4af8-8fe4-873809acbd87\"],\"schedules\":[{\"url\":\"https://go.urbanairship.com/api/schedules/4f636bb9-e278-4af8-8fe4-873809acbd87\",\"schedule\":{\"scheduled_time\":\"2014-08-19T17:15:27\"},\"name\":\"Urban Airship Scheduled Push\",\"push\":{\"audience\":\"ALL\",\"device_types\":[\"ios\"],\"notification\":{\"alert\":\"Scheduled API v3\"}},\"push_ids\":[\"70d84384-4c0a-4917-8e05-4443cf4e9575\"]}]}";
-
-        ObjectMapper mapper = ScheduleObjectMapper.getInstance();
-        try {
-            ScheduleResponse response = mapper.readValue(scheduleJSON, ScheduleResponse.class);
-            assertTrue(response.getOk());
-            assertTrue(response.getOperationId().equals("47ecebe0-27c4-11e4-ad5c-001b21c78f20"));
-            assertTrue(response.getScheduleUrls().get(0).equals("https://go.urbanairship.com/api/schedules/4f636bb9-e278-4af8-8fe4-873809acbd87"));
-            assertTrue(response.getScheduleIds().get(0).equals("4f636bb9-e278-4af8-8fe4-873809acbd87"));
-            assertTrue(response.getSchedulePayloads().get(0).getUrl().get().equals("https://go.urbanairship.com/api/schedules/4f636bb9-e278-4af8-8fe4-873809acbd87"));
-            assertTrue(response.getSchedulePayloads().get(0).getPushPayload().getNotification().get().getAlert().get().equals("Scheduled API v3"));
-        } catch (Exception ex) {
-            fail("Exception " + ex.getMessage());
-        }
-    }
-
-    @Test
-    public void testUpdateAPIScheduleResponse() {
-        String scheduleJSON = "{\"ok\":true,\"operation_id\":\"47ecebe0-27c4-11e4-ad5c-001b21c78f20\" }";
-
-        ObjectMapper mapper = ScheduleObjectMapper.getInstance();
-        try {
-            ScheduleResponse response = mapper.readValue(scheduleJSON, ScheduleResponse.class);
-            assertTrue(response.getOperationId().equals("47ecebe0-27c4-11e4-ad5c-001b21c78f20"));
-        } catch (Exception ex) {
-            fail("Exception " + ex.getMessage());
-        }
-    }
-}
diff --git a/src/test/java/com/urbanairship/api/schedule/model/ScheduleTest.java b/src/test/java/com/urbanairship/api/schedule/model/ScheduleTest.java
deleted file mode 100644
index d5139b7..0000000
--- a/src/test/java/com/urbanairship/api/schedule/model/ScheduleTest.java
+++ /dev/null
@@ -1,85 +0,0 @@
-package com.urbanairship.api.schedule.model;
-
-import com.urbanairship.api.schedule.model.BestTime;
-import com.urbanairship.api.schedule.model.Schedule;
-import org.joda.time.DateTime;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Date;
-
-public class ScheduleTest {
-
-    private DateTime dateTime;
-
-    @Before
-
-    public void setUp() {
-        dateTime = DateTime.now();
-
-
-    }
-
-    /**
-     * Neither setScheduledTimestamp nor setBestTime called
-     */
-    @Test(expected = IllegalArgumentException.class)
-
-    public void testScheduledTimeAndBestTimeBothAbsent() {
-        Schedule schedule = Schedule.newBuilder()
-                .build();
-        
-    }
-
-    /**
-     * Both setScheduledTimestamp and setBestTime called
-     */
-    @Test(expected = IllegalArgumentException.class)
-
-    public void testScheduledTimeAndBestTimeBothPresent() {
-
-        Schedule schedule = Schedule.newBuilder()
-                .setScheduledTimestamp(dateTime)
-                .setBestTime(BestTime.newBuilder()
-                        .setSendDate(dateTime)
-                        .build())
-                .build();
-    }
-
-    /**
-     * Only setScheduledTimestamp, not setBestTime called
-     */
-    @Test
-    public void testScheduledTime() {
-
-        Schedule schedule = Schedule.newBuilder()
-                .setScheduledTimestamp(dateTime)
-                .build();
-
-        Assert.assertNotNull(schedule.getScheduledTimestamp() );
-    }
-
-    /**
-     * Only setBestTime called, not setScheduledTimestamp
-     */
-    @Test
-    public void testBestTime() {
-
-        Schedule schedule = Schedule.newBuilder()
-                .setBestTime(BestTime.newBuilder()
-                        .setSendDate(dateTime)
-                        .build())
-                .build();
-
-        Assert.assertNotNull(schedule.getBestTime());
-
-    }
-
-
-
-
-
-
-
-}
diff --git a/src/test/java/com/urbanairship/api/schedule/parse/SchedulePayloadDeserializerTest.java b/src/test/java/com/urbanairship/api/schedule/parse/SchedulePayloadDeserializerTest.java
deleted file mode 100644
index 4ff5f12..0000000
--- a/src/test/java/com/urbanairship/api/schedule/parse/SchedulePayloadDeserializerTest.java
+++ /dev/null
@@ -1,159 +0,0 @@
-package com.urbanairship.api.schedule.parse;
-
-import com.fasterxml.jackson.core.type.TypeReference;
-import com.fasterxml.jackson.databind.ObjectMapper;
-import com.google.common.base.Optional;
-import com.urbanairship.api.common.parse.APIParsingException;
-import com.urbanairship.api.common.parse.DateFormats;
-import com.urbanairship.api.push.model.DeviceType;
-import com.urbanairship.api.push.model.DeviceTypeData;
-import com.urbanairship.api.push.model.PushPayload;
-import com.urbanairship.api.push.model.audience.Selector;
-import com.urbanairship.api.push.model.audience.Selectors;
-import com.urbanairship.api.push.model.notification.Notification;
-import com.urbanairship.api.push.parse.PushObjectMapper;
-import com.urbanairship.api.schedule.model.BestTime;
-import com.urbanairship.api.schedule.model.Schedule;
-import com.urbanairship.api.schedule.model.SchedulePayload;
-import com.urbanairship.api.schedule.parse.ScheduleObjectMapper;
-import org.apache.commons.lang.RandomStringUtils;
-import org.joda.time.DateTime;
-import org.junit.Assert;
-import org.junit.Test;
-
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
-public class SchedulePayloadDeserializerTest {
-
-    private static final ObjectMapper MAPPER = PushObjectMapper.getInstance();
-
-    @Test
-    public void testDeserialization() throws Exception {
-        String name = RandomStringUtils.randomAlphabetic(5);
-
-        String json =
-                "{" +
-                        "\"schedule\": {" +
-                        "\"scheduled_time\": \"2013-05-05 00:00:01\"" +
-                        "}," +
-                        "\"name\": " +
-                        "\"" + name + "\"" +
-                        "," +
-                        "\"push\": {" +
-                        "\"audience\" : \"all\"," +
-                        "\"device_types\" : [ \"ios\" ]," +
-                        "\"notification\" : { \"alert\" : \"derp\" }" +
-                        "}" +
-                        "}";
-
-        SchedulePayload payload = MAPPER.readValue(json, SchedulePayload.class);
-
-        assertNotNull(payload);
-        assertEquals(payload.getName(), Optional.of(name));
-        assertEquals(payload.getSchedule().getScheduledTimestamp(), DateFormats.DATE_PARSER.parseDateTime("2013-05-05 00:00:01"));
-
-        List<SchedulePayload> payloadList = MAPPER.readValue(json, new TypeReference<List<SchedulePayload>>() {
-        });
-
-        assertNotNull(payloadList);
-        assertEquals(payloadList.size(), 1);
-
-    }
-
-    @Test
-    public void testBestTimeDeserialization() throws Exception {
-
-        BestTime bestTime = BestTime.newBuilder()
-                .setSendDate(DateTime.now())
-                .build();
-
-        Schedule schedule = Schedule.newBuilder()
-                .setBestTime(bestTime)
-                .build();
-
-        SchedulePayload payload = SchedulePayload.newBuilder()
-                .setSchedule(schedule)
-                .setName("BestTimePushPayload")
-                .setPushPayload(PushPayload.newBuilder()
-                        .setAudience(Selectors.all())
-                        .setDeviceTypes(DeviceTypeData.all())
-                        .setNotification(Notification.newBuilder()
-                                .setAlert("Hello Nerds")
-                                .build())
-                        .build())
-                .build();
-
-        String json = MAPPER.writeValueAsString(payload);
-
-        SchedulePayload fromJson = MAPPER.readValue(json, SchedulePayload.class);
-
-        assertEquals(payload, fromJson);
-    }
-
-
-
-
-    @Test
-    public void testDeserializationWithoutName() throws Exception {
-        String json =
-                "{" +
-                        "\"schedule\": {" +
-                        "\"scheduled_time\": \"2013-05-05 00:00:01\"" +
-                        "}," +
-                        "\"push\": {" +
-                        "\"audience\" : \"all\"," +
-                        "\"device_types\" : [ \"ios\" ]," +
-                        "\"notification\" : { \"alert\" : \"derp\" }" +
-                        "}" +
-                        "}";
-
-        SchedulePayload payload = MAPPER.readValue(json, SchedulePayload.class);
-
-        assertNotNull(payload);
-        assertEquals(payload.getName(), Optional.<String>absent());
-        assertEquals(payload.getSchedule().getScheduledTimestamp(), DateFormats.DATE_PARSER.parseDateTime("2013-05-05 00:00:01"));
-    }
-
-    @Test(expected = APIParsingException.class)
-    public void testInvalidScheduleObject() throws Exception {
-        String json =
-                "{" +
-                        "\"schedule\": {" +
-                        " \"2013-05-05 00:00:01\"" +
-                        "}," +
-                        "\"push\": {" +
-                        "\"audience\" : \"all\"," +
-                        "\"device_types\" : [ \"ios\" ]," +
-                        "\"notification\" : { \"alert\" : \"derp\" }" +
-                        "}" +
-                        "}";
-
-        MAPPER.readValue(json, SchedulePayload.class);
-
-    }
-
-    @Test(expected = APIParsingException.class)
-    public void testInvalidName() throws Exception {
-
-        String json =
-                "{" +
-                        "\"schedule\": {" +
-                        "\"scheduled_time\": \"2013-05-05 00:00:01\"" +
-                        "}," +
-                        "\"name\": " +
-                        "\"" + " " + "\"" +
-                        "," +
-                        "\"push\": {" +
-                        "\"audience\" : \"all\"," +
-                        "\"device_types\" : [ \"ios\" ]," +
-                        "\"notification\" : { \"alert\" : \"derp\" }" +
-                        "}" +
-                        "}";
-
-        MAPPER.readValue(json, SchedulePayload.class);
-
-    }
-}
\ No newline at end of file
diff --git a/src/test/java/com/urbanairship/api/schedule/parse/SchedulePayloadSerializerTest.java b/src/test/java/com/urbanairship/api/schedule/parse/SchedulePayloadSerializerTest.java
deleted file mode 100644
index a632681..0000000
--- a/src/test/java/com/urbanairship/api/schedule/parse/SchedulePayloadSerializerTest.java
+++ /dev/null
@@ -1,141 +0,0 @@
-package com.urbanairship.api.schedule.parse;
-
-import com.fasterxml.jackson.databind.JsonNode;
-import com.fasterxml.jackson.databind.ObjectMapper;
-import com.urbanairship.api.push.model.DeviceType;
-import com.urbanairship.api.push.model.DeviceTypeData;
-import com.urbanairship.api.push.model.PushOptions;
-import com.urbanairship.api.push.model.PushPayload;
-import com.urbanairship.api.push.model.audience.Selectors;
-import com.urbanairship.api.push.model.notification.Notification;
-import com.urbanairship.api.push.parse.PushObjectMapper;
-import com.urbanairship.api.schedule.model.BestTime;
-import com.urbanairship.api.schedule.model.Schedule;
-import com.urbanairship.api.schedule.model.SchedulePayload;
-import com.urbanairship.api.schedule.parse.ScheduleObjectMapper;
-import org.joda.time.DateTime;
-import org.joda.time.DateTimeZone;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
-public class SchedulePayloadSerializerTest {
-
-    private static final ObjectMapper MAPPER = ScheduleObjectMapper.getInstance();
-
-    @Test
-    public void testSerialization() throws Exception {
-
-        PushPayload pushPayload = PushPayload.newBuilder()
-                .setAudience(Selectors.tag("tag"))
-                .setDeviceTypes(DeviceTypeData.newBuilder().addDeviceType(DeviceType.IOS).build())
-                .setNotification(Notification.newBuilder().setAlert("alert").build())
-                .setPushOptions(PushOptions.newBuilder().build())
-                .build();
-        SchedulePayload schedulePayload = SchedulePayload.newBuilder()
-                .setSchedule(Schedule.newBuilder()
-                        .setScheduledTimestamp(new DateTime("2013-05-05T00:00:01", DateTimeZone.UTC))
-                        .build())
-                .setPushPayload(pushPayload)
-                .build();
-
-        String json = MAPPER.writeValueAsString(schedulePayload);
-
-        String properJson = "{\"schedule\":{\"scheduled_time\":\"2013-05-05T00:00:01\"},\"push\":{\"audience\":{\"tag\":\"tag\"},\"device_types\":[\"ios\"],\"notification\":{\"alert\":\"alert\"},\"options\":{}}}";
-
-        assertEquals(json, properJson);
-    }
-
-    @Test
-    public void testBestTimeSerialization() throws Exception {
-        BestTime bestTime = BestTime.newBuilder()
-                .setSendDate(new DateTime("2013-05-05T00:00:01", DateTimeZone.UTC))
-                .build();
-
-        PushPayload pushPayload = PushPayload.newBuilder()
-                .setAudience(Selectors.tag("tag"))
-                .setDeviceTypes(DeviceTypeData.newBuilder().addDeviceType(DeviceType.IOS).build())
-                .setNotification(Notification.newBuilder().setAlert("alert").build())
-                .setPushOptions(PushOptions.newBuilder().build())
-                .build();
-        SchedulePayload schedulePayload = SchedulePayload.newBuilder()
-                .setSchedule(Schedule.newBuilder()
-                        .setBestTime(bestTime)
-                        .build())
-                .setPushPayload(pushPayload)
-                .build();
-
-        String json = MAPPER.writeValueAsString(schedulePayload);
-
-        String properJson = "{\"schedule\":{\"best_time\":{\"send_date\":\"2013-05-05\"}},\"push\":{\"audience\":{\"tag\":\"tag\"},\"device_types\":[\"ios\"],\"notification\":{\"alert\":\"alert\"},\"options\":{}}}";
-        assertEquals(json, properJson);
-    }
-
-    @Test(expected = Exception.class)
-    public void testNoSchedule() throws Exception {
-
-        PushPayload pushPayload = PushPayload.newBuilder()
-                .setAudience(Selectors.tag("tag"))
-                .setDeviceTypes(DeviceTypeData.newBuilder().addDeviceType(DeviceType.IOS).build())
-                .setNotification(Notification.newBuilder().setAlert("alert").build())
-                .setPushOptions(PushOptions.newBuilder().build())
-                .build();
-        SchedulePayload schedulePayload = SchedulePayload.newBuilder()
-                .setSchedule(Schedule.newBuilder()
-                        .build())
-                .setPushPayload(pushPayload)
-                .build();
-        String json = MAPPER.writeValueAsString(schedulePayload);
-        String properJson = "{\"schedule\":{},\"push\":{\"audience\":{\"tag\":\"tag\"},\"device_types\":[\"ios\"],\"notification\":{\"alert\":\"alert\"},\"options\":{\"present\":true}}}";
-
-        assertEquals(json, properJson);
-
-    }
-
-    @Test
-    public void testLocalTimeFlag() throws Exception {
-
-        PushPayload pushPayload = PushPayload.newBuilder()
-                .setAudience(Selectors.tag("tag"))
-                .setDeviceTypes(DeviceTypeData.newBuilder().addDeviceType(DeviceType.IOS).build())
-                .setNotification(Notification.newBuilder().setAlert("alert").build())
-                .setPushOptions(PushOptions.newBuilder().build())
-                .build();
-        SchedulePayload schedulePayload = SchedulePayload.newBuilder()
-                .setSchedule(Schedule.newBuilder()
-                        .setScheduledTimestamp(new DateTime("2013-05-05T00:00:01", DateTimeZone.UTC))
-                        .build())
-                .setPushPayload(pushPayload)
-                .build();
-
-        assertFalse(schedulePayload.getSchedule().getLocalTimePresent());
-
-        PushPayload pushPayloadLocal = PushPayload.newBuilder()
-                .setAudience(Selectors.tag("tag"))
-                .setDeviceTypes(DeviceTypeData.newBuilder().addDeviceType(DeviceType.IOS).build())
-                .setNotification(Notification.newBuilder().setAlert("alert").build())
-                .setPushOptions(PushOptions.newBuilder().build())
-                .build();
-
-        Schedule schedule = Schedule.newBuilder()
-                .setLocalScheduledTimestamp(new DateTime("2013-05-05T00:00:01", DateTimeZone.UTC))
-                .build();
-
-        SchedulePayload schedulePayloadLocal = SchedulePayload.newBuilder()
-                .setSchedule(schedule)
-                .setPushPayload(pushPayloadLocal)
-                .build();
-
-        String expectedScheduled = "{\"local_scheduled_time\":\"2013-05-05T00:00:01\"}";
-        String scheduleString = MAPPER.writeValueAsString(schedulePayloadLocal.getSchedule());
-
-        JsonNode jsonNode = MAPPER.readTree(scheduleString);
-        JsonNode jsonNodeExpected = MAPPER.readTree(expectedScheduled);
-
-        assertTrue(schedulePayloadLocal.getSchedule().getLocalTimePresent());
-        assertEquals(jsonNodeExpected, jsonNode);
-    }
-
-}
diff --git a/src/test/java/com/urbanairship/api/schedule/parse/ScheduleSerializerTest.java b/src/test/java/com/urbanairship/api/schedule/parse/ScheduleSerializerTest.java
deleted file mode 100644
index 7b3f22a..0000000
--- a/src/test/java/com/urbanairship/api/schedule/parse/ScheduleSerializerTest.java
+++ /dev/null
@@ -1,61 +0,0 @@
-package com.urbanairship.api.schedule.parse;
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-import com.urbanairship.api.push.model.DeviceType;
-import com.urbanairship.api.push.model.DeviceTypeData;
-import com.urbanairship.api.push.model.PushOptions;
-import com.urbanairship.api.push.model.PushPayload;
-import com.urbanairship.api.push.model.audience.Selectors;
-import com.urbanairship.api.push.model.notification.Notification;
-import com.urbanairship.api.push.parse.PushObjectMapper;
-import com.urbanairship.api.schedule.model.BestTime;
-import com.urbanairship.api.schedule.model.Schedule;
-import com.urbanairship.api.schedule.model.SchedulePayload;
-import com.urbanairship.api.schedule.parse.ScheduleObjectMapper;
-import org.joda.time.DateTime;
-import org.joda.time.DateTimeZone;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-
-public class ScheduleSerializerTest {
-
-    private static final ObjectMapper MAPPER = ScheduleObjectMapper.getInstance();
-
-    @Test
-    public void testSerialization() throws Exception {
-
-        PushPayload pushPayload = PushPayload.newBuilder()
-                .setAudience(Selectors.tag("tag"))
-                .setDeviceTypes(DeviceTypeData.newBuilder().addDeviceType(DeviceType.IOS).build())
-                .setNotification(Notification.newBuilder().setAlert("alert").build())
-                .setPushOptions(PushOptions.newBuilder().build())
-                .build();
-        SchedulePayload schedulePayload = SchedulePayload.newBuilder()
-                .setSchedule(Schedule.newBuilder()
-                        .setScheduledTimestamp(new DateTime("2013-05-05T00:00:01", DateTimeZone.UTC))
-                        .build())
-                .setPushPayload(pushPayload)
-                .build();
-
-        String json = MAPPER.writeValueAsString(schedulePayload);
-
-        String properJson = "{\"schedule\":{\"scheduled_time\":\"2013-05-05T00:00:01\"},\"push\":{\"audience\":{\"tag\":\"tag\"},\"device_types\":[\"ios\"],\"notification\":{\"alert\":\"alert\"},\"options\":{}}}";
-
-        assertEquals(json, properJson);
-
-        BestTime bestTime = BestTime.newBuilder()
-                .setSendDate(DateTime.now())
-                .build();
-
-        Schedule schedule = Schedule.newBuilder()
-                .setBestTime(bestTime)
-                .build();
-
-        String scheduledBestTimeJson = MAPPER.writeValueAsString(schedule);
-
-        System.out.println(scheduledBestTimeJson);
-
-    }
-
-}
