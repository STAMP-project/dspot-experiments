package com.urbanairship.api.experiments.parse;


import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.base.Optional;
import com.urbanairship.api.common.parse.APIParsingException;
import com.urbanairship.api.experiments.model.Variant;
import com.urbanairship.api.experiments.model.VariantPushPayload;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;


public class AmplVariantDeserializerTest {
    @Rule
    public ExpectedException expectedException = ExpectedException.none();

    private static final ObjectMapper MAPPER = ExperimentObjectMapper.getInstance();

    @Test(timeout = 10000)
    public void testVariant_literalMutationString42() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weightA\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weightA\":\"4\"}", variantString);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (variant)).toString());
        Assert.assertEquals(1874321328, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weightA\":\"4\"}", variantString);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (variant)).toString());
        Assert.assertEquals(1874321328, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariant_literalMutationString10_failAssert6() throws Exception {
        try {
            String variantString = "{" + ((((((("\"schedule\": {" + "\"sicheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
            Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
            variant.getSchedule().isPresent();
            variant.getName().isPresent();
            variant.getDescription().isPresent();
            variant.getWeight().isPresent();
            variant.getVariantPushPayload().getNotification().isPresent();
            org.junit.Assert.fail("testVariant_literalMutationString10 should have thrown APIParsingException");
        } catch (APIParsingException expected) {
            Assert.assertEquals("Either scheduled_time or local_scheduled_time must be set.", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testVariant_literalMutationString11_failAssert7() throws Exception {
        try {
            String variantString = "{" + ((((((("\"schedule\": {" + "") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
            Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
            variant.getSchedule().isPresent();
            variant.getName().isPresent();
            variant.getDescription().isPresent();
            variant.getWeight().isPresent();
            variant.getVariantPushPayload().getNotification().isPresent();
            org.junit.Assert.fail("testVariant_literalMutationString11 should have thrown APIParsingException");
        } catch (APIParsingException expected) {
            Assert.assertEquals("Either scheduled_time or local_scheduled_time must be set.", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testVariant_literalMutationString40() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"\"}", variantString);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (variant)).toString());
        Assert.assertEquals(1874321328, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"\"}", variantString);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (variant)).toString());
        Assert.assertEquals(1874321328, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariant_add46_add6227() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant o_testVariant_add46_add6227__2 = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227__2)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227__2)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227__2)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227__2)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227__2)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227__2)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227__2)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227__2)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227__2)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227__2)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227__2)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (o_testVariant_add46_add6227__2)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (o_testVariant_add46_add6227__2)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getName())).hashCode())));
        Variant o_testVariant_add46__2 = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227__2)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227__2)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227__2)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227__2)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227__2)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227__2)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227__2)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227__2)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227__2)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227__2)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227__2)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (o_testVariant_add46_add6227__2)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (o_testVariant_add46_add6227__2)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227__2)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariant_literalMutationString39() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weig0t\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weig0t\":\"4\"}", variantString);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (variant)).toString());
        Assert.assertEquals(1874321328, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weig0t\":\"4\"}", variantString);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (variant)).toString());
        Assert.assertEquals(1874321328, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariant_add53() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariant_add46_add6227_add10470() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant o_testVariant_add46_add6227__2 = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Variant o_testVariant_add46_add6227_add10470__5 = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (o_testVariant_add46_add6227_add10470__5)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (o_testVariant_add46_add6227_add10470__5)).hashCode())));
        Assert.assertEquals("A name", ((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getName())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getName())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getDescription())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getSchedule())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getWeight())).isPresent());
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getVariantPushPayload())).getInApp())).isPresent());
        Variant o_testVariant_add46__2 = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (o_testVariant_add46_add6227_add10470__5)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (o_testVariant_add46_add6227_add10470__5)).hashCode())));
        Assert.assertEquals("A name", ((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getName())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getName())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getDescription())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getSchedule())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getWeight())).isPresent());
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10470__5)).getVariantPushPayload())).getInApp())).isPresent());
    }

    @Test(timeout = 10000)
    public void testVariant_add54() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariant_add55() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariant_add56() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariant_literalMutationString35() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A desciption\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A desciption\",\"weight\":\"4\"}", variantString);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A desciption", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A desciption)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(-1364406041, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A desciption), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1136395830, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A desciption\",\"weight\":\"4\"}", variantString);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A desciption", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A desciption)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(-1364406041, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A desciption), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1136395830, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariant_add46_add6518() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant o_testVariant_add46__2 = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Variant o_testVariant_add46_add6518__5 = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518__5)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518__5)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518__5)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518__5)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518__5)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518__5)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518__5)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518__5)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518__5)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518__5)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518__5)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (o_testVariant_add46_add6518__5)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (o_testVariant_add46_add6518__5)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getName())).hashCode())));
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518__5)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518__5)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518__5)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518__5)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518__5)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518__5)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518__5)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518__5)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518__5)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518__5)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518__5)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (o_testVariant_add46_add6518__5)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (o_testVariant_add46_add6518__5)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518__5)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariant_add50() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
        variant.getSchedule().isPresent();
        variant.getName();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariant_add51() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariant_add52() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariant_add57() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariant() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariant_add46_add6518_add10459() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant o_testVariant_add46_add6518_add10459__2 = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (o_testVariant_add46_add6518_add10459__2)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (o_testVariant_add46_add6518_add10459__2)).hashCode())));
        Assert.assertEquals("A name", ((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getName())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getName())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getDescription())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getSchedule())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getWeight())).isPresent());
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getVariantPushPayload())).getInApp())).isPresent());
        Variant o_testVariant_add46__2 = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Variant o_testVariant_add46_add6518__5 = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (o_testVariant_add46_add6518_add10459__2)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (o_testVariant_add46_add6518_add10459__2)).hashCode())));
        Assert.assertEquals("A name", ((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getName())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getName())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getDescription())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getSchedule())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getWeight())).isPresent());
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10459__2)).getVariantPushPayload())).getInApp())).isPresent());
    }

    @Test(timeout = 10000)
    public void testVariant_literalMutationString14_failAssert10() throws Exception {
        try {
            String variantString = "{" + ((((((("\"schedule\": {" + "\"sc+eduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
            Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
            variant.getSchedule().isPresent();
            variant.getName().isPresent();
            variant.getDescription().isPresent();
            variant.getWeight().isPresent();
            variant.getVariantPushPayload().getNotification().isPresent();
            org.junit.Assert.fail("testVariant_literalMutationString14 should have thrown APIParsingException");
        } catch (APIParsingException expected) {
            Assert.assertEquals("Either scheduled_time or local_scheduled_time must be set.", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testVariant_literalMutationString31() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"weight\":\"4\"}", variantString);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertFalse(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(781101649, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"weight\":\"4\"}", variantString);
        Assert.assertFalse(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(781101649, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariant_literalMutationString34() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A descriptio>n\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A descriptio>n\",\"weight\":\"4\"}", variantString);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A descriptio>n", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A descriptio>n)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(280621245, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A descriptio>n), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(-1727541600, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A descriptio>n\",\"weight\":\"4\"}", variantString);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A descriptio>n", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A descriptio>n)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(280621245, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A descriptio>n), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(-1727541600, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariant_add46_add6518_add11226() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant o_testVariant_add46__2 = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Variant o_testVariant_add46_add6518__5 = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Variant o_testVariant_add46_add6518_add11226__8 = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (o_testVariant_add46_add6518_add11226__8)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (o_testVariant_add46_add6518_add11226__8)).hashCode())));
        Assert.assertEquals("A name", ((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getName())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getName())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getDescription())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getSchedule())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getWeight())).isPresent());
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getVariantPushPayload())).getInApp())).isPresent());
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (o_testVariant_add46_add6518_add11226__8)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (o_testVariant_add46_add6518_add11226__8)).hashCode())));
        Assert.assertEquals("A name", ((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getName())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getName())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getDescription())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getSchedule())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getWeight())).isPresent());
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add11226__8)).getVariantPushPayload())).getInApp())).isPresent());
    }

    @Test(timeout = 10000)
    public void testVariant_add46_add6518_add10473() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant o_testVariant_add46__2 = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Variant o_testVariant_add46_add6518_add10473__5 = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (o_testVariant_add46_add6518_add10473__5)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (o_testVariant_add46_add6518_add10473__5)).hashCode())));
        Assert.assertEquals("A name", ((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getName())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getName())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getDescription())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getSchedule())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getWeight())).isPresent());
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getVariantPushPayload())).getInApp())).isPresent());
        Variant o_testVariant_add46_add6518__5 = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (o_testVariant_add46_add6518_add10473__5)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (o_testVariant_add46_add6518_add10473__5)).hashCode())));
        Assert.assertEquals("A name", ((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getName())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getName())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getDescription())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getSchedule())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getWeight())).isPresent());
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6518_add10473__5)).getVariantPushPayload())).getInApp())).isPresent());
    }

    @Test(timeout = 10000)
    public void testVariant_add46_add6227_add9488() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant o_testVariant_add46_add6227_add9488__2 = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (o_testVariant_add46_add6227_add9488__2)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (o_testVariant_add46_add6227_add9488__2)).hashCode())));
        Assert.assertEquals("A name", ((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getName())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getName())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getDescription())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getSchedule())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getWeight())).isPresent());
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getVariantPushPayload())).getInApp())).isPresent());
        Variant o_testVariant_add46_add6227__2 = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Variant o_testVariant_add46__2 = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (o_testVariant_add46_add6227_add9488__2)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (o_testVariant_add46_add6227_add9488__2)).hashCode())));
        Assert.assertEquals("A name", ((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getName())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getName())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getDescription())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getSchedule())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getWeight())).isPresent());
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add9488__2)).getVariantPushPayload())).getInApp())).isPresent());
    }

    @Test(timeout = 10000)
    public void testVariant_literalMutationString29() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"Ah name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"Ah name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(Ah name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1424252126, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("Ah name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(Ah name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(2071031776, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"Ah name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(Ah name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1424252126, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("Ah name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(Ah name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(2071031776, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariant_literalMutationString24() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello t;ere\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello t;ere\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello t;ere), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(945470430, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello t;ere), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-1057028547, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello t;ere), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1589238705, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello t;ere\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello t;ere), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(945470430, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello t;ere), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-1057028547, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello t;ere), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1589238705, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariant_literalMutationString25() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(963363242, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(963363242, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariant_literalMutationString27() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A nam\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A nam\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A nam), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1524318037, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A nam", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A nam)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(1563567575, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A nam\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A nam), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1524318037, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A nam", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A nam)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(1563567575, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariant_add46_add6227_add10486() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant o_testVariant_add46_add6227__2 = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Variant o_testVariant_add46__2 = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Variant o_testVariant_add46_add6227_add10486__8 = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (o_testVariant_add46_add6227_add10486__8)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (o_testVariant_add46_add6227_add10486__8)).hashCode())));
        Assert.assertEquals("A name", ((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getName())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getName())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getDescription())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getSchedule())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getWeight())).isPresent());
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getVariantPushPayload())).getInApp())).isPresent());
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (o_testVariant_add46_add6227_add10486__8)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (o_testVariant_add46_add6227_add10486__8)).hashCode())));
        Assert.assertEquals("A name", ((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getName())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getName())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getDescription())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getSchedule())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getWeight())).isPresent());
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46_add6227_add10486__8)).getVariantPushPayload())).getInApp())).isPresent());
    }

    @Test(timeout = 10000)
    public void testVariant_add46() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant o_testVariant_add46__2 = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46__2)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (o_testVariant_add46__2)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (o_testVariant_add46__2)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (o_testVariant_add46__2)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46__2)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariant_add46__2)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariant_add46__2)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46__2)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (o_testVariant_add46__2)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (o_testVariant_add46__2)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (o_testVariant_add46__2)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46__2)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46__2)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46__2)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46__2)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46__2)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46__2)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46__2)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46__2)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46__2)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariant_add46__2)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariant_add46__2)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (o_testVariant_add46__2)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (o_testVariant_add46__2)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46__2)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (o_testVariant_add46__2)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (o_testVariant_add46__2)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (o_testVariant_add46__2)).getName())).hashCode())));
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46__2)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (o_testVariant_add46__2)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (o_testVariant_add46__2)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (o_testVariant_add46__2)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46__2)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariant_add46__2)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariant_add46__2)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46__2)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (o_testVariant_add46__2)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (o_testVariant_add46__2)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (o_testVariant_add46__2)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46__2)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46__2)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46__2)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46__2)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46__2)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46__2)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46__2)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46__2)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariant_add46__2)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariant_add46__2)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariant_add46__2)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (o_testVariant_add46__2)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (o_testVariant_add46__2)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariant_add46__2)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (o_testVariant_add46__2)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (o_testVariant_add46__2)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (o_testVariant_add46__2)).getName())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariant_add47() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
        variant.getSchedule().isPresent();
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariant_add48() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
        variant.getSchedule();
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariant_add49() throws Exception {
        String variantString = "{" + ((((((("\"schedule\": {" + "\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"") + "},") + "\"push\":{\"notification\":{\"alert\":\"Hello there\"}},") + "\"name\":\"A name\",") + "\"description\":\"A description\",") + "\"weight\":\"4\"") + "}");
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Variant variant = AmplVariantDeserializerTest.MAPPER.readValue(variantString, Variant.class);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
        variant.getSchedule().isPresent();
        variant.getName().isPresent();
        variant.getName().isPresent();
        variant.getDescription().isPresent();
        variant.getWeight().isPresent();
        variant.getVariantPushPayload().getNotification().isPresent();
        Assert.assertEquals("{\"schedule\": {\"scheduled_time\": \"2017-07-27T18:27:25.000Z\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}},\"name\":\"A name\",\"description\":\"A description\",\"weight\":\"4\"}", variantString);
        Assert.assertTrue(((Optional) (((Variant) (variant)).getDescription())).isPresent());
        Assert.assertEquals("A description", ((Optional) (((Variant) (variant)).getDescription())).get());
        Assert.assertEquals("Optional.of(A description)", ((Optional) (((Variant) (variant)).getDescription())).toString());
        Assert.assertEquals(2017251257, ((int) (((Optional) (((Variant) (variant)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (variant)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (variant)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getWeight())).isPresent());
        Assert.assertEquals(4, ((int) (((Optional) (((Variant) (variant)).getWeight())).get())));
        Assert.assertEquals("Optional.of(4)", ((Optional) (((Variant) (variant)).getWeight())).toString());
        Assert.assertEquals(1502476576, ((int) (((Optional) (((Variant) (variant)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (variant)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.of(A name), description=Optional.of(A description), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.of(4)}", ((Variant) (variant)).toString());
        Assert.assertEquals(1336065572, ((int) (((Variant) (variant)).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (variant)).getName())).isPresent());
        Assert.assertEquals("A name", ((Optional) (((Variant) (variant)).getName())).get());
        Assert.assertEquals("Optional.of(A name)", ((Optional) (((Variant) (variant)).getName())).toString());
        Assert.assertEquals(-898669530, ((int) (((Optional) (((Variant) (variant)).getName())).hashCode())));
    }
}

