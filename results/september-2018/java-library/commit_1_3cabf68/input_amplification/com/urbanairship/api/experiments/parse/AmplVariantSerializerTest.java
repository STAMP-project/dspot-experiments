package com.urbanairship.api.experiments.parse;


import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.base.Optional;
import com.urbanairship.api.experiments.model.Variant;
import com.urbanairship.api.experiments.model.VariantPushPayload;
import com.urbanairship.api.push.model.notification.Notification;
import com.urbanairship.api.schedule.model.Schedule;
import junit.framework.AssertionFailedError;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.junit.Assert;
import org.junit.Test;

import static junit.framework.Assert.assertEquals;


public class AmplVariantSerializerTest {
    private static final ObjectMapper MAPPER = ExperimentObjectMapper.getInstance();

    @Test(timeout = 10000)
    public void testVariantSerializer_add17() throws Exception {
        DateTime dateTime = DateTime.parse("2017-07-27T18:27:25.000Z");
        Schedule schedule = Schedule.newBuilder().setScheduledTimestamp(dateTime).build();
        Variant o_testVariantSerializer_add17__7 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17__7)).getDescription())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17__7)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17__7)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17__7)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17__7)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17__7)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17__7)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17__7)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17__7)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17__7)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17__7)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17__7)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17__7)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17__7)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17__7)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17__7)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17__7)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17__7)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17__7)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17__7)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17__7)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17__7)).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17__7)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17__7)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17__7)).getName())).hashCode())));
        Variant variant = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        String variantSerialized = AmplVariantSerializerTest.MAPPER.writeValueAsString(variant);
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
        Variant variantFromJson = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
        assertEquals(variantFromJson, variant);
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17__7)).getDescription())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17__7)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17__7)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17__7)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17__7)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17__7)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17__7)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17__7)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17__7)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17__7)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17__7)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17__7)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17__7)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17__7)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17__7)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17__7)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17__7)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17__7)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17__7)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17__7)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17__7)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17__7)).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17__7)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17__7)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17__7)).getName())).hashCode())));
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
    }

    @Test(timeout = 10000)
    public void testVariantSerializer_add28_add341() throws Exception {
        DateTime dateTime = DateTime.parse("2017-07-27T18:27:25.000Z");
        Schedule schedule = Schedule.newBuilder().setScheduledTimestamp(dateTime).build();
        Variant o_testVariantSerializer_add28_add341__7 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add28_add341__7)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add28_add341__7)).hashCode())));
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add28_add341__7)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add28_add341__7)).getName())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add28_add341__7)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add28_add341__7)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add28_add341__7)).getDescription())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add28_add341__7)).getDescription())).isPresent());
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28_add341__7)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28_add341__7)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28_add341__7)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28_add341__7)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28_add341__7)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28_add341__7)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28_add341__7)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28_add341__7)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28_add341__7)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28_add341__7)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28_add341__7)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add28_add341__7)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add28_add341__7)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add28_add341__7)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add28_add341__7)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add28_add341__7)).getWeight())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add28_add341__7)).getWeight())).isPresent());
        Variant variant = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        String variantSerialized = AmplVariantSerializerTest.MAPPER.writeValueAsString(variant);
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
        Variant o_testVariantSerializer_add28__20 = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
        Variant variantFromJson = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
        assertEquals(variantFromJson, variant);
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add28_add341__7)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add28_add341__7)).hashCode())));
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add28_add341__7)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add28_add341__7)).getName())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add28_add341__7)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add28_add341__7)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add28_add341__7)).getDescription())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add28_add341__7)).getDescription())).isPresent());
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28_add341__7)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28_add341__7)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28_add341__7)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28_add341__7)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28_add341__7)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28_add341__7)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28_add341__7)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28_add341__7)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28_add341__7)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28_add341__7)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28_add341__7)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add28_add341__7)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add28_add341__7)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add28_add341__7)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add28_add341__7)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add28_add341__7)).getWeight())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add28_add341__7)).getWeight())).isPresent());
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
    }

    @Test(timeout = 10000)
    public void testVariantSerializer_add17_add842_add7338() throws Exception {
        DateTime dateTime = DateTime.parse("2017-07-27T18:27:25.000Z");
        Schedule schedule = Schedule.newBuilder().setScheduledTimestamp(dateTime).build();
        Variant o_testVariantSerializer_add17__7 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Variant o_testVariantSerializer_add17_add842__19 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Variant o_testVariantSerializer_add17_add842_add7338__31 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getDescription())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getVariantPushPayload())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getWeight())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getName())).hashCode())));
        Variant variant = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        String variantSerialized = AmplVariantSerializerTest.MAPPER.writeValueAsString(variant);
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
        Variant variantFromJson = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
        assertEquals(variantFromJson, variant);
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getDescription())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getVariantPushPayload())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getWeight())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7338__31)).getName())).hashCode())));
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
    }

    @Test(timeout = 10000)
    public void testVariantSerializer_add14() throws Exception {
        DateTime dateTime = DateTime.parse("2017-07-27T18:27:25.000Z");
        Schedule o_testVariantSerializer_add14__3 = Schedule.newBuilder().setScheduledTimestamp(dateTime).build();
        Assert.assertFalse(((Schedule) (o_testVariantSerializer_add14__3)).getLocalTimePresent());
        Assert.assertEquals(1501180045000L, ((long) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getMillis())));
        Assert.assertEquals("ISOChronology[UTC]", ((Chronology) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getChronology())).toString());
        Assert.assertEquals(1, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getEra())));
        Assert.assertEquals(208, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getDayOfYear())));
        Assert.assertEquals(4, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getDayOfWeek())));
        Assert.assertEquals(27, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getDayOfMonth())));
        Assert.assertEquals(2017, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getYear())));
        Assert.assertEquals(66445000, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getMillisOfDay())));
        Assert.assertEquals(7, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getMonthOfYear())));
        Assert.assertEquals(18, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getHourOfDay())));
        Assert.assertEquals(27, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getMinuteOfHour())));
        Assert.assertEquals(25, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getSecondOfMinute())));
        Assert.assertEquals(0, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getMillisOfSecond())));
        Assert.assertEquals(30, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getWeekOfWeekyear())));
        Assert.assertEquals(2017, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getWeekyear())));
        Assert.assertEquals(2017, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getYearOfEra())));
        Assert.assertEquals(17, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getYearOfCentury())));
        Assert.assertEquals(20, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getCenturyOfEra())));
        Assert.assertEquals(66445, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getSecondOfDay())));
        Assert.assertEquals(1107, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getMinuteOfDay())));
        Assert.assertEquals("2017-07-27T18:27:25.000Z", ((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).toString());
        Assert.assertTrue(((DateTimeZone) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getZone())).isFixed());
        Assert.assertEquals("UTC", ((DateTimeZone) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getZone())).toString());
        Assert.assertEquals(84356, ((int) (((DateTimeZone) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getZone())).hashCode())));
        Assert.assertEquals("UTC", ((DateTimeZone) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getZone())).getID());
        Assert.assertTrue(((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).isBeforeNow());
        Assert.assertFalse(((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).isAfterNow());
        Assert.assertFalse(((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).isEqualNow());
        Assert.assertEquals(-2057623184, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).hashCode())));
        Assert.assertEquals("Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}", ((Schedule) (o_testVariantSerializer_add14__3)).toString());
        Assert.assertEquals(638192934, ((int) (((Schedule) (o_testVariantSerializer_add14__3)).hashCode())));
        Schedule schedule = Schedule.newBuilder().setScheduledTimestamp(dateTime).build();
        Variant variant = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        String variantSerialized = AmplVariantSerializerTest.MAPPER.writeValueAsString(variant);
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
        Variant variantFromJson = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
        assertEquals(variantFromJson, variant);
        Assert.assertFalse(((Schedule) (o_testVariantSerializer_add14__3)).getLocalTimePresent());
        Assert.assertEquals(1501180045000L, ((long) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getMillis())));
        Assert.assertEquals("ISOChronology[UTC]", ((Chronology) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getChronology())).toString());
        Assert.assertEquals(1, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getEra())));
        Assert.assertEquals(208, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getDayOfYear())));
        Assert.assertEquals(4, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getDayOfWeek())));
        Assert.assertEquals(27, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getDayOfMonth())));
        Assert.assertEquals(2017, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getYear())));
        Assert.assertEquals(66445000, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getMillisOfDay())));
        Assert.assertEquals(7, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getMonthOfYear())));
        Assert.assertEquals(18, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getHourOfDay())));
        Assert.assertEquals(27, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getMinuteOfHour())));
        Assert.assertEquals(25, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getSecondOfMinute())));
        Assert.assertEquals(0, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getMillisOfSecond())));
        Assert.assertEquals(30, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getWeekOfWeekyear())));
        Assert.assertEquals(2017, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getWeekyear())));
        Assert.assertEquals(2017, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getYearOfEra())));
        Assert.assertEquals(17, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getYearOfCentury())));
        Assert.assertEquals(20, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getCenturyOfEra())));
        Assert.assertEquals(66445, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getSecondOfDay())));
        Assert.assertEquals(1107, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getMinuteOfDay())));
        Assert.assertEquals("2017-07-27T18:27:25.000Z", ((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).toString());
        Assert.assertTrue(((DateTimeZone) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getZone())).isFixed());
        Assert.assertEquals("UTC", ((DateTimeZone) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getZone())).toString());
        Assert.assertEquals(84356, ((int) (((DateTimeZone) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getZone())).hashCode())));
        Assert.assertEquals("UTC", ((DateTimeZone) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).getZone())).getID());
        Assert.assertTrue(((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).isBeforeNow());
        Assert.assertFalse(((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).isAfterNow());
        Assert.assertFalse(((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).isEqualNow());
        Assert.assertEquals(-2057623184, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add14__3)).getScheduledTimestamp())).hashCode())));
        Assert.assertEquals("Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}", ((Schedule) (o_testVariantSerializer_add14__3)).toString());
        Assert.assertEquals(638192934, ((int) (((Schedule) (o_testVariantSerializer_add14__3)).hashCode())));
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
    }

    @Test(timeout = 10000)
    public void testVariantSerializer_add17_add842_add7114() throws Exception {
        DateTime dateTime = DateTime.parse("2017-07-27T18:27:25.000Z");
        Schedule schedule = Schedule.newBuilder().setScheduledTimestamp(dateTime).build();
        Variant o_testVariantSerializer_add17__7 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Variant o_testVariantSerializer_add17_add842_add7114__19 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getDescription())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getVariantPushPayload())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getWeight())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getName())).hashCode())));
        Variant o_testVariantSerializer_add17_add842__19 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Variant variant = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        String variantSerialized = AmplVariantSerializerTest.MAPPER.writeValueAsString(variant);
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
        Variant variantFromJson = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
        assertEquals(variantFromJson, variant);
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getDescription())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getVariantPushPayload())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getWeight())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7114__19)).getName())).hashCode())));
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
    }

    @Test(timeout = 10000)
    public void testVariantSerializer_add17_add417() throws Exception {
        DateTime dateTime = DateTime.parse("2017-07-27T18:27:25.000Z");
        Schedule schedule = Schedule.newBuilder().setScheduledTimestamp(dateTime).build();
        Variant o_testVariantSerializer_add17_add417__7 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17_add417__7)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17_add417__7)).hashCode())));
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417__7)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417__7)).getName())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add417__7)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417__7)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417__7)).getDescription())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add417__7)).getDescription())).isPresent());
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417__7)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417__7)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417__7)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417__7)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417__7)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417__7)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417__7)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417__7)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417__7)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417__7)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417__7)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417__7)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417__7)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17_add417__7)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417__7)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417__7)).getWeight())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add417__7)).getWeight())).isPresent());
        Variant o_testVariantSerializer_add17__7 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Variant variant = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        String variantSerialized = AmplVariantSerializerTest.MAPPER.writeValueAsString(variant);
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
        Variant variantFromJson = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
        assertEquals(variantFromJson, variant);
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17_add417__7)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17_add417__7)).hashCode())));
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417__7)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417__7)).getName())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add417__7)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417__7)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417__7)).getDescription())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add417__7)).getDescription())).isPresent());
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417__7)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417__7)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417__7)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417__7)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417__7)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417__7)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417__7)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417__7)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417__7)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417__7)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417__7)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417__7)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417__7)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17_add417__7)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417__7)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417__7)).getWeight())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add417__7)).getWeight())).isPresent());
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
    }

    @Test(timeout = 10000)
    public void testVariantSerializernull32_failAssert6() throws Exception {
        try {
            DateTime dateTime = DateTime.parse("2017-07-27T18:27:25.000Z");
            Schedule schedule = Schedule.newBuilder().setScheduledTimestamp(null).build();
            Variant variant = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
            String variantSerialized = AmplVariantSerializerTest.MAPPER.writeValueAsString(variant);
            Variant variantFromJson = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
            assertEquals(variantFromJson, variant);
            org.junit.Assert.fail("testVariantSerializernull32 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Either scheduled_time or local_scheduled_time must be set.", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testVariantSerializer_add17_add914() throws Exception {
        DateTime dateTime = DateTime.parse("2017-07-27T18:27:25.000Z");
        Schedule schedule = Schedule.newBuilder().setScheduledTimestamp(dateTime).build();
        Variant o_testVariantSerializer_add17__7 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Variant variant = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        String variantSerialized = AmplVariantSerializerTest.MAPPER.writeValueAsString(variant);
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
        Variant o_testVariantSerializer_add17_add914__32 = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17_add914__32)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17_add914__32)).hashCode())));
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add914__32)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add914__32)).getName())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add914__32)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add914__32)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add914__32)).getDescription())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add914__32)).getDescription())).isPresent());
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914__32)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914__32)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914__32)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914__32)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914__32)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914__32)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914__32)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914__32)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914__32)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914__32)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914__32)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17_add914__32)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add914__32)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17_add914__32)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add914__32)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add914__32)).getWeight())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add914__32)).getWeight())).isPresent());
        Variant variantFromJson = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
        assertEquals(variantFromJson, variant);
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17_add914__32)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17_add914__32)).hashCode())));
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add914__32)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add914__32)).getName())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add914__32)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add914__32)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add914__32)).getDescription())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add914__32)).getDescription())).isPresent());
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914__32)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914__32)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914__32)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914__32)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914__32)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914__32)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914__32)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914__32)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914__32)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914__32)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914__32)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17_add914__32)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add914__32)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17_add914__32)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add914__32)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add914__32)).getWeight())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add914__32)).getWeight())).isPresent());
    }

    @Test(timeout = 10000)
    public void testVariantSerializernull38_failAssert10() throws Exception {
        try {
            DateTime dateTime = DateTime.parse("2017-07-27T18:27:25.000Z");
            Schedule schedule = Schedule.newBuilder().setScheduledTimestamp(dateTime).build();
            Variant variant = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
            String variantSerialized = AmplVariantSerializerTest.MAPPER.writeValueAsString(variant);
            Variant variantFromJson = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
            assertEquals(variantFromJson, null);
            org.junit.Assert.fail("testVariantSerializernull38 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}> but was:<null>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testVariantSerializer_add17_add417_add7516() throws Exception {
        DateTime dateTime = DateTime.parse("2017-07-27T18:27:25.000Z");
        Schedule schedule = Schedule.newBuilder().setScheduledTimestamp(dateTime).build();
        Variant o_testVariantSerializer_add17_add417__7 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Variant o_testVariantSerializer_add17_add417_add7516__19 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getDescription())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getVariantPushPayload())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getWeight())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getName())).hashCode())));
        Variant o_testVariantSerializer_add17__7 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Variant variant = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        String variantSerialized = AmplVariantSerializerTest.MAPPER.writeValueAsString(variant);
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
        Variant variantFromJson = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
        assertEquals(variantFromJson, variant);
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getDescription())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getVariantPushPayload())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getWeight())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7516__19)).getName())).hashCode())));
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
    }

    @Test(timeout = 10000)
    public void testVariantSerializer_add28() throws Exception {
        DateTime dateTime = DateTime.parse("2017-07-27T18:27:25.000Z");
        Schedule schedule = Schedule.newBuilder().setScheduledTimestamp(dateTime).build();
        Variant variant = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        String variantSerialized = AmplVariantSerializerTest.MAPPER.writeValueAsString(variant);
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
        Variant o_testVariantSerializer_add28__20 = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add28__20)).getDescription())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add28__20)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add28__20)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add28__20)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add28__20)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add28__20)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add28__20)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add28__20)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add28__20)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28__20)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28__20)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28__20)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28__20)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28__20)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28__20)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28__20)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28__20)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28__20)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28__20)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28__20)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add28__20)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add28__20)).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add28__20)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add28__20)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add28__20)).getName())).hashCode())));
        Variant variantFromJson = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
        assertEquals(variantFromJson, variant);
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add28__20)).getDescription())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add28__20)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add28__20)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add28__20)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add28__20)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add28__20)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add28__20)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add28__20)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add28__20)).getWeight())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28__20)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28__20)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28__20)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28__20)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28__20)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28__20)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28__20)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28__20)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28__20)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28__20)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add28__20)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add28__20)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add28__20)).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add28__20)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add28__20)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add28__20)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariantSerializer_add17_add914_add3119() throws Exception {
        DateTime dateTime = DateTime.parse("2017-07-27T18:27:25.000Z");
        Schedule schedule = Schedule.newBuilder().setScheduledTimestamp(dateTime).build();
        Variant o_testVariantSerializer_add17_add914_add3119__7 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getDescription())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getVariantPushPayload())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getWeight())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getName())).hashCode())));
        Variant o_testVariantSerializer_add17__7 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Variant variant = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        String variantSerialized = AmplVariantSerializerTest.MAPPER.writeValueAsString(variant);
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
        Variant o_testVariantSerializer_add17_add914__32 = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
        Variant variantFromJson = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
        assertEquals(variantFromJson, variant);
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getDescription())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getVariantPushPayload())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getWeight())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3119__7)).getName())).hashCode())));
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
    }

    @Test(timeout = 10000)
    public void testVariantSerializer_add17_add393() throws Exception {
        DateTime dateTime = DateTime.parse("2017-07-27T18:27:25.000Z");
        Schedule o_testVariantSerializer_add17_add393__3 = Schedule.newBuilder().setScheduledTimestamp(dateTime).build();
        Assert.assertEquals("Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}", ((Schedule) (o_testVariantSerializer_add17_add393__3)).toString());
        Assert.assertEquals(638192934, ((int) (((Schedule) (o_testVariantSerializer_add17_add393__3)).hashCode())));
        Assert.assertFalse(((Schedule) (o_testVariantSerializer_add17_add393__3)).getLocalTimePresent());
        Assert.assertEquals(1501180045000L, ((long) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getMillis())));
        Assert.assertEquals("ISOChronology[UTC]", ((Chronology) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getChronology())).toString());
        Assert.assertEquals(1, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getEra())));
        Assert.assertEquals(208, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getDayOfYear())));
        Assert.assertEquals(4, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getDayOfWeek())));
        Assert.assertEquals(27, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getDayOfMonth())));
        Assert.assertEquals(2017, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getYear())));
        Assert.assertEquals("2017-07-27T18:27:25.000Z", ((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).toString());
        Assert.assertEquals(30, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getWeekOfWeekyear())));
        Assert.assertEquals(66445000, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getMillisOfDay())));
        Assert.assertEquals(7, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getMonthOfYear())));
        Assert.assertEquals(18, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getHourOfDay())));
        Assert.assertEquals(27, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getMinuteOfHour())));
        Assert.assertEquals(25, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getSecondOfMinute())));
        Assert.assertEquals(0, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getMillisOfSecond())));
        Assert.assertEquals(2017, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getWeekyear())));
        Assert.assertEquals(2017, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getYearOfEra())));
        Assert.assertEquals(17, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getYearOfCentury())));
        Assert.assertEquals(20, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getCenturyOfEra())));
        Assert.assertEquals(66445, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getSecondOfDay())));
        Assert.assertEquals(1107, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getMinuteOfDay())));
        Assert.assertEquals("UTC", ((DateTimeZone) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getZone())).toString());
        Assert.assertEquals(84356, ((int) (((DateTimeZone) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getZone())).hashCode())));
        Assert.assertEquals("UTC", ((DateTimeZone) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getZone())).getID());
        Assert.assertTrue(((DateTimeZone) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getZone())).isFixed());
        Assert.assertEquals(-2057623184, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).hashCode())));
        Assert.assertTrue(((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).isBeforeNow());
        Assert.assertFalse(((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).isAfterNow());
        Assert.assertFalse(((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).isEqualNow());
        Schedule schedule = Schedule.newBuilder().setScheduledTimestamp(dateTime).build();
        Variant o_testVariantSerializer_add17__7 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Variant variant = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        String variantSerialized = AmplVariantSerializerTest.MAPPER.writeValueAsString(variant);
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
        Variant variantFromJson = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
        assertEquals(variantFromJson, variant);
        Assert.assertEquals("Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}", ((Schedule) (o_testVariantSerializer_add17_add393__3)).toString());
        Assert.assertEquals(638192934, ((int) (((Schedule) (o_testVariantSerializer_add17_add393__3)).hashCode())));
        Assert.assertFalse(((Schedule) (o_testVariantSerializer_add17_add393__3)).getLocalTimePresent());
        Assert.assertEquals(1501180045000L, ((long) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getMillis())));
        Assert.assertEquals("ISOChronology[UTC]", ((Chronology) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getChronology())).toString());
        Assert.assertEquals(1, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getEra())));
        Assert.assertEquals(208, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getDayOfYear())));
        Assert.assertEquals(4, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getDayOfWeek())));
        Assert.assertEquals(27, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getDayOfMonth())));
        Assert.assertEquals(2017, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getYear())));
        Assert.assertEquals("2017-07-27T18:27:25.000Z", ((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).toString());
        Assert.assertEquals(30, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getWeekOfWeekyear())));
        Assert.assertEquals(66445000, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getMillisOfDay())));
        Assert.assertEquals(7, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getMonthOfYear())));
        Assert.assertEquals(18, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getHourOfDay())));
        Assert.assertEquals(27, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getMinuteOfHour())));
        Assert.assertEquals(25, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getSecondOfMinute())));
        Assert.assertEquals(0, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getMillisOfSecond())));
        Assert.assertEquals(2017, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getWeekyear())));
        Assert.assertEquals(2017, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getYearOfEra())));
        Assert.assertEquals(17, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getYearOfCentury())));
        Assert.assertEquals(20, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getCenturyOfEra())));
        Assert.assertEquals(66445, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getSecondOfDay())));
        Assert.assertEquals(1107, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getMinuteOfDay())));
        Assert.assertEquals("UTC", ((DateTimeZone) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getZone())).toString());
        Assert.assertEquals(84356, ((int) (((DateTimeZone) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getZone())).hashCode())));
        Assert.assertEquals("UTC", ((DateTimeZone) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getZone())).getID());
        Assert.assertTrue(((DateTimeZone) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).getZone())).isFixed());
        Assert.assertEquals(-2057623184, ((int) (((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).hashCode())));
        Assert.assertTrue(((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).isBeforeNow());
        Assert.assertFalse(((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).isAfterNow());
        Assert.assertFalse(((DateTime) (((Schedule) (o_testVariantSerializer_add17_add393__3)).getScheduledTimestamp())).isEqualNow());
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
    }

    @Test(timeout = 10000)
    public void testVariantSerializer_add17_add842_add7349() throws Exception {
        DateTime dateTime = DateTime.parse("2017-07-27T18:27:25.000Z");
        Schedule schedule = Schedule.newBuilder().setScheduledTimestamp(dateTime).build();
        Variant o_testVariantSerializer_add17__7 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Variant o_testVariantSerializer_add17_add842__19 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Variant variant = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        String variantSerialized = AmplVariantSerializerTest.MAPPER.writeValueAsString(variant);
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
        Variant o_testVariantSerializer_add17_add842_add7349__44 = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getDescription())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getVariantPushPayload())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getWeight())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getName())).hashCode())));
        Variant variantFromJson = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
        assertEquals(variantFromJson, variant);
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getDescription())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getVariantPushPayload())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getWeight())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7349__44)).getName())).hashCode())));
    }

    @Test(timeout = 10000)
    public void testVariantSerializer_add17_add842_add7087() throws Exception {
        DateTime dateTime = DateTime.parse("2017-07-27T18:27:25.000Z");
        Schedule schedule = Schedule.newBuilder().setScheduledTimestamp(dateTime).build();
        Variant o_testVariantSerializer_add17_add842_add7087__7 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getDescription())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getVariantPushPayload())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getWeight())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getName())).hashCode())));
        Variant o_testVariantSerializer_add17__7 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Variant o_testVariantSerializer_add17_add842__19 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Variant variant = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        String variantSerialized = AmplVariantSerializerTest.MAPPER.writeValueAsString(variant);
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
        Variant variantFromJson = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
        assertEquals(variantFromJson, variant);
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getDescription())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getVariantPushPayload())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getWeight())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842_add7087__7)).getName())).hashCode())));
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
    }

    @Test(timeout = 10000)
    public void testVariantSerializernull35_failAssert8() throws Exception {
        try {
            DateTime dateTime = DateTime.parse("2017-07-27T18:27:25.000Z");
            Schedule schedule = Schedule.newBuilder().setScheduledTimestamp(dateTime).build();
            Variant variant = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
            String variantSerialized = AmplVariantSerializerTest.MAPPER.writeValueAsString(null);
            Variant variantFromJson = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
            assertEquals(variantFromJson, variant);
            org.junit.Assert.fail("testVariantSerializernull35 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<null> but was:<Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testVariantSerializer_add17_add842() throws Exception {
        DateTime dateTime = DateTime.parse("2017-07-27T18:27:25.000Z");
        Schedule schedule = Schedule.newBuilder().setScheduledTimestamp(dateTime).build();
        Variant o_testVariantSerializer_add17__7 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Variant o_testVariantSerializer_add17_add842__19 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17_add842__19)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17_add842__19)).hashCode())));
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842__19)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842__19)).getName())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842__19)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842__19)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842__19)).getDescription())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842__19)).getDescription())).isPresent());
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842__19)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842__19)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842__19)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842__19)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842__19)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842__19)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842__19)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842__19)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842__19)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842__19)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842__19)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842__19)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842__19)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17_add842__19)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842__19)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842__19)).getWeight())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842__19)).getWeight())).isPresent());
        Variant variant = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        String variantSerialized = AmplVariantSerializerTest.MAPPER.writeValueAsString(variant);
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
        Variant variantFromJson = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
        assertEquals(variantFromJson, variant);
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17_add842__19)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17_add842__19)).hashCode())));
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842__19)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842__19)).getName())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842__19)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842__19)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842__19)).getDescription())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842__19)).getDescription())).isPresent());
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842__19)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842__19)).getVariantPushPayload())).hashCode())));
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842__19)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842__19)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842__19)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842__19)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842__19)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842__19)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842__19)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842__19)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add842__19)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842__19)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842__19)).getSchedule())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17_add842__19)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add842__19)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add842__19)).getWeight())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add842__19)).getWeight())).isPresent());
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
    }

    @Test(timeout = 10000)
    public void testVariantSerializernull37_failAssert9() throws Exception {
        try {
            DateTime dateTime = DateTime.parse("2017-07-27T18:27:25.000Z");
            Schedule schedule = Schedule.newBuilder().setScheduledTimestamp(dateTime).build();
            Variant variant = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
            String variantSerialized = AmplVariantSerializerTest.MAPPER.writeValueAsString(variant);
            Variant variantFromJson = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
            assertEquals(null, variant);
            org.junit.Assert.fail("testVariantSerializernull37 should have thrown AssertionFailedError");
        } catch (AssertionFailedError expected) {
            Assert.assertEquals("expected:<null> but was:<Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testVariantSerializer_add17_add417_add7449() throws Exception {
        DateTime dateTime = DateTime.parse("2017-07-27T18:27:25.000Z");
        Schedule schedule = Schedule.newBuilder().setScheduledTimestamp(dateTime).build();
        Variant o_testVariantSerializer_add17_add417_add7449__7 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getDescription())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getVariantPushPayload())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getWeight())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getName())).hashCode())));
        Variant o_testVariantSerializer_add17_add417__7 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Variant o_testVariantSerializer_add17__7 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Variant variant = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        String variantSerialized = AmplVariantSerializerTest.MAPPER.writeValueAsString(variant);
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
        Variant variantFromJson = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
        assertEquals(variantFromJson, variant);
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getDescription())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getVariantPushPayload())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getWeight())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7449__7)).getName())).hashCode())));
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
    }

    @Test(timeout = 10000)
    public void testVariantSerializer_add17_add417_add7526() throws Exception {
        DateTime dateTime = DateTime.parse("2017-07-27T18:27:25.000Z");
        Schedule schedule = Schedule.newBuilder().setScheduledTimestamp(dateTime).build();
        Variant o_testVariantSerializer_add17_add417__7 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Variant o_testVariantSerializer_add17__7 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Variant o_testVariantSerializer_add17_add417_add7526__31 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getDescription())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getVariantPushPayload())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getWeight())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getName())).hashCode())));
        Variant variant = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        String variantSerialized = AmplVariantSerializerTest.MAPPER.writeValueAsString(variant);
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
        Variant variantFromJson = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
        assertEquals(variantFromJson, variant);
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getDescription())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getVariantPushPayload())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getWeight())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add417_add7526__31)).getName())).hashCode())));
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
    }

    @Test(timeout = 10000)
    public void testVariantSerializer_add17_add914_add3193() throws Exception {
        DateTime dateTime = DateTime.parse("2017-07-27T18:27:25.000Z");
        Schedule schedule = Schedule.newBuilder().setScheduledTimestamp(dateTime).build();
        Variant o_testVariantSerializer_add17__7 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Variant o_testVariantSerializer_add17_add914_add3193__19 = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getDescription())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getVariantPushPayload())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getWeight())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getName())).hashCode())));
        Variant variant = Variant.newBuilder().setSchedule(schedule).setPushPayload(VariantPushPayload.newBuilder().setNotification(Notification.newBuilder().setAlert("Hello there").build()).build()).build();
        String variantSerialized = AmplVariantSerializerTest.MAPPER.writeValueAsString(variant);
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
        Variant o_testVariantSerializer_add17_add914__32 = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
        Variant variantFromJson = AmplVariantSerializerTest.MAPPER.readValue(variantSerialized, Variant.class);
        assertEquals(variantFromJson, variant);
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getDescription())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getDescription())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getDescription())).hashCode())));
        Assert.assertTrue(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getVariantPushPayload())).getNotification())).isPresent());
        Assert.assertEquals("Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()})", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getVariantPushPayload())).getNotification())).toString());
        Assert.assertEquals(-2066536885, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getVariantPushPayload())).getNotification())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getVariantPushPayload())).getPushOptions())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getVariantPushPayload())).getPushOptions())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getVariantPushPayload())).getPushOptions())).hashCode())));
        Assert.assertFalse(((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getVariantPushPayload())).getInApp())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getVariantPushPayload())).getInApp())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getVariantPushPayload())).getInApp())).hashCode())));
        Assert.assertEquals("VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}", ((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getVariantPushPayload())).toString());
        Assert.assertEquals(-788100758, ((int) (((VariantPushPayload) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getVariantPushPayload())).hashCode())));
        Assert.assertTrue(((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getSchedule())).isPresent());
        Assert.assertEquals("Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false})", ((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getSchedule())).toString());
        Assert.assertEquals(2140669506, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getSchedule())).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getWeight())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getWeight())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getWeight())).hashCode())));
        Assert.assertEquals("Variant{name=Optional.absent(), description=Optional.absent(), schedule=Optional.of(Schedule{scheduledTimestamp=2017-07-27T18:27:25.000Z, localTimePresent=false}), variantPushPayload=VariantPushPayload{notification=Optional.of(Notification{alert=Optional.of(Hello there), deviceTypePayloadOverrides={}, actions=Optional.absent(), interactive=Optional.absent()}), pushOptions=Optional.absent(), inApp=Optional.absent()}, weight=Optional.absent()}", ((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).toString());
        Assert.assertEquals(946655075, ((int) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).hashCode())));
        Assert.assertFalse(((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getName())).isPresent());
        Assert.assertEquals("Optional.absent()", ((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getName())).toString());
        Assert.assertEquals(2040732332, ((int) (((Optional) (((Variant) (o_testVariantSerializer_add17_add914_add3193__19)).getName())).hashCode())));
        Assert.assertEquals("{\"schedule\":{\"scheduled_time\":\"2017-07-27T18:27:25\"},\"push\":{\"notification\":{\"alert\":\"Hello there\"}}}", variantSerialized);
    }
}

