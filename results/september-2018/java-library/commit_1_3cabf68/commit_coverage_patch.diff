diff --git a/CHANGELOG b/CHANGELOG
index 0ad3508..e03efc6 100644
--- a/CHANGELOG
+++ b/CHANGELOG
@@ -1,4 +1,14 @@
 -------------------------
+3.1.0 17SEPT18
+-------------------------
+- Added support for the Require Interaction web notify feature.
+
+-------------------------
+3.1.0 11SEPT18
+-------------------------
+- Added support for Predictive Send Time Optimization.
+
+-------------------------
 3.0.1 28JUN18
 -------------------------
 - Updated to async-http-client 2.4.8.
diff --git a/VERSION.txt b/VERSION.txt
index cb2b00e..944880f 100644
--- a/VERSION.txt
+++ b/VERSION.txt
@@ -1 +1 @@
-3.0.1
+3.2.0
diff --git a/pom.xml b/pom.xml
index 9690314..ed7f59a 100644
--- a/pom.xml
+++ b/pom.xml
@@ -10,7 +10,7 @@
 
     <groupId>com.urbanairship</groupId>
     <artifactId>java-client</artifactId>
-    <version>3.0.2-SNAPSHOT</version>
+    <version>3.2.1-SNAPSHOT</version>
     <packaging>jar</packaging>
 
     <name>Java Client</name>
diff --git a/src/main/java/com/urbanairship/api/common/parse/DateFormats.java b/src/main/java/com/urbanairship/api/common/parse/DateFormats.java
index 74027e4..b89e80d 100644
--- a/src/main/java/com/urbanairship/api/common/parse/DateFormats.java
+++ b/src/main/java/com/urbanairship/api/common/parse/DateFormats.java
@@ -16,7 +16,7 @@ public class DateFormats {
 
     public static final DateTimeFormatter DATE_PARSER = new DateTimeFormatterBuilder()
             .append(ISODateTimeFormat.date())
-            .append(null, new DateTimeParser[] {SPACE_PARSER, T_PARSER})
+            .append(null, new DateTimeParser[]{SPACE_PARSER, T_PARSER})
             .append(ISODateTimeFormat.hourMinuteSecond())
             .toFormatter()
             .withZoneUTC();
@@ -27,21 +27,21 @@ public class DateFormats {
 
     public static final DateTimeFormatter SECONDS_FORMAT = new DateTimeFormatterBuilder()
             .append(ISODateTimeFormat.date())
-            .append(null, new DateTimeParser[] {SPACE_PARSER, T_PARSER})
+            .append(null, new DateTimeParser[]{SPACE_PARSER, T_PARSER})
             .append(ISODateTimeFormat.hourMinuteSecond())
             .toFormatter()
             .withZoneUTC();
 
     public static final DateTimeFormatter MINUTES_FORMAT = new DateTimeFormatterBuilder()
             .append(ISODateTimeFormat.date())
-            .append(null, new DateTimeParser[] {SPACE_PARSER, T_PARSER})
+            .append(null, new DateTimeParser[]{SPACE_PARSER, T_PARSER})
             .append(ISODateTimeFormat.hourMinute())
             .toFormatter()
             .withZoneUTC();
 
     public static final DateTimeFormatter HOURS_FORMAT = new DateTimeFormatterBuilder()
             .append(ISODateTimeFormat.date())
-            .append(null, new DateTimeParser[] {SPACE_PARSER, T_PARSER})
+            .append(null, new DateTimeParser[]{SPACE_PARSER, T_PARSER})
             .append(ISODateTimeFormat.hour())
             .toFormatter()
             .withZoneUTC();
@@ -54,5 +54,6 @@ public class DateFormats {
 
     public static final DateTimeFormatter YEARS_FORMAT = ISODateTimeFormat.year().withZoneUTC();
 
-    private DateFormats() { }
+    private DateFormats() {
+    }
 }
diff --git a/src/main/java/com/urbanairship/api/push/model/PushOptions.java b/src/main/java/com/urbanairship/api/push/model/PushOptions.java
index 0128849..dc4ddcb 100644
--- a/src/main/java/com/urbanairship/api/push/model/PushOptions.java
+++ b/src/main/java/com/urbanairship/api/push/model/PushOptions.java
@@ -6,7 +6,6 @@ package com.urbanairship.api.push.model;
 
 import com.google.common.base.Optional;
 
-
 /**
  * Optional features for a Push payload for the Urban Airship API.
  * Created for future optional features to be added.
@@ -48,7 +47,6 @@ public class PushOptions extends PushModelObject {
         PushOptions that = (PushOptions) o;
 
         return !(expiry != null ? !expiry.equals(that.expiry) : that.expiry != null);
-
     }
 
     @Override
@@ -82,6 +80,4 @@ public class PushOptions extends PushModelObject {
             return new PushOptions(Optional.fromNullable(expiry));
         }
     }
-
-
 }
diff --git a/src/main/java/com/urbanairship/api/push/model/notification/web/WebDevicePayload.java b/src/main/java/com/urbanairship/api/push/model/notification/web/WebDevicePayload.java
index 3b816b2..455992a 100644
--- a/src/main/java/com/urbanairship/api/push/model/notification/web/WebDevicePayload.java
+++ b/src/main/java/com/urbanairship/api/push/model/notification/web/WebDevicePayload.java
@@ -18,11 +18,13 @@ public final class WebDevicePayload extends PushModelObject implements DevicePay
     private final Optional<String> title;
     private final Optional<ImmutableMap<String, String>> extra;
     private final Optional<WebIcon> webIcon;
+    private final Optional<Boolean> requireInteraction;
 
     private WebDevicePayload(Builder builder) {
         this.alert = Optional.fromNullable(builder.alert);
         this.title = Optional.fromNullable(builder.title);
         this.webIcon = Optional.fromNullable(builder.webIcon);
+        this.requireInteraction = Optional.fromNullable(builder.requireInteraction);
 
         if (builder.extra.build().isEmpty()) {
             this.extra = Optional.absent();
@@ -87,6 +89,15 @@ public final class WebDevicePayload extends PushModelObject implements DevicePay
         return webIcon;
     }
 
+    /**
+     * Get the Require Interaction flag.
+     *
+     * @return Optional Boolean require interaction flag.
+     */
+    public Optional<Boolean> getRequireInteraction() {
+        return requireInteraction;
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -100,12 +111,14 @@ public final class WebDevicePayload extends PushModelObject implements DevicePay
         return Objects.equal(alert, payload.alert) &&
                 Objects.equal(title, payload.title) &&
                 Objects.equal(extra, payload.extra) &&
-                Objects.equal(webIcon, payload.webIcon);
+                Objects.equal(webIcon, payload.webIcon)&&
+                Objects.equal(requireInteraction, payload.requireInteraction);
     }
 
     @Override
     public int hashCode() {
-        return Objects.hashCode(alert, title, extra, webIcon);
+        return Objects.hashCode(alert, title, extra, webIcon,
+                requireInteraction);
     }
 
     @Override
@@ -115,6 +128,7 @@ public final class WebDevicePayload extends PushModelObject implements DevicePay
                 ", title=" + title +
                 ", extra=" + extra +
                 ", webIcon=" + webIcon +
+                ", requireInteraction=" + requireInteraction +
                 '}';
     }
 
@@ -126,6 +140,7 @@ public final class WebDevicePayload extends PushModelObject implements DevicePay
         private String title = null;
         private ImmutableMap.Builder<String, String> extra = ImmutableMap.builder();
         private WebIcon webIcon = null;
+        private Boolean requireInteraction = null;
 
         private Builder() { }
 
@@ -185,6 +200,22 @@ public final class WebDevicePayload extends PushModelObject implements DevicePay
             return this;
         }
 
+        /**
+         * Set the Require Interaction flag.
+         *
+         * @param value Boolean
+         * @return Builder
+         */
+        public Builder setRequireInteraction(boolean value){
+            this.requireInteraction = value;
+            return this;
+        }
+
+        /**
+         * Build the WebDevicePayload object.
+         *
+         * @return WebDevicePayload
+         */
         public WebDevicePayload build() {
             return new WebDevicePayload(this);
         }
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadDeserializer.java
index 1f88f9f..f0b2372 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadDeserializer.java
@@ -37,6 +37,11 @@ public class WebDevicePayloadDeserializer extends JsonDeserializer<WebDevicePayl
                             reader.readWebIcon(json);
                         }
                     })
+                    .put("require_interaction", new FieldParser<WebDevicePayloadReader>() {
+                        public void parse(WebDevicePayloadReader reader, JsonParser json, DeserializationContext context) throws IOException {
+                            reader.readRequireInteraction(json);
+                        }
+                    })
                     .build()
     );
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadReader.java
index dac6b27..77d824e 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadReader.java
@@ -2,6 +2,7 @@ package com.urbanairship.api.push.parse.notification.web;
 
 import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
+import com.urbanairship.api.common.parse.BooleanFieldDeserializer;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.common.parse.MapOfStringsDeserializer;
 import com.urbanairship.api.common.parse.StringFieldDeserializer;
@@ -34,6 +35,10 @@ public class WebDevicePayloadReader implements JsonObjectReader<WebDevicePayload
         builder.setWebIcon(parser.readValueAs(WebIcon.class));
     }
 
+    public void readRequireInteraction(JsonParser parser) throws IOException {
+        builder.setRequireInteraction(BooleanFieldDeserializer.INSTANCE.deserialize(parser, "require_interaction"));
+    }
+
     @Override
     public WebDevicePayload validateAndBuild() throws IOException {
         try{
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadSerializer.java
index 4666f6d..1aea676 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadSerializer.java
@@ -28,6 +28,10 @@ public class WebDevicePayloadSerializer extends JsonSerializer<WebDevicePayload>
             jgen.writeStringField("title", payload.getTitle().get());
         }
 
+        if (payload.getRequireInteraction().isPresent()) {
+            jgen.writeObjectField("require_interaction", payload.getRequireInteraction().get());
+        }
+
         jgen.writeEndObject();
     }
 }
diff --git a/src/main/java/com/urbanairship/api/schedule/model/BestTime.java b/src/main/java/com/urbanairship/api/schedule/model/BestTime.java
new file mode 100644
index 0000000..82c7075
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/schedule/model/BestTime.java
@@ -0,0 +1,85 @@
+package com.urbanairship.api.schedule.model;
+
+import com.google.common.base.Preconditions;
+import org.joda.time.DateTime;
+
+import java.util.Objects;
+
+/**
+ * Represents that a push will be sent on the scheduled day, at the best time determined by optimization.
+ */
+public final class BestTime {
+
+    private DateTime sendDate;
+
+    private BestTime() {}
+
+    private BestTime(DateTime sendDate) {
+        this.sendDate = sendDate;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (!(o instanceof BestTime)) return false;
+        BestTime bestTime = (BestTime) o;
+        return Objects.equals(getSendDate(), bestTime.getSendDate());
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(getSendDate());
+    }
+
+    @Override
+    public String toString() {
+        return "BestTime{" +
+                ", sendDate=" + sendDate +
+                '}';
+    }
+
+    /**
+     * BestTime builder
+     * @return Builder
+     */
+    public static Builder newBuilder() {
+        return new Builder();
+    }
+
+    /**
+     * Get the scheduled day that push will be sent.
+     * @return DateTime
+     * */
+    public DateTime getSendDate() {
+        return sendDate;
+    }
+
+    /**
+     * BestTime Builder
+     */
+    public static class Builder {
+
+        private DateTime sendDate = null;
+
+        private Builder() { }
+
+        /**
+         * Set the day to send the push
+         * @param sendDate DateTime
+         * @return BestTime Builder
+         */
+        public Builder setSendDate(DateTime sendDate) {
+            this.sendDate = sendDate;
+            return this;
+        }
+
+        /**
+         * Build the Schedule object.
+         * @return Schedule
+         */
+        public BestTime build() {
+            Preconditions.checkArgument((sendDate != null),"sendDate cannot be null");
+            return new BestTime(sendDate);
+        }
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/schedule/model/Schedule.java b/src/main/java/com/urbanairship/api/schedule/model/Schedule.java
index 79e70b8..c6ec46f 100644
--- a/src/main/java/com/urbanairship/api/schedule/model/Schedule.java
+++ b/src/main/java/com/urbanairship/api/schedule/model/Schedule.java
@@ -8,20 +8,28 @@ import com.google.common.base.Objects;
 import com.google.common.base.Preconditions;
 import org.joda.time.DateTime;
 
+import java.util.Optional;
+
+
+/**
+ * Represents the schedule details for a push. A Schedule defines when a push will be sent.
+ */
 public final class Schedule extends ScheduleModelObject {
 
     private final DateTime scheduledTimestamp;
     private final Boolean localTimePresent;
+    private final Optional<BestTime> bestTime;
 
     // TODO local, global, etc
 
-    private Schedule(DateTime scheduledTimestamp, boolean localTimePresent) {
-        this.scheduledTimestamp = scheduledTimestamp;
-        this.localTimePresent = localTimePresent;
+    private Schedule(Builder builder) {
+        this.scheduledTimestamp = builder.scheduledTimestamp;
+        this.localTimePresent = builder.localTimePresent;
+        this.bestTime = Optional.ofNullable(builder.bestTime);
     }
 
     /**
-     * Get the DateTime for this schedule
+     * Get the DateTime for this schedule.
      * @return DateTime
      */
     public DateTime getScheduledTimestamp () {
@@ -29,19 +37,27 @@ public final class Schedule extends ScheduleModelObject {
     }
 
     /**
-     * Get the boolean indicating if the scheduled time is local
+     * Get the boolean indicating if the scheduled time is in local time.
      * @return boolean
      */
     public Boolean getLocalTimePresent() {
         return localTimePresent;
     }
 
+    /**
+     * Get the BestTime for this schedule.
+     * @return
+     */
+    public Optional<BestTime> getBestTime() {
+        return bestTime;
+    }
 
     @Override
     public String toString() {
         return "Schedule{" +
                 "scheduledTimestamp=" + scheduledTimestamp +
                 ", localTimePresent=" + localTimePresent +
+                ", scheduledBestTime=" + bestTime +
                 '}';
     }
 
@@ -77,6 +93,7 @@ public final class Schedule extends ScheduleModelObject {
     public static class Builder {
         private DateTime scheduledTimestamp = null;
         private Boolean localTimePresent = false;
+        private BestTime bestTime = null;
 
         private Builder() { }
 
@@ -96,7 +113,6 @@ public final class Schedule extends ScheduleModelObject {
          * Set the DateTime for local scheduled delivery. This will be converted to
          * UTC by the server.
          * @param scheduledTimestamp DateTime.
-
          * @return Builder
          */
         public Builder setLocalScheduledTimestamp(DateTime scheduledTimestamp) {
@@ -106,14 +122,41 @@ public final class Schedule extends ScheduleModelObject {
         }
 
         /**
+         * Set the best time ( aka Optimal Time) which is one of our predictive features. This sends push on a specified
+         * date for the optimal time for the user to receive.
+         * @param bestTime BestTime
+         * @return Builder
+         */
+        public Builder setBestTime(BestTime bestTime) {
+            this.bestTime = bestTime;
+            return this;
+        }
+
+        /**
          * Build the Schedule object.
          * @return Schedule
          */
         public Schedule build() {
-            Preconditions.checkArgument((scheduledTimestamp != null),"" +
-                    "Either scheduled_time or local_scheduled_time must be set.");
 
-            return new Schedule(scheduledTimestamp, localTimePresent);
+            Preconditions.checkArgument(argumentValidator(scheduledTimestamp,bestTime),
+                    "Either scheduled_time or best_time must be set.");
+
+            return new Schedule(this);
         }
+
+        // ensure that exactly one argument is set
+        private boolean argumentValidator(DateTime scheduledTimestamp, BestTime bestTime) {
+            int argumentSet = 0;
+            if (scheduledTimestamp != null) {
+                argumentSet++;
+            }
+
+            if (bestTime != null) {
+                argumentSet++;
+            }
+            return argumentSet == 1;
+        }
+
     }
+
 }
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/BestTimeDeserializer.java b/src/main/java/com/urbanairship/api/schedule/parse/BestTimeDeserializer.java
new file mode 100644
index 0000000..b5501d7
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/schedule/parse/BestTimeDeserializer.java
@@ -0,0 +1,49 @@
+package com.urbanairship.api.schedule.parse;
+
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
+import com.google.common.base.Supplier;
+import com.google.common.collect.ImmutableMap;
+import com.urbanairship.api.common.parse.FieldParser;
+import com.urbanairship.api.common.parse.FieldParserRegistry;
+import com.urbanairship.api.common.parse.MapFieldParserRegistry;
+import com.urbanairship.api.common.parse.StandardObjectDeserializer;
+import com.urbanairship.api.schedule.model.BestTime;
+
+import java.io.IOException;
+
+public class BestTimeDeserializer extends JsonDeserializer<BestTime> {
+
+    private static final FieldParserRegistry<BestTime, BestTimeReader> FIELD_PARSERS = new MapFieldParserRegistry<BestTime, BestTimeReader>(
+            ImmutableMap.<String, FieldParser<BestTimeReader>>builder()
+                    .put("send_date", new FieldParser<BestTimeReader>() {
+                        @Override
+                        public void parse(BestTimeReader reader, JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException {
+                            reader.readSendDate(jsonParser);
+                        }
+                    })
+                    .build()
+    );
+
+    public static final BestTimeDeserializer INSTANCE = new BestTimeDeserializer();
+
+    private final StandardObjectDeserializer<BestTime, ?> deserializer;
+
+    public BestTimeDeserializer() {
+        deserializer = new StandardObjectDeserializer<BestTime, BestTimeReader>(
+                FIELD_PARSERS,
+                new Supplier<BestTimeReader>() {
+                    @Override
+                    public BestTimeReader get() {
+                        return new BestTimeReader();
+                    }
+                }
+        );
+    }
+
+    @Override
+    public BestTime deserialize(JsonParser parser, DeserializationContext deserializationContext) throws IOException {
+        return deserializer.deserialize(parser, deserializationContext);
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/BestTimeReader.java b/src/main/java/com/urbanairship/api/schedule/parse/BestTimeReader.java
new file mode 100644
index 0000000..469b49e
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/schedule/parse/BestTimeReader.java
@@ -0,0 +1,32 @@
+package com.urbanairship.api.schedule.parse;
+
+import com.fasterxml.jackson.core.JsonParser;
+import com.urbanairship.api.common.parse.APIParsingException;
+import com.urbanairship.api.common.parse.JsonObjectReader;
+import com.urbanairship.api.schedule.model.BestTime;
+import org.joda.time.DateTime;
+
+import java.io.IOException;
+
+public class BestTimeReader implements JsonObjectReader<BestTime> {
+
+    private final BestTime.Builder builder;
+
+    public BestTimeReader() {
+        this.builder = BestTime.newBuilder();
+    }
+
+    public void readSendDate(JsonParser jsonParser) throws IOException {
+        builder.setSendDate(jsonParser.readValueAs(DateTime.class));
+    }
+
+    @Override
+    public BestTime validateAndBuild() throws IOException {
+        try {
+            return builder.build();
+        }
+        catch (Exception e) {
+            throw new APIParsingException(e.getMessage(), e);
+        }
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/BestTimeSerializer.java b/src/main/java/com/urbanairship/api/schedule/parse/BestTimeSerializer.java
new file mode 100644
index 0000000..7054351
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/schedule/parse/BestTimeSerializer.java
@@ -0,0 +1,23 @@
+package com.urbanairship.api.schedule.parse;
+
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
+import com.urbanairship.api.common.parse.DateFormats;
+import com.urbanairship.api.schedule.model.BestTime;
+
+import java.io.IOException;
+
+public class BestTimeSerializer extends JsonSerializer<BestTime> {
+
+    public static final ScheduleSerializer INSTANCE = new ScheduleSerializer();
+
+    @Override
+    public void serialize(BestTime value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
+        jgen.writeStartObject();
+
+        jgen.writeStringField("send_date", DateFormats.DAYS_FORMAT.print(value.getSendDate()));
+
+        jgen.writeEndObject();
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleDeserializer.java b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleDeserializer.java
index 045f274..e14c39e 100644
--- a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleDeserializer.java
+++ b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleDeserializer.java
@@ -33,6 +33,12 @@ public final class ScheduleDeserializer extends JsonDeserializer<Schedule> {
                     reader.readScheduledTime(jsonParser);
                 }
             })
+            .put("best_time", new FieldParser<ScheduleReader>() {
+                @Override
+                public void parse(ScheduleReader reader, JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException {
+                    reader.readBestTime(jsonParser);
+                }
+            })
             .build()
     );
 
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleObjectMapper.java b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleObjectMapper.java
index 2fe6770..8886489 100644
--- a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleObjectMapper.java
+++ b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleObjectMapper.java
@@ -6,12 +6,14 @@ import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.module.SimpleModule;
 import com.fasterxml.jackson.datatype.joda.JodaModule;
 import com.urbanairship.api.push.parse.PushObjectMapper;
+import com.urbanairship.api.schedule.model.BestTime;
 import com.urbanairship.api.schedule.model.ListAllSchedulesResponse;
 import com.urbanairship.api.schedule.model.Schedule;
 import com.urbanairship.api.schedule.model.ScheduleDetails;
 import com.urbanairship.api.schedule.model.SchedulePayload;
 import com.urbanairship.api.schedule.model.ScheduleResponse;
 
+
 public class ScheduleObjectMapper {
 
     private static final ObjectMapper MAPPER = new ObjectMapper();
@@ -19,13 +21,16 @@ public class ScheduleObjectMapper {
 
     static {
         MODULE
-            .addDeserializer(SchedulePayload.class, SchedulePayloadDeserializer.INSTANCE)
-            .addSerializer(SchedulePayload.class, ScheduledPayloadSerializer.INSTANCE)
-            .addDeserializer(Schedule.class, ScheduleDeserializer.INSTANCE)
-            .addSerializer(Schedule.class, ScheduleSerializer.INSTANCE)
-            .addSerializer(ScheduleDetails.class, ScheduleDetailsSerializer.INSTANCE)
-            .addDeserializer(ScheduleResponse.class, new ScheduleResponseDeserializer())
-            .addDeserializer(ListAllSchedulesResponse.class, new ListSchedulesResponseDeserializer());
+                .addDeserializer(SchedulePayload.class, SchedulePayloadDeserializer.INSTANCE)
+                .addSerializer(SchedulePayload.class, ScheduledPayloadSerializer.INSTANCE)
+                .addDeserializer(Schedule.class, ScheduleDeserializer.INSTANCE)
+                .addSerializer(Schedule.class, ScheduleSerializer.INSTANCE)
+                .addSerializer(ScheduleDetails.class, ScheduleDetailsSerializer.INSTANCE)
+                .addDeserializer(ScheduleResponse.class, new ScheduleResponseDeserializer())
+                .addDeserializer(ListAllSchedulesResponse.class, new ListSchedulesResponseDeserializer())
+                .addDeserializer(BestTime.class, BestTimeDeserializer.INSTANCE)
+                .addSerializer(BestTime.class, new BestTimeSerializer());
+
 
         MAPPER.registerModule(MODULE);
         MAPPER.registerModule(PushObjectMapper.getModule());
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleReader.java b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleReader.java
index b8cd19c..d64c2ec 100644
--- a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleReader.java
+++ b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleReader.java
@@ -7,6 +7,7 @@ package com.urbanairship.api.schedule.parse;
 import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
+import com.urbanairship.api.schedule.model.BestTime;
 import com.urbanairship.api.schedule.model.Schedule;
 import org.joda.time.DateTime;
 
@@ -21,10 +22,13 @@ public final class ScheduleReader implements JsonObjectReader<Schedule> {
     }
 
     public void readScheduledTime(JsonParser jsonParser) throws IOException {
-        String time = jsonParser.readValuesAs(DateTime.class).toString();
         builder.setScheduledTimestamp(jsonParser.readValueAs(DateTime.class));
     }
 
+    public void readBestTime(JsonParser jsonParser) throws IOException {
+        builder.setBestTime(jsonParser.readValueAs(BestTime.class));
+    }
+
     @Override
     public Schedule validateAndBuild() throws IOException {
         try {
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleSerializer.java b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleSerializer.java
index c8bad1f..4d8e60b 100644
--- a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleSerializer.java
+++ b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleSerializer.java
@@ -20,13 +20,14 @@ public class ScheduleSerializer extends JsonSerializer<Schedule> {
     public void serialize(Schedule value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
         jgen.writeStartObject();
 
-        if (!value.getLocalTimePresent()) {
-            jgen.writeStringField("scheduled_time", DateFormats.DATE_FORMATTER.print(value.getScheduledTimestamp()));
-        }
-        if (value.getLocalTimePresent()) {
-            jgen.writeStringField("local_scheduled_time", DateFormats.DATE_FORMATTER.print(value.getScheduledTimestamp()));
-        }
-
+        if (value.getBestTime().isPresent()) {
+            jgen.writeObjectField("best_time", value.getBestTime().get());
+        } else if (!value.getLocalTimePresent()){
+                jgen.writeStringField("scheduled_time", DateFormats.DATE_FORMATTER.print(value.getScheduledTimestamp()));
+            }
+            else {
+                jgen.writeStringField("local_scheduled_time", DateFormats.DATE_FORMATTER.print(value.getScheduledTimestamp()));
+            }
         jgen.writeEndObject();
     }
 }
diff --git a/src/test/java/com/urbanairship/api/push/model/notification/web/WebSettingsDevicePayloadTest.java b/src/test/java/com/urbanairship/api/push/model/notification/web/WebSettingsDevicePayloadTest.java
index 3974d89..07a0f71 100644
--- a/src/test/java/com/urbanairship/api/push/model/notification/web/WebSettingsDevicePayloadTest.java
+++ b/src/test/java/com/urbanairship/api/push/model/notification/web/WebSettingsDevicePayloadTest.java
@@ -19,6 +19,7 @@ public class WebSettingsDevicePayloadTest {
                 .addExtraEntry("key", "value")
                 .addExtraEntry("key2", "value2")
                 .setWebIcon(webIcon)
+                .setRequireInteraction(true)
                 .build();
 
         assertTrue(m.getExtra().isPresent());
@@ -37,6 +38,9 @@ public class WebSettingsDevicePayloadTest {
 
         assertTrue(m.getWebIcon().isPresent());
         assertEquals(m.getWebIcon().get(), webIcon);
+
+        assertTrue(m.getRequireInteraction().isPresent());
+        assertEquals(true, m.getRequireInteraction().get());
     }
 }
 
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/web/PayloadDeserializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/web/PayloadDeserializerTest.java
index b60d73d..071441d 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/web/PayloadDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/web/PayloadDeserializerTest.java
@@ -100,4 +100,21 @@ public class PayloadDeserializerTest {
         assertNotNull(payload);
         assertEquals(webIcon, payload.getWebIcon().get());
     }
+
+    @Test
+    public void testRequireInteraction() throws Exception {
+        String json =
+                "{" +
+                        "\"require_interaction\":" +
+                        "true" +
+                        "}";
+
+        WebDevicePayload expected = WebDevicePayload.newBuilder()
+                .setRequireInteraction(true)
+                .build();
+
+        WebDevicePayload payload = MAPPER.readValue(json, WebDevicePayload.class);
+        assertNotNull(payload);
+        assertEquals(expected.getRequireInteraction().get(), payload.getRequireInteraction().get());
+    }
 }
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/web/PayloadSerializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/web/PayloadSerializerTest.java
index a8be15f..2793a03 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/web/PayloadSerializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/web/PayloadSerializerTest.java
@@ -24,14 +24,17 @@ public class PayloadSerializerTest {
                 .setTitle("WebSettings title")
                 .addExtraEntry("extrakey", "extravalue")
                 .setWebIcon(webIcon)
+                .setRequireInteraction(true)
                 .build();
 
         String expected = "{" +
                     "\"alert\":\"WebSettings specific alert\"," +
                     "\"extra\":{\"extrakey\":\"extravalue\"}," +
                     "\"icon\":{\"url\":\"https://i.ytimg.com/vi/PNgykntrIzE/maxresdefault.jpg\"}," +
-                    "\"title\":\"WebSettings title\"" +
-                "}";
+                    "\"title\":\"WebSettings title\"," +
+                    "\"require_interaction\":true" +
+
+        "}";
 
         String parsedJson = MAPPER.writeValueAsString(webPayload);
         WebDevicePayload roundTripWebPayload = MAPPER.readValue(parsedJson, WebDevicePayload.class);
diff --git a/src/test/java/com/urbanairship/api/schedule/SchedulePayloadDeserializerTest.java b/src/test/java/com/urbanairship/api/schedule/SchedulePayloadDeserializerTest.java
index 1d4ebed..0fd0dc7 100644
--- a/src/test/java/com/urbanairship/api/schedule/SchedulePayloadDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/schedule/SchedulePayloadDeserializerTest.java
@@ -5,18 +5,26 @@ import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.base.Optional;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.DateFormats;
+import com.urbanairship.api.push.model.DeviceTypeData;
+import com.urbanairship.api.push.model.PushPayload;
+import com.urbanairship.api.push.model.audience.Selectors;
+import com.urbanairship.api.push.model.notification.Notification;
 import com.urbanairship.api.push.parse.PushObjectMapper;
+import com.urbanairship.api.schedule.model.BestTime;
+import com.urbanairship.api.schedule.model.Schedule;
 import com.urbanairship.api.schedule.model.SchedulePayload;
 import org.apache.commons.lang.RandomStringUtils;
+import org.joda.time.DateTime;
+import org.junit.Rule;
 import org.junit.Test;
-
+import org.junit.rules.ExpectedException;
 import java.util.List;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
 public class SchedulePayloadDeserializerTest {
 
+    @Rule
+    public ExpectedException thrown = ExpectedException.none();
+
     private static final ObjectMapper MAPPER = PushObjectMapper.getInstance();
 
     @Test
@@ -40,16 +48,41 @@ public class SchedulePayloadDeserializerTest {
 
         SchedulePayload payload = MAPPER.readValue(json, SchedulePayload.class);
 
-        assertNotNull(payload);
-        assertEquals(payload.getName(), Optional.of(name));
-        assertEquals(payload.getSchedule().getScheduledTimestamp(), DateFormats.DATE_PARSER.parseDateTime("2013-05-05 00:00:01"));
+        org.junit.Assert.assertNotNull(payload);
+        junit.framework.Assert.assertEquals(payload.getName(), Optional.of(name));
+        junit.framework.Assert.assertEquals(payload.getSchedule().getScheduledTimestamp(), DateFormats.DATE_PARSER.parseDateTime("2013-05-05 00:00:01"));
 
         List<SchedulePayload> payloadList = MAPPER.readValue(json, new TypeReference<List<SchedulePayload>>() {
         });
 
-        assertNotNull(payloadList);
-        assertEquals(payloadList.size(), 1);
+        org.junit.Assert.assertNotNull(payloadList);
+        junit.framework.Assert.assertEquals(payloadList.size(), 1);
+    }
 
+    @Test
+    public void testBestTimeDeserialization() throws Exception {
+
+        SchedulePayload payload = SchedulePayload.newBuilder()
+                .setSchedule(Schedule.newBuilder()
+                        .setBestTime(BestTime.newBuilder()
+                                .setSendDate(DateTime.now())
+                                .build())
+                        .build())
+                .setName("BestTimePushPayload")
+                .setPushPayload(PushPayload.newBuilder()
+                        .setAudience(Selectors.all())
+                        .setDeviceTypes(DeviceTypeData.all())
+                        .setNotification(Notification.newBuilder()
+                                .setAlert("Hello Everyone")
+                                .build())
+                        .build())
+                .build();
+
+        String json = MAPPER.writeValueAsString(payload);
+
+        SchedulePayload fromJson = MAPPER.readValue(json, SchedulePayload.class);
+
+        junit.framework.Assert.assertEquals(payload, fromJson);
     }
 
     @Test
@@ -68,13 +101,14 @@ public class SchedulePayloadDeserializerTest {
 
         SchedulePayload payload = MAPPER.readValue(json, SchedulePayload.class);
 
-        assertNotNull(payload);
-        assertEquals(payload.getName(), Optional.<String>absent());
-        assertEquals(payload.getSchedule().getScheduledTimestamp(), DateFormats.DATE_PARSER.parseDateTime("2013-05-05 00:00:01"));
+        org.junit.Assert.assertNotNull(payload);
+        junit.framework.Assert.assertEquals(payload.getName(), Optional.<String>absent());
+        junit.framework.Assert.assertEquals(payload.getSchedule().getScheduledTimestamp(), DateFormats.DATE_PARSER.parseDateTime("2013-05-05 00:00:01"));
     }
 
-    @Test(expected = APIParsingException.class)
+    @Test
     public void testInvalidScheduleObject() throws Exception {
+        thrown.expect(APIParsingException.class);
         String json =
                 "{" +
                         "\"schedule\": {" +
@@ -91,9 +125,9 @@ public class SchedulePayloadDeserializerTest {
 
     }
 
-    @Test(expected = APIParsingException.class)
+    @Test
     public void testInvalidName() throws Exception {
-
+        thrown.expect(APIParsingException .class);
         String json =
                 "{" +
                         "\"schedule\": {" +
@@ -110,6 +144,5 @@ public class SchedulePayloadDeserializerTest {
                         "}";
 
         MAPPER.readValue(json, SchedulePayload.class);
-
     }
 }
\ No newline at end of file
diff --git a/src/test/java/com/urbanairship/api/schedule/SchedulePayloadSerializerTest.java b/src/test/java/com/urbanairship/api/schedule/SchedulePayloadSerializerTest.java
index 8113640..8b0244e 100644
--- a/src/test/java/com/urbanairship/api/schedule/SchedulePayloadSerializerTest.java
+++ b/src/test/java/com/urbanairship/api/schedule/SchedulePayloadSerializerTest.java
@@ -8,20 +8,17 @@ import com.urbanairship.api.push.model.PushOptions;
 import com.urbanairship.api.push.model.PushPayload;
 import com.urbanairship.api.push.model.audience.Selectors;
 import com.urbanairship.api.push.model.notification.Notification;
-import com.urbanairship.api.push.parse.PushObjectMapper;
+import com.urbanairship.api.schedule.model.BestTime;
 import com.urbanairship.api.schedule.model.Schedule;
 import com.urbanairship.api.schedule.model.SchedulePayload;
+import com.urbanairship.api.schedule.parse.ScheduleObjectMapper;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
 public class SchedulePayloadSerializerTest {
 
-    private static final ObjectMapper MAPPER = PushObjectMapper.getInstance();
+    private static final ObjectMapper MAPPER = ScheduleObjectMapper.getInstance();
 
     @Test
     public void testSerialization() throws Exception {
@@ -43,7 +40,32 @@ public class SchedulePayloadSerializerTest {
 
         String properJson = "{\"schedule\":{\"scheduled_time\":\"2013-05-05T00:00:01\"},\"push\":{\"audience\":{\"tag\":\"tag\"},\"device_types\":[\"ios\"],\"notification\":{\"alert\":\"alert\"},\"options\":{}}}";
 
-        assertEquals(json, properJson);
+        org.junit.Assert.assertEquals(json, properJson);
+    }
+
+    @Test
+    public void testBestTimeSerialization() throws Exception {
+        BestTime bestTime = BestTime.newBuilder()
+                .setSendDate(new DateTime("2013-05-05T00:00:01", DateTimeZone.UTC))
+                .build();
+
+        PushPayload pushPayload = PushPayload.newBuilder()
+                .setAudience(Selectors.tag("tag"))
+                .setDeviceTypes(DeviceTypeData.newBuilder().addDeviceType(DeviceType.IOS).build())
+                .setNotification(Notification.newBuilder().setAlert("alert").build())
+                .setPushOptions(PushOptions.newBuilder().build())
+                .build();
+        SchedulePayload schedulePayload = SchedulePayload.newBuilder()
+                .setSchedule(Schedule.newBuilder()
+                        .setBestTime(bestTime)
+                        .build())
+                .setPushPayload(pushPayload)
+                .build();
+
+        String json = MAPPER.writeValueAsString(schedulePayload);
+
+        String properJson = "{\"schedule\":{\"best_time\":{\"send_date\":\"2013-05-05\"}},\"push\":{\"audience\":{\"tag\":\"tag\"},\"device_types\":[\"ios\"],\"notification\":{\"alert\":\"alert\"},\"options\":{}}}";
+        org.junit.Assert.assertEquals(json, properJson);
     }
 
     @Test(expected = Exception.class)
@@ -63,7 +85,7 @@ public class SchedulePayloadSerializerTest {
         String json = MAPPER.writeValueAsString(schedulePayload);
         String properJson = "{\"schedule\":{},\"push\":{\"audience\":{\"tag\":\"tag\"},\"device_types\":[\"ios\"],\"notification\":{\"alert\":\"alert\"},\"options\":{\"present\":true}}}";
 
-        assertEquals(json, properJson);
+        org.junit.Assert.assertEquals(json, properJson);
 
     }
 
@@ -83,7 +105,7 @@ public class SchedulePayloadSerializerTest {
                 .setPushPayload(pushPayload)
                 .build();
 
-        assertFalse(schedulePayload.getSchedule().getLocalTimePresent());
+        org.junit.Assert.assertFalse(schedulePayload.getSchedule().getLocalTimePresent());
 
         PushPayload pushPayloadLocal = PushPayload.newBuilder()
                 .setAudience(Selectors.tag("tag"))
@@ -107,8 +129,8 @@ public class SchedulePayloadSerializerTest {
         JsonNode jsonNode = MAPPER.readTree(scheduleString);
         JsonNode jsonNodeExpected = MAPPER.readTree(expectedScheduled);
 
-        assertTrue(schedulePayloadLocal.getSchedule().getLocalTimePresent());
-        assertEquals(jsonNodeExpected, jsonNode);
+        org.junit.Assert.assertTrue(schedulePayloadLocal.getSchedule().getLocalTimePresent());
+        org.junit.Assert.assertEquals(jsonNodeExpected, jsonNode);
     }
 
 }
diff --git a/src/test/java/com/urbanairship/api/schedule/ScheduleSerializerTest.java b/src/test/java/com/urbanairship/api/schedule/ScheduleSerializerTest.java
new file mode 100644
index 0000000..5e54db3
--- /dev/null
+++ b/src/test/java/com/urbanairship/api/schedule/ScheduleSerializerTest.java
@@ -0,0 +1,61 @@
+package com.urbanairship.api.schedule;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.urbanairship.api.push.model.DeviceType;
+import com.urbanairship.api.push.model.DeviceTypeData;
+import com.urbanairship.api.push.model.PushOptions;
+import com.urbanairship.api.push.model.PushPayload;
+import com.urbanairship.api.push.model.audience.Selectors;
+import com.urbanairship.api.push.model.notification.Notification;
+import com.urbanairship.api.push.parse.PushObjectMapper;
+import com.urbanairship.api.schedule.model.BestTime;
+import com.urbanairship.api.schedule.model.Schedule;
+import com.urbanairship.api.schedule.model.SchedulePayload;
+import com.urbanairship.api.schedule.parse.ScheduleObjectMapper;
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeZone;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+
+public class ScheduleSerializerTest {
+
+    private static final ObjectMapper MAPPER = ScheduleObjectMapper.getInstance();
+
+    @Test
+    public void testSerialization() throws Exception {
+
+        PushPayload pushPayload = PushPayload.newBuilder()
+                .setAudience(Selectors.tag("tag"))
+                .setDeviceTypes(DeviceTypeData.newBuilder().addDeviceType(DeviceType.IOS).build())
+                .setNotification(Notification.newBuilder().setAlert("alert").build())
+                .setPushOptions(PushOptions.newBuilder().build())
+                .build();
+        SchedulePayload schedulePayload = SchedulePayload.newBuilder()
+                .setSchedule(Schedule.newBuilder()
+                        .setScheduledTimestamp(new DateTime("2013-05-05T00:00:01", DateTimeZone.UTC))
+                        .build())
+                .setPushPayload(pushPayload)
+                .build();
+
+        String json = MAPPER.writeValueAsString(schedulePayload);
+
+        String properJson = "{\"schedule\":{\"scheduled_time\":\"2013-05-05T00:00:01\"},\"push\":{\"audience\":{\"tag\":\"tag\"},\"device_types\":[\"ios\"],\"notification\":{\"alert\":\"alert\"},\"options\":{}}}";
+
+        assertEquals(json, properJson);
+
+        BestTime bestTime = BestTime.newBuilder()
+                .setSendDate(DateTime.now())
+                .build();
+
+        Schedule schedule = Schedule.newBuilder()
+                .setBestTime(bestTime)
+                .build();
+
+        String scheduledBestTimeJson = MAPPER.writeValueAsString(schedule);
+
+        System.out.println(scheduledBestTimeJson);
+
+    }
+
+}
diff --git a/src/test/java/com/urbanairship/api/schedule/ScheduleTest.java b/src/test/java/com/urbanairship/api/schedule/ScheduleTest.java
new file mode 100644
index 0000000..d9d0918
--- /dev/null
+++ b/src/test/java/com/urbanairship/api/schedule/ScheduleTest.java
@@ -0,0 +1,76 @@
+package com.urbanairship.api.schedule;
+
+import com.urbanairship.api.schedule.model.BestTime;
+import com.urbanairship.api.schedule.model.Schedule;
+import org.joda.time.DateTime;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.ExpectedException;
+
+public class ScheduleTest {
+
+    private DateTime dateTime;
+
+    @Before
+    public void setUp() {
+        dateTime = DateTime.now();
+    }
+
+    @Rule
+    public ExpectedException thrown = ExpectedException.none();
+
+    /**
+     * Neither setScheduledTimestamp nor setBestTime called
+     */
+    @Test
+    public void testScheduledTimeAndBestTimeBothAbsent() throws Exception {
+        thrown.expect(IllegalArgumentException.class);
+        Schedule schedule = Schedule.newBuilder()
+                .build();
+    }
+
+    /**
+     * Both setScheduledTimestamp and setBestTime called
+     */
+    @Test
+    public void testScheduledTimeAndBestTimeBothPresent() throws Exception {
+        thrown.expect(IllegalArgumentException.class);
+
+        Schedule schedule = Schedule.newBuilder()
+                .setScheduledTimestamp(dateTime)
+                .setBestTime(BestTime.newBuilder()
+                        .setSendDate(dateTime)
+                        .build())
+                .build();
+    }
+
+    /**
+     * Only setScheduledTimestamp, not setBestTime called
+     */
+    @Test
+    public void testScheduledTime() {
+
+        Schedule schedule = Schedule.newBuilder()
+                .setScheduledTimestamp(dateTime)
+                .build();
+
+        Assert.assertNotNull(schedule.getScheduledTimestamp() );
+    }
+
+    /**
+     * Only setBestTime called, not setScheduledTimestamp
+     */
+    @Test
+    public void testBestTime() {
+
+        Schedule schedule = Schedule.newBuilder()
+                .setBestTime(BestTime.newBuilder()
+                        .setSendDate(dateTime)
+                        .build())
+                .build();
+
+        Assert.assertNotNull(schedule.getBestTime());
+    }
+}
