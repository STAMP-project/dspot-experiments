diff --git a/.github/CONTRIBUTING.md b/.github/CONTRIBUTING.md
new file mode 100644
index 0000000..1363349
--- /dev/null
+++ b/.github/CONTRIBUTING.md
@@ -0,0 +1,11 @@
+# Contribution Agreement
+
+## What is the Contributor License Agreement, and what does it mean?
+
+The Contributor License Agreement (CLA) below is to ensure that when someone contributes code to one of our open source libraries that we have a clear record of the license to use it. This is necessary so that we can ensure to all of our customers that they can make use of our libraries and tools without worry. You retain copyright of all of your code.
+
+Please read through the agreement at the URL below. 
+
+If you have questions about this agreement or why we need it please contact us at https://support.urbanairship.com/.
+
+[Contribution Agreement](https://docs.urbanairship.com/contribution-agreement/)
\ No newline at end of file
diff --git a/.github/ISSUE_TEMPLATE.md b/.github/ISSUE_TEMPLATE.md
new file mode 100644
index 0000000..0f7f957
--- /dev/null
+++ b/.github/ISSUE_TEMPLATE.md
@@ -0,0 +1,33 @@
+We only accept issues for bug reporting purposes. 
+
+**All feature requests, implementation concerns or general queries should be sent to our [support team](https://support.urbanairship.com/).**
+
+Before completing the form below, please check the following:
+
+- [ ] You are using the most recent version of the library. 
+- [ ] You are using a supported version of Java for that library version. 
+- [ ] This issue is reproducible. 
+
+## Expected Behavior
+<!--- Tell us what should happen -->
+
+## Current Behavior
+<!--- Tell us what happens instead of the expected behavior -->
+
+## Possible Solution
+<!--- Not required, but gives us a place to begin investigating -->
+
+## Steps to Reproduce
+<!--- Provide a link to a live example, or an unambiguous set of steps to -->
+<!--- reproduce this bug. Include your implementation code if possible and relevant -->
+1.
+2.
+3.
+4.
+
+## Detailed Description
+<!--- Provide a detailed description. If possible full logs showing the behavior.-->
+
+## Possible Fix
+<!--- Not required, but suggest your possible solution if possible. -->
+<!--  If your fix is known to work, we accept pull requests with a completed contribution agreement. -->
\ No newline at end of file
diff --git a/.github/PULL_REQUEST_TEMPLATE.md b/.github/PULL_REQUEST_TEMPLATE.md
new file mode 100644
index 0000000..cbf3834
--- /dev/null
+++ b/.github/PULL_REQUEST_TEMPLATE.md
@@ -0,0 +1,19 @@
+### What does this do and why?
+Please include link to open issue if applicable.
+
+### Additional notes for reviewers
+* If applicable
+
+### Testing
+- [ ] I wrote tests covering these changes  
+- [ ] I ran the full test suite and it passed
+
+### Test run results, including date and time:
+
+### Urban Airship Contribution Agreement
+https://docs.urbanairship.com/contribution-agreement/
+
+- [ ] I've filled out and signed UA's contribution agreement form.
+
+### Screenshots
+* If applicable
diff --git a/.github/SUPPORT.md b/.github/SUPPORT.md
new file mode 100644
index 0000000..dd7a855
--- /dev/null
+++ b/.github/SUPPORT.md
@@ -0,0 +1,10 @@
+# Support Requests
+
+All requests for support including implementation support and feature requests are made to the Urban Airship support team. 
+
+You can contact them by visiting https://support.urbanairship.com/
+
+# Documentation
+
+Documentation for the library can be found here:
+https://docs.urbanairship.com/reference/libraries/java/
\ No newline at end of file
diff --git a/.gitmodules b/.gitmodules
index 5a5fd38..e69de29 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,3 +0,0 @@
-[submodule "docs/_themes/urbanairship"]
-	path = docs/_themes/urbanairship
-	url = git@github.com:urbanairship/ua-sphinx-docs-theme.git
diff --git a/CHANGELOG b/CHANGELOG
index c798663..e03efc6 100644
--- a/CHANGELOG
+++ b/CHANGELOG
@@ -1,4 +1,44 @@
 -------------------------
+3.1.0 17SEPT18
+-------------------------
+- Added support for the Require Interaction web notify feature.
+
+-------------------------
+3.1.0 11SEPT18
+-------------------------
+- Added support for Predictive Send Time Optimization.
+
+-------------------------
+3.0.1 28JUN18
+-------------------------
+- Updated to async-http-client 2.4.8.
+
+-------------------------
+3.0.0 23MAR18
+-------------------------
+- Updated the underlying HTTP client to fix a bug when trying to use a proxy server over HTTPS.
+- Added support for implementing a custom HTTP client.
+- Added support for creating and pushing to open channels.
+
+-------------------------
+2.1.0 20DEC17
+-------------------------
+- Added support for Campaigns.
+
+-------------------------
+2.0.0 29AUG17
+-------------------------
+- Added support for server-side custom events.
+- Added support for A/B test creation and deletion.
+- Updated Jackson json library.
+- ServerExceptions will now correctly be thrown on 5XX responses.
+- Fixed a crash caused by device listings that contain open channels.
+- Android public notifications are now being sent properly.
+- Removed deprecated reports endpoints.
+- Removed Blackberry push support.
+- Removed MPNS push support.
+
+-------------------------
 1.4.0 02JUN17
 -------------------------
 - Added icon support for rich inbox messaging.
diff --git a/VERSION.txt b/VERSION.txt
index 88c5fb8..944880f 100644
--- a/VERSION.txt
+++ b/VERSION.txt
@@ -1 +1 @@
-1.4.0
+3.2.0
diff --git a/docs/Makefile b/docs/Makefile
deleted file mode 100644
index 40b0366..0000000
--- a/docs/Makefile
+++ /dev/null
@@ -1,177 +0,0 @@
-# Makefile for Sphinx documentation
-#
-
-# You can set these variables from the command line.
-SPHINXOPTS    =
-SPHINXBUILD   = sphinx-build
-PAPER         =
-BUILDDIR      = _build
-
-# User-friendly check for sphinx-build
-ifeq ($(shell which $(SPHINXBUILD) >/dev/null 2>&1; echo $$?), 1)
-$(error The '$(SPHINXBUILD)' command was not found. Make sure you have Sphinx installed, then set the SPHINXBUILD environment variable to point to the full path of the '$(SPHINXBUILD)' executable. Alternatively you can add the directory with the executable to your PATH. If you don't have Sphinx installed, grab it from http://sphinx-doc.org/)
-endif
-
-# Internal variables.
-PAPEROPT_a4     = -D latex_paper_size=a4
-PAPEROPT_letter = -D latex_paper_size=letter
-ALLSPHINXOPTS   = -d $(BUILDDIR)/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .
-# the i18n builder cannot share the environment and doctrees with the others
-I18NSPHINXOPTS  = $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .
-
-.PHONY: help clean html dirhtml singlehtml pickle json htmlhelp qthelp devhelp epub latex latexpdf text man changes linkcheck doctest gettext
-
-help:
-	@echo "Please use \`make <target>' where <target> is one of"
-	@echo "  html       to make standalone HTML files"
-	@echo "  dirhtml    to make HTML files named index.html in directories"
-	@echo "  singlehtml to make a single large HTML file"
-	@echo "  pickle     to make pickle files"
-	@echo "  json       to make JSON files"
-	@echo "  htmlhelp   to make HTML files and a HTML help project"
-	@echo "  qthelp     to make HTML files and a qthelp project"
-	@echo "  devhelp    to make HTML files and a Devhelp project"
-	@echo "  epub       to make an epub"
-	@echo "  latex      to make LaTeX files, you can set PAPER=a4 or PAPER=letter"
-	@echo "  latexpdf   to make LaTeX files and run them through pdflatex"
-	@echo "  latexpdfja to make LaTeX files and run them through platex/dvipdfmx"
-	@echo "  text       to make text files"
-	@echo "  man        to make manual pages"
-	@echo "  texinfo    to make Texinfo files"
-	@echo "  info       to make Texinfo files and run them through makeinfo"
-	@echo "  gettext    to make PO message catalogs"
-	@echo "  changes    to make an overview of all changed/added/deprecated items"
-	@echo "  xml        to make Docutils-native XML files"
-	@echo "  pseudoxml  to make pseudoxml-XML files for display purposes"
-	@echo "  linkcheck  to check all external links for integrity"
-	@echo "  doctest    to run all doctests embedded in the documentation (if enabled)"
-
-clean:
-	rm -rf $(BUILDDIR)/*
-
-html:
-	$(SPHINXBUILD) -b html $(ALLSPHINXOPTS) $(BUILDDIR)/html
-	@echo
-	@echo "Build finished. The HTML pages are in $(BUILDDIR)/html."
-
-dirhtml:
-	$(SPHINXBUILD) -b dirhtml $(ALLSPHINXOPTS) $(BUILDDIR)/dirhtml
-	@echo
-	@echo "Build finished. The HTML pages are in $(BUILDDIR)/dirhtml."
-
-singlehtml:
-	$(SPHINXBUILD) -b singlehtml $(ALLSPHINXOPTS) $(BUILDDIR)/singlehtml
-	@echo
-	@echo "Build finished. The HTML page is in $(BUILDDIR)/singlehtml."
-
-pickle:
-	$(SPHINXBUILD) -b pickle $(ALLSPHINXOPTS) $(BUILDDIR)/pickle
-	@echo
-	@echo "Build finished; now you can process the pickle files."
-
-json:
-	$(SPHINXBUILD) -b json $(ALLSPHINXOPTS) $(BUILDDIR)/json
-	@echo
-	@echo "Build finished; now you can process the JSON files."
-
-htmlhelp:
-	$(SPHINXBUILD) -b htmlhelp $(ALLSPHINXOPTS) $(BUILDDIR)/htmlhelp
-	@echo
-	@echo "Build finished; now you can run HTML Help Workshop with the" \
-	      ".hhp project file in $(BUILDDIR)/htmlhelp."
-
-qthelp:
-	$(SPHINXBUILD) -b qthelp $(ALLSPHINXOPTS) $(BUILDDIR)/qthelp
-	@echo
-	@echo "Build finished; now you can run "qcollectiongenerator" with the" \
-	      ".qhcp project file in $(BUILDDIR)/qthelp, like this:"
-	@echo "# qcollectiongenerator $(BUILDDIR)/qthelp/UrbanAirshipJavaClient.qhcp"
-	@echo "To view the help file:"
-	@echo "# assistant -collectionFile $(BUILDDIR)/qthelp/UrbanAirshipJavaClient.qhc"
-
-devhelp:
-	$(SPHINXBUILD) -b devhelp $(ALLSPHINXOPTS) $(BUILDDIR)/devhelp
-	@echo
-	@echo "Build finished."
-	@echo "To view the help file:"
-	@echo "# mkdir -p $$HOME/.local/share/devhelp/UrbanAirshipJavaClient"
-	@echo "# ln -s $(BUILDDIR)/devhelp $$HOME/.local/share/devhelp/UrbanAirshipJavaClient"
-	@echo "# devhelp"
-
-epub:
-	$(SPHINXBUILD) -b epub $(ALLSPHINXOPTS) $(BUILDDIR)/epub
-	@echo
-	@echo "Build finished. The epub file is in $(BUILDDIR)/epub."
-
-latex:
-	$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex
-	@echo
-	@echo "Build finished; the LaTeX files are in $(BUILDDIR)/latex."
-	@echo "Run \`make' in that directory to run these through (pdf)latex" \
-	      "(use \`make latexpdf' here to do that automatically)."
-
-latexpdf:
-	$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex
-	@echo "Running LaTeX files through pdflatex..."
-	$(MAKE) -C $(BUILDDIR)/latex all-pdf
-	@echo "pdflatex finished; the PDF files are in $(BUILDDIR)/latex."
-
-latexpdfja:
-	$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex
-	@echo "Running LaTeX files through platex and dvipdfmx..."
-	$(MAKE) -C $(BUILDDIR)/latex all-pdf-ja
-	@echo "pdflatex finished; the PDF files are in $(BUILDDIR)/latex."
-
-text:
-	$(SPHINXBUILD) -b text $(ALLSPHINXOPTS) $(BUILDDIR)/text
-	@echo
-	@echo "Build finished. The text files are in $(BUILDDIR)/text."
-
-man:
-	$(SPHINXBUILD) -b man $(ALLSPHINXOPTS) $(BUILDDIR)/man
-	@echo
-	@echo "Build finished. The manual pages are in $(BUILDDIR)/man."
-
-texinfo:
-	$(SPHINXBUILD) -b texinfo $(ALLSPHINXOPTS) $(BUILDDIR)/texinfo
-	@echo
-	@echo "Build finished. The Texinfo files are in $(BUILDDIR)/texinfo."
-	@echo "Run \`make' in that directory to run these through makeinfo" \
-	      "(use \`make info' here to do that automatically)."
-
-info:
-	$(SPHINXBUILD) -b texinfo $(ALLSPHINXOPTS) $(BUILDDIR)/texinfo
-	@echo "Running Texinfo files through makeinfo..."
-	make -C $(BUILDDIR)/texinfo info
-	@echo "makeinfo finished; the Info files are in $(BUILDDIR)/texinfo."
-
-gettext:
-	$(SPHINXBUILD) -b gettext $(I18NSPHINXOPTS) $(BUILDDIR)/locale
-	@echo
-	@echo "Build finished. The message catalogs are in $(BUILDDIR)/locale."
-
-changes:
-	$(SPHINXBUILD) -b changes $(ALLSPHINXOPTS) $(BUILDDIR)/changes
-	@echo
-	@echo "The overview file is in $(BUILDDIR)/changes."
-
-linkcheck:
-	$(SPHINXBUILD) -b linkcheck $(ALLSPHINXOPTS) $(BUILDDIR)/linkcheck
-	@echo
-	@echo "Link check complete; look for any errors in the above output " \
-	      "or in $(BUILDDIR)/linkcheck/output.txt."
-
-doctest:
-	$(SPHINXBUILD) -b doctest $(ALLSPHINXOPTS) $(BUILDDIR)/doctest
-	@echo "Testing of doctests in the sources finished, look at the " \
-	      "results in $(BUILDDIR)/doctest/output.txt."
-
-xml:
-	$(SPHINXBUILD) -b xml $(ALLSPHINXOPTS) $(BUILDDIR)/xml
-	@echo
-	@echo "Build finished. The XML files are in $(BUILDDIR)/xml."
-
-pseudoxml:
-	$(SPHINXBUILD) -b pseudoxml $(ALLSPHINXOPTS) $(BUILDDIR)/pseudoxml
-	@echo
-	@echo "Build finished. The pseudo-XML files are in $(BUILDDIR)/pseudoxml."
\ No newline at end of file
diff --git a/docs/README b/docs/README
deleted file mode 100644
index e2b5b30..0000000
--- a/docs/README
+++ /dev/null
@@ -1,14 +0,0 @@
-To build the java-library docs, install ``sphinx`` and ``javasphinx``::
-
-   pip install -r requirements.txt
-
-Then build the javadoc data::
-
-   javasphinx-apidoc -o . ../src/main/java/com/urbanairship/api/
-
-And then finally build the HTML docs::
-
-   make html
-
-The theme is in a private submodule; if you don't have access to this, remove
-the ``html_theme`` directive from ``conf.py``.
diff --git a/docs/_themes/urbanairship b/docs/_themes/urbanairship
deleted file mode 160000
index 3e5fcde..0000000
--- a/docs/_themes/urbanairship
+++ /dev/null
@@ -1 +0,0 @@
-Subproject commit 3e5fcde1ded7147de40a42783705b876a2bf7d1a
diff --git a/docs/channels.rst b/docs/channels.rst
deleted file mode 100644
index c7d89f7..0000000
--- a/docs/channels.rst
+++ /dev/null
@@ -1,81 +0,0 @@
-########
-Channels
-########
-
-
-**************
-Lookup Channel
-**************
-
-To lookup a specific channel, use the ``ChannelRequest.newRequest("<channel_id>")`` method:
-
-.. sourcecode:: java
-
-   ChannelRequest request = ChannelRequest.newRequest("channel_id_123");
-   Response<ChannelResponse> response = client.execute(request);
-   ChannelView channel = response.getBody().get().getChannelView().get();
-
-   // The channel ID
-   String channelId = channel.getChannelId();
-   // The channel type -- one of IOS, ANDROID, or ADM
-   ChannelType channelType = channel.getChannelType();
-   // Whether the channel is installed or not
-   boolean installed = channel.isInstalled();
-   // Whether the channel is opted in to push or not
-   boolean optedIn = channel.isOptIn();
-   // Whether background push is enabled on the device
-   Optional<Boolean> background = channel.getBackground();
-   // The push address associated with the channel
-   Optional<String> pushAddress = channel.getPushAddress();
-   // When the channel was created
-   DateTime created = channel.getCreated();
-   // The date at which the channel was last registered
-   DateTime lastRegistration = channel.getLastRegistration();
-   // The alias (potentially) associated with the channel
-   Optional<String> alias = channel.getAlias();
-   // The tags associated with the channel
-   ImmutableSet<String> tags = channel.getTags();
-   // The tag groups associated with the channl
-   ImmutableMap<String, ImmutableSet<String>> tagGroups = channel.getTagGroups();
-   // An IosSettings object
-   Optional<IosSettings> iosSettings = channel.getIosSettings();
-
-
-*************
-List Channels
-*************
-
-To list all channels, use the ``ChannelRequest.newRequest()`` method:
-
-.. sourcecode:: java
-
-   ChannelRequest request = ChannelRequest.newRequest();
-   Response<ChannelResponse> response = client.execute(request);
-   ImmutableList<ChannelView> channels = response.getBody().get().getChannelView().get();
-
-
-************
-Channel Tags
-************
-
-To add tags use the ``ChannelTagRequest`` class. In the following example, we add the tags
-*loyalty*, *platinum*, and *sports*, and remove the tags *gold* and *news*:
-
-.. sourcecode:: java
-
-   Set<String> add = new HashSet<String>();
-   tags.add("loyalty");
-   tags.add("platinum");
-   tags.add("sports");
-
-   Set<String> remove = new HashSet<String>();
-   tags.add("gold");
-   tags.add("news");
-
-   ChannelTagRequest request = ChannelTagRequest.newRequest()
-       .addIOSChannels("56071f7c-921f-4981-9568-b5f7cef427cd", "a74897b2-3ff3-4741-8b69-1d739fc3830f")
-       .addAndroidChannel("ecf68576-c7ac-48cc-9aaa-94b63e6dccda")
-       .addTags(add)
-       .removeTags(remove);
-
-   Response<String> response = client.execute(request);
diff --git a/docs/client.rst b/docs/client.rst
deleted file mode 100644
index 560091a..0000000
--- a/docs/client.rst
+++ /dev/null
@@ -1,225 +0,0 @@
-############################
-The UrbanAirshipClient Class
-############################
-
-The ``UrbanAirshipClient`` class handles requests to the Urban Airship Engage API. This
-document covers the various configuration options, along with different methods for
-executing requests within the client.
-
-
-*************
-Configuration
-*************
-
-As shown in the :doc:`Getting Started Guide <getting-started>`, the minimum-viable
-``UrbanAirshipClient`` client configuration requires an app key and a master secret:
-
-.. code-block:: java
-
-   UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
-       .setKey("your-app-key-here")
-       .setSecret("your-app-secret-here")
-       .build();
-
-In the following sections, we'll explore some of the additional client configuration
-options available.
-
-
-Client With Proxy
-=================
-
-Optionally, a client can be created with proxy server support:
-
-.. code-block:: java
-
-   ProxyInfo proxy = ProxyInfo.newBuilder()
-       .setHost("proxy.host.com")
-       .setProtocol(ProxyInfo.ProxyInfoProtocol.HTTPS)
-       .setPrincipal("user")
-       .setPassword("password123")
-       .setPort(8080)
-       .build();
-
-   UrbanAirshipClient proxyClient = UrbanAirshipClient.newBuilder()
-       .setKey(appKey)
-       .setSecret(appSecret)
-       .setProxyInfo(proxy)
-       .build();
-
-
-Client With HTTP Parameter Settings
-===================================
-
-A client can also be created with the option to set any of the HTTP parameters configurable through the `Async HTTP client
-<https://asynchttpclient.github.io/async-http-client/apidocs/com/ning/http/client/AsyncHttpClientConfig.Builder.html>`__,
-such as the protocol and connection parameters, by passing in a ``AsyncHttpClientConfig.Builder``.
-In the example below, the socket and connection timeouts are set to be 10ms and 20ms,
-respectively, thus overriding their default settings as infinite timeouts.
-
-.. code-block:: java
-
-   AsyncHttpClientConfig.Builder configBuilder = new AsyncHttpClientConfig.Builder()
-       .setConnectTimeout(20)
-       .setWebSocketTimeout(10);
-
-   UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
-       .setKey("key")
-       .setSecret("secret")
-       .setClientConfigBuilder(configBuilder)
-       .build();
-
-
-Client with Custom Retry Logic
-==============================
-
-You may optionally specify a custom retry predicate. This predicate dictates how the
-client responds to failure, i.e., when should the client retry a failed request. The default
-retry predicate will retry all requests that return responses with status codes of 500 or higher,
-assuming they are not ``POST`` requests. We avoid retrying ``POST`` requests in order to
-prevent duplicates (e.g., retrying a push request may result in duplicate pushes). Requests are retried
-a maximum of 10 times, with an exponentially-increasing backoff period between each attempt.
-
-In the example below, we create a custom predicate that will retry all requests that return
-responses with status codes of 500 or greater. Unlike the default retry predicated, this predicate
-will retry ``POST`` requests:
-
-.. sourcecode:: java
-
-   Predicate<FilterContext> retryPredicate = new Predicate<FilterContext>() {
-      @Override
-      public boolean apply(FilterContext filterContext) {
-         return input.getResponseStatus().getStatusCode() >= 500;
-      }
-   };
-
-We now configure an ``UrbanAirshipClient`` to use the above ``retryPredicate``. We also increase the
-max number of retry attempts from ``10`` to ``20``:
-
-.. sourcecode:: java
-
-   UrbanAirshipClient retryClient = UrbanAirshipClient.newBuilder()
-       .setKey(appKey)
-       .setSecret(appSecret)
-       .setRetryPredicate(retryPredicate)
-       .setMaxRetries(20)
-       .build();
-
-
-******************
-Executing Requests
-******************
-
-Once you have a client configured and some sort of request created, the ``UrbanAirshipClient``
-class supports four different modes of request execution::
-
-   execute(Request<T> request)
-   execute(Request<T> request, ResponseCallback callback)
-   executeAsync(Request<T> request)
-   executeAsync(Request<T> request, ResponseCallback callback)
-
-There are two methods, ``execute`` and ``executeAsync``, and each method supports an optional
-callback argument. The simplest method of making a request is to use ``execute`` with no
-callback specified:
-
-.. sourcecode:: java
-
-   // Make a request -- assumes ``client`` and ``request`` are already specified, and
-   // ``request`` is a push request.
-   Response<PushResponse> response = client.execute(request);
-
-Below, we'll cover how to use async requests and how to specify callbacks.
-
-
-Making Async Requests
-=====================
-
-Use the ``executeAsync(..)`` method to initiate a non-blocking call to the Urban Airship API.
-
-.. sourcecode:: java
-
-   // Non-blocking request
-   Future<Response> futureResponse = client.executeAsync(request);
-
-   // Do other stuff...
-
-   // Retrieve your response after doing stuff.
-   Response<PushResponse> response = futureResponse.get();
-
-
-Response Callbacks
-==================
-
-Both the ``execute`` and ``executeAsync`` methods accept an optional ``ResponseCallback`` argument.
-Below, we define a callback that executes the ``doSomething(...)`` function once a request completes,
-and the ``doSomethingElse(...)`` function if the request fails:
-
-.. sourcecode:: java
-
-   ResponseCallback callback = new ResponseCallback() {
-       @Override
-       public void completed(Response response) {
-           // Logic specifying what to do upon request completion.
-           doSomething(response)
-       }
-
-       @Override
-       public void error(Throwable throwable) {
-           // Logic specifying what to do if the request fails.
-           doSomethingElse(throwable)
-       }
-   };
-
-We can use this callback with either ``execute`` or ``executeAsync``:
-
-**Example (executeAsync)**
-
-.. sourcecode:: java
-
-   // Start the request execution. Once the request has completed (or thrown an error),
-   // the appropriate callback function will be triggered. ``executeAsync`` is non-blocking,
-   // so you can do other stuff while you wait for the callback to get triggered.
-   Future<Response> response = client.executeAsync(request, callback)
-
-   // Do other stuff...
-
-**Example (execute)**
-
-.. sourcecode:: java
-
-   // Start the request execution . Once the request has completed (or thrown an error),
-   // the appropriate callback function will be triggered. ``execute`` is blocking, so
-   // you must wait for the request to complete (or fail), after which the callback is triggered
-   // and the Response<..> is returned.
-   Response<PushResponse> response = client.execute(request, callback)
-
-
-Exceptions
-==========
-
-The client will throw different exceptions depending on mode of execution. If you are
-not using a callback, all exceptions present as RuntimeExceptions. If you choose to use a
-callback, you can customize the ``error`` method to distinguish between ClientExceptions
-(4xx responses), ServerExceptions (5xx responses), and any other potential failures.
-
-**Example**
-
-.. sourcecode:: java
-
-   ResponseCallback callback = new ResponseCallback() {
-       @Override
-       public void completed(Response response) {
-           // Logic specifying what to do upon request completion.
-           doSomething(response)
-       }
-
-       @Override
-       public void error(Throwable throwable) {
-           if (throwable instanceof ClientException) {
-               // Handle a 4xx response
-           } else if (throwable instance of ServerException)
-               // Handle a 5xx response
-           } else {
-               // Handle any other failure
-           }
-       }
-   };
diff --git a/docs/conf.py b/docs/conf.py
deleted file mode 100644
index c491888..0000000
--- a/docs/conf.py
+++ /dev/null
@@ -1,253 +0,0 @@
-# -*- coding: utf-8 -*-
-#
-# Copyright 2013-2014 Urban Airship
-# Urban Airship Java Client documentation build configuration file, created by
-# sphinx-quickstart on Tue Jul 16 12:21:44 2013.
-#
-# This file is execfile()d with the current directory set to its containing dir.
-#
-# Note that not all possible configuration values are present in this
-# autogenerated file.
-#
-# All configuration values have a default; values that are commented out
-# serve to show the default.
-
-import sys, os
-
-# If extensions (or modules to document with autodoc) are in another directory,
-# add these directories to sys.path here. If the directory is relative to the
-# documentation root, use os.path.abspath to make it absolute, like shown here.
-#sys.path.insert(0, os.path.abspath('../env'))
-
-# -- General configuration -----------------------------------------------------
-
-# If your documentation needs a minimal Sphinx version, state it here.
-#needs_sphinx = '1.0'
-
-# Add any Sphinx extension module names here, as strings. They can be extensions
-# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
-extensions = []
-
-# Add any paths that contain templates here, relative to this directory.
-templates_path = ['_templates']
-
-# The suffix of source filenames.
-source_suffix = '.rst'
-
-# The encoding of source files.
-#source_encoding = 'utf-8-sig'
-
-# The master toctree document.
-master_doc = 'index'
-
-# General information about the project.
-project = u'Urban Airship Java Client'
-copyright = u'2013, Urban Airship'
-
-# The version info for the project you're documenting, acts as replacement for
-# |version| and |release|, also used in various other places throughout the
-# built documents.
-
-# The full version, including alpha/beta/rc tags.
-release = open('../VERSION.txt', 'r').read().strip()
-#
-# The short X.Y version.
-import re
-version = re.match('\d\.\d', release).group()
-
-# The language for content autogenerated by Sphinx. Refer to documentation
-# for a list of supported languages.
-#language = None
-
-# There are two options for replacing |today|: either, you set today to some
-# non-false value, then it is used:
-#today = ''
-# Else, today_fmt is used as the format for a strftime call.
-#today_fmt = '%B %d, %Y'
-
-# List of patterns, relative to source directory, that match files and
-# directories to ignore when looking for source files.
-exclude_patterns = ['_build', 'env']
-
-# The reST default role (used for this markup: `text`) to use for all documents.
-#default_role = None
-
-# If true, '()' will be appended to :func: etc. cross-reference text.
-#add_function_parentheses = True
-
-# If true, the current module name will be prepended to all description
-# unit titles (such as .. function::).
-#add_module_names = True
-
-# If true, sectionauthor and moduleauthor directives will be shown in the
-# output. They are ignored by default.
-#show_authors = False
-
-# The name of the Pygments (syntax highlighting) style to use.
-pygments_style = 'sphinx'
-
-# A list of ignored prefixes for module index sorting.
-#modindex_common_prefix = []
-
-# If true, keep warnings as "system message" paragraphs in the built documents.
-#keep_warnings = False
-
-
-# -- Options for HTML output ---------------------------------------------------
-
-# The theme to use for HTML and HTML Help pages.  See the documentation for
-# a list of builtin themes.
-html_theme = 'urbanairship'
-
-# Theme options are theme-specific and customize the look and feel of a theme
-# further.  For a list of options available for each theme, see the
-# documentation.
-#html_theme_options = {}
-
-# Add any paths that contain custom themes here, relative to this
-# directory.
-sys.path.append(os.path.abspath('_themes'))
-html_theme_path = ['_themes']
-
-# The name for this set of Sphinx documents.  If None, it defaults to
-# "<project> v<release> documentation".
-#html_title = None
-
-# A shorter title for the navigation bar.  Default is the same as html_title.
-#html_short_title = None
-
-# The name of an image file (relative to this directory) to place at the top
-# of the sidebar.
-#html_logo = None
-
-# The name of an image file (within the static path) to use as favicon of the
-# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
-# pixels large.
-#html_favicon = None
-
-# Add any paths that contain custom static files (such as style sheets) here,
-# relative to this directory. They are copied after the builtin static files,
-# so a file named "default.css" will overwrite the builtin "default.css".
-html_static_path = ['_static']
-
-# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
-# using the given strftime format.
-#html_last_updated_fmt = '%b %d, %Y'
-
-# If true, SmartyPants will be used to convert quotes and dashes to
-# typographically correct entities.
-#html_use_smartypants = True
-
-# Custom sidebar templates, maps document names to template names.
-#html_sidebars = {}
-
-# Additional templates that should be rendered to pages, maps page names to
-# template names.
-#html_additional_pages = {}
-
-# If false, no module index is generated.
-#html_domain_indices = True
-
-# If false, no index is generated.
-#html_use_index = True
-
-# If true, the index is split into individual pages for each letter.
-#html_split_index = False
-
-# If true, links to the reST sources are added to the pages.
-#html_show_sourcelink = True
-
-# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
-#html_show_sphinx = True
-
-# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
-#html_show_copyright = True
-
-# If true, an OpenSearch description file will be output, and all pages will
-# contain a <link> tag referring to it.  The value of this option must be the
-# base URL from which the finished HTML is served.
-#html_use_opensearch = ''
-
-# This is the file name suffix for HTML files (e.g. ".xhtml").
-#html_file_suffix = None
-
-# Output file base name for HTML help builder.
-htmlhelp_basename = 'UrbanAirshipJavaClientdoc'
-
-
-# -- Options for LaTeX output --------------------------------------------------
-
-latex_elements = {
-    # The paper size ('letterpaper' or 'a4paper').
-    #'papersize': 'letterpaper',
-
-    # The font size ('10pt', '11pt' or '12pt').
-    #'pointsize': '10pt',
-
-    # Additional stuff for the LaTeX preamble.
-    #'preamble': '',
-}
-
-# Grouping the document tree into LaTeX files. List of tuples
-# (source start file, target name, title, author, documentclass [howto/manual]).
-latex_documents = [
-    ('index', 'UrbanAirshipJavaClient.tex', u'Urban Airship Java Client Documentation',
-     u'Urban Airship', 'manual'),
-    ]
-
-# The name of an image file (relative to this directory) to place at the top of
-# the title page.
-#latex_logo = None
-
-# For "manual" documents, if this is true, then toplevel headings are parts,
-# not chapters.
-#latex_use_parts = False
-
-# If true, show page references after internal links.
-#latex_show_pagerefs = False
-
-# If true, show URL addresses after external links.
-#latex_show_urls = False
-
-# Documents to append as an appendix to all manuals.
-#latex_appendices = []
-
-# If false, no module index is generated.
-#latex_domain_indices = True
-
-
-# -- Options for manual page output --------------------------------------------
-
-# One entry per manual page. List of tuples
-# (source start file, name, description, authors, manual section).
-man_pages = [
-    ('index', 'urbanairshipjavaclient', u'Urban Airship Java Client Documentation',
-     [u'Urban Airship'], 1)
-]
-
-# If true, show URL addresses after external links.
-#man_show_urls = False
-
-
-# -- Options for Texinfo output ------------------------------------------------
-
-# Grouping the document tree into Texinfo files. List of tuples
-# (source start file, target name, title, author,
-#  dir menu entry, description, category)
-texinfo_documents = [
-    ('index', 'UrbanAirshipJavaClient', u'Urban Airship Java Client Documentation',
-     u'Urban Airship', 'UrbanAirshipJavaClient', 'One line description of project.',
-     'Miscellaneous'),
-    ]
-
-# Documents to append as an appendix to all manuals.
-#texinfo_appendices = []
-
-# If false, no module index is generated.
-#texinfo_domain_indices = True
-
-# How to display URL addresses: 'footnote', 'no', or 'inline'.
-#texinfo_show_urls = 'footnote'
-
-# If true, do not generate a @detailmenu in the "Top" node's menu.
-#texinfo_no_detailmenu = # Javadoc and Javasphinx
diff --git a/docs/getting-started.rst b/docs/getting-started.rst
deleted file mode 100644
index 37bf948..0000000
--- a/docs/getting-started.rst
+++ /dev/null
@@ -1,118 +0,0 @@
-###############
-Getting Started
-###############
-
-The basic workflow for making requests via the Java Library is as follows:
-
-#. Configure an UrbanAirshipClient to authenticate, send, and return a response.
-#. Configure a request to one of the Engage API :ref:`endpoints`.
-#. Pass the request to the client, and handle the response or exception appropriately.
-
-We will walk through each step for sending a push notification. If you are already
-familiar with the Java Library, feel free to skip to the :ref:`endpoint reference
-<endpoints>`.
-
-
-***************************************
-Step 1: Configure an UrbanAirshipClient
-***************************************
-
-The ``UrbanAirshipClient`` handles the interaction between the client and the API. The
-client will throw an exception if there is an issue with the request, or if it is improperly
-configured.
-
-The following is the minimum-viable ``UrbanAirshipClient`` configuration:
-
-.. code-block:: java
-
-   UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
-       .setKey("your-app-key-here")
-       .setSecret("your-app-secret-here")
-       .build();
-
-
-************************
-Step 2: Create a Request
-************************
-
-Next, you are going to create a request. To see the full list of request types, please
-see the :ref:`endpoint reference <endpoints>`. In the example below, we are going to
-create a request to the push API:
-
-.. sourcecode:: java
-
-   PushPayload payload = PushPayload.newBuilder()
-       .setAudience(Selectors.all())
-       .setNotification(Notifications.alert("Here's a push!"))
-       .setDeviceType(DeviceTypeData.of(DeviceType.IOS))
-       .build();
-
-   PushRequest request = PushRequest.newRequest(payload);
-
-
-**********************************************
-Step 3: Send the Request and Handle Exceptions
-**********************************************
-
-Once you have created a request, you pass it to be executed in the client created in step 1:
-
-.. sourcecode:: java
-
-   Response<PushResponse> response = null;
-   try {
-       response = client.execute(request);
-       logger.debug(String.format("Response %s", response.toString()));
-   } catch (IOException e) {
-       logger.error("IOException in API request " + e.getMessage());
-   }
-
-
-*****************************
-Complete Example Push Request
-*****************************
-
-Here is a complete example of sending a simple push notification:
-
-.. code-block:: java
-
-   // Import some things
-   import com.urbanairship.api.client.*;
-   import com.urbanairship.api.push.model.DeviceType;
-   import com.urbanairship.api.push.model.DeviceTypeData;
-   import com.urbanairship.api.push.model.PushPayload;
-   import com.urbanairship.api.push.model.audience.Selectors;
-   import com.urbanairship.api.push.model.notification.Notifications;
-
-   public void sendPush() {
-
-       String appKey = "applicationKey";
-       String appSecret = "applicationMasterSecret";
-
-       // Step 1: Build and configure an APIClient.
-       UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
-               .setKey(appKey)
-               .setSecret(appSecret)
-               .build();
-
-       // Step 2: Setup a payload for the message you want to send, and create the
-       // push request.
-       PushPayload payload = PushPayload.newBuilder()
-           .setAudience(Selectors.all())
-           .setNotification(Notifications.alert("Here's a push!"))
-           .setDeviceType(DeviceTypeData.of(DeviceType.IOS))
-           .build();
-
-       PushRequest request = PushRequest.newRequest(payload);
-
-       // Step 3: Use the client to execute the request, and try/catch for any issues, any
-       // non-200 response, or non-library-related exceptions.
-       try {
-           Response<PushResponse> response = client.execute(request);
-           logger.debug(String.format("Response %s", response.toString()));
-       } catch (IOException e) {
-           logger.error("IOException in API request " + e.getMessage());
-       }
-
-       // Cleanup: Close the HTTP client's thread pool.
-       client.close()
-   }
diff --git a/docs/index.rst b/docs/index.rst
deleted file mode 100644
index 268e28a..0000000
--- a/docs/index.rst
+++ /dev/null
@@ -1,114 +0,0 @@
-##########################
-Urban Airship Java Library
-##########################
-
-The Urban Airship Java Library provides a set of Java classes and methods for interacting with
-the `Engage API <https://docs.urbanairship.com/api/ua.html>`__.
-
-
-************
-Installation
-************
-
-Manual Installation
-===================
-
-Clone the `Java Library <https://github.com/urbanairship/java-library>`__ repo, and run::
-
-   mvn package
-
-to build the jar. Add the jar, located at a path similar to::
-
-   target/java-client-<version>.jar
-
-If you would like a copy of the javadocs, use::
-
-   mvn javadoc:javadoc
-
-
-Maven Installation
-==================
-
-Add the following to your pom.xml:
-
-.. sourcecode:: xml
-
-    <!-- Urban Airship Library Dependency-->
-    <dependency>
-        <groupId>com.urbanairship</groupId>
-        <artifactId>java-client</artifactId>
-        <version>1.0.0</version>
-    </dependency>
-
-
-*******
-Logging
-*******
-
-Logging is done using the `Simple Logging Facade for Java <http://www.slf4j.org>`_.
-Using the logging facade allows for flexibility in logging choices. For example,
-to use log4j, you would add the following to your ``pom.xml``:
-
-.. code-block:: xml
-
-   <dependency>
-     <groupId>org.slf4j</groupId>
-     <artifactId>slf4j-log4j12</artifactId>
-     <version>1.7.5</version>
-   </dependency>
-
-   <dependency>
-     <groupId>log4j</groupId>
-     <artifactId>log4j</artifactId>
-     <version>1.2.17</version>
-   </dependency>
-
-Note the logging framework plus the adapter. For more info, see the `Simple Logging Facade
-documentation <http://www.slf4j.org/manual.html>`__. Simply add the log handler of your choice.
-Again, with log4j:
-
-.. code-block:: java
-
-   import org.slf4j.Logger;
-   import org.slf4j.LoggerFactory;
-   import org.apache.log4j.BasicConfigurator;
-
-   Logger logger = LoggerFactory.getLogger("identifier");
-   // Use any configuration you need.
-   BasicConfigurator.configure();
-   logger.debug("Log all the things!");
-
-
-********
-Contents
-********
-
-.. _introduction:
-
-Introduction
-============
-
-.. toctree::
-   :maxdepth: 1
-
-   getting-started
-   client
-
-
-.. _endpoints:
-
-Endpoint Reference
-==================
-
-.. toctree::
-   :maxdepth: 1
-
-   push
-   channels
-   segments
-   schedules
-   reports
-   named-user
-   static-lists
-   location
-   templates
diff --git a/docs/location.rst b/docs/location.rst
deleted file mode 100644
index 4da108e..0000000
--- a/docs/location.rst
+++ /dev/null
@@ -1,55 +0,0 @@
-########
-Location
-########
-
-
-*****************************
-Location Boundary Information
-*****************************
-
-Use the ``LocationRequest`` class to retrieve location boundary information.
-
-**Example: Name Lookup**
-
-.. sourcecode:: java
-
-   LocationRequest request = LocationRequest.newRequest("Chicago")
-       .setType("city");
-   Response<LocationResponse> response = client.execute(request);
-
-
-**Example: Lat/Long Lookup**
-
-.. sourcecode:: java
-
-   Point point = Point.newBuilder()
-       .setLatitude(41.8781)
-       .setLongitude(87.6298)
-       .build();
-
-   LocationRequest request = LocationRequest.newRequest(point)
-       .setType("city");
-   Response<LocationResponse> response = client.execute(request);
-
-**Example: Bounding Box Lookup**
-
-.. sourcecode:: java
-
-   Point cornerOne = Point.newBuilder()
-       .setLatitude(41.8781)
-       .setLongitude(87.6298)
-       .build();
-
-   Point cornerTwo = Point.newBuilder()
-       .setLatitude(42.8781)
-       .setLongitude(88.6298)
-       .build();
-
-   BoundedBox box = BoundedBox.newBuilder()
-       .setCornerOne(cornerOne)
-       .setCornerTwo(cornerTwo)
-       .build();
-
-   LocationRequest request = LocationRequest.newRequest(box)
-       .setType("province");
-   Response<LocationResponse> response = client.execute(request);
diff --git a/docs/named-user.rst b/docs/named-user.rst
deleted file mode 100644
index 052af07..0000000
--- a/docs/named-user.rst
+++ /dev/null
@@ -1,124 +0,0 @@
-###########
-Named Users
-###########
-
-
-********************
-Associate Named User
-********************
-
-To associate channels to a Named User, use the ``NamedUserRequest`` class:
-
-.. sourcecode:: java
-
-   NamedUserRequest request = NamedUserRequest.newAssociateRequest()
-           .setChannel("ee4b5101-164c-485c-ad91-68b1d3d753cc", ChannelType.IOS)
-           .setChannel("0ab7d6f0-0f61-4963-afe0-5ef53735b00d", ChannelType.ANDROID)
-           .setNamedUserId("id-1234");
-
-   Response<String> response = client.execute(request);
-
-
-***********************
-Disassociate Named User
-***********************
-
-To disassociate channels from a Named User, use the ``NamedUserRequest`` class:
-
-.. sourcecode:: java
-
-   NamedUserRequest request = NamedUserRequest.newDisassociateRequest()
-           .setChannel("ee4b5101-164c-485c-ad91-68b1d3d753cc", ChannelType.IOS)
-           .setChannel("0ab7d6f0-0f61-4963-afe0-5ef53735b00d", ChannelType.ANDROID);
-
-   Response<String> response = client.execute(request);
-
-
-*****************
-Lookup Named User
-*****************
-
-To lookup a named user, use the ``NamedUserListRequest.newRequest("<named_user_id>")`` method:
-
-.. sourcecode:: java
-
-   NamedUserListingRequest request = NamedUserListingRequest.newRequest("id-1234");
-   Response<NamedUserListingResponse> response = client.execute(request);
-   NamedUserView namedUser = response.getBody().get().getNamedUserView().get();
-
-   // The named user ID
-   String namedUserId = namedUser.getNamedUserId();
-   // Map of tag groups and the associated sets of tags
-   ImmutableMap<String, ImmutableSet<String>> namedUserTags = namedUser.getNamedUserTags();
-   // All channel objects associated with the named user
-   ImmutableSet<ChannelView> channelViews = namedUser.getChannelViews();
-
-
-****************
-List Named Users
-****************
-
-To lookup a named user, use the ``NamedUserListRequest.newRequest()`` method:
-
-.. sourcecode:: java
-
-   NamedUserListingRequest request = NamedUserListingRequest.newRequest();
-   Response<NamedUserListingResponse> response = client.execute(request);
-   ImmutableList<NamedUserView> namedUsers = response.getBody().get().getNamedUserViews().get();
-
-
-***************
-Named User Tags
-***************
-
-To execute tag operations on a named user, use the ``NamedUserTagRequest`` class.
-
-**Example: Add Tags**
-
-The ``addTags("<tag_group>", <tag_set>)`` method is used for adding tags:
-
-.. sourcecode:: java
-
-   Set<String> tags = new HashSet<String>();
-   tags.add("loyalty");
-   tags.add("platinum");
-   tags.add("sports");
-
-   NamedUserTagRequest request = NamedUserTagRequest.newRequest()
-           .addNamedUsers("user-1", "user-2", "user-3")
-           .addTags("device", tags);
-   Response<String> response = client.execute(request);
-
-
-**Example: Remove Tags**
-
-The ``removeTags("<tag_group>", <tag_set>)`` method is used for removing tags:
-
-.. sourcecode:: java
-
-   Set<String> tags = new HashSet<String>();
-   tags.add("loyalty");
-   tags.add("platinum");
-   tags.add("sports");
-
-   NamedUserTagRequest request = NamedUserTagRequest.newRequest()
-           .addNamedUsers("user-1", "user-2", "user-3")
-           .removeTags("device", tags);
-   Response<String> response = client.execute(request);
-
-**Example: Set Tags**
-
-The ``setTags("<tag_group>", <tag_set>)`` method is used to wipe the current set of tags
-on the device with the provided set:
-
-.. sourcecode:: java
-
-   Set<String> tags = new HashSet<String>();
-   tags.add("loyalty");
-   tags.add("platinum");
-   tags.add("sports");
-
-   NamedUserTagRequest request = NamedUserTagRequest.newRequest()
-           .addNamedUsers("user-1", "user-2", "user-3")
-           .setTags("device", tags);
-   Response<String> response = client.execute(request);
diff --git a/docs/push.rst b/docs/push.rst
deleted file mode 100644
index dd6c7cc..0000000
--- a/docs/push.rst
+++ /dev/null
@@ -1,406 +0,0 @@
-#######################################
-Defining and Sending Push Notifications
-#######################################
-
-
-*************************
-Defining the Push Payload
-*************************
-
-The ``PushPayload`` is comprised of three pieces:
-
-- ``Audience and Selectors``
-- ``Notifications``
-- ``DeviceTypes``
-
-The first is the Audience. The audience is composed of Selectors, which can be compound or
-atomic (not compound). Selectors provide logical combinations of AND, OR, and NOT.
-
-
-Audience and Selectors
-======================
-
-The Selectors and DeviceType classes provide factory methods that can be used together
-to create an Audience Selector. To send to all users with the tag "kittens".
-
-.. code-block:: java
-
-     Selectors.tag("kittens")
-
-Or to users with the tag "kittens" in your "crm" tag group
-
- .. code-block:: java
-
-     Selectors.tagWithGroup("kittens", "crm")
-
-You can also send to multiple tags, such as "kittens" and "puppies"
-
-.. code-block:: java
-
-    Selectors.tags("kittens", "puppies")
-
-More complex logic is possible:
-
-.. code-block:: java
-
-   Selector andSelector = Selectors.and(Selectors.tag("puppies"), Selectors.tag("kittens"));
-   Selector notSelector = Selectors.not(Selectors.tag("fish"));
-   Selector compound = Selectors.or(andSelector, notSelector);
-
-The ``compound`` selector above produces the following payload:
-
-.. code-block:: json
-
-   {
-     "audience": {
-       "or": [
-         {
-           "and": [
-             {"tag": "puppies"},
-             {"tag": "kittens"}
-           ]
-         },
-         {
-           "not": [
-             {"tag": "fish"}
-           ]
-         }
-       ]
-     }
-   }
-
-which will send messages to users who either have the tags "puppies" and
-"kittens" or don't have the tag "fish".
-
-
-Notifications
-=============
-
-Notifications are the second part of the ``PushPayload``. Notifications are configured for each
-type of device you would like to send a message to. A Notification for an iOS device contains
-options for ``alert``, ``badge``, ``sound``, ``content_available``, ``extra``, ``expiry``,
-``priority``, ``category``, or ``interactive``. Other platforms, e.g., Android, may offer
-different configurations based on available features.
-
-Here's an example of an iOS notification with an alert, a badge, and an extra key/value pair:
-
-.. code-block:: java
-
-   // Set up badge data, which can be a value, increment, decrement, etc.
-   IOSBadgeData badgeData = IOSBadgeData.newBuilder()
-       .setValue(5)
-       .setType(IOSBadgeData.Type.VALUE)
-       .build();
-
-   IOSDevicePayload iosPayload = IOSDevicePayload.newBuilder()
-       .setAlert("iOS Alert")
-       .setBadge(badgeData)
-       .addExtraEntry("Key", "Value")
-       .build();
-
-   Notification notification = Notifications.notification(iosPayload);
-
-   PushPayload payload = PushPayload.newBuilder()
-       .setAudience(Selectors.all())
-       .setNotification(notification)
-       .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS))
-       .build();
-
-This will generate and send a payload similar to the following:
-
-.. code-block:: json
-
-   {
-     "audience": "all",
-     "device_types": ["ios"],
-     "notification": {
-       "ios": {
-         "alert": "iOS Alert",
-         "badge": 5,
-         "extra": {
-           "Key": "Value"
-         }
-       }
-     }
-   }
-
-Here's another example of an iOS notification implementing expiry and interactive notifications:
-
-.. code-block:: java
-
-    PushExpiry expiry = PushExpiry.newBuilder()
-        .setExpirySeconds(3600)
-        .build();
-
-    Interactive interactive = Interactive.newBuilder()
-        .setType("ua_yes_no_foreground")
-        .setButtonActions(ImmutableMap.of(
-            "yes",
-            Actions.newBuilder()
-                .addTags(new AddTagAction(TagActionData.single("tag1")))
-                .build(),
-            "no",
-            Actions.newBuilder()
-                .addTags(new AddTagAction(TagActionData.single("tag2")))
-                .build()))
-        .build();
-
-    IOSDevicePayload iosPayload = IOSDevicePayload.newBuilder()
-        .setAlert("alert")
-        .setExpiry(expiry)
-        .setInteractive(interactive)
-        .build();
-
-    PushPayload payload = PushPayload.newBuilder()
-        .setAudience(Selectors.iosChannel(channel))
-        .setNotification(Notifications.notification(iosPayload))
-        .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS))
-        .build();
-
-Which will generate the following JSON payload:
-
-.. code-block:: json
-
-  {
-      "audience": {
-          "ios_channel": "50614f67-498b-49df-b832-a046de0ec6ec"
-      },
-      "device_types": [
-          "ios"
-      ],
-      "notification": {
-          "ios": {
-              "alert": "alert",
-              "expiry" :3600,
-              "interactive": {
-                  "type": "ua_yes_no_foreground",
-                  "button_actions": {
-                      "yes": {
-                          "add_tag": "tag1"
-                      },
-                      "no": {
-                          "add_tag": "tag2"
-                      }
-                  }
-              }
-          }
-      }
-  }
-
-Here's an example of an iOS notification utilizing rich media (iOS 10+):
-
-.. code-block:: java
-
-    Crop crop = Crop.newBuilder()
-            .setHeight(0.2f)
-            .setWidth(0.2f)
-            .setX(0.1f)
-            .setY(0.1f)
-            .build();
-
-    Options options = Options.newBuilder()
-            .setTime(10)
-            .setCrop(crop)
-            .build();
-
-    Content content = Content.newBuilder()
-            .setTitle("Kitten Alert!")
-            .setSubtitle("from Kittens Ahoy")
-            .setBody("Have you ever seen a kitten this cute?")
-            //These lines will only appear if the media attachment succeeds.
-            .build();
-
-    MediaAttachment mediaAttachment = MediaAttachment.newBuilder()
-            .setUrl("https://media.giphy.com/media/JYsWwF82EGnpC/giphy.gif")
-            .setOptions(options)
-            .setContent(content)
-            .build();
-
-    IOSDevicePayload iosPayload = IOSDevicePayload.newBuilder()
-            .setTitle("Kitten Alert!")
-            .setSubtitle("from Kittens Ahoy")
-            .setAlert("New Kitten Pics await you in Kittens Ahoy")
-            //These lines will appear if the media attachment fails due to an old iOS version, failure to download, etc.
-            .setMediaAttachment(mediaAttachment)
-            .setMutableContent(true)
-            .build();
-
-    PushPayload payload = PushPayload.newBuilder()
-            .setAudience(Selectors.iosChannel(channel))
-            .setNotification(Notifications.notification(iosPayload))
-            .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS))
-            .build();
-
-Which will generate the following JSON payload:
-
-.. code-block:: json
-
-  {
-      "audience": {
-          "ios_channel": "50614f67-498b-49df-b832-a046de0ec6ec"
-      },
-      "device_types": [
-          "ios"
-      ],
-      "notification": {
-          "ios": {
-              "alert": "alert",
-              "title": "title",
-              "subtitle": "subtitle",
-              "mutable_content": true,
-              "media_attachment": {
-                  "url": "https://media.giphy.com/media/JYsWwF82EGnpC/giphy.gif",
-                  "options": {
-                      "time": 10,
-                      "crop": {
-                          "x": 0.1,
-                          "y": 0.1,
-                          "width": 0.2,
-                          "height": 0.2
-                      }
-                  },
-                  "content": {
-                      "body": "content body",
-                      "title": "content title",
-                      "subtitle": "content subtitle"
-                  }
-              }
-          }
-      }
-  }
-
-For more information on iOS rich media content see `Media Attachment <https://docs.urbanairship.com/api/ua.html#media-attachment>`__.
-
-Here is an example of sending a push with a collapse ID:
-
-.. code-block:: java
-
-    IOSDevicePayload iosPayload = IOSDevicePayload.newBuilder()
-        .setAlert("alert")
-        .setCollapseId("collapseId")
-        .build();
-
-    PushPayload payload = PushPayload.newBuilder()
-        .setAudience(Selectors.tag("tag1"))
-        .setNotification(Notifications.notification(iosPayload))
-        .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS))
-        .build();
-
-Here's an example of a web notification using a web icon:
-
-.. code-block:: java
-
-    WebIcon webIcon = WebIcon.newBuilder()
-            .setUrl("https://i.ytimg.com/vi/PNgykntrIzE/maxresdefault.jpg")
-            .build();
-
-    WebDevicePayload webPayload = WebDevicePayload.newBuilder()
-            .setAlert("Web specific alert")
-            .setTitle("Web title")
-            .addExtraEntry("extrakey", "extravalue")
-            .setWebIcon(webIcon)
-            .build();
-
-    PushPayload payload = PushPayload.newBuilder()
-            .setAudience(Selectors.tag("testTag"))
-            .setNotification(Notifications.notification(webPayload))
-            .setDeviceTypes(DeviceTypeData.of(DeviceType.WEB))
-            .build();
-
-Which will generate the following JSON payload:
-
-.. code-block:: json
-
-  {
-      "audience": {
-          "tag": "testTag"
-      },
-      "device_types": [
-          "web"
-      ],
-      "notification": {
-          "web": {
-              "alert": "Web specific alert",
-              "extra": {
-                  "extrakey": "extravalue"
-              },
-              "icon": {
-                  "url": "https://i.ytimg.com/vi/PNgykntrIzE/maxresdefault.jpg"
-              },
-              "title": "Web title"
-          }
-      }
-  }
-
-DeviceTypes
-===========
-
-The final part of the ``PushPayload`` is ``DeviceTypes``, which defines the platform you're
-sending to, e.g., iOS or Android. Messages can be segregated by device types. Set the device
-types you want to send to using a ``DeviceTypeData`` object. Here's an example of sending a
-message to iOS and Android:
-
-.. code-block:: java
-
-   DeviceTypeData deviceTypeData  = DeviceTypeData.of(DeviceType.IOS, DeviceType.ANDROID);
-
-This corresponds to the following payload:
-
-.. sourcecode:: json
-
-   {
-     "device_types": ["ios", "android"]
-   }
-
-
-*********
-Send Push
-*********
-
-We use the ``PushRequest.newRequest(<push_payload>)`` method for sending pushes:
-
-.. code-block:: java
-
-   PushPayload payload = PushPayload.newBuilder()
-       .setAudience(Selectors.all())
-       .setNotification(Notification.newBuilder()
-           .addDeviceTypeOverride(DeviceType.IOS, IOSDevicePayload.newBuilder()
-               .setAlert("Background Push Priority 5")
-               .setContentAvailable(true)
-               .setPriority(5)
-               .build())
-           .build())
-       .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS))
-       .build();
-
-   PushRequest request = PushRequest.newRequest(payload);
-   Response<PushResponse> response = client.execute(request);
-   String operationID = response.getApiResponse().getOperationId().get();  // Operation ID
-   List<String> pushIDs = response.getApiResponse().getPushIds().get();    // List of Push IDs
-
-
-*************
-Validate Push
-*************
-
-To validate a push payload, use the ``PushRequest.newRequest(<push_payload>).setValidateOnly(true)``
-method:
-
-.. code-block:: java
-
-   PushPayload payload = PushPayload.newBuilder()
-       .setAudience(Selectors.all())
-       .setNotification(Notification.newBuilder()
-           .addDeviceTypeOverride(DeviceType.IOS, IOSDevicePayload.newBuilder()
-               .setAlert("Background Push Priority 5")
-               .setContentAvailable(true)
-               .setPriority(5)
-               .build())
-           .build())
-       .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS))
-       .build();
-
-   PushRequest request = PushRequest.newRequest(payload).setValidateOnly(true);
-   Response<PushResponse> response = client.execute(payload);
-   String operationID = response.getApiResponse().getOperationId().get();     // Operation ID
-   List<String> pushIDs = response.getApiResponse().getPushIds().get();       // List of Push IDs
diff --git a/docs/reports.rst b/docs/reports.rst
deleted file mode 100644
index b0e4bc7..0000000
--- a/docs/reports.rst
+++ /dev/null
@@ -1,148 +0,0 @@
-#######
-Reports
-#######
-
-
-***************************
-Platform Statistics Reports
-***************************
-
-The various reports that provide platform feedback are all handled by the
-``PlatformStatsRequest`` class. This group of reports includes the App Opens Report, Time
-in App Report, Opt-ins Report, Opt-outs Report, and Push Reports. Each of the following
-requests requires a start date, end date, and precision.
-
-.. sourcecode:: java
-
-   DateTime start = new DateTime(2015, 10, 1, 12, 0, 0, 0);
-   DateTime end = start.plus(Period.hours(48));
-
-   // App Opens Report
-   PlatformStatsRequest appOpensRequest = PlatformStatsRequest.newRequest(PlatformStatsRequestType.APP_OPENS)
-       .setStart(start)
-       .setEnd(end)
-       .setPrecision(Precision.HOURLY);
-
-   // Time in App Report
-   PlatformStatsRequest tiaRequest = PlatformStatsRequest.newRequest(PlatformStatsRequestType.TIME_IN_APP)
-       .setStart(start)
-       .setEnd(end)
-       .setPrecision(Precision.HOURLY);
-
-   // Opt-ins Report
-   PlatformStatsRequest optInsRequest = PlatformStatsRequest.newRequest(PlatformStatsRequestType.OPT_INS)
-       .setStart(start)
-       .setEnd(end)
-       .setPrecision(Precision.HOURLY);
-
-   // Opt-outs Report
-   PlatformStatsRequest optOutsRequest = PlatformStatsRequest.newRequest(PlatformStatsRequestType.OPT_OUTS)
-       .setStart(start)
-       .setEnd(end)
-       .setPrecision(Precision.HOURLY);
-
-   // Push Report
-   PlatformStatsRequest pushSendsRequest = PlatformStatsRequest.newRequest(PlatformStatsRequestType.SENDS)
-       .setStart(start)
-       .setEnd(end)
-       .setPrecision(Precision.HOURLY);
-
-   Response<PlatformStatsResponse> appOpensResponse = client.execute(appOpensRequest);
-   Response<PlatformStatsResponse> tiaResponse = client.execute(tiaRequest);
-   Response<PlatformStatsResponse> optInsResponse = client.execute(optInsRequest);
-   Response<PlatformStatsResponse> optOutsResponse = client.execute(optOutsRequest);
-   Response<PlatformStatsResponse> pushSendsResponse = client.execute(pushSendsRequest);
-
-   PlatformStats stats = appOpensResponse.getBody().get().getPlatformStatsObjects().get().get(0);
-   // Get the number of iOS devices
-   int ios = stats.getIos();
-   // Get the number of Android devices
-   int android = stats.getAndroid();
-   // Get the time interval
-   DateTime date = stats.getDate();
-
-
-***********************************
-Individual Push Response Statistics
-***********************************
-
-Use the ``PushInfoRequest.newRequst("<push_id>")`` class to get information on a particular
-push id:
-
-.. sourcecode:: java
-
-   PushInfoRequest request = PushInfoRequest.newRequest("ca15a452-ad5d-4bd9-95bb-e190eeba32cd");
-   Response<PushInfoResponse> response = client.execute(request);
-   PushInfoResponse pushInfo = response.getBody().get()
-
-   // Number of sends
-   int sends = pushInfo.getSends();
-   // Number of direct responses to the push
-   int directResponses = pushInfo.getDirectResponses();
-   // When the push was sent
-   DateTime date = pushInfo.getPushTime();
-   // The push type -- can be one of BROADCAST_PUSH, SCHEDULED_PUSH, TAG_PUSH, UNICAST_PUSH
-   PushType type = pushInfo.getPushType();
-   // The unique identifier for the push
-   UUID pushId = pushInfo.getPushId();
-   // The (optional) group ID
-   Optional<UUID> groupId = pushInfo.getGroupId();
-
-
-****************
-Response Listing
-****************
-
-The ``PushListingRequest`` class is used to make requests to the ``/api/reports/responses/list``
-endpoint:
-
-.. sourcecode:: java
-
-   DateTime start = new DateTime(2015, 10, 1, 12, 0, 0, 0);
-   DateTime end = start.plus(Period.hours(48));
-
-   PushListingRequest request = PushListingRequest.newRequest()
-       .setStart(start)
-       .setEnd(end)
-       .setLimit(20);
-
-   Response<PushListingResponse> response = client.execute(request);
-
-   // Get the first item in an array of push info responses. You can use all of the getters
-   // listed in the "Individual Push Response Statistics" section.
-   PushInfoResponse pushInfo = response.getBody().get().getPushInfoList().get().get(0);
-
-
-**********
-Statistics
-**********
-
-The ``StatisticsRequest`` and ``StatisticsCsvRequest`` return application statistics:
-
-.. sourcecode:: java
-
-   DateTime start = new DateTime(2015, 10, 1, 12, 0, 0, 0);
-   DateTime end = start.plus(Period.hours(48));
-
-   // Return a list of StatisticsResponse objects
-   StatisticsRequest request = StatisticsRequest.newRequest(start, end);
-   Response<List<StatisticsResponse>> response = client.execute(request);
-   // Return a csv string
-   StatisticsCsvRequest request = StatisticsCsvRequest.newRequest(start, end);
-   Response<String> csvResponse = client.execute(request);
-
-   StatisticsResponse stats = response.getBody().get().get(0);
-   // Get the start time
-   DateTime start = stats.getStart();
-   // Get the count of ios devices
-   int ios = stats.getIosCount();
-   // Get the count of BlackBerry devices
-   int blackBerry = stats.getBlackBerryCount();
-   // Get the count of C2DM devices
-   int c2dm = stats.getC2dmCount();
-   // Get the count of GCM devices
-   int gcm = stats.getGcmCount();
-   // Get the count of Windows 8 devices
-   int windows8 = stats.getWindows8Count();
-   // Get the count of Windows Phone 8 devices
-   int windowsPhone8 = stats.getWindowsPhone8Count();
diff --git a/docs/requirements.txt b/docs/requirements.txt
deleted file mode 100644
index 57ab645..0000000
--- a/docs/requirements.txt
+++ /dev/null
@@ -1,2 +0,0 @@
-sphinx
-javasphinx
diff --git a/docs/schedules.rst b/docs/schedules.rst
deleted file mode 100644
index 4a2089e..0000000
--- a/docs/schedules.rst
+++ /dev/null
@@ -1,104 +0,0 @@
-#########
-Schedules
-#########
-
-
-*******************************
-Create a Scheduled Notification
-*******************************
-
-You can use the ``ScheduleRequest.newRequest(<schedule>, <push_payload>)`` method to create
-a scheduled notification:
-
-.. sourcecode:: java
-
-    PushPayload pushPayload = PushPayload.newBuilder()
-        .setAudience(Selectors.all())
-        .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS))
-        .setNotification(Notifications.alert("Hello next week!"))
-        .build();
-
-   DateTime dateTime = DateTime.now(DateTimeZone.UTC).plusDays(7);
-
-   Schedule schedule = Schedule.newBuilder()
-       .setScheduledTimestamp(dateTime)
-       .build();
-
-   ScheduleRequest scheduleRequest = ScheduleRequest.newRequest(schedule, pushPayload);
-   Response<ScheduleResponse> response = client.execute(scheduleRequest);
-
-
-*****************
-Update a Schedule
-*****************
-
-You can use the ``ScheduleRequest.newUpdateRequest(<schedule>, <push_payload>, "<schedule_id>")``
-method to update a scheduled notification:
-
-.. sourcecode:: java
-
-    PushPayload pushPayload = PushPayload.newBuilder()
-        .setAudience(Selectors.all())
-        .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS))
-        .setNotification(Notifications.alert("Hello next week!"))
-        .build();
-
-   DateTime dateTime = DateTime.now(DateTimeZone.UTC).plusDays(7);
-
-   Schedule schedule = Schedule.newBuilder()
-       .setScheduledTimestamp(dateTime)
-       .build();
-
-   ScheduleRequest scheduleRequest = ScheduleRequest.newUpdateRequest(schedule, pushPayload, "schedule_1234");
-   Response<ScheduleResponse> response = client.execute(scheduleRequest);
-
-
-***************
-Lookup Schedule
-***************
-
-To lookup a schedule, use the ``ScheduleListingRequest.newRequest("<schedule_id>")`` method:
-
-.. sourcecode:: java
-
-   ListSchedulesRequest request = ScheduleListingRequest.newRequest("schedule_1234");
-   Response<ListAllSchedulesResponse> response = client.execute(request);
-   SchedulePayload schedule = response.getBody().get().getSchedules().get(0);
-
-   // Get the schedule's name
-   Optional<String> name = schedule.getName();
-   // Get the push IDs
-   Set<String> pushIds = schedule.getPushIds();
-   // Get the scheduled time
-   Schedule sched = schedule.getSchedule();
-   // Get the associated push payload
-   PushPayload payload = schedule.getPushPayload();
-   // Get the URL
-   Optional<String> url = schedule.getUrl();
-
-
-**************
-List Schedules
-**************
-
-To view a list of all created schedules, use the ``ScheduleListingRequest.newRequest()`` method:
-
-.. sourcecode:: java
-
-   ListSchedulesRequest request = ScheduleListingRequest.newRequest();
-   Response<ListAllSchedulesResponse> response = client.execute(request);
-
-   // Get the list of schedules
-   List<SchedulePayload> schedules = response.getBody().get().getSchedules();
-
-
-*****************
-Delete a Schedule
-*****************
-
-To delete a schedule, use the ``ScheduleDeleteRequest.newRequest("<schedule_id>")`` method:
-
-.. sourcecode:: java
-
-   DeleteScheduleRequest request = ScheduleDeleteRequest.newRequest("schedule_1234");
-   Response<String> response = client.execute(request);
diff --git a/docs/segments.rst b/docs/segments.rst
deleted file mode 100644
index 6adcc7a..0000000
--- a/docs/segments.rst
+++ /dev/null
@@ -1,103 +0,0 @@
-########
-Segments
-########
-
-
-**************
-Create Segment
-**************
-
-To create a segment, use the ``SegmentRequest.newRequest()`` method:
-
-.. sourcecode:: java
-
-   SegmentRequest request = SegmentRequest.newRequest();
-
-   // Define the segment criteria
-   Selector andSelector = Selectors.tags("java", "lib");
-   Selector compound = Selectors.or(andSelector, Selectors.not(Selectors.tag("mfd")));
-   DateRange dateRange = Selectors.weeks(3);
-   Selector location = Selectors.location("us_zip", "97214", dateRange);
-   Selector locationCriteria = Selectors.or(compound, location);
-
-   // Set the request criteria and display name, and execute the request.
-   request.setCriteria(locationCriteria);
-   request.setDisplayName("UAJavaLib");
-   Response<String> response = client.execute(request);
-
-
-**************
-Lookup Segment
-**************
-
-To get information on a particular segment, use the
-``SegmentLookupRequest.newRequest("<segment_id>")`` method:
-
-.. sourcecode:: java
-
-   SegmentLookupRequest request = SegmentLookupRequest.newRequest("<segment_id>")
-   Response<SegmentView> response = client.execute(request);
-
-   // Get the segment criteria
-   Selector criteria = response.getBody().get().getCriteria();
-   // Get the segment display name
-   String displayName = response.getBody().get().getDisplayName();
-
-
-*************
-List Segments
-*************
-
-To get a list of all segments, use the ``SegmentListingRequest.newRequest()`` method:
-
-.. sourcecode:: java
-
-   SegmentListingRequest request = SegmentListingRequest.newRequest();
-   Response<SegmentListingResponse> response = client.execute(request);
-
-   // Get the first segment in the list
-   SegmentView segment = request.getBody().get().getSegmentObjects().get(0);
-
-   // Get the segment display name
-   String displayName = segment.getDisplayName();
-   // Get the segment creation date
-   long creationDate = segment.getCreationDate();
-   // Get the segment modification date
-   long modificationDate = segment.getModificationDate();
-   // Get the segment id
-   String id = segment.getSegmentId();
-
-
-**************
-Update Segment
-**************
-
-To update a segment, use the ``SegmentRequest.newRequest("<segment_id>")`` method:
-
-.. sourcecode:: java
-
-   SegmentRequest request = SegmentRequest.newRequest("<segment_id>");
-
-   // Define the segment criteria
-   Selector andSelector = Selectors.tags("java", "lib");
-   Selector compound = Selectors.or(andSelector, Selectors.not(Selectors.tag("mfd")));
-   DateRange dateRange = Selectors.weeks(3);
-   Selector location = Selectors.location("us_zip", "97214", dateRange);
-   Selector locationCriteria = Selectors.or(compound, location);
-
-   // Set the request criteria and display name, and execute the request.
-   request.setCriteria(locationCriteria);
-   request.setDisplayName("UAJavaLib");
-   Response<String> response = client.execute(request);
-
-
-**************
-Delete Segment
-**************
-
-To delete a segment, use the ``SegmentDeleteRequest.newRequest("<segment_id>")`` method:
-
-.. sourcecode:: java
-
-   SegmentDeleteRequest request = SegmentDeleteRequest.newRequest("<segment_id>")
-   Response<String> response = client.execute(request);
diff --git a/docs/static-lists.rst b/docs/static-lists.rst
deleted file mode 100644
index 8f15700..0000000
--- a/docs/static-lists.rst
+++ /dev/null
@@ -1,143 +0,0 @@
-############
-Static Lists
-############
-
-
-******************
-Create Static List
-******************
-
-To create a static list, use the ``StaticListRequest.newRequest("<list_name>")`` method:
-
-.. sourcecode:: java
-
-   StaticListRequest request = StaticListRequest.newRequest("platinum_members")
-           .setDescription("Subscribers with platinum status.")
-           .addExtra("cool", "extras")
-           .addExtra("another", "extra");
-
-   Response<String> response = client.execute(request);
-
-
-******************
-Upload Static List
-******************
-
-To upload a static list, use the ``StaticListUploadRequest.newRequest("<list_name>", "<file_path>")``
-method:
-
-.. sourcecode:: java
-
-   File dataDirectory = new File("src/data");
-   String filePath = dataDirectory.getAbsolutePath() + "/platinum.csv";
-   StaticListUploadRequest request = StaticListUploadRequest.newRequest("platinum_members", filePath);
-   Response<String> response = client.execute(request);
-
-
-********************
-Download Static List
-********************
-
-**Note**: This feature is only available with certain plans. Please contact support or your account manager
-for details on enabling static list downloads.
-
-
-To download the CSV associated with a static list, use the
-``StaticListDownloadRequest.newRequest("<list_name>")`` method:
-
-.. sourcecode:: java
-
-   StaticListDownloadRequest request = StaticListDownloadRequest.newRequest("<list_name>");
-   Response<String> response = client.execute(request);
-
-Optionally, you can direct the output to a ``FileOutputStream`` by using the ``setResponseFile``
-setter:
-
-.. sourcecode:: java
-
-   FileOutputStream fileOutputStream = new FileOutputStream(new File("list.csv"));
-
-   StaticListDownloadRequest request = StaticListDownloadRequest.newRequest("<list_name>");
-       .setResponseFile(fileOutputStream);
-   Response<String> response = client.execute(request);
-
-You can also call the ``StaticListDownloadRequest.newRequest`` method with one of the Lifecycle
-List types defined in the ``LifecycleListType`` enum, e.g.:
-
-.. sourcecode:: java
-
-   StaticListDownloadRequest request = StaticListDownloadRequest.newRequest(LifecycleListType.UNINSTALLS_LAST_MONTH)
-       .setResponseFile(fileOutputStream);
-   Response<String> response = client.execute(request);
-
-
-******************
-Update Static List
-******************
-
-To update a list's metadata, use the ``StaticListRequest.newUpdateRequest("<list_name>")`` method:
-
-.. sourcecode:: java
-
-   StaticListRequest request = StaticListRequest.newUpdateRequest("test_list2")
-        .setDescription("Subscribers with platinum status.")
-        .addExtra("new", "extra");
-
-   Response<String> response = client.execute(request);
-
-
-******************
-Lookup Static List
-******************
-
-To retrieve a list's information, use the ``StaticListLookupRequest.newRequest("<list_name>")`` method:
-
-.. sourcecode:: java
-
-   StaticListLookupRequest request = StaticListLookupRequest.newRequest("platinum_members")
-   Response<StaticListView> response = client.execute(request);
-
-   // Get the static list
-   StaticListView staticList = response.getBody().get();
-   // Get the number of channels associated with the list
-   Integer channelCount = staticList.getChannelCount();
-   // Get the list's creation date
-   DateTime creationDate = staticList.getCreationDate();
-   // Get the list's description
-   Optional<String> description = staticList.getDescription();
-   // Get the extras associated with the list
-   Optional<ImmutableMap<String, String>> extras = staticList.getExtras();
-   // Get the date the list was last updated
-   DateTime lastUpdated = staticList.getLastUpdated();
-   // Get the list's name
-   String name = staticList.getName();
-   // Get the list's status
-   String status = staticList.getStatus();
-
-
-*****************
-List Static Lists
-*****************
-
-To list all of your static lists, use the ``StaticListListingRequest.newRequest()`` method:
-
-.. sourcecode:: java
-
-   StaticListListingRequest request = StaticListListingRequest.newRequest()
-       .type(StaticListListingRequest.ListType.lifecycle);
-   Response<StaticListListingResponse> response = client.execute(request);
-
-   // Get the first static list in the list
-   StaticListView staticList = response.getBody().get().getStaticListObjects().get(0);
-
-
-******************
-Delete Static List
-******************
-
-To delete a static list, use the ``StaticListDeleteRequest.newRequest()`` method:
-
-.. sourcecode:: java
-
-   StaticListDeleteRequest request = StaticListDeleteRequest.newRequest("platinum_members");
-   Response<String> response = client.execute(req);
diff --git a/docs/templates.rst b/docs/templates.rst
deleted file mode 100644
index ef3cd1a..0000000
--- a/docs/templates.rst
+++ /dev/null
@@ -1,134 +0,0 @@
-#########
-Templates
-#########
-
-
-.. _templates-create-template:
-
-***************
-Create Template
-***************
-
-To create a template, use the ``TemplateRequest.newRequest()`` method.
-
-.. sourcecode:: java
-
-   TemplateVariable titleVariable = TemplateVariable.newBuilder()
-           .setKey("TITLE")
-           .setName("Title")
-           .setDescription("e.g. Mr, Ms, Dr, etc")
-           .setDefaultValue("")
-           .build();
-
-   TemplateVariable firstNameVariable = TemplateVariable.newBuilder()
-           .setKey("FIRST_NAME")
-           .setName("First Name")
-           .setDescription("Given name")
-           .setDefaultValue(null)
-           .build();
-
-   TemplateVariable lastNameVariable = TemplateVariable.newBuilder()
-           .setKey("LAST_NAME")
-           .setName("Last Name")
-           .setDescription("Family name")
-           .setDefaultValue("")
-           .build();
-
-   PartialPushPayload partialPushPayload = PartialPushPayload.newBuilder()
-           .setNotification(Notification.newBuilder()
-                   .setAlert("Hello {{TITLE}} {{FIRST_NAME}} {{LAST_NAME}}, welcome to our loyalty program!")
-                   .build()
-           )
-           .build();
-
-   TemplateRequest request = TemplateRequest.newRequest()
-           .setName("Template Name")
-           .setDescription("A description")
-           .addVariable(titleVariable)
-           .addVariable(firstNameVariable)
-           .addVariable(lastNameVariable)
-           .setPush(partialPushPayload);
-
-   Response<TemplateResponse> response = client.execute(request);
-
-***************
-Update Template
-***************
-
-To update a template, use the ``TemplateRequest.newRequest(<template-id>)`` method:
-
-.. sourcecode:: java
-
-   PartialPushPayload partialPushPayload = PartialPushPayload.newBuilder()
-           .setNotification(Notification.newBuilder()
-                   .setAlert("Hello {{FIRST_NAME}} {{LAST_NAME}}, this is a test!")
-                   .build()
-           )
-           .build();
-
-   TemplateRequest request = TemplateRequest.newRequest("template-id-123")
-           .setPush(partialPushPayload);
-
-   Response<TemplateResponse> response = client.execute(request);
-
-
-****************
-Push to Template
-****************
-
-To push to a template, use the ``TemplatePushRequest.newRequest()`` method. In the example
-below, we use the template we created in the :ref:`templates-create-template` section.
-
-.. sourcecode:: java
-
-   TemplatePushPayload payload = TemplatePushPayload.newBuilder()
-           .setAudience(Selectors.namedUser("named-user"))
-           .setDeviceTypes(DeviceTypeData.of(DeviceType.ANDROID))
-           .setMergeData(TemplateSelector.newBuilder()
-                   .setTemplateId("template-id-123")
-                   .addSubstitution("FIRST_NAME", "James")
-                   .addSubstitution("LAST_NAME", "Brown")
-                   .addSubstitution("TITLE", "Mr.")
-                   .build())
-           .build();
-
-   TemplatePushRequest request = TemplatePushRequest.newRequest()
-           .addTemplatePushPayload(payload);
-
-   Response<TemplateResponse> response = client.execute(request);
-
-
-***************
-Template Lookup
-***************
-
-To lookup a template, use the ``TemplateListingRequest.newRequest("template-id")`` method:
-
-.. sourcecode:: java
-
-   TemplateListingRequest request = TemplateListingRequest.newRequest("template-id")
-   Response<TemplateListingResponse> response = client.execute(request);
-
-
-****************
-Template Listing
-****************
-
-To list all templates, use the ``TemplateListingRequest.newRequest()`` method:
-
-.. sourcecode:: java
-
-   TemplateListingRequest request = TemplateListingRequest.newRequest()
-   Response<TemplateListingResponse> response = client.execute(request);
-
-
-***************
-Delete Template
-***************
-
-To delete a template, use the ``TemplateDeleteRequest.newRequest("template-id")`` method:
-
-.. sourcecode:: java
-
-   TemplateDeleteRequest request = TemplateDeleteRequest.newRequest("template-id");
-   Response<TemplateResponse> response = client.execute(req);
diff --git a/pom.xml b/pom.xml
index e85751b..ed7f59a 100644
--- a/pom.xml
+++ b/pom.xml
@@ -10,7 +10,7 @@
 
     <groupId>com.urbanairship</groupId>
     <artifactId>java-client</artifactId>
-    <version>1.3.1-SNAPSHOT</version>
+    <version>3.2.1-SNAPSHOT</version>
     <packaging>jar</packaging>
 
     <name>Java Client</name>
@@ -37,7 +37,7 @@
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
         <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
-        <jackson.version>1.9.8</jackson.version>
+        <jackson.version>2.8.8</jackson.version>
         <local.gpg.passphrase />
     </properties>
 
@@ -95,8 +95,8 @@
                 <artifactId>maven-compiler-plugin</artifactId>
                 <version>3.3</version>
                 <configuration>
-                    <source>1.7</source>
-                    <target>1.7</target>
+                    <source>1.8</source>
+                    <target>1.8</target>
                 </configuration>
             </plugin>
 
@@ -134,7 +134,7 @@
             <plugin>
                 <groupId>org.jacoco</groupId>
                 <artifactId>jacoco-maven-plugin</artifactId>
-                <version>0.7.1.201405082137</version>
+                <version>0.8.0</version>
                 <executions>
                     <execution>
                         <id>prepare-agent</id>
@@ -165,14 +165,26 @@
         </dependency>
 
         <dependency>
-            <groupId>org.codehaus.jackson</groupId>
-            <artifactId>jackson-mapper-asl</artifactId>
+            <groupId>com.fasterxml.jackson.core</groupId>
+            <artifactId>jackson-databind</artifactId>
             <version>${jackson.version}</version>
         </dependency>
 
         <dependency>
-            <groupId>org.codehaus.jackson</groupId>
-            <artifactId>jackson-core-asl</artifactId>
+            <groupId>com.google.code.findbugs</groupId>
+            <artifactId>jsr305</artifactId>
+            <version>3.0.2</version>
+        </dependency>
+
+        <dependency>
+            <groupId>com.fasterxml.jackson.core</groupId>
+            <artifactId>jackson-core</artifactId>
+            <version>${jackson.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>com.fasterxml.jackson.datatype</groupId>
+            <artifactId>jackson-datatype-joda</artifactId>
             <version>${jackson.version}</version>
         </dependency>
 
@@ -189,6 +201,12 @@
         </dependency>
 
         <dependency>
+            <groupId>org.joda</groupId>
+            <artifactId>joda-convert</artifactId>
+            <version>1.8.1</version>
+        </dependency>
+
+        <dependency>
             <groupId>org.apache.httpcomponents</groupId>
             <artifactId>fluent-hc</artifactId>
             <version>4.5.2</version>
@@ -201,9 +219,9 @@
         </dependency>
 
         <dependency>
-            <groupId>com.ning</groupId>
+            <groupId>org.asynchttpclient</groupId>
             <artifactId>async-http-client</artifactId>
-            <version>1.9.31</version>
+            <version>2.4.8</version>
         </dependency>
 
         <dependency>
diff --git a/src/main/java/com/urbanairship/api/channel/ChannelRequest.java b/src/main/java/com/urbanairship/api/channel/ChannelRequest.java
index d78dbf2..6963bbf 100644
--- a/src/main/java/com/urbanairship/api/channel/ChannelRequest.java
+++ b/src/main/java/com/urbanairship/api/channel/ChannelRequest.java
@@ -99,4 +99,9 @@ public class ChannelRequest implements Request<ChannelResponse> {
             }
         };
     }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
 }
diff --git a/src/main/java/com/urbanairship/api/channel/ChannelTagRequest.java b/src/main/java/com/urbanairship/api/channel/ChannelTagRequest.java
index 7fd6339..a03cf5a 100644
--- a/src/main/java/com/urbanairship/api/channel/ChannelTagRequest.java
+++ b/src/main/java/com/urbanairship/api/channel/ChannelTagRequest.java
@@ -240,6 +240,11 @@ public class ChannelTagRequest implements Request<String> {
         };
     }
 
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
+
     private static void appendMapValues(String key, Set<String> values, Map<String, Set<String>> map) {
         if (!map.containsKey(key)) {
             map.put(key, values);
diff --git a/src/main/java/com/urbanairship/api/channel/Constants.java b/src/main/java/com/urbanairship/api/channel/Constants.java
index 6ea3e56..7b8c06f 100644
--- a/src/main/java/com/urbanairship/api/channel/Constants.java
+++ b/src/main/java/com/urbanairship/api/channel/Constants.java
@@ -37,6 +37,12 @@ public class Constants {
     public static final String OPEN_PLATFORM_NAME = "open_platform_name";
     public static final String OLD_ADDRESS = "old_address";
     public static final String IDENTIFIERS = "identifiers";
+    public static final String ADDRESS = "address";
+    public static final String SET_TAGS = "set_tags";
+    public static final String TIMEZONE = "timezone";
+    public static final String LOCALE_COUNTRY = "locale_country";
+    public static final String LOCALE_LANGUAGE = "locale_language";
+    public static final String TYPE = "type";
 
     private Constants() {
     }
diff --git a/src/main/java/com/urbanairship/api/channel/OpenChannelRequest.java b/src/main/java/com/urbanairship/api/channel/OpenChannelRequest.java
new file mode 100644
index 0000000..624f6ec
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/channel/OpenChannelRequest.java
@@ -0,0 +1,76 @@
+package com.urbanairship.api.channel;
+
+import com.google.common.base.Preconditions;
+import com.google.common.net.HttpHeaders;
+import com.urbanairship.api.channel.model.OpenChannelResponse;
+import com.urbanairship.api.channel.model.open.OpenChannelPayload;
+import com.urbanairship.api.channel.parse.ChannelObjectMapper;
+import com.urbanairship.api.client.Request;
+import com.urbanairship.api.client.RequestUtils;
+import com.urbanairship.api.client.ResponseParser;
+import org.apache.http.entity.ContentType;
+
+import java.io.IOException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.HashMap;
+import java.util.Map;
+
+public class OpenChannelRequest implements Request<OpenChannelResponse> {
+
+    private final static String API_OPEN_CHANNEL = "/api/channels/open/";
+
+    private final OpenChannelPayload payload;
+
+    private OpenChannelRequest(OpenChannelPayload payload) {
+        Preconditions.checkNotNull(payload, "Payload must not be null to create an open channel request");
+        this.payload = payload;
+    }
+
+    public static OpenChannelRequest newRequest(OpenChannelPayload payload) {
+        return new OpenChannelRequest(payload);
+    }
+
+    @Override
+    public HttpMethod getHttpMethod() {
+        return HttpMethod.POST;
+    }
+
+    @Override
+    public String getRequestBody() {
+        return payload.toJSON();
+    }
+
+    @Override
+    public ContentType getContentType() {
+        return ContentType.APPLICATION_JSON;
+    }
+
+    @Override
+    public Map<String, String> getRequestHeaders() {
+        Map<String, String> headers = new HashMap<String, String>();
+        headers.put(HttpHeaders.CONTENT_TYPE, CONTENT_TYPE_JSON);
+        headers.put(HttpHeaders.ACCEPT, UA_VERSION_JSON);
+        return headers;
+    }
+
+    @Override
+    public URI getUri(URI baseUri) throws URISyntaxException {
+        return RequestUtils.resolveURI(baseUri, API_OPEN_CHANNEL);
+    }
+
+    @Override
+    public ResponseParser<OpenChannelResponse> getResponseParser() {
+        return new ResponseParser<OpenChannelResponse>() {
+            @Override
+            public OpenChannelResponse parse(String response) throws IOException {
+                return ChannelObjectMapper.getInstance().readValue(response, OpenChannelResponse.class);
+            }
+        };
+    }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/channel/model/ChannelView.java b/src/main/java/com/urbanairship/api/channel/model/ChannelView.java
index 17a5efb..e9baa43 100644
--- a/src/main/java/com/urbanairship/api/channel/model/ChannelView.java
+++ b/src/main/java/com/urbanairship/api/channel/model/ChannelView.java
@@ -36,11 +36,12 @@ public final class ChannelView {
     private final Optional<IosSettings> iosSettings;
     private final Optional<WebSettings> web;
     private final Optional<OpenChannel> open;
+    private final Optional<String> address;
 
     private ChannelView() {
         this(null, null, true, true, Optional.<Boolean>absent(), Optional.<String>absent(), null,
             Optional.<DateTime>absent(), Optional.<String>absent(), null, null, Optional.<IosSettings>absent(),
-                Optional.<WebSettings>absent(), Optional.<OpenChannel>absent());
+                Optional.<WebSettings>absent(), Optional.<OpenChannel>absent(), Optional.<String>absent());
     }
 
     private ChannelView(String channelId,
@@ -56,7 +57,8 @@ public final class ChannelView {
                        ImmutableMap<String, ImmutableSet<String>> tagGroups,
                        Optional<IosSettings> iosSettings,
                        Optional<WebSettings> web,
-                       Optional<OpenChannel> open) {
+                       Optional<OpenChannel> open,
+                       Optional<String> address) {
         this.channelId = channelId;
         this.channelType = channelType;
         this.installed = installed;
@@ -71,6 +73,7 @@ public final class ChannelView {
         this.iosSettings = iosSettings;
         this.web = web;
         this.open = open;
+        this.address = address;
     }
 
     /**
@@ -208,54 +211,62 @@ public final class ChannelView {
         return open;
     }
 
+    /**
+     * Get the address. The primary identifier of a record. For example,
+     * in an SMS integration, it could be the end user’s phone number.
+     *
+     * @return Optional String address
+     */
+    public Optional<String> getAddress() {
+        return address;
+    }
+
     @Override
     public String toString() {
         return "ChannelView{" +
-            "channelId='" + channelId + '\'' +
-            ", deviceType=" + channelType +
-            ", installed=" + installed +
-            ", optIn=" + optIn +
-            ", background=" + background +
-            ", pushAddress=" + pushAddress +
-            ", created=" + created +
-            ", lastRegistration=" + lastRegistration +
-            ", alias=" + alias +
-            ", tags=" + tags +
-            ", tagGroups=" + tagGroups +
-            ", iosSettings=" + iosSettings +
-            ", webSettings=" + web +
-            ". openChannel=" + open +
-            '}';
+                "channelId='" + channelId + '\'' +
+                ", channelType='" + channelType + '\'' +
+                ", installed=" + installed +
+                ", optIn=" + optIn +
+                ", background=" + background +
+                ", pushAddress=" + pushAddress +
+                ", created=" + created +
+                ", lastRegistration=" + lastRegistration +
+                ", alias=" + alias +
+                ", tags=" + tags +
+                ", tagGroups=" + tagGroups +
+                ", iosSettings=" + iosSettings +
+                ", web=" + web +
+                ", open=" + open +
+                ", address=" + address +
+                '}';
     }
 
     @Override
     public int hashCode() {
-        return Objects.hashCode(channelId, channelType, installed, optIn, background, pushAddress, created, lastRegistration, alias, tags, tagGroups, iosSettings, web, open);
+        return Objects.hashCode(channelId, channelType, installed, optIn, background, pushAddress, created, lastRegistration, alias, tags, tagGroups, iosSettings, web, open, address);
     }
 
     @Override
-    public boolean equals(Object obj) {
-        if (this == obj) {
-            return true;
-        }
-        if (obj == null || getClass() != obj.getClass()) {
-            return false;
-        }
-        final ChannelView other = (ChannelView) obj;
-        return Objects.equal(this.channelId, other.channelId) &&
-            Objects.equal(this.channelType, other.channelType) &&
-            Objects.equal(this.installed, other.installed) &&
-            Objects.equal(this.optIn, other.optIn) &&
-            Objects.equal(this.background, other.background) &&
-            Objects.equal(this.pushAddress, other.pushAddress) &&
-            Objects.equal(this.created, other.created) &&
-            Objects.equal(this.lastRegistration, other.lastRegistration) &&
-            Objects.equal(this.alias, other.alias) &&
-            Objects.equal(this.tags, other.tags) &&
-            Objects.equal(this.tagGroups, other.tagGroups) &&
-            Objects.equal(this.iosSettings, other.iosSettings) &&
-            Objects.equal(this.web, other.web) &&
-            Objects.equal(this.open, other.open);
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        ChannelView that = (ChannelView) o;
+        return installed == that.installed &&
+                optIn == that.optIn &&
+                Objects.equal(channelId, that.channelId) &&
+                Objects.equal(channelType, that.channelType) &&
+                Objects.equal(background, that.background) &&
+                Objects.equal(pushAddress, that.pushAddress) &&
+                Objects.equal(created, that.created) &&
+                Objects.equal(lastRegistration, that.lastRegistration) &&
+                Objects.equal(alias, that.alias) &&
+                Objects.equal(tags, that.tags) &&
+                Objects.equal(tagGroups, that.tagGroups) &&
+                Objects.equal(iosSettings, that.iosSettings) &&
+                Objects.equal(web, that.web) &&
+                Objects.equal(open, that.open) &&
+                Objects.equal(address, that.address);
     }
 
     public final static class Builder {
@@ -273,6 +284,7 @@ public final class ChannelView {
         private IosSettings iosSettings = null;
         private WebSettings webSettings = null;
         private OpenChannel openChannel = null;
+        private String address = null;
 
         private Builder() {
         }
@@ -462,6 +474,17 @@ public final class ChannelView {
         }
 
         /**
+         * Set the address. The primary identifier of a record. For example,
+         * in an SMS integration, it could be the end user’s phone number.
+         * @param address String
+         * @return Builder
+         */
+        public Builder setAddress(String address) {
+            this.address = address;
+            return this;
+        }
+
+        /**
          * Build the ChannelView object
          * @return ChannelView
          */
@@ -486,7 +509,8 @@ public final class ChannelView {
                 tagGroups.build(),
                 Optional.fromNullable(iosSettings),
                 Optional.fromNullable(webSettings),
-                Optional.fromNullable(openChannel)
+                Optional.fromNullable(openChannel),
+                Optional.fromNullable(address)
             );
         }
     }
diff --git a/src/main/java/com/urbanairship/api/channel/model/OpenChannelResponse.java b/src/main/java/com/urbanairship/api/channel/model/OpenChannelResponse.java
new file mode 100644
index 0000000..8042f44
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/channel/model/OpenChannelResponse.java
@@ -0,0 +1,66 @@
+package com.urbanairship.api.channel.model;
+
+import com.google.common.base.Objects;
+
+public class OpenChannelResponse {
+    private final boolean ok;
+    private final String channelId;
+
+    private OpenChannelResponse(Builder builder) {
+        this.ok = builder.ok;
+        this.channelId = builder.channel_id;
+    }
+
+    public static Builder newBuilder() {
+        return new Builder();
+    }
+
+    public boolean getOk() {
+        return ok;
+    }
+
+    public String getChannelId() {
+        return channelId;
+    }
+
+    @Override
+    public String toString() {
+        return "OpenChannelResponse{" +
+                "ok=" + ok +
+                ", channelId='" + channelId + '\'' +
+                '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        OpenChannelResponse that = (OpenChannelResponse) o;
+        return ok == that.ok &&
+                Objects.equal(channelId, that.channelId);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hashCode(ok, channelId);
+    }
+
+    public static class Builder {
+        private boolean ok;
+        private String channel_id;
+
+        public Builder setOk(boolean ok) {
+            this.ok = ok;
+            return this;
+        }
+
+        public Builder setChannelId(String channel_id) {
+            this.channel_id = channel_id;
+            return this;
+        }
+
+        public OpenChannelResponse build() {
+            return new OpenChannelResponse(this);
+        }
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/channel/model/open/Channel.java b/src/main/java/com/urbanairship/api/channel/model/open/Channel.java
new file mode 100644
index 0000000..b502c71
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/channel/model/open/Channel.java
@@ -0,0 +1,304 @@
+package com.urbanairship.api.channel.model.open;
+
+
+import com.google.common.base.Objects;
+import com.google.common.base.Optional;
+import com.google.common.base.Preconditions;
+import com.google.common.collect.ImmutableList;
+import com.urbanairship.api.channel.model.ChannelType;
+import com.urbanairship.api.push.model.PushModelObject;
+
+import java.util.List;
+
+/**
+ * Represents the payload to be used for registering or updating an open channel.
+ */
+public class Channel extends PushModelObject {
+
+    private final ChannelType type;
+    private final Optional<Boolean> optIn;
+    private final Optional<String> address;
+    private final Optional<Boolean> setTags;
+    private final Optional<ImmutableList<String>> tags;
+    private final Optional<String> timezone;
+    private final Optional<String> localeCountry;
+    private final Optional<String> localeLanguage;
+    private final OpenChannel open;
+
+    private Channel(Builder builder) {
+        this.type = builder.type;
+        this.open = builder.open;
+        this.address = Optional.fromNullable(builder.address);
+
+        this.optIn = Optional.fromNullable(builder.optIn);
+        this.setTags = Optional.fromNullable(builder.setTags);
+        this.timezone = Optional.fromNullable(builder.timezone);
+        this.localeCountry = Optional.fromNullable(builder.locale_country);
+        this.localeLanguage = Optional.fromNullable(builder.locale_language);
+
+        if (builder.tags.build().isEmpty()) {
+            this.tags = Optional.absent();
+        } else {
+            this.tags = Optional.of(builder.tags.build());
+        }
+    }
+
+    /**
+     * Get the ChannelType.
+     * @return ChannelType type
+     */
+    public ChannelType getType() {
+        return type;
+    }
+
+    /**
+     * Get the channel opt in status.
+     * @return Optional Boolean optIn
+     */
+    public Optional<Boolean> getOptIn() {
+        return optIn;
+    }
+
+    /**
+     * Get the channel's address, a Unique identifier of the object
+     * used as the primary ID in the delivery tier (webhook). One-to-one
+     * with Channel ID. New addresses on existing channels will overwrite
+     * old associations. Examples: email address, phone number. If
+     * missing, channel_id must be present.
+     * @return Optional String address
+     */
+    public Optional<String> getAddress() {
+        return address;
+    }
+
+    /**
+     * Get the setTags flag. Optional, though required if tags is present.
+     * If true on update, value of tags overwrites any existing tags.
+     * If false, tags are unioned with existing tags.
+     * @return Optional Boolean setTags
+     */
+    public Optional<Boolean> getSetTags() {
+        return setTags;
+    }
+
+    /**
+     * Get the List of String representations of tags.
+     * @return Optional ImmutableList of Strings
+     */
+    public Optional<ImmutableList<String>> getTags() {
+        return tags;
+    }
+
+    /**
+     * Get a String representation of the timezone.
+     * @return Optional String timezone
+     */
+    public Optional<String> getTimezone() {
+        return timezone;
+    }
+
+    /**
+     * Get a String representation of the locale country.
+     * @return Optional String localeCountry
+     */
+    public Optional<String> getLocaleCountry() {
+        return localeCountry;
+    }
+
+    /**
+     * Get a String representation of the locale language.
+     * @return Optional String localeLanguage
+     */
+    public Optional<String> getLocaleLanguage() {
+        return localeLanguage;
+    }
+
+    /**
+     * Get open channel specific properties.
+     * @return OpenChannel open
+     */
+    public OpenChannel getOpen() {
+        return open;
+    }
+
+    /**
+     * New Channel Builder.
+     *
+     * @return Builder
+     */
+    public static Builder newBuilder() {
+        return new Builder();
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        Channel that = (Channel) o;
+        return type == that.type &&
+                Objects.equal(optIn, that.optIn) &&
+                Objects.equal(address, that.address) &&
+                Objects.equal(setTags, that.setTags) &&
+                Objects.equal(tags, that.tags) &&
+                Objects.equal(timezone, that.timezone) &&
+                Objects.equal(localeCountry, that.localeCountry) &&
+                Objects.equal(localeLanguage, that.localeLanguage) &&
+                Objects.equal(open, that.open);
+    }
+
+    @Override
+    public String toString() {
+        return "Channel{" +
+                "type=" + type +
+                ", optIn=" + optIn +
+                ", address=" + address +
+                ", setTags=" + setTags +
+                ", tags=" + tags +
+                ", timezone=" + timezone +
+                ", localeCountry=" + localeCountry +
+                ", localeLanguage=" + localeLanguage +
+                ", open=" + open +
+                '}';
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hashCode(type, optIn, address, setTags, tags, timezone, localeCountry, localeLanguage, open);
+    }
+
+    /**
+     * Channel Builder
+     */
+    public final static class Builder {
+        private ChannelType type;
+        private boolean optIn;
+        private String address;
+        private boolean setTags;
+        private ImmutableList.Builder<String> tags = ImmutableList.builder();
+        private String timezone;
+        private String locale_country;
+        private String locale_language;
+        private OpenChannel open;
+
+        private Builder() {}
+
+        /**
+         * Set the ChannelType. Must be open.
+         * @param type ChannelType
+         * @return Channel Builder
+         */
+        public Builder setChannelType(ChannelType type) {
+            this.type = type;
+            return this;
+        }
+
+        /**
+         * Set the channel opt in status. If false, no payloads will be
+         * delivered for the channel.
+         * @param optIn boolean
+         * @return Channel Builder
+         */
+        public Builder setOptIn(boolean optIn) {
+            this.optIn = optIn;
+            return this;
+        }
+
+        /**
+         * Set the channel's address, a Unique identifier of the object
+         * used as the primary ID in the delivery tier (webhook). One-to-one
+         * with Channel ID. New addresses on existing channels will overwrite
+         * old associations. Examples: email address, phone number. If
+         * missing, channel_id must be present.
+         * @param address String
+         * @return Channel Builder
+         */
+        public Builder setAddress(String address) {
+            this.address = address;
+            return this;
+        }
+
+        /**
+         * Optional, though required if tags is present.
+         * If true on update, value of tags overwrites any existing tags.
+         * If false, tags are unioned with existing tags.
+         * @param setTags boolean
+         * @return Channel Builder
+         */
+        public Builder setTags(boolean setTags) {
+            this.setTags = setTags;
+            return this;
+        }
+
+        /**
+         * Add a List of String representations of tags.
+         * @param tags A List of Strings
+         * @return Channel Builder
+         */
+        public Builder addAllTags(List<String> tags) {
+            this.tags.addAll(tags);
+            return this;
+        }
+
+        /**
+         * Set a String representation of a tag.
+         * @param tag String
+         * @return Channel Builder
+         */
+        public Builder addTag(String tag) {
+            tags.add(tag);
+            return this;
+        }
+
+        /**
+         * Set timezone string. An IANA tzdata identifier for the timezone
+         * as a string, e.g., "America/Los Angeles". Will set the timezone
+         * tag group tag with the specified value.
+         * @param timezone String
+         * @return Channel Builder
+         */
+        public Builder setTimeZone(String timezone) {
+            this.timezone = timezone;
+            return this;
+        }
+
+        /**
+         * Set a the localeCountry The two-letter country locale shortcode.
+         * Will set the ua_locale_country tag group to the specified value.
+         * @param locale_country String
+         * @return Channel Builder
+         */
+        public Builder setLocaleCountry(String locale_country) {
+            this.locale_country = locale_country;
+            return this;
+        }
+
+        /**
+         * Set a String localeLanguage, the two-letter language locale
+         * shortcode. Will set the ua_locale_language tag group to the
+         * specified value
+         * @param locale_language String
+         * @return Channel Builder
+         */
+        public Builder setLocaleLanguage(String locale_language) {
+            this.locale_language = locale_language;
+            return this;
+        }
+
+        /**
+         * Set open channel specific properties.
+         * @param open OpenChannel
+         * @return Channel Builder
+         */
+        public Builder setOpenChannel(OpenChannel open) {
+            this.open = open;
+            return this;
+        }
+
+        public Channel build() {
+            Preconditions.checkNotNull(type, "'type' cannot be null.");
+            Preconditions.checkNotNull(open, "'open' cannot be null.");
+
+            return new Channel(this);
+        }
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/channel/model/open/OpenChannel.java b/src/main/java/com/urbanairship/api/channel/model/open/OpenChannel.java
index c5396ff..cb60119 100644
--- a/src/main/java/com/urbanairship/api/channel/model/open/OpenChannel.java
+++ b/src/main/java/com/urbanairship/api/channel/model/open/OpenChannel.java
@@ -67,7 +67,7 @@ public class OpenChannel {
 
     /**
      * New OpenChannel Builder.
-     * @return
+     * @return Builder
      */
     public static Builder newBuilder() {
         return new Builder();
@@ -145,8 +145,8 @@ public class OpenChannel {
          * but cannot be used for segmentations. Maximum of 100 pairs of string values.
          * This value should be exhaustive whenever this key is present—values will not be unioned
          * with existing identifiers, they will replace them, similar to "set_tags": true above.
-         * @param key
-         * @param value
+         * @param key String
+         * @param value String
          * @return OpenChannel Builder
          */
         public Builder addIdentifier(String key, String value) {
@@ -159,7 +159,7 @@ public class OpenChannel {
          * but cannot be used for segmentations. Maximum of 100 pairs of string values.
          * This value should be exhaustive whenever this key is present—values will not be unioned
          * with existing identifiers, they will replace them, similar to "set_tags": true above.
-         * @param entries
+         * @param entries Map of Strings
          * @return OpenChannel Builder
          */
         public Builder addAllIdentifierEntries(Map<String, String> entries) {
diff --git a/src/main/java/com/urbanairship/api/channel/model/open/OpenChannelPayload.java b/src/main/java/com/urbanairship/api/channel/model/open/OpenChannelPayload.java
new file mode 100644
index 0000000..8f72b2b
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/channel/model/open/OpenChannelPayload.java
@@ -0,0 +1,47 @@
+package com.urbanairship.api.channel.model.open;
+
+import com.google.common.base.Objects;
+import com.urbanairship.api.push.model.PushModelObject;
+
+/**
+ * Payload used to create open channels.
+ */
+public class OpenChannelPayload extends PushModelObject {
+    private final Channel channel;
+
+    /**
+     * Create an open channel payload.
+     * @param channel Channel
+     */
+    public OpenChannelPayload(Channel channel) {
+        this.channel = channel;
+    }
+
+    /**
+     * Get the channel object that is the object used to create or update channels on an open platform.
+     * @return Channel
+     */
+    public Channel getChannel() {
+        return channel;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        OpenChannelPayload that = (OpenChannelPayload) o;
+        return Objects.equal(channel, that.channel);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hashCode(channel);
+    }
+
+    @Override
+    public String toString() {
+        return "OpenChannelPayload{" +
+                "channel=" + channel +
+                '}';
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/channel/parse/ChannelObjectMapper.java b/src/main/java/com/urbanairship/api/channel/parse/ChannelObjectMapper.java
index 8147c42..b296ef2 100644
--- a/src/main/java/com/urbanairship/api/channel/parse/ChannelObjectMapper.java
+++ b/src/main/java/com/urbanairship/api/channel/parse/ChannelObjectMapper.java
@@ -4,8 +4,14 @@
 
 package com.urbanairship.api.channel.parse;
 
+import com.fasterxml.jackson.core.Version;
+import com.fasterxml.jackson.databind.DeserializationFeature;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.module.SimpleModule;
+import com.fasterxml.jackson.datatype.joda.JodaModule;
 import com.urbanairship.api.channel.model.ChannelResponse;
 import com.urbanairship.api.channel.model.ChannelView;
+import com.urbanairship.api.channel.model.OpenChannelResponse;
 import com.urbanairship.api.channel.model.ios.IosSettings;
 import com.urbanairship.api.channel.model.ios.QuietTime;
 import com.urbanairship.api.channel.model.open.OpenChannel;
@@ -17,10 +23,6 @@ import com.urbanairship.api.channel.parse.open.OpenChannelDeserializer;
 import com.urbanairship.api.channel.parse.web.SubscriptionDeserializer;
 import com.urbanairship.api.channel.parse.web.WebSettingsDeserializer;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.Version;
-import org.codehaus.jackson.map.DeserializationConfig;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.map.module.SimpleModule;
 
 public class ChannelObjectMapper {
 
@@ -35,11 +37,12 @@ public class ChannelObjectMapper {
         MODULE.addDeserializer(Subscription.class, new SubscriptionDeserializer());
         MODULE.addDeserializer(WebSettings.class, new WebSettingsDeserializer());
         MODULE.addDeserializer(OpenChannel.class, new OpenChannelDeserializer());
-
+        MODULE.addDeserializer(OpenChannelResponse.class, new OpenChannelResponseDeserializer());
 
         MAPPER.registerModule(MODULE);
+        MAPPER.registerModule(new JodaModule());
         MAPPER.registerModule(PushObjectMapper.getModule());
-        MAPPER.configure(DeserializationConfig.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
+        MAPPER.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
 }
 
     public static SimpleModule getModule() {
diff --git a/src/main/java/com/urbanairship/api/channel/parse/ChannelViewDeserializer.java b/src/main/java/com/urbanairship/api/channel/parse/ChannelViewDeserializer.java
index a725dc5..c456b6c 100644
--- a/src/main/java/com/urbanairship/api/channel/parse/ChannelViewDeserializer.java
+++ b/src/main/java/com/urbanairship/api/channel/parse/ChannelViewDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.channel.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.channel.Constants;
@@ -12,9 +15,6 @@ import com.urbanairship.api.common.parse.FieldParser;
 import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
@@ -106,6 +106,12 @@ public final class ChannelViewDeserializer extends JsonDeserializer<ChannelView>
                             reader.readOpenChannel(jsonParser);
                         }
                     })
+                    .put(Constants.ADDRESS, new FieldParser<ChannelViewReader>() {
+                        @Override
+                        public void parse(ChannelViewReader reader, JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException {
+                            reader.readAddress(jsonParser);
+                        }
+                    })
                     .build()
     );
 
diff --git a/src/main/java/com/urbanairship/api/channel/parse/ChannelViewReader.java b/src/main/java/com/urbanairship/api/channel/parse/ChannelViewReader.java
index 57a9ecf..0bf1b80 100644
--- a/src/main/java/com/urbanairship/api/channel/parse/ChannelViewReader.java
+++ b/src/main/java/com/urbanairship/api/channel/parse/ChannelViewReader.java
@@ -4,6 +4,8 @@
 
 package com.urbanairship.api.channel.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.google.common.base.Optional;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
@@ -19,8 +21,6 @@ import com.urbanairship.api.common.parse.BooleanFieldDeserializer;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.common.parse.ListOfStringsDeserializer;
 import com.urbanairship.api.common.parse.StringFieldDeserializer;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
 import org.joda.time.DateTime;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -96,6 +96,10 @@ public final class ChannelViewReader implements JsonObjectReader<ChannelView> {
         builder.setOpenChannel(jsonParser.readValueAs(OpenChannel.class));
     }
 
+    public void readAddress(JsonParser jsonParser) throws IOException {
+        builder.setAddress(StringFieldDeserializer.INSTANCE.deserialize(jsonParser, Constants.ADDRESS));
+    }
+
     @Override
     public ChannelView validateAndBuild() throws IOException {
         try {
diff --git a/src/main/java/com/urbanairship/api/channel/parse/ChannelsResponseDeserializer.java b/src/main/java/com/urbanairship/api/channel/parse/ChannelsResponseDeserializer.java
index 9cdc781..d0e300e 100644
--- a/src/main/java/com/urbanairship/api/channel/parse/ChannelsResponseDeserializer.java
+++ b/src/main/java/com/urbanairship/api/channel/parse/ChannelsResponseDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.channel.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.channel.model.ChannelResponse;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParser;
 import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/channel/parse/ChannelsResponseReader.java b/src/main/java/com/urbanairship/api/channel/parse/ChannelsResponseReader.java
index 6e3d7e0..5de0e62 100644
--- a/src/main/java/com/urbanairship/api/channel/parse/ChannelsResponseReader.java
+++ b/src/main/java/com/urbanairship/api/channel/parse/ChannelsResponseReader.java
@@ -5,12 +5,12 @@
 package com.urbanairship.api.channel.parse;
 
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.urbanairship.api.channel.model.ChannelResponse;
 import com.urbanairship.api.channel.model.ChannelView;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
 
 import java.io.IOException;
 import java.util.List;
diff --git a/src/main/java/com/urbanairship/api/channel/parse/OpenChannelResponseDeserializer.java b/src/main/java/com/urbanairship/api/channel/parse/OpenChannelResponseDeserializer.java
new file mode 100644
index 0000000..4a8de89
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/channel/parse/OpenChannelResponseDeserializer.java
@@ -0,0 +1,53 @@
+package com.urbanairship.api.channel.parse;
+
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
+import com.google.common.base.Supplier;
+import com.google.common.collect.ImmutableMap;
+import com.urbanairship.api.channel.Constants;
+import com.urbanairship.api.channel.model.OpenChannelResponse;
+import com.urbanairship.api.common.parse.FieldParser;
+import com.urbanairship.api.common.parse.FieldParserRegistry;
+import com.urbanairship.api.common.parse.MapFieldParserRegistry;
+import com.urbanairship.api.common.parse.StandardObjectDeserializer;
+
+import java.io.IOException;
+
+public class OpenChannelResponseDeserializer extends JsonDeserializer<OpenChannelResponse> {
+    private static final FieldParserRegistry<OpenChannelResponse, OpenChannelResponseReader> FIELD_PARSERS = new MapFieldParserRegistry<OpenChannelResponse, OpenChannelResponseReader>(
+            ImmutableMap.<String, FieldParser<OpenChannelResponseReader>>builder()
+            .put("ok", new FieldParser<OpenChannelResponseReader>() {
+                @Override
+                public void parse(OpenChannelResponseReader reader, JsonParser parser, DeserializationContext context) throws IOException {
+                    reader.readOk(parser);
+                }
+            })
+            .put(Constants.CHANNEL_ID, new FieldParser<OpenChannelResponseReader>() {
+                @Override
+                public void parse(OpenChannelResponseReader reader, JsonParser parser, DeserializationContext context) throws IOException {
+                    reader.readChannelId(parser);
+                }
+            })
+            .build()
+    );
+
+    private final StandardObjectDeserializer<OpenChannelResponse, ?> deserializer;
+
+    public OpenChannelResponseDeserializer() {
+        deserializer = new StandardObjectDeserializer<OpenChannelResponse, OpenChannelResponseReader>(
+                FIELD_PARSERS,
+                new Supplier<OpenChannelResponseReader>() {
+                    @Override
+                    public OpenChannelResponseReader get() {
+                        return new OpenChannelResponseReader();
+                    }
+                }
+        );
+    }
+
+    @Override
+    public OpenChannelResponse deserialize(JsonParser parser, DeserializationContext context) throws IOException {
+        return deserializer.deserialize(parser, context);
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/channel/parse/OpenChannelResponseReader.java b/src/main/java/com/urbanairship/api/channel/parse/OpenChannelResponseReader.java
new file mode 100644
index 0000000..f0504a4
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/channel/parse/OpenChannelResponseReader.java
@@ -0,0 +1,33 @@
+package com.urbanairship.api.channel.parse;
+
+import com.fasterxml.jackson.core.JsonParser;
+import com.urbanairship.api.channel.model.OpenChannelResponse;
+import com.urbanairship.api.common.parse.APIParsingException;
+import com.urbanairship.api.common.parse.JsonObjectReader;
+
+import java.io.IOException;
+
+public class OpenChannelResponseReader implements JsonObjectReader<OpenChannelResponse> {
+    private final OpenChannelResponse.Builder builder;
+
+    public OpenChannelResponseReader() {
+        this.builder = OpenChannelResponse.newBuilder();
+    }
+
+    public void readOk(JsonParser parser) throws IOException {
+        builder.setOk(parser.getBooleanValue());
+    }
+
+    public void readChannelId(JsonParser parser) throws IOException {
+        builder.setChannelId(parser.readValueAs(String.class));
+    }
+
+    @Override
+    public OpenChannelResponse validateAndBuild() throws IOException {
+        try {
+            return builder.build();
+        } catch (Exception e) {
+            throw new APIParsingException(e.getMessage());
+        }
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/channel/parse/ios/IosSettingsDeserializer.java b/src/main/java/com/urbanairship/api/channel/parse/ios/IosSettingsDeserializer.java
index 12ca154..8497892 100644
--- a/src/main/java/com/urbanairship/api/channel/parse/ios/IosSettingsDeserializer.java
+++ b/src/main/java/com/urbanairship/api/channel/parse/ios/IosSettingsDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.channel.parse.ios;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.channel.Constants;
@@ -12,9 +15,6 @@ import com.urbanairship.api.common.parse.FieldParser;
 import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/channel/parse/ios/IosSettingsReader.java b/src/main/java/com/urbanairship/api/channel/parse/ios/IosSettingsReader.java
index 9c372ec..7b062fe 100644
--- a/src/main/java/com/urbanairship/api/channel/parse/ios/IosSettingsReader.java
+++ b/src/main/java/com/urbanairship/api/channel/parse/ios/IosSettingsReader.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.channel.parse.ios;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.channel.model.ios.IosSettings;
 import com.urbanairship.api.channel.model.ios.QuietTime;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/channel/parse/ios/QuietTimeDeserializer.java b/src/main/java/com/urbanairship/api/channel/parse/ios/QuietTimeDeserializer.java
index 2a9557c..9e4584b 100644
--- a/src/main/java/com/urbanairship/api/channel/parse/ios/QuietTimeDeserializer.java
+++ b/src/main/java/com/urbanairship/api/channel/parse/ios/QuietTimeDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.channel.parse.ios;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.channel.Constants;
@@ -12,9 +15,6 @@ import com.urbanairship.api.common.parse.FieldParser;
 import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/channel/parse/ios/QuietTimeReader.java b/src/main/java/com/urbanairship/api/channel/parse/ios/QuietTimeReader.java
index 63af0ac..dbbb139 100644
--- a/src/main/java/com/urbanairship/api/channel/parse/ios/QuietTimeReader.java
+++ b/src/main/java/com/urbanairship/api/channel/parse/ios/QuietTimeReader.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.channel.parse.ios;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.channel.model.ios.QuietTime;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/channel/parse/open/ChannelSerializer.java b/src/main/java/com/urbanairship/api/channel/parse/open/ChannelSerializer.java
new file mode 100644
index 0000000..122db4a
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/channel/parse/open/ChannelSerializer.java
@@ -0,0 +1,50 @@
+package com.urbanairship.api.channel.parse.open;
+
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
+import com.urbanairship.api.channel.Constants;
+import com.urbanairship.api.channel.model.open.Channel;
+
+import java.io.IOException;
+
+public class ChannelSerializer extends JsonSerializer<Channel> {
+
+    @Override
+    public void serialize(Channel payload, JsonGenerator jgen, SerializerProvider provider) throws IOException {
+        jgen.writeStartObject();
+
+        jgen.writeStringField(Constants.TYPE, payload.getType().getIdentifier());
+        jgen.writeObjectField(Constants.OPEN_CHANNEL, payload.getOpen());
+
+        if (payload.getAddress().isPresent()) {
+            jgen.writeStringField(Constants.ADDRESS, payload.getAddress().get());
+        }
+
+        if (payload.getOptIn().isPresent()) {
+            jgen.writeBooleanField(Constants.OPT_IN, payload.getOptIn().get());
+        }
+
+        if (payload.getSetTags().isPresent()) {
+            jgen.writeBooleanField(Constants.SET_TAGS, payload.getSetTags().get());
+        }
+
+        if (payload.getTags().isPresent()) {
+            jgen.writeObjectField(Constants.TAGS, payload.getTags().get());
+        }
+
+        if (payload.getTimezone().isPresent()) {
+            jgen.writeStringField(Constants.TIMEZONE, payload.getTimezone().get());
+        }
+
+        if (payload.getLocaleCountry().isPresent()) {
+            jgen.writeStringField(Constants.LOCALE_COUNTRY, payload.getLocaleCountry().get());
+        }
+
+        if (payload.getLocaleLanguage().isPresent()) {
+            jgen.writeStringField(Constants.LOCALE_LANGUAGE, payload.getLocaleLanguage().get());
+        }
+
+        jgen.writeEndObject();
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/channel/parse/open/OpenChannelDeserializer.java b/src/main/java/com/urbanairship/api/channel/parse/open/OpenChannelDeserializer.java
index 3c0df97..73804b6 100644
--- a/src/main/java/com/urbanairship/api/channel/parse/open/OpenChannelDeserializer.java
+++ b/src/main/java/com/urbanairship/api/channel/parse/open/OpenChannelDeserializer.java
@@ -1,5 +1,8 @@
 package com.urbanairship.api.channel.parse.open;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.channel.Constants;
@@ -8,9 +11,6 @@ import com.urbanairship.api.common.parse.FieldParser;
 import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/channel/parse/open/OpenChannelReader.java b/src/main/java/com/urbanairship/api/channel/parse/open/OpenChannelReader.java
index 4faccbc..56c19a7 100644
--- a/src/main/java/com/urbanairship/api/channel/parse/open/OpenChannelReader.java
+++ b/src/main/java/com/urbanairship/api/channel/parse/open/OpenChannelReader.java
@@ -1,12 +1,12 @@
 package com.urbanairship.api.channel.parse.open;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.channel.Constants;
 import com.urbanairship.api.channel.model.open.OpenChannel;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.common.parse.MapOfStringsDeserializer;
 import com.urbanairship.api.common.parse.StringFieldDeserializer;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/channel/parse/open/OpenChannelSerializer.java b/src/main/java/com/urbanairship/api/channel/parse/open/OpenChannelSerializer.java
new file mode 100644
index 0000000..78685ee
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/channel/parse/open/OpenChannelSerializer.java
@@ -0,0 +1,29 @@
+package com.urbanairship.api.channel.parse.open;
+
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
+import com.urbanairship.api.channel.Constants;
+import com.urbanairship.api.channel.model.open.OpenChannel;
+
+import java.io.IOException;
+
+public class OpenChannelSerializer extends JsonSerializer<OpenChannel> {
+
+    @Override
+    public void serialize(OpenChannel openChannel, JsonGenerator jgen, SerializerProvider provider) throws IOException {
+        jgen.writeStartObject();
+
+        jgen.writeStringField(Constants.OPEN_PLATFORM_NAME, openChannel.getOpenPlatformName());
+
+        if (openChannel.getOldAddress().isPresent()) {
+            jgen.writeStringField(Constants.OLD_ADDRESS, openChannel.getOldAddress().get());
+        }
+
+        if (openChannel.getIdentifiers().isPresent()) {
+            jgen.writeObjectField(Constants.IDENTIFIERS, openChannel.getIdentifiers().get());
+        }
+
+        jgen.writeEndObject();
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/urbanairship/api/channel/parse/web/SubscriptionDeserializer.java b/src/main/java/com/urbanairship/api/channel/parse/web/SubscriptionDeserializer.java
index e1e2ccf..8eab216 100644
--- a/src/main/java/com/urbanairship/api/channel/parse/web/SubscriptionDeserializer.java
+++ b/src/main/java/com/urbanairship/api/channel/parse/web/SubscriptionDeserializer.java
@@ -1,5 +1,8 @@
 package com.urbanairship.api.channel.parse.web;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.channel.Constants;
@@ -8,9 +11,6 @@ import com.urbanairship.api.common.parse.FieldParser;
 import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/channel/parse/web/SubscriptionReader.java b/src/main/java/com/urbanairship/api/channel/parse/web/SubscriptionReader.java
index 8e07c76..0b3cae9 100644
--- a/src/main/java/com/urbanairship/api/channel/parse/web/SubscriptionReader.java
+++ b/src/main/java/com/urbanairship/api/channel/parse/web/SubscriptionReader.java
@@ -1,11 +1,11 @@
 package com.urbanairship.api.channel.parse.web;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.channel.Constants;
 import com.urbanairship.api.channel.model.web.Subscription;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.common.parse.StringFieldDeserializer;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/channel/parse/web/WebSettingsDeserializer.java b/src/main/java/com/urbanairship/api/channel/parse/web/WebSettingsDeserializer.java
index d05ca68..2b31b30 100644
--- a/src/main/java/com/urbanairship/api/channel/parse/web/WebSettingsDeserializer.java
+++ b/src/main/java/com/urbanairship/api/channel/parse/web/WebSettingsDeserializer.java
@@ -1,5 +1,8 @@
 package com.urbanairship.api.channel.parse.web;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.channel.Constants;
@@ -8,9 +11,6 @@ import com.urbanairship.api.common.parse.FieldParser;
 import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/channel/parse/web/WebSettingsReader.java b/src/main/java/com/urbanairship/api/channel/parse/web/WebSettingsReader.java
index d7bfd31..79c7d04 100644
--- a/src/main/java/com/urbanairship/api/channel/parse/web/WebSettingsReader.java
+++ b/src/main/java/com/urbanairship/api/channel/parse/web/WebSettingsReader.java
@@ -1,10 +1,10 @@
 package com.urbanairship.api.channel.parse.web;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.channel.model.web.Subscription;
 import com.urbanairship.api.channel.model.web.WebSettings;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/client/AsyncRequestClient.java b/src/main/java/com/urbanairship/api/client/AsyncRequestClient.java
new file mode 100644
index 0000000..7d7d87b
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/client/AsyncRequestClient.java
@@ -0,0 +1,235 @@
+package com.urbanairship.api.client;
+
+import com.google.common.base.Optional;
+import com.google.common.base.Preconditions;
+import com.google.common.base.Predicate;
+import org.apache.http.entity.ContentType;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.BoundRequestBuilder;
+import org.asynchttpclient.DefaultAsyncHttpClient;
+import org.asynchttpclient.DefaultAsyncHttpClientConfig;
+import org.asynchttpclient.filter.FilterContext;
+import org.asynchttpclient.proxy.ProxyServer;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.IOException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.Map;
+import java.util.concurrent.Future;
+
+/**
+ * The AsyncRequestClient is the default request client used by the UrbanAirshipClient.
+ */
+public class AsyncRequestClient implements RequestClient {
+
+    private static final Logger log = LoggerFactory.getLogger(UrbanAirshipClient.class);
+
+    private final Optional<ProxyServer> proxyServer;
+
+    private final URI baseUri;
+    private final AsyncHttpClient client;
+    private final DefaultAsyncHttpClientConfig clientConfig;
+
+    private AsyncRequestClient(Builder builder) {
+        this.baseUri = URI.create(builder.baseUri);
+
+        DefaultAsyncHttpClientConfig.Builder clientConfigBuilder = builder.clientConfigBuilder;
+
+        clientConfigBuilder.addResponseFilter(new RequestRetryFilter(builder.maxRetries, Optional.fromNullable(builder.retryPredicate)));
+
+        if (Optional.fromNullable(builder.proxyServer).isPresent()) {
+            proxyServer = Optional.fromNullable(builder.proxyServer);
+            clientConfigBuilder.setProxyServer(proxyServer.get());
+            clientConfigBuilder.setRealm(proxyServer.get().getRealm());
+        } else {
+            proxyServer = Optional.absent();
+        }
+
+        this.clientConfig = clientConfigBuilder.build();
+        this.client = new DefaultAsyncHttpClient(clientConfig);
+    }
+
+    /**
+     * New AsyncRequestClient Builder.
+     *
+     * @return AsyncRequestClient Builder.
+     */
+    public static Builder newBuilder() {
+        return new Builder();
+    }
+
+    /**
+     * Get the proxy server.
+     *
+     * @return Optional ProxyServer
+     */
+    public Optional<ProxyServer> getProxyServer() {
+        return proxyServer;
+    }
+
+    /**
+     * Get the client config.
+     *
+     * @return DefaultAsyncHttpClientConfig
+     */
+    public DefaultAsyncHttpClientConfig getClientConfig() {
+        return clientConfig;
+    }
+
+
+    @Override
+    /**
+     * Command for executing Urban Airship requests asynchronously with a ResponseCallback.
+     *
+     * @param request An Urban Airship request object.
+     * @param callback A ResponseCallback instance.
+     * @return A client response future.
+     */
+    public <T> Future<Response> executeAsync(final Request<T> request, final ResponseCallback callback, Map<String, String> headers) {
+        BoundRequestBuilder requestBuilder;
+        String uri;
+
+        try {
+            uri = request.getUri(baseUri).toString();
+        } catch (URISyntaxException e) {
+            log.error("Failed to generate a request URI from base URI " + baseUri.toString(), e);
+            throw new RuntimeException(e);
+        }
+
+        switch (request.getHttpMethod()) {
+            case GET:
+                requestBuilder = client.prepareGet(uri);
+                break;
+            case PUT:
+                requestBuilder = client.preparePut(uri);
+                break;
+            case POST:
+                requestBuilder = client.preparePost(uri);
+                break;
+            case DELETE:
+                requestBuilder = client.prepareDelete(uri);
+                break;
+            default:
+                requestBuilder = client.prepareGet(uri);
+                break;
+        }
+
+        //Headers
+        for (Map.Entry<String, String> entry : headers.entrySet()) {
+            requestBuilder.addHeader(entry.getKey(), entry.getValue());
+        }
+
+        // Body
+        String body = request.getRequestBody();
+        ContentType contentType = request.getContentType();
+        if (body != null && contentType != null) {
+            requestBuilder.setBody(body.getBytes(contentType.getCharset()));
+        }
+
+        log.debug(String.format("Executing Urban Airship request to %s with body %s.", uri, request.getRequestBody()));
+        ResponseAsyncHandler<T> handler = new ResponseAsyncHandler<>(Optional.fromNullable(callback), request.getResponseParser());
+        return requestBuilder.execute(handler);
+    }
+
+    /**
+     * Close the underlying HTTP client's thread pool.
+     */
+    @Override
+    public void close() throws IOException {
+        log.info("Closing client");
+        client.close();
+    }
+
+    /**
+     * AsyncRequestClient Builder.
+     */
+    public static class Builder {
+
+        private String baseUri;
+        private Integer maxRetries = 10;
+        private DefaultAsyncHttpClientConfig.Builder clientConfigBuilder = new DefaultAsyncHttpClientConfig.Builder();
+        private Predicate<FilterContext> retryPredicate = null;
+        private ProxyServer proxyServer;
+
+        private Builder() {
+            baseUri = "https://go.urbanairship.com";
+        }
+
+        /**
+         * Set the base URI -- defaults to "https://go.urbanairship.com"
+         * @param URI String base URI
+         * @return Builder
+         */
+        public Builder setBaseUri(String URI) {
+            this.baseUri = URI;
+            return this;
+        }
+
+        /**
+         * Set the maximum for non-POST request retries on 5xxs -- defaults to 10.
+         *
+         * @param maxRetries The maximum.
+         * @return Builder
+         */
+        public Builder setMaxRetries(Integer maxRetries) {
+            this.maxRetries = maxRetries;
+            return this;
+        }
+
+        /**
+         * Set the client config builder -- defaults to a new builder. Available for custom settings.
+         *
+         * @param clientConfigBuilder The client config builder.
+         * @return Builder
+         */
+        public Builder setClientConfigBuilder(DefaultAsyncHttpClientConfig.Builder clientConfigBuilder) {
+            this.clientConfigBuilder = clientConfigBuilder;
+            return this;
+        }
+
+        /**
+         * Set the proxy server builder.
+         *
+         * @param proxyServer ProxyServer
+         * @return Builder
+         */
+        public Builder setProxyServer(ProxyServer proxyServer) {
+            this.proxyServer = proxyServer;
+            return this;
+        }
+
+        /**
+         * Set an optional predicate for allowing request retries on 5xxs.
+         *
+         * @param retryPredicate The retry predicate.
+         * @return Builder
+         */
+        public Builder setRetryPredicate(Predicate<FilterContext> retryPredicate) {
+            this.retryPredicate = retryPredicate;
+            return this;
+        }
+
+        /**
+         * Build an UrbanAirshipClient object.  Will fail if any of the following
+         * preconditions are not met.
+         * <pre>
+         * 1. App key must be set.
+         * 2. App secret must be set.
+         * 3. The base URI has been overridden but not set.
+         * 4. Max for non-POST 5xx retries must be set, already defaults to 10.
+         * 5. HTTP client config builder must be set, already defaults to a new builder.
+         * </pre>
+         *
+         * @return UrbanAirshipClient
+         */
+        public AsyncRequestClient build() {
+            Preconditions.checkNotNull(baseUri, "base URI needed to build APIClient");
+            Preconditions.checkNotNull(maxRetries, "max non-POST retries needed to build APIClient");
+            Preconditions.checkNotNull(clientConfigBuilder, "Async HTTP client config builder needed to build APIClient");
+
+            return new AsyncRequestClient(this);
+        }
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/client/ProxyInfo.java b/src/main/java/com/urbanairship/api/client/ProxyInfo.java
deleted file mode 100644
index ec67040..0000000
--- a/src/main/java/com/urbanairship/api/client/ProxyInfo.java
+++ /dev/null
@@ -1,214 +0,0 @@
-/*
- * Copyright (c) 2013-2016.  Urban Airship and Contributors
- */
-
-package com.urbanairship.api.client;
-
-import com.google.common.base.Preconditions;
-import org.apache.commons.lang.StringUtils;
-
-
-/**
- * Wrapper class for ProxyServer metadata.
- */
-public final class ProxyInfo {
-
-    private final ProxyInfoProtocol protocol;
-    private final String host;
-    private final Integer port;
-    private final String principal;
-    private final String password;
-
-    private ProxyInfo(Builder builder) {
-        this.protocol = builder.protocol;
-        this.host = builder.host;
-        this.port = builder.port;
-        this.principal = builder.principal;
-        this.password = builder.password;
-    }
-
-    /**
-     * Builder factory method.
-     *
-     * @return ProxyInfo Builder
-     */
-    public static Builder newBuilder() {
-        return new Builder();
-    }
-
-    /**
-     * Get the proxy protocol.
-     *
-     * @return The protocol.
-     */
-    public String getProtocol() {
-        return protocol.toString().toLowerCase();
-    }
-
-    /**
-     * Get the proxy host.
-     *
-     * @return The host.
-     */
-    public String getHost() {
-        return host;
-    }
-
-    /**
-     * Get the proxy port.
-     *
-     * @return The port.
-     */
-    public Integer getPort() {
-        return port;
-    }
-
-    /**
-     * Get the proxy principal.
-     *
-     * @return The principal.
-     */
-    public String getPrincipal() {
-        return principal;
-    }
-
-    /**
-     * Get the proxy password.
-     *
-     * @return The password.
-     */
-    public String getPassword() {
-        return password;
-    }
-
-    @Override
-    public String toString() {
-        return "ProxyInfo{" +
-            "protocol='" + protocol + '\'' +
-            ", host='" + host + '\'' +
-            ", port=" + port +
-            ", principal=" + principal +
-            ", password=" + password +
-            '}';
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (!(o instanceof ProxyInfo)) return false;
-
-        ProxyInfo proxyInfo = (ProxyInfo) o;
-
-        if (host != null ? !host.equals(proxyInfo.host) : proxyInfo.host != null) return false;
-        if (password != null ? !password.equals(proxyInfo.password) : proxyInfo.password != null) return false;
-        if (port != null ? !port.equals(proxyInfo.port) : proxyInfo.port != null) return false;
-        if (principal != null ? !principal.equals(proxyInfo.principal) : proxyInfo.principal != null) return false;
-        if (protocol != null ? !protocol.equals(proxyInfo.protocol) : proxyInfo.protocol != null) return false;
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = protocol != null ? protocol.hashCode() : 0;
-        result = 31 * result + (host != null ? host.hashCode() : 0);
-        result = 31 * result + (port != null ? port.hashCode() : 0);
-        result = 31 * result + (principal != null ? principal.hashCode() : 0);
-        result = 31 * result + (password != null ? password.hashCode() : 0);
-        return result;
-    }
-
-    public static class Builder {
-
-        private ProxyInfoProtocol protocol = ProxyInfoProtocol.HTTPS;
-        private String host;
-        private int port = -1;
-        private String principal = null;
-        private String password = null;
-
-        private Builder() {
-        }
-
-        /**
-         * Set the proxy protocol. Can be https or http.
-         *
-         * @param protocol The protocol.
-         * @return Builder
-         */
-        public Builder setProtocol(ProxyInfoProtocol protocol) {
-            this.protocol = protocol;
-            return this;
-        }
-
-        /**
-         * Set the proxy host.
-         *
-         * @param host The host.
-         * @return Builder
-         */
-        public Builder setHost(String host) {
-            this.host = host;
-            return this;
-        }
-
-        /**
-         * Set the proxy port.
-         *
-         * @param port The port.
-         * @return Builder
-         */
-        public Builder setPort(int port) {
-            this.port = port;
-            return this;
-        }
-
-        /**
-         * Set the proxy principal. This is optional.
-         *
-         * @param principal The principal.
-         * @return Builder
-         */
-        public Builder setPrincipal(String principal) {
-            this.principal = principal;
-            return this;
-        }
-
-        /**
-         * Set the proxy password. This is optional.
-         *
-         * @param password The password.
-         * @return Builder
-         */
-        public Builder setPassword(String password) {
-            this.password = password;
-            return this;
-        }
-
-        /**
-         * Build a ProxyInfo object. Will fail if any of the following
-         * preconditions are not met.
-         * <pre>
-         * 1. Proxy host must be set.
-         * 2. Proxy protocol must be set - defaults to https.
-         * 3. Proxy port must be set.
-         * </pre>
-         *
-         * @return ProxyInfo object.
-         */
-        public ProxyInfo build() {
-            Preconditions.checkArgument(StringUtils.isNotEmpty(host), "Proxy host must be set.");
-            Preconditions.checkNotNull(protocol, "Proxy protocol must be set.");
-            Preconditions.checkArgument(port > 0, "Proxy port must be set.");
-
-            return new ProxyInfo(this);
-        }
-
-    }
-
-    /**
-     * Enum of available Urban Airship API protocols.
-     */
-    public enum ProxyInfoProtocol {
-        HTTP, HTTPS
-    }
-}
diff --git a/src/main/java/com/urbanairship/api/client/Request.java b/src/main/java/com/urbanairship/api/client/Request.java
index bc85f6b..fb1af1f 100644
--- a/src/main/java/com/urbanairship/api/client/Request.java
+++ b/src/main/java/com/urbanairship/api/client/Request.java
@@ -40,4 +40,6 @@ public interface Request<T> {
     URI getUri(URI baseUri) throws URISyntaxException;
 
     ResponseParser<T> getResponseParser();
+
+    boolean bearerTokenAuthRequired();
 }
\ No newline at end of file
diff --git a/src/main/java/com/urbanairship/api/client/RequestClient.java b/src/main/java/com/urbanairship/api/client/RequestClient.java
new file mode 100644
index 0000000..51c591b
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/client/RequestClient.java
@@ -0,0 +1,20 @@
+package com.urbanairship.api.client;
+
+import java.io.Closeable;
+import java.util.Map;
+import java.util.concurrent.Future;
+
+/**
+ * RequestClient must be implemented to create a custom HTTP client that is then used by UrbanAirshipClient to make requests.
+ */
+public interface RequestClient extends Closeable {
+    /**
+     * Executes the HTTP request.
+     * @param request the Request.
+     * @param callback the ResponseCallback.
+     * @param headers a Map of the headers.
+     * @param <T> type
+     * @return The Future Response.
+     */
+    public <T> Future<Response> executeAsync(final Request<T> request, final ResponseCallback callback, Map<String, String> headers);
+}
diff --git a/src/main/java/com/urbanairship/api/client/RequestError.java b/src/main/java/com/urbanairship/api/client/RequestError.java
index a3a51b6..3fe259c 100644
--- a/src/main/java/com/urbanairship/api/client/RequestError.java
+++ b/src/main/java/com/urbanairship/api/client/RequestError.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.client;
 
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.base.Optional;
 import com.urbanairship.api.client.parse.RequestErrorObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.type.TypeReference;
 
 import java.io.IOException;
 import java.util.Map;
@@ -51,8 +51,9 @@ public final class RequestError {
      * parses between three, and returns a best effort response.
      *
      * @param body Response body for the request that caused the exception
+     * @param contentType String
      * @return APIError
-     * @throws IOException
+     * @throws IOException if it fails reading the error
      */
     public static RequestError errorFromResponse(String body, String contentType) throws IOException {
 
diff --git a/src/main/java/com/urbanairship/api/client/RequestRetryFilter.java b/src/main/java/com/urbanairship/api/client/RequestRetryFilter.java
index 1a72ad4..af642a2 100644
--- a/src/main/java/com/urbanairship/api/client/RequestRetryFilter.java
+++ b/src/main/java/com/urbanairship/api/client/RequestRetryFilter.java
@@ -6,10 +6,10 @@ package com.urbanairship.api.client;
 
 import com.google.common.base.Optional;
 import com.google.common.base.Predicate;
-import com.ning.http.client.filter.FilterContext;
-import com.ning.http.client.filter.FilterException;
-import com.ning.http.client.filter.ResponseFilter;
 import org.apache.commons.lang.math.RandomUtils;
+import org.asynchttpclient.filter.FilterContext;
+import org.asynchttpclient.filter.FilterException;
+import org.asynchttpclient.filter.ResponseFilter;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
diff --git a/src/main/java/com/urbanairship/api/client/Response.java b/src/main/java/com/urbanairship/api/client/Response.java
index c05d9ab..f7b7a98 100644
--- a/src/main/java/com/urbanairship/api/client/Response.java
+++ b/src/main/java/com/urbanairship/api/client/Response.java
@@ -7,7 +7,6 @@ package com.urbanairship.api.client;
 import com.google.common.base.Optional;
 import com.google.common.collect.ImmutableMap;
 
-import java.util.Collection;
 import java.util.Map;
 
 /**
@@ -20,7 +19,7 @@ import java.util.Map;
 public class Response<T> {
 
     private final Optional<T> body;
-    private final ImmutableMap<String, Collection<String>> headers;
+    private final ImmutableMap<String, String> headers;
     private final int status;
 
     /**
@@ -30,7 +29,7 @@ public class Response<T> {
      * @param headers Response headers.
      * @param status Response status.
      */
-    Response(T body, Map<String, Collection<String>> headers, int status) {
+    Response(T body, Map<String, String> headers, int status) {
         this.body = Optional.fromNullable(body);
         this.headers = ImmutableMap.copyOf(headers);
         this.status = status;
@@ -50,7 +49,7 @@ public class Response<T> {
      *
      * @return Map of response headers.
      */
-    public ImmutableMap<String, Collection<String>> getHeaders() {
+    public ImmutableMap<String, String> getHeaders() {
         return headers;
     }
 
@@ -96,7 +95,7 @@ public class Response<T> {
 
     public static class Builder<T> {
         private T body = null;
-        private Map<String, Collection<String>> headers;
+        private Map<String, String> headers;
         private int status;
 
         /**
@@ -116,7 +115,7 @@ public class Response<T> {
          * @param headers The response headers as a map.
          * @return Builder
          */
-        public Builder setHeaders(Map<String, Collection<String>> headers) {
+        public Builder setHeaders(Map<String, String> headers) {
             this.headers = headers;
             return this;
         }
diff --git a/src/main/java/com/urbanairship/api/client/ResponseAsyncHandler.java b/src/main/java/com/urbanairship/api/client/ResponseAsyncHandler.java
index 4f3b0a2..fea1051 100644
--- a/src/main/java/com/urbanairship/api/client/ResponseAsyncHandler.java
+++ b/src/main/java/com/urbanairship/api/client/ResponseAsyncHandler.java
@@ -5,18 +5,16 @@
 package com.urbanairship.api.client;
 
 import com.google.common.base.Optional;
-import com.ning.http.client.AsyncHandler;
-import com.ning.http.client.HttpResponseBodyPart;
-import com.ning.http.client.HttpResponseHeaders;
-import com.ning.http.client.HttpResponseStatus;
+import io.netty.handler.codec.http.HttpHeaders;
 import org.apache.commons.lang.StringUtils;
+import org.asynchttpclient.AsyncHandler;
+import org.asynchttpclient.HttpResponseBodyPart;
+import org.asynchttpclient.HttpResponseStatus;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.nio.charset.StandardCharsets;
-import java.util.Collection;
 import java.util.HashMap;
-import java.util.List;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicInteger;
 
@@ -53,7 +51,7 @@ class ResponseAsyncHandler<T> implements AsyncHandler<Response> {
     }
 
     @Override
-    public STATE onStatusReceived(HttpResponseStatus responseStatus) throws Exception {
+    public State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {
         statusCode = responseStatus.getStatusCode();
 
         if (statusCode >= 200 && statusCode < 300) {
@@ -69,23 +67,22 @@ class ResponseAsyncHandler<T> implements AsyncHandler<Response> {
             isSuccessful = false;
         }
 
-        return STATE.CONTINUE;
+        return State.CONTINUE;
     }
 
     @Override
-    public STATE onHeadersReceived(HttpResponseHeaders headers) throws Exception {
+    public State onHeadersReceived(HttpHeaders httpHeaders) throws Exception {
         if (isSuccessful) {
-            responseBuilder.setHeaders(getHeaders(headers));
+            responseBuilder.setHeaders(getHeaders(httpHeaders));
         } else {
-            exceptionContentType = headers.getHeaders().getFirstValue(CONTENT_TYPE_KEY);
+            exceptionContentType = httpHeaders.get(CONTENT_TYPE_KEY);
         }
 
-        return STATE.CONTINUE;
+        return State.CONTINUE;
     }
 
-
     @Override
-    public STATE onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {
+    public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {
         String body = new String(bodyPart.getBodyPartBytes(), StandardCharsets.UTF_8);
 
         if (!isSuccessful) {
@@ -101,7 +98,7 @@ class ResponseAsyncHandler<T> implements AsyncHandler<Response> {
         }
 
         bodyBuilder.append(body);
-        return STATE.CONTINUE;
+        return State.CONTINUE;
     }
 
     @Override
@@ -132,9 +129,9 @@ class ResponseAsyncHandler<T> implements AsyncHandler<Response> {
      * @param httpResponse The HttpResponse.
      * @return An immutable map of response headers.
      */
-    private Map<String, Collection<String>> getHeaders(HttpResponseHeaders httpResponse) {
-        Map<String, Collection<String>> headers = new HashMap<>();
-        for (Map.Entry<String, List<String>> entry : httpResponse.getHeaders().entrySet()) {
+    private Map<String, String> getHeaders(HttpHeaders httpResponse) {
+        Map<String, String> headers = new HashMap<>();
+        for (Map.Entry<String, String> entry : httpResponse.entries()) {
             headers.put(entry.getKey(), entry.getValue());
         }
         return headers;
diff --git a/src/main/java/com/urbanairship/api/client/UrbanAirshipClient.java b/src/main/java/com/urbanairship/api/client/UrbanAirshipClient.java
index 797a69b..28d3e39 100644
--- a/src/main/java/com/urbanairship/api/client/UrbanAirshipClient.java
+++ b/src/main/java/com/urbanairship/api/client/UrbanAirshipClient.java
@@ -7,21 +7,14 @@ package com.urbanairship.api.client;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Optional;
 import com.google.common.base.Preconditions;
-import com.google.common.base.Predicate;
 import com.google.common.io.BaseEncoding;
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.ProxyServer;
-import com.ning.http.client.filter.FilterContext;
-import org.apache.http.entity.ContentType;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.io.Closeable;
 import java.io.IOException;
 import java.io.InputStream;
-import java.net.URI;
-import java.net.URISyntaxException;
+import java.util.HashMap;
 import java.util.Map;
 import java.util.Properties;
 import java.util.concurrent.ExecutionException;
@@ -34,181 +27,79 @@ public class UrbanAirshipClient implements Closeable {
 
     private static final Logger log = LoggerFactory.getLogger(UrbanAirshipClient.class);
 
-    private final String appKey;
-    private final String appSecret;
-    private final URI baseUri;
-    private final AsyncHttpClient client;
+    private final RequestClient client;
+    private final String key;
+    private final Optional<String> secret;
+    private final Optional<String> bearerToken;
 
-    private UrbanAirshipClient(Builder builder) {
-        this.appKey = builder.key;
-        this.appSecret = builder.secret;
-        this.baseUri = URI.create(builder.baseUri);
-
-        AsyncHttpClientConfig.Builder clientConfigBuilder = builder.clientConfigBuilder;
-        clientConfigBuilder.setUserAgent(getUserAgent());
-        clientConfigBuilder.addResponseFilter(new RequestRetryFilter(builder.maxRetries, Optional.fromNullable(builder.retryPredicate)));
+    private String userAgent;
 
-        Optional<ProxyServer> proxyServer = convertProxyInfo(Optional.fromNullable(builder.proxyInfo));
-        if (proxyServer.isPresent()) {
-            clientConfigBuilder.setProxyServer(proxyServer.get());
-        }
-
-        this.client = new AsyncHttpClient(clientConfigBuilder.build());
+    private UrbanAirshipClient(Builder builder) {
+        this.client = builder.client;
+        userAgent = getUserAgent();
+        this.key = builder.key;
+        this.secret = Optional.fromNullable(builder.secret);
+        this.bearerToken = Optional.fromNullable(builder.bearerToken);
     }
 
     /**
-     * UrbanAirshipClient builder
-     * @return Builder
+     * New UrbanAirshipClient Builder.
+     *
+     * @return UrbanAirshipClient Builder.
      */
     public static Builder newBuilder() {
         return new Builder();
     }
 
-    /**
-     * Get the app key.
-     *
-     * @return The app key.
-     */
-    public String getAppKey() {
-        return appKey;
-    }
 
-    /**
-     * Get the app secret.
-     *
-     * @return The app secret.
-     */
-    public String getAppSecret() {
-        return appSecret;
+    public <T> Future<Response> executeAsync(final Request<T> request, ResponseCallback callback) {
+        return client.executeAsync(request, callback, createHeaders(request));
     }
 
-    /**
-     * Get the base URI.
-     *
-     * @return The base URI.
-     */
-    public URI getBaseUri() {
-        return baseUri;
+    public <T> Future<Response> executeAsync(Request<T> request) {
+        return executeAsync(request, null);
     }
 
-    /**
-     * Get the underlying HTTP client.
-     *
-     * @return The HTTP client.
-     */
-    public AsyncHttpClient getClient() {
-        return client;
+    public <T> Response execute(Request<T> request) throws IOException {
+        return execute(request, null);
     }
 
-    /**
-     * Command for executing Urban Airship requests asynchronously with a ResponseCallback.
-     *
-     * @param request An Urban Airship request object.
-     * @param callback A ResponseCallback instance.
-     * @return A client response future.
-     */
-    public <T> Future<Response> executeAsync(final Request<T> request, final ResponseCallback callback) throws IOException {
-        AsyncHttpClient.BoundRequestBuilder requestBuilder;
-        String uri;
-
+    public <T> Response execute(Request<T> request, ResponseCallback callback) throws IOException {
         try {
-            uri = request.getUri(baseUri).toString();
-        } catch (URISyntaxException e) {
-            log.error("Failed to generate a request URI from base URI " + baseUri.toString(), e);
-            throw new RuntimeException(e);
+            return executeAsync(request, callback).get();
+        } catch (InterruptedException e) {
+            Thread.currentThread().interrupt();
+            throw new RuntimeException("Thread interrupted while retrieving response from future", e);
+        } catch (ExecutionException e) {
+            throw new RuntimeException("Failed to retrieve response from future", e);
         }
+    }
 
-        switch (request.getHttpMethod()) {
-            case GET:
-                requestBuilder = client.prepareGet(uri);
-                break;
-            case PUT:
-                requestBuilder = client.preparePut(uri);
-                break;
-            case POST:
-                requestBuilder = client.preparePost(uri);
-                break;
-            case DELETE:
-                requestBuilder = client.prepareDelete(uri);
-                break;
-            default:
-                requestBuilder = client.prepareGet(uri);
-                break;
-        }
+    private Map<String, String> createHeaders(Request request) {
+        Map<String, String> headers = new HashMap<>();
 
-        // Headers
+        headers.put("User-Agent", userAgent);
         Map<String, String> requestHeaders = request.getRequestHeaders();
         if (requestHeaders != null) {
             for (Map.Entry<String, String> entry : requestHeaders.entrySet()) {
-                requestBuilder.addHeader(entry.getKey(), entry.getValue());
+                headers.put(entry.getKey(), entry.getValue());
             }
         }
 
-        // Auth
-        requestBuilder.setHeader(
-            "Authorization",
-            "Basic " + BaseEncoding.base64().encode((appKey + ":" + appSecret).getBytes())
-        );
+        String auth;
 
-
-        // Body
-        String body = request.getRequestBody();
-        ContentType contentType = request.getContentType();
-        if (body != null && contentType != null) {
-            requestBuilder.setBody(body.getBytes(contentType.getCharset()));
+        if (request.bearerTokenAuthRequired()) {
+            Preconditions.checkNotNull(bearerToken.get(), "Bearer token required for request: " + request);
+            auth = "Bearer " + getBearerToken().get();
+        } else {
+            Preconditions.checkNotNull(getAppSecret().get(), "App secret required for request: " + request);
+            auth = "Basic " + BaseEncoding.base64().encode((getAppKey() + ":" + getAppSecret().get()).getBytes());
         }
 
-        log.debug(String.format("Executing Urban Airship request to %s with body %s.", uri, request.getRequestBody()));
-        ResponseAsyncHandler<T> handler = new ResponseAsyncHandler<>(Optional.fromNullable(callback), request.getResponseParser());
-        return requestBuilder.execute(handler);
-    }
-
-    /**
-     * Command for executing Urban Airship requests asynchronously without a ResponseCallback.
-     *
-     * @param request An Urban Airship request object.
-     * @return A client response future.
-     * @throws IOException
-     */
-    public <T> Future<Response> executeAsync(final Request<T> request) throws IOException {
-        return executeAsync(request, null);
-    }
-
-    /**
-     * Command for executing Urban Airship requests synchronously with a ResponseCallback.
-     *
-     * @param request An Urban Airship request object.
-     * @param callback A ResponseCallback instance.
-     * @throws IOException
-     */
-    public <T> Response execute(Request<T> request, ResponseCallback callback) throws IOException {
-        try {
-            return executeAsync(request, callback).get();
-        } catch (InterruptedException e) {
-            Thread.currentThread().interrupt();
-            throw new RuntimeException("Thread interrupted while retrieving response from future", e);
-        } catch (ExecutionException e) {
-            throw new RuntimeException("Failed to retrieve response from future", e);
-        }
-    }
+        headers.put("Authorization", auth);
+        headers.put("X-UA-Appkey", getAppKey());
 
-    /**
-     * Command for executing Urban Airship requests synchronously without a ResponseCallback.
-     *
-     * @param request An Urban Airship request object.
-     * @return A client response.
-     */
-    public <T> Response execute(Request<T> request) throws IOException {
-        return execute(request, null);
-    }
-
-    /**
-     * Close the underlying HTTP client's thread pool.
-     */
-    @Override
-    public void close() {
-        log.info("Closing client");
-        client.close();
+        return headers;
     }
 
     /**
@@ -235,84 +126,55 @@ public class UrbanAirshipClient implements Closeable {
     }
 
     /**
-     * Convert the ProxyInfo wrapper into a ProxyServer instance.
-     *
-     * @param proxyInfo An optional ProxyInfo instance.
-     * @return An optional ProxyServer instance.
+     * Close the underlying HTTP client's thread pool.
      */
-    private Optional<ProxyServer> convertProxyInfo(Optional<ProxyInfo> proxyInfo) {
-        if (proxyInfo.isPresent()) {
-            ProxyServer.Protocol protocol = ProxyServer.Protocol.HTTPS;
-            for (ProxyServer.Protocol proto : ProxyServer.Protocol.values()) {
-                if (proxyInfo.get().getProtocol().equals(proto.getProtocol())) {
-                    protocol = proto;
-                }
-            }
-
-            ProxyServer proxyServer = new ProxyServer(
-                protocol,
-                proxyInfo.get().getHost(),
-                proxyInfo.get().getPort(),
-                proxyInfo.get().getPrincipal(),
-                proxyInfo.get().getPassword()
-            );
-            return Optional.of(proxyServer);
-        }
-        return Optional.absent();
-    }
-
-
-    /* Object methods */
-
     @Override
-    public String toString() {
-        return "UrbanAirshipClient{" +
-            "appKey='" + appKey + '\'' +
-            ", appSecret='" + appSecret + '\'' +
-            ", baseUri=" + baseUri +
-            ", client=" + client +
-            '}';
+    public void close() throws IOException {
+        log.info("Closing client");
+        client.close();
     }
 
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (!(o instanceof UrbanAirshipClient)) return false;
-
-        UrbanAirshipClient that = (UrbanAirshipClient) o;
-
-        if (appKey != null ? !appKey.equals(that.appKey) : that.appKey != null) return false;
-        if (appSecret != null ? !appSecret.equals(that.appSecret) : that.appSecret != null) return false;
-        if (baseUri != null ? !baseUri.equals(that.baseUri) : that.baseUri != null) return false;
-        if (client != null ? !client.equals(that.client) : that.client != null) return false;
+    /**
+     * Get the app key.
+     * @return The app key.
+     */
+    public String getAppKey() {
+        return key;
+    }
 
-        return true;
+    /**
+     * Get the app secret.
+     * @return The app secret.
+     */
+    public Optional<String> getAppSecret() {
+        return secret;
     }
 
-    @Override
-    public int hashCode() {
-        int result = appKey != null ? appKey.hashCode() : 0;
-        result = 31 * result + (appSecret != null ? appSecret.hashCode() : 0);
-        result = 31 * result + (baseUri != null ? baseUri.hashCode() : 0);
-        result = 31 * result + (client != null ? client.hashCode() : 0);
-        return result;
+    /**
+     * Get the bearer token.
+     * @return The bearer token.
+     */
+    public Optional<String> getBearerToken() {
+        return bearerToken;
     }
 
-    /* Builder for newAPIClient */
+    /**
+     * Get the request client.
+     * @return The RequestClient.
+     */
+    public RequestClient getRequestClient() {
+        return client;
+    }
 
+    /**
+     * UrbanAirshipClient builder.
+     */
     public static class Builder {
 
         private String key;
         private String secret;
-        private String baseUri;
-        private Integer maxRetries = 10;
-        private AsyncHttpClientConfig.Builder clientConfigBuilder = new AsyncHttpClientConfig.Builder();
-        private ProxyInfo proxyInfo = null;
-        private Predicate<FilterContext> retryPredicate = null;
-
-        private Builder() {
-            baseUri = "https://go.urbanairship.com";
-        }
+        private String bearerToken;
+        private RequestClient client;
 
         /**
          * Set the app key.
@@ -335,56 +197,22 @@ public class UrbanAirshipClient implements Closeable {
         }
 
         /**
-         * Set the base URI -- defaults to "https://go.urbanairship.com"
-         * @param URI String base URI
+         * Set the bearer token.
+         * @param bearerToken String bearer token
          * @return Builder
          */
-        public Builder setBaseUri(String URI) {
-            this.baseUri = URI;
+        public Builder setBearerToken(String bearerToken) {
+            this.bearerToken = bearerToken;
             return this;
         }
 
         /**
-         * Set the maximum for non-POST request retries on 5xxs -- defaults to 10.
-         *
-         * @param maxRetries The maximum.
+         * Set a custom client.
+         * @param client RequestClient client
          * @return Builder
          */
-        public Builder setMaxRetries(Integer maxRetries) {
-            this.maxRetries = maxRetries;
-            return this;
-        }
-
-        /**
-         * Set the client config builder -- defaults to a new builder. Available for custom settings.
-         *
-         * @param builder The client config builder.
-         * @return Builder
-         */
-        public Builder setClientConfigBuilder(AsyncHttpClientConfig.Builder builder) {
-            this.clientConfigBuilder = builder;
-            return this;
-        }
-
-        /**
-         * Set the proxy info.
-         *
-         * @param proxyInfo The proxy info.
-         * @return Builder
-         */
-        public Builder setProxyInfo(ProxyInfo proxyInfo) {
-            this.proxyInfo = proxyInfo;
-            return this;
-        }
-
-        /**
-         * Set an optional predicate for allowing request retries on 5xxs.
-         *
-         * @param retryPredicate The retry predicate.
-         * @return Builder
-         */
-        public Builder setRetryPredicate(Predicate<FilterContext> retryPredicate) {
-            this.retryPredicate = retryPredicate;
+        public Builder setClient(RequestClient client) {
+            this.client = client;
             return this;
         }
 
@@ -393,21 +221,25 @@ public class UrbanAirshipClient implements Closeable {
          * Build an UrbanAirshipClient object.  Will fail if any of the following
          * preconditions are not met.
          * <pre>
-         * 1. App key must be set.
-         * 2. App secret must be set.
+         * 1. App key or client must be set.
+         * 2. App secret or bearer token must be set if no client is provided.
          * 3. The base URI has been overridden but not set.
-         * 4. Max for non-POST 5xx retries must be set, already defaults to 10.
-         * 5. HTTP client config builder must be set, already defaults to a new builder.
+         * 4. Max for non-POST 5xx retries must be set, already defaults to 10 when using the default client.
+         * 5. HTTP client config builder must be set in the default client, already defaults to a new builder.
          * </pre>
          *
          * @return UrbanAirshipClient
          */
         public UrbanAirshipClient build() {
             Preconditions.checkNotNull(key, "app key needed to build APIClient");
-            Preconditions.checkNotNull(secret, "app secret needed to build APIClient");
-            Preconditions.checkNotNull(baseUri, "base URI needed to build APIClient");
-            Preconditions.checkNotNull(maxRetries, "max non-POST retries needed to build APIClient");
-            Preconditions.checkNotNull(clientConfigBuilder, "Async HTTP client config builder needed to build APIClient");
+            if (secret == null && bearerToken == null) {
+                throw new NullPointerException("secret or the bearer token must be set");
+            }
+
+            if (client == null) {
+                client = AsyncRequestClient.newBuilder()
+                        .build();
+            }
 
             return new UrbanAirshipClient(this);
         }
diff --git a/src/main/java/com/urbanairship/api/client/parse/RequestErrorDeserializer.java b/src/main/java/com/urbanairship/api/client/parse/RequestErrorDeserializer.java
index d73291f..fe026bd 100644
--- a/src/main/java/com/urbanairship/api/client/parse/RequestErrorDeserializer.java
+++ b/src/main/java/com/urbanairship/api/client/parse/RequestErrorDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.client.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.client.RequestError;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParser;
 import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/client/parse/RequestErrorDetailsDeserializer.java b/src/main/java/com/urbanairship/api/client/parse/RequestErrorDetailsDeserializer.java
index ca7e910..9fb9b2d 100644
--- a/src/main/java/com/urbanairship/api/client/parse/RequestErrorDetailsDeserializer.java
+++ b/src/main/java/com/urbanairship/api/client/parse/RequestErrorDetailsDeserializer.java
@@ -5,6 +5,9 @@
 package com.urbanairship.api.client.parse;
 
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.client.RequestErrorDetails;
@@ -12,9 +15,6 @@ import com.urbanairship.api.common.parse.FieldParser;
 import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/client/parse/RequestErrorDetailsReader.java b/src/main/java/com/urbanairship/api/client/parse/RequestErrorDetailsReader.java
index 4b3a91b..46aa655 100644
--- a/src/main/java/com/urbanairship/api/client/parse/RequestErrorDetailsReader.java
+++ b/src/main/java/com/urbanairship/api/client/parse/RequestErrorDetailsReader.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.client.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.client.RequestErrorDetails;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/client/parse/RequestErrorObjectMapper.java b/src/main/java/com/urbanairship/api/client/parse/RequestErrorObjectMapper.java
index 4cbe166..1b166f2 100644
--- a/src/main/java/com/urbanairship/api/client/parse/RequestErrorObjectMapper.java
+++ b/src/main/java/com/urbanairship/api/client/parse/RequestErrorObjectMapper.java
@@ -4,12 +4,12 @@
 
 package com.urbanairship.api.client.parse;
 
+import com.fasterxml.jackson.core.Version;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.module.SimpleModule;
 import com.urbanairship.api.client.RequestError;
 import com.urbanairship.api.client.RequestErrorDetails;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.Version;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.map.module.SimpleModule;
 
 /*
 This is where object serialization and deserialization are registered with
diff --git a/src/main/java/com/urbanairship/api/client/parse/RequestErrorReader.java b/src/main/java/com/urbanairship/api/client/parse/RequestErrorReader.java
index c1ac4ac..0d89461 100644
--- a/src/main/java/com/urbanairship/api/client/parse/RequestErrorReader.java
+++ b/src/main/java/com/urbanairship/api/client/parse/RequestErrorReader.java
@@ -5,11 +5,11 @@
 package com.urbanairship.api.client.parse;
 
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.client.RequestError;
 import com.urbanairship.api.client.RequestErrorDetails;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/client/parse/StreamLocationDeserializer.java b/src/main/java/com/urbanairship/api/client/parse/StreamLocationDeserializer.java
index e274760..d2892c6 100644
--- a/src/main/java/com/urbanairship/api/client/parse/StreamLocationDeserializer.java
+++ b/src/main/java/com/urbanairship/api/client/parse/StreamLocationDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.client.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.client.RequestErrorDetails;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParser;
 import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/client/parse/StreamLocationReader.java b/src/main/java/com/urbanairship/api/client/parse/StreamLocationReader.java
index 22e7cef..f26d5a2 100644
--- a/src/main/java/com/urbanairship/api/client/parse/StreamLocationReader.java
+++ b/src/main/java/com/urbanairship/api/client/parse/StreamLocationReader.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.client.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.client.RequestErrorDetails;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/common/parse/APIParsingException.java b/src/main/java/com/urbanairship/api/common/parse/APIParsingException.java
index 16fba12..2583075 100644
--- a/src/main/java/com/urbanairship/api/common/parse/APIParsingException.java
+++ b/src/main/java/com/urbanairship/api/common/parse/APIParsingException.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.common.parse;
 
+import com.fasterxml.jackson.core.JsonLocation;
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonStreamContext;
 import com.google.common.base.Optional;
-import org.codehaus.jackson.JsonLocation;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.JsonStreamContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
diff --git a/src/main/java/com/urbanairship/api/common/parse/BooleanFieldDeserializer.java b/src/main/java/com/urbanairship/api/common/parse/BooleanFieldDeserializer.java
index 15fe6a1..ef767af 100644
--- a/src/main/java/com/urbanairship/api/common/parse/BooleanFieldDeserializer.java
+++ b/src/main/java/com/urbanairship/api/common/parse/BooleanFieldDeserializer.java
@@ -4,8 +4,9 @@
 
 package com.urbanairship.api.common.parse;
 
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.JsonToken;
+
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonToken;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/common/parse/CommonObjectMapper.java b/src/main/java/com/urbanairship/api/common/parse/CommonObjectMapper.java
index bc08812..b9c8129 100644
--- a/src/main/java/com/urbanairship/api/common/parse/CommonObjectMapper.java
+++ b/src/main/java/com/urbanairship/api/common/parse/CommonObjectMapper.java
@@ -4,10 +4,11 @@
 
 package com.urbanairship.api.common.parse;
 
-import org.codehaus.jackson.Version;
-import org.codehaus.jackson.map.DeserializationConfig;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.map.module.SimpleModule;
+import com.fasterxml.jackson.core.Version;
+import com.fasterxml.jackson.databind.DeserializationFeature;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.module.SimpleModule;
+import com.fasterxml.jackson.datatype.joda.JodaModule;
 import org.joda.time.DateTime;
 
 public class CommonObjectMapper {
@@ -21,7 +22,7 @@ public class CommonObjectMapper {
             .addDeserializer(DateTime.class, new DateTimeDeserializer());
 
         MAPPER.registerModule(MODULE);
-        MAPPER.configure(DeserializationConfig.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
+        MAPPER.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
     }
 
     public static SimpleModule getModule() {
diff --git a/src/main/java/com/urbanairship/api/common/parse/DateFormats.java b/src/main/java/com/urbanairship/api/common/parse/DateFormats.java
index 74027e4..b89e80d 100644
--- a/src/main/java/com/urbanairship/api/common/parse/DateFormats.java
+++ b/src/main/java/com/urbanairship/api/common/parse/DateFormats.java
@@ -16,7 +16,7 @@ public class DateFormats {
 
     public static final DateTimeFormatter DATE_PARSER = new DateTimeFormatterBuilder()
             .append(ISODateTimeFormat.date())
-            .append(null, new DateTimeParser[] {SPACE_PARSER, T_PARSER})
+            .append(null, new DateTimeParser[]{SPACE_PARSER, T_PARSER})
             .append(ISODateTimeFormat.hourMinuteSecond())
             .toFormatter()
             .withZoneUTC();
@@ -27,21 +27,21 @@ public class DateFormats {
 
     public static final DateTimeFormatter SECONDS_FORMAT = new DateTimeFormatterBuilder()
             .append(ISODateTimeFormat.date())
-            .append(null, new DateTimeParser[] {SPACE_PARSER, T_PARSER})
+            .append(null, new DateTimeParser[]{SPACE_PARSER, T_PARSER})
             .append(ISODateTimeFormat.hourMinuteSecond())
             .toFormatter()
             .withZoneUTC();
 
     public static final DateTimeFormatter MINUTES_FORMAT = new DateTimeFormatterBuilder()
             .append(ISODateTimeFormat.date())
-            .append(null, new DateTimeParser[] {SPACE_PARSER, T_PARSER})
+            .append(null, new DateTimeParser[]{SPACE_PARSER, T_PARSER})
             .append(ISODateTimeFormat.hourMinute())
             .toFormatter()
             .withZoneUTC();
 
     public static final DateTimeFormatter HOURS_FORMAT = new DateTimeFormatterBuilder()
             .append(ISODateTimeFormat.date())
-            .append(null, new DateTimeParser[] {SPACE_PARSER, T_PARSER})
+            .append(null, new DateTimeParser[]{SPACE_PARSER, T_PARSER})
             .append(ISODateTimeFormat.hour())
             .toFormatter()
             .withZoneUTC();
@@ -54,5 +54,6 @@ public class DateFormats {
 
     public static final DateTimeFormatter YEARS_FORMAT = ISODateTimeFormat.year().withZoneUTC();
 
-    private DateFormats() { }
+    private DateFormats() {
+    }
 }
diff --git a/src/main/java/com/urbanairship/api/common/parse/DateTimeDeserializer.java b/src/main/java/com/urbanairship/api/common/parse/DateTimeDeserializer.java
index a97a2fb..ee71c52 100644
--- a/src/main/java/com/urbanairship/api/common/parse/DateTimeDeserializer.java
+++ b/src/main/java/com/urbanairship/api/common/parse/DateTimeDeserializer.java
@@ -4,9 +4,9 @@
 
 package com.urbanairship.api.common.parse;
 
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import org.joda.time.DateTime;
 
 import java.io.IOException;
diff --git a/src/main/java/com/urbanairship/api/common/parse/DateTimeSerializer.java b/src/main/java/com/urbanairship/api/common/parse/DateTimeSerializer.java
index cff33c6..41ffe34 100644
--- a/src/main/java/com/urbanairship/api/common/parse/DateTimeSerializer.java
+++ b/src/main/java/com/urbanairship/api/common/parse/DateTimeSerializer.java
@@ -4,9 +4,9 @@
 
 package com.urbanairship.api.common.parse;
 
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import org.joda.time.DateTime;
 
 import java.io.IOException;
diff --git a/src/main/java/com/urbanairship/api/common/parse/FieldParser.java b/src/main/java/com/urbanairship/api/common/parse/FieldParser.java
index 8ca8805..3f064e5 100644
--- a/src/main/java/com/urbanairship/api/common/parse/FieldParser.java
+++ b/src/main/java/com/urbanairship/api/common/parse/FieldParser.java
@@ -4,8 +4,9 @@
 
 package com.urbanairship.api.common.parse;
 
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
+
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/common/parse/IntFieldDeserializer.java b/src/main/java/com/urbanairship/api/common/parse/IntFieldDeserializer.java
index f9c5e4a..0ba4ce9 100644
--- a/src/main/java/com/urbanairship/api/common/parse/IntFieldDeserializer.java
+++ b/src/main/java/com/urbanairship/api/common/parse/IntFieldDeserializer.java
@@ -4,8 +4,9 @@
 
 package com.urbanairship.api.common.parse;
 
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.JsonToken;
+
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonToken;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/common/parse/ListOfStringsDeserializer.java b/src/main/java/com/urbanairship/api/common/parse/ListOfStringsDeserializer.java
index 0ced662..68d1cc4 100644
--- a/src/main/java/com/urbanairship/api/common/parse/ListOfStringsDeserializer.java
+++ b/src/main/java/com/urbanairship/api/common/parse/ListOfStringsDeserializer.java
@@ -4,8 +4,9 @@
 
 package com.urbanairship.api.common.parse;
 
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
+
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
 
 import java.io.IOException;
 import java.util.List;
diff --git a/src/main/java/com/urbanairship/api/common/parse/MapOfStringsDeserializer.java b/src/main/java/com/urbanairship/api/common/parse/MapOfStringsDeserializer.java
index 37dcece..b88ee18 100644
--- a/src/main/java/com/urbanairship/api/common/parse/MapOfStringsDeserializer.java
+++ b/src/main/java/com/urbanairship/api/common/parse/MapOfStringsDeserializer.java
@@ -4,8 +4,9 @@
 
 package com.urbanairship.api.common.parse;
 
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
+
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
 
 import java.io.IOException;
 import java.util.Map;
diff --git a/src/main/java/com/urbanairship/api/common/parse/StandardObjectDeserializer.java b/src/main/java/com/urbanairship/api/common/parse/StandardObjectDeserializer.java
index ff62ee2..4cc3f31 100644
--- a/src/main/java/com/urbanairship/api/common/parse/StandardObjectDeserializer.java
+++ b/src/main/java/com/urbanairship/api/common/parse/StandardObjectDeserializer.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.common.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonToken;
+import com.fasterxml.jackson.databind.DeserializationContext;
 import com.google.common.base.Optional;
 import com.google.common.base.Supplier;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.JsonToken;
-import org.codehaus.jackson.map.DeserializationContext;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/common/parse/StringFieldDeserializer.java b/src/main/java/com/urbanairship/api/common/parse/StringFieldDeserializer.java
index 209e93d..7c7ee1e 100644
--- a/src/main/java/com/urbanairship/api/common/parse/StringFieldDeserializer.java
+++ b/src/main/java/com/urbanairship/api/common/parse/StringFieldDeserializer.java
@@ -4,8 +4,9 @@
 
 package com.urbanairship.api.common.parse;
 
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.JsonToken;
+
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonToken;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/customevents/CustomEventRequest.java b/src/main/java/com/urbanairship/api/customevents/CustomEventRequest.java
new file mode 100644
index 0000000..d4240db
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/customevents/CustomEventRequest.java
@@ -0,0 +1,76 @@
+package com.urbanairship.api.customevents;
+
+import com.google.common.base.Preconditions;
+import com.google.common.net.HttpHeaders;
+import com.urbanairship.api.client.Request;
+import com.urbanairship.api.client.RequestUtils;
+import com.urbanairship.api.client.ResponseParser;
+import com.urbanairship.api.customevents.model.CustomEventPayload;
+import com.urbanairship.api.customevents.model.CustomEventResponse;
+import com.urbanairship.api.push.parse.PushObjectMapper;
+import org.apache.http.entity.ContentType;
+
+import java.io.IOException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.HashMap;
+import java.util.Map;
+
+public class CustomEventRequest implements Request<CustomEventResponse> {
+
+    private final static String API_CUSTOM_EVENTS_PATH = "/api/custom-events/";
+
+    private final CustomEventPayload payload;
+
+    private CustomEventRequest(CustomEventPayload payload) {
+        Preconditions.checkNotNull(payload, "Payload required when creating a custom-events request");
+        this.payload = payload;
+    }
+
+    public static CustomEventRequest newRequest(CustomEventPayload customEventPayload) {
+        return new CustomEventRequest(customEventPayload);
+    }
+
+    @Override
+    public HttpMethod getHttpMethod() {
+        return HttpMethod.POST;
+    }
+
+    @Override
+    public String getRequestBody() {
+        return payload.toJSON();
+    }
+
+    @Override
+    public ContentType getContentType() {
+        return ContentType.APPLICATION_JSON;
+    }
+
+    @Override
+    public Map<String, String> getRequestHeaders() {
+        Map<String, String> headers = new HashMap<String, String>();
+        headers.put(HttpHeaders.CONTENT_TYPE, CONTENT_TYPE_JSON);
+        headers.put(HttpHeaders.ACCEPT, UA_VERSION_JSON);
+        return headers;
+    }
+
+    @Override
+    public URI getUri(URI baseUri) throws URISyntaxException {
+        return RequestUtils.resolveURI(baseUri, API_CUSTOM_EVENTS_PATH);
+    }
+
+    @Override
+    public ResponseParser<CustomEventResponse> getResponseParser() {
+        return new ResponseParser<CustomEventResponse>() {
+            @Override
+            public CustomEventResponse parse(String response) throws IOException {
+                return PushObjectMapper.getInstance().readValue(response, CustomEventResponse.class);
+            }
+        };
+    }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return true;
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/customevents/model/CustomEventBody.java b/src/main/java/com/urbanairship/api/customevents/model/CustomEventBody.java
new file mode 100644
index 0000000..215d55c
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/customevents/model/CustomEventBody.java
@@ -0,0 +1,277 @@
+package com.urbanairship.api.customevents.model;
+
+import com.google.common.base.Objects;
+import com.google.common.base.Optional;
+import com.google.common.base.Preconditions;
+import com.google.common.collect.ImmutableMap;
+
+import java.math.BigDecimal;
+import java.util.Map;
+
+public class CustomEventBody {
+    private final String name;
+    private final Optional<BigDecimal> value;
+    private final Optional<String> transaction;
+    private final Optional<String> interactionId;
+    private final Optional<String> interactionType;
+    private final Optional<ImmutableMap<String, String>> properties;
+    private final String sessionId;
+
+    private CustomEventBody(Builder builder) {
+        this.name = builder.name;
+        this.value = Optional.fromNullable(builder.value);
+        this.transaction = Optional.fromNullable(builder.transaction);
+        this.interactionId = Optional.fromNullable(builder.interactionId);
+        this.interactionType = Optional.fromNullable(builder.interactionType);
+
+        if (builder.properties.build().isEmpty()) {
+            this.properties = Optional.absent();
+        } else {
+            this.properties = Optional.of(builder.properties.build());
+        }
+
+        this.sessionId = builder.sessionId;
+    }
+
+    /**
+     * New CustomEventBody Builder
+     *
+     * @return Builder
+     */
+    public static Builder newBuilder() {
+        return new Builder();
+    }
+
+    /**
+     * Set the name of a description of what happened. Urban Airship’s analytics systems
+     * will roll up events with the same name, providing counts and total value
+     * associated with the event.
+     *
+     * @return String
+     */
+    public String getName() {
+        return name;
+    }
+
+    /**
+     * Get the value. If the event is associated with a count or amount, the value field carries
+     * that information. Our system will treat this field as though it were money—mathematical
+     * operations will use fixed precision representations of the field. We will respect up
+     * to six digits of precision to the right of the decimal point. This field is optional;
+     * if it is absent its value will default to zero.
+     *
+     * @return Optional BigDecimal
+     */
+    public Optional<BigDecimal> getValue() {
+        return value;
+    }
+
+    /**
+     * Get the transaction. Optional. If the event is one in a series representing a single
+     * transaction, use the transaction field to tie them together.
+     *
+     * @return Optional String
+     */
+    public Optional<String> getTransaction() {
+        return transaction;
+    }
+
+    /**
+     * Get the interactionId. Optional. The identifier defining where the event occurred.
+     * In a traditional website, this would be the path and query string portion of the URL.
+     * In a single page app that uses hash routing, it would be the path, query string,
+     * and fragment identifier.
+     *
+     * @return Optional String
+     */
+    public Optional<String> getInteractionId() {
+        return interactionId;
+    }
+
+    /**
+     * Get the interactionType. String describing the type of interaction that led to the
+     * firing of the custom event, e.g., url, social, email.
+     *
+     * @return Optional String
+     */
+    public Optional<String> getInteractionType() {
+        return interactionType;
+    }
+
+    /**
+     * Get all property entries. Object supporting key/value pairs that describe event
+     * custom properties. Events are limited to 100 properties.
+     * Maximum 255 character string length.
+     *
+     * @return Optional ImmutableMap of Strings
+     */
+    public Optional<ImmutableMap<String, String>> getProperties() {
+        return properties;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+
+        CustomEventBody that = (CustomEventBody) o;
+
+        return Objects.equal(name, that.name) &&
+                Objects.equal(value, that.value) &&
+                Objects.equal(transaction, that.transaction) &&
+                Objects.equal(interactionId, that.interactionId) &&
+                Objects.equal(interactionType, that.interactionType) &&
+                Objects.equal(properties, that.properties) &&
+                Objects.equal(sessionId, that.sessionId);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hashCode(name, value, transaction, interactionId,
+                interactionType, properties, sessionId);
+    }
+
+    /**
+     * Get the sessionID. The user session during which the event occurred.
+     * You must supply and maintain session identifiers.
+     *
+     * @return String
+     */
+    public String getSessionId() {
+        return sessionId;
+    }
+
+    /**
+     * CustomEventBody Builder
+     */
+    public static class Builder {
+        private String name = null;
+        private BigDecimal value = null;
+        private String transaction = null;
+        private String interactionId = null;
+        private String interactionType = null;
+        private ImmutableMap.Builder<String, String> properties = ImmutableMap.builder();
+        private String sessionId = null;
+
+        private Builder() {
+
+        }
+
+        /**
+         * Set the name of a description of what happened. Urban Airship’s analytics systems
+         * will roll up events with the same name, providing counts and total value
+         * associated with the event.
+         *
+         * @param name String
+         * @return CustomEventBody Builder
+         */
+        public Builder setName(String name) {
+            this.name = name;
+            return this;
+        }
+
+        /**
+         * Set the value. If the event is associated with a count or amount, the value field carries
+         * that information. Our system will treat this field as though it were money—mathematical
+         * operations will use fixed precision representations of the field. We will respect up
+         * to six digits of precision to the right of the decimal point. This field is optional;
+         * if it is absent its value will default to zero.
+         *
+         * @param value BigDecimal
+         * @return CustomEventBody Builder
+         */
+        public Builder setValue(BigDecimal value) {
+            this.value = value;
+            return this;
+        }
+
+        /**
+         * Set the transaction. Optional. If the event is one in a series representing a single
+         * transaction, use the transaction field to tie them together.
+         *
+         * @param transaction String
+         * @return CustomEventBody Builder
+         */
+        public Builder setTransaction(String transaction) {
+            this.transaction = transaction;
+            return this;
+        }
+
+        /**
+         * Set the interactionId. Optional. The identifier defining where the event occurred.
+         * In a traditional website, this would be the path and query string portion of the URL.
+         * In a single page app that uses hash routing, it would be the path, query string,
+         * and fragment identifier.
+         *
+         * @param interactionId String
+         * @return CustomEventBody Builder
+         */
+        public Builder setInteractionId(String interactionId) {
+            this.interactionId = interactionId;
+            return this;
+        }
+
+        /**
+         * Set the interactionType. String describing the type of interaction that led to the
+         * firing of the custom event, e.g., url, social, email.
+         *
+         * @param interactionType String
+         * @return CustomEventBody Builder
+         */
+        public Builder setInteractionType(String interactionType) {
+            this.interactionType = interactionType;
+            return this;
+        }
+
+        /**
+         * Add a properties entry. Object supporting key/value pairs that describe event
+         * custom properties. Events are limited to 100 properties.
+         * Maximum 255 character string length.
+         *
+         * @param key String
+         * @param value String
+         * @return CustomEventBody Builder
+         */
+        public Builder addPropertiesEntry(String key, String value) {
+            this.properties.put(key, value);
+            return this;
+        }
+
+        /**
+         * Add all property entries. Object supporting key/value pairs that describe event
+         * custom properties. Events are limited to 100 properties.
+         * Maximum 255 character string length.
+         *
+         * @param entries A Map of Strings
+         * @return CustomEventBody Builder
+         */
+        public Builder addAllPropertyEntries(Map<String, String> entries) {
+            this.properties.putAll(entries);
+            return this;
+        }
+
+        /**
+         * Set the sessionID. The user session during which the event occurred.
+         * You must supply and maintain session identifiers.
+         *
+         * @param sessionId String
+         * @return CustomEventBody Builder
+         */
+        public Builder setSessionId(String sessionId) {
+            this.sessionId = sessionId;
+            return this;
+        }
+
+        public CustomEventBody build() {
+            Preconditions.checkNotNull(name, "'name' must be set");
+            Preconditions.checkNotNull(sessionId, "'sessionId' must be set");
+
+            return new CustomEventBody(this);
+        }
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/customevents/model/CustomEventChannelType.java b/src/main/java/com/urbanairship/api/customevents/model/CustomEventChannelType.java
new file mode 100644
index 0000000..5c5344d
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/customevents/model/CustomEventChannelType.java
@@ -0,0 +1,33 @@
+package com.urbanairship.api.customevents.model;
+
+import com.google.common.base.Optional;
+
+public enum CustomEventChannelType {
+    IOS_CHANNEL("ios_channel"),
+    ANDROID_CHANNEL("android_channel"),
+    AMAZON_CHANNEL("amazon_channel");
+
+    private final String identifier;
+
+    private CustomEventChannelType() {
+        this(null);
+    }
+
+    private CustomEventChannelType(String identifier) {
+        this.identifier = identifier;
+    }
+
+    public static Optional<CustomEventChannelType> find(String identifier) {
+        for (CustomEventChannelType customEventChannelType : values()) {
+            if (customEventChannelType.getIdentifier().equals(identifier)) {
+                return Optional.of(customEventChannelType);
+            }
+        }
+
+        return Optional.absent();
+    }
+
+    public String getIdentifier() {
+        return identifier;
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/customevents/model/CustomEventPayload.java b/src/main/java/com/urbanairship/api/customevents/model/CustomEventPayload.java
new file mode 100644
index 0000000..e62b6ba
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/customevents/model/CustomEventPayload.java
@@ -0,0 +1,130 @@
+package com.urbanairship.api.customevents.model;
+
+import com.google.common.base.Objects;
+import com.google.common.base.Preconditions;
+import com.urbanairship.api.push.model.PushModelObject;
+import org.joda.time.DateTime;
+
+public class CustomEventPayload extends PushModelObject {
+    private final DateTime occurred;
+    private final CustomEventBody customEventBody;
+    private final CustomEventUser customEventUser;
+
+    private CustomEventPayload(Builder builder) {
+        this.occurred = builder.occurred;
+        this.customEventBody = builder.customEventBody;
+        this.customEventUser = builder.customEventUser;
+    }
+
+    /**
+     * New CustomEventPayload Builder.
+     *
+     * @return Builder
+     */
+    public static Builder newBuilder() {
+        return new Builder();
+    }
+
+    /**
+     * Get the date and time when the event occurred.
+     *
+     * @return DateTime
+     */
+    public DateTime getOccurred() {
+        return occurred;
+    }
+
+    /**
+     * Set the body object which describes the user action.
+     *
+     * @return CustomEventBody
+     */
+    public CustomEventBody getCustomEventBody() {
+        return customEventBody;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+
+        CustomEventPayload payload = (CustomEventPayload) o;
+
+        return Objects.equal(occurred, payload.occurred) &&
+                Objects.equal(customEventBody, payload.customEventBody) &&
+                Objects.equal(customEventUser, payload.customEventUser);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hashCode(occurred, customEventBody, customEventUser);
+    }
+
+    /**
+     * Get the CustomEventUser that is an object containing the
+     * Urban Airship channel identifier for the user who triggered the event.
+     *
+     * @return CustomEventUser
+
+     */
+    public CustomEventUser getCustomEventUser() {
+        return customEventUser;
+    }
+
+
+    /**
+     * CustomEventPayload Builder.
+     */
+    public static class Builder {
+        private DateTime occurred = null;
+        private CustomEventBody customEventBody = null;
+        private CustomEventUser customEventUser = null;
+
+        /**
+         * Set the date and time when the event occurred.
+         *
+         * @param occurred DateTime
+         * @return CustomEventPayload Builder
+         */
+        public Builder setOccurred(DateTime occurred) {
+            this.occurred = occurred;
+            return this;
+        }
+
+        /**
+         * Set the body object which describes the user action.
+         *
+         * @param customEventBody CustomEventBody
+         * @return CustomEventPayload Builder
+         */
+        public Builder setCustomEventBody(CustomEventBody customEventBody) {
+            this.customEventBody = customEventBody;
+            return this;
+        }
+
+        /**
+         * Set the CustomEventUser that is an object containing the
+         * Urban Airship channel identifier for the user who triggered the event.
+         *
+         * @param customEventUser CustomEventUser
+         * @return CustomEventPayload Builder
+         */
+        public Builder setCustomEventUser(CustomEventUser customEventUser) {
+            this.customEventUser = customEventUser;
+            return this;
+        }
+
+        public CustomEventPayload build() {
+            Preconditions.checkNotNull(occurred, "'occurred' must not be null");
+            Preconditions.checkNotNull(customEventBody, "'customEventBody' must not be null");
+            Preconditions.checkNotNull(customEventUser, "'customEventUser' must not be null");
+
+            return new CustomEventPayload(this);
+        }
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/customevents/model/CustomEventResponse.java b/src/main/java/com/urbanairship/api/customevents/model/CustomEventResponse.java
new file mode 100644
index 0000000..eb92c33
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/customevents/model/CustomEventResponse.java
@@ -0,0 +1,82 @@
+package com.urbanairship.api.customevents.model;
+
+import com.google.common.base.Objects;
+import com.google.common.base.Optional;
+
+public class CustomEventResponse {
+    private final Optional<String> operationId;
+    private final boolean ok;
+
+    public CustomEventResponse(String operationId, boolean ok) {
+        this.operationId = Optional.fromNullable(operationId);
+        this.ok = ok;
+    }
+
+    /**
+     * Get the operation id for this response. This is used by Urban Airship
+     * to track an operation through our system, and should be used when support
+     * is needed.
+     *
+     * @return Operation id for this API request
+     */
+    public Optional<String> getOperationId() {
+        return operationId;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+
+        CustomEventResponse that = (CustomEventResponse) o;
+
+        return ok == that.ok &&
+                Objects.equal(operationId, that.operationId);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hashCode(operationId, ok);
+    }
+
+    /**
+     * Get the response status as a boolean
+     * @return Response status
+     */
+
+    public boolean isOk() {
+        return ok;
+    }
+
+    public static Builder newBuilder() {
+        return new Builder();
+    }
+
+    public static class Builder {
+        private String operationId;
+        private boolean ok = false;
+
+        private Builder() {
+
+        }
+
+        public Builder addOperationId(String operationId) {
+            this.operationId = operationId;
+            return this;
+        }
+
+        public Builder setOk(boolean ok) {
+            this.ok = ok;
+            return this;
+        }
+
+        public CustomEventResponse build() {
+            return new CustomEventResponse(operationId, ok);
+        }
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/customevents/model/CustomEventUser.java b/src/main/java/com/urbanairship/api/customevents/model/CustomEventUser.java
new file mode 100644
index 0000000..cb08a78
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/customevents/model/CustomEventUser.java
@@ -0,0 +1,101 @@
+package com.urbanairship.api.customevents.model;
+
+import com.google.common.base.Objects;
+import com.google.common.base.Preconditions;
+
+public class CustomEventUser {
+
+    private final CustomEventChannelType channelType;
+    private final String channel;
+
+    private CustomEventUser(Builder builder) {
+        this.channelType = builder.channelType;
+        this.channel = builder.channel;
+    }
+
+    /**
+     * New CustomEventUser Builder
+     *
+     * @return Builder
+     */
+    public static Builder newBuilder() {
+        return new Builder();
+    }
+
+    /**
+     * Get the channel type.
+     *
+     * @return CustomEventChannelType
+     */
+    public CustomEventChannelType getChannelType() {
+        return channelType;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+
+        CustomEventUser that = (CustomEventUser) o;
+
+        return channelType == that.channelType &&
+                Objects.equal(channel, that.channel);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hashCode(channelType, channel);
+    }
+
+    /**
+     * Get the Urban Airship channel identifier for the user who triggered the event.
+     *
+     * @return String
+
+     */
+    public String getChannel() {
+        return channel;
+    }
+
+    /**
+     * CustomEventUser Builder
+     */
+    public static class Builder {
+        private String channel = null;
+        private CustomEventChannelType channelType = null;
+
+        /**
+         * Set the Urban Airship channel identifier for the user who triggered the event.
+         *
+         * @param channel String
+         * @return CustomEventUser Builder
+         */
+        public Builder setChannel(String channel) {
+            this.channel = channel;
+            return this;
+        }
+
+        /**
+         * Set the channel type.
+         *
+         * @param channelType CustomEventChannelType
+         * @return CustomEventUser Builder
+         */
+        public Builder setCustomEventChannelType(CustomEventChannelType channelType) {
+            this.channelType = channelType;
+            return this;
+        }
+
+        public CustomEventUser build() {
+            Preconditions.checkNotNull(channelType, "'channelType' must not be null");
+            Preconditions.checkNotNull(channel, "'channel' must not be null");
+
+            return new CustomEventUser(this);
+        }
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/customevents/parse/CustomEventBodyDeserializer.java b/src/main/java/com/urbanairship/api/customevents/parse/CustomEventBodyDeserializer.java
new file mode 100644
index 0000000..8d3d2bb
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/customevents/parse/CustomEventBodyDeserializer.java
@@ -0,0 +1,75 @@
+package com.urbanairship.api.customevents.parse;
+
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
+import com.google.common.base.Supplier;
+import com.google.common.collect.ImmutableMap;
+import com.urbanairship.api.common.parse.FieldParser;
+import com.urbanairship.api.common.parse.FieldParserRegistry;
+import com.urbanairship.api.common.parse.MapFieldParserRegistry;
+import com.urbanairship.api.common.parse.StandardObjectDeserializer;
+import com.urbanairship.api.customevents.model.CustomEventBody;
+
+import java.io.IOException;
+
+public class CustomEventBodyDeserializer extends JsonDeserializer<CustomEventBody> {
+    private static final FieldParserRegistry<CustomEventBody, CustomEventBodyReader> FIELD_PARSERS = new MapFieldParserRegistry<CustomEventBody, CustomEventBodyReader>(
+            ImmutableMap.<String, FieldParser<CustomEventBodyReader>>builder()
+                    .put("name", new FieldParser<CustomEventBodyReader>() {
+                        public void parse(CustomEventBodyReader reader, JsonParser json, DeserializationContext context) throws IOException {
+                            reader.readName(json);
+                        }
+                    })
+                    .put("value", new FieldParser<CustomEventBodyReader>() {
+                        public void parse(CustomEventBodyReader reader, JsonParser json, DeserializationContext context) throws IOException {
+                            reader.readValue(json);
+                        }
+                    })
+                    .put("transaction", new FieldParser<CustomEventBodyReader>() {
+                        public void parse(CustomEventBodyReader reader, JsonParser json, DeserializationContext context) throws IOException {
+                            reader.readTransaction(json);
+                        }
+                    })
+                    .put("interaction_id", new FieldParser<CustomEventBodyReader>() {
+                        public void parse(CustomEventBodyReader reader, JsonParser json, DeserializationContext context) throws IOException {
+                            reader.readInteractionId(json);
+                        }
+                    })
+                    .put("interaction_type", new FieldParser<CustomEventBodyReader>() {
+                        public void parse(CustomEventBodyReader reader, JsonParser json, DeserializationContext context) throws IOException {
+                            reader.readInteractionType(json);
+                        }
+                    })
+                    .put("properties", new FieldParser<CustomEventBodyReader>() {
+                        public void parse(CustomEventBodyReader reader, JsonParser json, DeserializationContext context) throws IOException {
+                            reader.readProperties(json);
+                        }
+                    })
+                    .put("session_id", new FieldParser<CustomEventBodyReader>() {
+                        public void parse(CustomEventBodyReader reader, JsonParser json, DeserializationContext context) throws IOException {
+                            reader.readSessionId(json);
+                        }
+                    })
+                    .build()
+    );
+
+    private final StandardObjectDeserializer<CustomEventBody, ?> deserializer;
+
+    public CustomEventBodyDeserializer() {
+        deserializer = new StandardObjectDeserializer<CustomEventBody, CustomEventBodyReader>(
+                FIELD_PARSERS,
+                new Supplier<CustomEventBodyReader>() {
+                    @Override
+                    public CustomEventBodyReader get() {
+                        return new CustomEventBodyReader();
+                    }
+                }
+        );
+    }
+
+    @Override
+    public CustomEventBody deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
+        return null;
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/customevents/parse/CustomEventBodyReader.java b/src/main/java/com/urbanairship/api/customevents/parse/CustomEventBodyReader.java
new file mode 100644
index 0000000..8b8df71
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/customevents/parse/CustomEventBodyReader.java
@@ -0,0 +1,55 @@
+package com.urbanairship.api.customevents.parse;
+
+import com.fasterxml.jackson.core.JsonParser;
+import com.urbanairship.api.common.parse.APIParsingException;
+import com.urbanairship.api.common.parse.JsonObjectReader;
+import com.urbanairship.api.common.parse.MapOfStringsDeserializer;
+import com.urbanairship.api.common.parse.StringFieldDeserializer;
+import com.urbanairship.api.customevents.model.CustomEventBody;
+
+import java.io.IOException;
+
+public class CustomEventBodyReader implements JsonObjectReader<CustomEventBody> {
+    private final CustomEventBody.Builder builder;
+
+    public CustomEventBodyReader() {
+        this.builder = CustomEventBody.newBuilder();
+    }
+
+    public void readName(JsonParser parser) throws IOException {
+        builder.setName(StringFieldDeserializer.INSTANCE.deserialize(parser, "name"));
+    }
+
+    public void readValue(JsonParser parser) throws IOException {
+        builder.setValue(parser.getDecimalValue());
+    }
+
+    public void readTransaction(JsonParser parser) throws IOException {
+        builder.setTransaction(StringFieldDeserializer.INSTANCE.deserialize(parser, "transaction"));
+    }
+
+    public void readInteractionId(JsonParser parser) throws IOException {
+        builder.setInteractionId(StringFieldDeserializer.INSTANCE.deserialize(parser, "interaction_id"));
+    }
+
+    public void readInteractionType(JsonParser parser) throws IOException {
+        builder.setInteractionType(StringFieldDeserializer.INSTANCE.deserialize(parser, "interaction_type"));
+    }
+
+    public void readProperties(JsonParser parser) throws IOException {
+        builder.addAllPropertyEntries(MapOfStringsDeserializer.INSTANCE.deserialize(parser, "properties"));
+    }
+
+    public void readSessionId(JsonParser parser) throws IOException {
+        builder.setSessionId(StringFieldDeserializer.INSTANCE.deserialize(parser, "session_id"));
+    }
+
+    @Override
+    public CustomEventBody validateAndBuild() throws IOException {
+        try {
+            return builder.build();
+        } catch (Exception e) {
+            throw new APIParsingException(e.getMessage(), e);
+        }
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/customevents/parse/CustomEventBodySerializer.java b/src/main/java/com/urbanairship/api/customevents/parse/CustomEventBodySerializer.java
new file mode 100644
index 0000000..1ce451d
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/customevents/parse/CustomEventBodySerializer.java
@@ -0,0 +1,41 @@
+package com.urbanairship.api.customevents.parse;
+
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
+import com.urbanairship.api.customevents.model.CustomEventBody;
+
+import java.io.IOException;
+
+public class CustomEventBodySerializer extends JsonSerializer<CustomEventBody> {
+
+    @Override
+    public void serialize(CustomEventBody body, JsonGenerator jgen, SerializerProvider provider) throws IOException {
+        jgen.writeStartObject();
+
+        jgen.writeStringField("name", body.getName());
+        jgen.writeStringField("session_id", body.getSessionId());
+
+        if (body.getInteractionId().isPresent()) {
+            jgen.writeStringField("interaction_id", body.getInteractionId().get());
+        }
+
+        if (body.getInteractionType().isPresent()) {
+            jgen.writeStringField("interaction_type", body.getInteractionType().get());
+        }
+
+        if (body.getTransaction().isPresent()) {
+            jgen.writeStringField("transaction", body.getTransaction().get());
+        }
+
+        if (body.getProperties().isPresent()) {
+            jgen.writeObjectField("properties", body.getProperties().get());
+        }
+
+        if (body.getValue().isPresent()) {
+            jgen.writeObjectField("value", body.getValue().get());
+        }
+
+        jgen.writeEndObject();
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/customevents/parse/CustomEventDeserializer.java b/src/main/java/com/urbanairship/api/customevents/parse/CustomEventDeserializer.java
new file mode 100644
index 0000000..a0df4a5
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/customevents/parse/CustomEventDeserializer.java
@@ -0,0 +1,59 @@
+package com.urbanairship.api.customevents.parse;
+
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
+import com.google.common.base.Supplier;
+import com.google.common.collect.ImmutableMap;
+import com.urbanairship.api.common.parse.FieldParser;
+import com.urbanairship.api.common.parse.FieldParserRegistry;
+import com.urbanairship.api.common.parse.MapFieldParserRegistry;
+import com.urbanairship.api.common.parse.StandardObjectDeserializer;
+import com.urbanairship.api.customevents.model.CustomEventPayload;
+
+import java.io.IOException;
+
+public class CustomEventDeserializer extends JsonDeserializer<CustomEventPayload> {
+
+    private static final FieldParserRegistry<CustomEventPayload, CustomEventReader> FIELD_PARSERS = new MapFieldParserRegistry<CustomEventPayload, CustomEventReader>(
+            ImmutableMap.<String, FieldParser<CustomEventReader>>builder()
+            .put("occured", new FieldParser<CustomEventReader>() {
+                @Override
+                public void parse(CustomEventReader reader, JsonParser json, DeserializationContext context) throws IOException {
+                    reader.readOccured(json);
+                }
+            })
+            .put("user", new FieldParser<CustomEventReader>() {
+                @Override
+                public void parse(CustomEventReader reader, JsonParser json, DeserializationContext context) throws IOException {
+                    reader.readUser(json);
+                }
+            })
+            .put("body", new FieldParser<CustomEventReader>() {
+                @Override
+                public void parse(CustomEventReader reader, JsonParser json, DeserializationContext context) throws IOException {
+                    reader.readBody(json);
+                }
+            })
+            .build()
+    );
+
+    private final StandardObjectDeserializer<CustomEventPayload, ?> deserializer;
+
+    public CustomEventDeserializer() {
+        deserializer = new StandardObjectDeserializer<CustomEventPayload, CustomEventReader>(
+                FIELD_PARSERS,
+                new Supplier<CustomEventReader>() {
+                    @Override
+                    public CustomEventReader get() {
+                        return new CustomEventReader();
+                    }
+                }
+        );
+    }
+
+    @Override
+    public CustomEventPayload deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
+        return deserializer.deserialize(jp, ctxt);
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/customevents/parse/CustomEventReader.java b/src/main/java/com/urbanairship/api/customevents/parse/CustomEventReader.java
new file mode 100644
index 0000000..84b4783
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/customevents/parse/CustomEventReader.java
@@ -0,0 +1,36 @@
+package com.urbanairship.api.customevents.parse;
+
+import com.fasterxml.jackson.core.JsonParser;
+import com.urbanairship.api.common.parse.JsonObjectReader;
+import com.urbanairship.api.customevents.model.CustomEventPayload;
+import com.urbanairship.api.customevents.model.CustomEventBody;
+import com.urbanairship.api.customevents.model.CustomEventUser;
+import org.joda.time.DateTime;
+
+import java.io.IOException;
+
+public class CustomEventReader implements JsonObjectReader<CustomEventPayload> {
+
+    private final CustomEventPayload.Builder builder;
+
+    public CustomEventReader() {
+        this.builder = CustomEventPayload.newBuilder();
+    }
+
+    public void readUser(JsonParser parser) throws IOException {
+        builder.setCustomEventUser(parser.readValueAs(CustomEventUser.class));
+    }
+
+    public void readBody(JsonParser parser) throws IOException {
+        builder.setCustomEventBody(parser.readValueAs(CustomEventBody.class));
+    }
+
+    public void readOccured(JsonParser parser) throws IOException {
+        builder.setOccurred(parser.readValueAs(DateTime.class));
+    }
+
+    @Override
+    public CustomEventPayload validateAndBuild() throws IOException {
+        return null;
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/customevents/parse/CustomEventResponseDeserializer.java b/src/main/java/com/urbanairship/api/customevents/parse/CustomEventResponseDeserializer.java
new file mode 100644
index 0000000..6dfee51
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/customevents/parse/CustomEventResponseDeserializer.java
@@ -0,0 +1,52 @@
+package com.urbanairship.api.customevents.parse;
+
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
+import com.google.common.base.Supplier;
+import com.google.common.collect.ImmutableMap;
+import com.urbanairship.api.common.parse.FieldParser;
+import com.urbanairship.api.common.parse.FieldParserRegistry;
+import com.urbanairship.api.common.parse.MapFieldParserRegistry;
+import com.urbanairship.api.common.parse.StandardObjectDeserializer;
+import com.urbanairship.api.customevents.model.CustomEventResponse;
+
+import java.io.IOException;
+
+public class CustomEventResponseDeserializer extends JsonDeserializer<CustomEventResponse> {
+    private static final FieldParserRegistry<CustomEventResponse, CustomEventResponseReader> FIELD_PARSERS = new MapFieldParserRegistry<CustomEventResponse, CustomEventResponseReader>(
+            ImmutableMap.<String, FieldParser<CustomEventResponseReader>>builder()
+            .put("ok", new FieldParser<CustomEventResponseReader>() {
+                @Override
+                public void parse(CustomEventResponseReader reader, JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException {
+                    reader.readOk(jsonParser);
+                }
+            })
+            .put("operationId", new FieldParser<CustomEventResponseReader>() {
+                @Override
+                public void parse(CustomEventResponseReader reader, JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException {
+                    reader.readOperationId(jsonParser);
+                }
+            })
+            .build()
+    );
+
+    private final StandardObjectDeserializer<CustomEventResponse, ?> deserializer;
+
+    public CustomEventResponseDeserializer() {
+        deserializer = new StandardObjectDeserializer<CustomEventResponse, CustomEventResponseReader>(
+                FIELD_PARSERS,
+                new Supplier<CustomEventResponseReader>(){
+                    @Override
+                    public CustomEventResponseReader get() {
+                        return new CustomEventResponseReader();
+                    }
+                }
+        );
+    }
+
+    @Override
+    public CustomEventResponse deserialize(JsonParser parser, DeserializationContext context) throws IOException {
+        return deserializer.deserialize(parser, context);
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/customevents/parse/CustomEventResponseReader.java b/src/main/java/com/urbanairship/api/customevents/parse/CustomEventResponseReader.java
new file mode 100644
index 0000000..9fe0b46
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/customevents/parse/CustomEventResponseReader.java
@@ -0,0 +1,32 @@
+package com.urbanairship.api.customevents.parse;
+
+import com.fasterxml.jackson.core.JsonParser;
+import com.urbanairship.api.common.parse.APIParsingException;
+import com.urbanairship.api.common.parse.JsonObjectReader;
+import com.urbanairship.api.customevents.model.CustomEventResponse;
+
+import java.io.IOException;
+
+public class CustomEventResponseReader implements JsonObjectReader<CustomEventResponse> {
+    private final CustomEventResponse.Builder builder;
+
+    public CustomEventResponseReader() {
+        this.builder = CustomEventResponse.newBuilder();
+    }
+
+    public void readOk(JsonParser jsonParser) throws IOException {
+        builder.setOk(jsonParser.getBooleanValue());
+    }
+
+    public void readOperationId(JsonParser jsonParser) throws IOException {
+        builder.addOperationId(jsonParser.readValueAs(String.class));
+    }
+
+    public CustomEventResponse validateAndBuild() throws IOException {
+        try {
+            return builder.build();
+        } catch (Exception e) {
+            throw new APIParsingException(e.getMessage());
+        }
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/customevents/parse/CustomEventSerializer.java b/src/main/java/com/urbanairship/api/customevents/parse/CustomEventSerializer.java
new file mode 100644
index 0000000..692569d
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/customevents/parse/CustomEventSerializer.java
@@ -0,0 +1,22 @@
+package com.urbanairship.api.customevents.parse;
+
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
+import com.urbanairship.api.customevents.model.CustomEventPayload;
+
+import java.io.IOException;
+
+public class CustomEventSerializer extends JsonSerializer<CustomEventPayload> {
+
+    @Override
+    public void serialize(CustomEventPayload event, JsonGenerator jgen, SerializerProvider provider) throws IOException {
+        jgen.writeStartObject();
+
+        jgen.writeObjectField("body", event.getCustomEventBody());
+        jgen.writeObjectField("occurred", event.getOccurred());
+        jgen.writeObjectField("user", event.getCustomEventUser());
+
+        jgen.writeEndObject();
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/customevents/parse/CustomEventUserDeserializer.java b/src/main/java/com/urbanairship/api/customevents/parse/CustomEventUserDeserializer.java
new file mode 100644
index 0000000..a5cfba8
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/customevents/parse/CustomEventUserDeserializer.java
@@ -0,0 +1,38 @@
+package com.urbanairship.api.customevents.parse;
+
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.google.common.collect.ImmutableMap;
+import com.urbanairship.api.common.parse.FieldParser;
+import com.urbanairship.api.common.parse.FieldParserRegistry;
+import com.urbanairship.api.common.parse.MapFieldParserRegistry;
+import com.urbanairship.api.customevents.model.CustomEventChannelType;
+import com.urbanairship.api.customevents.model.CustomEventUser;
+
+import java.io.IOException;
+
+public class CustomEventUserDeserializer {
+
+    private static final FieldParserRegistry<CustomEventUser, CustomEventUserReader> FIELD_PARSERS = new MapFieldParserRegistry<CustomEventUser, CustomEventUserReader>(
+            ImmutableMap.<String, FieldParser<CustomEventUserReader>>builder()
+            .put("amazon_channel", new FieldParser<CustomEventUserReader>() {
+                @Override
+                public void parse(CustomEventUserReader reader, JsonParser json, DeserializationContext context) throws IOException {
+                    reader.readChannel(CustomEventChannelType.AMAZON_CHANNEL, json);
+                }
+            })
+            .put("android_channel", new FieldParser<CustomEventUserReader>() {
+                @Override
+                public void parse(CustomEventUserReader reader, JsonParser json, DeserializationContext context) throws IOException {
+                    reader.readChannel(CustomEventChannelType.ANDROID_CHANNEL, json);
+                }
+            })
+            .put("ios_channel", new FieldParser<CustomEventUserReader>() {
+                @Override
+                public void parse(CustomEventUserReader reader, JsonParser json, DeserializationContext context) throws IOException {
+                    reader.readChannel(CustomEventChannelType.IOS_CHANNEL, json);
+                }
+            })
+            .build()
+    );
+}
diff --git a/src/main/java/com/urbanairship/api/customevents/parse/CustomEventUserReader.java b/src/main/java/com/urbanairship/api/customevents/parse/CustomEventUserReader.java
new file mode 100644
index 0000000..29c6369
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/customevents/parse/CustomEventUserReader.java
@@ -0,0 +1,33 @@
+package com.urbanairship.api.customevents.parse;
+
+
+import com.fasterxml.jackson.core.JsonParser;
+import com.urbanairship.api.common.parse.APIParsingException;
+import com.urbanairship.api.common.parse.JsonObjectReader;
+import com.urbanairship.api.customevents.model.CustomEventChannelType;
+import com.urbanairship.api.customevents.model.CustomEventUser;
+
+import java.io.IOException;
+
+public class CustomEventUserReader implements JsonObjectReader<CustomEventUser> {
+
+    private final CustomEventUser.Builder builder;
+
+    public CustomEventUserReader() {
+        builder = CustomEventUser.newBuilder();
+    }
+
+    public void readChannel(CustomEventChannelType type, JsonParser parser) throws IOException {
+        builder.setCustomEventChannelType(type);
+        builder.setChannel(parser.getText());
+    }
+
+    @Override
+    public CustomEventUser validateAndBuild() throws IOException {
+        try {
+            return builder.build();
+        } catch (Exception e) {
+            throw new APIParsingException(e.getMessage(), e);
+        }
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/customevents/parse/CustomEventUserSerializer.java b/src/main/java/com/urbanairship/api/customevents/parse/CustomEventUserSerializer.java
new file mode 100644
index 0000000..de19155
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/customevents/parse/CustomEventUserSerializer.java
@@ -0,0 +1,20 @@
+package com.urbanairship.api.customevents.parse;
+
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
+import com.urbanairship.api.customevents.model.CustomEventUser;
+
+import java.io.IOException;
+
+public class CustomEventUserSerializer extends JsonSerializer<CustomEventUser> {
+
+    @Override
+    public void serialize(CustomEventUser eventUser, JsonGenerator jgen, SerializerProvider provider) throws IOException {
+        jgen.writeStartObject();
+
+        jgen.writeStringField(eventUser.getChannelType().getIdentifier(), eventUser.getChannel());
+
+        jgen.writeEndObject();
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/experiments/ExperimentDeleteRequest.java b/src/main/java/com/urbanairship/api/experiments/ExperimentDeleteRequest.java
new file mode 100644
index 0000000..e79cb44
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/experiments/ExperimentDeleteRequest.java
@@ -0,0 +1,87 @@
+package com.urbanairship.api.experiments;
+
+/*
+ * Copyright (c) 2013-2017.  Urban Airship and Contributors
+ */
+
+import com.google.common.base.Preconditions;
+import com.google.common.net.HttpHeaders;
+import com.urbanairship.api.client.Request;
+import com.urbanairship.api.client.RequestUtils;
+import com.urbanairship.api.client.ResponseParser;
+import org.apache.http.entity.ContentType;
+
+import java.io.IOException;
+import java.net.URI;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * The ExperimentRequest class builds delete experiment requests to be executed in
+ * the {@link com.urbanairship.api.client.UrbanAirshipClient}.
+ */
+public class ExperimentDeleteRequest implements Request<String> {
+
+    private final static String DELETE_EXPERIMENT_PATH = "/api/experiments/scheduled/";
+
+    private final String experimentId;
+
+    private ExperimentDeleteRequest(String experimentId) {
+        this.experimentId = experimentId;
+    }
+
+    /**
+     * Create the scheduled experiment delete request.
+     *
+     * @param experimentId String
+     * @return DeleteScheduleRequest
+     */
+    public static ExperimentDeleteRequest newRequest(String experimentId) {
+        Preconditions.checkNotNull(experimentId, "Experiment Id may not be null");
+        return new ExperimentDeleteRequest(experimentId);
+    }
+
+    @Override
+    public ContentType getContentType() {
+        return null;
+    }
+
+    @Override
+    public Map<String, String> getRequestHeaders() {
+        Map<String, String> headers = new HashMap<String, String>();
+        headers.put(HttpHeaders.CONTENT_TYPE, CONTENT_TYPE_JSON);
+        headers.put(HttpHeaders.ACCEPT, UA_VERSION_JSON);
+        return headers;
+    }
+
+    @Override
+    public HttpMethod getHttpMethod() {
+        return HttpMethod.DELETE;
+    }
+
+    @Override
+    public String getRequestBody() {
+        return null;
+    }
+
+    @Override
+    public URI getUri(URI baseUri) {
+        String path  = DELETE_EXPERIMENT_PATH + experimentId;
+        return RequestUtils.resolveURI(baseUri, path);
+    }
+
+    @Override
+    public ResponseParser<String> getResponseParser() {
+        return new ResponseParser<String>() {
+            @Override
+            public String parse(String response) throws IOException {
+                return response;
+            }
+        };
+    }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/experiments/ExperimentRequest.java b/src/main/java/com/urbanairship/api/experiments/ExperimentRequest.java
index 934a985..fec2bc8 100644
--- a/src/main/java/com/urbanairship/api/experiments/ExperimentRequest.java
+++ b/src/main/java/com/urbanairship/api/experiments/ExperimentRequest.java
@@ -39,6 +39,7 @@ public class ExperimentRequest implements Request<ExperimentResponse> {
     /**
      * Create an experiment request.
      *
+     * @param experiment Experiment
      * @return ExperimentRequest
      */
     public static ExperimentRequest newRequest(Experiment experiment) {
@@ -94,6 +95,11 @@ public class ExperimentRequest implements Request<ExperimentResponse> {
             }
         };
     }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
 }
 
 
diff --git a/src/main/java/com/urbanairship/api/experiments/model/Experiment.java b/src/main/java/com/urbanairship/api/experiments/model/Experiment.java
index 9958176..46b982c 100644
--- a/src/main/java/com/urbanairship/api/experiments/model/Experiment.java
+++ b/src/main/java/com/urbanairship/api/experiments/model/Experiment.java
@@ -97,7 +97,7 @@ public final class Experiment extends ExperimentModelObject {
     /**
      * Get the variants for the experiment. A variant defines a push that will be sent to a subset of the experiment's
      * audience.
-     * @return variants List<Variant>
+     * @return variants List&lt;Variant&gt;
      */
     public List<Variant> getVariants() {
         return variants;
@@ -206,7 +206,7 @@ public final class Experiment extends ExperimentModelObject {
         /**
          * Add a variant to the experiment. A variant defines a push that will be sent to a subset of the experiment's
          * audience.
-         * @param variant List<Variant>
+         * @param variant List&lt;Variant&gt;
          * @return Builder
          */
         public Builder addVariant(Variant variant) {
@@ -228,8 +228,8 @@ public final class Experiment extends ExperimentModelObject {
          * 3. At least one variant must be present.
          * </pre>
          *
-         * @throws IllegalArgumentException
-         * @throws NullPointerException
+         * @throws IllegalArgumentException if illegal arguments are used
+         * @throws NullPointerException if audience, deviceTypes, or variants is not set
          * @return Experiment
          */
         public Experiment build() {
diff --git a/src/main/java/com/urbanairship/api/experiments/model/Variant.java b/src/main/java/com/urbanairship/api/experiments/model/Variant.java
index c1403f8..02f3e90 100644
--- a/src/main/java/com/urbanairship/api/experiments/model/Variant.java
+++ b/src/main/java/com/urbanairship/api/experiments/model/Variant.java
@@ -184,7 +184,7 @@ public class Variant {
          * 1. Partial push notification object must be specified.
          * </pre>
          *
-         * @throws NullPointerException
+         * @throws NullPointerException if variantPushPayload is not set
          * @return Variant
          */
         public Variant build() {
diff --git a/src/main/java/com/urbanairship/api/experiments/parse/ExperimentDeserializer.java b/src/main/java/com/urbanairship/api/experiments/parse/ExperimentDeserializer.java
index f705178..ff5973a 100644
--- a/src/main/java/com/urbanairship/api/experiments/parse/ExperimentDeserializer.java
+++ b/src/main/java/com/urbanairship/api/experiments/parse/ExperimentDeserializer.java
@@ -4,15 +4,15 @@
 
 package com.urbanairship.api.experiments.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
 import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 import com.urbanairship.api.experiments.model.Experiment;
 
 import java.io.IOException;
diff --git a/src/main/java/com/urbanairship/api/experiments/parse/ExperimentObjectMapper.java b/src/main/java/com/urbanairship/api/experiments/parse/ExperimentObjectMapper.java
index 52bad30..2ab951e 100644
--- a/src/main/java/com/urbanairship/api/experiments/parse/ExperimentObjectMapper.java
+++ b/src/main/java/com/urbanairship/api/experiments/parse/ExperimentObjectMapper.java
@@ -4,15 +4,16 @@
 
 package com.urbanairship.api.experiments.parse;
 
+import com.fasterxml.jackson.core.Version;
+import com.fasterxml.jackson.databind.DeserializationFeature;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.module.SimpleModule;
+import com.fasterxml.jackson.datatype.joda.JodaModule;
 import com.urbanairship.api.experiments.model.Experiment;
 import com.urbanairship.api.experiments.model.ExperimentResponse;
 import com.urbanairship.api.experiments.model.VariantPushPayload;
 import com.urbanairship.api.experiments.model.Variant;
 import com.urbanairship.api.push.parse.*;
-import org.codehaus.jackson.Version;
-import org.codehaus.jackson.map.DeserializationConfig;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.map.module.SimpleModule;
 
 public class ExperimentObjectMapper {
 
@@ -31,7 +32,8 @@ public class ExperimentObjectMapper {
 
         MAPPER.registerModule(MODULE);
         MAPPER.registerModule(PushObjectMapper.getModule());
-        MAPPER.configure(DeserializationConfig.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
+        MAPPER.registerModule(new JodaModule());
+        MAPPER.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
     }
 
     public static SimpleModule getModule() {
diff --git a/src/main/java/com/urbanairship/api/experiments/parse/ExperimentReader.java b/src/main/java/com/urbanairship/api/experiments/parse/ExperimentReader.java
index db353e8..96910b6 100644
--- a/src/main/java/com/urbanairship/api/experiments/parse/ExperimentReader.java
+++ b/src/main/java/com/urbanairship/api/experiments/parse/ExperimentReader.java
@@ -4,14 +4,14 @@
 
 package com.urbanairship.api.experiments.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.experiments.model.Experiment;
 import com.urbanairship.api.push.model.DeviceTypeData;
 import com.urbanairship.api.push.model.audience.Selector;
 import com.urbanairship.api.experiments.model.Variant;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
 
 import java.io.IOException;
 import java.util.List;
diff --git a/src/main/java/com/urbanairship/api/experiments/parse/ExperimentResponseDeserializer.java b/src/main/java/com/urbanairship/api/experiments/parse/ExperimentResponseDeserializer.java
index be5ab4c..9b508f9 100644
--- a/src/main/java/com/urbanairship/api/experiments/parse/ExperimentResponseDeserializer.java
+++ b/src/main/java/com/urbanairship/api/experiments/parse/ExperimentResponseDeserializer.java
@@ -4,15 +4,15 @@
 
 package com.urbanairship.api.experiments.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
 import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.experiments.model.ExperimentResponse;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 import com.google.common.base.Supplier;
diff --git a/src/main/java/com/urbanairship/api/experiments/parse/ExperimentResponseReader.java b/src/main/java/com/urbanairship/api/experiments/parse/ExperimentResponseReader.java
index 47915de..5793cf0 100644
--- a/src/main/java/com/urbanairship/api/experiments/parse/ExperimentResponseReader.java
+++ b/src/main/java/com/urbanairship/api/experiments/parse/ExperimentResponseReader.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.experiments.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.experiments.model.ExperimentResponse;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/experiments/parse/ExperimentSerializer.java b/src/main/java/com/urbanairship/api/experiments/parse/ExperimentSerializer.java
index b711df1..e42bcb9 100644
--- a/src/main/java/com/urbanairship/api/experiments/parse/ExperimentSerializer.java
+++ b/src/main/java/com/urbanairship/api/experiments/parse/ExperimentSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.experiments.parse;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.experiments.model.Experiment;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/experiments/parse/VariantDeserializer.java b/src/main/java/com/urbanairship/api/experiments/parse/VariantDeserializer.java
index c9c16fc..32bf0a3 100644
--- a/src/main/java/com/urbanairship/api/experiments/parse/VariantDeserializer.java
+++ b/src/main/java/com/urbanairship/api/experiments/parse/VariantDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.experiments.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.experiments.model.Variant;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/experiments/parse/VariantPushPayloadDeserializer.java b/src/main/java/com/urbanairship/api/experiments/parse/VariantPushPayloadDeserializer.java
index 4aed092..99183b3 100644
--- a/src/main/java/com/urbanairship/api/experiments/parse/VariantPushPayloadDeserializer.java
+++ b/src/main/java/com/urbanairship/api/experiments/parse/VariantPushPayloadDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.experiments.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.experiments.model.VariantPushPayload;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/experiments/parse/VariantPushPayloadReader.java b/src/main/java/com/urbanairship/api/experiments/parse/VariantPushPayloadReader.java
index e53d7b0..a078807 100644
--- a/src/main/java/com/urbanairship/api/experiments/parse/VariantPushPayloadReader.java
+++ b/src/main/java/com/urbanairship/api/experiments/parse/VariantPushPayloadReader.java
@@ -4,13 +4,13 @@
 
 package com.urbanairship.api.experiments.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.experiments.model.VariantPushPayload;
 import com.urbanairship.api.push.model.InApp;
 import com.urbanairship.api.push.model.PushOptions;
 import com.urbanairship.api.push.model.notification.Notification;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/experiments/parse/VariantPushPayloadSerializer.java b/src/main/java/com/urbanairship/api/experiments/parse/VariantPushPayloadSerializer.java
index 5783a03..72cea97 100644
--- a/src/main/java/com/urbanairship/api/experiments/parse/VariantPushPayloadSerializer.java
+++ b/src/main/java/com/urbanairship/api/experiments/parse/VariantPushPayloadSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.experiments.parse;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.experiments.model.VariantPushPayload;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/experiments/parse/VariantReader.java b/src/main/java/com/urbanairship/api/experiments/parse/VariantReader.java
index 76e33ba..da22eaa 100644
--- a/src/main/java/com/urbanairship/api/experiments/parse/VariantReader.java
+++ b/src/main/java/com/urbanairship/api/experiments/parse/VariantReader.java
@@ -4,12 +4,12 @@
 
 package com.urbanairship.api.experiments.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.experiments.model.Variant;
 import com.urbanairship.api.experiments.model.VariantPushPayload;
 import com.urbanairship.api.schedule.model.Schedule;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/experiments/parse/VariantSerializer.java b/src/main/java/com/urbanairship/api/experiments/parse/VariantSerializer.java
index 71a64b0..7a5898a 100644
--- a/src/main/java/com/urbanairship/api/experiments/parse/VariantSerializer.java
+++ b/src/main/java/com/urbanairship/api/experiments/parse/VariantSerializer.java
@@ -4,14 +4,14 @@
 
 package com.urbanairship.api.experiments.parse;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.experiments.model.Variant;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
-public class VariantSerializer extends JsonSerializer<Variant>{
+public class VariantSerializer extends JsonSerializer<Variant> {
 
     @Override
     public void serialize(Variant variant, JsonGenerator jgen, SerializerProvider provider) throws IOException {
diff --git a/src/main/java/com/urbanairship/api/location/LocationRequest.java b/src/main/java/com/urbanairship/api/location/LocationRequest.java
index 931fad9..aff46f7 100644
--- a/src/main/java/com/urbanairship/api/location/LocationRequest.java
+++ b/src/main/java/com/urbanairship/api/location/LocationRequest.java
@@ -138,4 +138,9 @@ public class LocationRequest implements Request<LocationResponse> {
         };
     }
 
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
+
 }
diff --git a/src/main/java/com/urbanairship/api/location/model/LocationView.java b/src/main/java/com/urbanairship/api/location/model/LocationView.java
index 69536b9..8c59042 100644
--- a/src/main/java/com/urbanairship/api/location/model/LocationView.java
+++ b/src/main/java/com/urbanairship/api/location/model/LocationView.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.location.model;
 
+import com.fasterxml.jackson.databind.JsonNode;
 import com.google.common.base.Objects;
 import com.google.common.base.Optional;
 import com.google.common.base.Preconditions;
 import org.apache.commons.lang.StringUtils;
-import org.codehaus.jackson.JsonNode;
 
 import java.util.List;
 
diff --git a/src/main/java/com/urbanairship/api/location/model/Point.java b/src/main/java/com/urbanairship/api/location/model/Point.java
index 0558d27..b8629d5 100644
--- a/src/main/java/com/urbanairship/api/location/model/Point.java
+++ b/src/main/java/com/urbanairship/api/location/model/Point.java
@@ -119,8 +119,8 @@ public final class Point {
          * Build the Point object. Will fail if any of the following
          * preconditions are not met.
          * <pre>
-         * 1. latitude >= -90d && latitude <= 90d.
-         * 2. longitude >= -180d && longitude <= 180d.
+         * 1. latitude &gt;= -90d {@code &&} latitude &lt;= 90d.
+         * 2. longitude &gt;= -180d {@code &&} longitude &lt;= 180d.
          * * </pre>
          *
          * @return Point
diff --git a/src/main/java/com/urbanairship/api/location/parse/LocationObjectMapper.java b/src/main/java/com/urbanairship/api/location/parse/LocationObjectMapper.java
index 7f92f55..89a3a11 100644
--- a/src/main/java/com/urbanairship/api/location/parse/LocationObjectMapper.java
+++ b/src/main/java/com/urbanairship/api/location/parse/LocationObjectMapper.java
@@ -4,13 +4,14 @@
 
 package com.urbanairship.api.location.parse;
 
+import com.fasterxml.jackson.core.Version;
+import com.fasterxml.jackson.databind.DeserializationFeature;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.module.SimpleModule;
+import com.fasterxml.jackson.datatype.joda.JodaModule;
 import com.urbanairship.api.location.model.LocationResponse;
 import com.urbanairship.api.location.model.LocationView;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.Version;
-import org.codehaus.jackson.map.DeserializationConfig;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.map.module.SimpleModule;
 
 public class LocationObjectMapper {
     private static final ObjectMapper MAPPER = new ObjectMapper();
@@ -21,8 +22,9 @@ public class LocationObjectMapper {
         MODULE.addDeserializer(LocationResponse.class, new LocationResponseDeserializer());
 
         MAPPER.registerModule(MODULE);
+        MAPPER.registerModule(new JodaModule());
         MAPPER.registerModule(PushObjectMapper.getModule());
-        MAPPER.configure(DeserializationConfig.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
+        MAPPER.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
     }
 
     public static SimpleModule getModule() {
diff --git a/src/main/java/com/urbanairship/api/location/parse/LocationResponseDeserializer.java b/src/main/java/com/urbanairship/api/location/parse/LocationResponseDeserializer.java
index 68c0c1b..e6d5e45 100644
--- a/src/main/java/com/urbanairship/api/location/parse/LocationResponseDeserializer.java
+++ b/src/main/java/com/urbanairship/api/location/parse/LocationResponseDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.location.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.location.model.LocationResponse;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/location/parse/LocationResponseReader.java b/src/main/java/com/urbanairship/api/location/parse/LocationResponseReader.java
index cb6e907..c7bd877 100644
--- a/src/main/java/com/urbanairship/api/location/parse/LocationResponseReader.java
+++ b/src/main/java/com/urbanairship/api/location/parse/LocationResponseReader.java
@@ -4,12 +4,12 @@
 
 package com.urbanairship.api.location.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.location.model.LocationResponse;
 import com.urbanairship.api.location.model.LocationView;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
 
 import java.io.IOException;
 import java.util.List;
diff --git a/src/main/java/com/urbanairship/api/location/parse/LocationViewDeserializer.java b/src/main/java/com/urbanairship/api/location/parse/LocationViewDeserializer.java
index 4e15e27..cae9ec1 100644
--- a/src/main/java/com/urbanairship/api/location/parse/LocationViewDeserializer.java
+++ b/src/main/java/com/urbanairship/api/location/parse/LocationViewDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.location.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.APIParsingException;
@@ -12,9 +15,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.location.model.LocationView;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/location/parse/LocationViewReader.java b/src/main/java/com/urbanairship/api/location/parse/LocationViewReader.java
index 6c48b12..c8ea492 100644
--- a/src/main/java/com/urbanairship/api/location/parse/LocationViewReader.java
+++ b/src/main/java/com/urbanairship/api/location/parse/LocationViewReader.java
@@ -4,12 +4,12 @@
 
 package com.urbanairship.api.location.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.JsonNode;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.location.model.LocationView;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
 
 import java.io.IOException;
 import java.util.List;
diff --git a/src/main/java/com/urbanairship/api/nameduser/NamedUserListingRequest.java b/src/main/java/com/urbanairship/api/nameduser/NamedUserListingRequest.java
index 1700ad7..adb9d01 100644
--- a/src/main/java/com/urbanairship/api/nameduser/NamedUserListingRequest.java
+++ b/src/main/java/com/urbanairship/api/nameduser/NamedUserListingRequest.java
@@ -100,4 +100,9 @@ public class NamedUserListingRequest implements Request<NamedUserListingResponse
             }
         };
     }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/com/urbanairship/api/nameduser/NamedUserRequest.java b/src/main/java/com/urbanairship/api/nameduser/NamedUserRequest.java
index 6b63a45..c578b35 100644
--- a/src/main/java/com/urbanairship/api/nameduser/NamedUserRequest.java
+++ b/src/main/java/com/urbanairship/api/nameduser/NamedUserRequest.java
@@ -65,6 +65,11 @@ public class NamedUserRequest implements Request<String> {
      */
     public NamedUserRequest setChannel(String channelId, ChannelType channelType) {
         payload.put(CHANNEL_KEY, channelId);
+
+        if (channelType.equals(ChannelType.OPEN) || channelType.equals(ChannelType.WEB)) {
+            return this;
+        }
+
         payload.put(DEVICE_TYPE_KEY, channelType.getIdentifier());
         return this;
     }
@@ -102,7 +107,6 @@ public class NamedUserRequest implements Request<String> {
     public String getRequestBody() {
         Preconditions.checkArgument(!payload.isEmpty(), "Request payload cannot be empty");
         Preconditions.checkArgument(payload.containsKey(CHANNEL_KEY), "Channel ID required for named user association or disassociation requests");
-        Preconditions.checkArgument(payload.containsKey(DEVICE_TYPE_KEY), "Device type required for named user association or disassociation requests");
 
         if (path.equals(API_NAMED_USERS_ASSOCIATE)) {
             Preconditions.checkArgument(payload.containsKey(NAMED_USER_ID_KEY), "Named User ID required for named user association requests");
@@ -130,4 +134,9 @@ public class NamedUserRequest implements Request<String> {
         };
     }
 
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
+
 }
\ No newline at end of file
diff --git a/src/main/java/com/urbanairship/api/nameduser/NamedUserTagRequest.java b/src/main/java/com/urbanairship/api/nameduser/NamedUserTagRequest.java
index 3f078e4..30dacfe 100644
--- a/src/main/java/com/urbanairship/api/nameduser/NamedUserTagRequest.java
+++ b/src/main/java/com/urbanairship/api/nameduser/NamedUserTagRequest.java
@@ -178,6 +178,11 @@ public class NamedUserTagRequest implements Request<String> {
         };
     }
 
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
+
     private static void appendMapValues(String key, Set<String> values, Map<String, Set<String>> map) {
         if (!map.containsKey(key)) {
             map.put(key, values);
diff --git a/src/main/java/com/urbanairship/api/nameduser/parse/NamedUserListingResponseReader.java b/src/main/java/com/urbanairship/api/nameduser/parse/NamedUserListingResponseReader.java
index 36cb42c..e5a74e0 100644
--- a/src/main/java/com/urbanairship/api/nameduser/parse/NamedUserListingResponseReader.java
+++ b/src/main/java/com/urbanairship/api/nameduser/parse/NamedUserListingResponseReader.java
@@ -4,12 +4,12 @@
 
 package com.urbanairship.api.nameduser.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.nameduser.model.NamedUserListingResponse;
 import com.urbanairship.api.nameduser.model.NamedUserView;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
 
 import java.io.IOException;
 import java.util.List;
diff --git a/src/main/java/com/urbanairship/api/nameduser/parse/NamedUserObjectMapper.java b/src/main/java/com/urbanairship/api/nameduser/parse/NamedUserObjectMapper.java
index 363ae2c..500a440 100644
--- a/src/main/java/com/urbanairship/api/nameduser/parse/NamedUserObjectMapper.java
+++ b/src/main/java/com/urbanairship/api/nameduser/parse/NamedUserObjectMapper.java
@@ -4,19 +4,22 @@
 
 package com.urbanairship.api.nameduser.parse;
 
+import com.fasterxml.jackson.core.Version;
+import com.fasterxml.jackson.databind.DeserializationFeature;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.module.SimpleModule;
+import com.fasterxml.jackson.datatype.joda.JodaModule;
 import com.urbanairship.api.channel.model.ChannelView;
 import com.urbanairship.api.channel.model.ios.IosSettings;
 import com.urbanairship.api.channel.model.ios.QuietTime;
+import com.urbanairship.api.channel.model.open.OpenChannel;
 import com.urbanairship.api.channel.parse.ChannelViewDeserializer;
 import com.urbanairship.api.channel.parse.ios.IosSettingsDeserializer;
 import com.urbanairship.api.channel.parse.ios.QuietTimeDeserializer;
+import com.urbanairship.api.channel.parse.open.OpenChannelDeserializer;
 import com.urbanairship.api.nameduser.model.NamedUserListingResponse;
 import com.urbanairship.api.nameduser.model.NamedUserView;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.Version;
-import org.codehaus.jackson.map.DeserializationConfig;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.map.module.SimpleModule;
 
 public class NamedUserObjectMapper {
     private static final ObjectMapper MAPPER = new ObjectMapper();
@@ -28,10 +31,12 @@ public class NamedUserObjectMapper {
         MODULE.addDeserializer(ChannelView.class, new ChannelViewDeserializer());
         MODULE.addDeserializer(NamedUserView.class, new NamedUserViewDeserializer());
         MODULE.addDeserializer(NamedUserListingResponse.class, new NamedUserlListingResponseDeserializer());
+        MODULE.addDeserializer(OpenChannel.class, new OpenChannelDeserializer());
 
         MAPPER.registerModule(MODULE);
         MAPPER.registerModule(PushObjectMapper.getModule());
-        MAPPER.configure(DeserializationConfig.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
+        MAPPER.registerModule(new JodaModule());
+        MAPPER.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
     }
 
     public static SimpleModule getModule() {
diff --git a/src/main/java/com/urbanairship/api/nameduser/parse/NamedUserViewDeserializer.java b/src/main/java/com/urbanairship/api/nameduser/parse/NamedUserViewDeserializer.java
index 6125836..6ef44eb 100644
--- a/src/main/java/com/urbanairship/api/nameduser/parse/NamedUserViewDeserializer.java
+++ b/src/main/java/com/urbanairship/api/nameduser/parse/NamedUserViewDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.nameduser.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.nameduser.model.NamedUserView;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/nameduser/parse/NamedUserViewReader.java b/src/main/java/com/urbanairship/api/nameduser/parse/NamedUserViewReader.java
index b525710..86923ec 100644
--- a/src/main/java/com/urbanairship/api/nameduser/parse/NamedUserViewReader.java
+++ b/src/main/java/com/urbanairship/api/nameduser/parse/NamedUserViewReader.java
@@ -4,6 +4,8 @@
 
 package com.urbanairship.api.nameduser.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import com.urbanairship.api.channel.model.ChannelView;
@@ -11,8 +13,6 @@ import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.common.parse.StringFieldDeserializer;
 import com.urbanairship.api.nameduser.model.NamedUserView;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
 
 import java.io.IOException;
 import java.util.Map;
diff --git a/src/main/java/com/urbanairship/api/nameduser/parse/NamedUserlListingResponseDeserializer.java b/src/main/java/com/urbanairship/api/nameduser/parse/NamedUserlListingResponseDeserializer.java
index 5a29ea7..7bb8916 100644
--- a/src/main/java/com/urbanairship/api/nameduser/parse/NamedUserlListingResponseDeserializer.java
+++ b/src/main/java/com/urbanairship/api/nameduser/parse/NamedUserlListingResponseDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.nameduser.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.nameduser.model.NamedUserListingResponse;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/PushRequest.java b/src/main/java/com/urbanairship/api/push/PushRequest.java
index f93e5e5..c0c404f 100644
--- a/src/main/java/com/urbanairship/api/push/PushRequest.java
+++ b/src/main/java/com/urbanairship/api/push/PushRequest.java
@@ -4,6 +4,9 @@ package com.urbanairship.api.push;
  * Copyright (c) 2013-2016.  Urban Airship and Contributors
  */
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ArrayNode;
 import com.google.common.base.Preconditions;
 import com.google.common.net.HttpHeaders;
 import com.urbanairship.api.client.Request;
@@ -13,9 +16,6 @@ import com.urbanairship.api.push.model.PushPayload;
 import com.urbanairship.api.push.model.PushResponse;
 import com.urbanairship.api.push.parse.PushObjectMapper;
 import org.apache.http.entity.ContentType;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.ArrayNode;
 
 import java.io.IOException;
 import java.net.URI;
@@ -62,7 +62,7 @@ public class PushRequest implements Request<PushResponse> {
     /**
      * Create a push request.
      *
-     * @param payloadList List<PushPayload>
+     * @param payloadList List of PushPayload objects
      * @return PushRequest
      */
     public static PushRequest newRequest(List<PushPayload> payloadList) {
@@ -72,7 +72,7 @@ public class PushRequest implements Request<PushResponse> {
     /**
      * Add additional payloads to a batch push request
      *
-     * @param newPayload
+     * @param newPayload PushPayload
      * @return PushRequest
      */
     public PushRequest addPayload(PushPayload newPayload) {
@@ -84,7 +84,7 @@ public class PushRequest implements Request<PushResponse> {
     /**
      * Add additional payloads to a batch push request
      *
-     * @param newPayloads
+     * @param newPayloads List of PushPayload objects
      * @return PushRequest
      */
     public PushRequest addPayloads(List<PushPayload> newPayloads) {
@@ -162,4 +162,9 @@ public class PushRequest implements Request<PushResponse> {
             }
         };
     }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
 }
diff --git a/src/main/java/com/urbanairship/api/push/model/Campaigns.java b/src/main/java/com/urbanairship/api/push/model/Campaigns.java
new file mode 100644
index 0000000..1b0c12e
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/push/model/Campaigns.java
@@ -0,0 +1,100 @@
+/*
+ * Copyright (c) 2013-2016.  Urban Airship and Contributors
+ */
+
+package com.urbanairship.api.push.model;
+
+import com.google.common.base.Preconditions;
+import com.google.common.collect.ImmutableList;
+
+import java.util.Objects;
+
+/**
+ * The Campaigns Object associates the notification
+ * with the categories that you add in the categories field.
+ */
+public class Campaigns {
+    private final ImmutableList<String> categories;
+
+    /**
+     * Generate a new Campaign Builder object.
+     *
+     * @return Builder
+     */
+    public static Builder newBuilder(){
+        return new Builder();
+    }
+
+    private Campaigns(Builder builder) {
+        this.categories = builder.categories.build();
+    }
+
+    /**
+     * Get list of Categories
+     *
+     * @return ImmutableList of categories
+     */
+    public ImmutableList<String> getCategories() {
+        return categories;
+    }
+
+    @Override
+    public String toString() {
+        return "Campaigns{" +
+                "categories=" + categories +
+                '}';
+    }
+
+    @Override
+    public int hashCode() {
+        return com.google.common.base.Objects.hashCode(categories);
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj == null || getClass() != obj.getClass()) {
+            return false;
+        }
+        final Campaigns other = (Campaigns) obj;
+        return com.google.common.base.Objects.equal(this.categories, other.categories);
+    }
+
+    /**
+     * Campaigns Builder
+     */
+    public static class Builder{
+        private ImmutableList.Builder<String> categories = ImmutableList.builder();
+
+       private Builder() { }
+
+        /**
+         * Add category
+         *
+         * @param category String
+         * @return Builder
+         */
+        public Builder addCategory(String category) {
+            this.categories.add(category);
+            return this;
+        }
+
+        /**
+         * Add list of categories
+         *
+         * @param categories Iterable of categories
+         * @return Builder
+         */
+        public Builder addAllCategories(Iterable<? extends String> categories){
+            this.categories.addAll(categories);
+            return this;
+        }
+
+        public Campaigns build(){
+            Preconditions.checkArgument(categories.build().size() > 0, "Category list cannot be empty.");
+            return new Campaigns(this);
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/urbanairship/api/push/model/DeviceType.java b/src/main/java/com/urbanairship/api/push/model/DeviceType.java
index db14396..f25d00b 100644
--- a/src/main/java/com/urbanairship/api/push/model/DeviceType.java
+++ b/src/main/java/com/urbanairship/api/push/model/DeviceType.java
@@ -4,49 +4,84 @@
 
 package com.urbanairship.api.push.model;
 
-import com.google.common.base.Function;
 import com.google.common.base.Optional;
+import com.google.common.collect.ImmutableSet;
 
-public enum DeviceType {
+import java.util.Objects;
 
-    IOS("ios"),
-    WNS("wns"),
-    ANDROID("android"),
-    AMAZON("amazon"),
-    WEB("web");
+public final class DeviceType {
 
-    public static DeviceType first() {
-        return IOS;
+    public static final DeviceType AMAZON = new DeviceType(PlatformType.NATIVE, "amazon");
+    public static final DeviceType ANDROID = new DeviceType(PlatformType.NATIVE, "android");
+    public static final DeviceType IOS = new DeviceType(PlatformType.NATIVE, "ios");
+    public static final DeviceType WEB = new DeviceType(PlatformType.NATIVE, "web");
+    public static final DeviceType WNS = new DeviceType(PlatformType.NATIVE, "wns");
+
+    public static final ImmutableSet<DeviceType> TYPES = ImmutableSet.<DeviceType>builder()
+            .add(AMAZON)
+            .add(ANDROID)
+            .add(IOS)
+            .add(WEB)
+            .add(WNS)
+            .build();
+
+    private enum PlatformType {
+        NATIVE,
+        OPEN
     }
 
-    public static DeviceType last() {
-        return WEB;
+    private static final String OPEN_PLATFORM_NAMESPACE = "open::";
+
+    public static DeviceType open(String platformName) {
+        return new DeviceType(PlatformType.OPEN, OPEN_PLATFORM_NAMESPACE + platformName);
     }
 
     private final String identifier;
+    private final PlatformType platformType;
 
-    DeviceType(String identifier) {
+    private DeviceType(PlatformType platformType, String identifier) {
+        this.platformType = platformType;
         this.identifier = identifier;
     }
 
-    public String getIdentifier() {
-        return identifier;
+    public boolean isOpenPlatform() {
+        return platformType.equals(PlatformType.OPEN);
     }
 
-    public static Optional<DeviceType> find(String id) {
-        return fromIdentifierFunction.apply(id);
+    public String getIdentifier() {
+        return identifier;
     }
 
-    public static final Function<String, Optional<DeviceType>> fromIdentifierFunction = new Function<String, Optional<DeviceType>>() {
-        @Override
-        public Optional<DeviceType> apply(String identifier) {
-            for (DeviceType deviceType : values()) {
-                if (deviceType.getIdentifier().equals(identifier)) {
-                    return Optional.of(deviceType);
-                }
+    public static Optional<DeviceType> find(String identifier) {
+        for (DeviceType deviceType : TYPES) {
+            if (deviceType.getIdentifier().equals(identifier)) {
+                return Optional.of(deviceType);
             }
+        }
 
-            return Optional.absent();
+        if (identifier.contains(OPEN_PLATFORM_NAMESPACE)) {
+            return Optional.of(new DeviceType(PlatformType.OPEN, identifier));
         }
-    };
+
+        return Optional.absent();
+    }
+
+    @Override
+    public String toString() {
+        return identifier;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        DeviceType that = (DeviceType) o;
+        return Objects.equals(identifier, that.identifier) && platformType == that.platformType;
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(identifier, platformType);
+    }
+
 }
diff --git a/src/main/java/com/urbanairship/api/push/model/PushExpiry.java b/src/main/java/com/urbanairship/api/push/model/PushExpiry.java
index a9ab7e9..067fe0a 100644
--- a/src/main/java/com/urbanairship/api/push/model/PushExpiry.java
+++ b/src/main/java/com/urbanairship/api/push/model/PushExpiry.java
@@ -34,7 +34,7 @@ public class PushExpiry extends PushModelObject {
 
     /**
      * Get the expiry (TTL) as a long.  This is optional.
-     * @return Optional<<T>ExpirySeconds</T>>
+     * @return Optional&lt;ExpirySeconds&gt;
      */
     public Optional<Integer> getExpirySeconds() {
         return expirySeconds;
@@ -42,7 +42,7 @@ public class PushExpiry extends PushModelObject {
 
     /**
      * Get the expiry (TTL) as a timestamp.  This is optional.
-     * @return Optional<<T>ExpiryTimestamp</T>>
+     * @return Optional&lt;ExpiryTimestamp&gt;
      */
     public Optional<DateTime> getExpiryTimeStamp() {
         return expiryTimeStamp;
diff --git a/src/main/java/com/urbanairship/api/push/model/PushOptions.java b/src/main/java/com/urbanairship/api/push/model/PushOptions.java
index 10597be..dc4ddcb 100644
--- a/src/main/java/com/urbanairship/api/push/model/PushOptions.java
+++ b/src/main/java/com/urbanairship/api/push/model/PushOptions.java
@@ -6,7 +6,6 @@ package com.urbanairship.api.push.model;
 
 import com.google.common.base.Optional;
 
-
 /**
  * Optional features for a Push payload for the Urban Airship API.
  * Created for future optional features to be added.
@@ -30,7 +29,7 @@ public class PushOptions extends PushModelObject {
 
     /**
      * Get the expiry (TTL).  This is optional.
-     * @return Optional<<T>Expiry</T>>
+     * @return Optional&lt;Expiry&gt;
      **/
     public Optional<PushExpiry> getExpiry() {
         return expiry;
@@ -48,7 +47,6 @@ public class PushOptions extends PushModelObject {
         PushOptions that = (PushOptions) o;
 
         return !(expiry != null ? !expiry.equals(that.expiry) : that.expiry != null);
-
     }
 
     @Override
@@ -82,6 +80,4 @@ public class PushOptions extends PushModelObject {
             return new PushOptions(Optional.fromNullable(expiry));
         }
     }
-
-
 }
diff --git a/src/main/java/com/urbanairship/api/push/model/PushPayload.java b/src/main/java/com/urbanairship/api/push/model/PushPayload.java
index 1ea3f57..ca17ca8 100644
--- a/src/main/java/com/urbanairship/api/push/model/PushPayload.java
+++ b/src/main/java/com/urbanairship/api/push/model/PushPayload.java
@@ -22,6 +22,7 @@ public final class PushPayload extends PushModelObject {
     private final DeviceTypeData deviceTypes;
     private final Optional<PushOptions> pushOptions;
     private final Optional<InApp> inApp;
+    private final Optional<Campaigns> campaigns;
 
     /**
      * PushPayload builder
@@ -36,13 +37,15 @@ public final class PushPayload extends PushModelObject {
                         Optional<RichPushMessage> message,
                         DeviceTypeData deviceTypes,
                         Optional<PushOptions> pushOptions,
-                        Optional<InApp> inApp) {
+                        Optional<InApp> inApp,
+                        Optional<Campaigns> campaigns) {
         this.audience = audience;
         this.notification = notification;
         this.message = message;
         this.deviceTypes = deviceTypes;
         this.pushOptions = pushOptions;
         this.inApp = inApp;
+        this.campaigns = campaigns;
     }
 
     /**
@@ -55,7 +58,7 @@ public final class PushPayload extends PushModelObject {
 
     /**
      * Get the Notification. This is optional.
-     * @return Optional<<T>Notification</T>>
+     * @return Optional Notification
      */
     public Optional<Notification> getNotification() {
         return notification;
@@ -63,7 +66,7 @@ public final class PushPayload extends PushModelObject {
 
     /**
      * Get the rich push message. This is optional
-     * @return Optional<<T>RichPushMessage</T>>
+     * @return Optional RichPushMessage
      */
     public Optional<RichPushMessage> getMessage() {
         return message;
@@ -98,6 +101,15 @@ public final class PushPayload extends PushModelObject {
         return pushOptions;
     }
 
+    /**
+     * Get the optional Campaign.
+     *
+     * @return An optional Campaign object.
+     */
+    public Optional<Campaigns> getCampaigns() {
+        return campaigns;
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -127,6 +139,9 @@ public final class PushPayload extends PushModelObject {
         if (inApp != null ? !inApp.equals(that.inApp) : that.inApp != null) {
             return false;
         }
+        if (campaigns != null ? !campaigns.equals(that.campaigns) : that.campaigns != null) {
+            return false;
+        }
 
         return true;
     }
@@ -139,6 +154,7 @@ public final class PushPayload extends PushModelObject {
         result = 31 * result + (deviceTypes != null ? deviceTypes.hashCode() : 0);
         result = 31 * result + (pushOptions != null ? pushOptions.hashCode() : 0);
         result = 31 * result + (inApp != null ? inApp.hashCode() : 0);
+        result = 31 * result + (campaigns != null ? campaigns.hashCode() : 0);
         return result;
     }
 
@@ -151,6 +167,7 @@ public final class PushPayload extends PushModelObject {
                 ", deviceTypes=" + deviceTypes +
                 ", pushOptions=" + pushOptions +
                 ", inApp=" + inApp +
+                ", campaigns=" + campaigns +
                 '}';
     }
 
@@ -161,6 +178,7 @@ public final class PushPayload extends PushModelObject {
         private RichPushMessage message = null;
         private PushOptions pushOptions = null;
         private InApp inApp = null;
+        private Campaigns campaigns = null;
 
         private Builder() { }
 
@@ -225,6 +243,16 @@ public final class PushPayload extends PushModelObject {
         }
 
         /**
+         * Set the campaign.
+         * @param campaigns A campaign object.
+         * @return Builder
+         */
+        public Builder setCampaigns(Campaigns campaigns) {
+            this.campaigns = campaigns;
+            return this;
+        }
+
+        /**
          * Build a PushPayload object. Will fail if any of the following
          * preconditions are not met.
          * <pre>
@@ -233,8 +261,8 @@ public final class PushPayload extends PushModelObject {
          * 3. DeviceTypes (device types) must be set.
          * </pre>
          *
-         * @throws IllegalArgumentException
-         * @throws NullPointerException
+         * @throws IllegalArgumentException if an illegal argument is used
+         * @throws NullPointerException if required variables are not initialized
          * @return PushPayload
          */
         public PushPayload build() {
@@ -249,7 +277,8 @@ public final class PushPayload extends PushModelObject {
                     Optional.fromNullable(message),
                     deviceTypes,
                     Optional.fromNullable(pushOptions),
-                    Optional.fromNullable(inApp)
+                    Optional.fromNullable(inApp),
+                    Optional.fromNullable(campaigns)
             );
         }
     }
diff --git a/src/main/java/com/urbanairship/api/push/model/audience/SelectorType.java b/src/main/java/com/urbanairship/api/push/model/audience/SelectorType.java
index b41a06d..68753b5 100644
--- a/src/main/java/com/urbanairship/api/push/model/audience/SelectorType.java
+++ b/src/main/java/com/urbanairship/api/push/model/audience/SelectorType.java
@@ -21,6 +21,7 @@ public enum SelectorType {
     AMAZON_CHANNEL("amazon_channel", SelectorCategory.VALUE, true, true, DeviceType.AMAZON),
     IOS_CHANNEL("ios_channel", SelectorCategory.VALUE, true, true, DeviceType.IOS),
     ANDROID_CHANNEL("android_channel", SelectorCategory.VALUE, true, true, DeviceType.ANDROID),
+    OPEN_CHANNEL("open_channel", SelectorCategory.VALUE),
     CHANNEL("channel", SelectorCategory.VALUE),
 
     AND("and", SelectorCategory.COMPOUND),
diff --git a/src/main/java/com/urbanairship/api/push/model/audience/Selectors.java b/src/main/java/com/urbanairship/api/push/model/audience/Selectors.java
index 33fec62..899a82c 100644
--- a/src/main/java/com/urbanairship/api/push/model/audience/Selectors.java
+++ b/src/main/java/com/urbanairship/api/push/model/audience/Selectors.java
@@ -269,6 +269,20 @@ public class Selectors {
         return compound(SelectorType.OR, SelectorType.AMAZON_CHANNEL, ids);
     }
 
+    /* Open Channels */
+
+    public static final Selector open(String openChannel) {
+        return value(SelectorType.OPEN_CHANNEL, openChannel);
+    }
+
+    public static final Selector openChannelDevices(String ... ids) {
+        return compound(SelectorType.OR, SelectorType.OPEN_CHANNEL, ids);
+    }
+
+    public static final Selector openChannelDevices(Collection<String> ids) {
+        return compound(SelectorType.OR, SelectorType.OPEN_CHANNEL, ids);
+    }
+
     /* Logical operators */
 
     public static final Selector or(Selector ... children) {
diff --git a/src/main/java/com/urbanairship/api/push/model/notification/Notification.java b/src/main/java/com/urbanairship/api/push/model/notification/Notification.java
index b5aef14..267fa92 100644
--- a/src/main/java/com/urbanairship/api/push/model/notification/Notification.java
+++ b/src/main/java/com/urbanairship/api/push/model/notification/Notification.java
@@ -178,7 +178,7 @@ public final class Notification extends PushModelObject {
                 for (Action a : actions.allActions()) {
 
                     if (a.getActionType() == ActionType.APP_DEFINED) {
-                        Iterator<String> fieldNames = ((AppDefinedAction) a).getValue().getFieldNames();
+                        Iterator<String> fieldNames = ((AppDefinedAction) a).getValue().fieldNames();
                         while (fieldNames.hasNext()) {
                             String field = fieldNames.next();
                             Preconditions.checkArgument(!extras.containsKey(field), "The iOS extra key '" + field
diff --git a/src/main/java/com/urbanairship/api/push/model/notification/Notifications.java b/src/main/java/com/urbanairship/api/push/model/notification/Notifications.java
index ba49293..f296744 100644
--- a/src/main/java/com/urbanairship/api/push/model/notification/Notifications.java
+++ b/src/main/java/com/urbanairship/api/push/model/notification/Notifications.java
@@ -5,11 +5,14 @@
 package com.urbanairship.api.push.model.notification;
 
 import com.google.common.base.Optional;
+import com.urbanairship.api.channel.model.open.OpenChannelPayload;
 import com.urbanairship.api.push.model.DeviceType;
 import com.urbanairship.api.push.model.DeviceTypeData;
+import com.urbanairship.api.push.model.PushPayload;
 import com.urbanairship.api.push.model.notification.adm.ADMDevicePayload;
 import com.urbanairship.api.push.model.notification.android.AndroidDevicePayload;
 import com.urbanairship.api.push.model.notification.ios.IOSDevicePayload;
+import com.urbanairship.api.push.model.notification.open.OpenPayload;
 import com.urbanairship.api.push.model.notification.richpush.RichPushMessage;
 import com.urbanairship.api.push.model.notification.web.WebDevicePayload;
 import com.urbanairship.api.push.model.notification.wns.WNSDevicePayload;
@@ -42,16 +45,20 @@ public class Notifications {
     /* Simple alert deviceType overrides */
 
     public static DevicePayloadOverride alert(DeviceType deviceType, String text) {
-        switch (deviceType) {
-        case IOS:
+        if (deviceType.isOpenPlatform()) {
+            return openPayloadAlert(text, deviceType);
+        }
+
+        switch (deviceType.getIdentifier()) {
+        case "ios":
             return iosAlert(text);
-        case ANDROID:
+        case "android":
             return androidAlert(text);
-        case WNS:
+        case "wns":
             return wnsAlert(text);
-        case AMAZON:
+        case "amazon":
             return admAlert(text);
-        case WEB:
+        case "web":
             return webAlert(text);
         default:
             throw unknownDeviceType(deviceType.getIdentifier());
@@ -88,6 +95,13 @@ public class Notifications {
                 .build();
     }
 
+    public static OpenPayload openPayloadAlert(String text, DeviceType deviceType) {
+        return OpenPayload.newBuilder()
+                .setAlert(text)
+                .setDeviceType(deviceType)
+                .build();
+    }
+
     /* Platform selector (device_types) */
 
     public static DeviceTypeData deviceTypes(String ... names) {
diff --git a/src/main/java/com/urbanairship/api/push/model/notification/actions/Action.java b/src/main/java/com/urbanairship/api/push/model/notification/actions/Action.java
index 950c799..deefb50 100644
--- a/src/main/java/com/urbanairship/api/push/model/notification/actions/Action.java
+++ b/src/main/java/com/urbanairship/api/push/model/notification/actions/Action.java
@@ -6,12 +6,12 @@ package com.urbanairship.api.push.model.notification.actions;
 
 /**
  * Notification actions.
- * @param <A>
+ * @param <A> Action type
  */
 public interface Action<A> {
     /**
      * Content/parameters for the action.
-     * @return <A>
+     * @return A
      */
     A getValue();
 
@@ -24,7 +24,7 @@ public interface Action<A> {
     /**
      * A marker interface to distinguish "open" actions from vanilla
      * actions.
-     * @param <A>
+     * @param <A> OpenAction type
      */
     interface OpenAction<A> extends Action<A> { }
 }
diff --git a/src/main/java/com/urbanairship/api/push/model/notification/actions/ActionNameRegistry.java b/src/main/java/com/urbanairship/api/push/model/notification/actions/ActionNameRegistry.java
index 8d3efb0..0c8765c 100644
--- a/src/main/java/com/urbanairship/api/push/model/notification/actions/ActionNameRegistry.java
+++ b/src/main/java/com/urbanairship/api/push/model/notification/actions/ActionNameRegistry.java
@@ -10,8 +10,8 @@ import com.google.common.collect.ImmutableMap;
  * Every pre-defined action has a 'short name' and 'long name' on the
  * mobile device. This class enables name lookup, based on the particular action's
  * class.
- * <p/>
- * The mapping of actions to short & long names is maintained in the Push API v3 spec.
+ *
+ * The mapping of actions to short and long names is maintained in the Push API v3 spec.
  */
 public final class ActionNameRegistry {
 
diff --git a/src/main/java/com/urbanairship/api/push/model/notification/actions/Actions.java b/src/main/java/com/urbanairship/api/push/model/notification/actions/Actions.java
index 116d720..c518a40 100644
--- a/src/main/java/com/urbanairship/api/push/model/notification/actions/Actions.java
+++ b/src/main/java/com/urbanairship/api/push/model/notification/actions/Actions.java
@@ -146,7 +146,7 @@ public class Actions extends PushModelObject {
             //
             // See the API v3 spec for complete details.
             if (actions.containsKey(AppDefinedAction.class) && actions.size() > 1) {
-                List<String> fieldNames = Lists.newArrayList(actions.getInstance(AppDefinedAction.class).getValue().getFieldNames());
+                List<String> fieldNames = Lists.newArrayList(actions.getInstance(AppDefinedAction.class).getValue().fieldNames());
                 for (Class<? extends Action> key : actions.keySet()) {
                     if (key == AppDefinedAction.class) {
                         continue;
diff --git a/src/main/java/com/urbanairship/api/push/model/notification/actions/AppDefinedAction.java b/src/main/java/com/urbanairship/api/push/model/notification/actions/AppDefinedAction.java
index 0287f7a..6a63163 100644
--- a/src/main/java/com/urbanairship/api/push/model/notification/actions/AppDefinedAction.java
+++ b/src/main/java/com/urbanairship/api/push/model/notification/actions/AppDefinedAction.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.model.notification.actions;
 
+import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.google.common.base.Objects;
 import com.google.common.base.Preconditions;
 import com.urbanairship.api.push.model.PushModelObject;
-import org.codehaus.jackson.node.ObjectNode;
 
 public final class AppDefinedAction extends PushModelObject implements Action<ObjectNode> {
 
diff --git a/src/main/java/com/urbanairship/api/push/model/notification/actions/TagActionData.java b/src/main/java/com/urbanairship/api/push/model/notification/actions/TagActionData.java
index 63d0c89..c126fcc 100644
--- a/src/main/java/com/urbanairship/api/push/model/notification/actions/TagActionData.java
+++ b/src/main/java/com/urbanairship/api/push/model/notification/actions/TagActionData.java
@@ -40,22 +40,22 @@ public abstract class TagActionData extends PushModelObject {
     }
 
     /**
-     * When true, this object represents a single tag (and calling {@link TagActionData.getSingleTag} will succeed).
-     * Otherwise, this represents a set of tags (and calling {@link TagActionData.getTagSet} will succeed).
+     * When true, this object represents a single tag (and calling {@link #getSingleTag()} will succeed).
+     * Otherwise, this represents a set of tags (and calling {@link #getTagSet()} will succeed).
      * @return boolean
      */
     public abstract boolean isSingle();
 
     /**
      * Returns the tag represented, if this object was constructed
-     * with {@link TagActionData.single}, otherwise throw an exception.
+     * with {@link #single(String)}, otherwise throw an exception.
      * @return String
      */
     public abstract String getSingleTag();
 
     /**
      * Returns the tags represented, if this object was constructed
-     * with {@link TagActionData.set}, otherwise throw an exception.
+     * with {@link #set(Set)}, otherwise throw an exception.
      * @return Set of tags
      */
     public abstract Set<String> getTagSet();
diff --git a/src/main/java/com/urbanairship/api/push/model/notification/android/Style.java b/src/main/java/com/urbanairship/api/push/model/notification/android/Style.java
index 145c358..0cf449d 100644
--- a/src/main/java/com/urbanairship/api/push/model/notification/android/Style.java
+++ b/src/main/java/com/urbanairship/api/push/model/notification/android/Style.java
@@ -3,14 +3,14 @@
  */
 package com.urbanairship.api.push.model.notification.android;
 
+import com.fasterxml.jackson.annotation.JsonSubTypes;
+import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import com.google.common.base.Optional;
-import org.codehaus.jackson.annotate.JsonSubTypes;
-import org.codehaus.jackson.annotate.JsonTypeInfo;
 
 /**
  * Base Interface for the Android Style objects.
  *
- * @param <T>
+ * @param <T> Style Type
  */
 @JsonTypeInfo(
         use = JsonTypeInfo.Id.NAME,
diff --git a/src/main/java/com/urbanairship/api/push/model/notification/open/OpenPayload.java b/src/main/java/com/urbanairship/api/push/model/notification/open/OpenPayload.java
new file mode 100644
index 0000000..3a843ec
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/push/model/notification/open/OpenPayload.java
@@ -0,0 +1,230 @@
+package com.urbanairship.api.push.model.notification.open;
+
+import com.google.common.base.Objects;
+import com.google.common.base.Optional;
+import com.google.common.base.Preconditions;
+import com.google.common.collect.ImmutableMap;
+import com.urbanairship.api.push.model.DeviceType;
+import com.urbanairship.api.push.model.PushModelObject;
+import com.urbanairship.api.push.model.notification.DevicePayloadOverride;
+import com.urbanairship.api.push.model.notification.Interactive;
+
+import java.util.Map;
+
+public final class OpenPayload extends PushModelObject implements DevicePayloadOverride {
+
+    private final Optional<String> alert;
+    private final Optional<String> title;
+    private final Optional<ImmutableMap<String,String>> extras;
+    private final Optional<String> summary;
+    private final Optional<String> mediaAttachment;
+    private final Optional<Interactive> interactive;
+    private final DeviceType deviceType;
+
+    private OpenPayload(Builder builder) {
+        this.alert = Optional.fromNullable(builder.alert);
+        this.title = Optional.fromNullable(builder.title);
+        if (builder.extras.build().isEmpty()) {
+            this.extras = Optional.absent();
+        } else {
+            this.extras = Optional.of(builder.extras.build());
+        }
+        this.summary = Optional.fromNullable(builder.summary);
+        this.mediaAttachment = Optional.fromNullable(builder.mediaAttachment);
+        this.interactive = Optional.fromNullable(builder.interactive);
+        this.deviceType = builder.deviceType;
+    }
+
+    public static Builder newBuilder() {
+        return new Builder();
+    }
+
+    @Override
+    public DeviceType getDeviceType() {
+        return deviceType;
+    }
+
+    /**
+     * Optional, override the alert value provided at the top level, if any.
+     *
+     * @return Optional String alert.
+     */
+    public Optional<String> getAlert() {
+        return alert;
+    }
+
+    /**
+     * Optional, a string representing the title of the notification.
+     *
+     * @return Optional String title.
+     */
+    public Optional<String> getTitle() {
+        return title;
+    }
+
+    /**
+     * A string to string map of additional values to deliver to the target.
+     *
+     * @return Optional ImmutableMap of Strings extras.
+     */
+    public Optional<ImmutableMap<String, String>> getExtras() {
+        return extras;
+    }
+
+    /**
+     * Optional, a string value for providing a content summary.
+     *
+     * @return Optional String summary
+     */
+    public Optional<String> getSummary() {
+        return summary;
+    }
+
+    /**
+     * Optional, a String representation of a URI for an image or video somewhere on the internet.
+     *
+     * @return Optional String mediaAttachment.
+     */
+    public Optional<String> getMediaAttachment() {
+        return mediaAttachment;
+    }
+
+    /**
+     * Optional. An Interactive object. Included button actions must be of type “add_tag”,
+     * “remove tag”, app_defined” or “open” with subtype “url”.
+     *
+     * @return Optional Interactive interactive.
+     */
+    public Optional<Interactive> getInteractive() {
+        return interactive;
+    }
+
+    @Override
+    public String toString() {
+        return "OpenPayload{" +
+                "alert=" + alert +
+                ", title=" + title +
+                ", extras=" + extras +
+                ", summary=" + summary +
+                ", mediaAttachment=" + mediaAttachment +
+                ", interactive=" + interactive +
+                '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        OpenPayload that = (OpenPayload) o;
+        return Objects.equal(alert, that.alert) &&
+                Objects.equal(title, that.title) &&
+                Objects.equal(extras, that.extras) &&
+                Objects.equal(summary, that.summary) &&
+                Objects.equal(mediaAttachment, that.mediaAttachment) &&
+                Objects.equal(interactive, that.interactive);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hashCode(alert, title, extras, summary, mediaAttachment, interactive);
+    }
+
+
+    /**
+     * OpenPayload Builder.
+     */
+    public static class Builder {
+        private DeviceType deviceType = null;
+        private String alert = null;
+        private String title = null;
+        private ImmutableMap.Builder<String, String> extras = ImmutableMap.builder();
+        private String summary = null;
+        private String mediaAttachment = null;
+        private Interactive interactive = null;
+
+        private Builder() { }
+
+        /**
+         * Optional, override the alert value provided at the top level, if any.
+         *
+         * @param alert String.
+         * @return OpenPayload Builder
+         */
+        public Builder setAlert(String alert) {
+            this.alert = alert;
+            return this;
+        }
+
+        /**
+         * Optional, a string representing the title of the notification.
+         *
+         * @param title Optional String
+         * @return OpenPayload Builder
+         */
+        public Builder setTitle(String title) {
+            this.title = title;
+            return this;
+        }
+
+        /**
+         * A string to string map of additional values to deliver to the target.
+         *
+         * @param entries Optional Map of Strings.
+         * @return OpenPayload Builder
+         */
+        public Builder setExtras(Map<String, String> entries) {
+            this.extras.putAll(entries);
+            return this;
+        }
+
+        /**
+         * Optional, a string value for providing a content summary.
+         *
+         * @param summary Optional String
+         * @return OpenPayload Builder
+         */
+        public Builder setSummary(String summary) {
+            this.summary = summary;
+            return this;
+        }
+
+        /**
+         * Optional, a String representation of a URI for an image or video somewhere on the internet.
+         *
+         * @param mediaAttachment String
+         * @return OpenPayload Builder
+         */
+        public Builder setMediaAttachment(String mediaAttachment) {
+            this.mediaAttachment = mediaAttachment;
+            return this;
+        }
+
+        /**
+         * Set the device type for the open channel payload.
+         *
+         * @param deviceType DeviceType
+         * @return OpenPayload Builder
+         */
+        public Builder setDeviceType(DeviceType deviceType) {
+            this.deviceType = deviceType;
+            return this;
+        }
+
+        /**
+         * Optional. An Interactive object. Included button actions must be of type “add_tag”,
+         * “remove tag”, app_defined” or “open” with subtype “url”.
+         *
+         * @param interactive Interactive
+         * @return OpenPayload Builder
+         */
+        public Builder setInteractive(Interactive interactive) {
+            this.interactive = interactive;
+            return this;
+        }
+
+        public OpenPayload build() {
+            Preconditions.checkNotNull(deviceType, "DeviceType must be set.");
+            return new OpenPayload(this);
+        }
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/push/model/notification/web/WebDevicePayload.java b/src/main/java/com/urbanairship/api/push/model/notification/web/WebDevicePayload.java
index 3b816b2..455992a 100644
--- a/src/main/java/com/urbanairship/api/push/model/notification/web/WebDevicePayload.java
+++ b/src/main/java/com/urbanairship/api/push/model/notification/web/WebDevicePayload.java
@@ -18,11 +18,13 @@ public final class WebDevicePayload extends PushModelObject implements DevicePay
     private final Optional<String> title;
     private final Optional<ImmutableMap<String, String>> extra;
     private final Optional<WebIcon> webIcon;
+    private final Optional<Boolean> requireInteraction;
 
     private WebDevicePayload(Builder builder) {
         this.alert = Optional.fromNullable(builder.alert);
         this.title = Optional.fromNullable(builder.title);
         this.webIcon = Optional.fromNullable(builder.webIcon);
+        this.requireInteraction = Optional.fromNullable(builder.requireInteraction);
 
         if (builder.extra.build().isEmpty()) {
             this.extra = Optional.absent();
@@ -87,6 +89,15 @@ public final class WebDevicePayload extends PushModelObject implements DevicePay
         return webIcon;
     }
 
+    /**
+     * Get the Require Interaction flag.
+     *
+     * @return Optional Boolean require interaction flag.
+     */
+    public Optional<Boolean> getRequireInteraction() {
+        return requireInteraction;
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -100,12 +111,14 @@ public final class WebDevicePayload extends PushModelObject implements DevicePay
         return Objects.equal(alert, payload.alert) &&
                 Objects.equal(title, payload.title) &&
                 Objects.equal(extra, payload.extra) &&
-                Objects.equal(webIcon, payload.webIcon);
+                Objects.equal(webIcon, payload.webIcon)&&
+                Objects.equal(requireInteraction, payload.requireInteraction);
     }
 
     @Override
     public int hashCode() {
-        return Objects.hashCode(alert, title, extra, webIcon);
+        return Objects.hashCode(alert, title, extra, webIcon,
+                requireInteraction);
     }
 
     @Override
@@ -115,6 +128,7 @@ public final class WebDevicePayload extends PushModelObject implements DevicePay
                 ", title=" + title +
                 ", extra=" + extra +
                 ", webIcon=" + webIcon +
+                ", requireInteraction=" + requireInteraction +
                 '}';
     }
 
@@ -126,6 +140,7 @@ public final class WebDevicePayload extends PushModelObject implements DevicePay
         private String title = null;
         private ImmutableMap.Builder<String, String> extra = ImmutableMap.builder();
         private WebIcon webIcon = null;
+        private Boolean requireInteraction = null;
 
         private Builder() { }
 
@@ -185,6 +200,22 @@ public final class WebDevicePayload extends PushModelObject implements DevicePay
             return this;
         }
 
+        /**
+         * Set the Require Interaction flag.
+         *
+         * @param value Boolean
+         * @return Builder
+         */
+        public Builder setRequireInteraction(boolean value){
+            this.requireInteraction = value;
+            return this;
+        }
+
+        /**
+         * Build the WebDevicePayload object.
+         *
+         * @return WebDevicePayload
+         */
         public WebDevicePayload build() {
             return new WebDevicePayload(this);
         }
diff --git a/src/main/java/com/urbanairship/api/push/parse/CampaignsSerializer.java b/src/main/java/com/urbanairship/api/push/parse/CampaignsSerializer.java
new file mode 100644
index 0000000..452694f
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/push/parse/CampaignsSerializer.java
@@ -0,0 +1,20 @@
+package com.urbanairship.api.push.parse;
+
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.SerializerProvider;
+import com.fasterxml.jackson.databind.ser.std.JsonValueSerializer;
+import com.urbanairship.api.push.model.Campaigns;
+import com.fasterxml.jackson.databind.JsonSerializer;
+
+import java.io.IOException;
+
+public class CampaignsSerializer extends JsonSerializer<Campaigns> {
+       @Override
+    public void serialize(Campaigns campaigns, JsonGenerator jsonGenerator, SerializerProvider provider) throws IOException{
+                jsonGenerator.writeStartObject();
+
+                        jsonGenerator.writeObjectField("categories", campaigns.getCategories());
+
+                        jsonGenerator.writeEndObject();
+       }
+}
diff --git a/src/main/java/com/urbanairship/api/push/parse/DeviceTypeDataSerializer.java b/src/main/java/com/urbanairship/api/push/parse/DeviceTypeDataSerializer.java
index a488a2f..6361232 100644
--- a/src/main/java/com/urbanairship/api/push/parse/DeviceTypeDataSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/DeviceTypeDataSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.DeviceTypeData;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/DeviceTypeSerializer.java b/src/main/java/com/urbanairship/api/push/parse/DeviceTypeSerializer.java
index 0424f12..2e592d8 100644
--- a/src/main/java/com/urbanairship/api/push/parse/DeviceTypeSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/DeviceTypeSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.DeviceType;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/DisplayDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/DisplayDeserializer.java
index ffa3198..1989e67 100644
--- a/src/main/java/com/urbanairship/api/push/parse/DisplayDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/DisplayDeserializer.java
@@ -1,5 +1,8 @@
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -7,9 +10,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.Display;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/DisplayReader.java b/src/main/java/com/urbanairship/api/push/parse/DisplayReader.java
index 7b1899b..af85671 100644
--- a/src/main/java/com/urbanairship/api/push/parse/DisplayReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/DisplayReader.java
@@ -1,12 +1,12 @@
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.google.common.base.Optional;
 import com.urbanairship.api.client.UrbanAirshipClient;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.push.model.Display;
 import com.urbanairship.api.push.model.Position;
-import org.codehaus.jackson.JsonParser;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/DisplaySerializer.java b/src/main/java/com/urbanairship/api/push/parse/DisplaySerializer.java
index 2511065..2cf2a16 100644
--- a/src/main/java/com/urbanairship/api/push/parse/DisplaySerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/DisplaySerializer.java
@@ -1,9 +1,9 @@
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.Display;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/InAppDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/InAppDeserializer.java
index e8d4b78..02490c9 100644
--- a/src/main/java/com/urbanairship/api/push/parse/InAppDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/InAppDeserializer.java
@@ -1,5 +1,8 @@
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -7,9 +10,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.InApp;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/InAppReader.java b/src/main/java/com/urbanairship/api/push/parse/InAppReader.java
index 64c5829..13ae940 100644
--- a/src/main/java/com/urbanairship/api/push/parse/InAppReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/InAppReader.java
@@ -1,5 +1,7 @@
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
@@ -7,8 +9,6 @@ import com.urbanairship.api.push.model.Display;
 import com.urbanairship.api.push.model.InApp;
 import com.urbanairship.api.push.model.notification.Interactive;
 import com.urbanairship.api.push.model.notification.actions.Actions;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
 import org.joda.time.DateTime;
 
 import java.io.IOException;
diff --git a/src/main/java/com/urbanairship/api/push/parse/InAppSerializer.java b/src/main/java/com/urbanairship/api/push/parse/InAppSerializer.java
index 40e7a5b..9bdc110 100644
--- a/src/main/java/com/urbanairship/api/push/parse/InAppSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/InAppSerializer.java
@@ -1,10 +1,10 @@
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.common.parse.DateFormats;
 import com.urbanairship.api.push.model.InApp;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/PlatformDataDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/PlatformDataDeserializer.java
index de3a58e..9b1f096 100644
--- a/src/main/java/com/urbanairship/api/push/parse/PlatformDataDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/PlatformDataDeserializer.java
@@ -4,14 +4,14 @@
 
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonToken;
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.push.model.DeviceType;
 import com.urbanairship.api.push.model.DeviceTypeData;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.JsonToken;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
-import org.codehaus.jackson.type.TypeReference;
 
 import java.io.IOException;
 import java.util.Set;
diff --git a/src/main/java/com/urbanairship/api/push/parse/PlatformDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/PlatformDeserializer.java
index f865402..96038bc 100644
--- a/src/main/java/com/urbanairship/api/push/parse/PlatformDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/PlatformDeserializer.java
@@ -4,12 +4,12 @@
 
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Optional;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.push.model.DeviceType;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
@@ -18,11 +18,10 @@ public class PlatformDeserializer extends JsonDeserializer<DeviceType> {
     @Override
     public DeviceType deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
         String deviceTypeString = jp.getText();
-        Optional<DeviceType> platform = DeviceType.fromIdentifierFunction.apply(deviceTypeString);
+        Optional<DeviceType> platform = DeviceType.find(deviceTypeString);
         if (!platform.isPresent()) {
-            APIParsingException.raise(String.format("Unrecognized device type '%s'",deviceTypeString), jp);
+            APIParsingException.raise(String.format("Unrecognized device type '%s'", deviceTypeString), jp);
         }
-
         return platform.get();
     }
 }
diff --git a/src/main/java/com/urbanairship/api/push/parse/PushExpiryDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/PushExpiryDeserializer.java
index ead9a50..8a800d3 100644
--- a/src/main/java/com/urbanairship/api/push/parse/PushExpiryDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/PushExpiryDeserializer.java
@@ -4,13 +4,13 @@
 
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonToken;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.DateTimeDeserializer;
 import com.urbanairship.api.push.model.PushExpiry;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.JsonToken;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/PushExpirySerializer.java b/src/main/java/com/urbanairship/api/push/parse/PushExpirySerializer.java
index a48ece4..9bf26d4 100644
--- a/src/main/java/com/urbanairship/api/push/parse/PushExpirySerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/PushExpirySerializer.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.common.parse.DateFormats;
 import com.urbanairship.api.push.model.PushExpiry;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/PushObjectMapper.java b/src/main/java/com/urbanairship/api/push/parse/PushObjectMapper.java
index 80d1025..1c178a8 100644
--- a/src/main/java/com/urbanairship/api/push/parse/PushObjectMapper.java
+++ b/src/main/java/com/urbanairship/api/push/parse/PushObjectMapper.java
@@ -4,8 +4,26 @@
 
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.Version;
+import com.fasterxml.jackson.databind.DeserializationFeature;
+import com.fasterxml.jackson.databind.JsonDeserializer;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.module.SimpleModule;
 import com.google.common.collect.ImmutableMap;
+import com.urbanairship.api.channel.model.open.OpenChannel;
+import com.urbanairship.api.channel.model.open.Channel;
+import com.urbanairship.api.channel.parse.open.ChannelSerializer;
+import com.urbanairship.api.channel.parse.open.OpenChannelSerializer;
 import com.urbanairship.api.common.parse.CommonObjectMapper;
+import com.urbanairship.api.customevents.model.CustomEventPayload;
+import com.urbanairship.api.customevents.model.CustomEventBody;
+import com.urbanairship.api.customevents.model.CustomEventResponse;
+import com.urbanairship.api.customevents.model.CustomEventUser;
+import com.urbanairship.api.customevents.parse.CustomEventBodySerializer;
+import com.urbanairship.api.customevents.parse.CustomEventResponseDeserializer;
+import com.urbanairship.api.customevents.parse.CustomEventSerializer;
+import com.urbanairship.api.customevents.parse.CustomEventUserSerializer;
+import com.urbanairship.api.push.model.Campaigns;
 import com.urbanairship.api.push.model.DeviceType;
 import com.urbanairship.api.push.model.DeviceTypeData;
 import com.urbanairship.api.push.model.Display;
@@ -42,6 +60,7 @@ import com.urbanairship.api.push.model.notification.android.InboxStyle;
 import com.urbanairship.api.push.model.notification.android.PublicNotification;
 import com.urbanairship.api.push.model.notification.android.Wearable;
 import com.urbanairship.api.push.model.notification.ios.*;
+import com.urbanairship.api.push.model.notification.open.OpenPayload;
 import com.urbanairship.api.push.model.notification.richpush.RichPushIcon;
 import com.urbanairship.api.push.model.notification.richpush.RichPushMessage;
 import com.urbanairship.api.push.model.notification.web.WebDevicePayload;
@@ -95,6 +114,7 @@ import com.urbanairship.api.push.parse.notification.android.PublicNotificationSe
 import com.urbanairship.api.push.parse.notification.android.WearableDeserializer;
 import com.urbanairship.api.push.parse.notification.android.WearableSerializer;
 import com.urbanairship.api.push.parse.notification.ios.*;
+import com.urbanairship.api.push.parse.notification.open.OpenPayloadSerializer;
 import com.urbanairship.api.push.parse.notification.richpush.RichPushIconDeserializer;
 import com.urbanairship.api.push.parse.notification.richpush.RichPushIconSerializer;
 import com.urbanairship.api.push.parse.notification.richpush.RichPushMessageDeserializer;
@@ -131,11 +151,6 @@ import com.urbanairship.api.schedule.parse.ScheduleDetailsSerializer;
 import com.urbanairship.api.schedule.parse.SchedulePayloadDeserializer;
 import com.urbanairship.api.schedule.parse.ScheduleSerializer;
 import com.urbanairship.api.schedule.parse.ScheduledPayloadSerializer;
-import org.codehaus.jackson.Version;
-import org.codehaus.jackson.map.DeserializationConfig;
-import org.codehaus.jackson.map.JsonDeserializer;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.map.module.SimpleModule;
 
 public class PushObjectMapper {
 
@@ -155,6 +170,7 @@ public class PushObjectMapper {
         WebDevicePayloadDeserializer webPayloadDS = new WebDevicePayloadDeserializer();
 
 
+
         NotificationDeserializer notificationDeserializer = new NotificationDeserializer(
                 ImmutableMap.<DeviceType, JsonDeserializer<? extends DevicePayloadOverride>>builder()
                         .put(DeviceType.WNS, wnsPayloadDS)
@@ -178,6 +194,7 @@ public class PushObjectMapper {
                 .addDeserializer(Display.class, new DisplayDeserializer())
                 .addSerializer(DeviceType.class, new DeviceTypeSerializer())
                 .addDeserializer(DeviceType.class, new PlatformDeserializer())
+                .addSerializer(Campaigns.class, new CampaignsSerializer())
                 .addSerializer(Selector.class, new SelectorSerializer())
                 .addDeserializer(Selector.class, new SelectorDeserializer())
                 .addSerializer(LocationSelector.class, new LocationSelectorSerializer())
@@ -194,7 +211,6 @@ public class PushObjectMapper {
                 .addDeserializer(PushResponse.class, new PushResponseDeserializer())
 
 
-
             /* IOS */
                 .addSerializer(IOSDevicePayload.class, new IOSDevicePayloadSerializer())
                 .addDeserializer(IOSDevicePayload.class, iosPayloadDS)
@@ -288,13 +304,26 @@ public class PushObjectMapper {
 
                 .addDeserializer(TagActionData.class, new TagActionDataDeserializer())
 
+            /* Custom Events */
+                .addSerializer(CustomEventUser.class, new CustomEventUserSerializer())
+                .addSerializer(CustomEventPayload.class, new CustomEventSerializer())
+                .addSerializer(CustomEventBody.class, new CustomEventBodySerializer())
+
+                .addDeserializer(CustomEventResponse.class, new CustomEventResponseDeserializer())
+
+            /* Open Channel */
+                .addSerializer(Channel.class, new ChannelSerializer())
+                .addSerializer(OpenChannel.class, new OpenChannelSerializer())
+                .addSerializer(OpenPayload.class, new OpenPayloadSerializer())
+
             /* Segments */
                 .addDeserializer(SegmentDefinition.class, new SegmentDefinitionDeserializer());
 
 
+
         MAPPER.registerModule(MODULE);
         MAPPER.registerModule(CommonObjectMapper.getModule());
-        MAPPER.configure(DeserializationConfig.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
+        MAPPER.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
     }
 
     public static SimpleModule getModule() {
diff --git a/src/main/java/com/urbanairship/api/push/parse/PushOptionsDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/PushOptionsDeserializer.java
index 2bd2d2b..cb5ce39 100644
--- a/src/main/java/com/urbanairship/api/push/parse/PushOptionsDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/PushOptionsDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.PushOptions;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/PushOptionsReader.java b/src/main/java/com/urbanairship/api/push/parse/PushOptionsReader.java
index 556354a..963a06c 100644
--- a/src/main/java/com/urbanairship/api/push/parse/PushOptionsReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/PushOptionsReader.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.push.model.PushExpiry;
 import com.urbanairship.api.push.model.PushOptions;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/PushOptionsSerializer.java b/src/main/java/com/urbanairship/api/push/parse/PushOptionsSerializer.java
index 02f37a5..2191f32 100644
--- a/src/main/java/com/urbanairship/api/push/parse/PushOptionsSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/PushOptionsSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.PushOptions;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/PushPayloadDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/PushPayloadDeserializer.java
index 81591a9..172c1ca 100644
--- a/src/main/java/com/urbanairship/api/push/parse/PushPayloadDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/PushPayloadDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.PushPayload;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/PushPayloadReader.java b/src/main/java/com/urbanairship/api/push/parse/PushPayloadReader.java
index e70b00f..1f2766c 100644
--- a/src/main/java/com/urbanairship/api/push/parse/PushPayloadReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/PushPayloadReader.java
@@ -4,6 +4,7 @@
 
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.push.model.DeviceTypeData;
@@ -13,7 +14,6 @@ import com.urbanairship.api.push.model.audience.Selector;
 import com.urbanairship.api.push.model.InApp;
 import com.urbanairship.api.push.model.notification.Notification;
 import com.urbanairship.api.push.model.notification.richpush.RichPushMessage;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/PushPayloadSerializer.java b/src/main/java/com/urbanairship/api/push/parse/PushPayloadSerializer.java
index ccb4876..1ac29b4 100644
--- a/src/main/java/com/urbanairship/api/push/parse/PushPayloadSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/PushPayloadSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.PushPayload;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
@@ -35,7 +35,9 @@ public class PushPayloadSerializer extends JsonSerializer<PushPayload> {
         if (payload.getInApp().isPresent()) {
             jgen.writeObjectField("in_app", payload.getInApp().get());
         }
-
+        if (payload.getCampaigns().isPresent()) {
+            jgen.writeObjectField("campaigns", payload.getCampaigns().get());
+        }
         jgen.writeEndObject();
     }
 }
diff --git a/src/main/java/com/urbanairship/api/push/parse/PushResponseDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/PushResponseDeserializer.java
index eb15a10..dab089c 100644
--- a/src/main/java/com/urbanairship/api/push/parse/PushResponseDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/PushResponseDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.PushResponse;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
@@ -74,7 +74,6 @@ public final class PushResponseDeserializer extends JsonDeserializer<PushRespons
                         return new PushResponseReader();
                     }
                 }
-
         );
     }
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/PushResponseReader.java b/src/main/java/com/urbanairship/api/push/parse/PushResponseReader.java
index 661ed97..c0be065 100644
--- a/src/main/java/com/urbanairship/api/push/parse/PushResponseReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/PushResponseReader.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.push.model.PushResponse;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
 
 import java.io.IOException;
 import java.util.List;
diff --git a/src/main/java/com/urbanairship/api/push/parse/audience/SelectorDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/audience/SelectorDeserializer.java
index 602d7f9..d63b29b 100644
--- a/src/main/java/com/urbanairship/api/push/parse/audience/SelectorDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/audience/SelectorDeserializer.java
@@ -4,6 +4,10 @@
 
 package com.urbanairship.api.push.parse.audience;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonToken;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.APIParsingException;
@@ -14,10 +18,6 @@ import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.audience.Selector;
 import com.urbanairship.api.push.model.audience.SelectorType;
 import com.urbanairship.api.push.model.audience.Selectors;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.JsonToken;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 import java.util.Map;
diff --git a/src/main/java/com/urbanairship/api/push/parse/audience/SelectorReader.java b/src/main/java/com/urbanairship/api/push/parse/audience/SelectorReader.java
index a722f5b..331f872 100644
--- a/src/main/java/com/urbanairship/api/push/parse/audience/SelectorReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/audience/SelectorReader.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.audience;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonToken;
+import com.fasterxml.jackson.databind.DeserializationContext;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
@@ -15,9 +18,6 @@ import com.urbanairship.api.push.model.audience.SelectorCategory;
 import com.urbanairship.api.push.model.audience.SelectorType;
 import com.urbanairship.api.push.model.audience.Selectors;
 import com.urbanairship.api.push.model.audience.location.LocationSelector;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.JsonToken;
-import org.codehaus.jackson.map.DeserializationContext;
 
 import java.io.IOException;
 import java.util.ArrayList;
diff --git a/src/main/java/com/urbanairship/api/push/parse/audience/SelectorSerializer.java b/src/main/java/com/urbanairship/api/push/parse/audience/SelectorSerializer.java
index f504cae..6439109 100644
--- a/src/main/java/com/urbanairship/api/push/parse/audience/SelectorSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/audience/SelectorSerializer.java
@@ -4,14 +4,14 @@
 
 package com.urbanairship.api.push.parse.audience;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.audience.CompoundSelector;
 import com.urbanairship.api.push.model.audience.Selector;
 import com.urbanairship.api.push.model.audience.SelectorType;
 import com.urbanairship.api.push.model.audience.ValueSelector;
 import com.urbanairship.api.push.model.audience.location.LocationSelector;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 import java.util.Map;
diff --git a/src/main/java/com/urbanairship/api/push/parse/audience/location/AbsoluteDateRangeDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/audience/location/AbsoluteDateRangeDeserializer.java
index f6a8d07..c617bf1 100644
--- a/src/main/java/com/urbanairship/api/push/parse/audience/location/AbsoluteDateRangeDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/audience/location/AbsoluteDateRangeDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.audience.location;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.audience.location.AbsoluteDateRange;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/audience/location/AbsoluteDateRangeReader.java b/src/main/java/com/urbanairship/api/push/parse/audience/location/AbsoluteDateRangeReader.java
index d71b5d4..14d091e 100644
--- a/src/main/java/com/urbanairship/api/push/parse/audience/location/AbsoluteDateRangeReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/audience/location/AbsoluteDateRangeReader.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.push.parse.audience.location;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.DateFormats;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.push.model.audience.location.AbsoluteDateRange;
-import org.codehaus.jackson.JsonParser;
 import org.joda.time.DateTime;
 import org.joda.time.format.DateTimeFormatter;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/audience/location/AbsoluteDateRangeSerializer.java b/src/main/java/com/urbanairship/api/push/parse/audience/location/AbsoluteDateRangeSerializer.java
index 570de2f..51b5ee2 100644
--- a/src/main/java/com/urbanairship/api/push/parse/audience/location/AbsoluteDateRangeSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/audience/location/AbsoluteDateRangeSerializer.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.push.parse.audience.location;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.audience.location.AbsoluteDateRange;
 import com.urbanairship.api.push.model.audience.location.PresenceTimeframe;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/audience/location/DateRangeDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/audience/location/DateRangeDeserializer.java
index dd1b28b..d671a35 100644
--- a/src/main/java/com/urbanairship/api/push/parse/audience/location/DateRangeDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/audience/location/DateRangeDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.audience.location;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -12,9 +15,6 @@ import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.audience.location.DateRange;
 import com.urbanairship.api.push.model.audience.location.DateRangeUnit;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/audience/location/DateRangeReader.java b/src/main/java/com/urbanairship/api/push/parse/audience/location/DateRangeReader.java
index 8b1bf80..6f97a93 100644
--- a/src/main/java/com/urbanairship/api/push/parse/audience/location/DateRangeReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/audience/location/DateRangeReader.java
@@ -4,6 +4,7 @@
 
 package com.urbanairship.api.push.parse.audience.location;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.BooleanFieldDeserializer;
 import com.urbanairship.api.common.parse.JsonObjectReader;
@@ -12,7 +13,6 @@ import com.urbanairship.api.push.model.audience.location.DateRange;
 import com.urbanairship.api.push.model.audience.location.DateRangeUnit;
 import com.urbanairship.api.push.model.audience.location.PresenceTimeframe;
 import com.urbanairship.api.push.model.audience.location.RecentDateRange;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/audience/location/LocationSelectorDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/audience/location/LocationSelectorDeserializer.java
index dad8d3b..cccd3e7 100644
--- a/src/main/java/com/urbanairship/api/push/parse/audience/location/LocationSelectorDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/audience/location/LocationSelectorDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.audience.location;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.audience.location.LocationSelector;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/audience/location/LocationSelectorReader.java b/src/main/java/com/urbanairship/api/push/parse/audience/location/LocationSelectorReader.java
index 7514880..4efc30b 100644
--- a/src/main/java/com/urbanairship/api/push/parse/audience/location/LocationSelectorReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/audience/location/LocationSelectorReader.java
@@ -4,13 +4,13 @@
 
 package com.urbanairship.api.push.parse.audience.location;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.push.model.audience.location.DateRange;
 import com.urbanairship.api.push.model.audience.location.LocationAlias;
 import com.urbanairship.api.push.model.audience.location.LocationIdentifier;
 import com.urbanairship.api.push.model.audience.location.LocationSelector;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/audience/location/LocationSelectorSerializer.java b/src/main/java/com/urbanairship/api/push/parse/audience/location/LocationSelectorSerializer.java
index da4db45..aae0b59 100644
--- a/src/main/java/com/urbanairship/api/push/parse/audience/location/LocationSelectorSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/audience/location/LocationSelectorSerializer.java
@@ -4,12 +4,12 @@
 
 package com.urbanairship.api.push.parse.audience.location;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.audience.location.LocationAlias;
 import com.urbanairship.api.push.model.audience.location.LocationIdentifier;
 import com.urbanairship.api.push.model.audience.location.LocationSelector;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/audience/location/RecentDateRangeDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/audience/location/RecentDateRangeDeserializer.java
index c887c66..34967d5 100644
--- a/src/main/java/com/urbanairship/api/push/parse/audience/location/RecentDateRangeDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/audience/location/RecentDateRangeDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.audience.location;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.audience.location.RecentDateRange;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/audience/location/RecentDateRangeReader.java b/src/main/java/com/urbanairship/api/push/parse/audience/location/RecentDateRangeReader.java
index 2986a06..adfb01a 100644
--- a/src/main/java/com/urbanairship/api/push/parse/audience/location/RecentDateRangeReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/audience/location/RecentDateRangeReader.java
@@ -4,12 +4,12 @@
 
 package com.urbanairship.api.push.parse.audience.location;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.IntFieldDeserializer;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.push.model.audience.location.DateRangeUnit;
 import com.urbanairship.api.push.model.audience.location.RecentDateRange;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/audience/location/RecentDateRangeSerializer.java b/src/main/java/com/urbanairship/api/push/parse/audience/location/RecentDateRangeSerializer.java
index 7fd95c9..9a3a470 100644
--- a/src/main/java/com/urbanairship/api/push/parse/audience/location/RecentDateRangeSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/audience/location/RecentDateRangeSerializer.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.push.parse.audience.location;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.audience.location.PresenceTimeframe;
 import com.urbanairship.api.push.model.audience.location.RecentDateRange;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/audience/location/SegmentDefinitionDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/audience/location/SegmentDefinitionDeserializer.java
index e2634ea..a1639cf 100644
--- a/src/main/java/com/urbanairship/api/push/parse/audience/location/SegmentDefinitionDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/audience/location/SegmentDefinitionDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.audience.location;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.audience.location.SegmentDefinition;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/audience/location/SegmentDefinitionReader.java b/src/main/java/com/urbanairship/api/push/parse/audience/location/SegmentDefinitionReader.java
index 9d9b48b..15aba09 100644
--- a/src/main/java/com/urbanairship/api/push/parse/audience/location/SegmentDefinitionReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/audience/location/SegmentDefinitionReader.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.push.parse.audience.location;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.common.parse.StringFieldDeserializer;
 import com.urbanairship.api.push.model.audience.Selector;
 import com.urbanairship.api.push.model.audience.location.SegmentDefinition;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/InteractiveDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/InteractiveDeserializer.java
index c2e44f5..217b72e 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/InteractiveDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/InteractiveDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.notification;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.Interactive;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/InteractiveReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/InteractiveReader.java
index 6e23e55..081654b 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/InteractiveReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/InteractiveReader.java
@@ -4,13 +4,13 @@
 
 package com.urbanairship.api.push.parse.notification;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.push.model.notification.Interactive;
 import com.urbanairship.api.push.model.notification.actions.Actions;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
 
 import java.io.IOException;
 import java.util.Map;
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/InteractiveSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/InteractiveSerializer.java
index deb936b..359b0c2 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/InteractiveSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/InteractiveSerializer.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.push.parse.notification;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.Interactive;
 import com.urbanairship.api.push.model.notification.actions.Actions;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/NotificationDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/NotificationDeserializer.java
index 7778956..05454e8 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/NotificationDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/NotificationDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.notification;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -13,9 +16,6 @@ import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.DeviceType;
 import com.urbanairship.api.push.model.notification.DevicePayloadOverride;
 import com.urbanairship.api.push.model.notification.Notification;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 import java.util.Map;
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/NotificationReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/NotificationReader.java
index 80340de..f2f6ea9 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/NotificationReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/NotificationReader.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.notification;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Optional;
 import com.google.common.collect.Maps;
 import com.urbanairship.api.common.parse.APIParsingException;
@@ -14,9 +17,6 @@ import com.urbanairship.api.push.model.notification.DevicePayloadOverride;
 import com.urbanairship.api.push.model.notification.Interactive;
 import com.urbanairship.api.push.model.notification.Notification;
 import com.urbanairship.api.push.model.notification.actions.Actions;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 import java.util.Map;
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/NotificationSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/NotificationSerializer.java
index 701ca7f..758ae61 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/NotificationSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/NotificationSerializer.java
@@ -4,12 +4,12 @@
 
 package com.urbanairship.api.push.parse.notification;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.DeviceType;
 import com.urbanairship.api.push.model.notification.DevicePayloadOverride;
 import com.urbanairship.api.push.model.notification.Notification;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 import java.util.Map;
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/actions/ActionsDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/actions/ActionsDeserializer.java
index ec3340b..5520cbf 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/actions/ActionsDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/actions/ActionsDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.notification.actions;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.actions.Actions;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/actions/ActionsReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/actions/ActionsReader.java
index 0179a97..89fb2b8 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/actions/ActionsReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/actions/ActionsReader.java
@@ -5,6 +5,11 @@
 
 package com.urbanairship.api.push.parse.notification.actions;
 
+import com.fasterxml.jackson.core.JsonParseException;
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.google.common.base.Optional;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.io.BaseEncoding;
@@ -25,11 +30,6 @@ import com.urbanairship.api.push.model.notification.actions.ShareAction;
 import com.urbanairship.api.push.model.notification.actions.TagActionData;
 import com.urbanairship.api.push.parse.PushObjectMapper;
 import org.apache.commons.lang.StringUtils;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.JsonParseException;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.ObjectNode;
 
 import java.io.IOException;
 import java.net.URI;
@@ -66,7 +66,7 @@ public final class ActionsReader implements JsonObjectReader<Actions> {
                         throw new APIParsingException("The content attribute must be present and it must be a string.");
                     }
 
-                    return new DeepLinkAction(content.getTextValue());
+                    return new DeepLinkAction(content.textValue());
                 }
             })
             .build();
@@ -112,20 +112,20 @@ public final class ActionsReader implements JsonObjectReader<Actions> {
         }
 
         {
-            String typeSubtype = contentType.getTextValue().split(";")[0].trim().toLowerCase();
+            String typeSubtype = contentType.textValue().split(";")[0].trim().toLowerCase();
             if (!LandingPageContent.ALLOWED_CONTENT_TYPES.contains(typeSubtype)) {
                 throw new APIParsingException("The content type '" + typeSubtype + "' is not allowed.");
             }
         }
 
         if (!contentEncoding.isMissingNode()) {
-            if (!contentEncoding.isTextual() || (!contentEncoding.getTextValue().equals("utf-8") &&
-                    !contentEncoding.getTextValue().equals("base64"))) {
+            if (!contentEncoding.isTextual() || (!contentEncoding.textValue().equals("utf-8") &&
+                    !contentEncoding.textValue().equals("base64"))) {
                 throw new APIParsingException("The content encoding attribute must be either 'utf-8' or 'base64'");
 
-            } else if (!contentEncoding.isMissingNode() && contentEncoding.getTextValue().equals("base64")) {
+            } else if (!contentEncoding.isMissingNode() && contentEncoding.textValue().equals("base64")) {
                 try {
-                    BaseEncoding.base64().decode(body.getTextValue());
+                    BaseEncoding.base64().decode(body.textValue());
                 } catch (IllegalArgumentException e) {
                     throw new APIParsingException("Content contains invalid data that is not valid for base64 encoding.");
                 }
@@ -134,11 +134,11 @@ public final class ActionsReader implements JsonObjectReader<Actions> {
 
         Optional<LandingPageContent.Encoding> optEncoding = contentEncoding.isMissingNode() ?
                 Optional.<LandingPageContent.Encoding>absent() :
-                Optional.of(contentEncoding.getTextValue().equals("base64") ?
+                Optional.of(contentEncoding.textValue().equals("base64") ?
                         LandingPageContent.Encoding.Base64 :
                         LandingPageContent.Encoding.UTF8);
 
-        String bodyString = body.getTextValue();
+        String bodyString = body.textValue();
         if (bodyString != null) {
             int max_size = optEncoding.isPresent() && optEncoding.get() == LandingPageContent.Encoding.Base64 ?
                     LandingPageContent.MAX_BODY_SIZE_BASE64 : LandingPageContent.MAX_BODY_SIZE_BYTES;
@@ -147,7 +147,7 @@ public final class ActionsReader implements JsonObjectReader<Actions> {
             }
         }
 
-        return new OpenLandingPageWithContentAction(LandingPageContent.newBuilder().setContentType(contentType.getTextValue())
+        return new OpenLandingPageWithContentAction(LandingPageContent.newBuilder().setContentType(contentType.textValue())
                 .setBody(bodyString)
                 .setEncoding(optEncoding)
                 .build());
@@ -161,7 +161,7 @@ public final class ActionsReader implements JsonObjectReader<Actions> {
 
         URI url;
         try {
-            url = new URI(content.getTextValue());
+            url = new URI(content.textValue());
         } catch (URISyntaxException e) {
             throw new APIParsingException("The content attribute for a url action must be a URL.");
         }
@@ -200,7 +200,7 @@ public final class ActionsReader implements JsonObjectReader<Actions> {
         }
 
         ObjectNode appDefinedObject = (ObjectNode) jsonNode;
-        if (!appDefinedObject.getFieldNames().hasNext()) {
+        if (!appDefinedObject.fieldNames().hasNext()) {
             throw new APIParsingException("The app_defined actions object MUST not be empty.");
         }
 
@@ -215,9 +215,9 @@ public final class ActionsReader implements JsonObjectReader<Actions> {
             throw new APIParsingException("The open object MUST have a 'type' attribute.");
         }
 
-        OpenActionReader reader = OPEN_ACTIONS.get(type.getTextValue());
+        OpenActionReader reader = OPEN_ACTIONS.get(type.textValue());
         if (reader == null) {
-            throw new APIParsingException("The type attribute '" + type.getTextValue() +
+            throw new APIParsingException("The type attribute '" + type.textValue() +
                     "' was not recognized.");
         }
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/actions/ActionsSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/actions/ActionsSerializer.java
index 3f6c834..b8bbef2 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/actions/ActionsSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/actions/ActionsSerializer.java
@@ -4,12 +4,12 @@
 
 package com.urbanairship.api.push.parse.notification.actions;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.actions.Action;
 import com.urbanairship.api.push.model.notification.actions.ActionNameRegistry;
 import com.urbanairship.api.push.model.notification.actions.Actions;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/actions/AddTagActionSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/actions/AddTagActionSerializer.java
index 63b8c68..a6f6360 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/actions/AddTagActionSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/actions/AddTagActionSerializer.java
@@ -4,12 +4,12 @@
 
 package com.urbanairship.api.push.parse.notification.actions;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.actions.AddTagAction;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/actions/AppDefinedSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/actions/AppDefinedSerializer.java
index 05cc119..556ee6a 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/actions/AppDefinedSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/actions/AppDefinedSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse.notification.actions;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.actions.AppDefinedAction;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/actions/DeepLinkSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/actions/DeepLinkSerializer.java
index edb8506..922aa63 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/actions/DeepLinkSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/actions/DeepLinkSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse.notification.actions;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.actions.DeepLinkAction;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/actions/ExternalURLSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/actions/ExternalURLSerializer.java
index d52d10c..0ebbbb0 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/actions/ExternalURLSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/actions/ExternalURLSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse.notification.actions;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.actions.OpenExternalURLAction;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/actions/LandingPageWithContentSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/actions/LandingPageWithContentSerializer.java
index 5fa5891..f254e33 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/actions/LandingPageWithContentSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/actions/LandingPageWithContentSerializer.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.push.parse.notification.actions;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.actions.LandingPageContent;
 import com.urbanairship.api.push.model.notification.actions.OpenLandingPageWithContentAction;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/actions/RemoveTagActionSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/actions/RemoveTagActionSerializer.java
index 3d5a856..e0e7ac6 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/actions/RemoveTagActionSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/actions/RemoveTagActionSerializer.java
@@ -4,12 +4,12 @@
 
 package com.urbanairship.api.push.parse.notification.actions;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.actions.RemoveTagAction;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/actions/ShareActionDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/actions/ShareActionDeserializer.java
index e742037..63a59a4 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/actions/ShareActionDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/actions/ShareActionDeserializer.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.push.parse.notification.actions;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.urbanairship.api.common.parse.StringFieldDeserializer;
 import com.urbanairship.api.push.model.notification.actions.ShareAction;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/actions/ShareActionSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/actions/ShareActionSerializer.java
index a22f97c..9dc1e40 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/actions/ShareActionSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/actions/ShareActionSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse.notification.actions;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.actions.ShareAction;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/actions/TagActionDataDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/actions/TagActionDataDeserializer.java
index 4df0269..6d48876 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/actions/TagActionDataDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/actions/TagActionDataDeserializer.java
@@ -4,14 +4,14 @@
 
 package com.urbanairship.api.push.parse.notification.actions;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
+import com.fasterxml.jackson.databind.JsonNode;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.push.model.notification.actions.TagActionData;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 import java.util.Iterator;
@@ -30,10 +30,10 @@ public final class TagActionDataDeserializer extends JsonDeserializer<TagActionD
         }
 
         if(jsonNode.isTextual()) {
-            return TagActionData.single(jsonNode.getTextValue());
+            return TagActionData.single(jsonNode.textValue());
         }
 
-        Iterator<JsonNode> items = jsonNode.getElements();
+        Iterator<JsonNode> items = jsonNode.elements();
         List<String> tags = Lists.newArrayList();
         while(items.hasNext()) {
             JsonNode item = items.next();
@@ -41,7 +41,7 @@ public final class TagActionDataDeserializer extends JsonDeserializer<TagActionD
                 throw new APIParsingException("Null or non-string tags are not allowed.");
             }
 
-            tags.add(item.getTextValue());
+            tags.add(item.textValue());
         }
 
         if(tags.size() == 0) {
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/actions/TagActionDataSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/actions/TagActionDataSerializer.java
index c3470fb..0c16ff4 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/actions/TagActionDataSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/actions/TagActionDataSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse.notification.actions;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.actions.TagActionData;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/adm/ADMDevicePayloadDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/adm/ADMDevicePayloadDeserializer.java
index c835902..946d891 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/adm/ADMDevicePayloadDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/adm/ADMDevicePayloadDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.notification.adm;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.adm.ADMDevicePayload;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/adm/ADMDevicePayloadReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/adm/ADMDevicePayloadReader.java
index 76c3ca8..148b1c1 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/adm/ADMDevicePayloadReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/adm/ADMDevicePayloadReader.java
@@ -4,6 +4,7 @@
 
 package com.urbanairship.api.push.parse.notification.adm;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.common.parse.MapOfStringsDeserializer;
@@ -11,7 +12,6 @@ import com.urbanairship.api.common.parse.StringFieldDeserializer;
 import com.urbanairship.api.push.model.PushExpiry;
 import com.urbanairship.api.push.model.notification.Interactive;
 import com.urbanairship.api.push.model.notification.adm.ADMDevicePayload;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/adm/ADMDevicePayloadSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/adm/ADMDevicePayloadSerializer.java
index 1c0b5b8..2c943e1 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/adm/ADMDevicePayloadSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/adm/ADMDevicePayloadSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse.notification.adm;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.adm.ADMDevicePayload;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/android/AndroidDevicePayloadDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/android/AndroidDevicePayloadDeserializer.java
index fe0bbdc..a93d0a2 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/android/AndroidDevicePayloadDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/android/AndroidDevicePayloadDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.notification.android;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.android.AndroidDevicePayload;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/android/AndroidDevicePayloadReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/android/AndroidDevicePayloadReader.java
index c3b154a..918a51d 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/android/AndroidDevicePayloadReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/android/AndroidDevicePayloadReader.java
@@ -4,6 +4,7 @@
 
 package com.urbanairship.api.push.parse.notification.android;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.BooleanFieldDeserializer;
 import com.urbanairship.api.common.parse.JsonObjectReader;
@@ -16,7 +17,6 @@ import com.urbanairship.api.push.model.notification.android.Category;
 import com.urbanairship.api.push.model.notification.android.PublicNotification;
 import com.urbanairship.api.push.model.notification.android.Style;
 import com.urbanairship.api.push.model.notification.android.Wearable;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/android/AndroidDevicePayloadSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/android/AndroidDevicePayloadSerializer.java
index 5fa437d..5c71025 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/android/AndroidDevicePayloadSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/android/AndroidDevicePayloadSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse.notification.android;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.android.AndroidDevicePayload;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/android/BigPictureStyleDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/android/BigPictureStyleDeserializer.java
index 5567d84..c1280ca 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/android/BigPictureStyleDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/android/BigPictureStyleDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.notification.android;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.android.BigPictureStyle;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/android/BigPictureStyleReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/android/BigPictureStyleReader.java
index 6a863fc..1b3a039 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/android/BigPictureStyleReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/android/BigPictureStyleReader.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.push.parse.notification.android;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.common.parse.StringFieldDeserializer;
 import com.urbanairship.api.push.model.notification.android.BigPictureStyle;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/android/BigPictureStyleSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/android/BigPictureStyleSerializer.java
index 06cefd6..d5925a2 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/android/BigPictureStyleSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/android/BigPictureStyleSerializer.java
@@ -4,11 +4,13 @@
 
 package com.urbanairship.api.push.parse.notification.android;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.urbanairship.api.push.model.notification.android.BigPictureStyle;
+import com.urbanairship.api.push.model.notification.android.BigTextStyle;
 import com.urbanairship.api.push.model.notification.android.Style;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
@@ -16,8 +18,6 @@ public class BigPictureStyleSerializer extends JsonSerializer<BigPictureStyle> {
 
     @Override
     public void serialize(BigPictureStyle style, JsonGenerator jgen, SerializerProvider provider) throws IOException {
-        jgen.writeStartObject();
-
         jgen.writeStringField("type", Style.Type.BIG_PICTURE.getStyleType());
         jgen.writeStringField("big_picture", style.getContent());
         if (style.getTitle().isPresent()) {
@@ -26,7 +26,15 @@ public class BigPictureStyleSerializer extends JsonSerializer<BigPictureStyle> {
         if (style.getSummary().isPresent()) {
             jgen.writeStringField("summary", style.getSummary().get());
         }
+    }
+
+    @Override
+    public void serializeWithType(BigPictureStyle style, JsonGenerator jgen,
+                                  SerializerProvider provider,
+                                  TypeSerializer typeSerializer) throws IOException {
 
-        jgen.writeEndObject();
+        typeSerializer.writeTypePrefixForObject(style, jgen);
+        serialize(style, jgen, provider);
+        typeSerializer.writeTypeSuffixForObject(style, jgen);
     }
 }
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/android/BigTextStyleDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/android/BigTextStyleDeserializer.java
index 948a253..c521d4c 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/android/BigTextStyleDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/android/BigTextStyleDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.notification.android;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.android.BigTextStyle;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/android/BigTextStyleReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/android/BigTextStyleReader.java
index 66de224..059d1e7 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/android/BigTextStyleReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/android/BigTextStyleReader.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.push.parse.notification.android;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.common.parse.StringFieldDeserializer;
 import com.urbanairship.api.push.model.notification.android.BigTextStyle;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/android/BigTextStyleSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/android/BigTextStyleSerializer.java
index cfb4216..b8e3c0b 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/android/BigTextStyleSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/android/BigTextStyleSerializer.java
@@ -4,11 +4,12 @@
 
 package com.urbanairship.api.push.parse.notification.android;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.urbanairship.api.push.model.notification.android.BigTextStyle;
 import com.urbanairship.api.push.model.notification.android.Style;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
@@ -16,7 +17,7 @@ public class BigTextStyleSerializer extends JsonSerializer<BigTextStyle> {
 
     @Override
     public void serialize(BigTextStyle style, JsonGenerator jgen, SerializerProvider provider) throws IOException {
-        jgen.writeStartObject();
+        //jgen.writeStartObject();
 
         jgen.writeStringField("type", Style.Type.BIG_TEXT.getStyleType());
         jgen.writeStringField("big_text", style.getContent());
@@ -27,6 +28,14 @@ public class BigTextStyleSerializer extends JsonSerializer<BigTextStyle> {
             jgen.writeStringField("summary", style.getSummary().get());
         }
 
-        jgen.writeEndObject();
+        //jgen.writeEndObject();
+    }
+
+
+    @Override
+    public void serializeWithType(BigTextStyle style, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSerializer) throws IOException {
+        typeSerializer.writeTypePrefixForObject(style, jgen);
+        serialize(style, jgen, provider);
+        typeSerializer.writeTypeSuffixForObject(style, jgen);
     }
 }
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/android/CategoryDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/android/CategoryDeserializer.java
index 3c3face..08af2fd 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/android/CategoryDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/android/CategoryDeserializer.java
@@ -1,11 +1,11 @@
 package com.urbanairship.api.push.parse.notification.android;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Optional;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.push.model.notification.android.Category;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/android/InboxStyleDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/android/InboxStyleDeserializer.java
index 974bd90..72efa28 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/android/InboxStyleDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/android/InboxStyleDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.notification.android;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.android.InboxStyle;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/android/InboxStyleReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/android/InboxStyleReader.java
index 0502347..d080555 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/android/InboxStyleReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/android/InboxStyleReader.java
@@ -4,12 +4,12 @@
 
 package com.urbanairship.api.push.parse.notification.android;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.common.parse.StringFieldDeserializer;
 import com.urbanairship.api.push.model.notification.android.InboxStyle;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
 
 import java.io.IOException;
 import java.util.List;
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/android/InboxStyleSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/android/InboxStyleSerializer.java
index 05ba69e..c1d0963 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/android/InboxStyleSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/android/InboxStyleSerializer.java
@@ -4,11 +4,13 @@
 
 package com.urbanairship.api.push.parse.notification.android;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
+import com.urbanairship.api.push.model.notification.android.BigPictureStyle;
 import com.urbanairship.api.push.model.notification.android.InboxStyle;
 import com.urbanairship.api.push.model.notification.android.Style;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
@@ -16,8 +18,6 @@ public class InboxStyleSerializer extends JsonSerializer<InboxStyle> {
 
     @Override
     public void serialize(InboxStyle style, JsonGenerator jgen, SerializerProvider provider) throws IOException {
-        jgen.writeStartObject();
-
         jgen.writeStringField("type", Style.Type.INBOX.getStyleType());
         jgen.writeArrayFieldStart("lines");
         for (String value : style.getContent()) {
@@ -31,7 +31,15 @@ public class InboxStyleSerializer extends JsonSerializer<InboxStyle> {
         if (style.getSummary().isPresent()) {
             jgen.writeStringField("summary", style.getSummary().get());
         }
+    }
+
+    @Override
+    public void serializeWithType(InboxStyle style, JsonGenerator jgen,
+                                  SerializerProvider provider,
+                                  TypeSerializer typeSerializer) throws IOException {
 
-        jgen.writeEndObject();
+        typeSerializer.writeTypePrefixForObject(style, jgen);
+        serialize(style, jgen, provider);
+        typeSerializer.writeTypeSuffixForObject(style, jgen);
     }
 }
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/android/PublicNotificationDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/android/PublicNotificationDeserializer.java
index 34f7be3..43038bc 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/android/PublicNotificationDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/android/PublicNotificationDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.notification.android;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.android.PublicNotification;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/android/PublicNotificationReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/android/PublicNotificationReader.java
index 1da393e..19345da 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/android/PublicNotificationReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/android/PublicNotificationReader.java
@@ -5,11 +5,11 @@
 package com.urbanairship.api.push.parse.notification.android;
 
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.common.parse.StringFieldDeserializer;
 import com.urbanairship.api.push.model.notification.android.PublicNotification;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/android/PublicNotificationSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/android/PublicNotificationSerializer.java
index 313aef6..ac168cc 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/android/PublicNotificationSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/android/PublicNotificationSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse.notification.android;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.android.PublicNotification;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/android/WearableDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/android/WearableDeserializer.java
index 608211c..e42b60d 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/android/WearableDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/android/WearableDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.notification.android;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.android.Wearable;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/android/WearableReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/android/WearableReader.java
index 434327d..cf2d8f6 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/android/WearableReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/android/WearableReader.java
@@ -4,6 +4,8 @@
 
 package com.urbanairship.api.push.parse.notification.android;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.APIParsingException;
@@ -11,8 +13,6 @@ import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.common.parse.StringFieldDeserializer;
 import com.urbanairship.api.push.model.notification.Interactive;
 import com.urbanairship.api.push.model.notification.android.Wearable;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
 
 import java.io.IOException;
 import java.util.List;
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/android/WearableSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/android/WearableSerializer.java
index b8502df..863406f 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/android/WearableSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/android/WearableSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse.notification.android;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.android.Wearable;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/ios/CropDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/ios/CropDeserializer.java
index d6f278b..5e7bb32 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/ios/CropDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/ios/CropDeserializer.java
@@ -3,6 +3,9 @@
  */
 package com.urbanairship.api.push.parse.notification.ios;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -10,9 +13,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.ios.Crop;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/ios/CropPayloadReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/ios/CropPayloadReader.java
index f697d0d..e32ff80 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/ios/CropPayloadReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/ios/CropPayloadReader.java
@@ -3,11 +3,10 @@
  */
 package com.urbanairship.api.push.parse.notification.ios;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.push.model.notification.ios.Crop;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/ios/CropSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/ios/CropSerializer.java
index 787076c..4d6920e 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/ios/CropSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/ios/CropSerializer.java
@@ -3,15 +3,15 @@
  */
 package com.urbanairship.api.push.parse.notification.ios;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.ios.Crop;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.JsonProcessingException;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
-public class CropSerializer extends JsonSerializer<Crop>{
+public class CropSerializer extends JsonSerializer<Crop> {
     @Override
     public void serialize(Crop crop, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
         jgen.writeStartObject();
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSAlertDataDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSAlertDataDeserializer.java
index 8b230ec..46e6e21 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSAlertDataDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSAlertDataDeserializer.java
@@ -4,6 +4,10 @@
 
 package com.urbanairship.api.push.parse.notification.ios;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonToken;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.APIParsingException;
@@ -12,10 +16,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.ios.IOSAlertData;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.JsonToken;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSAlertDataReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSAlertDataReader.java
index 73756ea..3287347 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSAlertDataReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSAlertDataReader.java
@@ -4,12 +4,12 @@
 
 package com.urbanairship.api.push.parse.notification.ios;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.common.parse.ListOfStringsDeserializer;
 import com.urbanairship.api.common.parse.StringFieldDeserializer;
 import com.urbanairship.api.push.model.notification.ios.IOSAlertData;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSAlertDataSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSAlertDataSerializer.java
index 1cb7000..42243bd 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSAlertDataSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSAlertDataSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse.notification.ios;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.ios.IOSAlertData;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSBadgeDataDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSBadgeDataDeserializer.java
index 89030ac..24e6ad8 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSBadgeDataDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSBadgeDataDeserializer.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.push.parse.notification.ios;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonToken;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.push.model.notification.ios.IOSBadgeData;
 import org.apache.commons.lang.StringUtils;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.JsonToken;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSBadgeDataSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSBadgeDataSerializer.java
index 7454ba5..4990d60 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSBadgeDataSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSBadgeDataSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse.notification.ios;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.ios.IOSBadgeData;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSDevicePayloadDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSDevicePayloadDeserializer.java
index 7047bbb..755f952 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSDevicePayloadDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSDevicePayloadDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.notification.ios;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.ios.IOSDevicePayload;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSDevicePayloadReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSDevicePayloadReader.java
index be0874f..caecb45 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSDevicePayloadReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSDevicePayloadReader.java
@@ -4,6 +4,8 @@
 
 package com.urbanairship.api.push.parse.notification.ios;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.BooleanFieldDeserializer;
 import com.urbanairship.api.common.parse.JsonObjectReader;
@@ -12,8 +14,6 @@ import com.urbanairship.api.common.parse.StringFieldDeserializer;
 import com.urbanairship.api.push.model.PushExpiry;
 import com.urbanairship.api.push.model.notification.Interactive;
 import com.urbanairship.api.push.model.notification.ios.IOSDevicePayload;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSDevicePayloadSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSDevicePayloadSerializer.java
index 417dfc6..8725b29 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSDevicePayloadSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSDevicePayloadSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse.notification.ios;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.ios.IOSDevicePayload;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSMediaContentDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSMediaContentDeserializer.java
index 11a436b..9293d86 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSMediaContentDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSMediaContentDeserializer.java
@@ -3,6 +3,10 @@
  */
 package com.urbanairship.api.push.parse.notification.ios;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -10,10 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.ios.IOSMediaContent;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.JsonProcessingException;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSMediaContentReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSMediaContentReader.java
index 51c1ee4..39312e1 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSMediaContentReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSMediaContentReader.java
@@ -3,12 +3,12 @@
  */
 package com.urbanairship.api.push.parse.notification.ios;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.common.parse.StringFieldDeserializer;
 import com.urbanairship.api.push.model.notification.ios.IOSMediaContent;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSMediaContentSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSMediaContentSerializer.java
index a429ff9..e5424af 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSMediaContentSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSMediaContentSerializer.java
@@ -3,10 +3,10 @@
  */
 package com.urbanairship.api.push.parse.notification.ios;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.ios.IOSMediaContent;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSMediaOptionsDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSMediaOptionsDeserializer.java
index 2b0337a..0bd9776 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSMediaOptionsDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSMediaOptionsDeserializer.java
@@ -3,6 +3,9 @@
  */
 package com.urbanairship.api.push.parse.notification.ios;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -10,9 +13,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.ios.IOSMediaOptions;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSMediaOptionsPayloadReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSMediaOptionsPayloadReader.java
index e5107a2..a75c8c2 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSMediaOptionsPayloadReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSMediaOptionsPayloadReader.java
@@ -3,14 +3,13 @@
  */
 package com.urbanairship.api.push.parse.notification.ios;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.BooleanFieldDeserializer;
 import com.urbanairship.api.common.parse.IntFieldDeserializer;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.push.model.notification.ios.Crop;
 import com.urbanairship.api.push.model.notification.ios.IOSMediaOptions;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSMediaOptionsSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSMediaOptionsSerializer.java
index c39e66d..45222de 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSMediaOptionsSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/ios/IOSMediaOptionsSerializer.java
@@ -3,15 +3,15 @@
  */
 package com.urbanairship.api.push.parse.notification.ios;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.ios.IOSMediaOptions;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.JsonProcessingException;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
-public class IOSMediaOptionsSerializer extends JsonSerializer<IOSMediaOptions>{
+public class IOSMediaOptionsSerializer extends JsonSerializer<IOSMediaOptions> {
 
     @Override
     public void serialize(IOSMediaOptions options, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/ios/MediaAttachmentDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/ios/MediaAttachmentDeserializer.java
index cf45ed6..10638ea 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/ios/MediaAttachmentDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/ios/MediaAttachmentDeserializer.java
@@ -4,18 +4,17 @@
 package com.urbanairship.api.push.parse.notification.ios;
 
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
-import com.google.common.collect.ImmutableBiMap;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
 import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.ios.MediaAttachment;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.JsonProcessingException;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/ios/MediaAttachmentReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/ios/MediaAttachmentReader.java
index a4a3ceb..b3b9552 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/ios/MediaAttachmentReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/ios/MediaAttachmentReader.java
@@ -4,13 +4,13 @@
 package com.urbanairship.api.push.parse.notification.ios;
 
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.push.model.notification.ios.IOSMediaContent;
 import com.urbanairship.api.push.model.notification.ios.MediaAttachment;
 import com.urbanairship.api.push.model.notification.ios.IOSMediaOptions;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/ios/MediaAttachmentSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/ios/MediaAttachmentSerializer.java
index b6ab659..fc80639 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/ios/MediaAttachmentSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/ios/MediaAttachmentSerializer.java
@@ -4,11 +4,10 @@
 package com.urbanairship.api.push.parse.notification.ios;
 
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.ios.MediaAttachment;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.JsonProcessingException;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/open/OpenPayloadSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/open/OpenPayloadSerializer.java
new file mode 100644
index 0000000..7da4a9c
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/open/OpenPayloadSerializer.java
@@ -0,0 +1,41 @@
+package com.urbanairship.api.push.parse.notification.open;
+
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
+import com.urbanairship.api.push.model.notification.open.OpenPayload;
+
+import java.io.IOException;
+
+public class OpenPayloadSerializer extends JsonSerializer<OpenPayload> {
+    @Override
+    public void serialize(OpenPayload payload, JsonGenerator jgen, SerializerProvider provider) throws IOException {
+        jgen.writeStartObject();
+
+        if (payload.getAlert().isPresent()) {
+            jgen.writeStringField("alert", payload.getAlert().get());
+        }
+
+        if (payload.getExtras().isPresent()) {
+            jgen.writeObjectField("extra", payload.getExtras().get());
+        }
+
+        if (payload.getInteractive().isPresent()) {
+            jgen.writeObjectField("interactive", payload.getInteractive().get());
+        }
+
+        if (payload.getMediaAttachment().isPresent()) {
+            jgen.writeStringField("media_attachment", payload.getMediaAttachment().get());
+        }
+
+        if (payload.getTitle().isPresent()) {
+            jgen.writeStringField("title", payload.getTitle().get());
+        }
+
+        if (payload.getSummary().isPresent()) {
+            jgen.writeStringField("summary", payload.getSummary().get());
+        }
+
+        jgen.writeEndObject();
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/richpush/RichPushIconDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/richpush/RichPushIconDeserializer.java
index 3e0a8e2..1c0d120 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/richpush/RichPushIconDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/richpush/RichPushIconDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.notification.richpush;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.richpush.RichPushIcon;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/richpush/RichPushIconReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/richpush/RichPushIconReader.java
index 5051dc5..91c10a2 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/richpush/RichPushIconReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/richpush/RichPushIconReader.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.push.parse.notification.richpush;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.common.parse.StringFieldDeserializer;
 import com.urbanairship.api.push.model.notification.richpush.RichPushIcon;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/richpush/RichPushIconSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/richpush/RichPushIconSerializer.java
index 0f8f694..978bade 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/richpush/RichPushIconSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/richpush/RichPushIconSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse.notification.richpush;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.richpush.RichPushIcon;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/richpush/RichPushMessageDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/richpush/RichPushMessageDeserializer.java
index 58f7f3e..9b1539c 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/richpush/RichPushMessageDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/richpush/RichPushMessageDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.notification.richpush;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.richpush.RichPushMessage;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/richpush/RichPushMessageReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/richpush/RichPushMessageReader.java
index c1c0265..9658b2d 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/richpush/RichPushMessageReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/richpush/RichPushMessageReader.java
@@ -4,6 +4,7 @@
 
 package com.urbanairship.api.push.parse.notification.richpush;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.common.parse.MapOfStringsDeserializer;
@@ -11,7 +12,6 @@ import com.urbanairship.api.common.parse.StringFieldDeserializer;
 import com.urbanairship.api.push.model.PushExpiry;
 import com.urbanairship.api.push.model.notification.richpush.RichPushIcon;
 import com.urbanairship.api.push.model.notification.richpush.RichPushMessage;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/richpush/RichPushMessageSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/richpush/RichPushMessageSerializer.java
index d7df789..d1ed792 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/richpush/RichPushMessageSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/richpush/RichPushMessageSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse.notification.richpush;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.richpush.RichPushMessage;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadDeserializer.java
index ed9949f..f0b2372 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadDeserializer.java
@@ -1,5 +1,8 @@
 package com.urbanairship.api.push.parse.notification.web;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -7,9 +10,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.web.WebDevicePayload;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
@@ -37,6 +37,11 @@ public class WebDevicePayloadDeserializer extends JsonDeserializer<WebDevicePayl
                             reader.readWebIcon(json);
                         }
                     })
+                    .put("require_interaction", new FieldParser<WebDevicePayloadReader>() {
+                        public void parse(WebDevicePayloadReader reader, JsonParser json, DeserializationContext context) throws IOException {
+                            reader.readRequireInteraction(json);
+                        }
+                    })
                     .build()
     );
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadReader.java
index b2ec591..77d824e 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadReader.java
@@ -1,12 +1,13 @@
 package com.urbanairship.api.push.parse.notification.web;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
+import com.urbanairship.api.common.parse.BooleanFieldDeserializer;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.common.parse.MapOfStringsDeserializer;
 import com.urbanairship.api.common.parse.StringFieldDeserializer;
 import com.urbanairship.api.push.model.notification.web.WebDevicePayload;
 import com.urbanairship.api.push.model.notification.web.WebIcon;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
@@ -34,6 +35,10 @@ public class WebDevicePayloadReader implements JsonObjectReader<WebDevicePayload
         builder.setWebIcon(parser.readValueAs(WebIcon.class));
     }
 
+    public void readRequireInteraction(JsonParser parser) throws IOException {
+        builder.setRequireInteraction(BooleanFieldDeserializer.INSTANCE.deserialize(parser, "require_interaction"));
+    }
+
     @Override
     public WebDevicePayload validateAndBuild() throws IOException {
         try{
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadSerializer.java
index 1e208c4..1aea676 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/web/WebDevicePayloadSerializer.java
@@ -1,9 +1,9 @@
 package com.urbanairship.api.push.parse.notification.web;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.web.WebDevicePayload;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
@@ -28,6 +28,10 @@ public class WebDevicePayloadSerializer extends JsonSerializer<WebDevicePayload>
             jgen.writeStringField("title", payload.getTitle().get());
         }
 
+        if (payload.getRequireInteraction().isPresent()) {
+            jgen.writeObjectField("require_interaction", payload.getRequireInteraction().get());
+        }
+
         jgen.writeEndObject();
     }
 }
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/web/WebIconDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/web/WebIconDeserializer.java
index dbf1f23..c3e738e 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/web/WebIconDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/web/WebIconDeserializer.java
@@ -1,5 +1,8 @@
 package com.urbanairship.api.push.parse.notification.web;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -7,9 +10,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.web.WebIcon;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/web/WebIconReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/web/WebIconReader.java
index b3c406a..9141474 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/web/WebIconReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/web/WebIconReader.java
@@ -1,10 +1,10 @@
 package com.urbanairship.api.push.parse.notification.web;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.common.parse.StringFieldDeserializer;
 import com.urbanairship.api.push.model.notification.web.WebIcon;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/web/WebIconSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/web/WebIconSerializer.java
index 429e574..3fec6ba 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/web/WebIconSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/web/WebIconSerializer.java
@@ -1,14 +1,14 @@
 package com.urbanairship.api.push.parse.notification.web;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.web.WebIcon;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.JsonProcessingException;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
-public class WebIconSerializer extends JsonSerializer<WebIcon>{
+public class WebIconSerializer extends JsonSerializer<WebIcon> {
     @Override
     public void serialize(WebIcon webIcon, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
         jgen.writeStartObject();
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSAudioDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSAudioDeserializer.java
index 4757ce3..374ef7b 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSAudioDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSAudioDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.wns.WNSAudioData;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSAudioReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSAudioReader.java
index c385562..650b6bb 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSAudioReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSAudioReader.java
@@ -4,12 +4,12 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.BooleanFieldDeserializer;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.push.model.notification.wns.WNSAudioData;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSAudioSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSAudioSerializer.java
index a93a5bc..c5d75f2 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSAudioSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSAudioSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.wns.WNSAudioData;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSBadgeDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSBadgeDeserializer.java
index f184ae1..98ebe32 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSBadgeDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSBadgeDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.wns.WNSBadgeData;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSBadgeReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSBadgeReader.java
index 2c4d019..4d7c6f0 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSBadgeReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSBadgeReader.java
@@ -4,12 +4,12 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.IntFieldDeserializer;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.push.model.notification.wns.WNSBadgeData;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSBadgeSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSBadgeSerializer.java
index 8381553..cfe7423 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSBadgeSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSBadgeSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.wns.WNSBadgeData;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSBindingDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSBindingDeserializer.java
index 3009f70..fc07ced 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSBindingDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSBindingDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.wns.WNSBinding;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSBindingReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSBindingReader.java
index f7218e0..449b474 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSBindingReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSBindingReader.java
@@ -4,6 +4,7 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.BooleanFieldDeserializer;
 import com.urbanairship.api.common.parse.IntFieldDeserializer;
@@ -11,7 +12,6 @@ import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.common.parse.ListOfStringsDeserializer;
 import com.urbanairship.api.common.parse.StringFieldDeserializer;
 import com.urbanairship.api.push.model.notification.wns.WNSBinding;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSBindingSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSBindingSerializer.java
index b864730..4b205e1 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSBindingSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSBindingSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.wns.WNSBinding;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSCachePolicyDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSCachePolicyDeserializer.java
index 5877aee..4c530cd 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSCachePolicyDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSCachePolicyDeserializer.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.push.model.notification.wns.WNSPush;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSCachePolicySerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSCachePolicySerializer.java
index 8105d28..62999a4 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSCachePolicySerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSCachePolicySerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.wns.WNSPush;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSDevicePayloadDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSDevicePayloadDeserializer.java
index 06c7195..cbb66a4 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSDevicePayloadDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSDevicePayloadDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.wns.WNSDevicePayload;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSDevicePayloadReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSDevicePayloadReader.java
index 1e76ba7..99d23b6 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSDevicePayloadReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSDevicePayloadReader.java
@@ -4,14 +4,14 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
 import com.google.common.base.Optional;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.common.parse.StringFieldDeserializer;
 import com.urbanairship.api.push.model.notification.wns.WNSDevicePayload;
 import com.urbanairship.api.push.model.notification.wns.WNSPush;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSDevicePayloadSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSDevicePayloadSerializer.java
index 3dfdd11..50ffcb5 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSDevicePayloadSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSDevicePayloadSerializer.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.wns.WNSDevicePayload;
 import com.urbanairship.api.push.model.notification.wns.WNSPush;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSDurationDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSDurationDeserializer.java
index 3b22217..38e05e8 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSDurationDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSDurationDeserializer.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.push.model.notification.wns.WNSToastData;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSDurationSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSDurationSerializer.java
index e17fdbb..f9a3d13 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSDurationSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSDurationSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.wns.WNSToastData;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSGlyphDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSGlyphDeserializer.java
index f8c045e..07ae835 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSGlyphDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSGlyphDeserializer.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.push.model.notification.wns.WNSBadgeData;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSGlyphSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSGlyphSerializer.java
index 1e09daf..4aaa94d 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSGlyphSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSGlyphSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.wns.WNSBadgeData;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSSoundDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSSoundDeserializer.java
index 23645c6..88aae01 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSSoundDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSSoundDeserializer.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.push.model.notification.wns.WNSAudioData;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSSoundSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSSoundSerializer.java
index f299f92..22384f3 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSSoundSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSSoundSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.wns.WNSAudioData;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSTileDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSTileDeserializer.java
index d927258..092a197 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSTileDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSTileDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.wns.WNSTileData;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSTileReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSTileReader.java
index 4bf7ca3..1cc0178 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSTileReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSTileReader.java
@@ -4,13 +4,13 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.DeserializationContext;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.push.model.notification.wns.WNSBinding;
 import com.urbanairship.api.push.model.notification.wns.WNSTileData;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.type.TypeReference;
 
 import java.io.IOException;
 import java.util.List;
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSTileSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSTileSerializer.java
index a8aeb93..4c9c878 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSTileSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSTileSerializer.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.wns.WNSBinding;
 import com.urbanairship.api.push.model.notification.wns.WNSTileData;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSToastDeserializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSToastDeserializer.java
index 6f86e53..9b1c569 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSToastDeserializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSToastDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.push.model.notification.wns.WNSToastData;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSToastReader.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSToastReader.java
index ddded3f..90bc90c 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSToastReader.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSToastReader.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.push.model.notification.wns.WNSToastData;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSToastSerializer.java b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSToastSerializer.java
index 5838377..759e332 100644
--- a/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSToastSerializer.java
+++ b/src/main/java/com/urbanairship/api/push/parse/notification/wns/WNSToastSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.push.model.notification.wns.WNSToastData;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/reports/PlatformStatsRequest.java b/src/main/java/com/urbanairship/api/reports/PlatformStatsRequest.java
index aab3e1d..5702c71 100644
--- a/src/main/java/com/urbanairship/api/reports/PlatformStatsRequest.java
+++ b/src/main/java/com/urbanairship/api/reports/PlatformStatsRequest.java
@@ -39,6 +39,7 @@ public class PlatformStatsRequest implements Request<PlatformStatsResponse> {
     /**
      * Create a platform stats request.
      *
+     * @param type PlatformStatsRequestType
      * @return PlatformStatsRequest
      */
     public static PlatformStatsRequest newRequest(PlatformStatsRequestType type) {
@@ -59,6 +60,7 @@ public class PlatformStatsRequest implements Request<PlatformStatsResponse> {
     /**
      * Set the request start date
      *
+     * @param start DateTime
      * @return PlatformStatsRequest
      */
     public PlatformStatsRequest setStart(DateTime start) {
@@ -69,6 +71,7 @@ public class PlatformStatsRequest implements Request<PlatformStatsResponse> {
     /**
      * Set the request end date
      *
+     * @param end DateTime
      * @return PlatformStatsRequest
      */
     public PlatformStatsRequest setEnd(DateTime end) {
@@ -79,6 +82,7 @@ public class PlatformStatsRequest implements Request<PlatformStatsResponse> {
     /**
      * Set the request precision
      *
+     * @param precision Precision
      * @return DateTime
      */
     public PlatformStatsRequest setPrecision(Precision precision) {
@@ -143,4 +147,9 @@ public class PlatformStatsRequest implements Request<PlatformStatsResponse> {
             }
         };
     }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
 }
diff --git a/src/main/java/com/urbanairship/api/reports/PushInfoRequest.java b/src/main/java/com/urbanairship/api/reports/PushInfoRequest.java
index 182c392..a50977b 100644
--- a/src/main/java/com/urbanairship/api/reports/PushInfoRequest.java
+++ b/src/main/java/com/urbanairship/api/reports/PushInfoRequest.java
@@ -78,4 +78,9 @@ public class PushInfoRequest implements Request<PushInfoResponse> {
             }
         };
     }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
 }
diff --git a/src/main/java/com/urbanairship/api/reports/PushListingRequest.java b/src/main/java/com/urbanairship/api/reports/PushListingRequest.java
index 500bc8a..05274a9 100644
--- a/src/main/java/com/urbanairship/api/reports/PushListingRequest.java
+++ b/src/main/java/com/urbanairship/api/reports/PushListingRequest.java
@@ -74,6 +74,7 @@ public class PushListingRequest implements Request<PushListingResponse> {
     /**
      * Set the request start date
      *
+     * @param start DateTime
      * @return PushListingRequest
      */
     public PushListingRequest setStart(DateTime start) {
@@ -93,6 +94,7 @@ public class PushListingRequest implements Request<PushListingResponse> {
     /**
      * Set the request end date
      *
+     * @param end DateTime
      * @return PushListingRequest
      */
     public PushListingRequest setEnd(DateTime end) {
@@ -112,6 +114,7 @@ public class PushListingRequest implements Request<PushListingResponse> {
     /**
      * Set the page limit
      *
+     * @param limit Integer
      * @return Integer
      */
     public PushListingRequest setLimit(Integer limit) {
@@ -131,6 +134,7 @@ public class PushListingRequest implements Request<PushListingResponse> {
     /**
      * Set the starting push ID
      *
+     * @param pushIdStart String
      * @return String
      */
     public PushListingRequest setPushIdStart(String pushIdStart) {
@@ -191,4 +195,9 @@ public class PushListingRequest implements Request<PushListingResponse> {
             }
         };
     }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
 }
diff --git a/src/main/java/com/urbanairship/api/reports/StatisticsCsvRequest.java b/src/main/java/com/urbanairship/api/reports/StatisticsCsvRequest.java
index 4a8b446..5f3c79b 100644
--- a/src/main/java/com/urbanairship/api/reports/StatisticsCsvRequest.java
+++ b/src/main/java/com/urbanairship/api/reports/StatisticsCsvRequest.java
@@ -35,6 +35,7 @@ public class StatisticsCsvRequest implements Request<String> {
      *
      * @param start DateTime
      * @param end DateTime
+     * @return StatisticsCsvRequest
      */
     public static StatisticsCsvRequest newRequest(DateTime start, DateTime end) {
         return new StatisticsCsvRequest(start, end);
@@ -84,4 +85,9 @@ public class StatisticsCsvRequest implements Request<String> {
         };
     }
 
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
+
 }
diff --git a/src/main/java/com/urbanairship/api/reports/StatisticsRequest.java b/src/main/java/com/urbanairship/api/reports/StatisticsRequest.java
index 16530f1..4ddc34f 100644
--- a/src/main/java/com/urbanairship/api/reports/StatisticsRequest.java
+++ b/src/main/java/com/urbanairship/api/reports/StatisticsRequest.java
@@ -1,5 +1,6 @@
 package com.urbanairship.api.reports;
 
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.google.common.base.Preconditions;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.client.RequestUtils;
@@ -9,7 +10,6 @@ import com.urbanairship.api.reports.model.StatisticsResponse;
 import com.urbanairship.api.reports.parse.ReportsObjectMapper;
 import org.apache.http.client.utils.URIBuilder;
 import org.apache.http.entity.ContentType;
-import org.codehaus.jackson.type.TypeReference;
 import org.joda.time.DateTime;
 
 import java.io.IOException;
@@ -38,6 +38,7 @@ public class StatisticsRequest implements Request<List<StatisticsResponse>> {
      *
      * @param start DateTime
      * @param end DateTime
+     * @return StatisticsRequest
      */
     public static StatisticsRequest newRequest(DateTime start, DateTime end) {
         return new StatisticsRequest(start, end);
@@ -86,4 +87,9 @@ public class StatisticsRequest implements Request<List<StatisticsResponse>> {
         };
     }
 
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
+
 }
diff --git a/src/main/java/com/urbanairship/api/reports/model/PlatformStats.java b/src/main/java/com/urbanairship/api/reports/model/PlatformStats.java
index 01621ff..ad9491c 100644
--- a/src/main/java/com/urbanairship/api/reports/model/PlatformStats.java
+++ b/src/main/java/com/urbanairship/api/reports/model/PlatformStats.java
@@ -119,7 +119,7 @@ public final class PlatformStats {
          * Set the date.
          *
          * @param value DateTime
-         * @return
+         * @return Builder
          */
         public Builder setDate(DateTime value) {
             this.date = value;
diff --git a/src/main/java/com/urbanairship/api/reports/model/PushListingResponse.java b/src/main/java/com/urbanairship/api/reports/model/PushListingResponse.java
index 87182eb..6f10aae 100644
--- a/src/main/java/com/urbanairship/api/reports/model/PushListingResponse.java
+++ b/src/main/java/com/urbanairship/api/reports/model/PushListingResponse.java
@@ -109,7 +109,7 @@ public class PushListingResponse {
          * Add all push info objects for push listing
          *
          * @param value Iterable of SinglePushInfoResponse objects
-         * @return
+         * @return Builder
          */
         public Builder addPushInfoObjects(Iterable<? extends PushInfoResponse> value) {
             this.pushInfoObjects.addAll(value);
diff --git a/src/main/java/com/urbanairship/api/reports/parse/PlatformStatsDeserializer.java b/src/main/java/com/urbanairship/api/reports/parse/PlatformStatsDeserializer.java
index 060789d..f453d68 100644
--- a/src/main/java/com/urbanairship/api/reports/parse/PlatformStatsDeserializer.java
+++ b/src/main/java/com/urbanairship/api/reports/parse/PlatformStatsDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.reports.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.reports.model.PlatformStats;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/reports/parse/PlatformStatsReader.java b/src/main/java/com/urbanairship/api/reports/parse/PlatformStatsReader.java
index b2c1a0e..fd65c53 100644
--- a/src/main/java/com/urbanairship/api/reports/parse/PlatformStatsReader.java
+++ b/src/main/java/com/urbanairship/api/reports/parse/PlatformStatsReader.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.reports.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.DateFormats;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.reports.model.PlatformStats;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/reports/parse/PlatformStatsResponseDeserializer.java b/src/main/java/com/urbanairship/api/reports/parse/PlatformStatsResponseDeserializer.java
index 218d1f9..55e3752 100644
--- a/src/main/java/com/urbanairship/api/reports/parse/PlatformStatsResponseDeserializer.java
+++ b/src/main/java/com/urbanairship/api/reports/parse/PlatformStatsResponseDeserializer.java
@@ -1,5 +1,8 @@
 package com.urbanairship.api.reports.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -7,9 +10,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.reports.model.PlatformStatsResponse;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/reports/parse/PlatformStatsResponseReader.java b/src/main/java/com/urbanairship/api/reports/parse/PlatformStatsResponseReader.java
index c10ffb9..d1e05a5 100644
--- a/src/main/java/com/urbanairship/api/reports/parse/PlatformStatsResponseReader.java
+++ b/src/main/java/com/urbanairship/api/reports/parse/PlatformStatsResponseReader.java
@@ -1,11 +1,11 @@
 package com.urbanairship.api.reports.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.reports.model.PlatformStats;
 import com.urbanairship.api.reports.model.PlatformStatsResponse;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
 
 import java.io.IOException;
 import java.util.List;
diff --git a/src/main/java/com/urbanairship/api/reports/parse/PushInfoResponseDeserializer.java b/src/main/java/com/urbanairship/api/reports/parse/PushInfoResponseDeserializer.java
index 3d20b97..66bc34c 100644
--- a/src/main/java/com/urbanairship/api/reports/parse/PushInfoResponseDeserializer.java
+++ b/src/main/java/com/urbanairship/api/reports/parse/PushInfoResponseDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.reports.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.reports.model.PushInfoResponse;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/reports/parse/PushInfoResponseReader.java b/src/main/java/com/urbanairship/api/reports/parse/PushInfoResponseReader.java
index 1e2fcaa..ada3377 100644
--- a/src/main/java/com/urbanairship/api/reports/parse/PushInfoResponseReader.java
+++ b/src/main/java/com/urbanairship/api/reports/parse/PushInfoResponseReader.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.reports.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.reports.model.PushInfoResponse;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 import java.util.UUID;
diff --git a/src/main/java/com/urbanairship/api/reports/parse/PushListingResponseDeserializer.java b/src/main/java/com/urbanairship/api/reports/parse/PushListingResponseDeserializer.java
index fea0d4a..08a0ac5 100644
--- a/src/main/java/com/urbanairship/api/reports/parse/PushListingResponseDeserializer.java
+++ b/src/main/java/com/urbanairship/api/reports/parse/PushListingResponseDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.reports.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.reports.model.PushListingResponse;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/reports/parse/PushListingResponseReader.java b/src/main/java/com/urbanairship/api/reports/parse/PushListingResponseReader.java
index 3a790c9..4cae99f 100644
--- a/src/main/java/com/urbanairship/api/reports/parse/PushListingResponseReader.java
+++ b/src/main/java/com/urbanairship/api/reports/parse/PushListingResponseReader.java
@@ -4,12 +4,12 @@
 
 package com.urbanairship.api.reports.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.reports.model.PushInfoResponse;
 import com.urbanairship.api.reports.model.PushListingResponse;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
 
 import java.io.IOException;
 import java.util.List;
diff --git a/src/main/java/com/urbanairship/api/reports/parse/ReportsObjectMapper.java b/src/main/java/com/urbanairship/api/reports/parse/ReportsObjectMapper.java
index b3a3c52..e031ff9 100644
--- a/src/main/java/com/urbanairship/api/reports/parse/ReportsObjectMapper.java
+++ b/src/main/java/com/urbanairship/api/reports/parse/ReportsObjectMapper.java
@@ -4,15 +4,15 @@
 
 package com.urbanairship.api.reports.parse;
 
+import com.fasterxml.jackson.core.Version;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.module.SimpleModule;
 import com.urbanairship.api.push.parse.PushObjectMapper;
 import com.urbanairship.api.reports.model.PlatformStats;
 import com.urbanairship.api.reports.model.PlatformStatsResponse;
 import com.urbanairship.api.reports.model.PushInfoResponse;
 import com.urbanairship.api.reports.model.PushListingResponse;
 import com.urbanairship.api.reports.model.StatisticsResponse;
-import org.codehaus.jackson.Version;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.map.module.SimpleModule;
 
 
 public class ReportsObjectMapper {
diff --git a/src/main/java/com/urbanairship/api/reports/parse/StatisticsResponseDeserializer.java b/src/main/java/com/urbanairship/api/reports/parse/StatisticsResponseDeserializer.java
index a381b86..5ba74c4 100644
--- a/src/main/java/com/urbanairship/api/reports/parse/StatisticsResponseDeserializer.java
+++ b/src/main/java/com/urbanairship/api/reports/parse/StatisticsResponseDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.reports.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.reports.model.StatisticsResponse;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/reports/parse/StatisticsResponseReader.java b/src/main/java/com/urbanairship/api/reports/parse/StatisticsResponseReader.java
index 8414984..82341ea 100644
--- a/src/main/java/com/urbanairship/api/reports/parse/StatisticsResponseReader.java
+++ b/src/main/java/com/urbanairship/api/reports/parse/StatisticsResponseReader.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.reports.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.DateFormats;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.reports.model.StatisticsResponse;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/schedule/ScheduleDeleteRequest.java b/src/main/java/com/urbanairship/api/schedule/ScheduleDeleteRequest.java
index ac0e26c..33c3c07 100644
--- a/src/main/java/com/urbanairship/api/schedule/ScheduleDeleteRequest.java
+++ b/src/main/java/com/urbanairship/api/schedule/ScheduleDeleteRequest.java
@@ -76,4 +76,9 @@ public class ScheduleDeleteRequest implements Request<String> {
             }
         };
     }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
 }
diff --git a/src/main/java/com/urbanairship/api/schedule/ScheduleListingRequest.java b/src/main/java/com/urbanairship/api/schedule/ScheduleListingRequest.java
index a57a716..068fe6b 100644
--- a/src/main/java/com/urbanairship/api/schedule/ScheduleListingRequest.java
+++ b/src/main/java/com/urbanairship/api/schedule/ScheduleListingRequest.java
@@ -129,4 +129,9 @@ public class ScheduleListingRequest implements Request<ListAllSchedulesResponse>
     public ResponseParser<ListAllSchedulesResponse> getResponseParser() {
         return parser;
     }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
 }
diff --git a/src/main/java/com/urbanairship/api/schedule/ScheduleRequest.java b/src/main/java/com/urbanairship/api/schedule/ScheduleRequest.java
index abb281e..0f65e07 100644
--- a/src/main/java/com/urbanairship/api/schedule/ScheduleRequest.java
+++ b/src/main/java/com/urbanairship/api/schedule/ScheduleRequest.java
@@ -118,4 +118,9 @@ public class ScheduleRequest implements Request<ScheduleResponse> {
             }
         };
     }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
 }
diff --git a/src/main/java/com/urbanairship/api/schedule/model/BestTime.java b/src/main/java/com/urbanairship/api/schedule/model/BestTime.java
new file mode 100644
index 0000000..82c7075
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/schedule/model/BestTime.java
@@ -0,0 +1,85 @@
+package com.urbanairship.api.schedule.model;
+
+import com.google.common.base.Preconditions;
+import org.joda.time.DateTime;
+
+import java.util.Objects;
+
+/**
+ * Represents that a push will be sent on the scheduled day, at the best time determined by optimization.
+ */
+public final class BestTime {
+
+    private DateTime sendDate;
+
+    private BestTime() {}
+
+    private BestTime(DateTime sendDate) {
+        this.sendDate = sendDate;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (!(o instanceof BestTime)) return false;
+        BestTime bestTime = (BestTime) o;
+        return Objects.equals(getSendDate(), bestTime.getSendDate());
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(getSendDate());
+    }
+
+    @Override
+    public String toString() {
+        return "BestTime{" +
+                ", sendDate=" + sendDate +
+                '}';
+    }
+
+    /**
+     * BestTime builder
+     * @return Builder
+     */
+    public static Builder newBuilder() {
+        return new Builder();
+    }
+
+    /**
+     * Get the scheduled day that push will be sent.
+     * @return DateTime
+     * */
+    public DateTime getSendDate() {
+        return sendDate;
+    }
+
+    /**
+     * BestTime Builder
+     */
+    public static class Builder {
+
+        private DateTime sendDate = null;
+
+        private Builder() { }
+
+        /**
+         * Set the day to send the push
+         * @param sendDate DateTime
+         * @return BestTime Builder
+         */
+        public Builder setSendDate(DateTime sendDate) {
+            this.sendDate = sendDate;
+            return this;
+        }
+
+        /**
+         * Build the Schedule object.
+         * @return Schedule
+         */
+        public BestTime build() {
+            Preconditions.checkArgument((sendDate != null),"sendDate cannot be null");
+            return new BestTime(sendDate);
+        }
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/schedule/model/Schedule.java b/src/main/java/com/urbanairship/api/schedule/model/Schedule.java
index 79e70b8..c6ec46f 100644
--- a/src/main/java/com/urbanairship/api/schedule/model/Schedule.java
+++ b/src/main/java/com/urbanairship/api/schedule/model/Schedule.java
@@ -8,20 +8,28 @@ import com.google.common.base.Objects;
 import com.google.common.base.Preconditions;
 import org.joda.time.DateTime;
 
+import java.util.Optional;
+
+
+/**
+ * Represents the schedule details for a push. A Schedule defines when a push will be sent.
+ */
 public final class Schedule extends ScheduleModelObject {
 
     private final DateTime scheduledTimestamp;
     private final Boolean localTimePresent;
+    private final Optional<BestTime> bestTime;
 
     // TODO local, global, etc
 
-    private Schedule(DateTime scheduledTimestamp, boolean localTimePresent) {
-        this.scheduledTimestamp = scheduledTimestamp;
-        this.localTimePresent = localTimePresent;
+    private Schedule(Builder builder) {
+        this.scheduledTimestamp = builder.scheduledTimestamp;
+        this.localTimePresent = builder.localTimePresent;
+        this.bestTime = Optional.ofNullable(builder.bestTime);
     }
 
     /**
-     * Get the DateTime for this schedule
+     * Get the DateTime for this schedule.
      * @return DateTime
      */
     public DateTime getScheduledTimestamp () {
@@ -29,19 +37,27 @@ public final class Schedule extends ScheduleModelObject {
     }
 
     /**
-     * Get the boolean indicating if the scheduled time is local
+     * Get the boolean indicating if the scheduled time is in local time.
      * @return boolean
      */
     public Boolean getLocalTimePresent() {
         return localTimePresent;
     }
 
+    /**
+     * Get the BestTime for this schedule.
+     * @return
+     */
+    public Optional<BestTime> getBestTime() {
+        return bestTime;
+    }
 
     @Override
     public String toString() {
         return "Schedule{" +
                 "scheduledTimestamp=" + scheduledTimestamp +
                 ", localTimePresent=" + localTimePresent +
+                ", scheduledBestTime=" + bestTime +
                 '}';
     }
 
@@ -77,6 +93,7 @@ public final class Schedule extends ScheduleModelObject {
     public static class Builder {
         private DateTime scheduledTimestamp = null;
         private Boolean localTimePresent = false;
+        private BestTime bestTime = null;
 
         private Builder() { }
 
@@ -96,7 +113,6 @@ public final class Schedule extends ScheduleModelObject {
          * Set the DateTime for local scheduled delivery. This will be converted to
          * UTC by the server.
          * @param scheduledTimestamp DateTime.
-
          * @return Builder
          */
         public Builder setLocalScheduledTimestamp(DateTime scheduledTimestamp) {
@@ -106,14 +122,41 @@ public final class Schedule extends ScheduleModelObject {
         }
 
         /**
+         * Set the best time ( aka Optimal Time) which is one of our predictive features. This sends push on a specified
+         * date for the optimal time for the user to receive.
+         * @param bestTime BestTime
+         * @return Builder
+         */
+        public Builder setBestTime(BestTime bestTime) {
+            this.bestTime = bestTime;
+            return this;
+        }
+
+        /**
          * Build the Schedule object.
          * @return Schedule
          */
         public Schedule build() {
-            Preconditions.checkArgument((scheduledTimestamp != null),"" +
-                    "Either scheduled_time or local_scheduled_time must be set.");
 
-            return new Schedule(scheduledTimestamp, localTimePresent);
+            Preconditions.checkArgument(argumentValidator(scheduledTimestamp,bestTime),
+                    "Either scheduled_time or best_time must be set.");
+
+            return new Schedule(this);
         }
+
+        // ensure that exactly one argument is set
+        private boolean argumentValidator(DateTime scheduledTimestamp, BestTime bestTime) {
+            int argumentSet = 0;
+            if (scheduledTimestamp != null) {
+                argumentSet++;
+            }
+
+            if (bestTime != null) {
+                argumentSet++;
+            }
+            return argumentSet == 1;
+        }
+
     }
+
 }
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/BestTimeDeserializer.java b/src/main/java/com/urbanairship/api/schedule/parse/BestTimeDeserializer.java
new file mode 100644
index 0000000..b5501d7
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/schedule/parse/BestTimeDeserializer.java
@@ -0,0 +1,49 @@
+package com.urbanairship.api.schedule.parse;
+
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
+import com.google.common.base.Supplier;
+import com.google.common.collect.ImmutableMap;
+import com.urbanairship.api.common.parse.FieldParser;
+import com.urbanairship.api.common.parse.FieldParserRegistry;
+import com.urbanairship.api.common.parse.MapFieldParserRegistry;
+import com.urbanairship.api.common.parse.StandardObjectDeserializer;
+import com.urbanairship.api.schedule.model.BestTime;
+
+import java.io.IOException;
+
+public class BestTimeDeserializer extends JsonDeserializer<BestTime> {
+
+    private static final FieldParserRegistry<BestTime, BestTimeReader> FIELD_PARSERS = new MapFieldParserRegistry<BestTime, BestTimeReader>(
+            ImmutableMap.<String, FieldParser<BestTimeReader>>builder()
+                    .put("send_date", new FieldParser<BestTimeReader>() {
+                        @Override
+                        public void parse(BestTimeReader reader, JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException {
+                            reader.readSendDate(jsonParser);
+                        }
+                    })
+                    .build()
+    );
+
+    public static final BestTimeDeserializer INSTANCE = new BestTimeDeserializer();
+
+    private final StandardObjectDeserializer<BestTime, ?> deserializer;
+
+    public BestTimeDeserializer() {
+        deserializer = new StandardObjectDeserializer<BestTime, BestTimeReader>(
+                FIELD_PARSERS,
+                new Supplier<BestTimeReader>() {
+                    @Override
+                    public BestTimeReader get() {
+                        return new BestTimeReader();
+                    }
+                }
+        );
+    }
+
+    @Override
+    public BestTime deserialize(JsonParser parser, DeserializationContext deserializationContext) throws IOException {
+        return deserializer.deserialize(parser, deserializationContext);
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/BestTimeReader.java b/src/main/java/com/urbanairship/api/schedule/parse/BestTimeReader.java
new file mode 100644
index 0000000..469b49e
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/schedule/parse/BestTimeReader.java
@@ -0,0 +1,32 @@
+package com.urbanairship.api.schedule.parse;
+
+import com.fasterxml.jackson.core.JsonParser;
+import com.urbanairship.api.common.parse.APIParsingException;
+import com.urbanairship.api.common.parse.JsonObjectReader;
+import com.urbanairship.api.schedule.model.BestTime;
+import org.joda.time.DateTime;
+
+import java.io.IOException;
+
+public class BestTimeReader implements JsonObjectReader<BestTime> {
+
+    private final BestTime.Builder builder;
+
+    public BestTimeReader() {
+        this.builder = BestTime.newBuilder();
+    }
+
+    public void readSendDate(JsonParser jsonParser) throws IOException {
+        builder.setSendDate(jsonParser.readValueAs(DateTime.class));
+    }
+
+    @Override
+    public BestTime validateAndBuild() throws IOException {
+        try {
+            return builder.build();
+        }
+        catch (Exception e) {
+            throw new APIParsingException(e.getMessage(), e);
+        }
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/BestTimeSerializer.java b/src/main/java/com/urbanairship/api/schedule/parse/BestTimeSerializer.java
new file mode 100644
index 0000000..7054351
--- /dev/null
+++ b/src/main/java/com/urbanairship/api/schedule/parse/BestTimeSerializer.java
@@ -0,0 +1,23 @@
+package com.urbanairship.api.schedule.parse;
+
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
+import com.urbanairship.api.common.parse.DateFormats;
+import com.urbanairship.api.schedule.model.BestTime;
+
+import java.io.IOException;
+
+public class BestTimeSerializer extends JsonSerializer<BestTime> {
+
+    public static final ScheduleSerializer INSTANCE = new ScheduleSerializer();
+
+    @Override
+    public void serialize(BestTime value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
+        jgen.writeStartObject();
+
+        jgen.writeStringField("send_date", DateFormats.DAYS_FORMAT.print(value.getSendDate()));
+
+        jgen.writeEndObject();
+    }
+}
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/ListSchedulesResponseDeserializer.java b/src/main/java/com/urbanairship/api/schedule/parse/ListSchedulesResponseDeserializer.java
index 3710d94..fbaab45 100644
--- a/src/main/java/com/urbanairship/api/schedule/parse/ListSchedulesResponseDeserializer.java
+++ b/src/main/java/com/urbanairship/api/schedule/parse/ListSchedulesResponseDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.schedule.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.schedule.model.ListAllSchedulesResponse;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/ListSchedulesResponseReader.java b/src/main/java/com/urbanairship/api/schedule/parse/ListSchedulesResponseReader.java
index e13dd51..29bda6d 100644
--- a/src/main/java/com/urbanairship/api/schedule/parse/ListSchedulesResponseReader.java
+++ b/src/main/java/com/urbanairship/api/schedule/parse/ListSchedulesResponseReader.java
@@ -5,12 +5,12 @@
 package com.urbanairship.api.schedule.parse;
 
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.schedule.model.ListAllSchedulesResponse;
 import com.urbanairship.api.schedule.model.SchedulePayload;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
 
 import java.io.IOException;
 import java.util.List;
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleDeserializer.java b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleDeserializer.java
index 56c5d89..e14c39e 100644
--- a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleDeserializer.java
+++ b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.schedule.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.schedule.model.Schedule;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
@@ -33,6 +33,12 @@ public final class ScheduleDeserializer extends JsonDeserializer<Schedule> {
                     reader.readScheduledTime(jsonParser);
                 }
             })
+            .put("best_time", new FieldParser<ScheduleReader>() {
+                @Override
+                public void parse(ScheduleReader reader, JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException {
+                    reader.readBestTime(jsonParser);
+                }
+            })
             .build()
     );
 
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleDetailsSerializer.java b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleDetailsSerializer.java
index faf0b7b..1cf5cf8 100644
--- a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleDetailsSerializer.java
+++ b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleDetailsSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.schedule.parse;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.schedule.model.ScheduleDetails;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleObjectMapper.java b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleObjectMapper.java
index cd93cb2..8886489 100644
--- a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleObjectMapper.java
+++ b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleObjectMapper.java
@@ -1,15 +1,18 @@
 package com.urbanairship.api.schedule.parse;
 
+import com.fasterxml.jackson.core.Version;
+import com.fasterxml.jackson.databind.DeserializationFeature;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.module.SimpleModule;
+import com.fasterxml.jackson.datatype.joda.JodaModule;
 import com.urbanairship.api.push.parse.PushObjectMapper;
+import com.urbanairship.api.schedule.model.BestTime;
 import com.urbanairship.api.schedule.model.ListAllSchedulesResponse;
 import com.urbanairship.api.schedule.model.Schedule;
 import com.urbanairship.api.schedule.model.ScheduleDetails;
 import com.urbanairship.api.schedule.model.SchedulePayload;
 import com.urbanairship.api.schedule.model.ScheduleResponse;
-import org.codehaus.jackson.Version;
-import org.codehaus.jackson.map.DeserializationConfig;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.map.module.SimpleModule;
+
 
 public class ScheduleObjectMapper {
 
@@ -18,17 +21,21 @@ public class ScheduleObjectMapper {
 
     static {
         MODULE
-            .addDeserializer(SchedulePayload.class, SchedulePayloadDeserializer.INSTANCE)
-            .addSerializer(SchedulePayload.class, ScheduledPayloadSerializer.INSTANCE)
-            .addDeserializer(Schedule.class, ScheduleDeserializer.INSTANCE)
-            .addSerializer(Schedule.class, ScheduleSerializer.INSTANCE)
-            .addSerializer(ScheduleDetails.class, ScheduleDetailsSerializer.INSTANCE)
-            .addDeserializer(ScheduleResponse.class, new ScheduleResponseDeserializer())
-            .addDeserializer(ListAllSchedulesResponse.class, new ListSchedulesResponseDeserializer());
+                .addDeserializer(SchedulePayload.class, SchedulePayloadDeserializer.INSTANCE)
+                .addSerializer(SchedulePayload.class, ScheduledPayloadSerializer.INSTANCE)
+                .addDeserializer(Schedule.class, ScheduleDeserializer.INSTANCE)
+                .addSerializer(Schedule.class, ScheduleSerializer.INSTANCE)
+                .addSerializer(ScheduleDetails.class, ScheduleDetailsSerializer.INSTANCE)
+                .addDeserializer(ScheduleResponse.class, new ScheduleResponseDeserializer())
+                .addDeserializer(ListAllSchedulesResponse.class, new ListSchedulesResponseDeserializer())
+                .addDeserializer(BestTime.class, BestTimeDeserializer.INSTANCE)
+                .addSerializer(BestTime.class, new BestTimeSerializer());
+
 
         MAPPER.registerModule(MODULE);
         MAPPER.registerModule(PushObjectMapper.getModule());
-        MAPPER.configure(DeserializationConfig.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
+        MAPPER.registerModule(new JodaModule());
+        MAPPER.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
     }
 
     public static SimpleModule getModule() {
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/SchedulePayloadDeserializer.java b/src/main/java/com/urbanairship/api/schedule/parse/SchedulePayloadDeserializer.java
index a97d48f..4c3f4fe 100644
--- a/src/main/java/com/urbanairship/api/schedule/parse/SchedulePayloadDeserializer.java
+++ b/src/main/java/com/urbanairship/api/schedule/parse/SchedulePayloadDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.schedule.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.APIParsingException;
@@ -12,9 +15,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.schedule.model.SchedulePayload;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/SchedulePayloadReader.java b/src/main/java/com/urbanairship/api/schedule/parse/SchedulePayloadReader.java
index 28b0a6f..7e8b4ea 100644
--- a/src/main/java/com/urbanairship/api/schedule/parse/SchedulePayloadReader.java
+++ b/src/main/java/com/urbanairship/api/schedule/parse/SchedulePayloadReader.java
@@ -4,13 +4,13 @@
 
 package com.urbanairship.api.schedule.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.push.model.PushPayload;
 import com.urbanairship.api.schedule.model.Schedule;
 import com.urbanairship.api.schedule.model.SchedulePayload;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
 
 import java.io.IOException;
 import java.util.List;
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleReader.java b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleReader.java
index c543fe1..d64c2ec 100644
--- a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleReader.java
+++ b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleReader.java
@@ -4,10 +4,11 @@
 
 package com.urbanairship.api.schedule.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
+import com.urbanairship.api.schedule.model.BestTime;
 import com.urbanairship.api.schedule.model.Schedule;
-import org.codehaus.jackson.JsonParser;
 import org.joda.time.DateTime;
 
 import java.io.IOException;
@@ -24,6 +25,10 @@ public final class ScheduleReader implements JsonObjectReader<Schedule> {
         builder.setScheduledTimestamp(jsonParser.readValueAs(DateTime.class));
     }
 
+    public void readBestTime(JsonParser jsonParser) throws IOException {
+        builder.setBestTime(jsonParser.readValueAs(BestTime.class));
+    }
+
     @Override
     public Schedule validateAndBuild() throws IOException {
         try {
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleResponseDeserializer.java b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleResponseDeserializer.java
index 0ff7db9..6b37f2e 100644
--- a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleResponseDeserializer.java
+++ b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleResponseDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.schedule.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.schedule.model.ScheduleResponse;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleResponseReader.java b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleResponseReader.java
index 5aae3de..0f697af 100644
--- a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleResponseReader.java
+++ b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleResponseReader.java
@@ -4,12 +4,12 @@
 
 package com.urbanairship.api.schedule.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.schedule.model.SchedulePayload;
 import com.urbanairship.api.schedule.model.ScheduleResponse;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
 
 import java.io.IOException;
 import java.util.List;
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleSerializer.java b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleSerializer.java
index 2107137..4d8e60b 100644
--- a/src/main/java/com/urbanairship/api/schedule/parse/ScheduleSerializer.java
+++ b/src/main/java/com/urbanairship/api/schedule/parse/ScheduleSerializer.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.schedule.parse;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.common.parse.DateFormats;
 import com.urbanairship.api.schedule.model.Schedule;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
@@ -20,13 +20,14 @@ public class ScheduleSerializer extends JsonSerializer<Schedule> {
     public void serialize(Schedule value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
         jgen.writeStartObject();
 
-        if (!value.getLocalTimePresent()) {
-            jgen.writeStringField("scheduled_time", DateFormats.DATE_FORMATTER.print(value.getScheduledTimestamp()));
-        }
-        if (value.getLocalTimePresent()) {
-            jgen.writeStringField("local_scheduled_time", DateFormats.DATE_FORMATTER.print(value.getScheduledTimestamp()));
-        }
-
+        if (value.getBestTime().isPresent()) {
+            jgen.writeObjectField("best_time", value.getBestTime().get());
+        } else if (!value.getLocalTimePresent()){
+                jgen.writeStringField("scheduled_time", DateFormats.DATE_FORMATTER.print(value.getScheduledTimestamp()));
+            }
+            else {
+                jgen.writeStringField("local_scheduled_time", DateFormats.DATE_FORMATTER.print(value.getScheduledTimestamp()));
+            }
         jgen.writeEndObject();
     }
 }
diff --git a/src/main/java/com/urbanairship/api/schedule/parse/ScheduledPayloadSerializer.java b/src/main/java/com/urbanairship/api/schedule/parse/ScheduledPayloadSerializer.java
index 336d78e..1aa8cc2 100644
--- a/src/main/java/com/urbanairship/api/schedule/parse/ScheduledPayloadSerializer.java
+++ b/src/main/java/com/urbanairship/api/schedule/parse/ScheduledPayloadSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.schedule.parse;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.schedule.model.SchedulePayload;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/segments/SegmentDeleteRequest.java b/src/main/java/com/urbanairship/api/segments/SegmentDeleteRequest.java
index 23529f4..e482019 100644
--- a/src/main/java/com/urbanairship/api/segments/SegmentDeleteRequest.java
+++ b/src/main/java/com/urbanairship/api/segments/SegmentDeleteRequest.java
@@ -76,4 +76,9 @@ public class SegmentDeleteRequest implements Request<String> {
             }
         };
     }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
 }
diff --git a/src/main/java/com/urbanairship/api/segments/SegmentListingRequest.java b/src/main/java/com/urbanairship/api/segments/SegmentListingRequest.java
index 063752b..077c423 100644
--- a/src/main/java/com/urbanairship/api/segments/SegmentListingRequest.java
+++ b/src/main/java/com/urbanairship/api/segments/SegmentListingRequest.java
@@ -87,4 +87,9 @@ public class SegmentListingRequest implements Request<SegmentListingResponse> {
             }
         };
     }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/com/urbanairship/api/segments/SegmentLookupRequest.java b/src/main/java/com/urbanairship/api/segments/SegmentLookupRequest.java
index 90487b2..57f896e 100644
--- a/src/main/java/com/urbanairship/api/segments/SegmentLookupRequest.java
+++ b/src/main/java/com/urbanairship/api/segments/SegmentLookupRequest.java
@@ -34,7 +34,7 @@ public class SegmentLookupRequest implements Request<SegmentView> {
     /**
      * Create new request for segment lookup.
      *
-     * @param segmentId
+     * @param segmentId String
      * @return SegmentRequest
      */
     public static SegmentLookupRequest newRequest(String segmentId) {
@@ -78,4 +78,9 @@ public class SegmentLookupRequest implements Request<SegmentView> {
             }
         };
     }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/com/urbanairship/api/segments/SegmentRequest.java b/src/main/java/com/urbanairship/api/segments/SegmentRequest.java
index 04ae0d1..6566c9d 100644
--- a/src/main/java/com/urbanairship/api/segments/SegmentRequest.java
+++ b/src/main/java/com/urbanairship/api/segments/SegmentRequest.java
@@ -45,7 +45,7 @@ public class SegmentRequest implements Request<String> {
     /**
      * Create a new segment update request.
      *
-     * @param segmentId
+     * @param segmentId String
      * @return SegmentRequest
      */
     public static SegmentRequest newUpdateRequest(String segmentId) {
@@ -56,7 +56,7 @@ public class SegmentRequest implements Request<String> {
     /**
      * Set the criteria for the segment request.
      *
-     * @param criteria
+     * @param criteria Selector
      * @return SegmentRequest
      */
     public SegmentRequest setCriteria(Selector criteria) {
@@ -67,7 +67,7 @@ public class SegmentRequest implements Request<String> {
     /**
      * Set the display name of the segment request.
      *
-     * @param displayName
+     * @param displayName String
      * @return SegmentRequest
      */
     public SegmentRequest setDisplayName(String displayName) {
@@ -75,6 +75,10 @@ public class SegmentRequest implements Request<String> {
         return this;
     }
 
+    /**
+     * Get the content type.
+     * @return ContentType
+     */
     @Override
     public ContentType getContentType() {
         return ContentType.APPLICATION_JSON;
@@ -119,4 +123,9 @@ public class SegmentRequest implements Request<String> {
             }
         };
     }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
 }
diff --git a/src/main/java/com/urbanairship/api/segments/model/SegmentListingResponse.java b/src/main/java/com/urbanairship/api/segments/model/SegmentListingResponse.java
index 6c4d0c3..10b77eb 100644
--- a/src/main/java/com/urbanairship/api/segments/model/SegmentListingResponse.java
+++ b/src/main/java/com/urbanairship/api/segments/model/SegmentListingResponse.java
@@ -78,7 +78,7 @@ public class SegmentListingResponse {
         /**
          * Set the next page.
          *
-         * @param nextPage
+         * @param nextPage String
          * @return Builder
          */
         public Builder setNextPage(String nextPage) {
diff --git a/src/main/java/com/urbanairship/api/segments/parse/SegmentListingResponseDeserializer.java b/src/main/java/com/urbanairship/api/segments/parse/SegmentListingResponseDeserializer.java
index 985bf29..159f425 100644
--- a/src/main/java/com/urbanairship/api/segments/parse/SegmentListingResponseDeserializer.java
+++ b/src/main/java/com/urbanairship/api/segments/parse/SegmentListingResponseDeserializer.java
@@ -1,5 +1,8 @@
 package com.urbanairship.api.segments.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -7,9 +10,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.segments.model.SegmentListingResponse;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/segments/parse/SegmentListingResponseReader.java b/src/main/java/com/urbanairship/api/segments/parse/SegmentListingResponseReader.java
index ce477fe..4f4eafa 100644
--- a/src/main/java/com/urbanairship/api/segments/parse/SegmentListingResponseReader.java
+++ b/src/main/java/com/urbanairship/api/segments/parse/SegmentListingResponseReader.java
@@ -1,11 +1,11 @@
 package com.urbanairship.api.segments.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.segments.model.SegmentListingResponse;
 import com.urbanairship.api.segments.model.SegmentListingView;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
 
 import java.io.IOException;
 import java.util.List;
diff --git a/src/main/java/com/urbanairship/api/segments/parse/SegmentListingViewDeserializer.java b/src/main/java/com/urbanairship/api/segments/parse/SegmentListingViewDeserializer.java
index daa4958..f01b908 100644
--- a/src/main/java/com/urbanairship/api/segments/parse/SegmentListingViewDeserializer.java
+++ b/src/main/java/com/urbanairship/api/segments/parse/SegmentListingViewDeserializer.java
@@ -1,5 +1,8 @@
 package com.urbanairship.api.segments.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -7,9 +10,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.segments.model.SegmentListingView;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/segments/parse/SegmentListingViewReader.java b/src/main/java/com/urbanairship/api/segments/parse/SegmentListingViewReader.java
index f66f0d0..8c6f7be 100644
--- a/src/main/java/com/urbanairship/api/segments/parse/SegmentListingViewReader.java
+++ b/src/main/java/com/urbanairship/api/segments/parse/SegmentListingViewReader.java
@@ -1,9 +1,9 @@
 package com.urbanairship.api.segments.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.segments.model.SegmentListingView;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/segments/parse/SegmentObjectMapper.java b/src/main/java/com/urbanairship/api/segments/parse/SegmentObjectMapper.java
index 46c1716..9a32e2e 100644
--- a/src/main/java/com/urbanairship/api/segments/parse/SegmentObjectMapper.java
+++ b/src/main/java/com/urbanairship/api/segments/parse/SegmentObjectMapper.java
@@ -1,12 +1,12 @@
 package com.urbanairship.api.segments.parse;
 
+import com.fasterxml.jackson.core.Version;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.module.SimpleModule;
 import com.urbanairship.api.push.parse.PushObjectMapper;
 import com.urbanairship.api.segments.model.SegmentListingResponse;
 import com.urbanairship.api.segments.model.SegmentListingView;
 import com.urbanairship.api.segments.model.SegmentView;
-import org.codehaus.jackson.Version;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.map.module.SimpleModule;
 
 public class SegmentObjectMapper {
     private static final ObjectMapper MAPPER = new ObjectMapper();
diff --git a/src/main/java/com/urbanairship/api/segments/parse/SegmentViewDeserializer.java b/src/main/java/com/urbanairship/api/segments/parse/SegmentViewDeserializer.java
index 5843f78..4c1f209 100644
--- a/src/main/java/com/urbanairship/api/segments/parse/SegmentViewDeserializer.java
+++ b/src/main/java/com/urbanairship/api/segments/parse/SegmentViewDeserializer.java
@@ -1,5 +1,8 @@
 package com.urbanairship.api.segments.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -7,9 +10,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.segments.model.SegmentView;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/segments/parse/SegmentViewReader.java b/src/main/java/com/urbanairship/api/segments/parse/SegmentViewReader.java
index 96a059b..40a4cc2 100644
--- a/src/main/java/com/urbanairship/api/segments/parse/SegmentViewReader.java
+++ b/src/main/java/com/urbanairship/api/segments/parse/SegmentViewReader.java
@@ -1,10 +1,10 @@
 package com.urbanairship.api.segments.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.push.model.audience.Selector;
 import com.urbanairship.api.segments.model.SegmentView;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/segments/parse/SegmentViewSerializer.java b/src/main/java/com/urbanairship/api/segments/parse/SegmentViewSerializer.java
index a408ebc..f447ef7 100644
--- a/src/main/java/com/urbanairship/api/segments/parse/SegmentViewSerializer.java
+++ b/src/main/java/com/urbanairship/api/segments/parse/SegmentViewSerializer.java
@@ -1,9 +1,9 @@
 package com.urbanairship.api.segments.parse;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.segments.model.SegmentView;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/staticlists/StaticListDeleteRequest.java b/src/main/java/com/urbanairship/api/staticlists/StaticListDeleteRequest.java
index 7252874..cba7c5a 100644
--- a/src/main/java/com/urbanairship/api/staticlists/StaticListDeleteRequest.java
+++ b/src/main/java/com/urbanairship/api/staticlists/StaticListDeleteRequest.java
@@ -76,4 +76,9 @@ public class StaticListDeleteRequest implements Request<String> {
             }
         };
     }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
 }
diff --git a/src/main/java/com/urbanairship/api/staticlists/StaticListDownloadRequest.java b/src/main/java/com/urbanairship/api/staticlists/StaticListDownloadRequest.java
index 8be653c..a538b21 100644
--- a/src/main/java/com/urbanairship/api/staticlists/StaticListDownloadRequest.java
+++ b/src/main/java/com/urbanairship/api/staticlists/StaticListDownloadRequest.java
@@ -115,4 +115,9 @@ public class StaticListDownloadRequest implements Request<String> {
             }
         };
     }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
 }
diff --git a/src/main/java/com/urbanairship/api/staticlists/StaticListListingRequest.java b/src/main/java/com/urbanairship/api/staticlists/StaticListListingRequest.java
index d7e9de7..7fad689 100644
--- a/src/main/java/com/urbanairship/api/staticlists/StaticListListingRequest.java
+++ b/src/main/java/com/urbanairship/api/staticlists/StaticListListingRequest.java
@@ -97,4 +97,9 @@ public class StaticListListingRequest implements Request<StaticListListingRespon
             }
         };
     }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
 }
diff --git a/src/main/java/com/urbanairship/api/staticlists/StaticListLookupRequest.java b/src/main/java/com/urbanairship/api/staticlists/StaticListLookupRequest.java
index 44d9160..2e774f3 100644
--- a/src/main/java/com/urbanairship/api/staticlists/StaticListLookupRequest.java
+++ b/src/main/java/com/urbanairship/api/staticlists/StaticListLookupRequest.java
@@ -78,4 +78,9 @@ public class StaticListLookupRequest implements Request<StaticListView> {
             }
         };
     }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/com/urbanairship/api/staticlists/StaticListRequest.java b/src/main/java/com/urbanairship/api/staticlists/StaticListRequest.java
index cc2d57a..e4f52a4 100644
--- a/src/main/java/com/urbanairship/api/staticlists/StaticListRequest.java
+++ b/src/main/java/com/urbanairship/api/staticlists/StaticListRequest.java
@@ -63,7 +63,7 @@ public class StaticListRequest implements Request<String> {
     /**
      * Set the description of the static list.
      *
-     * @param description
+     * @param description String
      * @return StaticListRequest
      */
     public StaticListRequest setDescription(String description) {
@@ -74,8 +74,8 @@ public class StaticListRequest implements Request<String> {
     /**
      * Add a key-value pair to the extra mapping.
      *
-     * @param key
-     * @param val
+     * @param key String
+     * @param val String
      * @return StaticListRequest
      */
     public StaticListRequest addExtra(String key, String val) {
@@ -86,7 +86,7 @@ public class StaticListRequest implements Request<String> {
     /**
      * Add all key-value pairs to the map of extras.
      *
-     * @param entries
+     * @param entries Map of Strings
      * @return StaticListCreationRequest
      */
     public StaticListRequest addAllExtras(Map<String, String> entries) {
@@ -142,4 +142,9 @@ public class StaticListRequest implements Request<String> {
             }
         };
     }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/com/urbanairship/api/staticlists/StaticListUploadRequest.java b/src/main/java/com/urbanairship/api/staticlists/StaticListUploadRequest.java
index 07f0801..a0c0d05 100644
--- a/src/main/java/com/urbanairship/api/staticlists/StaticListUploadRequest.java
+++ b/src/main/java/com/urbanairship/api/staticlists/StaticListUploadRequest.java
@@ -63,7 +63,7 @@ public class StaticListUploadRequest implements Request<String> {
     /**
      * Set whether the request uses gzip encoding.
      *
-     * @param gzip
+     * @param gzip Boolean
      * @return StaticListUploadRequest
      */
     public StaticListUploadRequest setGzipEnabled(Boolean gzip) {
@@ -120,4 +120,9 @@ public class StaticListUploadRequest implements Request<String> {
             }
         };
     }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
 }
diff --git a/src/main/java/com/urbanairship/api/staticlists/model/StaticListView.java b/src/main/java/com/urbanairship/api/staticlists/model/StaticListView.java
index f176b9f..8bab747 100644
--- a/src/main/java/com/urbanairship/api/staticlists/model/StaticListView.java
+++ b/src/main/java/com/urbanairship/api/staticlists/model/StaticListView.java
@@ -167,7 +167,7 @@ public class StaticListView {
         /**
          * Set ok.
          *
-         * @param ok
+         * @param ok Boolean
          * @return Builder
          */
         public Builder setOk(Boolean ok) {
@@ -178,7 +178,7 @@ public class StaticListView {
         /**
          * Set the name.
          *
-         * @param name
+         * @param name String
          * @return Builder
          */
         public Builder setName(String name) {
@@ -189,7 +189,7 @@ public class StaticListView {
         /**
          * Set the description.
          *
-         * @param description
+         * @param description String
          * @return Builder
          */
         public Builder setDescription(String description) {
@@ -200,7 +200,7 @@ public class StaticListView {
         /**
          * Set the creation date
          *
-         * @param created
+         * @param created DateTime
          * @return Builder
          */
         public Builder setCreated(DateTime created) {
@@ -211,7 +211,7 @@ public class StaticListView {
         /**
          * Set the last updated date.
          *
-         * @param lastUpdated
+         * @param lastUpdated DateTime
          * @return Builder
          */
         public Builder setLastUpdated(DateTime lastUpdated) {
@@ -222,7 +222,7 @@ public class StaticListView {
         /**
          * Set the channel count.
          *
-         * @param channelCount
+         * @param channelCount int
          * @return Builder
          */
         public Builder setChannelCount(int channelCount) {
@@ -233,7 +233,7 @@ public class StaticListView {
         /**
          * Set the status.
          *
-         * @param status
+         * @param status String
          * @return Builder
          */
         public Builder setStatus(String status) {
diff --git a/src/main/java/com/urbanairship/api/staticlists/parse/StaticListListingResponseDeserializer.java b/src/main/java/com/urbanairship/api/staticlists/parse/StaticListListingResponseDeserializer.java
index b532ea6..fbd3fb4 100644
--- a/src/main/java/com/urbanairship/api/staticlists/parse/StaticListListingResponseDeserializer.java
+++ b/src/main/java/com/urbanairship/api/staticlists/parse/StaticListListingResponseDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.staticlists.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.staticlists.model.StaticListListingResponse;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/staticlists/parse/StaticListListingResponseReader.java b/src/main/java/com/urbanairship/api/staticlists/parse/StaticListListingResponseReader.java
index 92e648c..9f8244e 100644
--- a/src/main/java/com/urbanairship/api/staticlists/parse/StaticListListingResponseReader.java
+++ b/src/main/java/com/urbanairship/api/staticlists/parse/StaticListListingResponseReader.java
@@ -4,12 +4,12 @@
 
 package com.urbanairship.api.staticlists.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.staticlists.model.StaticListListingResponse;
 import com.urbanairship.api.staticlists.model.StaticListView;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
 
 import java.io.IOException;
 import java.util.List;
diff --git a/src/main/java/com/urbanairship/api/staticlists/parse/StaticListViewDeserializer.java b/src/main/java/com/urbanairship/api/staticlists/parse/StaticListViewDeserializer.java
index 745e435..d69ca8c 100644
--- a/src/main/java/com/urbanairship/api/staticlists/parse/StaticListViewDeserializer.java
+++ b/src/main/java/com/urbanairship/api/staticlists/parse/StaticListViewDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.staticlists.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.staticlists.model.StaticListView;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/staticlists/parse/StaticListViewReader.java b/src/main/java/com/urbanairship/api/staticlists/parse/StaticListViewReader.java
index 49dd050..62ddf94 100644
--- a/src/main/java/com/urbanairship/api/staticlists/parse/StaticListViewReader.java
+++ b/src/main/java/com/urbanairship/api/staticlists/parse/StaticListViewReader.java
@@ -4,12 +4,12 @@
 
 package com.urbanairship.api.staticlists.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.staticlists.model.StaticListView;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
 import org.joda.time.DateTime;
 
 import java.io.IOException;
diff --git a/src/main/java/com/urbanairship/api/staticlists/parse/StaticListsObjectMapper.java b/src/main/java/com/urbanairship/api/staticlists/parse/StaticListsObjectMapper.java
index 93f5fe0..0101b4b 100644
--- a/src/main/java/com/urbanairship/api/staticlists/parse/StaticListsObjectMapper.java
+++ b/src/main/java/com/urbanairship/api/staticlists/parse/StaticListsObjectMapper.java
@@ -4,11 +4,12 @@
 
 package com.urbanairship.api.staticlists.parse;
 
+import com.fasterxml.jackson.core.Version;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.module.SimpleModule;
+import com.fasterxml.jackson.datatype.joda.JodaModule;
 import com.urbanairship.api.staticlists.model.StaticListListingResponse;
 import com.urbanairship.api.staticlists.model.StaticListView;
-import org.codehaus.jackson.Version;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.map.module.SimpleModule;
 
 public class StaticListsObjectMapper {
     private static final ObjectMapper MAPPER = new ObjectMapper();
@@ -19,6 +20,7 @@ public class StaticListsObjectMapper {
         MODULE.addDeserializer(StaticListListingResponse.class, new StaticListListingResponseDeserializer());
 
         MAPPER.registerModule(MODULE);
+        MAPPER.registerModule(new JodaModule());
     }
 
     public static SimpleModule getModule() {
diff --git a/src/main/java/com/urbanairship/api/templates/TemplateDeleteRequest.java b/src/main/java/com/urbanairship/api/templates/TemplateDeleteRequest.java
index a18c04c..fbad9cb 100644
--- a/src/main/java/com/urbanairship/api/templates/TemplateDeleteRequest.java
+++ b/src/main/java/com/urbanairship/api/templates/TemplateDeleteRequest.java
@@ -76,4 +76,9 @@ public class TemplateDeleteRequest implements Request<TemplateResponse> {
             }
         };
     }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
 }
diff --git a/src/main/java/com/urbanairship/api/templates/TemplateListingRequest.java b/src/main/java/com/urbanairship/api/templates/TemplateListingRequest.java
index 442d365..336af00 100644
--- a/src/main/java/com/urbanairship/api/templates/TemplateListingRequest.java
+++ b/src/main/java/com/urbanairship/api/templates/TemplateListingRequest.java
@@ -126,4 +126,9 @@ public class TemplateListingRequest implements Request<TemplateListingResponse>
             }
         };
     }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
 }
diff --git a/src/main/java/com/urbanairship/api/templates/TemplatePushRequest.java b/src/main/java/com/urbanairship/api/templates/TemplatePushRequest.java
index 2a01843..af8e1c0 100644
--- a/src/main/java/com/urbanairship/api/templates/TemplatePushRequest.java
+++ b/src/main/java/com/urbanairship/api/templates/TemplatePushRequest.java
@@ -121,4 +121,9 @@ public class TemplatePushRequest implements Request<TemplateResponse> {
             }
         };
     }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
 }
diff --git a/src/main/java/com/urbanairship/api/templates/TemplateRequest.java b/src/main/java/com/urbanairship/api/templates/TemplateRequest.java
index 9b6ee64..c1ea5e5 100644
--- a/src/main/java/com/urbanairship/api/templates/TemplateRequest.java
+++ b/src/main/java/com/urbanairship/api/templates/TemplateRequest.java
@@ -5,6 +5,9 @@
 package com.urbanairship.api.templates;
 
 
+import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import com.google.common.net.HttpHeaders;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.client.RequestUtils;
@@ -15,8 +18,6 @@ import com.urbanairship.api.templates.model.TemplateVariable;
 import com.urbanairship.api.templates.model.TemplateView;
 import com.urbanairship.api.templates.parse.TemplatesObjectMapper;
 import org.apache.http.entity.ContentType;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.map.annotate.JsonSerialize;
 
 import java.io.IOException;
 import java.net.URI;
@@ -121,7 +122,7 @@ public class TemplateRequest implements Request<TemplateResponse> {
 
     @Override
     public String getRequestBody() {
-        ObjectMapper mapper = TemplatesObjectMapper.getInstance().setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL);
+        ObjectMapper mapper = TemplatesObjectMapper.getInstance().setSerializationInclusion(JsonInclude.Include.NON_NULL);
         try {
             return mapper.writeValueAsString(this.builder.build());
         } catch (Exception ex) {
@@ -156,4 +157,9 @@ public class TemplateRequest implements Request<TemplateResponse> {
             }
         };
     }
+
+    @Override
+    public boolean bearerTokenAuthRequired() {
+        return false;
+    }
 }
diff --git a/src/main/java/com/urbanairship/api/templates/parse/PartialPushPayloadDeserializer.java b/src/main/java/com/urbanairship/api/templates/parse/PartialPushPayloadDeserializer.java
index 39320be..0bfa2c7 100644
--- a/src/main/java/com/urbanairship/api/templates/parse/PartialPushPayloadDeserializer.java
+++ b/src/main/java/com/urbanairship/api/templates/parse/PartialPushPayloadDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.templates.model.PartialPushPayload;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/templates/parse/PartialPushPayloadReader.java b/src/main/java/com/urbanairship/api/templates/parse/PartialPushPayloadReader.java
index 454d61f..0b36708 100644
--- a/src/main/java/com/urbanairship/api/templates/parse/PartialPushPayloadReader.java
+++ b/src/main/java/com/urbanairship/api/templates/parse/PartialPushPayloadReader.java
@@ -4,6 +4,7 @@
 
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.push.model.InApp;
@@ -11,7 +12,6 @@ import com.urbanairship.api.push.model.PushOptions;
 import com.urbanairship.api.push.model.notification.Notification;
 import com.urbanairship.api.push.model.notification.richpush.RichPushMessage;
 import com.urbanairship.api.templates.model.PartialPushPayload;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/templates/parse/PartialPushPayloadSerializer.java b/src/main/java/com/urbanairship/api/templates/parse/PartialPushPayloadSerializer.java
index d5d4fe2..7823e12 100644
--- a/src/main/java/com/urbanairship/api/templates/parse/PartialPushPayloadSerializer.java
+++ b/src/main/java/com/urbanairship/api/templates/parse/PartialPushPayloadSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.templates.model.PartialPushPayload;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/templates/parse/TemplateListingResponseDeserializer.java b/src/main/java/com/urbanairship/api/templates/parse/TemplateListingResponseDeserializer.java
index 5ef5008..6baf80b 100644
--- a/src/main/java/com/urbanairship/api/templates/parse/TemplateListingResponseDeserializer.java
+++ b/src/main/java/com/urbanairship/api/templates/parse/TemplateListingResponseDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.templates.model.TemplateListingResponse;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/templates/parse/TemplateListingResponseReader.java b/src/main/java/com/urbanairship/api/templates/parse/TemplateListingResponseReader.java
index 117884e..5aacc24 100644
--- a/src/main/java/com/urbanairship/api/templates/parse/TemplateListingResponseReader.java
+++ b/src/main/java/com/urbanairship/api/templates/parse/TemplateListingResponseReader.java
@@ -4,12 +4,12 @@
 
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.templates.model.TemplateListingResponse;
 import com.urbanairship.api.templates.model.TemplateView;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
 
 import java.io.IOException;
 import java.util.List;
diff --git a/src/main/java/com/urbanairship/api/templates/parse/TemplatePushPayloadSerializer.java b/src/main/java/com/urbanairship/api/templates/parse/TemplatePushPayloadSerializer.java
index 8d747a8..3e21c4a 100644
--- a/src/main/java/com/urbanairship/api/templates/parse/TemplatePushPayloadSerializer.java
+++ b/src/main/java/com/urbanairship/api/templates/parse/TemplatePushPayloadSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.templates.model.TemplatePushPayload;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/templates/parse/TemplateResponseDeserializer.java b/src/main/java/com/urbanairship/api/templates/parse/TemplateResponseDeserializer.java
index 6af48c2..2247448 100644
--- a/src/main/java/com/urbanairship/api/templates/parse/TemplateResponseDeserializer.java
+++ b/src/main/java/com/urbanairship/api/templates/parse/TemplateResponseDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.templates.model.TemplateResponse;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/templates/parse/TemplateResponseReader.java b/src/main/java/com/urbanairship/api/templates/parse/TemplateResponseReader.java
index fb31de6..0eafc92 100644
--- a/src/main/java/com/urbanairship/api/templates/parse/TemplateResponseReader.java
+++ b/src/main/java/com/urbanairship/api/templates/parse/TemplateResponseReader.java
@@ -4,11 +4,11 @@
 
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.templates.model.TemplateResponse;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
 
 import java.io.IOException;
 import java.util.List;
diff --git a/src/main/java/com/urbanairship/api/templates/parse/TemplateSelectorSerializer.java b/src/main/java/com/urbanairship/api/templates/parse/TemplateSelectorSerializer.java
index b712584..249d143 100644
--- a/src/main/java/com/urbanairship/api/templates/parse/TemplateSelectorSerializer.java
+++ b/src/main/java/com/urbanairship/api/templates/parse/TemplateSelectorSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.templates.model.TemplateSelector;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/templates/parse/TemplateVariableDeserializer.java b/src/main/java/com/urbanairship/api/templates/parse/TemplateVariableDeserializer.java
index 9612062..e9a3f09 100644
--- a/src/main/java/com/urbanairship/api/templates/parse/TemplateVariableDeserializer.java
+++ b/src/main/java/com/urbanairship/api/templates/parse/TemplateVariableDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.templates.model.TemplateVariable;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/templates/parse/TemplateVariableReader.java b/src/main/java/com/urbanairship/api/templates/parse/TemplateVariableReader.java
index 49ac29f..f8a2c23 100644
--- a/src/main/java/com/urbanairship/api/templates/parse/TemplateVariableReader.java
+++ b/src/main/java/com/urbanairship/api/templates/parse/TemplateVariableReader.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.templates.model.TemplateVariable;
-import org.codehaus.jackson.JsonParser;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/templates/parse/TemplateVariableSerializer.java b/src/main/java/com/urbanairship/api/templates/parse/TemplateVariableSerializer.java
index 667f515..c759c80 100644
--- a/src/main/java/com/urbanairship/api/templates/parse/TemplateVariableSerializer.java
+++ b/src/main/java/com/urbanairship/api/templates/parse/TemplateVariableSerializer.java
@@ -4,10 +4,10 @@
 
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.templates.model.TemplateVariable;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/templates/parse/TemplateViewDeserializer.java b/src/main/java/com/urbanairship/api/templates/parse/TemplateViewDeserializer.java
index 1da5715..b8890a3 100644
--- a/src/main/java/com/urbanairship/api/templates/parse/TemplateViewDeserializer.java
+++ b/src/main/java/com/urbanairship/api/templates/parse/TemplateViewDeserializer.java
@@ -4,6 +4,9 @@
 
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.FieldParser;
@@ -11,9 +14,6 @@ import com.urbanairship.api.common.parse.FieldParserRegistry;
 import com.urbanairship.api.common.parse.MapFieldParserRegistry;
 import com.urbanairship.api.common.parse.StandardObjectDeserializer;
 import com.urbanairship.api.templates.model.TemplateView;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.map.DeserializationContext;
-import org.codehaus.jackson.map.JsonDeserializer;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/templates/parse/TemplateViewReader.java b/src/main/java/com/urbanairship/api/templates/parse/TemplateViewReader.java
index 786f142..bdedc00 100644
--- a/src/main/java/com/urbanairship/api/templates/parse/TemplateViewReader.java
+++ b/src/main/java/com/urbanairship/api/templates/parse/TemplateViewReader.java
@@ -4,18 +4,17 @@
 
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.JsonObjectReader;
 import com.urbanairship.api.templates.model.PartialPushPayload;
 import com.urbanairship.api.templates.model.TemplateVariable;
 import com.urbanairship.api.templates.model.TemplateView;
-import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.type.TypeReference;
 import org.joda.time.DateTime;
 
 import java.io.IOException;
 import java.util.List;
-import java.util.Set;
 
 public class TemplateViewReader implements JsonObjectReader<TemplateView> {
 
diff --git a/src/main/java/com/urbanairship/api/templates/parse/TemplateViewSerializer.java b/src/main/java/com/urbanairship/api/templates/parse/TemplateViewSerializer.java
index bc75dbe..12f0b85 100644
--- a/src/main/java/com/urbanairship/api/templates/parse/TemplateViewSerializer.java
+++ b/src/main/java/com/urbanairship/api/templates/parse/TemplateViewSerializer.java
@@ -1,11 +1,11 @@
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.SerializerProvider;
 import com.urbanairship.api.templates.model.TemplateVariable;
 import com.urbanairship.api.templates.model.TemplateView;
-import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.JsonProcessingException;
-import org.codehaus.jackson.map.JsonSerializer;
-import org.codehaus.jackson.map.SerializerProvider;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/urbanairship/api/templates/parse/TemplatesObjectMapper.java b/src/main/java/com/urbanairship/api/templates/parse/TemplatesObjectMapper.java
index 4788733..b29be81 100644
--- a/src/main/java/com/urbanairship/api/templates/parse/TemplatesObjectMapper.java
+++ b/src/main/java/com/urbanairship/api/templates/parse/TemplatesObjectMapper.java
@@ -4,6 +4,10 @@
 
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.core.Version;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.module.SimpleModule;
+import com.fasterxml.jackson.datatype.joda.JodaModule;
 import com.urbanairship.api.push.parse.PushObjectMapper;
 import com.urbanairship.api.templates.model.PartialPushPayload;
 import com.urbanairship.api.templates.model.TemplateListingResponse;
@@ -12,9 +16,6 @@ import com.urbanairship.api.templates.model.TemplateResponse;
 import com.urbanairship.api.templates.model.TemplateSelector;
 import com.urbanairship.api.templates.model.TemplateVariable;
 import com.urbanairship.api.templates.model.TemplateView;
-import org.codehaus.jackson.Version;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.map.module.SimpleModule;
 
 public class TemplatesObjectMapper {
     private static final ObjectMapper MAPPER = new ObjectMapper();
@@ -33,6 +34,7 @@ public class TemplatesObjectMapper {
         MODULE.addDeserializer(TemplateResponse.class, new TemplateResponseDeserializer());
 
         MAPPER.registerModule(MODULE);
+        MAPPER.registerModule(new JodaModule());
         MAPPER.registerModule(PushObjectMapper.getModule());
     }
 
diff --git a/src/test/java/com/urbanairship/api/channel/ChannelRequestTest.java b/src/test/java/com/urbanairship/api/channel/ChannelRequestTest.java
index 40f0acb..dfe4f6a 100644
--- a/src/test/java/com/urbanairship/api/channel/ChannelRequestTest.java
+++ b/src/test/java/com/urbanairship/api/channel/ChannelRequestTest.java
@@ -1,12 +1,12 @@
 package com.urbanairship.api.channel;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.net.HttpHeaders;
 import com.urbanairship.api.channel.model.ChannelResponse;
 import com.urbanairship.api.channel.parse.ChannelObjectMapper;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.client.ResponseParser;
 import org.apache.http.entity.ContentType;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import java.io.IOException;
diff --git a/src/test/java/com/urbanairship/api/channel/ChannelResponseTest.java b/src/test/java/com/urbanairship/api/channel/ChannelResponseTest.java
index 6d45d74..f43dfb1 100644
--- a/src/test/java/com/urbanairship/api/channel/ChannelResponseTest.java
+++ b/src/test/java/com/urbanairship/api/channel/ChannelResponseTest.java
@@ -1,11 +1,11 @@
 package com.urbanairship.api.channel;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.ImmutableSet;
 import com.urbanairship.api.channel.model.ChannelResponse;
 import com.urbanairship.api.channel.model.ChannelType;
 import com.urbanairship.api.channel.model.ChannelView;
 import com.urbanairship.api.channel.parse.ChannelObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/channel/ChannelTagRequestTest.java b/src/test/java/com/urbanairship/api/channel/ChannelTagRequestTest.java
index 6f6002e..5434156 100644
--- a/src/test/java/com/urbanairship/api/channel/ChannelTagRequestTest.java
+++ b/src/test/java/com/urbanairship/api/channel/ChannelTagRequestTest.java
@@ -1,12 +1,12 @@
 package com.urbanairship.api.channel;
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.net.HttpHeaders;
 import com.urbanairship.api.channel.parse.ChannelObjectMapper;
 import com.urbanairship.api.client.Request;
 import org.apache.http.entity.ContentType;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import java.net.URI;
diff --git a/src/test/java/com/urbanairship/api/channel/OpenChannelRequestTest.java b/src/test/java/com/urbanairship/api/channel/OpenChannelRequestTest.java
new file mode 100644
index 0000000..c258665
--- /dev/null
+++ b/src/test/java/com/urbanairship/api/channel/OpenChannelRequestTest.java
@@ -0,0 +1,88 @@
+package com.urbanairship.api.channel;
+
+import com.google.common.net.HttpHeaders;
+import com.urbanairship.api.channel.model.ChannelType;
+import com.urbanairship.api.channel.model.OpenChannelResponse;
+import com.urbanairship.api.channel.model.open.Channel;
+import com.urbanairship.api.channel.model.open.OpenChannel;
+import com.urbanairship.api.channel.model.open.OpenChannelPayload;
+import com.urbanairship.api.channel.parse.ChannelObjectMapper;
+import com.urbanairship.api.client.Request;
+import com.urbanairship.api.client.ResponseParser;
+import org.apache.http.entity.ContentType;
+import org.junit.Test;
+
+import java.io.IOException;
+import java.net.URI;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.junit.Assert.assertEquals;
+
+public class OpenChannelRequestTest {
+    OpenChannel openChannel = OpenChannel.newBuilder()
+            .setOpenPlatformName("email")
+            .setOldAddress("old_email@example.come")
+            .addIdentifier("com.example.external_id", "df6a6b50-9843-7894-1235-12aed4489489")
+            .build();
+
+    Channel channel = Channel.newBuilder()
+            .setOpenChannel(openChannel)
+            .setChannelType(ChannelType.OPEN)
+            .setOptIn(true)
+            .setAddress("new_email@example.com")
+            .setTags(true)
+            .addTag("asdf")
+            .setTimeZone("America/Los_Angeles")
+            .setLocaleCountry("US")
+            .setLocaleLanguage("en")
+            .build();
+
+    OpenChannelPayload payload = new OpenChannelPayload(channel);
+    OpenChannelRequest openChannelRequest = OpenChannelRequest.newRequest(payload);
+
+    @Test
+    public void testHeaders() throws Exception {
+        Map<String, String> headers = new HashMap<String, String>();
+        headers.put(HttpHeaders.CONTENT_TYPE, Request.CONTENT_TYPE_JSON);
+        headers.put(HttpHeaders.ACCEPT, Request.UA_VERSION_JSON);
+
+        assertEquals(openChannelRequest.getRequestHeaders(), headers);
+    }
+
+    @Test
+    public void testBody() throws Exception {
+        assertEquals(openChannelRequest.getRequestBody(), payload.toJSON());
+    }
+
+    @Test
+    public void testMethod() throws Exception {
+        assertEquals(openChannelRequest.getHttpMethod(), Request.HttpMethod.POST);
+    }
+
+    @Test
+    public void testContentType() throws Exception {
+        assertEquals(openChannelRequest.getContentType(), ContentType.APPLICATION_JSON);
+    }
+
+    @Test
+    public void testURI() throws Exception {
+        URI baseURI = URI.create("https://go.urbanairship.com");
+
+        URI expextedURI = URI.create("https://go.urbanairship.com/api/channels/open/");
+        assertEquals(openChannelRequest.getUri(baseURI), expextedURI);
+    }
+
+    @Test
+    public void testCustomEventParser() throws Exception {
+        ResponseParser responseParser = new ResponseParser<OpenChannelResponse>() {
+            @Override
+            public OpenChannelResponse parse(String response) throws IOException {
+                return ChannelObjectMapper.getInstance().readValue(response, OpenChannelResponse.class);
+            }
+        };
+
+        String response = "{\"ok\" : true,\"channel_id\" : \"df6a6b50-9843-0304-d5a5-743f246a8567\"}";
+        assertEquals(openChannelRequest.getResponseParser().parse(response), responseParser.parse(response));
+    }
+}
diff --git a/src/test/java/com/urbanairship/api/channel/open/OpenChannelPayloadSerializerTest.java b/src/test/java/com/urbanairship/api/channel/open/OpenChannelPayloadSerializerTest.java
new file mode 100644
index 0000000..36d1f25
--- /dev/null
+++ b/src/test/java/com/urbanairship/api/channel/open/OpenChannelPayloadSerializerTest.java
@@ -0,0 +1,70 @@
+package com.urbanairship.api.channel.open;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.urbanairship.api.channel.model.ChannelType;
+import com.urbanairship.api.channel.model.open.Channel;
+import com.urbanairship.api.channel.model.open.OpenChannel;
+import com.urbanairship.api.channel.model.open.OpenChannelPayload;
+import com.urbanairship.api.push.parse.PushObjectMapper;
+import org.junit.Test;
+
+import java.io.IOException;
+
+import static org.junit.Assert.assertEquals;
+
+public class OpenChannelPayloadSerializerTest {
+    private static final ObjectMapper MAPPER = PushObjectMapper.getInstance();
+
+    @Test
+    public void testOpenChannelPayload() throws IOException {
+        OpenChannel openChannel = OpenChannel.newBuilder()
+                .setOpenPlatformName("email")
+                .setOldAddress("old_email@example.come")
+                .addIdentifier("com.example.external_id", "df6a6b50-9843-7894-1235-12aed4489489")
+                .build();
+
+        Channel channel = Channel.newBuilder()
+                .setOpenChannel(openChannel)
+                .setChannelType(ChannelType.OPEN)
+                .setOptIn(true)
+                .setAddress("new_email@example.com")
+                .setTags(true)
+                .addTag("asdf")
+                .setTimeZone("America/Los_Angeles")
+                .setLocaleCountry("US")
+                .setLocaleLanguage("en")
+                .build();
+
+        OpenChannelPayload payload = new OpenChannelPayload(channel);
+
+
+        String parsedJson = MAPPER.writeValueAsString(payload);
+        String jsonString = "{\n" +
+                "    \"channel\": {\n" +
+                "        \"type\": \"open\",\n" +
+                "        \"address\": \"new_email@example.com\",\n" +
+                "        \"open\": {\n" +
+                "            \"open_platform_name\": \"email\",\n" +
+                "            \"old_address\": \"old_email@example.come\",\n" +
+                "            \"identifiers\": {\n" +
+                "                \"com.example.external_id\": \"df6a6b50-9843-7894-1235-12aed4489489\"\n" +
+                "            }\n" +
+                "        },\n" +
+                "        \"opt_in\": true,\n" +
+                "        \"set_tags\": true,\n" +
+                "        \"tags\": [\n" +
+                "            \"asdf\"\n" +
+                "        ],\n" +
+                "        \"timezone\": \"America/Los_Angeles\",\n" +
+                "        \"locale_country\": \"US\",\n" +
+                "        \"locale_language\": \"en\"\n" +
+                "    }\n" +
+                "}";
+
+        JsonNode actual = MAPPER.readTree(parsedJson);
+        JsonNode expected = MAPPER.readTree(jsonString);
+
+        assertEquals(actual, expected);
+    }
+}
diff --git a/src/test/java/com/urbanairship/api/channel/parse/ChannelViewDeserializeTest.java b/src/test/java/com/urbanairship/api/channel/parse/ChannelViewDeserializeTest.java
index f06fa3d..3927919 100644
--- a/src/test/java/com/urbanairship/api/channel/parse/ChannelViewDeserializeTest.java
+++ b/src/test/java/com/urbanairship/api/channel/parse/ChannelViewDeserializeTest.java
@@ -1,5 +1,7 @@
 package com.urbanairship.api.channel.parse;
 
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Sets;
@@ -7,8 +9,6 @@ import com.urbanairship.api.channel.model.ChannelType;
 import com.urbanairship.api.channel.model.ChannelView;
 import com.urbanairship.api.channel.model.web.Subscription;
 import com.urbanairship.api.common.parse.APIParsingException;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.type.TypeReference;
 import org.junit.Assert;
 import org.junit.Test;
 
diff --git a/src/test/java/com/urbanairship/api/client/RequestErrorTest.java b/src/test/java/com/urbanairship/api/client/RequestErrorTest.java
index 25e41e3..93937d8 100644
--- a/src/test/java/com/urbanairship/api/client/RequestErrorTest.java
+++ b/src/test/java/com/urbanairship/api/client/RequestErrorTest.java
@@ -1,7 +1,7 @@
 package com.urbanairship.api.client;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.client.parse.RequestErrorObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/client/ResponseTest.java b/src/test/java/com/urbanairship/api/client/ResponseTest.java
index 2a5c185..d929c7d 100644
--- a/src/test/java/com/urbanairship/api/client/ResponseTest.java
+++ b/src/test/java/com/urbanairship/api/client/ResponseTest.java
@@ -1,9 +1,9 @@
 package com.urbanairship.api.client;
 
-import com.google.common.collect.ArrayListMultimap;
+import com.fasterxml.jackson.databind.node.JsonNodeFactory;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
-import com.google.common.collect.ListMultimap;
 import com.urbanairship.api.channel.model.ChannelResponse;
 import com.urbanairship.api.channel.model.ChannelType;
 import com.urbanairship.api.channel.model.ChannelView;
@@ -33,13 +33,14 @@ import org.apache.http.HttpResponse;
 import org.apache.http.ProtocolVersion;
 import org.apache.http.message.BasicHttpResponse;
 import org.apache.http.message.BasicStatusLine;
-import org.codehaus.jackson.node.JsonNodeFactory;
-import org.codehaus.jackson.node.ObjectNode;
 import org.joda.time.DateTime;
 import org.joda.time.Period;
+import org.junit.Before;
 import org.junit.Test;
 
 import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
 import java.util.UUID;
 
 import static org.junit.Assert.assertTrue;
@@ -49,6 +50,14 @@ public class ResponseTest {
     private final String CONTENT_TYPE_KEY = "content-type";
     private final String CONTENT_TYPE = "application/json";
 
+
+    private final Map<String, String> headers = new HashMap<>();
+
+    @Before
+    public void setUp() {
+        headers.put(CONTENT_TYPE_KEY, CONTENT_TYPE);
+    }
+
     @Test
     public void testPushResponse() {
         PushResponse pushResponse = PushResponse.newBuilder()
@@ -61,14 +70,17 @@ public class ResponseTest {
                 new ProtocolVersion("HTTP", 1, 1), 200, "OK"));
         httpResponse.setHeader(CONTENT_TYPE_KEY, CONTENT_TYPE);
 
-        ListMultimap<String, String> headers = ArrayListMultimap.create();
-        headers.put(httpResponse.getAllHeaders()[0].getName(), httpResponse.getAllHeaders()[0].getValue());
+        Map<String, String> headers = new HashMap<>();
+        headers.put(CONTENT_TYPE_KEY, CONTENT_TYPE);
 
-        Response<PushResponse> response = new Response<PushResponse>(pushResponse, headers.asMap(), httpResponse.getStatusLine().getStatusCode());
+        //ListMultimap<String, String> headers = ArrayListMultimap.create();
+        //headers.put(httpResponse.getAllHeaders()[0].getName(), httpResponse.getAllHeaders()[0].getValue());
+
+        Response<PushResponse> response = new Response<PushResponse>(pushResponse, headers, httpResponse.getStatusLine().getStatusCode());
         assertTrue("HTTP response body not set properly",
                 response.getBody().get().equals(pushResponse));
         assertTrue("HTTP response headers not set properly",
-                response.getHeaders().equals(headers.asMap()));
+                response.getHeaders().equals(headers));
         assertTrue("HTTP response status not set properly",
                 response.getStatus() == httpResponse.getStatusLine().getStatusCode());
     }
@@ -85,14 +97,14 @@ public class ResponseTest {
                 .setOperationId("ID")
                 .build();
 
-        ListMultimap<String, String> headers = ArrayListMultimap.create();
-        headers.put(httpResponse.getAllHeaders()[0].getName(), httpResponse.getAllHeaders()[0].getValue());
+        Map<String, String> headers = new HashMap<>();
+        headers.put(CONTENT_TYPE_KEY, CONTENT_TYPE);
 
-        Response<ScheduleResponse> response = new Response<ScheduleResponse>(scheduleResponse, headers.asMap(), httpResponse.getStatusLine().getStatusCode());
+        Response<ScheduleResponse> response = new Response<ScheduleResponse>(scheduleResponse, headers, httpResponse.getStatusLine().getStatusCode());
         assertTrue("HTTP response body not set properly",
                 response.getBody().get().equals(scheduleResponse));
         assertTrue("HTTP response headers not set properly",
-                response.getHeaders().equals(headers.asMap()));
+                response.getHeaders().equals(headers));
         assertTrue("HTTP response status not set properly",
                 response.getStatus() == httpResponse.getStatusLine().getStatusCode());
     }
@@ -124,14 +136,14 @@ public class ResponseTest {
                 .addSchedule(sample)
                 .build();
 
-        ListMultimap<String, String> headers = ArrayListMultimap.create();
-        headers.put(httpResponse.getAllHeaders()[0].getName(), httpResponse.getAllHeaders()[0].getValue());
+        Map<String, String> headers = new HashMap<>();
+        headers.put(CONTENT_TYPE_KEY, CONTENT_TYPE);
 
-        Response<ListAllSchedulesResponse> response = new Response<ListAllSchedulesResponse>(listScheduleResponse, headers.asMap(), httpResponse.getStatusLine().getStatusCode());
+        Response<ListAllSchedulesResponse> response = new Response<ListAllSchedulesResponse>(listScheduleResponse, headers, httpResponse.getStatusLine().getStatusCode());
         assertTrue("HTTP response body not set properly",
                 response.getBody().get().equals(listScheduleResponse));
         assertTrue("HTTP response headers not set properly",
-                response.getHeaders().equals(headers.asMap()));
+                response.getHeaders().equals(headers));
         assertTrue("HTTP response status not set properly",
                 response.getStatus() == httpResponse.getStatusLine().getStatusCode());
     }
@@ -142,9 +154,6 @@ public class ResponseTest {
                 new ProtocolVersion("HTTP", 1, 1), 200, "OK"));
         httpResponse.setHeader(CONTENT_TYPE_KEY, CONTENT_TYPE);
 
-        ListMultimap<String, String> headers = ArrayListMultimap.create();
-        headers.put(httpResponse.getAllHeaders()[0].getName(), httpResponse.getAllHeaders()[0].getValue());
-
         ChannelResponse channelResponse =
                 ChannelResponse.newBuilder()
                         .setOk(true)
@@ -161,11 +170,11 @@ public class ResponseTest {
                                 .build())
                         .build();
 
-        Response<ChannelResponse> response = new Response<ChannelResponse>(channelResponse, headers.asMap(), httpResponse.getStatusLine().getStatusCode());
+        Response<ChannelResponse> response = new Response<ChannelResponse>(channelResponse, headers, httpResponse.getStatusLine().getStatusCode());
         assertTrue("HTTP response body not set properly",
                 response.getBody().get().equals(channelResponse));
         assertTrue("HTTP response headers not set properly",
-                response.getHeaders().equals(headers.asMap()));
+                response.getHeaders().equals(headers));
         assertTrue("HTTP response status not set properly",
                 response.getStatus() == httpResponse.getStatusLine().getStatusCode());
     }
@@ -176,9 +185,6 @@ public class ResponseTest {
                 new ProtocolVersion("HTTP", 1, 1), 200, "OK"));
         httpResponse.setHeader(CONTENT_TYPE_KEY, CONTENT_TYPE);
 
-        ListMultimap<String, String> headers = ArrayListMultimap.create();
-        headers.put(httpResponse.getAllHeaders()[0].getName(), httpResponse.getAllHeaders()[0].getValue());
-
         ChannelResponse channelResponse = ChannelResponse.newBuilder()
                 .setOk(true)
                 .setNextPage("nextPage")
@@ -195,11 +201,11 @@ public class ResponseTest {
                         .build())
                 .build();
 
-        Response<ChannelResponse> response = new Response<ChannelResponse>(channelResponse, headers.asMap(), httpResponse.getStatusLine().getStatusCode());
+        Response<ChannelResponse> response = new Response<ChannelResponse>(channelResponse, headers, httpResponse.getStatusLine().getStatusCode());
         assertTrue("HTTP response body not set properly",
                 response.getBody().get().equals(channelResponse));
         assertTrue("HTTP response headers not set properly",
-                response.getHeaders().equals(headers.asMap()));
+                response.getHeaders().equals(headers));
         assertTrue("HTTP response status not set properly",
                 response.getStatus() == httpResponse.getStatusLine().getStatusCode());
     }
@@ -210,9 +216,6 @@ public class ResponseTest {
                 new ProtocolVersion("HTTP", 1, 1), 200, "OK"));
         httpResponse.setHeader(CONTENT_TYPE_KEY, CONTENT_TYPE);
 
-        ListMultimap<String, String> headers = ArrayListMultimap.create();
-        headers.put(httpResponse.getAllHeaders()[0].getName(), httpResponse.getAllHeaders()[0].getValue());
-
         NamedUserListingResponse namedUserListingResponse = NamedUserListingResponse.newBuilder()
                 .setOk(true)
                 .setNamedUserView(NamedUserView.newBuilder()
@@ -230,11 +233,11 @@ public class ResponseTest {
                         .build())
                 .build();
 
-        Response<NamedUserListingResponse> response = new Response<NamedUserListingResponse>(namedUserListingResponse, headers.asMap(), httpResponse.getStatusLine().getStatusCode());
+        Response<NamedUserListingResponse> response = new Response<NamedUserListingResponse>(namedUserListingResponse, headers, httpResponse.getStatusLine().getStatusCode());
         assertTrue("HTTP response body not set properly",
                 response.getBody().get().equals(namedUserListingResponse));
         assertTrue("HTTP response headers not set properly",
-                response.getHeaders().equals(headers.asMap()));
+                response.getHeaders().equals(headers));
         assertTrue("HTTP response status not set properly",
                 response.getStatus() == httpResponse.getStatusLine().getStatusCode());
     }
@@ -245,10 +248,6 @@ public class ResponseTest {
                 new ProtocolVersion("HTTP", 1, 1), 200, "OK"));
         httpResponse.setHeader(CONTENT_TYPE_KEY, CONTENT_TYPE);
 
-        ListMultimap<String, String> headers = ArrayListMultimap.create();
-        headers.put(httpResponse.getAllHeaders()[0].getName(), httpResponse.getAllHeaders()[0].getValue());
-
-
         UUID one = UUID.randomUUID();
         UUID two = UUID.randomUUID();
 
@@ -270,13 +269,13 @@ public class ResponseTest {
 
         Response<PushListingResponse> response = new Response<PushListingResponse>(
                 pushListingResponse,
-                headers.asMap(),
+                headers,
                 httpResponse.getStatusLine().getStatusCode());
 
         assertTrue("HTTP response not set properly",
                 response.getBody().get().equals(pushListingResponse));
         assertTrue("HTTP response headers not set properly",
-                response.getHeaders().equals(headers.asMap()));
+                response.getHeaders().equals(headers));
         assertTrue("HTTP response status not set properly",
                 response.getStatus() == httpResponse.getStatusLine().getStatusCode());
     }
@@ -287,10 +286,6 @@ public class ResponseTest {
                 new ProtocolVersion("HTTP", 1, 1), 200, "OK"));
         httpResponse.setHeader(CONTENT_TYPE_KEY, CONTENT_TYPE);
 
-        ListMultimap<String, String> headers = ArrayListMultimap.create();
-        headers.put(httpResponse.getAllHeaders()[0].getName(), httpResponse.getAllHeaders()[0].getValue());
-
-
         UUID one = UUID.randomUUID();
         UUID two = UUID.randomUUID();
 
@@ -305,13 +300,13 @@ public class ResponseTest {
 
         Response<PushInfoResponse> response = new Response<PushInfoResponse>(
                 pushInfoResponse,
-                headers.asMap(),
+                headers,
                 httpResponse.getStatusLine().getStatusCode());
 
         assertTrue("HTTP response not set properly",
                 response.getBody().get().equals(pushInfoResponse));
         assertTrue("HTTP response headers not set properly",
-                response.getHeaders().equals(headers.asMap()));
+                response.getHeaders().equals(headers));
         assertTrue("HTTP response status not set properly",
                 response.getStatus() == httpResponse.getStatusLine().getStatusCode());
 
@@ -323,9 +318,6 @@ public class ResponseTest {
                 new ProtocolVersion("HTTP", 1, 1), 200, "OK"));
         httpResponse.setHeader(CONTENT_TYPE_KEY, CONTENT_TYPE);
 
-        ListMultimap<String, String> headers = ArrayListMultimap.create();
-        headers.put(httpResponse.getAllHeaders()[0].getName(), httpResponse.getAllHeaders()[0].getValue());
-
         Selector andSelector = Selectors.tags("java", "lib");
         Selector compound = Selectors.or(andSelector, Selectors.not(Selectors.tag("mfd")));
 
@@ -336,13 +328,13 @@ public class ResponseTest {
 
         Response<SegmentView> response = new Response<SegmentView>(
                 segment,
-                headers.asMap(),
+                headers,
                 httpResponse.getStatusLine().getStatusCode());
 
         assertTrue("HTTP response not set properly",
                 response.getBody().get().equals(segment));
         assertTrue("HTTP response headers not set properly",
-                response.getHeaders().equals(headers.asMap()));
+                response.getHeaders().equals(headers));
         assertTrue("HTTP response status not set properly",
                 response.getStatus() == httpResponse.getStatusLine().getStatusCode());
     }
@@ -353,9 +345,6 @@ public class ResponseTest {
                 new ProtocolVersion("HTTP", 1, 1), 200, "OK"));
         httpResponse.setHeader(CONTENT_TYPE_KEY, CONTENT_TYPE);
 
-        ListMultimap<String, String> headers = ArrayListMultimap.create();
-        headers.put(httpResponse.getAllHeaders()[0].getName(), httpResponse.getAllHeaders()[0].getValue());
-
         SegmentListingView listItem = SegmentListingView.newBuilder()
                 .setCreationDate(123L)
                 .setDisplayName("DisplayName")
@@ -376,13 +365,13 @@ public class ResponseTest {
 
         Response<SegmentListingResponse> response = new Response<SegmentListingResponse>(
                 segments,
-                headers.asMap(),
+                headers,
                 httpResponse.getStatusLine().getStatusCode());
 
         assertTrue("HTTP response not set properly",
                 response.getBody().get().equals(segments));
         assertTrue("HTTP response headers not set properly",
-                response.getHeaders().equals(headers.asMap()));
+                response.getHeaders().equals(headers));
         assertTrue("HTTP response status not set properly",
                 response.getStatus() == httpResponse.getStatusLine().getStatusCode());
     }
@@ -394,9 +383,7 @@ public class ResponseTest {
             new ProtocolVersion("HTTP", 1, 1), 200, "OK"));
         httpResponse.setHeader(CONTENT_TYPE_KEY, CONTENT_TYPE);
 
-        ListMultimap<String, String> headers = ArrayListMultimap.create();
-        headers.put(httpResponse.getAllHeaders()[0].getName(), httpResponse.getAllHeaders()[0].getValue());
-            ObjectNode node = JsonNodeFactory.instance.objectNode();
+        ObjectNode node = JsonNodeFactory.instance.objectNode();
         node.put("hello", "kitty");
 
         LocationView locationView = LocationView.newBuilder()
@@ -411,13 +398,13 @@ public class ResponseTest {
 
         Response<LocationResponse> response = new Response<LocationResponse>(
             locationResponse,
-            headers.asMap(),
+            headers,
             httpResponse.getStatusLine().getStatusCode());
 
         assertTrue("HTTP response not set properly",
             response.getBody().get().equals(locationResponse));
         assertTrue("HTTP response headers not set properly",
-            response.getHeaders().equals(headers.asMap()));
+            response.getHeaders().equals(headers));
         assertTrue("HTTP response status not set properly",
             response.getStatus() == httpResponse.getStatusLine().getStatusCode());
     }
@@ -428,9 +415,6 @@ public class ResponseTest {
                 new ProtocolVersion("HTTP", 1, 1), 200, "OK"));
         httpResponse.setHeader(CONTENT_TYPE_KEY, CONTENT_TYPE);
 
-        ListMultimap<String, String> headers = ArrayListMultimap.create();
-        headers.put(httpResponse.getAllHeaders()[0].getName(), httpResponse.getAllHeaders()[0].getValue());
-
         DateTime created = new DateTime(2014, 10, 1, 12, 0, 0, 0);
         DateTime updated = created.plus(Period.hours(48));
 
@@ -446,13 +430,13 @@ public class ResponseTest {
 
         Response<StaticListView> response = new Response<StaticListView>(
                 staticListView,
-                headers.asMap(),
+                headers,
                 httpResponse.getStatusLine().getStatusCode());
 
         assertTrue("HTTP response not set properly",
                 response.getBody().get().equals(staticListView));
         assertTrue("HTTP response headers not set properly",
-                response.getHeaders().equals(headers.asMap()));
+                response.getHeaders().equals(headers));
         assertTrue("HTTP response status not set properly",
                 response.getStatus() == httpResponse.getStatusLine().getStatusCode());
     }
@@ -463,9 +447,6 @@ public class ResponseTest {
                 new ProtocolVersion("HTTP", 1, 1), 200, "OK"));
         httpResponse.setHeader(CONTENT_TYPE_KEY, CONTENT_TYPE);
 
-        ListMultimap<String, String> headers = ArrayListMultimap.create();
-        headers.put(httpResponse.getAllHeaders()[0].getName(), httpResponse.getAllHeaders()[0].getValue());
-
         DateTime created = new DateTime(2014, 10, 1, 12, 0, 0, 0);
         DateTime updated = created.plus(Period.hours(48));
 
@@ -494,13 +475,13 @@ public class ResponseTest {
 
         Response<StaticListListingResponse> response = new Response<StaticListListingResponse>(
                 staticListListingResponse,
-                headers.asMap(),
+                headers,
                 httpResponse.getStatusLine().getStatusCode());
 
         assertTrue("HTTP response not set properly",
                 response.getBody().get().equals(staticListListingResponse));
         assertTrue("HTTP response headers not set properly",
-                response.getHeaders().equals(headers.asMap()));
+                response.getHeaders().equals(headers));
         assertTrue("HTTP response status not set properly",
                 response.getStatus() == httpResponse.getStatusLine().getStatusCode());
 
diff --git a/src/test/java/com/urbanairship/api/client/UrbanAirshipClientTest.java b/src/test/java/com/urbanairship/api/client/UrbanAirshipClientTest.java
index 95a9d9a..4562abc 100644
--- a/src/test/java/com/urbanairship/api/client/UrbanAirshipClientTest.java
+++ b/src/test/java/com/urbanairship/api/client/UrbanAirshipClientTest.java
@@ -1,14 +1,12 @@
 package com.urbanairship.api.client;
 
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.github.tomakehurst.wiremock.junit.WireMockClassRule;
 import com.github.tomakehurst.wiremock.verification.LoggedRequest;
 import com.google.common.base.Predicate;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.ProxyServer;
-import com.ning.http.client.filter.FilterContext;
-import com.ning.http.client.uri.Uri;
 import com.urbanairship.api.channel.ChannelRequest;
 import com.urbanairship.api.channel.ChannelTagRequest;
 import com.urbanairship.api.channel.model.ChannelResponse;
@@ -78,8 +76,10 @@ import com.urbanairship.api.templates.model.TemplatePushPayload;
 import com.urbanairship.api.templates.model.TemplateResponse;
 import com.urbanairship.api.templates.model.TemplateSelector;
 import org.apache.log4j.BasicConfigurator;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.type.TypeReference;
+import org.asynchttpclient.DefaultAsyncHttpClientConfig;
+import org.asynchttpclient.Realm;
+import org.asynchttpclient.filter.FilterContext;
+import org.asynchttpclient.proxy.ProxyServer;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.joda.time.Period;
@@ -95,6 +95,7 @@ import java.io.IOException;
 import java.math.BigDecimal;
 import java.net.URI;
 import java.net.URISyntaxException;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.UUID;
@@ -135,14 +136,13 @@ public class UrbanAirshipClientTest {
     }
 
     private UrbanAirshipClient client;
+    private AsyncRequestClient asyncRequestClient;
 
     // Set up the client
     @Before
     public void setup() {
-        client = UrbanAirshipClient.newBuilder()
+        asyncRequestClient = AsyncRequestClient.newBuilder()
                 .setBaseUri("http://localhost:8080")
-                .setKey("key")
-                .setSecret("secret")
                 .setMaxRetries(5)
                 .setRetryPredicate(new Predicate<FilterContext>() {
                     @Override
@@ -151,11 +151,21 @@ public class UrbanAirshipClientTest {
                     }
                 })
                 .build();
+
+        client = UrbanAirshipClient.newBuilder()
+                .setKey("key")
+                .setSecret("secret")
+                .setClient(asyncRequestClient)
+                .build();
     }
 
     @After
     public void takeDown() {
-        client.close();
+        try {
+            client.close();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
     }
 
     @ClassRule
@@ -185,42 +195,33 @@ public class UrbanAirshipClientTest {
             .setSecret("secret")
             .build();
         assertEquals("App key incorrect", "key", client.getAppKey());
-        assertEquals("App secret incorrect", "secret", client.getAppSecret());
-        client.close();
+        assertEquals("App secret incorrect", "secret", client.getAppSecret().get());
+        try {
+            client.close();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
     }
 
     @Test
     public void testAPIClientBuilderWithOptionalProxyInfo() throws Exception {
-        ProxyInfo proxyInfo = ProxyInfo.newBuilder()
-            .setHost("test.urbanairship.com")
-            .setProtocol(ProxyInfo.ProxyInfoProtocol.HTTPS)
-            .setPrincipal("user")
-            .setPassword("password")
-            .setPort(8080)
-            .build();
+        Realm realm = new Realm.Builder("user", "password")
+                .setScheme(Realm.AuthScheme.BASIC)
+                .build();
 
-        ProxyInfo proxyInfoCopy = ProxyInfo.newBuilder()
-            .setHost("test.urbanairship.com")
-            .setProtocol(ProxyInfo.ProxyInfoProtocol.HTTPS)
-            .setPrincipal("user")
-            .setPassword("password")
-            .setPort(8080)
-            .build();
+        ProxyServer proxyServer = new ProxyServer.Builder("test.urbanairship.com", 8080)
+                .setRealm(realm)
+                .build();
 
-        assertEquals(proxyInfo, proxyInfoCopy);
+        AsyncRequestClient proxyClient = AsyncRequestClient.newBuilder()
+                .setProxyServer(proxyServer)
+                .build();
 
-        UrbanAirshipClient proxyClient = UrbanAirshipClient.newBuilder()
-            .setKey("key")
-            .setSecret("secret")
-            .setProxyInfo(proxyInfo)
-            .build();
+        assertEquals("test.urbanairship.com", proxyClient.getProxyServer().get().getHost());
+        assertEquals(8080, proxyClient.getProxyServer().get().getPort());
+        assertEquals("user", proxyClient.getClientConfig().getRealm().getPrincipal());
+        assertEquals("password", proxyClient.getClientConfig().getRealm().getPassword());
 
-        ProxyServer proxyServer = proxyClient.getClient().getConfig().getProxyServerSelector().select(Uri.create("https://host:8080"));
-        assertEquals("test.urbanairship.com", proxyServer.getHost());
-        assertEquals(8080, proxyServer.getPort());
-        assertEquals(ProxyServer.Protocol.HTTPS, proxyServer.getProtocol());
-        assertEquals("user", proxyServer.getPrincipal());
-        assertEquals("password", proxyServer.getPassword());
         proxyClient.close();
     }
 
@@ -236,19 +237,17 @@ public class UrbanAirshipClientTest {
     }
 
     @Test
-    public void testAPIClientBuilderWithParams() {
-        AsyncHttpClientConfig.Builder configBuilder = new AsyncHttpClientConfig.Builder()
-            .setConnectTimeout(20)
-            .setWebSocketTimeout(10);
+    public void testAPIClientBuilderWithParams() throws IOException {
 
-        UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
-            .setKey("key")
-            .setSecret("secret")
-            .setClientConfigBuilder(configBuilder)
-            .build();
+        DefaultAsyncHttpClientConfig.Builder defualtClientBuilder = new DefaultAsyncHttpClientConfig.Builder()
+                .setConnectTimeout(20);
+
+        AsyncRequestClient client = AsyncRequestClient.newBuilder()
+                .setClientConfigBuilder(defualtClientBuilder)
+                .build();
+
+        assertEquals(20, client.getClientConfig().getConnectTimeout());
 
-        assertEquals(20, client.getClient().getConfig().getConnectTimeout());
-        assertEquals(10, client.getClient().getConfig().getWebSocketTimeout());
         client.close();
     }
 
@@ -438,10 +437,8 @@ public class UrbanAirshipClientTest {
     @Test
     @SuppressWarnings("unchecked")
     public void testRetryIsNonBlocking() throws Exception {
-        client = UrbanAirshipClient.newBuilder()
+        asyncRequestClient = AsyncRequestClient.newBuilder()
             .setBaseUri("http://localhost:8080")
-            .setKey("key")
-            .setSecret("secret")
             .setMaxRetries(1000)
             .build();
 
@@ -493,10 +490,8 @@ public class UrbanAirshipClientTest {
     @Test
     @SuppressWarnings("unchecked")
     public void testClose() throws Exception {
-        client = UrbanAirshipClient.newBuilder()
+        asyncRequestClient = AsyncRequestClient.newBuilder()
             .setBaseUri("http://localhost:8080")
-            .setKey("key")
-            .setSecret("secret")
             .setMaxRetries(1000)
             .build();
 
@@ -514,7 +509,11 @@ public class UrbanAirshipClientTest {
         scheduledExecutorService.schedule(new Runnable() {
             @Override
             public void run() {
-                client.close();
+                try {
+                    client.close();
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
 
                 // Test that closing the client cancels retrying requests.
                 assertTrue(future.isCancelled());
@@ -544,7 +543,7 @@ public class UrbanAirshipClientTest {
                 .withStatus(401)));
 
         final CountDownLatch latch = new CountDownLatch(1);
-        client.executeAsync(PushRequest.newRequest(payload), new ResponseCallback() {
+        asyncRequestClient.executeAsync(PushRequest.newRequest(payload), new ResponseCallback() {
             @Override
             public void completed(Response response) {
             }
@@ -565,7 +564,7 @@ public class UrbanAirshipClientTest {
                     errorLocation.getLine().equals(47));
                 latch.countDown();
             }
-        });
+        }, new HashMap<String, String>());
 
         latch.await();
     }
@@ -588,7 +587,7 @@ public class UrbanAirshipClientTest {
                 .withStatus(503)));
 
         final CountDownLatch latch = new CountDownLatch(1);
-        client.executeAsync(PushRequest.newRequest(payload), new ResponseCallback() {
+        asyncRequestClient.executeAsync(PushRequest.newRequest(payload), new ResponseCallback() {
             @Override
             public void completed(Response response) {
             }
@@ -598,7 +597,7 @@ public class UrbanAirshipClientTest {
                 assertTrue(throwable instanceof ServerException);
                 latch.countDown();
             }
-        });
+        }, new HashMap<String, String>());
 
         latch.await();
     }
@@ -621,9 +620,11 @@ public class UrbanAirshipClientTest {
                         .withStatus(500)));
 
         final CountDownLatch latch = new CountDownLatch(1);
+
         client.executeAsync(PushRequest.newRequest(payload), new ResponseCallback() {
             @Override
             public void completed(Response response) {
+
             }
 
             @Override
@@ -654,6 +655,7 @@ public class UrbanAirshipClientTest {
                         .withStatus(500)));
 
         final CountDownLatch latch = new CountDownLatch(1);
+
         client.executeAsync(PushRequest.newRequest(payload), new ResponseCallback() {
             @Override
             public void completed(Response response) {
@@ -705,18 +707,18 @@ public class UrbanAirshipClientTest {
     @Test
     @SuppressWarnings("unchecked")
     public void testPushWithProxyClient() throws Exception {
+        Realm localRealm = new Realm.Builder("user", "password")
+                .setScheme(Realm.AuthScheme.BASIC)
+                .build();
+
+        ProxyServer proxyServer = new ProxyServer.Builder("localhost", 8080)
+                .setRealm(localRealm)
+                .build();
 
         // Setup a client and a push payload
-        UrbanAirshipClient proxyClient = UrbanAirshipClient.newBuilder()
+        AsyncRequestClient proxyClient = AsyncRequestClient.newBuilder()
             .setBaseUri("http://localhost:8080")
-            .setKey("key")
-            .setSecret("secret")
-            .setProxyInfo(ProxyInfo.newBuilder()
-                .setHost("localhost")
-                .setPort(8080)
-                .setPrincipal("user")
-                .setPassword("password")
-                .build())
+            .setProxyServer(proxyServer)
             .build();
 
         PushPayload payload = PushPayload.newBuilder()
@@ -734,7 +736,7 @@ public class UrbanAirshipClientTest {
                     .withStatus(201)
             ));
 
-        Response<PushResponse> response = proxyClient.execute(PushRequest.newRequest(payload));
+        Response<PushResponse> response = client.execute(PushRequest.newRequest(payload));
 
         // Verify components of the underlying HttpRequest
         verify(postRequestedFor(urlEqualTo("/api/push/"))
diff --git a/src/test/java/com/urbanairship/api/customevents/CustomEventRequestTest.java b/src/test/java/com/urbanairship/api/customevents/CustomEventRequestTest.java
new file mode 100644
index 0000000..9d0cf5a
--- /dev/null
+++ b/src/test/java/com/urbanairship/api/customevents/CustomEventRequestTest.java
@@ -0,0 +1,89 @@
+package com.urbanairship.api.customevents;
+
+import com.google.common.net.HttpHeaders;
+import com.urbanairship.api.client.Request;
+import com.urbanairship.api.client.ResponseParser;
+import com.urbanairship.api.customevents.model.CustomEventBody;
+import com.urbanairship.api.customevents.model.CustomEventChannelType;
+import com.urbanairship.api.customevents.model.CustomEventPayload;
+import com.urbanairship.api.customevents.model.CustomEventResponse;
+import com.urbanairship.api.customevents.model.CustomEventUser;
+import com.urbanairship.api.push.parse.PushObjectMapper;
+import org.apache.http.entity.ContentType;
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeZone;
+import org.junit.Test;
+
+import java.io.IOException;
+import java.net.URI;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.junit.Assert.assertEquals;
+
+public class CustomEventRequestTest {
+    CustomEventUser customEventUser = CustomEventUser.newBuilder()
+            .setCustomEventChannelType(CustomEventChannelType.ANDROID_CHANNEL)
+            .setChannel("channel")
+            .build();
+
+    CustomEventBody customEventBody = CustomEventBody.newBuilder()
+            .setName("purchased")
+            .setSessionId("sessionId")
+            .build();
+
+    DateTime occured = new DateTime(2015, 5, 2, 2, 31, 22, DateTimeZone.UTC);
+
+    CustomEventPayload customEventPayload = CustomEventPayload.newBuilder()
+            .setCustomEventBody(customEventBody)
+            .setCustomEventUser(customEventUser)
+            .setOccurred(occured)
+            .build();
+
+    CustomEventRequest customEventRequest = CustomEventRequest.newRequest(customEventPayload);
+
+    @Test
+    public void testHeaders() throws Exception {
+        Map<String, String> headers = new HashMap<String, String>();
+        headers.put(HttpHeaders.CONTENT_TYPE, Request.CONTENT_TYPE_JSON);
+        headers.put(HttpHeaders.ACCEPT, Request.UA_VERSION_JSON);
+
+        assertEquals(customEventRequest.getRequestHeaders(), headers);
+    }
+
+    @Test
+    public void testBody() throws Exception {
+        assertEquals(customEventRequest.getRequestBody(), customEventPayload.toJSON());
+    }
+
+    @Test
+    public void testMethod() throws Exception {
+        assertEquals(customEventRequest.getHttpMethod(), Request.HttpMethod.POST);
+    }
+
+    @Test
+    public void testContentType() throws Exception {
+        assertEquals(customEventRequest.getContentType(), ContentType.APPLICATION_JSON);
+    }
+
+    @Test
+    public void testURI() throws Exception {
+        URI baseURI = URI.create("https://go.urbanairship.com");
+
+        URI expextedURI = URI.create("https://go.urbanairship.com/api/custom-events/");
+        assertEquals(customEventRequest.getUri(baseURI), expextedURI);
+    }
+
+    @Test
+    public void testCustomEventParser() throws Exception {
+        ResponseParser responseParser = new ResponseParser<CustomEventResponse>() {
+            @Override
+            public CustomEventResponse parse(String response) throws IOException {
+                return PushObjectMapper.getInstance().readValue(response, CustomEventResponse.class);
+            }
+        };
+
+        String response = "{\"ok\" : true,\"operation_id\" : \"df6a6b50\"}";
+        assertEquals(customEventRequest.getResponseParser().parse(response), responseParser.parse(response));
+    }
+}
diff --git a/src/test/java/com/urbanairship/api/customevents/model/CustomEventPayloadTest.java b/src/test/java/com/urbanairship/api/customevents/model/CustomEventPayloadTest.java
new file mode 100644
index 0000000..c2c2841
--- /dev/null
+++ b/src/test/java/com/urbanairship/api/customevents/model/CustomEventPayloadTest.java
@@ -0,0 +1,65 @@
+package com.urbanairship.api.customevents.model;
+
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeZone;
+import org.junit.Test;
+
+import java.math.BigDecimal;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+public class CustomEventPayloadTest {
+
+    @Test
+    public void testBuilder() {
+        CustomEventUser customEventUser = CustomEventUser.newBuilder()
+                .setCustomEventChannelType(CustomEventChannelType.ANDROID_CHANNEL)
+                .setChannel("e393d28e-23b2-4a22-9ace-dc539a5b07a8")
+                .build();
+
+        Map<String, String> properties = new HashMap<String, String>();
+        properties.put("category", "mens shoes");
+        properties.put("id", "pid-11046546");
+        properties.put("description", "sky high");
+        properties.put("brand", "victory");
+
+        CustomEventBody customEventBody = CustomEventBody.newBuilder()
+                .setName("purchased")
+                .setValue(new BigDecimal(120.49))
+                .setTransaction("886f53d4-3e0f-46d7-930e-c2792dac6e0a")
+                .setInteractionId("your.store/us/en_us/pd/shoe/pid-11046546/pgid-10978234")
+                .setInteractionType("url")
+                .addAllPropertyEntries(properties)
+                .setSessionId("22404b07-3f8f-4e42-a4ff-a996c18fa9f1")
+                .build();
+
+        DateTime occurred = new DateTime(2015, 5, 2, 2, 31, 22, DateTimeZone.UTC);
+
+        CustomEventPayload customEventPayload = CustomEventPayload.newBuilder()
+                .setCustomEventBody(customEventBody)
+                .setCustomEventUser(customEventUser)
+                .setOccurred(occurred)
+                .build();
+
+
+        assertTrue(customEventPayload.getCustomEventBody().getProperties().isPresent());
+        assertEquals(4, customEventPayload.getCustomEventBody().getProperties().get().size());
+        assertTrue(customEventPayload.getCustomEventBody().getProperties().get().containsKey("description"));
+        assertEquals("victory", customEventPayload.getCustomEventBody().getProperties().get().get("brand"));
+
+        assertEquals("purchased", customEventPayload.getCustomEventBody().getName());
+        assertEquals(new BigDecimal(120.49), customEventPayload.getCustomEventBody().getValue().get());
+        assertEquals("886f53d4-3e0f-46d7-930e-c2792dac6e0a", customEventPayload.getCustomEventBody().getTransaction().get());
+        assertEquals("your.store/us/en_us/pd/shoe/pid-11046546/pgid-10978234", customEventPayload.getCustomEventBody().getInteractionId().get());
+        assertEquals("url", customEventPayload.getCustomEventBody().getInteractionType().get());
+        assertEquals("22404b07-3f8f-4e42-a4ff-a996c18fa9f1", customEventPayload.getCustomEventBody().getSessionId());
+
+        assertEquals("e393d28e-23b2-4a22-9ace-dc539a5b07a8", customEventPayload.getCustomEventUser().getChannel());
+        assertEquals(CustomEventChannelType.ANDROID_CHANNEL, customEventPayload.getCustomEventUser().getChannelType());
+
+        assertEquals(occurred, customEventPayload.getOccurred());
+    }
+}
diff --git a/src/test/java/com/urbanairship/api/customevents/parse/CustomEventPayloadSerializerTest.java b/src/test/java/com/urbanairship/api/customevents/parse/CustomEventPayloadSerializerTest.java
new file mode 100644
index 0000000..4f0e9d0
--- /dev/null
+++ b/src/test/java/com/urbanairship/api/customevents/parse/CustomEventPayloadSerializerTest.java
@@ -0,0 +1,65 @@
+package com.urbanairship.api.customevents.parse;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.urbanairship.api.customevents.model.CustomEventPayload;
+import com.urbanairship.api.customevents.model.CustomEventBody;
+import com.urbanairship.api.customevents.model.CustomEventChannelType;
+import com.urbanairship.api.customevents.model.CustomEventUser;
+import com.urbanairship.api.push.parse.PushObjectMapper;
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeZone;
+import org.junit.Test;
+
+import java.io.IOException;
+import java.math.BigDecimal;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.junit.Assert.assertEquals;
+
+public class CustomEventPayloadSerializerTest {
+
+    private static final ObjectMapper MAPPER = PushObjectMapper.getInstance();
+
+    @Test
+    public void testFullPayload() throws IOException {
+        CustomEventUser customEventUser = CustomEventUser.newBuilder()
+                .setCustomEventChannelType(CustomEventChannelType.ANDROID_CHANNEL)
+                .setChannel("e393d28e-23b2-4a22-9ace-dc539a5b07a8")
+                .build();
+
+        Map<String, String> properties = new HashMap<String, String>();
+        properties.put("category", "mens shoes");
+        properties.put("id", "pid-11046546");
+        properties.put("description", "sky high");
+        properties.put("brand", "victory");
+
+        CustomEventBody customEventBody = CustomEventBody.newBuilder()
+                .setName("purchased")
+                .setValue(new BigDecimal(120.49))
+                .setTransaction("886f53d4-3e0f-46d7-930e-c2792dac6e0a")
+                .setInteractionId("your.store/us/en_us/pd/shoe/pid-11046546/pgid-10978234")
+                .setInteractionType("url")
+                .addAllPropertyEntries(properties)
+                .setSessionId("22404b07-3f8f-4e42-a4ff-a996c18fa9f1")
+                .build();
+
+        DateTime occured = new DateTime(2015, 5, 2, 2, 31, 22, DateTimeZone.UTC);
+
+        CustomEventPayload customEventPayload = CustomEventPayload.newBuilder()
+                .setCustomEventBody(customEventBody)
+                .setCustomEventUser(customEventUser)
+                .setOccurred(occured)
+                .build();
+
+        String json = MAPPER.writeValueAsString(customEventPayload);
+        String expected = "{\"occurred\": \"2015-05-02T02:31:22\",\"user\": {\"android_channel\": \"e393d28e-23b2-4a22-9ace-dc539a5b07a8\"},\"body\": {\"name\": \"purchased\",\"value\": 120.49,\"transaction\": \"886f53d4-3e0f-46d7-930e-c2792dac6e0a\",\"interaction_id\": \"your.store/us/en_us/pd/shoe/pid-11046546/pgid-10978234\",\"interaction_type\": \"url\",\"properties\": {\"category\": \"mens shoes\",\"id\": \"pid-11046546\",\"description\": \"sky high\",\"brand\": \"victory\"},\"session_id\": \"22404b07-3f8f-4e42-a4ff-a996c18fa9f1\"}}";
+
+        JsonNode jsonFromObject = MAPPER.readTree(json);
+        JsonNode jsonFromString = MAPPER.readTree(expected);
+
+
+        assertEquals(jsonFromString, jsonFromObject);
+    }
+}
diff --git a/src/test/java/com/urbanairship/api/customevents/parse/CustomEventUserSerializerTest.java b/src/test/java/com/urbanairship/api/customevents/parse/CustomEventUserSerializerTest.java
new file mode 100644
index 0000000..2930b57
--- /dev/null
+++ b/src/test/java/com/urbanairship/api/customevents/parse/CustomEventUserSerializerTest.java
@@ -0,0 +1,45 @@
+package com.urbanairship.api.customevents.parse;
+
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.urbanairship.api.customevents.model.CustomEventChannelType;
+import com.urbanairship.api.customevents.model.CustomEventUser;
+import com.urbanairship.api.push.parse.PushObjectMapper;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+
+public class CustomEventUserSerializerTest {
+
+    private static final ObjectMapper MAPPER = PushObjectMapper.getInstance();
+
+    @Test
+    public void testChannelTypes() throws Exception {
+        CustomEventUser iosUser = CustomEventUser.newBuilder()
+                .setCustomEventChannelType(CustomEventChannelType.IOS_CHANNEL)
+                .setChannel("iOSChannel")
+                .build();
+
+        CustomEventUser androidUser = CustomEventUser.newBuilder()
+                .setCustomEventChannelType(CustomEventChannelType.ANDROID_CHANNEL)
+                .setChannel("androidChannel")
+                .build();
+
+        CustomEventUser amazonUser = CustomEventUser.newBuilder()
+                .setCustomEventChannelType(CustomEventChannelType.AMAZON_CHANNEL)
+                .setChannel("amazonChannel")
+                .build();
+
+        String iosJson = MAPPER.writeValueAsString(iosUser);
+        String iosExpected = "{\"ios_channel\":\"iOSChannel\"}";
+        assertEquals(iosJson, iosExpected);
+
+        String androidJson = MAPPER.writeValueAsString(androidUser);
+        String androidExpected = "{\"android_channel\":\"androidChannel\"}";
+        assertEquals(androidJson, androidExpected);
+
+        String amazonJson = MAPPER.writeValueAsString(amazonUser);
+        String amazonExpected = "{\"amazon_channel\":\"amazonChannel\"}";
+        assertEquals(amazonJson, amazonExpected);
+    }
+}
diff --git a/src/test/java/com/urbanairship/api/experiments/ExperimentDeleteRequestTest.java b/src/test/java/com/urbanairship/api/experiments/ExperimentDeleteRequestTest.java
new file mode 100644
index 0000000..3eb6ce9
--- /dev/null
+++ b/src/test/java/com/urbanairship/api/experiments/ExperimentDeleteRequestTest.java
@@ -0,0 +1,61 @@
+package com.urbanairship.api.experiments;
+
+import com.urbanairship.api.client.ResponseParser;
+import org.apache.http.HttpHeaders;
+import com.urbanairship.api.client.Request;
+import org.junit.Test;
+
+import java.io.IOException;
+import java.net.URI;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.junit.Assert.assertEquals;
+
+public class ExperimentDeleteRequestTest {
+
+    ExperimentDeleteRequest experimentDeleteRequest = ExperimentDeleteRequest.newRequest("id");
+
+    @Test
+    public void testContentType() throws Exception {
+        assertEquals(experimentDeleteRequest.getContentType(), null);
+    }
+
+    @Test
+    public void testMethod() throws Exception {
+        assertEquals(experimentDeleteRequest.getHttpMethod(), Request.HttpMethod.DELETE);
+    }
+
+    @Test
+    public void testBody() throws Exception {
+        assertEquals(experimentDeleteRequest.getRequestBody(), null);
+    }
+
+    @Test
+    public void testHeaders() throws Exception {
+        Map<String, String> headers = new HashMap<String, String>();
+        headers.put(HttpHeaders.ACCEPT, Request.UA_VERSION_JSON);
+        headers.put(HttpHeaders.CONTENT_TYPE, Request.CONTENT_TYPE_JSON);
+        assertEquals(experimentDeleteRequest.getRequestHeaders(), headers);
+    }
+
+    @Test
+    public void testURI() throws Exception {
+        URI baseURI = URI.create("https://go.urbanairship.com");
+
+        URI expectedURI = URI.create("https://go.urbanairship.com/api/experiments/scheduled/id");
+        assertEquals(experimentDeleteRequest.getUri(baseURI), expectedURI);
+    }
+
+    @Test
+    public void testExperimentParser() throws Exception {
+        ResponseParser responseParser = new ResponseParser<String>() {
+            @Override
+            public String parse(String response) throws IOException {
+                return response;
+            }
+        };
+
+        assertEquals(experimentDeleteRequest.getResponseParser().parse(null), responseParser.parse(null));
+    }
+}
diff --git a/src/test/java/com/urbanairship/api/experiments/ExperimentRequestTest.java b/src/test/java/com/urbanairship/api/experiments/ExperimentRequestTest.java
index 3bc7e49..31502b0 100644
--- a/src/test/java/com/urbanairship/api/experiments/ExperimentRequestTest.java
+++ b/src/test/java/com/urbanairship/api/experiments/ExperimentRequestTest.java
@@ -1,5 +1,8 @@
 package com.urbanairship.api.experiments;
 
+import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.client.ResponseParser;
 import com.urbanairship.api.experiments.model.Experiment;
@@ -13,8 +16,6 @@ import com.urbanairship.api.push.model.audience.Selectors;
 import com.urbanairship.api.push.model.notification.Notification;
 import org.apache.http.HttpHeaders;
 import org.apache.http.entity.ContentType;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.map.annotate.JsonSerialize;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -27,7 +28,7 @@ import static junit.framework.Assert.assertEquals;
 
 public class ExperimentRequestTest {
 
-    private final static ObjectMapper mapper = ExperimentObjectMapper.getInstance().setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL);
+    private final static ObjectMapper mapper = ExperimentObjectMapper.getInstance().setSerializationInclusion(JsonInclude.Include.NON_NULL);
     private final static String EXPERIMENT_PATH = "/api/experiments/";
 
     ExperimentRequest createRequest;
diff --git a/src/test/java/com/urbanairship/api/experiments/parse/ExperimentDeserializerTest.java b/src/test/java/com/urbanairship/api/experiments/parse/ExperimentDeserializerTest.java
index a23370b..ac42cda 100644
--- a/src/test/java/com/urbanairship/api/experiments/parse/ExperimentDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/experiments/parse/ExperimentDeserializerTest.java
@@ -1,11 +1,11 @@
 package com.urbanairship.api.experiments.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.experiments.model.Experiment;
 import com.urbanairship.api.push.model.DeviceType;
 import com.urbanairship.api.push.model.DeviceTypeData;
 import com.urbanairship.api.push.model.audience.Selectors;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
diff --git a/src/test/java/com/urbanairship/api/experiments/parse/ExperimentResponseDeserializerTest.java b/src/test/java/com/urbanairship/api/experiments/parse/ExperimentResponseDeserializerTest.java
index 33d614f..6acdc1e 100644
--- a/src/test/java/com/urbanairship/api/experiments/parse/ExperimentResponseDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/experiments/parse/ExperimentResponseDeserializerTest.java
@@ -1,7 +1,7 @@
 package com.urbanairship.api.experiments.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.experiments.model.ExperimentResponse;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.*;
diff --git a/src/test/java/com/urbanairship/api/experiments/parse/ExperimentSerializerTest.java b/src/test/java/com/urbanairship/api/experiments/parse/ExperimentSerializerTest.java
index 8115be3..6c80eee 100644
--- a/src/test/java/com/urbanairship/api/experiments/parse/ExperimentSerializerTest.java
+++ b/src/test/java/com/urbanairship/api/experiments/parse/ExperimentSerializerTest.java
@@ -1,5 +1,6 @@
 package com.urbanairship.api.experiments.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.experiments.model.Experiment;
 import com.urbanairship.api.experiments.model.VariantPushPayload;
 import com.urbanairship.api.experiments.model.Variant;
@@ -7,8 +8,6 @@ import com.urbanairship.api.push.model.DeviceType;
 import com.urbanairship.api.push.model.DeviceTypeData;
 import com.urbanairship.api.push.model.audience.Selectors;
 import com.urbanairship.api.push.model.notification.Notification;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static junit.framework.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/experiments/parse/VariantDeserializerTest.java b/src/test/java/com/urbanairship/api/experiments/parse/VariantDeserializerTest.java
index 7ee196e..60e089f 100644
--- a/src/test/java/com/urbanairship/api/experiments/parse/VariantDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/experiments/parse/VariantDeserializerTest.java
@@ -1,10 +1,8 @@
 package com.urbanairship.api.experiments.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.common.parse.APIParsingException;
-import com.urbanairship.api.common.parse.DateFormats;
 import com.urbanairship.api.experiments.model.Variant;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.joda.time.DateTime;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
diff --git a/src/test/java/com/urbanairship/api/experiments/parse/VariantPushPayloadDeserializerTest.java b/src/test/java/com/urbanairship/api/experiments/parse/VariantPushPayloadDeserializerTest.java
index 4036784..7f61793 100644
--- a/src/test/java/com/urbanairship/api/experiments/parse/VariantPushPayloadDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/experiments/parse/VariantPushPayloadDeserializerTest.java
@@ -1,8 +1,8 @@
 package com.urbanairship.api.experiments.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.experiments.model.VariantPushPayload;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
diff --git a/src/test/java/com/urbanairship/api/experiments/parse/VariantPushPayloadSerializerTest.java b/src/test/java/com/urbanairship/api/experiments/parse/VariantPushPayloadSerializerTest.java
index bd18eae..33c011b 100644
--- a/src/test/java/com/urbanairship/api/experiments/parse/VariantPushPayloadSerializerTest.java
+++ b/src/test/java/com/urbanairship/api/experiments/parse/VariantPushPayloadSerializerTest.java
@@ -1,10 +1,9 @@
 package com.urbanairship.api.experiments.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.experiments.model.VariantPushPayload;
 import com.urbanairship.api.push.model.InApp;
 import com.urbanairship.api.push.model.notification.Notification;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static junit.framework.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/experiments/parse/VariantSerializerTest.java b/src/test/java/com/urbanairship/api/experiments/parse/VariantSerializerTest.java
index e220074..a588e31 100644
--- a/src/test/java/com/urbanairship/api/experiments/parse/VariantSerializerTest.java
+++ b/src/test/java/com/urbanairship/api/experiments/parse/VariantSerializerTest.java
@@ -1,12 +1,11 @@
 package com.urbanairship.api.experiments.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.experiments.model.VariantPushPayload;
 import com.urbanairship.api.experiments.model.Variant;
 import com.urbanairship.api.push.model.notification.Notification;
 import com.urbanairship.api.schedule.model.Schedule;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.joda.time.DateTime;
-import org.joda.time.DateTimeZone;
 import org.junit.Test;
 
 import static junit.framework.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/location/LocationRequestTest.java b/src/test/java/com/urbanairship/api/location/LocationRequestTest.java
index 6037743..5b9327e 100644
--- a/src/test/java/com/urbanairship/api/location/LocationRequestTest.java
+++ b/src/test/java/com/urbanairship/api/location/LocationRequestTest.java
@@ -1,12 +1,12 @@
 package com.urbanairship.api.location;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.net.HttpHeaders;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.client.ResponseParser;
 import com.urbanairship.api.location.model.LocationResponse;
 import com.urbanairship.api.location.parse.LocationObjectMapper;
 import org.apache.http.entity.ContentType;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import java.io.IOException;
diff --git a/src/test/java/com/urbanairship/api/location/model/LocationResponseTest.java b/src/test/java/com/urbanairship/api/location/model/LocationResponseTest.java
index adb66bb..95b8589 100644
--- a/src/test/java/com/urbanairship/api/location/model/LocationResponseTest.java
+++ b/src/test/java/com/urbanairship/api/location/model/LocationResponseTest.java
@@ -1,8 +1,8 @@
 package com.urbanairship.api.location.model;
 
 
-import org.codehaus.jackson.node.JsonNodeFactory;
-import org.codehaus.jackson.node.ObjectNode;
+import com.fasterxml.jackson.databind.node.JsonNodeFactory;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 import org.junit.Test;
 
 import java.util.Arrays;
diff --git a/src/test/java/com/urbanairship/api/location/model/LocationViewTest.java b/src/test/java/com/urbanairship/api/location/model/LocationViewTest.java
index b9078a4..b964ad2 100644
--- a/src/test/java/com/urbanairship/api/location/model/LocationViewTest.java
+++ b/src/test/java/com/urbanairship/api/location/model/LocationViewTest.java
@@ -1,7 +1,7 @@
 package com.urbanairship.api.location.model;
 
-import org.codehaus.jackson.node.JsonNodeFactory;
-import org.codehaus.jackson.node.ObjectNode;
+import com.fasterxml.jackson.databind.node.JsonNodeFactory;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 import org.junit.Test;
 
 import java.util.ArrayList;
diff --git a/src/test/java/com/urbanairship/api/location/parse/LocationResponseViewDeserializerTest.java b/src/test/java/com/urbanairship/api/location/parse/LocationResponseViewDeserializerTest.java
index 797a327..7665839 100644
--- a/src/test/java/com/urbanairship/api/location/parse/LocationResponseViewDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/location/parse/LocationResponseViewDeserializerTest.java
@@ -1,10 +1,10 @@
 package com.urbanairship.api.location.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.location.model.BoundedBox;
 import com.urbanairship.api.location.model.LocationResponse;
 import com.urbanairship.api.location.model.LocationView;
 import com.urbanairship.api.location.model.Point;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/location/parse/LocationViewDeserializerTest.java b/src/test/java/com/urbanairship/api/location/parse/LocationViewDeserializerTest.java
index 59e63c6..d136f32 100644
--- a/src/test/java/com/urbanairship/api/location/parse/LocationViewDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/location/parse/LocationViewDeserializerTest.java
@@ -1,9 +1,9 @@
 package com.urbanairship.api.location.parse;
 
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.location.model.LocationView;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/nameduser/NamedUserListingRequestTest.java b/src/test/java/com/urbanairship/api/nameduser/NamedUserListingRequestTest.java
index 3511074..21f164d 100644
--- a/src/test/java/com/urbanairship/api/nameduser/NamedUserListingRequestTest.java
+++ b/src/test/java/com/urbanairship/api/nameduser/NamedUserListingRequestTest.java
@@ -1,12 +1,12 @@
 package com.urbanairship.api.nameduser;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.net.HttpHeaders;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.client.ResponseParser;
 import com.urbanairship.api.nameduser.model.NamedUserListingResponse;
 import com.urbanairship.api.nameduser.parse.NamedUserObjectMapper;
 import org.apache.http.entity.ContentType;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import java.io.IOException;
diff --git a/src/test/java/com/urbanairship/api/nameduser/NamedUserListingResponseTest.java b/src/test/java/com/urbanairship/api/nameduser/NamedUserListingResponseTest.java
index 26f30f7..cde6ddb 100644
--- a/src/test/java/com/urbanairship/api/nameduser/NamedUserListingResponseTest.java
+++ b/src/test/java/com/urbanairship/api/nameduser/NamedUserListingResponseTest.java
@@ -1,12 +1,12 @@
 package com.urbanairship.api.nameduser;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.ImmutableSet;
 import com.urbanairship.api.channel.model.ChannelType;
 import com.urbanairship.api.channel.model.ChannelView;
 import com.urbanairship.api.nameduser.model.NamedUserListingResponse;
 import com.urbanairship.api.nameduser.model.NamedUserView;
 import com.urbanairship.api.nameduser.parse.NamedUserObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.joda.time.DateTime;
 import org.junit.Test;
 
diff --git a/src/test/java/com/urbanairship/api/nameduser/NamedUserRequestTest.java b/src/test/java/com/urbanairship/api/nameduser/NamedUserRequestTest.java
index 900b766..ee989eb 100644
--- a/src/test/java/com/urbanairship/api/nameduser/NamedUserRequestTest.java
+++ b/src/test/java/com/urbanairship/api/nameduser/NamedUserRequestTest.java
@@ -1,12 +1,12 @@
 package com.urbanairship.api.nameduser;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.net.HttpHeaders;
 import com.urbanairship.api.channel.model.ChannelType;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.nameduser.parse.NamedUserObjectMapper;
 import org.apache.commons.lang.RandomStringUtils;
 import org.apache.http.entity.ContentType;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import java.net.URI;
@@ -91,5 +91,4 @@ public class NamedUserRequestTest {
         assertEquals(response, associationRequest.getResponseParser().parse(response));
         assertEquals(response, disassociationRequest.getResponseParser().parse(response));
     }
-
 }
diff --git a/src/test/java/com/urbanairship/api/nameduser/NamedUserTagRequestTest.java b/src/test/java/com/urbanairship/api/nameduser/NamedUserTagRequestTest.java
index 1e9fb22..a9c73fe 100644
--- a/src/test/java/com/urbanairship/api/nameduser/NamedUserTagRequestTest.java
+++ b/src/test/java/com/urbanairship/api/nameduser/NamedUserTagRequestTest.java
@@ -1,13 +1,13 @@
 package com.urbanairship.api.nameduser;
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.net.HttpHeaders;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.nameduser.parse.NamedUserObjectMapper;
 import org.apache.commons.lang.RandomStringUtils;
 import org.apache.http.entity.ContentType;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Before;
 import org.junit.Test;
 
diff --git a/src/test/java/com/urbanairship/api/nameduser/NamedUserViewTest.java b/src/test/java/com/urbanairship/api/nameduser/NamedUserViewTest.java
index ca4268b..3975fdd 100644
--- a/src/test/java/com/urbanairship/api/nameduser/NamedUserViewTest.java
+++ b/src/test/java/com/urbanairship/api/nameduser/NamedUserViewTest.java
@@ -1,5 +1,6 @@
 package com.urbanairship.api.nameduser;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Sets;
@@ -7,7 +8,6 @@ import com.urbanairship.api.channel.model.ChannelType;
 import com.urbanairship.api.channel.model.ChannelView;
 import com.urbanairship.api.nameduser.model.NamedUserView;
 import com.urbanairship.api.nameduser.parse.NamedUserObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Assert;
 import org.junit.Test;
 
diff --git a/src/test/java/com/urbanairship/api/push/model/CampaignsTest.java b/src/test/java/com/urbanairship/api/push/model/CampaignsTest.java
new file mode 100644
index 0000000..a374167
--- /dev/null
+++ b/src/test/java/com/urbanairship/api/push/model/CampaignsTest.java
@@ -0,0 +1,28 @@
+package com.urbanairship.api.push.model;
+
+import org.junit.Test;
+
+import java.util.Arrays;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+
+public class CampaignsTest {
+
+    @Test
+    public void testCampaigns() {
+
+        List<String> categoryList = Arrays.asList("that", "other");
+        List<String> expected = Arrays.asList("this", "that", "other");
+
+        Campaigns campaigns = Campaigns.newBuilder()
+                .addCategory("this")
+                .addAllCategories(categoryList)
+                .build();
+
+        assertNotNull(campaigns);
+        assertEquals(campaigns.getCategories(), expected);
+        assertEquals(campaigns.getCategories().size(), 3);
+    }
+}
diff --git a/src/test/java/com/urbanairship/api/push/model/audience/location/SegmentDefinitionDeserializerTest.java b/src/test/java/com/urbanairship/api/push/model/audience/location/SegmentDefinitionDeserializerTest.java
index 37c34d2..6ccb677 100644
--- a/src/test/java/com/urbanairship/api/push/model/audience/location/SegmentDefinitionDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/model/audience/location/SegmentDefinitionDeserializerTest.java
@@ -1,11 +1,11 @@
 package com.urbanairship.api.push.model.audience.location;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.push.model.audience.Selector;
 import com.urbanairship.api.push.model.audience.SelectorType;
 import com.urbanairship.api.push.model.audience.ValueSelector;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/push/model/notification/android/WearableTest.java b/src/test/java/com/urbanairship/api/push/model/notification/android/WearableTest.java
index 729f7a2..7790416 100644
--- a/src/test/java/com/urbanairship/api/push/model/notification/android/WearableTest.java
+++ b/src/test/java/com/urbanairship/api/push/model/notification/android/WearableTest.java
@@ -1,5 +1,6 @@
 package com.urbanairship.api.push.model.notification.android;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.push.model.notification.Interactive;
 import com.urbanairship.api.push.model.notification.actions.Actions;
@@ -7,7 +8,6 @@ import com.urbanairship.api.push.model.notification.actions.AddTagAction;
 import com.urbanairship.api.push.model.notification.actions.RemoveTagAction;
 import com.urbanairship.api.push.model.notification.actions.TagActionData;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import java.util.List;
diff --git a/src/test/java/com/urbanairship/api/push/model/notification/open/OpenPayloadTest.java b/src/test/java/com/urbanairship/api/push/model/notification/open/OpenPayloadTest.java
new file mode 100644
index 0000000..0392925
--- /dev/null
+++ b/src/test/java/com/urbanairship/api/push/model/notification/open/OpenPayloadTest.java
@@ -0,0 +1,39 @@
+package com.urbanairship.api.push.model.notification.open;
+
+import com.google.common.collect.ImmutableMap;
+import com.urbanairship.api.push.model.DeviceType;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+public class OpenPayloadTest {
+
+    @Test
+    public void testBuilder() {
+        DeviceType deviceTypeEmail = DeviceType.open("email");
+
+        ImmutableMap<String, String> extras = ImmutableMap.<String, String>builder()
+                .put("key", "value")
+                .put("second_key", "second_value")
+                .build();
+
+        OpenPayload openPayloadEmail = OpenPayload.newBuilder()
+                .setAlert("alert")
+                .setExtras(extras)
+                .setTitle("title")
+                .setMediaAttachment("example.com")
+                .setSummary("summary")
+                .setDeviceType(deviceTypeEmail)
+                .build();
+
+        assertTrue(openPayloadEmail.getExtras().isPresent());
+
+        assertEquals(openPayloadEmail.getExtras().get().get("key"), "value");
+        assertEquals(openPayloadEmail.getExtras().get().get("second_key"), "second_value");
+        assertEquals(openPayloadEmail.getAlert().get(), "alert");
+        assertEquals(openPayloadEmail.getTitle().get(), "title");
+        assertEquals(openPayloadEmail.getSummary().get(), "summary");
+        assertEquals(openPayloadEmail.getDeviceType(), deviceTypeEmail);
+    }
+}
diff --git a/src/test/java/com/urbanairship/api/push/model/notification/web/WebSettingsDevicePayloadTest.java b/src/test/java/com/urbanairship/api/push/model/notification/web/WebSettingsDevicePayloadTest.java
index 3974d89..07a0f71 100644
--- a/src/test/java/com/urbanairship/api/push/model/notification/web/WebSettingsDevicePayloadTest.java
+++ b/src/test/java/com/urbanairship/api/push/model/notification/web/WebSettingsDevicePayloadTest.java
@@ -19,6 +19,7 @@ public class WebSettingsDevicePayloadTest {
                 .addExtraEntry("key", "value")
                 .addExtraEntry("key2", "value2")
                 .setWebIcon(webIcon)
+                .setRequireInteraction(true)
                 .build();
 
         assertTrue(m.getExtra().isPresent());
@@ -37,6 +38,9 @@ public class WebSettingsDevicePayloadTest {
 
         assertTrue(m.getWebIcon().isPresent());
         assertEquals(m.getWebIcon().get(), webIcon);
+
+        assertTrue(m.getRequireInteraction().isPresent());
+        assertEquals(true, m.getRequireInteraction().get());
     }
 }
 
diff --git a/src/test/java/com/urbanairship/api/push/parse/CampaignsSerializerTest.java b/src/test/java/com/urbanairship/api/push/parse/CampaignsSerializerTest.java
new file mode 100644
index 0000000..3dc4125
--- /dev/null
+++ b/src/test/java/com/urbanairship/api/push/parse/CampaignsSerializerTest.java
@@ -0,0 +1,37 @@
+package com.urbanairship.api.push.parse;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.urbanairship.api.push.model.Campaigns;
+import org.junit.Test;
+
+import java.util.Arrays;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+
+public class CampaignsSerializerTest {
+    private static final ObjectMapper MAPPER = PushObjectMapper.getInstance();
+
+    @Test
+    public void testCampaignSerializer() throws Exception {
+
+        String campaignJson = "{" +
+                "\"categories\":[\"this\",\"that\",\"other\"]" +
+                "}";
+
+        List<String> categoryList = Arrays.asList("that", "other");
+
+        Campaigns campaigns = Campaigns.newBuilder()
+                .addCategory("this")
+                .addAllCategories(categoryList)
+                .build();
+
+        String parsedCampaignText = MAPPER.writeValueAsString(campaigns);
+
+        JsonNode parsedCampaignNode = MAPPER.readTree(parsedCampaignText);
+        JsonNode campaignJsonNode = MAPPER.readTree(campaignJson);
+        assertEquals(parsedCampaignNode, campaignJsonNode);
+    }
+
+}
diff --git a/src/test/java/com/urbanairship/api/push/parse/ChannelTypeBasicSerializationTest.java b/src/test/java/com/urbanairship/api/push/parse/ChannelTypeBasicSerializationTest.java
index f9f2e6c..14c2c04 100644
--- a/src/test/java/com/urbanairship/api/push/parse/ChannelTypeBasicSerializationTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/ChannelTypeBasicSerializationTest.java
@@ -1,8 +1,8 @@
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.push.model.DeviceType;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.type.TypeReference;
 import org.junit.Test;
 
 import java.util.EnumSet;
@@ -16,7 +16,7 @@ public class ChannelTypeBasicSerializationTest {
 
     @Test
     public void testRoundTrip() throws Exception {
-        Set<DeviceType> deviceType = EnumSet.allOf(DeviceType.class);
+        Set<DeviceType> deviceType = DeviceType.TYPES;
 
         String json = mapper.writeValueAsString(deviceType);
         Set<DeviceType> parsed = mapper.readValue(json, new TypeReference<Set<DeviceType>>() {
diff --git a/src/test/java/com/urbanairship/api/push/parse/ChannelTypeDeserializerTest.java b/src/test/java/com/urbanairship/api/push/parse/ChannelTypeDeserializerTest.java
index b41b374..6fbf1ae 100644
--- a/src/test/java/com/urbanairship/api/push/parse/ChannelTypeDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/ChannelTypeDeserializerTest.java
@@ -1,10 +1,11 @@
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.JsonMappingException;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.Iterables;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.push.model.DeviceType;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.type.TypeReference;
 import org.junit.Test;
 
 import java.util.Set;
@@ -26,7 +27,7 @@ public class ChannelTypeDeserializerTest {
         assertEquals(DeviceType.WNS, Iterables.getOnlyElement(parsed));
     }
 
-    @Test(expected = APIParsingException.class)
+    @Test(expected = JsonMappingException.class)
     public void testInvalidPlatform() throws Exception {
         String json = "[\"foo\"]";
 
diff --git a/src/test/java/com/urbanairship/api/push/parse/DateTimeBasicSerializationTest.java b/src/test/java/com/urbanairship/api/push/parse/DateTimeBasicSerializationTest.java
index 5d07548..5850afe 100644
--- a/src/test/java/com/urbanairship/api/push/parse/DateTimeBasicSerializationTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/DateTimeBasicSerializationTest.java
@@ -1,9 +1,9 @@
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.Sets;
 import com.urbanairship.api.common.parse.CommonObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.type.TypeReference;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.junit.Test;
diff --git a/src/test/java/com/urbanairship/api/push/parse/DisplayDeserializerTest.java b/src/test/java/com/urbanairship/api/push/parse/DisplayDeserializerTest.java
index 9256cbd..4648575 100644
--- a/src/test/java/com/urbanairship/api/push/parse/DisplayDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/DisplayDeserializerTest.java
@@ -1,9 +1,9 @@
 package com.urbanairship.api.push.parse;
 
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.push.model.Display;
 import com.urbanairship.api.push.model.Position;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertNotNull;
diff --git a/src/test/java/com/urbanairship/api/push/parse/DisplaySerializerTest.java b/src/test/java/com/urbanairship/api/push/parse/DisplaySerializerTest.java
index 6012379..c448642 100644
--- a/src/test/java/com/urbanairship/api/push/parse/DisplaySerializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/DisplaySerializerTest.java
@@ -1,9 +1,9 @@
 package com.urbanairship.api.push.parse;
 
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.push.model.Display;
 import com.urbanairship.api.push.model.Position;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/push/parse/InAppDeserializerTest.java b/src/test/java/com/urbanairship/api/push/parse/InAppDeserializerTest.java
index 7b73e90..f2b0b3e 100644
--- a/src/test/java/com/urbanairship/api/push/parse/InAppDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/InAppDeserializerTest.java
@@ -1,8 +1,8 @@
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.push.model.InApp;
 import com.urbanairship.api.push.model.Position;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/push/parse/InAppSerializerTest.java b/src/test/java/com/urbanairship/api/push/parse/InAppSerializerTest.java
index bd3cd7b..1c7d4ed 100644
--- a/src/test/java/com/urbanairship/api/push/parse/InAppSerializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/InAppSerializerTest.java
@@ -1,10 +1,10 @@
 package com.urbanairship.api.push.parse;
 
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.push.model.Display;
 import com.urbanairship.api.push.model.InApp;
 import com.urbanairship.api.push.model.Position;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.junit.Test;
diff --git a/src/test/java/com/urbanairship/api/push/parse/NotificationBasicSerializationTest.java b/src/test/java/com/urbanairship/api/push/parse/NotificationBasicSerializationTest.java
index c66a168..7bf320c 100644
--- a/src/test/java/com/urbanairship/api/push/parse/NotificationBasicSerializationTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/NotificationBasicSerializationTest.java
@@ -1,9 +1,9 @@
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.push.model.notification.Notification;
 import org.apache.commons.lang.RandomStringUtils;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
@@ -31,15 +31,6 @@ public class NotificationBasicSerializationTest {
         parsed = mapper.readValue(json, Notification.class);
 
         assertEquals(notification, parsed);
-
-/*        notification = Notification.newBuilder()
-            .addPlatformOverride(Platform.WNS, new WNSDevicePayload(null))
-            .build();
-
-        json = mapper.writeValueAsString(notification);
-        parsed = mapper.readValue(json, Notification.class);
-
-        assertEquals(notification, parsed); */
     }
 
     @Test(expected = APIParsingException.class)
diff --git a/src/test/java/com/urbanairship/api/push/parse/PushOptionsTest.java b/src/test/java/com/urbanairship/api/push/parse/PushOptionsTest.java
index 1cc0b5a..934a932 100644
--- a/src/test/java/com/urbanairship/api/push/parse/PushOptionsTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/PushOptionsTest.java
@@ -1,5 +1,6 @@
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.push.model.DeviceType;
 import com.urbanairship.api.push.model.DeviceTypeData;
@@ -8,7 +9,6 @@ import com.urbanairship.api.push.model.PushOptions;
 import com.urbanairship.api.push.model.PushPayload;
 import com.urbanairship.api.push.model.audience.Selectors;
 import com.urbanairship.api.push.model.notification.Notification;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.junit.Test;
diff --git a/src/test/java/com/urbanairship/api/push/parse/PushPayloadBasicSerializationTest.java b/src/test/java/com/urbanairship/api/push/parse/PushPayloadBasicSerializationTest.java
index cee9dc5..1e86359 100644
--- a/src/test/java/com/urbanairship/api/push/parse/PushPayloadBasicSerializationTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/PushPayloadBasicSerializationTest.java
@@ -1,5 +1,9 @@
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.JsonMappingException;
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.push.model.DeviceType;
 import com.urbanairship.api.push.model.DeviceTypeData;
@@ -8,14 +12,13 @@ import com.urbanairship.api.push.model.Position;
 import com.urbanairship.api.push.model.PushPayload;
 import com.urbanairship.api.push.model.audience.Selectors;
 import com.urbanairship.api.push.model.notification.Notification;
+import com.urbanairship.api.push.model.notification.Notifications;
 import com.urbanairship.api.push.model.notification.adm.ADMDevicePayload;
 import com.urbanairship.api.push.model.notification.android.AndroidDevicePayload;
 import com.urbanairship.api.push.model.notification.ios.IOSDevicePayload;
 import com.urbanairship.api.push.model.notification.richpush.RichPushMessage;
 import com.urbanairship.api.push.model.notification.wns.WNSDevicePayload;
 import org.apache.commons.lang.RandomStringUtils;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.type.TypeReference;
 import org.junit.Test;
 
 import java.io.IOException;
@@ -32,6 +35,58 @@ public class PushPayloadBasicSerializationTest {
     private static final ObjectMapper mapper = PushObjectMapper.getInstance();
 
     @Test
+    public void testOpenChannel() throws Exception {
+        PushPayload pushPayload = PushPayload.newBuilder()
+                .setNotification(Notifications.alert("alert"))
+                .setAudience(Selectors.open("open_channel"))
+                .setDeviceTypes(DeviceTypeData.of(DeviceType.open("sms")))
+                .build();
+
+        String json = "{\n" +
+                "    \"audience\": {\n" +
+                "        \"open_channel\": \"open_channel\"\n" +
+                "    },\n" +
+                "    \"device_types\": [\n" +
+                "        \"open::sms\"\n" +
+                "    ],\n" +
+                "    \"notification\": {\n" +
+                "        \"alert\": \"alert\"\n" +
+                "    }\n" +
+                "}";
+
+        PushPayload secondPush = PushPayload.newBuilder()
+                .setNotification(Notifications.alert("alert"))
+                .setAudience(Selectors.open("open_channel"))
+                .setDeviceTypes(DeviceTypeData.of(DeviceType.open("email")))
+                .build();
+
+        String secondPayloadJson = "{\n" +
+                "    \"audience\": {\n" +
+                "        \"open_channel\": \"open_channel\"\n" +
+                "    },\n" +
+                "    \"device_types\": [\n" +
+                "        \"open::email\"\n" +
+                "    ],\n" +
+                "    \"notification\": {\n" +
+                "        \"alert\": \"alert\"\n" +
+                "    }\n" +
+                "}";
+
+        String parsedJson = mapper.writeValueAsString(pushPayload);
+        String secondParsedJson = mapper.writeValueAsString(secondPush);
+
+        JsonNode actual = mapper.readTree(parsedJson);
+        JsonNode expected = mapper.readTree(json);
+
+        JsonNode actualSecondPush = mapper.readTree(secondParsedJson);
+        JsonNode expectedSecondPush = mapper.readTree(secondPayloadJson);
+
+        assertEquals(actual, expected);
+        assertEquals(actualSecondPush, expectedSecondPush);
+    }
+
+
+    @Test
     public void testArrayOfPushes() throws Exception {
         String json = "["
                 + "  { "
@@ -134,7 +189,7 @@ public class PushPayloadBasicSerializationTest {
         mapper.readValue(json, PushPayload.class);
     }
 
-    @Test(expected = APIParsingException.class)
+    @Test(expected = JsonMappingException.class)
     public void testDeviceTypesAllInList() throws Exception {
         String json
                 = "{"
diff --git a/src/test/java/com/urbanairship/api/push/parse/PushResponseTest.java b/src/test/java/com/urbanairship/api/push/parse/PushResponseTest.java
index 16f8184..6840ee6 100644
--- a/src/test/java/com/urbanairship/api/push/parse/PushResponseTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/PushResponseTest.java
@@ -1,7 +1,7 @@
 package com.urbanairship.api.push.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.push.model.PushResponse;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import java.io.IOException;
diff --git a/src/test/java/com/urbanairship/api/push/parse/audience/LocationSelectorDeserializerTest.java b/src/test/java/com/urbanairship/api/push/parse/audience/LocationSelectorDeserializerTest.java
index bd75a0d..ddf3e1a 100644
--- a/src/test/java/com/urbanairship/api/push/parse/audience/LocationSelectorDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/audience/LocationSelectorDeserializerTest.java
@@ -1,5 +1,6 @@
 package com.urbanairship.api.push.parse.audience;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.push.model.audience.location.AbsoluteDateRange;
 import com.urbanairship.api.push.model.audience.location.DateRange;
@@ -10,7 +11,6 @@ import com.urbanairship.api.push.model.audience.location.LocationSelector;
 import com.urbanairship.api.push.model.audience.location.PresenceTimeframe;
 import com.urbanairship.api.push.model.audience.location.RecentDateRange;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.joda.time.Days;
diff --git a/src/test/java/com/urbanairship/api/push/parse/audience/SelectorDeserializerTest.java b/src/test/java/com/urbanairship/api/push/parse/audience/SelectorDeserializerTest.java
index b093d65..c4b1522 100644
--- a/src/test/java/com/urbanairship/api/push/parse/audience/SelectorDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/audience/SelectorDeserializerTest.java
@@ -1,5 +1,6 @@
 package com.urbanairship.api.push.parse.audience;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.Iterables;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.push.model.audience.BasicValueSelector;
@@ -8,7 +9,6 @@ import com.urbanairship.api.push.model.audience.Selector;
 import com.urbanairship.api.push.model.audience.SelectorType;
 import com.urbanairship.api.push.model.audience.ValueSelector;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import java.util.Iterator;
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/InteractiveDeserializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/InteractiveDeserializerTest.java
index c601188..ba34767 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/InteractiveDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/InteractiveDeserializerTest.java
@@ -1,5 +1,6 @@
 package com.urbanairship.api.push.parse.notification;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.base.Optional;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.APIParsingException;
@@ -9,7 +10,6 @@ import com.urbanairship.api.push.model.notification.actions.AddTagAction;
 import com.urbanairship.api.push.model.notification.actions.LandingPageContent;
 import com.urbanairship.api.push.model.notification.actions.OpenLandingPageWithContentAction;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import java.io.IOException;
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/InteractiveSerializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/InteractiveSerializerTest.java
index 20d4189..c7d18e9 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/InteractiveSerializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/InteractiveSerializerTest.java
@@ -1,11 +1,11 @@
 package com.urbanairship.api.push.parse.notification;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.push.model.notification.Interactive;
 import com.urbanairship.api.push.model.notification.actions.Actions;
 import com.urbanairship.api.push.model.notification.actions.ShareAction;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import java.io.IOException;
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/ParseActionsTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/ParseActionsTest.java
index 78d3b13..76a0518 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/ParseActionsTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/ParseActionsTest.java
@@ -1,5 +1,7 @@
 package com.urbanairship.api.push.parse.notification;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.google.common.base.Optional;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
@@ -19,8 +21,6 @@ import com.urbanairship.api.push.model.notification.actions.RemoveTagAction;
 import com.urbanairship.api.push.model.notification.actions.ShareAction;
 import com.urbanairship.api.push.model.notification.actions.TagActionData;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.ObjectNode;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -226,7 +226,7 @@ public class ParseActionsTest {
             Optional<OpenLandingPageWithContentAction> optOpen = getAction(actions, ActionType.OPEN_LANDING_PAGE_WITH_CONTENT, OpenLandingPageWithContentAction.class);
             assertTrue("Open landing page action should be present.", optOpen.isPresent());
             LandingPageContent actual = optOpen.get().getValue();
-            assertEquals("Body of content not round-tripped.", expected.getBody(), actual.getBody());
+            assertEquals("CustomEventBody of content not round-tripped.", expected.getBody(), actual.getBody());
             assertEquals("Content-type not round-tripped.", expected.getContentType(), actual.getContentType());
             assertEquals("Content-encoding not round-tripped.", expected.getEncoding().get(), actual.getEncoding().get());
         }
@@ -381,7 +381,7 @@ public class ParseActionsTest {
 
         ObjectNode result = optAppDefined.get().getValue();
 
-        Iterator<String> fieldNames = expected.getFieldNames();
+        Iterator<String> fieldNames = expected.fieldNames();
         while (fieldNames.hasNext()) {
             String fieldName = fieldNames.next();
             assertFalse("Expected field name not present in app_defined object: " + fieldName,
@@ -390,7 +390,7 @@ public class ParseActionsTest {
                     expected.path(fieldName), result.path(fieldName));
         }
 
-        Iterator<String> resultFields = result.getFieldNames();
+        Iterator<String> resultFields = result.fieldNames();
         while (resultFields.hasNext()) {
             String fieldName = resultFields.next();
             assertFalse("Unexpected field name in app_defined object: " + fieldName,
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/actions/ActionsSerializationTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/actions/ActionsSerializationTest.java
index 35be9a0..a40f76a 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/actions/ActionsSerializationTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/actions/ActionsSerializationTest.java
@@ -1,5 +1,7 @@
 package com.urbanairship.api.push.parse.notification.actions;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.urbanairship.api.push.model.notification.actions.Actions;
 import com.urbanairship.api.push.model.notification.actions.AddTagAction;
 import com.urbanairship.api.push.model.notification.actions.AppDefinedAction;
@@ -9,8 +11,6 @@ import com.urbanairship.api.push.model.notification.actions.OpenLandingPageWithC
 import com.urbanairship.api.push.model.notification.actions.ShareAction;
 import com.urbanairship.api.push.model.notification.actions.TagActionData;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.node.ObjectNode;
 import org.junit.Test;
 
 import java.io.IOException;
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/adm/PayloadDeserializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/adm/PayloadDeserializerTest.java
index 1d2287c..3530d5f 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/adm/PayloadDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/adm/PayloadDeserializerTest.java
@@ -1,12 +1,12 @@
 package com.urbanairship.api.push.parse.notification.adm;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.push.model.notification.Interactive;
 import com.urbanairship.api.push.model.notification.actions.Actions;
 import com.urbanairship.api.push.model.notification.actions.ShareAction;
 import com.urbanairship.api.push.model.notification.adm.ADMDevicePayload;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import java.io.IOException;
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/android/PayloadDeserializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/android/PayloadDeserializerTest.java
index 156b0a0..73dbb80 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/android/PayloadDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/android/PayloadDeserializerTest.java
@@ -1,5 +1,6 @@
 package com.urbanairship.api.push.parse.notification.android;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.common.parse.APIParsingException;
@@ -13,7 +14,6 @@ import com.urbanairship.api.push.model.notification.android.PublicNotification;
 import com.urbanairship.api.push.model.notification.android.Style;
 import com.urbanairship.api.push.model.notification.android.Wearable;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import java.util.Map;
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/android/PayloadSerializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/android/PayloadSerializerTest.java
index e8bed6a..b6b2393 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/android/PayloadSerializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/android/PayloadSerializerTest.java
@@ -1,6 +1,8 @@
 package com.urbanairship.api.push.parse.notification.android;
 
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.push.model.PushExpiry;
 import com.urbanairship.api.push.model.notification.Interactive;
@@ -15,8 +17,6 @@ import com.urbanairship.api.push.model.notification.android.PublicNotification;
 import com.urbanairship.api.push.model.notification.android.Style;
 import com.urbanairship.api.push.model.notification.android.Wearable;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
@@ -145,6 +145,7 @@ public class PayloadSerializerTest {
         "}";
         String parsedJson = MAPPER.writeValueAsString(payload);
 
+
         JsonNode expected = MAPPER.readTree(json);
         JsonNode actual = MAPPER.readTree(parsedJson);
 
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/android/PublicNotificationDeserializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/android/PublicNotificationDeserializerTest.java
index 0620949..9597def 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/android/PublicNotificationDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/android/PublicNotificationDeserializerTest.java
@@ -1,8 +1,8 @@
 package com.urbanairship.api.push.parse.notification.android;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.push.model.notification.android.PublicNotification;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/android/PublicNotificationSerializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/android/PublicNotificationSerializerTest.java
index d33cd9c..c3b9565 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/android/PublicNotificationSerializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/android/PublicNotificationSerializerTest.java
@@ -1,8 +1,8 @@
 package com.urbanairship.api.push.parse.notification.android;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.push.model.notification.android.PublicNotification;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static junit.framework.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/android/StyleDeserializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/android/StyleDeserializerTest.java
index d4e740c..009d38b 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/android/StyleDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/android/StyleDeserializerTest.java
@@ -1,12 +1,12 @@
 package com.urbanairship.api.push.parse.notification.android;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.ImmutableList;
 import com.urbanairship.api.push.model.notification.android.BigPictureStyle;
 import com.urbanairship.api.push.model.notification.android.BigTextStyle;
 import com.urbanairship.api.push.model.notification.android.InboxStyle;
 import com.urbanairship.api.push.model.notification.android.Style;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/android/StyleSerializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/android/StyleSerializerTest.java
index 9fba029..4164465 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/android/StyleSerializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/android/StyleSerializerTest.java
@@ -1,11 +1,12 @@
 package com.urbanairship.api.push.parse.notification.android;
 
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.push.model.notification.android.BigPictureStyle;
 import com.urbanairship.api.push.model.notification.android.BigTextStyle;
 import com.urbanairship.api.push.model.notification.android.InboxStyle;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static junit.framework.Assert.assertEquals;
@@ -30,7 +31,11 @@ public class StyleSerializerTest {
                 .build();
 
         String parsedBigText = MAPPER.writeValueAsString(bigPictureStyle);
-        assertEquals(bigPictureStyleJson, parsedBigText);
+
+        JsonNode parsedBigTextNode = MAPPER.readTree(parsedBigText);
+        JsonNode bigPictureStyleJsonNode = MAPPER.readTree(bigPictureStyleJson);
+
+        assertEquals(parsedBigTextNode, bigPictureStyleJsonNode);
     }
 
     @Test
@@ -49,8 +54,12 @@ public class StyleSerializerTest {
                 .setTitle("big text title")
                 .build();
 
-        String parsedBigPicture = MAPPER.writeValueAsString(bigTextStyle);
-        assertEquals(bigTextStyleJson, parsedBigPicture);
+        String parsedBigText = MAPPER.writeValueAsString(bigTextStyle);
+
+        JsonNode fromObj = MAPPER.readTree(parsedBigText);
+        JsonNode fromStr = MAPPER.readTree(bigTextStyleJson);
+
+        assertEquals(fromObj, fromStr);
     }
 
     @Test
@@ -70,6 +79,10 @@ public class StyleSerializerTest {
                 .build();
 
         String parsedInbox = MAPPER.writeValueAsString(inboxStyle);
-        assertEquals(styleInboxJson, parsedInbox);
+
+        JsonNode fromObj = MAPPER.readTree(parsedInbox);
+        JsonNode fromStr = MAPPER.readTree(styleInboxJson);
+
+        assertEquals(fromObj, fromStr);
     }
 }
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/android/WearableDeserializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/android/WearableDeserializerTest.java
index e76bd6a..e20f3e4 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/android/WearableDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/android/WearableDeserializerTest.java
@@ -1,11 +1,11 @@
 package com.urbanairship.api.push.parse.notification.android;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.push.model.notification.Interactive;
 import com.urbanairship.api.push.model.notification.android.Wearable;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static junit.framework.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/android/WearableSerializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/android/WearableSerializerTest.java
index 475f409..46da4fc 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/android/WearableSerializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/android/WearableSerializerTest.java
@@ -1,6 +1,7 @@
 package com.urbanairship.api.push.parse.notification.android;
 
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.ImmutableMap;
 import com.urbanairship.api.push.model.notification.Interactive;
 import com.urbanairship.api.push.model.notification.actions.Actions;
@@ -9,7 +10,6 @@ import com.urbanairship.api.push.model.notification.actions.RemoveTagAction;
 import com.urbanairship.api.push.model.notification.actions.TagActionData;
 import com.urbanairship.api.push.model.notification.android.Wearable;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/ios/PayloadDeserializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/ios/PayloadDeserializerTest.java
index 960fc37..31cde18 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/ios/PayloadDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/ios/PayloadDeserializerTest.java
@@ -1,12 +1,12 @@
 package com.urbanairship.api.push.parse.notification.ios;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.ImmutableList;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.push.model.notification.ios.IOSAlertData;
 import com.urbanairship.api.push.model.notification.ios.IOSBadgeData;
 import com.urbanairship.api.push.model.notification.ios.IOSDevicePayload;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import java.math.BigDecimal;
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/ios/PayloadSerializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/ios/PayloadSerializerTest.java
index b9ba44d..105fe77 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/ios/PayloadSerializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/ios/PayloadSerializerTest.java
@@ -1,11 +1,11 @@
 package com.urbanairship.api.push.parse.notification.ios;
 
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.ImmutableList;
 import com.urbanairship.api.push.model.notification.Interactive;
 import com.urbanairship.api.push.model.notification.ios.*;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import java.math.BigDecimal;
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/open/OpenPayloadSerializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/open/OpenPayloadSerializerTest.java
new file mode 100644
index 0000000..499ed96
--- /dev/null
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/open/OpenPayloadSerializerTest.java
@@ -0,0 +1,113 @@
+package com.urbanairship.api.push.parse.notification.open;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.google.common.collect.ImmutableMap;
+import com.urbanairship.api.push.model.DeviceType;
+import com.urbanairship.api.push.model.DeviceTypeData;
+import com.urbanairship.api.push.model.PushPayload;
+import com.urbanairship.api.push.model.audience.Selectors;
+import com.urbanairship.api.push.model.notification.Interactive;
+import com.urbanairship.api.push.model.notification.Notifications;
+import com.urbanairship.api.push.model.notification.actions.Actions;
+import com.urbanairship.api.push.model.notification.actions.AddTagAction;
+import com.urbanairship.api.push.model.notification.actions.RemoveTagAction;
+import com.urbanairship.api.push.model.notification.actions.TagActionData;
+import com.urbanairship.api.push.model.notification.open.OpenPayload;
+import com.urbanairship.api.push.parse.PushObjectMapper;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+
+public class OpenPayloadSerializerTest {
+    private static final ObjectMapper MAPPER = PushObjectMapper.getInstance();
+
+    @Test
+    public void testOpenPayload() throws Exception {
+        DeviceType deviceTypeEmail = DeviceType.open("email");
+        DeviceType deviceTypeSms = DeviceType.open("sms");
+
+        AddTagAction butterTag = new AddTagAction(TagActionData.single("butter"));
+        RemoveTagAction coolTag = new RemoveTagAction(TagActionData.single("cool"));
+
+        ImmutableMap<String, Actions> buttonActions = ImmutableMap.<String,Actions>builder()
+                .put("yes", Actions.newBuilder().addTags(butterTag).build())
+                .put("no", Actions.newBuilder().removeTags(coolTag).build())
+                .build();
+
+        Interactive interactive = Interactive.newBuilder()
+                .setType("ua_yes_no_foreground")
+                .setButtonActions(buttonActions)
+                .build();
+
+        ImmutableMap<String, String> extras = ImmutableMap.<String, String>builder()
+                .put("key", "value")
+                .put("second_key", "second_value")
+                .build();
+
+        OpenPayload openPayloadEmail = OpenPayload.newBuilder()
+                .setAlert("alert")
+                .setExtras(extras)
+                .setInteractive(interactive)
+                .setTitle("title")
+                .setMediaAttachment("example.com")
+                .setSummary("summary")
+                .setDeviceType(deviceTypeEmail)
+                .build();
+
+        OpenPayload openPayloadSms = OpenPayload.newBuilder()
+                .setAlert("sms alert")
+                .setTitle("sms title")
+                .setDeviceType(deviceTypeSms)
+                .build();
+
+        PushPayload payload = PushPayload.newBuilder()
+                .setNotification(Notifications.notification(openPayloadEmail, openPayloadSms))
+                .setDeviceTypes(DeviceTypeData.of(deviceTypeEmail, deviceTypeSms))
+                .setAudience(Selectors.tag("tag1"))
+                .build();
+
+        String json = "{\n" +
+                "    \"audience\": {\n" +
+                "        \"tag\": \"tag1\"\n" +
+                "    },\n" +
+                "    \"device_types\": [\n" +
+                "        \"open::email\",\n" +
+                "        \"open::sms\"\n" +
+                "    ],\n" +
+                "    \"notification\": {\n" +
+                "        \"open::sms\": {\n" +
+                "            \"alert\": \"sms alert\",\n" +
+                "            \"title\": \"sms title\"\n" +
+                "        },\n" +
+                "        \"open::email\": {\n" +
+                "            \"alert\": \"alert\",\n" +
+                "            \"extra\": {\n" +
+                "                \"key\": \"value\",\n" +
+                "                \"second_key\": \"second_value\"\n" +
+                "            },\n" +
+                "            \"interactive\": {\n" +
+                "                \"type\": \"ua_yes_no_foreground\",\n" +
+                "                \"button_actions\": {\n" +
+                "                    \"yes\": {\n" +
+                "                        \"add_tag\": \"butter\"\n" +
+                "                    },\n" +
+                "                    \"no\": {\n" +
+                "                        \"remove_tag\": \"cool\"\n" +
+                "                    }\n" +
+                "                }\n" +
+                "            },\n" +
+                "            \"media_attachment\": \"example.com\",\n" +
+                "            \"title\": \"title\",\n" +
+                "            \"summary\": \"summary\"\n" +
+                "        }\n" +
+                "    }\n" +
+                "}";
+        String parsedJson = MAPPER.writeValueAsString(payload);
+
+        JsonNode actual = MAPPER.readTree(parsedJson);
+        JsonNode expected = MAPPER.readTree(json);
+
+        assertEquals(expected, actual);
+    }
+}
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/richpush/RichPushDeserializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/richpush/RichPushDeserializerTest.java
index 1be7bf6..bfad193 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/richpush/RichPushDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/richpush/RichPushDeserializerTest.java
@@ -1,9 +1,9 @@
 package com.urbanairship.api.push.parse.notification.richpush;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.push.model.PushExpiry;
 import com.urbanairship.api.push.model.notification.richpush.RichPushMessage;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.junit.Test;
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/web/PayloadDeserializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/web/PayloadDeserializerTest.java
index 7662dc1..071441d 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/web/PayloadDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/web/PayloadDeserializerTest.java
@@ -1,9 +1,9 @@
 package com.urbanairship.api.push.parse.notification.web;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.push.model.notification.web.WebDevicePayload;
 import com.urbanairship.api.push.model.notification.web.WebIcon;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import java.util.Map;
@@ -100,4 +100,21 @@ public class PayloadDeserializerTest {
         assertNotNull(payload);
         assertEquals(webIcon, payload.getWebIcon().get());
     }
+
+    @Test
+    public void testRequireInteraction() throws Exception {
+        String json =
+                "{" +
+                        "\"require_interaction\":" +
+                        "true" +
+                        "}";
+
+        WebDevicePayload expected = WebDevicePayload.newBuilder()
+                .setRequireInteraction(true)
+                .build();
+
+        WebDevicePayload payload = MAPPER.readValue(json, WebDevicePayload.class);
+        assertNotNull(payload);
+        assertEquals(expected.getRequireInteraction().get(), payload.getRequireInteraction().get());
+    }
 }
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/web/PayloadSerializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/web/PayloadSerializerTest.java
index f0472dd..2793a03 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/web/PayloadSerializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/web/PayloadSerializerTest.java
@@ -1,10 +1,10 @@
 package com.urbanairship.api.push.parse.notification.web;
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.push.model.notification.web.WebDevicePayload;
 import com.urbanairship.api.push.model.notification.web.WebIcon;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
@@ -24,14 +24,17 @@ public class PayloadSerializerTest {
                 .setTitle("WebSettings title")
                 .addExtraEntry("extrakey", "extravalue")
                 .setWebIcon(webIcon)
+                .setRequireInteraction(true)
                 .build();
 
         String expected = "{" +
                     "\"alert\":\"WebSettings specific alert\"," +
                     "\"extra\":{\"extrakey\":\"extravalue\"}," +
                     "\"icon\":{\"url\":\"https://i.ytimg.com/vi/PNgykntrIzE/maxresdefault.jpg\"}," +
-                    "\"title\":\"WebSettings title\"" +
-                "}";
+                    "\"title\":\"WebSettings title\"," +
+                    "\"require_interaction\":true" +
+
+        "}";
 
         String parsedJson = MAPPER.writeValueAsString(webPayload);
         WebDevicePayload roundTripWebPayload = MAPPER.readValue(parsedJson, WebDevicePayload.class);
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/wns/AudioDeserializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/wns/AudioDeserializerTest.java
index bf69654..c9d3c97 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/wns/AudioDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/wns/AudioDeserializerTest.java
@@ -1,8 +1,8 @@
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.push.model.notification.wns.WNSAudioData;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/wns/BadgeDeserializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/wns/BadgeDeserializerTest.java
index 98f950f..ef23b8f 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/wns/BadgeDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/wns/BadgeDeserializerTest.java
@@ -1,9 +1,9 @@
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.push.model.notification.wns.WNSBadgeData;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/wns/BindingDeserializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/wns/BindingDeserializerTest.java
index 15b0896..ed3fe6f 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/wns/BindingDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/wns/BindingDeserializerTest.java
@@ -1,9 +1,9 @@
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.push.model.notification.wns.WNSBinding;
 import com.urbanairship.api.push.parse.PushObjectMapper;
 import org.apache.commons.lang.RandomStringUtils;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/wns/PayloadDeserializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/wns/PayloadDeserializerTest.java
index 175ca12..2695003 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/wns/PayloadDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/wns/PayloadDeserializerTest.java
@@ -1,12 +1,12 @@
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.push.model.notification.wns.WNSBinding;
 import com.urbanairship.api.push.model.notification.wns.WNSDevicePayload;
 import com.urbanairship.api.push.model.notification.wns.WNSPush;
 import com.urbanairship.api.push.model.notification.wns.WNSToastData;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/wns/TileDeserializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/wns/TileDeserializerTest.java
index ecf664d..dda9885 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/wns/TileDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/wns/TileDeserializerTest.java
@@ -1,8 +1,8 @@
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.push.model.notification.wns.WNSTileData;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/push/parse/notification/wns/ToastDeserializerTest.java b/src/test/java/com/urbanairship/api/push/parse/notification/wns/ToastDeserializerTest.java
index 55e83af..a3d68ee 100644
--- a/src/test/java/com/urbanairship/api/push/parse/notification/wns/ToastDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/notification/wns/ToastDeserializerTest.java
@@ -1,8 +1,8 @@
 package com.urbanairship.api.push.parse.notification.wns;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.push.model.notification.wns.WNSToastData;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/push/parse/richpush/RichPushDevicePayloadSerializerTest.java b/src/test/java/com/urbanairship/api/push/parse/richpush/RichPushDevicePayloadSerializerTest.java
index 634e5d4..5d42af4 100644
--- a/src/test/java/com/urbanairship/api/push/parse/richpush/RichPushDevicePayloadSerializerTest.java
+++ b/src/test/java/com/urbanairship/api/push/parse/richpush/RichPushDevicePayloadSerializerTest.java
@@ -1,9 +1,9 @@
 package com.urbanairship.api.push.parse.richpush;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.push.model.PushExpiry;
 import com.urbanairship.api.push.model.notification.richpush.RichPushMessage;
 import com.urbanairship.api.push.parse.PushObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/reports/PlatformStatsRequestTest.java b/src/test/java/com/urbanairship/api/reports/PlatformStatsRequestTest.java
index b1c88e4..009eb8e 100644
--- a/src/test/java/com/urbanairship/api/reports/PlatformStatsRequestTest.java
+++ b/src/test/java/com/urbanairship/api/reports/PlatformStatsRequestTest.java
@@ -1,6 +1,7 @@
 package com.urbanairship.api.reports;
 
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.net.HttpHeaders;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.client.ResponseParser;
@@ -8,7 +9,6 @@ import com.urbanairship.api.reports.model.PlatformStatsResponse;
 import com.urbanairship.api.reports.model.Precision;
 import com.urbanairship.api.reports.parse.ReportsObjectMapper;
 import org.apache.http.entity.ContentType;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.joda.time.Period;
diff --git a/src/test/java/com/urbanairship/api/reports/PushInfoRequestTest.java b/src/test/java/com/urbanairship/api/reports/PushInfoRequestTest.java
index ef5bc98..84ba33b 100644
--- a/src/test/java/com/urbanairship/api/reports/PushInfoRequestTest.java
+++ b/src/test/java/com/urbanairship/api/reports/PushInfoRequestTest.java
@@ -1,12 +1,12 @@
 package com.urbanairship.api.reports;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.net.HttpHeaders;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.client.ResponseParser;
 import com.urbanairship.api.reports.model.PushInfoResponse;
 import com.urbanairship.api.reports.parse.ReportsObjectMapper;
 import org.apache.http.entity.ContentType;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import java.io.IOException;
diff --git a/src/test/java/com/urbanairship/api/reports/PushListingRequestTest.java b/src/test/java/com/urbanairship/api/reports/PushListingRequestTest.java
index ccdf000..b9a373e 100644
--- a/src/test/java/com/urbanairship/api/reports/PushListingRequestTest.java
+++ b/src/test/java/com/urbanairship/api/reports/PushListingRequestTest.java
@@ -1,12 +1,12 @@
 package com.urbanairship.api.reports;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.net.HttpHeaders;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.client.ResponseParser;
 import com.urbanairship.api.reports.model.PushListingResponse;
 import com.urbanairship.api.reports.parse.ReportsObjectMapper;
 import org.apache.http.entity.ContentType;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.joda.time.Period;
diff --git a/src/test/java/com/urbanairship/api/reports/StatisticsCsvRequestTest.java b/src/test/java/com/urbanairship/api/reports/StatisticsCsvRequestTest.java
index 8caecbb..c58f7ee 100644
--- a/src/test/java/com/urbanairship/api/reports/StatisticsCsvRequestTest.java
+++ b/src/test/java/com/urbanairship/api/reports/StatisticsCsvRequestTest.java
@@ -1,9 +1,9 @@
 package com.urbanairship.api.reports;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.client.ResponseParser;
 import com.urbanairship.api.reports.parse.ReportsObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.joda.time.Period;
diff --git a/src/test/java/com/urbanairship/api/reports/StatisticsRequestTest.java b/src/test/java/com/urbanairship/api/reports/StatisticsRequestTest.java
index a3db05b..f97d5cd 100644
--- a/src/test/java/com/urbanairship/api/reports/StatisticsRequestTest.java
+++ b/src/test/java/com/urbanairship/api/reports/StatisticsRequestTest.java
@@ -1,11 +1,11 @@
 package com.urbanairship.api.reports;
 
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.client.ResponseParser;
 import com.urbanairship.api.reports.model.StatisticsResponse;
 import com.urbanairship.api.reports.parse.ReportsObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.type.TypeReference;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.joda.time.Period;
diff --git a/src/test/java/com/urbanairship/api/reports/parse/PlatformStatsDeserializerTest.java b/src/test/java/com/urbanairship/api/reports/parse/PlatformStatsDeserializerTest.java
index f82a8a0..de05ad0 100644
--- a/src/test/java/com/urbanairship/api/reports/parse/PlatformStatsDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/reports/parse/PlatformStatsDeserializerTest.java
@@ -1,8 +1,8 @@
 package com.urbanairship.api.reports.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.common.parse.DateFormats;
 import com.urbanairship.api.reports.model.PlatformStats;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/reports/parse/PlatformStatsResponseDeserializerTest.java b/src/test/java/com/urbanairship/api/reports/parse/PlatformStatsResponseDeserializerTest.java
index 1db8e9a..1357588 100644
--- a/src/test/java/com/urbanairship/api/reports/parse/PlatformStatsResponseDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/reports/parse/PlatformStatsResponseDeserializerTest.java
@@ -1,9 +1,9 @@
 package com.urbanairship.api.reports.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.common.parse.DateFormats;
 import com.urbanairship.api.reports.model.PlatformStats;
 import com.urbanairship.api.reports.model.PlatformStatsResponse;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import java.io.IOException;
diff --git a/src/test/java/com/urbanairship/api/reports/parse/PushInfoResponseDeserializerTest.java b/src/test/java/com/urbanairship/api/reports/parse/PushInfoResponseDeserializerTest.java
index eea3ff9..9b69e61 100644
--- a/src/test/java/com/urbanairship/api/reports/parse/PushInfoResponseDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/reports/parse/PushInfoResponseDeserializerTest.java
@@ -1,8 +1,8 @@
 package com.urbanairship.api.reports.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.reports.model.PushInfoResponse;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/reports/parse/PushListingResponseDeserializerTest.java b/src/test/java/com/urbanairship/api/reports/parse/PushListingResponseDeserializerTest.java
index eb1ec57..d10b529 100644
--- a/src/test/java/com/urbanairship/api/reports/parse/PushListingResponseDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/reports/parse/PushListingResponseDeserializerTest.java
@@ -1,8 +1,8 @@
 package com.urbanairship.api.reports.parse;
 
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.reports.model.PushListingResponse;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/reports/parse/StatisticsResponseDeserializerTest.java b/src/test/java/com/urbanairship/api/reports/parse/StatisticsResponseDeserializerTest.java
index 619198c..45f5042 100644
--- a/src/test/java/com/urbanairship/api/reports/parse/StatisticsResponseDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/reports/parse/StatisticsResponseDeserializerTest.java
@@ -1,11 +1,11 @@
 package com.urbanairship.api.reports.parse;
 
 
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.DateFormats;
 import com.urbanairship.api.reports.model.StatisticsResponse;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.type.TypeReference;
 import org.junit.Test;
 
 import java.util.List;
diff --git a/src/test/java/com/urbanairship/api/schedule/ListSchedulesResponseTest.java b/src/test/java/com/urbanairship/api/schedule/ListSchedulesResponseTest.java
index fb9788f..79772a8 100644
--- a/src/test/java/com/urbanairship/api/schedule/ListSchedulesResponseTest.java
+++ b/src/test/java/com/urbanairship/api/schedule/ListSchedulesResponseTest.java
@@ -1,12 +1,12 @@
 package com.urbanairship.api.schedule;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.push.model.DeviceType;
 import com.urbanairship.api.push.model.PushPayload;
 import com.urbanairship.api.schedule.model.ListAllSchedulesResponse;
 import com.urbanairship.api.schedule.model.Schedule;
 import com.urbanairship.api.schedule.model.SchedulePayload;
 import com.urbanairship.api.schedule.parse.ScheduleObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import java.util.List;
diff --git a/src/test/java/com/urbanairship/api/schedule/SchedulePayloadDeserializerTest.java b/src/test/java/com/urbanairship/api/schedule/SchedulePayloadDeserializerTest.java
index bdcadf1..0fd0dc7 100644
--- a/src/test/java/com/urbanairship/api/schedule/SchedulePayloadDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/schedule/SchedulePayloadDeserializerTest.java
@@ -1,22 +1,30 @@
 package com.urbanairship.api.schedule;
 
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.base.Optional;
 import com.urbanairship.api.common.parse.APIParsingException;
 import com.urbanairship.api.common.parse.DateFormats;
+import com.urbanairship.api.push.model.DeviceTypeData;
+import com.urbanairship.api.push.model.PushPayload;
+import com.urbanairship.api.push.model.audience.Selectors;
+import com.urbanairship.api.push.model.notification.Notification;
 import com.urbanairship.api.push.parse.PushObjectMapper;
+import com.urbanairship.api.schedule.model.BestTime;
+import com.urbanairship.api.schedule.model.Schedule;
 import com.urbanairship.api.schedule.model.SchedulePayload;
 import org.apache.commons.lang.RandomStringUtils;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.type.TypeReference;
+import org.joda.time.DateTime;
+import org.junit.Rule;
 import org.junit.Test;
-
+import org.junit.rules.ExpectedException;
 import java.util.List;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
 public class SchedulePayloadDeserializerTest {
 
+    @Rule
+    public ExpectedException thrown = ExpectedException.none();
+
     private static final ObjectMapper MAPPER = PushObjectMapper.getInstance();
 
     @Test
@@ -40,16 +48,41 @@ public class SchedulePayloadDeserializerTest {
 
         SchedulePayload payload = MAPPER.readValue(json, SchedulePayload.class);
 
-        assertNotNull(payload);
-        assertEquals(payload.getName(), Optional.of(name));
-        assertEquals(payload.getSchedule().getScheduledTimestamp(), DateFormats.DATE_PARSER.parseDateTime("2013-05-05 00:00:01"));
+        org.junit.Assert.assertNotNull(payload);
+        junit.framework.Assert.assertEquals(payload.getName(), Optional.of(name));
+        junit.framework.Assert.assertEquals(payload.getSchedule().getScheduledTimestamp(), DateFormats.DATE_PARSER.parseDateTime("2013-05-05 00:00:01"));
 
         List<SchedulePayload> payloadList = MAPPER.readValue(json, new TypeReference<List<SchedulePayload>>() {
         });
 
-        assertNotNull(payloadList);
-        assertEquals(payloadList.size(), 1);
+        org.junit.Assert.assertNotNull(payloadList);
+        junit.framework.Assert.assertEquals(payloadList.size(), 1);
+    }
 
+    @Test
+    public void testBestTimeDeserialization() throws Exception {
+
+        SchedulePayload payload = SchedulePayload.newBuilder()
+                .setSchedule(Schedule.newBuilder()
+                        .setBestTime(BestTime.newBuilder()
+                                .setSendDate(DateTime.now())
+                                .build())
+                        .build())
+                .setName("BestTimePushPayload")
+                .setPushPayload(PushPayload.newBuilder()
+                        .setAudience(Selectors.all())
+                        .setDeviceTypes(DeviceTypeData.all())
+                        .setNotification(Notification.newBuilder()
+                                .setAlert("Hello Everyone")
+                                .build())
+                        .build())
+                .build();
+
+        String json = MAPPER.writeValueAsString(payload);
+
+        SchedulePayload fromJson = MAPPER.readValue(json, SchedulePayload.class);
+
+        junit.framework.Assert.assertEquals(payload, fromJson);
     }
 
     @Test
@@ -68,13 +101,14 @@ public class SchedulePayloadDeserializerTest {
 
         SchedulePayload payload = MAPPER.readValue(json, SchedulePayload.class);
 
-        assertNotNull(payload);
-        assertEquals(payload.getName(), Optional.<String>absent());
-        assertEquals(payload.getSchedule().getScheduledTimestamp(), DateFormats.DATE_PARSER.parseDateTime("2013-05-05 00:00:01"));
+        org.junit.Assert.assertNotNull(payload);
+        junit.framework.Assert.assertEquals(payload.getName(), Optional.<String>absent());
+        junit.framework.Assert.assertEquals(payload.getSchedule().getScheduledTimestamp(), DateFormats.DATE_PARSER.parseDateTime("2013-05-05 00:00:01"));
     }
 
-    @Test(expected = APIParsingException.class)
+    @Test
     public void testInvalidScheduleObject() throws Exception {
+        thrown.expect(APIParsingException.class);
         String json =
                 "{" +
                         "\"schedule\": {" +
@@ -91,9 +125,9 @@ public class SchedulePayloadDeserializerTest {
 
     }
 
-    @Test(expected = APIParsingException.class)
+    @Test
     public void testInvalidName() throws Exception {
-
+        thrown.expect(APIParsingException .class);
         String json =
                 "{" +
                         "\"schedule\": {" +
@@ -110,6 +144,5 @@ public class SchedulePayloadDeserializerTest {
                         "}";
 
         MAPPER.readValue(json, SchedulePayload.class);
-
     }
 }
\ No newline at end of file
diff --git a/src/test/java/com/urbanairship/api/schedule/SchedulePayloadSerializerTest.java b/src/test/java/com/urbanairship/api/schedule/SchedulePayloadSerializerTest.java
index dba52d0..8b0244e 100644
--- a/src/test/java/com/urbanairship/api/schedule/SchedulePayloadSerializerTest.java
+++ b/src/test/java/com/urbanairship/api/schedule/SchedulePayloadSerializerTest.java
@@ -1,27 +1,24 @@
 package com.urbanairship.api.schedule;
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.push.model.DeviceType;
 import com.urbanairship.api.push.model.DeviceTypeData;
 import com.urbanairship.api.push.model.PushOptions;
 import com.urbanairship.api.push.model.PushPayload;
 import com.urbanairship.api.push.model.audience.Selectors;
 import com.urbanairship.api.push.model.notification.Notification;
-import com.urbanairship.api.push.parse.PushObjectMapper;
+import com.urbanairship.api.schedule.model.BestTime;
 import com.urbanairship.api.schedule.model.Schedule;
 import com.urbanairship.api.schedule.model.SchedulePayload;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.map.ObjectMapper;
+import com.urbanairship.api.schedule.parse.ScheduleObjectMapper;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
 public class SchedulePayloadSerializerTest {
 
-    private static final ObjectMapper MAPPER = PushObjectMapper.getInstance();
+    private static final ObjectMapper MAPPER = ScheduleObjectMapper.getInstance();
 
     @Test
     public void testSerialization() throws Exception {
@@ -43,7 +40,32 @@ public class SchedulePayloadSerializerTest {
 
         String properJson = "{\"schedule\":{\"scheduled_time\":\"2013-05-05T00:00:01\"},\"push\":{\"audience\":{\"tag\":\"tag\"},\"device_types\":[\"ios\"],\"notification\":{\"alert\":\"alert\"},\"options\":{}}}";
 
-        assertEquals(json, properJson);
+        org.junit.Assert.assertEquals(json, properJson);
+    }
+
+    @Test
+    public void testBestTimeSerialization() throws Exception {
+        BestTime bestTime = BestTime.newBuilder()
+                .setSendDate(new DateTime("2013-05-05T00:00:01", DateTimeZone.UTC))
+                .build();
+
+        PushPayload pushPayload = PushPayload.newBuilder()
+                .setAudience(Selectors.tag("tag"))
+                .setDeviceTypes(DeviceTypeData.newBuilder().addDeviceType(DeviceType.IOS).build())
+                .setNotification(Notification.newBuilder().setAlert("alert").build())
+                .setPushOptions(PushOptions.newBuilder().build())
+                .build();
+        SchedulePayload schedulePayload = SchedulePayload.newBuilder()
+                .setSchedule(Schedule.newBuilder()
+                        .setBestTime(bestTime)
+                        .build())
+                .setPushPayload(pushPayload)
+                .build();
+
+        String json = MAPPER.writeValueAsString(schedulePayload);
+
+        String properJson = "{\"schedule\":{\"best_time\":{\"send_date\":\"2013-05-05\"}},\"push\":{\"audience\":{\"tag\":\"tag\"},\"device_types\":[\"ios\"],\"notification\":{\"alert\":\"alert\"},\"options\":{}}}";
+        org.junit.Assert.assertEquals(json, properJson);
     }
 
     @Test(expected = Exception.class)
@@ -63,7 +85,7 @@ public class SchedulePayloadSerializerTest {
         String json = MAPPER.writeValueAsString(schedulePayload);
         String properJson = "{\"schedule\":{},\"push\":{\"audience\":{\"tag\":\"tag\"},\"device_types\":[\"ios\"],\"notification\":{\"alert\":\"alert\"},\"options\":{\"present\":true}}}";
 
-        assertEquals(json, properJson);
+        org.junit.Assert.assertEquals(json, properJson);
 
     }
 
@@ -83,7 +105,7 @@ public class SchedulePayloadSerializerTest {
                 .setPushPayload(pushPayload)
                 .build();
 
-        assertFalse(schedulePayload.getSchedule().getLocalTimePresent());
+        org.junit.Assert.assertFalse(schedulePayload.getSchedule().getLocalTimePresent());
 
         PushPayload pushPayloadLocal = PushPayload.newBuilder()
                 .setAudience(Selectors.tag("tag"))
@@ -107,8 +129,8 @@ public class SchedulePayloadSerializerTest {
         JsonNode jsonNode = MAPPER.readTree(scheduleString);
         JsonNode jsonNodeExpected = MAPPER.readTree(expectedScheduled);
 
-        assertTrue(schedulePayloadLocal.getSchedule().getLocalTimePresent());
-        assertEquals(jsonNodeExpected, jsonNode);
+        org.junit.Assert.assertTrue(schedulePayloadLocal.getSchedule().getLocalTimePresent());
+        org.junit.Assert.assertEquals(jsonNodeExpected, jsonNode);
     }
 
 }
diff --git a/src/test/java/com/urbanairship/api/schedule/ScheduleResponseTest.java b/src/test/java/com/urbanairship/api/schedule/ScheduleResponseTest.java
index cbcae42..b283d9d 100644
--- a/src/test/java/com/urbanairship/api/schedule/ScheduleResponseTest.java
+++ b/src/test/java/com/urbanairship/api/schedule/ScheduleResponseTest.java
@@ -1,8 +1,8 @@
 package com.urbanairship.api.schedule;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.schedule.model.ScheduleResponse;
 import com.urbanairship.api.schedule.parse.ScheduleObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertTrue;
diff --git a/src/test/java/com/urbanairship/api/schedule/ScheduleSerializerTest.java b/src/test/java/com/urbanairship/api/schedule/ScheduleSerializerTest.java
new file mode 100644
index 0000000..5e54db3
--- /dev/null
+++ b/src/test/java/com/urbanairship/api/schedule/ScheduleSerializerTest.java
@@ -0,0 +1,61 @@
+package com.urbanairship.api.schedule;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.urbanairship.api.push.model.DeviceType;
+import com.urbanairship.api.push.model.DeviceTypeData;
+import com.urbanairship.api.push.model.PushOptions;
+import com.urbanairship.api.push.model.PushPayload;
+import com.urbanairship.api.push.model.audience.Selectors;
+import com.urbanairship.api.push.model.notification.Notification;
+import com.urbanairship.api.push.parse.PushObjectMapper;
+import com.urbanairship.api.schedule.model.BestTime;
+import com.urbanairship.api.schedule.model.Schedule;
+import com.urbanairship.api.schedule.model.SchedulePayload;
+import com.urbanairship.api.schedule.parse.ScheduleObjectMapper;
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeZone;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+
+public class ScheduleSerializerTest {
+
+    private static final ObjectMapper MAPPER = ScheduleObjectMapper.getInstance();
+
+    @Test
+    public void testSerialization() throws Exception {
+
+        PushPayload pushPayload = PushPayload.newBuilder()
+                .setAudience(Selectors.tag("tag"))
+                .setDeviceTypes(DeviceTypeData.newBuilder().addDeviceType(DeviceType.IOS).build())
+                .setNotification(Notification.newBuilder().setAlert("alert").build())
+                .setPushOptions(PushOptions.newBuilder().build())
+                .build();
+        SchedulePayload schedulePayload = SchedulePayload.newBuilder()
+                .setSchedule(Schedule.newBuilder()
+                        .setScheduledTimestamp(new DateTime("2013-05-05T00:00:01", DateTimeZone.UTC))
+                        .build())
+                .setPushPayload(pushPayload)
+                .build();
+
+        String json = MAPPER.writeValueAsString(schedulePayload);
+
+        String properJson = "{\"schedule\":{\"scheduled_time\":\"2013-05-05T00:00:01\"},\"push\":{\"audience\":{\"tag\":\"tag\"},\"device_types\":[\"ios\"],\"notification\":{\"alert\":\"alert\"},\"options\":{}}}";
+
+        assertEquals(json, properJson);
+
+        BestTime bestTime = BestTime.newBuilder()
+                .setSendDate(DateTime.now())
+                .build();
+
+        Schedule schedule = Schedule.newBuilder()
+                .setBestTime(bestTime)
+                .build();
+
+        String scheduledBestTimeJson = MAPPER.writeValueAsString(schedule);
+
+        System.out.println(scheduledBestTimeJson);
+
+    }
+
+}
diff --git a/src/test/java/com/urbanairship/api/schedule/ScheduleTest.java b/src/test/java/com/urbanairship/api/schedule/ScheduleTest.java
new file mode 100644
index 0000000..d9d0918
--- /dev/null
+++ b/src/test/java/com/urbanairship/api/schedule/ScheduleTest.java
@@ -0,0 +1,76 @@
+package com.urbanairship.api.schedule;
+
+import com.urbanairship.api.schedule.model.BestTime;
+import com.urbanairship.api.schedule.model.Schedule;
+import org.joda.time.DateTime;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.ExpectedException;
+
+public class ScheduleTest {
+
+    private DateTime dateTime;
+
+    @Before
+    public void setUp() {
+        dateTime = DateTime.now();
+    }
+
+    @Rule
+    public ExpectedException thrown = ExpectedException.none();
+
+    /**
+     * Neither setScheduledTimestamp nor setBestTime called
+     */
+    @Test
+    public void testScheduledTimeAndBestTimeBothAbsent() throws Exception {
+        thrown.expect(IllegalArgumentException.class);
+        Schedule schedule = Schedule.newBuilder()
+                .build();
+    }
+
+    /**
+     * Both setScheduledTimestamp and setBestTime called
+     */
+    @Test
+    public void testScheduledTimeAndBestTimeBothPresent() throws Exception {
+        thrown.expect(IllegalArgumentException.class);
+
+        Schedule schedule = Schedule.newBuilder()
+                .setScheduledTimestamp(dateTime)
+                .setBestTime(BestTime.newBuilder()
+                        .setSendDate(dateTime)
+                        .build())
+                .build();
+    }
+
+    /**
+     * Only setScheduledTimestamp, not setBestTime called
+     */
+    @Test
+    public void testScheduledTime() {
+
+        Schedule schedule = Schedule.newBuilder()
+                .setScheduledTimestamp(dateTime)
+                .build();
+
+        Assert.assertNotNull(schedule.getScheduledTimestamp() );
+    }
+
+    /**
+     * Only setBestTime called, not setScheduledTimestamp
+     */
+    @Test
+    public void testBestTime() {
+
+        Schedule schedule = Schedule.newBuilder()
+                .setBestTime(BestTime.newBuilder()
+                        .setSendDate(dateTime)
+                        .build())
+                .build();
+
+        Assert.assertNotNull(schedule.getBestTime());
+    }
+}
diff --git a/src/test/java/com/urbanairship/api/segment/SegmentDeleteRequestTest.java b/src/test/java/com/urbanairship/api/segment/SegmentDeleteRequestTest.java
index b711161..313e573 100644
--- a/src/test/java/com/urbanairship/api/segment/SegmentDeleteRequestTest.java
+++ b/src/test/java/com/urbanairship/api/segment/SegmentDeleteRequestTest.java
@@ -1,11 +1,11 @@
 package com.urbanairship.api.segment;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.net.HttpHeaders;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.client.ResponseParser;
 import com.urbanairship.api.segments.SegmentDeleteRequest;
 import com.urbanairship.api.segments.parse.SegmentObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Before;
 import org.junit.Test;
 
diff --git a/src/test/java/com/urbanairship/api/segment/SegmentListingRequestTest.java b/src/test/java/com/urbanairship/api/segment/SegmentListingRequestTest.java
index 5f27eb2..344b2f3 100644
--- a/src/test/java/com/urbanairship/api/segment/SegmentListingRequestTest.java
+++ b/src/test/java/com/urbanairship/api/segment/SegmentListingRequestTest.java
@@ -1,12 +1,12 @@
 package com.urbanairship.api.segment;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.net.HttpHeaders;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.client.ResponseParser;
 import com.urbanairship.api.segments.SegmentListingRequest;
 import com.urbanairship.api.segments.model.SegmentListingResponse;
 import com.urbanairship.api.segments.parse.SegmentObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Before;
 import org.junit.Test;
 
diff --git a/src/test/java/com/urbanairship/api/segment/SegmentLookupRequestTest.java b/src/test/java/com/urbanairship/api/segment/SegmentLookupRequestTest.java
index 4340ebd..4c0f18c 100644
--- a/src/test/java/com/urbanairship/api/segment/SegmentLookupRequestTest.java
+++ b/src/test/java/com/urbanairship/api/segment/SegmentLookupRequestTest.java
@@ -1,12 +1,12 @@
 package com.urbanairship.api.segment;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.net.HttpHeaders;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.client.ResponseParser;
 import com.urbanairship.api.segments.SegmentLookupRequest;
 import com.urbanairship.api.segments.model.SegmentView;
 import com.urbanairship.api.segments.parse.SegmentObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Before;
 import org.junit.Test;
 
diff --git a/src/test/java/com/urbanairship/api/segment/SegmentRequestTest.java b/src/test/java/com/urbanairship/api/segment/SegmentRequestTest.java
index a93a13f..1634358 100644
--- a/src/test/java/com/urbanairship/api/segment/SegmentRequestTest.java
+++ b/src/test/java/com/urbanairship/api/segment/SegmentRequestTest.java
@@ -1,5 +1,6 @@
 package com.urbanairship.api.segment;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.net.HttpHeaders;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.client.ResponseParser;
@@ -9,7 +10,6 @@ import com.urbanairship.api.push.model.audience.location.DateRange;
 import com.urbanairship.api.segments.SegmentRequest;
 import com.urbanairship.api.segments.parse.SegmentObjectMapper;
 import org.apache.http.entity.ContentType;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Before;
 import org.junit.Test;
 
diff --git a/src/test/java/com/urbanairship/api/segment/parse/SegmentListingViewDeserializerTest.java b/src/test/java/com/urbanairship/api/segment/parse/SegmentListingViewDeserializerTest.java
index b5fe508..93f8e53 100644
--- a/src/test/java/com/urbanairship/api/segment/parse/SegmentListingViewDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/segment/parse/SegmentListingViewDeserializerTest.java
@@ -1,8 +1,8 @@
 package com.urbanairship.api.segment.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.segments.model.SegmentListingView;
 import com.urbanairship.api.segments.parse.SegmentObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/segment/parse/SegmentViewDeserializerTest.java b/src/test/java/com/urbanairship/api/segment/parse/SegmentViewDeserializerTest.java
index 395b975..eb7dd9a 100644
--- a/src/test/java/com/urbanairship/api/segment/parse/SegmentViewDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/segment/parse/SegmentViewDeserializerTest.java
@@ -1,10 +1,10 @@
 package com.urbanairship.api.segment.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.push.model.audience.Selector;
 import com.urbanairship.api.push.model.audience.Selectors;
 import com.urbanairship.api.segments.model.SegmentView;
 import com.urbanairship.api.segments.parse.SegmentObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/staticlists/StaticListDownloadRequestTest.java b/src/test/java/com/urbanairship/api/staticlists/StaticListDownloadRequestTest.java
index 8b6f3a5..4def677 100644
--- a/src/test/java/com/urbanairship/api/staticlists/StaticListDownloadRequestTest.java
+++ b/src/test/java/com/urbanairship/api/staticlists/StaticListDownloadRequestTest.java
@@ -1,10 +1,10 @@
 package com.urbanairship.api.staticlists;
 
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.net.HttpHeaders;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.staticlists.parse.StaticListsObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
diff --git a/src/test/java/com/urbanairship/api/staticlists/StaticListListingRequestTest.java b/src/test/java/com/urbanairship/api/staticlists/StaticListListingRequestTest.java
index 6d18eba..2969e0b 100644
--- a/src/test/java/com/urbanairship/api/staticlists/StaticListListingRequestTest.java
+++ b/src/test/java/com/urbanairship/api/staticlists/StaticListListingRequestTest.java
@@ -1,11 +1,11 @@
 package com.urbanairship.api.staticlists;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.net.HttpHeaders;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.client.ResponseParser;
 import com.urbanairship.api.staticlists.model.StaticListListingResponse;
 import com.urbanairship.api.staticlists.parse.StaticListsObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Before;
 import org.junit.Test;
 
diff --git a/src/test/java/com/urbanairship/api/staticlists/StaticListLookupRequestTest.java b/src/test/java/com/urbanairship/api/staticlists/StaticListLookupRequestTest.java
index f88a530..a7c6a15 100644
--- a/src/test/java/com/urbanairship/api/staticlists/StaticListLookupRequestTest.java
+++ b/src/test/java/com/urbanairship/api/staticlists/StaticListLookupRequestTest.java
@@ -1,11 +1,11 @@
 package com.urbanairship.api.staticlists;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.net.HttpHeaders;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.client.ResponseParser;
 import com.urbanairship.api.staticlists.model.StaticListView;
 import com.urbanairship.api.staticlists.parse.StaticListsObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Before;
 import org.junit.Test;
 
diff --git a/src/test/java/com/urbanairship/api/staticlists/StaticListRequestTest.java b/src/test/java/com/urbanairship/api/staticlists/StaticListRequestTest.java
index 2877725..34e8f2d 100644
--- a/src/test/java/com/urbanairship/api/staticlists/StaticListRequestTest.java
+++ b/src/test/java/com/urbanairship/api/staticlists/StaticListRequestTest.java
@@ -1,10 +1,10 @@
 package com.urbanairship.api.staticlists;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.net.HttpHeaders;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.staticlists.parse.StaticListsObjectMapper;
 import org.apache.http.entity.ContentType;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Before;
 import org.junit.Test;
 
diff --git a/src/test/java/com/urbanairship/api/staticlists/StaticListUploadRequestTest.java b/src/test/java/com/urbanairship/api/staticlists/StaticListUploadRequestTest.java
index 9506304..f3c9d0f 100644
--- a/src/test/java/com/urbanairship/api/staticlists/StaticListUploadRequestTest.java
+++ b/src/test/java/com/urbanairship/api/staticlists/StaticListUploadRequestTest.java
@@ -1,10 +1,10 @@
 package com.urbanairship.api.staticlists;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.net.HttpHeaders;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.staticlists.parse.StaticListsObjectMapper;
 import org.apache.http.entity.ContentType;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Before;
 import org.junit.Test;
 
diff --git a/src/test/java/com/urbanairship/api/staticlists/parse/StaticListListingResponseDeserializerTest.java b/src/test/java/com/urbanairship/api/staticlists/parse/StaticListListingResponseDeserializerTest.java
index 2d5527e..b9a2458 100644
--- a/src/test/java/com/urbanairship/api/staticlists/parse/StaticListListingResponseDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/staticlists/parse/StaticListListingResponseDeserializerTest.java
@@ -1,11 +1,11 @@
 package com.urbanairship.api.staticlists.parse;
 
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.base.Optional;
 import com.urbanairship.api.common.parse.DateFormats;
 import com.urbanairship.api.staticlists.model.StaticListListingResponse;
 import com.urbanairship.api.staticlists.model.StaticListView;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.joda.time.DateTime;
 import org.junit.Test;
 
diff --git a/src/test/java/com/urbanairship/api/staticlists/parse/StaticListViewDeserializerTest.java b/src/test/java/com/urbanairship/api/staticlists/parse/StaticListViewDeserializerTest.java
index 16918f4..48ec178 100644
--- a/src/test/java/com/urbanairship/api/staticlists/parse/StaticListViewDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/staticlists/parse/StaticListViewDeserializerTest.java
@@ -1,9 +1,9 @@
 package com.urbanairship.api.staticlists.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.base.Optional;
 import com.urbanairship.api.common.parse.DateFormats;
 import com.urbanairship.api.staticlists.model.StaticListView;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.joda.time.DateTime;
 import org.junit.Test;
 
diff --git a/src/test/java/com/urbanairship/api/templates/TemplateDeleteRequestTest.java b/src/test/java/com/urbanairship/api/templates/TemplateDeleteRequestTest.java
index e77cd97..56406e6 100644
--- a/src/test/java/com/urbanairship/api/templates/TemplateDeleteRequestTest.java
+++ b/src/test/java/com/urbanairship/api/templates/TemplateDeleteRequestTest.java
@@ -1,11 +1,11 @@
 package com.urbanairship.api.templates;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.net.HttpHeaders;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.client.ResponseParser;
 import com.urbanairship.api.templates.model.TemplateResponse;
 import com.urbanairship.api.templates.parse.TemplatesObjectMapper;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
diff --git a/src/test/java/com/urbanairship/api/templates/TemplateListingRequestTest.java b/src/test/java/com/urbanairship/api/templates/TemplateListingRequestTest.java
index 0210b27..5db9a07 100644
--- a/src/test/java/com/urbanairship/api/templates/TemplateListingRequestTest.java
+++ b/src/test/java/com/urbanairship/api/templates/TemplateListingRequestTest.java
@@ -1,11 +1,11 @@
 package com.urbanairship.api.templates;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.client.ResponseParser;
 import com.urbanairship.api.templates.model.TemplateListingResponse;
 import com.urbanairship.api.templates.parse.TemplatesObjectMapper;
 import org.apache.http.HttpHeaders;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
diff --git a/src/test/java/com/urbanairship/api/templates/TemplatePushRequestTest.java b/src/test/java/com/urbanairship/api/templates/TemplatePushRequestTest.java
index 013f22e..9a0502c 100644
--- a/src/test/java/com/urbanairship/api/templates/TemplatePushRequestTest.java
+++ b/src/test/java/com/urbanairship/api/templates/TemplatePushRequestTest.java
@@ -1,5 +1,6 @@
 package com.urbanairship.api.templates;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.client.ResponseParser;
 import com.urbanairship.api.push.model.DeviceType;
@@ -11,7 +12,6 @@ import com.urbanairship.api.templates.model.TemplateSelector;
 import com.urbanairship.api.templates.parse.TemplatesObjectMapper;
 import org.apache.http.HttpHeaders;
 import org.apache.http.entity.ContentType;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Before;
 import org.junit.Test;
 
diff --git a/src/test/java/com/urbanairship/api/templates/TemplateRequestTest.java b/src/test/java/com/urbanairship/api/templates/TemplateRequestTest.java
index ac2ec74..dd46380 100644
--- a/src/test/java/com/urbanairship/api/templates/TemplateRequestTest.java
+++ b/src/test/java/com/urbanairship/api/templates/TemplateRequestTest.java
@@ -1,5 +1,8 @@
 package com.urbanairship.api.templates;
 
+import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import com.urbanairship.api.client.Request;
 import com.urbanairship.api.client.ResponseParser;
 import com.urbanairship.api.push.model.notification.Notification;
@@ -10,8 +13,6 @@ import com.urbanairship.api.templates.model.TemplateView;
 import com.urbanairship.api.templates.parse.TemplatesObjectMapper;
 import org.apache.http.HttpHeaders;
 import org.apache.http.entity.ContentType;
-import org.codehaus.jackson.map.ObjectMapper;
-import org.codehaus.jackson.map.annotate.JsonSerialize;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -23,7 +24,7 @@ import java.util.Map;
 import static junit.framework.Assert.assertEquals;
 
 public class TemplateRequestTest {
-    private final static ObjectMapper mapper = TemplatesObjectMapper.getInstance().setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL);
+    private final static ObjectMapper mapper = TemplatesObjectMapper.getInstance().setSerializationInclusion(JsonInclude.Include.NON_NULL);
     private final static String CREATE_UPDATE_TEMPLATE = "/api/templates/";
     private final static String TEMPLATE_NAME = "abc123";
 
diff --git a/src/test/java/com/urbanairship/api/templates/parse/PartialPushPayloadDeserializerTest.java b/src/test/java/com/urbanairship/api/templates/parse/PartialPushPayloadDeserializerTest.java
index f699b58..9c4cea5 100644
--- a/src/test/java/com/urbanairship/api/templates/parse/PartialPushPayloadDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/templates/parse/PartialPushPayloadDeserializerTest.java
@@ -1,7 +1,7 @@
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.templates.model.PartialPushPayload;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertFalse;
diff --git a/src/test/java/com/urbanairship/api/templates/parse/PartialPushPayloadSerializerTest.java b/src/test/java/com/urbanairship/api/templates/parse/PartialPushPayloadSerializerTest.java
index 150d9c7..c3ca5a8 100644
--- a/src/test/java/com/urbanairship/api/templates/parse/PartialPushPayloadSerializerTest.java
+++ b/src/test/java/com/urbanairship/api/templates/parse/PartialPushPayloadSerializerTest.java
@@ -1,9 +1,9 @@
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.push.model.InApp;
 import com.urbanairship.api.push.model.notification.Notification;
 import com.urbanairship.api.templates.model.PartialPushPayload;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static junit.framework.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/templates/parse/TemplatePushPayloadSerializerTest.java b/src/test/java/com/urbanairship/api/templates/parse/TemplatePushPayloadSerializerTest.java
index 16e8dcd..a90d89d 100644
--- a/src/test/java/com/urbanairship/api/templates/parse/TemplatePushPayloadSerializerTest.java
+++ b/src/test/java/com/urbanairship/api/templates/parse/TemplatePushPayloadSerializerTest.java
@@ -1,12 +1,12 @@
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.push.model.DeviceType;
 import com.urbanairship.api.push.model.DeviceTypeData;
 import com.urbanairship.api.push.model.audience.Selectors;
 import com.urbanairship.api.templates.model.TemplatePushPayload;
 import com.urbanairship.api.templates.model.TemplateSelector;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static junit.framework.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/templates/parse/TemplateResponseDeserializerTest.java b/src/test/java/com/urbanairship/api/templates/parse/TemplateResponseDeserializerTest.java
index 1973a60..6e4b8dd 100644
--- a/src/test/java/com/urbanairship/api/templates/parse/TemplateResponseDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/templates/parse/TemplateResponseDeserializerTest.java
@@ -1,7 +1,7 @@
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.templates.model.TemplateResponse;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/templates/parse/TemplateSelectorSerializerTest.java b/src/test/java/com/urbanairship/api/templates/parse/TemplateSelectorSerializerTest.java
index f34de13..f492949 100644
--- a/src/test/java/com/urbanairship/api/templates/parse/TemplateSelectorSerializerTest.java
+++ b/src/test/java/com/urbanairship/api/templates/parse/TemplateSelectorSerializerTest.java
@@ -1,8 +1,8 @@
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.templates.model.TemplateSelector;
-import org.codehaus.jackson.JsonNode;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static junit.framework.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/templates/parse/TemplateVariableDeserializerTest.java b/src/test/java/com/urbanairship/api/templates/parse/TemplateVariableDeserializerTest.java
index b808e24..43d4da7 100644
--- a/src/test/java/com/urbanairship/api/templates/parse/TemplateVariableDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/templates/parse/TemplateVariableDeserializerTest.java
@@ -1,7 +1,7 @@
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.templates.model.TemplateVariable;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/templates/parse/TemplateVariableSerializerTest.java b/src/test/java/com/urbanairship/api/templates/parse/TemplateVariableSerializerTest.java
index ba0210b..e461051 100644
--- a/src/test/java/com/urbanairship/api/templates/parse/TemplateVariableSerializerTest.java
+++ b/src/test/java/com/urbanairship/api/templates/parse/TemplateVariableSerializerTest.java
@@ -1,7 +1,7 @@
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.templates.model.TemplateVariable;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static junit.framework.Assert.assertEquals;
diff --git a/src/test/java/com/urbanairship/api/templates/parse/TemplateViewDeserializerTest.java b/src/test/java/com/urbanairship/api/templates/parse/TemplateViewDeserializerTest.java
index 754b96c..24a3290 100644
--- a/src/test/java/com/urbanairship/api/templates/parse/TemplateViewDeserializerTest.java
+++ b/src/test/java/com/urbanairship/api/templates/parse/TemplateViewDeserializerTest.java
@@ -1,7 +1,7 @@
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.templates.model.TemplateView;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.joda.time.DateTime;
 import org.junit.Test;
 
diff --git a/src/test/java/com/urbanairship/api/templates/parse/TemplateViewSerializerTest.java b/src/test/java/com/urbanairship/api/templates/parse/TemplateViewSerializerTest.java
index 872d860..fe217ab 100644
--- a/src/test/java/com/urbanairship/api/templates/parse/TemplateViewSerializerTest.java
+++ b/src/test/java/com/urbanairship/api/templates/parse/TemplateViewSerializerTest.java
@@ -1,10 +1,10 @@
 package com.urbanairship.api.templates.parse;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.urbanairship.api.push.model.notification.Notification;
 import com.urbanairship.api.templates.model.PartialPushPayload;
 import com.urbanairship.api.templates.model.TemplateVariable;
 import com.urbanairship.api.templates.model.TemplateView;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
 
 import static junit.framework.Assert.assertEquals;
