diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java
index 5c5a208..96e71bb 100644
--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java
+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java
@@ -31,6 +31,7 @@ import org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState;
 import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;
 import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;
 import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine;
+import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle;
 import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary;
 import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry;
 import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream;
@@ -500,4 +501,34 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler
                 -bbox.getLowerLeftY());
         appearanceStream.setMatrix(transform);
     }
+
+    PDRectangle handleBorderBox(PDAnnotationSquareCircle annotation, float lineWidth)
+    {
+        // There are two options. The handling is not part of the PDF specification but
+        // implementation specific to Adobe Reader
+        // - if /RD is set the border box is the /Rect entry inset by the respective
+        //   border difference.
+        // - if /RD is not set the border box is defined by the /Rect entry. The /RD entry will
+        //   be set to be the line width and the /Rect is enlarged by the /RD amount
+        PDRectangle borderBox;
+        float[] rectDifferences = annotation.getRectDifferences();
+        if (rectDifferences.length == 0)
+        {
+            borderBox = getPaddedRectangle(getRectangle(), lineWidth / 2);
+            // the differences rectangle
+            annotation.setRectDifferences(lineWidth / 2);
+            annotation.setRectangle(addRectDifferences(getRectangle(), annotation.getRectDifferences()));
+            // when the normal appearance stream was generated BBox and Matrix have been set to the
+            // values of the original /Rect. As the /Rect was changed that needs to be adjusted too.
+            annotation.getNormalAppearanceStream().setBBox(getRectangle());
+            AffineTransform transform = AffineTransform.getTranslateInstance(-getRectangle().getLowerLeftX(), -getRectangle().getLowerLeftY());
+            annotation.getNormalAppearanceStream().setMatrix(transform);
+        }
+        else
+        {
+            borderBox = applyRectDifferences(getRectangle(), rectDifferences);
+            borderBox = getPaddedRectangle(borderBox, lineWidth / 2);
+        }
+        return borderBox;
+    }
 }
diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCircleAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCircleAppearanceHandler.java
index 2e96fe4..ad2d6e0 100644
--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCircleAppearanceHandler.java
+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCircleAppearanceHandler.java
@@ -29,6 +29,7 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;
 import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCircle;
 import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;
 import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup;
+import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle;
 import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream;
 import org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary;
 import org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary;
@@ -86,38 +87,7 @@ public class PDCircleAppearanceHandler extends PDAbstractAppearanceHandler
                 // Acrobat applies a padding to each side of the bbox so the line is completely within
                 // the bbox.
 
-                // handle the border box
-                //
-                // There are two options. The handling is not part of the PDF specification but
-                // implementation specific to Adobe Reader
-                // - if /RD is set the border box is the /Rect entry inset by the respective
-                //   border difference.
-                // - if /RD is not set the border box is defined by the /Rect entry. The /RD entry will
-                //   be set to be the line width and the /Rect is enlarged by the /RD amount
-
-                PDRectangle borderBox;
-                float[] rectDifferences = annotation.getRectDifferences();
-
-                //TODO DRY refactor, this block was been copied from the square handler. 
-                if (rectDifferences.length == 0)
-                {
-                    borderBox = getPaddedRectangle(getRectangle(), lineWidth/2);
-                    // the differences rectangle
-                    annotation.setRectDifferences(lineWidth/2);
-                    annotation.setRectangle(addRectDifferences(getRectangle(), annotation.getRectDifferences()));
-
-                    // when the normal appearance stream was generated BBox and Matrix have been set to the
-                    // values of the original /Rect. As the /Rect was changed that needs to be adjusted too.
-                    annotation.getNormalAppearanceStream().setBBox(getRectangle());
-                    AffineTransform transform = AffineTransform.getTranslateInstance(-getRectangle().getLowerLeftX(),
-                            -getRectangle().getLowerLeftY());
-                    annotation.getNormalAppearanceStream().setMatrix(transform);
-                }
-                else
-                {
-                    borderBox = applyRectDifferences(getRectangle(), rectDifferences);
-                    borderBox = getPaddedRectangle(borderBox, lineWidth/2);
-                }
+                PDRectangle borderBox = handleBorderBox(annotation, lineWidth);
 
                 // lower left corner
                 float x0 = borderBox.getLowerLeftX();
diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java
index f82b0b8..2c5684f 100644
--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java
+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java
@@ -30,6 +30,7 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;
 import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquare;
 import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;
 import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationMarkup;
+import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle;
 import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream;
 import org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary;
 import org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary;
@@ -84,37 +85,8 @@ public class PDSquareAppearanceHandler extends PDAbstractAppearanceHandler
             }
             else
             {
-                // handle the border box
-                //
-                // There are two options. The handling is not part of the PDF specification but
-                // implementation specific to Adobe Reader
-                // - if /RD is set the border box is the /Rect entry inset by the respective
-                //   border difference.
-                // - if /RD is not set the border box is defined by the /Rect entry. The /RD entry will
-                //   be set to be the line width and the /Rect is enlarged by the /RD amount
-
-                PDRectangle borderBox;
-                float[] rectDifferences = annotation.getRectDifferences();
-
-                if (rectDifferences.length == 0)
-                {
-                    borderBox = getPaddedRectangle(getRectangle(), lineWidth/2);
-                    // the differences rectangle
-                    annotation.setRectDifferences(lineWidth/2);
-                    annotation.setRectangle(addRectDifferences(getRectangle(), annotation.getRectDifferences()));
-
-                    // when the normal appearance stream was generated BBox and Matrix have been set to the
-                    // values of the original /Rect. As the /Rect was changed that needs to be adjusted too.
-                    annotation.getNormalAppearanceStream().setBBox(getRectangle());
-                    AffineTransform transform = AffineTransform.getTranslateInstance(-getRectangle().getLowerLeftX(),
-                            -getRectangle().getLowerLeftY());
-                    annotation.getNormalAppearanceStream().setMatrix(transform);
-                }
-                else
-                {
-                    borderBox = applyRectDifferences(getRectangle(), rectDifferences);
-                    borderBox = getPaddedRectangle(borderBox, lineWidth/2);
-                }
+
+                PDRectangle borderBox = handleBorderBox(annotation, lineWidth);
 
                 contentStream.addRect(borderBox.getLowerLeftX(), borderBox.getLowerLeftY(),
                         borderBox.getWidth(), borderBox.getHeight());
