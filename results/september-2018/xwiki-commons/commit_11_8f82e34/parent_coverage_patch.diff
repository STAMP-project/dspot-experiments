diff --git a/Jenkinsfile b/Jenkinsfile
new file mode 100644
index 0000000..fd2965e
--- /dev/null
+++ b/Jenkinsfile
@@ -0,0 +1,93 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+
+// It's assumed that Jenkins has been configured to implicitly load the vars/*.groovy libraries.
+// Note that the version used is the one defined in Jenkins but it can be overridden as follows:
+// @Library("XWiki@<branch, tag, sha1>") _
+// See https://github.com/jenkinsci/workflow-cps-global-lib-plugin for details.
+
+def globalMavenOpts = '-Xmx1024m -Xms256m'
+
+stage ('Commons Builds') {
+  parallel(
+    'main': {
+      node {
+        // Build, skipping quality checks so that the result of the build can be sent as fast as possible to the devs.
+        // In addition, we want the generated artifacts to be deployed to our remote Maven repository so that developers
+        // can benefit from them even though some quality checks have not yet passed. In // we start a build with the
+        // quality profile that executes various quality checks.
+        xwikiBuild('Main') {
+          xvnc = false
+          mavenOpts = globalMavenOpts
+          profiles = 'legacy,integration-tests'
+          properties = '-Dxwiki.checkstyle.skip=true -Dxwiki.surefire.captureconsole.skip=true -Dxwiki.revapi.skip=true'
+        }
+      }
+
+      // If the "main" build has succeeded then trigger the rendering pipeline
+      build job: "../xwiki-rendering/${env.BRANCH_NAME}", wait: false
+    },
+    'testrelease': {
+      node {
+        // Simulate a release and verify all is fine, in preparation for the release day.
+        xwikiBuild('TestRelease') {
+          xvnc = false
+          mavenOpts = globalMavenOpts
+          goals = 'clean install'
+          profiles = 'legacy,integration-tests'
+          properties = '-DskipTests -DperformRelease=true -Dgpg.skip=true -Dxwiki.checkstyle.skip=true'
+        }
+      }
+    },
+    'quality': {
+      node {
+        // Run the quality checks.
+        xwikiBuild('Quality') {
+          xvnc = false
+          mavenOpts = globalMavenOpts
+          goals = 'clean install jacoco:report'
+          profiles = 'quality,legacy'
+        }
+      }
+    },
+    'checkstyle': {
+      node {
+        // Build with checkstyle. Make sure "mvn checkstyle:check" passes so that we don't cause false positive on
+        // Checkstyle side. This is for the Checkstyle project itself so that they can verify that when they bring
+        // changes to Checkstyle, there's no regression to the XWiki build.
+        xwikiBuild('Checkstyle') {
+          xvnc = false
+          mavenOpts = globalMavenOpts
+          goals = 'clean test-compile checkstyle:check'
+          profiles = 'legacy'
+        }
+      }
+    }
+  )
+
+  // If the job is successful, trigger the rendering job
+  if (currentBuild.result == 'SUCCESS') {
+    build job: "../xwiki-rendering/${env.BRANCH_NAME}", wait: false
+  }
+}
+
+
+
+
diff --git a/build.gradle b/build.gradle
index be6582f..d85ae43 100644
--- a/build.gradle
+++ b/build.gradle
@@ -21,17 +21,19 @@
 // WARNING: NOT WORKING, WORK IN PROGRESS. USE THE MAVEN BUILD WHICH IS THE XWIKI OFFICIAL BUILD TOOL.
 
 ext {
-    junitVersion = '4.12'
+    junit4Version = '4.12'
+    junit5Version = '5.2.0'
     slf4jVersion =  '1.7.25'
-    commonsLang3Version = '3.5'
-    mockitoVersion= '2.6.3'
+    commonsLang3Version = '3.7'
+    mockitoVersion= '2.18.3'
 }
 
 allprojects {
     group = 'org.xwiki.commons'
-    version = '9.3-SNAPSHOT'
+    version = '10.5-SNAPSHOT'
 
     apply plugin: 'java'
+    apply plugin: 'java-library'
     apply plugin: 'maven'
 
     sourceCompatibility = 1.8
@@ -42,6 +44,9 @@ allprojects {
     }
 
     dependencies {
-        testCompile "junit:junit:${junitVersion}"
+        testImplementation "org.junit.jupiter:junit-jupiter-api:${junit5Version}"
+        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit5Version}"
+        testCompileOnly "junit:junit:${junit4Version}"
+        testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${junit5Version}"
     }
 }
diff --git a/pom.xml b/pom.xml
index b1213c1..0490b3d 100644
--- a/pom.xml
+++ b/pom.xml
@@ -24,12 +24,12 @@
   <artifactId>xwiki-commons</artifactId>
   <name>XWiki Commons - Parent POM</name>
   <packaging>pom</packaging>
-  <version>9.10-SNAPSHOT</version>
+  <version>10.9-SNAPSHOT</version>
   <description>A collaborative development platform runtime based on the wiki paradigm</description>
   <!-- This special URL automatically finds the correct documentation page or javadoc for the module based on the
        passed maven coordinates (groupid:artifactid:version). Starting with 6.2-milestone-1, the version has been
        added to better support javadoc links.
-       It allows to have a single URL definition in this top level POM and still get valid website URLs for all
+       It allows to have a single URL definition in this top-level POM and still get valid website URLs for all
        modules.
        Note that we're ending the URL with ":::" for the following reasons:
        - Since we don't overwrite the <url> element in children POM, Maven automatically appends the relative path
@@ -46,20 +46,20 @@
   <properties>
     <!-- Define it here because we can't use ${project.version} for plugins and it's useful for
          commons children anyway -->
-    <commons.version>9.10-SNAPSHOT</commons.version>
+    <commons.version>10.9-SNAPSHOT</commons.version>
 
     <!-- The previous stable version of this project to check against for finding backward incompatibility
          (binary and source). -->
-    <xwiki.compatibility.previous.version>9.9</xwiki.compatibility.previous.version>
+    <xwiki.compatibility.previous.version>10.7</xwiki.compatibility.previous.version>
 
     <!-- Java -->
     <java.version>1.8</java.version>
 
     <!-- Jackson -->
-    <jackson.version>2.9.1</jackson.version>
+    <jackson.version>2.9.7</jackson.version>
 
     <!-- ASM -->
-    <asm.version>5.2</asm.version>
+    <asm.version>6.2.1</asm.version>
 
     <!-- Selenium -->
     <selenium.version>2.44.0</selenium.version>
@@ -72,34 +72,43 @@
 
     <!-- JUnit -->
     <junit.version>4.12</junit.version>
-    <junit5.version>5.0.1</junit5.version>
-    <junit.platform.version>1.0.1</junit.platform.version>
-    <junit.vintage.version>4.12.1</junit.vintage.version>
+    <junit5.version>5.3.1</junit5.version>
+    <junit.platform.version>1.3.1</junit.platform.version>
+    <junit.vintage.version>5.3.1</junit.vintage.version>
+
+    <!-- Used to keep the surefire and failsafe plugins in sync (to avoid having different behaviors when tests
+         are executed with surefire or failsafe) -->
+    <surefire.version>2.22.0</surefire.version>
 
     <!-- Mock libraries -->
     <jmock.version>2.6.0</jmock.version>
-    <mockito.version>2.10.0</mockito.version>
+    <mockito.version>2.23.0</mockito.version>
 
     <!-- AspectJ -->
-    <aspectj.version>1.8.11</aspectj.version>
+    <aspectj.version>1.9.1</aspectj.version>
 
     <!-- Clover & Jacoco -->
-    <clover.version>4.1.2</clover.version>
-    <jacoco.version>0.7.9</jacoco.version>
+    <clover.version>4.3.1</clover.version>
+    <jacoco.version>0.8.2</jacoco.version>
 
     <!-- Checkstyle -->
-    <checkstyle.version>8.3</checkstyle.version>
+    <checkstyle.version>8.13</checkstyle.version>
 
     <!-- Spoon -->
-    <spoon.version>5.9.0</spoon.version>
+    <spoon.version>7.0.0</spoon.version>
+
+    <!-- Groovy -->
+    <groovy.version>2.5.2</groovy.version>
 
-    <!-- By default Checkstyle, Backward compatibility check, Enforcer and License plugins are on -->
+    <!-- By default Checkstyle, Backward compatibility check, Enforcer, License plugins, etc are on -->
     <xwiki.checkstyle.skip>false</xwiki.checkstyle.skip>
     <xwiki.revapi.skip>false</xwiki.revapi.skip>
     <xwiki.enforcer.skip>false</xwiki.enforcer.skip>
     <xwiki.enforcer.enforce-plugins.skip>${xwiki.enforcer.skip}</xwiki.enforcer.enforce-plugins.skip>
     <xwiki.enforcer.enforce-jcl-log4j-isolation.skip>${xwiki.enforcer.skip}</xwiki.enforcer.enforce-jcl-log4j-isolation.skip>
     <xwiki.enforcer.enforce-glasshfish-jaxb.skip>${xwiki.enforcer.skip}</xwiki.enforcer.enforce-glasshfish-jaxb.skip>
+    <xwiki.enforcer.enforce-open-json.skip>${xwiki.enforcer.skip}</xwiki.enforcer.enforce-open-json.skip>
+    <xwiki.enforcer.enforce-glassfish-el.skip>${xwiki.enforcer.skip}</xwiki.enforcer.enforce-glassfish-el.skip>
     <xwiki.enforcer.enforce-commons-lang3.skip>${xwiki.enforcer.skip}</xwiki.enforcer.enforce-commons-lang3.skip>
     <xwiki.enforcer.enforce-commons-configuration2.skip>${xwiki.enforcer.skip}</xwiki.enforcer.enforce-commons-configuration2.skip>
     <xwiki.enforcer.enforce-bouncycastle-ids.skip>${xwiki.enforcer.skip}</xwiki.enforcer.enforce-bouncycastle-ids.skip>
@@ -108,13 +117,29 @@
     <xwiki.enforcer.enforce-java.skip>${xwiki.enforcer.skip}</xwiki.enforcer.enforce-java.skip>
     <xwiki.license.skip>false</xwiki.license.skip>
 
+    <!-- By default we don't run pitest/descartes since it's taking too long to execute to be executed after all
+         commits. Thus the idea is that the CI will set this as a system property to run it using a scheduler. It can
+         also be execute locally by running "mvn install -Pquality -Dxwiki.pitest.skip=false" -->
+    <xwiki.pitest.skip>true</xwiki.pitest.skip>
+
     <!-- Enable by default auto release on Jira -->
     <xwiki.release.jira.skip>false</xwiki.release.jira.skip>
+    <xwiki.release.jira.settingsKey>jira.xwiki.org</xwiki.release.jira.settingsKey>
+    <xwiki.release.jira.scope>session</xwiki.release.jira.scope>
 
     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
 
-    <!-- Functional UI tests should not check if an XWiki instance is already running before starting XWiki since
-         performing this check would delay the build and there should be no running instance when the build executes -->
+    <!-- When this property is set to true then functional tests will check if an XWiki instance is already running
+         before trying to start XWiki and if so, reuse it and don't start XWiki. This is useful for example when you
+         wish to manually execute functional tests on your machine and start XWiki manually rather than XWiki being
+         started by the tests.
+
+         When this property is set to false, then verify if some XWiki instance is already running by verifying if the
+         port is free and fail if so. Otherwise start XWiki.
+
+         By default it's set to false since functional UI tests should not check if an XWiki instance is already
+         running before starting XWiki since performing this check would delay the build and there should be no running
+         instance when the build executes. -->
     <xwiki.test.verifyRunningXWikiAtStart>false</xwiki.test.verifyRunningXWikiAtStart>
 
     <!-- Sonar/Jacoco integration. Note that these properties need to be defined outside the "coverage" profile
@@ -135,10 +160,11 @@
     <sonar.jacoco.itReportPath>${xwiki.jacoco.itDestFile}</sonar.jacoco.itReportPath>
 
     <!-- Version of Maven used at runtime (by Extension Manager mostly) -->
-    <maven.runtime.version>3.3.9</maven.runtime.version>
-    <!-- Minimum version of Maven supported at build time  -->
-    <!-- Custom lifecycle configuration (used by webjar handler for example) require 3.3.9 -->
-    <maven.buid.version>3.3.9</maven.buid.version>
+    <maven.runtime.version>3.5.4</maven.runtime.version>
+    <!-- Version of Maven used by the plugins  -->
+    <maven.build.version>3.5.4</maven.build.version>
+    <!-- Minimum version required -->
+    <maven.minimum.version>3.5.0</maven.minimum.version>
     <!--
       The version of Maven used when declaring dependencies.
       Use runtime version by default, overwrite it to change to build version (usually for Maven plugins)
@@ -163,7 +189,7 @@
     <xwiki.nexus.skipStaging>false</xwiki.nexus.skipStaging>
   </properties>
   <prerequisites>
-    <maven>${maven.buid.version}</maven>
+    <maven>${maven.minimum.version}</maven>
   </prerequisites>
   <licenses>
     <license>
@@ -230,7 +256,7 @@
       <dependency>
         <groupId>org.apache.commons</groupId>
         <artifactId>commons-lang3</artifactId>
-        <version>3.6</version>
+        <version>3.8.1</version>
       </dependency>
       <!-- We don't use Commons Lang 2.x ourselves (we use Commons Lang 3.x) but some of our transitive dependencies
            require Commons Lang. The issue is that Maven uses a "closest-to-root" strategy to resolve dependency
@@ -246,7 +272,7 @@
       <dependency>
         <groupId>org.apache.commons</groupId>
         <artifactId>commons-collections4</artifactId>
-        <version>4.1</version>
+        <version>4.2</version>
       </dependency>
       <dependency>
         <groupId>commons-collections</groupId>
@@ -256,7 +282,7 @@
       <dependency>
         <groupId>commons-io</groupId>
         <artifactId>commons-io</artifactId>
-        <version>2.5</version>
+        <version>2.6</version>
       </dependency>
       <dependency>
         <groupId>org.apache.commons</groupId>
@@ -276,13 +302,13 @@
       <dependency>
         <groupId>org.apache.commons</groupId>
         <artifactId>commons-text</artifactId>
-        <version>1.1</version>
+        <version>1.5</version>
       </dependency>
       <!-- Apache HttpComponents -->
       <dependency>
         <groupId>org.apache.httpcomponents</groupId>
         <artifactId>httpclient</artifactId>
-        <version>4.5.3</version>
+        <version>4.5.6</version>
         <!-- We want to choose the SLF4J binding only when XWiki is packaged. -->
         <exclusions>
           <exclusion>
@@ -294,22 +320,22 @@
       <dependency>
         <groupId>org.apache.httpcomponents</groupId>
         <artifactId>httpmime</artifactId>
-        <version>4.5.3</version>
+        <version>4.5.6</version>
       </dependency>
       <dependency>
         <groupId>org.apache.httpcomponents</groupId>
         <artifactId>httpcore</artifactId>
-        <version>4.4.8</version>
+        <version>4.4.10</version>
       </dependency>
       <dependency>
         <groupId>org.apache.httpcomponents</groupId>
         <artifactId>httpcore-nio</artifactId>
-        <version>4.4.8</version>
+        <version>4.4.10</version>
       </dependency>
       <dependency>
         <groupId>org.apache.httpcomponents</groupId>
         <artifactId>httpasyncclient</artifactId>
-        <version>4.1.3</version>
+        <version>4.1.4</version>
       </dependency>
       <!-- Old httpclient -->
       <dependency>
@@ -327,7 +353,8 @@
       <dependency>
         <groupId>org.apache.commons</groupId>
         <artifactId>commons-dbcp2</artifactId>
-        <version>2.1.1</version>
+        <!-- DBCP2 requires JDBC 4.1 starting with 2.4.0 and JDBC 4.2 with 2.5.0 -->
+        <version>2.3.0</version>
         <!-- We want to choose the SLF4J binding only when XWiki is packaged. -->
         <exclusions>
           <exclusion>
@@ -344,7 +371,7 @@
       <dependency>
         <groupId>commons-codec</groupId>
         <artifactId>commons-codec</artifactId>
-        <version>1.10</version>
+        <version>1.11</version>
       </dependency>
       <dependency>
         <groupId>commons-beanutils</groupId>
@@ -374,7 +401,7 @@
       <dependency>
         <groupId>org.apache.commons</groupId>
         <artifactId>commons-configuration2</artifactId>
-        <version>2.2</version>
+        <version>2.3</version>
          <!-- We want to choose the SLF4J binding only when XWiki is packaged. -->
          <exclusions>
            <exclusion>
@@ -386,7 +413,7 @@
       <dependency>
         <groupId>org.apache.commons</groupId>
         <artifactId>commons-compress</artifactId>
-        <version>1.14</version>
+        <version>1.18</version>
       </dependency>
       <dependency>
         <groupId>commons-validator</groupId>
@@ -403,7 +430,7 @@
       <dependency>
         <groupId>org.tukaani</groupId>
         <artifactId>xz</artifactId>
-        <version>1.6</version>
+        <version>1.8</version>
       </dependency>
 
       <!-- XML processing -->
@@ -419,7 +446,9 @@
       <dependency>
         <groupId>org.dom4j</groupId>
         <artifactId>dom4j</artifactId>
-        <version>2.0.0</version>
+        <!-- Note: We cannot upgrade to 2.1.1 since it has an important regression, see
+             https://github.com/dom4j/dom4j/issues/51 -->
+        <version>2.1.0</version>
       </dependency>
       <dependency>
         <groupId>org.jdom</groupId>
@@ -457,7 +486,7 @@
       <dependency>
         <groupId>xerces</groupId>
         <artifactId>xercesImpl</artifactId>
-        <version>2.11.0</version>
+        <version>2.12.0</version>
       </dependency>
       <!-- xerces require this version of xml-apis -->
       <dependency>
@@ -479,12 +508,17 @@
       <dependency>
         <groupId>org.codehaus.woodstox</groupId>
         <artifactId>stax2-api</artifactId>
-        <version>3.1.4</version>
+        <version>4.1</version>
       </dependency>
       <dependency>
         <groupId>com.fasterxml.woodstox</groupId>
         <artifactId>woodstox-core</artifactId>
-        <version>5.0.3</version>
+        <version>5.1.0</version>
+      </dependency>
+      <dependency>
+        <groupId>jaxen</groupId>
+        <artifactId>jaxen</artifactId>
+        <version>1.1.6</version>
       </dependency>
       <dependency>
         <groupId>org.simpleframework</groupId>
@@ -512,12 +546,12 @@
       <dependency>
         <groupId>org.glassfish.jaxb</groupId>
         <artifactId>jaxb-runtime</artifactId>
-        <version>2.3.0</version>
+        <version>2.3.0.1</version>
       </dependency>
       <dependency>
         <groupId>org.glassfish.jaxb</groupId>
         <artifactId>jaxb-core</artifactId>
-        <version>2.3.0</version>
+        <version>2.3.0.1</version>
       </dependency>
 
       <!-- Json -->
@@ -534,15 +568,16 @@
           </exclusion>
         </exclusions>
       </dependency>
+      <!-- Replace org.json:json for license reasons -->
       <dependency>
-        <groupId>org.json</groupId>
+        <groupId>com.tdunning</groupId>
         <artifactId>json</artifactId>
-        <version>20170516</version>
+        <version>1.8</version>
       </dependency>
       <dependency>
         <groupId>com.google.code.gson</groupId>
         <artifactId>gson</artifactId>
-        <version>2.8.2</version>
+        <version>2.8.5</version>
       </dependency>
 
       <!-- Jackson -->
@@ -640,7 +675,7 @@
       <dependency>
         <groupId>org.yaml</groupId>
         <artifactId>snakeyaml</artifactId>
-        <version>1.18</version>
+        <version>1.23</version>
       </dependency>
 
       <!-- JAX-RS -->
@@ -661,17 +696,17 @@
       <dependency>
         <groupId>org.bouncycastle</groupId>
         <artifactId>bcprov-jdk15on</artifactId>
-        <version>1.58</version>
+        <version>1.60</version>
       </dependency>
       <dependency>
         <groupId>org.bouncycastle</groupId>
         <artifactId>bcpkix-jdk15on</artifactId>
-        <version>1.58</version>
+        <version>1.60</version>
       </dependency>
       <dependency>
         <groupId>org.bouncycastle</groupId>
         <artifactId>bcmail-jdk15on</artifactId>
-        <version>1.58</version>
+        <version>1.60</version>
       </dependency>
 
       <!-- Various project are using it to scan the classpath -->
@@ -681,13 +716,6 @@
         <version>0.9.11</version>
       </dependency>
 
-      <!-- netcdf 4.2-min wrongly embbeds jcip classes -->
-      <dependency>
-        <groupId>edu.ucar</groupId>
-        <artifactId>netcdf</artifactId>
-        <version>4.2.20</version>
-      </dependency>
-
       <!-- Used by reflections and other projects in commons, platform and rendering -->
       <!-- FIXME: Can't upgrade to Guava 21 because Solr 6.3.0 use a method that have been deleted in Guava 21... -->
       <dependency>
@@ -704,8 +732,63 @@
       <!-- Groovy engine. Used in both commons and platform -->
       <dependency>
         <groupId>org.codehaus.groovy</groupId>
-        <artifactId>groovy-all</artifactId>
-        <version>2.4.7</version>
+        <artifactId>groovy</artifactId>
+        <version>${groovy.version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.codehaus.groovy</groupId>
+        <artifactId>groovy-datetime</artifactId>
+        <version>${groovy.version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.codehaus.groovy</groupId>
+        <artifactId>groovy-jmx</artifactId>
+        <version>${groovy.version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.codehaus.groovy</groupId>
+        <artifactId>groovy-json</artifactId>
+        <version>${groovy.version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.codehaus.groovy</groupId>
+        <artifactId>groovy-jsr223</artifactId>
+        <version>${groovy.version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.codehaus.groovy</groupId>
+        <artifactId>groovy-macro</artifactId>
+        <version>${groovy.version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.codehaus.groovy</groupId>
+        <artifactId>groovy-nio</artifactId>
+        <version>${groovy.version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.codehaus.groovy</groupId>
+        <artifactId>groovy-servlet</artifactId>
+        <version>${groovy.version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.codehaus.groovy</groupId>
+        <artifactId>groovy-sql</artifactId>
+        <version>${groovy.version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.codehaus.groovy</groupId>
+        <artifactId>groovy-templates</artifactId>
+        <version>${groovy.version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.codehaus.groovy</groupId>
+        <artifactId>groovy-xml</artifactId>
+        <version>${groovy.version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.codehaus.groovy</groupId>
+        <artifactId>groovy-dateutil</artifactId>
+        <version>${groovy.version}</version>
       </dependency>
 
       <!-- Everybody logs -->
@@ -737,7 +820,7 @@
       <dependency>
         <groupId>org.jboss.logging</groupId>
         <artifactId>jboss-logging</artifactId>
-        <version>3.3.1.Final</version>
+        <version>3.3.2.Final</version>
       </dependency>
 
       <!-- Triggerd by several Maven related projects (Doxia, Maven, Aether) as transitive dependency -->
@@ -754,7 +837,7 @@
       <dependency>
         <groupId>org.codehaus.plexus</groupId>
         <artifactId>plexus-interpolation</artifactId>
-        <version>1.24</version>
+        <version>1.25</version>
       </dependency>
       <dependency>
         <groupId>org.codehaus.plexus</groupId>
@@ -769,7 +852,7 @@
       <dependency>
         <groupId>org.codehaus.plexus</groupId>
         <artifactId>plexus-archiver</artifactId>
-        <version>3.5</version>
+        <version>3.6.0</version>
       </dependency>
       <dependency>
         <groupId>org.codehaus.plexus</groupId>
@@ -777,6 +860,11 @@
         <version>2.5.2</version>
       </dependency>
       <dependency>
+        <groupId>org.sonatype.plexus</groupId>
+        <artifactId>plexus-sec-dispatcher</artifactId>
+        <version>1.4</version>
+      </dependency>
+      <dependency>
         <groupId>org.eclipse.sisu</groupId>
         <artifactId>org.eclipse.sisu.plexus</artifactId>
         <version>0.3.3</version>
@@ -797,11 +885,6 @@
       </dependency>
       <dependency>
         <groupId>org.apache.maven</groupId>
-        <artifactId>maven-aether-provider</artifactId>
-        <version>${maven.dependencies.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>org.apache.maven</groupId>
         <artifactId>maven-artifact</artifactId>
         <version>${maven.dependencies.version}</version>
       </dependency>
@@ -809,6 +892,13 @@
         <groupId>org.apache.maven</groupId>
         <artifactId>maven-core</artifactId>
         <version>${maven.dependencies.version}</version>
+        <exclusions>
+          <!-- Remove exclusion when https://jira.xwiki.org/browse/XCOMMONS-1155 is fixed -->
+          <exclusion>
+            <groupId>com.google.guava</groupId>
+            <artifactId>guava</artifactId>
+          </exclusion>
+        </exclusions>
       </dependency>
       <dependency>
         <groupId>org.apache.maven</groupId>
@@ -841,11 +931,21 @@
         <version>${maven.dependencies.version}</version>
       </dependency>
       <dependency>
+        <groupId>org.apache.maven</groupId>
+        <artifactId>maven-resolver-provider</artifactId>
+        <version>${maven.dependencies.version}</version>
+      </dependency>
+      <dependency>
         <groupId>org.apache.maven.plugin-tools</groupId>
         <artifactId>maven-plugin-annotations</artifactId>
-        <version>3.5</version>
+        <version>3.5.2</version>
         <scope>provided</scope>
       </dependency>
+      <dependency>
+        <groupId>org.apache.maven.shared</groupId>
+        <artifactId>maven-shared-utils</artifactId>
+        <version>3.2.1</version>
+      </dependency>
 
       <!-- Everybody tests -->
       <dependency>
@@ -926,7 +1026,7 @@
         <artifactId>objenesis</artifactId>
         <version>2.6</version>
       </dependency>
-      
+
       <dependency>
         <groupId>org.seleniumhq.selenium</groupId>
         <artifactId>selenium-java</artifactId>
@@ -964,7 +1064,7 @@
       <dependency>
         <groupId>net.sourceforge.cssparser</groupId>
         <artifactId>cssparser</artifactId>
-        <version>0.9.22</version>
+        <version>0.9.26</version>
       </dependency>
       <!-- Bean validation -->
       <dependency>
@@ -972,15 +1072,23 @@
         <artifactId>validation-api</artifactId>
         <version>1.1.0.Final</version>
       </dependency>
+      <dependency>
+        <groupId>org.hibernate</groupId>
+        <artifactId>hibernate-validator</artifactId>
+        <version>4.3.2.Final</version>
+        <scope>runtime</scope>
+      </dependency>
       <!-- Mail -->
+      <!-- Note that javamail.providers service seems broken in javax.mail 1.6.2 -->
       <dependency>
         <groupId>com.sun.mail</groupId>
         <artifactId>javax.mail</artifactId>
-        <version>1.6.0</version>
+        <version>1.6.1</version>
       </dependency>
       <dependency>
         <groupId>javax.activation</groupId>
         <artifactId>activation</artifactId>
+        <version>1.1.1</version>
       </dependency>
       <!-- Diff tools used in commons for diff and blame -->
       <dependency>
@@ -1020,7 +1128,7 @@
       <dependency>
         <groupId>javax.annotation</groupId>
         <artifactId>javax.annotation-api</artifactId>
-        <version>1.3.1</version>
+        <version>1.3.2</version>
       </dependency>
       <!-- ASM -->
       <dependency>
@@ -1060,13 +1168,6 @@
         <artifactId>antlr</artifactId>
         <version>2.7.7</version>
       </dependency>
-
-      <!-- OSGI -->
-      <dependency>
-        <groupId>org.osgi</groupId>
-        <artifactId>org.osgi.core</artifactId>
-        <version>6.0.0</version>
-      </dependency>
     </dependencies>
   </dependencyManagement>
   <build>
@@ -1141,6 +1242,48 @@
               </rules>
             </configuration>
           </execution>
+          <!-- Check that we're using Open JSON and not JSON-Java -->
+          <execution>
+            <id>enforce-open-json</id>
+            <goals>
+              <goal>enforce</goal>
+            </goals>
+            <configuration>
+              <skip>${xwiki.enforcer.enforce-open-json.skip}</skip>
+              <rules>
+                <bannedDependencies>
+                  <searchTransitive>true</searchTransitive>
+                  <message>
+                    Use Open JSON which has a less fuzzy license
+                  </message>
+                  <excludes>
+                    <exclude>org.json:json</exclude>
+                  </excludes>
+                </bannedDependencies>
+              </rules>
+            </configuration>
+          </execution>
+          <!-- Embbed javax.el:javax.el-api -->
+          <execution>
+            <id>enforce-glassfish-el</id>
+            <goals>
+              <goal>enforce</goal>
+            </goals>
+            <configuration>
+              <skip>${xwiki.enforcer.enforce-glassfish-el.skip}</skip>
+              <rules>
+                <bannedDependencies>
+                  <searchTransitive>true</searchTransitive>
+                  <message>
+                    Glasshfish EL embbed javax.el:javax.el-api
+                  </message>
+                  <excludes>
+                    <exclude>javax.el:javax.el-api</exclude>
+                  </excludes>
+                </bannedDependencies>
+              </rules>
+            </configuration>
+          </execution>
           <!-- Check that we're using commons-lang3 and not commons-lang -->
           <execution>
             <id>enforce-commons-lang3</id>
@@ -1278,7 +1421,7 @@
           <groupId>org.apache.maven.plugins</groupId>
           <artifactId>maven-checkstyle-plugin</artifactId>
           <!-- Lock down plugin version for build reproducibility -->
-          <version>2.17</version>
+          <version>3.0.0</version>
           <configuration>
             <consoleOutput>true</consoleOutput>
             <!-- We use this to disable checkstyle when the clover profile is executed since there's a
@@ -1301,7 +1444,7 @@
         <plugin>
           <groupId>fr.inria.gforge.spoon</groupId>
           <artifactId>spoon-maven-plugin</artifactId>
-          <version>2.5</version>
+          <version>3.1</version>
           <dependencies>
             <dependency>
               <groupId>fr.inria.gforge.spoon</groupId>
@@ -1351,7 +1494,7 @@
           <groupId>org.apache.maven.plugins</groupId>
           <artifactId>maven-clean-plugin</artifactId>
           <!-- Lock down plugin version for build reproducibility -->
-          <version>3.0.0</version>
+          <version>3.1.0</version>
         </plugin>
         <plugin>
           <groupId>org.apache.maven.plugins</groupId>
@@ -1375,7 +1518,7 @@
           <groupId>org.apache.maven.plugins</groupId>
           <artifactId>maven-compiler-plugin</artifactId>
           <!-- Lock down plugin version for build reproducibility -->
-          <version>3.7.0</version>
+          <version>3.8.0</version>
           <configuration>
             <source>${java.version}</source>
             <target>${java.version}</target>
@@ -1388,9 +1531,7 @@
           <groupId>org.apache.maven.plugins</groupId>
           <artifactId>maven-surefire-plugin</artifactId>
           <!-- Lock down plugin version for build reproducibility -->
-          <!-- TODO: We need to use 2.19.1 currently and not move to 2.20 since that one is incompatible with
-               JUnit5 (causing OOMs). This is fixed in Surefire 2.20.1. Upgrade and remove this todo once it's out -->
-          <version>2.19.1</version>
+          <version>${surefire.version}</version>
           <!-- XWiki rule is to put test in *Test classes -->
           <configuration>
             <!-- We want to show nested stack traces to see what is the real problem when a test fails! -->
@@ -1398,8 +1539,32 @@
             <includes>
               <include>**/*Test.class</include>
             </includes>
+            <!-- TODO: Remove this property once all functional tests have been moved to use the failsafe plugin -->
             <systemProperties>
               <property>
+                <!-- See description of the "xwiki.test.verifyRunningXWikiAtStart" property above. -->
+                <name>xwiki.test.verifyRunningXWikiAtStart</name>
+                <value>${xwiki.test.verifyRunningXWikiAtStart}</value>
+              </property>
+            </systemProperties>
+          </configuration>
+        </plugin>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-failsafe-plugin</artifactId>
+          <!-- Lock down plugin version for build reproducibility -->
+          <version>${surefire.version}</version>
+          <configuration>
+            <!-- By default we want to make sure we only run AllITs since that runs all the tests, and
+                 starting/stopping XWiki only once for the whole suite -->
+            <includes>
+              <include>**/AllITs.java</include>
+            </includes>
+            <!-- We want to show nested stack traces to see what is the real problem when a test fails! -->
+            <trimStackTrace>false</trimStackTrace>
+            <systemProperties>
+              <property>
+                <!-- See description of the "xwiki.test.verifyRunningXWikiAtStart" property above. -->
                 <name>xwiki.test.verifyRunningXWikiAtStart</name>
                 <value>${xwiki.test.verifyRunningXWikiAtStart}</value>
               </property>
@@ -1423,18 +1588,27 @@
               <version>${junit.vintage.version}</version>
             </dependency>
           </dependencies>
+          <executions>
+            <execution>
+              <id>functional-tests</id>
+              <goals>
+                <goal>integration-test</goal>
+                <goal>verify</goal>
+              </goals>
+            </execution>
+          </executions>
         </plugin>
         <plugin>
           <groupId>org.apache.maven.plugins</groupId>
           <artifactId>maven-resources-plugin</artifactId>
           <!-- Lock down plugin version for build reproducibility -->
-          <version>3.0.2</version>
+          <version>3.1.0</version>
         </plugin>
         <plugin>
           <groupId>org.apache.maven.plugins</groupId>
           <artifactId>maven-jar-plugin</artifactId>
           <!-- Lock down plugin version for build reproducibility -->
-          <version>3.0.2</version>
+          <version>3.1.0</version>
           <configuration>
             <archive>
               <manifest>
@@ -1459,13 +1633,13 @@
           <groupId>org.apache.maven.plugins</groupId>
           <artifactId>maven-dependency-plugin</artifactId>
           <!-- Lock down plugin version for build reproducibility -->
-          <version>3.0.2</version>
+          <version>3.1.1</version>
         </plugin>
         <plugin>
           <groupId>org.apache.maven.plugins</groupId>
           <artifactId>maven-war-plugin</artifactId>
           <!-- Lock down plugin version for build reproducibility -->
-          <version>3.2.0</version>
+          <version>3.2.2</version>
           <configuration>
             <!-- Add some useful information about the extension in the manifest file. -->
             <archive>
@@ -1485,7 +1659,7 @@
           <groupId>org.codehaus.mojo</groupId>
           <artifactId>aspectj-maven-plugin</artifactId>
           <!-- Lock down plugin version for build reproducibility -->
-          <version>1.10</version>
+          <version>1.11</version>
           <configuration>
             <complianceLevel>${java.version}</complianceLevel>
             <source>${java.version}</source>
@@ -1513,19 +1687,34 @@
           <groupId>org.apache.maven.plugins</groupId>
           <artifactId>maven-invoker-plugin</artifactId>
           <!-- Lock down plugin version for build reproducibility -->
-          <version>3.0.1</version>
+          <version>3.1.0</version>
         </plugin>
         <plugin>
           <groupId>org.codehaus.mojo</groupId>
           <artifactId>xml-maven-plugin</artifactId>
           <!-- Lock down plugin version for build reproducibility -->
-          <version>1.0.1</version>
+          <version>1.0.2</version>
         </plugin>
         <plugin>
           <groupId>org.codehaus.mojo</groupId>
           <artifactId>build-helper-maven-plugin</artifactId>
           <!-- Lock down plugin version for build reproducibility -->
           <version>3.0.0</version>
+          <executions>
+            <!-- Used to execute the tests generated by DSpot -->
+            <execution>
+              <id>dspot-test-source</id>
+              <phase>generate-test-sources</phase>
+              <goals>
+                <goal>add-test-source</goal>
+              </goals>
+              <configuration>
+                <sources>
+                  <source>src/test/dspot</source>
+                </sources>
+              </configuration>
+            </execution>
+          </executions>
         </plugin>
         <plugin>
           <groupId>org.codehaus.mojo</groupId>
@@ -1550,12 +1739,12 @@
           <groupId>org.revapi</groupId>
           <artifactId>revapi-maven-plugin</artifactId>
           <!-- Lock down plugin version for build reproducibility -->
-          <version>0.9.1</version>
+          <version>0.10.5</version>
           <dependencies>
             <dependency>
               <groupId>org.revapi</groupId>
               <artifactId>revapi-java</artifactId>
-              <version>0.14.0</version>
+              <version>0.18.1</version>
             </dependency>
           </dependencies>
           <executions>
@@ -1569,6 +1758,10 @@
           <configuration>
             <oldVersion>${xwiki.compatibility.previous.version}</oldVersion>
             <skip>${xwiki.revapi.skip}</skip>
+            <!-- Only output minimal differences required when revapi fails, so that we don't copy unnecessary
+                 differences which could lead to issues when releasing XWiki, see
+                 https://github.com/revapi/revapi/issues/137 for more info. -->
+            <outputNonIdentifyingDifferenceInfo>false</outputNonIdentifyingDifferenceInfo>
           </configuration>
         </plugin>
         <plugin>
@@ -1581,20 +1774,23 @@
           <groupId>org.apache.felix</groupId>
           <artifactId>maven-bundle-plugin</artifactId>
           <!-- Lock down plugin version for build reproducibility -->
-          <version>2.5.3</version>
+          <version>4.0.0</version>
         </plugin>
         <plugin>
-          <groupId>com.atlassian.maven.plugins</groupId>
+          <groupId>org.openclover</groupId>
           <artifactId>clover-maven-plugin</artifactId>
           <!-- Lock down plugin version for build reproducibility -->
           <version>${clover.version}</version>
           <configuration>
-            <license><![CDATA[nrqrUjrDHDhJUHFmcbwQoxwhnrpAvvxtfireXcjcnFLfnhs
-mj2KyGJY<oOR4f95>VRjHIO22L01PV<1<v2Q64gRLmTAFh1
-mnOmtsRNMRMORpMpnpmsSmNRqOqrNoqnqMVxvvVXvssmpRq
-RnmqmUUnrmoptpsmmmmmUUnrmoptpsmmmmmUUONfhfUUnmm
-mm
-]]></license>
+            <!-- We want to incude test source roots in order to have more information in the Clover report, such as:
+                 - which tests are covering whichg part of the code
+                 - how many tests were executed overall
+                 However, for comparison purposes between reportsn, we need to recomute the TPC by excluding all
+                 tests classes from the computation as otherwise it skews the results. This is what we do in the
+                 Jenkins Clover pipeline that we use, see
+                 https://github.com/xwiki/xwiki-jenkins-pipeline/blob/master/scripts/clover.groovy
+            -->
+            <includesTestSourceRoots>true</includesTestSourceRoots>
           </configuration>
         </plugin>
         <plugin>
@@ -1607,7 +1803,7 @@
           <groupId>org.codehaus.mojo</groupId>
           <artifactId>sonar-maven-plugin</artifactId>
           <!-- Lock down plugin version for build reproducibility -->
-          <version>2.6</version>
+          <version>3.3.0.603</version>
         </plugin>
         <plugin>
           <groupId>org.apache.maven.plugins</groupId>
@@ -1619,7 +1815,7 @@
           <groupId>org.apache.maven.plugins</groupId>
           <artifactId>maven-javadoc-plugin</artifactId>
           <!-- Lock down plugin version for build reproducibility -->
-          <version>2.10.4</version>
+          <version>3.0.1</version>
           <configuration>
             <!-- Always exclude the internal package since it's not user-public -->
             <excludePackageNames>*.internal.*</excludePackageNames>
@@ -1642,48 +1838,6 @@
               <version>2.6</version>
             </dependency>
           </dependencies>
-          <configuration>
-            <reportPlugins>
-              <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-project-info-reports-plugin</artifactId>
-                <version>2.4</version>
-                <configuration>
-                  <!-- Since contacting the Maven Repositories can take a very long time, tell the plugin not to display
-                       the repository locations of the dependencies in the report. -->
-                  <dependencyLocationsEnabled>false</dependencyLocationsEnabled>
-                </configuration>
-                <reports>
-                  <report>summary</report>
-                  <report>index</report>
-                  <report>dependencies</report>
-                  <report>dependency-convergence</report>
-                  <report>mailing-list</report>
-                  <report>issue-tracking</report>
-                  <report>scm</report>
-                </reports>
-              </plugin>
-              <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-javadoc-plugin</artifactId>
-                <configuration>
-                  <!-- Always exclude the internal package since it's not user-public -->
-                  <excludePackageNames>*.internal.*</excludePackageNames>
-                  <!-- Make sure javadoc has enough memory -->
-                  <maxmemory>300m</maxmemory>
-                </configuration>
-                <!-- Don't generate test javadoc -->
-                <reports>
-                  <report>javadoc</report>
-                </reports>
-              </plugin>
-              <plugin>
-                <groupId>org.codehaus.mojo</groupId>
-                <artifactId>cobertura-maven-plugin</artifactId>
-                <version>2.5.1</version>
-              </plugin>
-            </reportPlugins>
-          </configuration>
         </plugin>
         <plugin>
           <groupId>org.jacoco</groupId>
@@ -1739,7 +1893,8 @@
         <plugin>
           <groupId>org.jvnet.jaxb2.maven2</groupId>
           <artifactId>maven-jaxb2-plugin</artifactId>
-          <version>0.13.2</version>
+          <!-- Lock down plugin version for build reproducibility -->
+          <version>0.14.0</version>
           <configuration>
             <extension>true</extension>
             <args>
@@ -1764,8 +1919,36 @@
         <plugin>
           <groupId>net.alchim31.maven</groupId>
           <artifactId>yuicompressor-maven-plugin</artifactId>
+          <!-- Lock down plugin version for build reproducibility -->
           <version>1.5.1</version>
         </plugin>
+        <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
+        <plugin>
+          <groupId>org.eclipse.m2e</groupId>
+          <artifactId>lifecycle-mapping</artifactId>
+          <version>1.0.0</version>
+          <configuration>
+            <lifecycleMappingMetadata>
+              <pluginExecutions>
+                <pluginExecution>
+                  <pluginExecutionFilter>
+                    <groupId>org.xwiki.commons</groupId>
+                    <artifactId>
+                      xwiki-commons-tool-remote-resource-plugin
+                    </artifactId>
+                    <versionRange>[10.5-SNAPSHOT,)</versionRange>
+                    <goals>
+                      <goal>process</goal>
+                    </goals>
+                  </pluginExecutionFilter>
+                  <action>
+                    <ignore />
+                  </action>
+                </pluginExecution>
+              </pluginExecutions>
+            </lifecycleMappingMetadata>
+          </configuration>
+        </plugin>
       </plugins>
     </pluginManagement>
   </build>
@@ -1873,11 +2056,11 @@
           <plugin>
             <groupId>net.sigmalab.maven.plugins</groupId>
             <artifactId>jira-maven-plugin</artifactId>
-            <version>0.5</version>
+            <version>0.8</version>
             <configuration>
-              <skip>${xwiki.release.jira.skip}</skip>
-              <settingsKey>jira.xwiki.org</settingsKey>
-              <scope>session</scope>
+            <skip>${xwiki.release.jira.skip}</skip>
+            <settingsKey>${xwiki.release.jira.settingsKey}</settingsKey>
+            <scope>${xwiki.release.jira.scope}</scope>
             </configuration>
             <executions>
               <execution>
@@ -1922,7 +2105,7 @@
         <dependencies>
           <!-- Needed when using Clover for runtime execution of integration tests -->
           <dependency>
-            <groupId>com.atlassian.clover</groupId>
+            <groupId>org.openclover</groupId>
             <artifactId>clover</artifactId>
             <version>${clover.version}</version>
           </dependency>
@@ -1951,6 +2134,8 @@
         <!-- Default Jacoco Instruction Ratio. We use 100% to force each module to define its
              own ratio. Note that good values are above 70%. -->
         <xwiki.jacoco.instructionRatio>1.00</xwiki.jacoco.instructionRatio>
+        <!-- Default Pitest Instruction Ratio. We use 100% to force each module to define its own ratio. -->
+        <xwiki.pitest.mutationThreshold>100</xwiki.pitest.mutationThreshold>
       </properties>
       <build>
         <plugins>
@@ -1985,6 +2170,69 @@
               </rules>
             </configuration>
           </plugin>
+          <!-- Fail the build of the test quality is below a given value -->
+          <plugin>
+            <groupId>org.pitest</groupId>
+            <artifactId>pitest-maven</artifactId>
+            <version>1.4.0</version>
+            <executions>
+              <execution>
+                <id>pitest-check</id>
+                <goals>
+                  <goal>mutationCoverage</goal>
+                </goals>
+              </execution>
+            </executions>
+            <configuration>
+              <skip>${xwiki.pitest.skip}</skip>
+              <failWhenNoMutations>false</failWhenNoMutations>
+              <mutationThreshold>${xwiki.pitest.mutationThreshold}</mutationThreshold>
+              <mutationEngine>descartes</mutationEngine>
+              <threads>4</threads>
+              <outputFormats>
+                <value>HTML</value>
+                <value>JSON</value>
+                <value>METHODS</value>
+                <value>ISSUES</value>
+              </outputFormats>
+              <!-- List of mutations we want to run for each test -->
+              <mutators>
+                <mutator>void</mutator>
+                <mutator>null</mutator>
+                <mutator>true</mutator>
+                <mutator>false</mutator>
+                <mutator>empty</mutator>
+                <mutator>0</mutator>
+                <mutator>1</mutator>
+                <mutator>(byte)0</mutator>
+                <mutator>(byte)1</mutator>
+                <mutator>(short)1</mutator>
+                <mutator>(short)2</mutator>
+                <mutator>0L</mutator>
+                <mutator>1L</mutator>
+                <mutator>0.0</mutator>
+                <mutator>1.0</mutator>
+                <mutator>0.0f</mutator>
+                <mutator>1.0f</mutator>
+                <mutator>'\40'</mutator>
+                <mutator>'A'</mutator>
+                <mutator>""</mutator>
+                <mutator>"A"</mutator>
+              </mutators>
+            </configuration>
+            <dependencies>
+              <dependency>
+                <groupId>org.pitest</groupId>
+                <artifactId>pitest-junit5-plugin</artifactId>
+                <version>0.5</version>
+              </dependency>
+              <dependency>
+                <groupId>eu.stamp-project</groupId>
+                <artifactId>descartes</artifactId>
+                <version>1.2.4</version>
+              </dependency>
+            </dependencies>
+          </plugin>
         </plugins>
       </build>
     </profile>
@@ -2034,4 +2282,54 @@
     <module>xwiki-commons-pom</module>
     <module>xwiki-commons-tools</module>
   </modules>
+  <reporting>
+  <plugins>
+    <plugin>
+      <groupId>org.apache.maven.plugins</groupId>
+      <artifactId>maven-project-info-reports-plugin</artifactId>
+      <version>2.4</version>
+      <configuration>
+                  <!-- Since contacting the Maven Repositories can take a very long time, tell the plugin not to display
+                       the repository locations of the dependencies in the report. -->
+        <dependencyLocationsEnabled>false</dependencyLocationsEnabled>
+      </configuration>
+      <reportSets>
+        <reportSet>
+          <reports>
+            <report>summary</report>
+            <report>index</report>
+            <report>dependencies</report>
+            <report>dependency-convergence</report>
+            <report>mailing-list</report>
+            <report>issue-tracking</report>
+            <report>scm</report>
+          </reports>
+        </reportSet>
+      </reportSets>
+    </plugin>
+    <plugin>
+      <groupId>org.apache.maven.plugins</groupId>
+      <artifactId>maven-javadoc-plugin</artifactId>
+      <configuration>
+        <!-- Always exclude the internal package since it's not user-public -->
+        <excludePackageNames>*.internal.*</excludePackageNames>
+        <!-- Make sure javadoc has enough memory -->
+        <maxmemory>300m</maxmemory>
+      </configuration>
+      <!-- Don't generate test javadoc -->
+      <reportSets>
+        <reportSet>
+          <reports>
+            <report>javadoc</report>
+          </reports>
+        </reportSet>
+      </reportSets>
+    </plugin>
+    <plugin>
+      <groupId>org.codehaus.mojo</groupId>
+      <artifactId>cobertura-maven-plugin</artifactId>
+      <version>2.5.1</version>
+    </plugin>
+  </plugins>
+  </reporting>
 </project>
diff --git a/xwiki-commons-core/pom.xml b/xwiki-commons-core/pom.xml
index f766965..289c12e 100644
--- a/xwiki-commons-core/pom.xml
+++ b/xwiki-commons-core/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-pom</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
     <relativePath>../xwiki-commons-pom</relativePath>
   </parent>
   <artifactId>xwiki-commons-core</artifactId>
@@ -41,6 +41,7 @@
     <module>xwiki-commons-blame</module>
     <module>xwiki-commons-cache</module>
     <module>xwiki-commons-classloader</module>
+    <module>xwiki-commons-collection</module>
     <module>xwiki-commons-component</module>
     <module>xwiki-commons-configuration</module>
     <module>xwiki-commons-context</module>
@@ -155,6 +156,57 @@
               "revapi": {
                 "ignore" : [
                   // Add more ignores below...
+                  {
+                    "code": "java.annotation.attributeValueChanged",
+                    "old": "@interface org.xwiki.stability.Unstable",
+                    "new": "@interface org.xwiki.stability.Unstable",
+                    "annotationType": "java.lang.annotation.Target",
+                    "annotation": "@java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.CONSTRUCTOR})",
+                    "attribute": "value",
+                    "oldValue": "{java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.METHOD}",
+                    "newValue": "{java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.CONSTRUCTOR}",
+                    "package": "org.xwiki.stability",
+                    "classQualifiedName": "org.xwiki.stability.Unstable",
+                    "classSimpleName": "Unstable",
+                    "elementKind": "@interface",
+                    "justification": "Not a breakage."
+                  },
+                  {
+                    "code": "java.class.removed",
+                    "old": "class org.xwiki.velocity.introspection.AbstractChainableUberspector",
+                    "package": "org.xwiki.velocity.introspection",
+                    "classQualifiedName": "org.xwiki.velocity.introspection.AbstractChainableUberspector",
+                    "classSimpleName": "AbstractChainableUberspector",
+                    "elementKind": "class",
+                    "justification": "Not a breakage: class moved to a legacy module"
+                  },
+                  {
+                    "code": "java.class.removed",
+                    "old": "interface org.xwiki.velocity.introspection.ChainableUberspector",
+                    "package": "org.xwiki.velocity.introspection",
+                    "classQualifiedName": "org.xwiki.velocity.introspection.ChainableUberspector",
+                    "classSimpleName": "ChainableUberspector",
+                    "elementKind": "interface",
+                    "justification": "Not a breakage: class moved to a legacy module"
+                  },
+                  {
+                    "code": "java.class.removed",
+                    "old": "class org.xwiki.velocity.introspection.ChainingUberspector",
+                    "package": "org.xwiki.velocity.introspection",
+                    "classQualifiedName": "org.xwiki.velocity.introspection.ChainingUberspector",
+                    "classSimpleName": "ChainingUberspector",
+                    "elementKind": "class",
+                    "justification": "Not a breakage: class moved to a legacy module"
+                  },
+                  {
+                    "code": "java.class.removed",
+                    "old": "class org.xwiki.velocity.introspection.LinkingUberspector",
+                    "package": "org.xwiki.velocity.introspection",
+                    "classQualifiedName": "org.xwiki.velocity.introspection.LinkingUberspector",
+                    "classSimpleName": "LinkingUberspector",
+                    "elementKind": "class",
+                    "justification": "Not a breakage: class moved to a legacy module"
+                  }
                 ]
               }
             }
diff --git a/xwiki-commons-core/xwiki-commons-blame/pom.xml b/xwiki-commons-core/xwiki-commons-blame/pom.xml
index 8ff91e3..eadf601 100644
--- a/xwiki-commons-core/xwiki-commons-blame/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-blame/pom.xml
@@ -24,7 +24,7 @@
   <parent>
     <artifactId>xwiki-commons-core</artifactId>
     <groupId>org.xwiki.commons</groupId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-blame</artifactId>
   <name>XWiki Commons - Blame</name>
diff --git a/xwiki-commons-core/xwiki-commons-blame/xwiki-commons-blame-api/build.gradle b/xwiki-commons-core/xwiki-commons-blame/xwiki-commons-blame-api/build.gradle
index fd3b248..dd733db 100644
--- a/xwiki-commons-core/xwiki-commons-blame/xwiki-commons-blame-api/build.gradle
+++ b/xwiki-commons-core/xwiki-commons-blame/xwiki-commons-blame-api/build.gradle
@@ -21,7 +21,7 @@
 // WARNING: NOT WORKING, WORK IN PROGRESS. USE THE MAVEN BUILD WHICH IS THE XWIKI OFFICIAL BUILD TOOL.
 
 dependencies {
-    compile project(':xwiki-component-api')
-    compile 'com.googlecode.java-diff-utils:diffutils:1.3.0'
-    testCompile project(':xwiki-test-component')
+    api project(':xwiki-component-api')
+    implementation 'com.googlecode.java-diff-utils:diffutils:1.3.0'
+    testImplementation project(':xwiki-test-component')
 }
\ No newline at end of file
diff --git a/xwiki-commons-core/xwiki-commons-blame/xwiki-commons-blame-api/pom.xml b/xwiki-commons-core/xwiki-commons-blame/xwiki-commons-blame-api/pom.xml
index 63aa2d1..4f6bcc9 100644
--- a/xwiki-commons-core/xwiki-commons-blame/xwiki-commons-blame-api/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-blame/xwiki-commons-blame-api/pom.xml
@@ -24,7 +24,7 @@
   <parent>
     <artifactId>xwiki-commons-blame</artifactId>
     <groupId>org.xwiki.commons</groupId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-blame-api</artifactId>
   <name>XWiki Commons - Blame - API</name>
@@ -32,6 +32,7 @@
   <description>API to produce blame/annotate/praise information from a history of changes</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.94</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>82</xwiki.pitest.mutationThreshold>
     <!-- Name to display in the Extension Manager -->
     <xwiki.extension.name>Blame API</xwiki.extension.name>
     <!-- Category to display in the Extension Manager -->
diff --git a/xwiki-commons-core/xwiki-commons-blame/xwiki-commons-blame-script/pom.xml b/xwiki-commons-core/xwiki-commons-blame/xwiki-commons-blame-script/pom.xml
index 217c115..524862b 100644
--- a/xwiki-commons-core/xwiki-commons-blame/xwiki-commons-blame-script/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-blame/xwiki-commons-blame-script/pom.xml
@@ -24,7 +24,7 @@
   <parent>
     <artifactId>xwiki-commons-blame</artifactId>
     <groupId>org.xwiki.commons</groupId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-blame-script</artifactId>
   <name>XWiki Commons - Blame - Script Service</name>
diff --git a/xwiki-commons-core/xwiki-commons-cache/pom.xml b/xwiki-commons-core/xwiki-commons-cache/pom.xml
index 08da5fe..fb5c3a2 100644
--- a/xwiki-commons-core/xwiki-commons-cache/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-cache/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-core</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-cache</artifactId>
   <name>XWiki Commons - Cache - Parent POM</name>
diff --git a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-api/pom.xml b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-api/pom.xml
index d7ac919..58cd189 100644
--- a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-api/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-api/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-cache</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-cache-api</artifactId>
   <name>XWiki Commons - Cache - API</name>
diff --git a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-api/src/main/java/org/xwiki/cache/event/AbstractCacheEntryListener.java b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-api/src/main/java/org/xwiki/cache/event/AbstractCacheEntryListener.java
index 4cdac67..eb71108 100644
--- a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-api/src/main/java/org/xwiki/cache/event/AbstractCacheEntryListener.java
+++ b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-api/src/main/java/org/xwiki/cache/event/AbstractCacheEntryListener.java
@@ -19,8 +19,6 @@
  */
 package org.xwiki.cache.event;
 
-import org.xwiki.stability.Unstable;
-
 /**
  * Empty implementations of the {@link CacheEntryListener} interface to make it easy for code wanting to listen to
  * events to only override the method(s) corresponding to the event(s) listened to.
@@ -29,7 +27,6 @@
  * @version $Id$
  * @since 8.1M1
  */
-@Unstable
 public abstract class AbstractCacheEntryListener<T> implements CacheEntryListener<T>
 {
     @Override
diff --git a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-api/src/main/java/org/xwiki/cache/util/AbstractCache.java b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-api/src/main/java/org/xwiki/cache/util/AbstractCache.java
index 24ea2f0..0215579 100644
--- a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-api/src/main/java/org/xwiki/cache/util/AbstractCache.java
+++ b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-api/src/main/java/org/xwiki/cache/util/AbstractCache.java
@@ -141,6 +141,9 @@ protected void disposeCacheValue(T value)
             try {
                 ((DisposableCacheValue) value).dispose();
             } catch (Throwable e) {
+                // We catch Throwable because this method is usually automatically called by an event send by the cache
+                // implementation and there is no reason to crash the whole cache because of some badly implemented
+                // dispose() we don't control.
                 LOGGER.warn("Error when trying to dispose a cache object of cache [{}]",
                     this.configuration != null ? this.configuration.getConfigurationId() : null, e);
             }
diff --git a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-api/src/main/java/org/xwiki/cache/util/AbstractCacheConfigurationLoader.java b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-api/src/main/java/org/xwiki/cache/util/AbstractCacheConfigurationLoader.java
index 38a2990..a0e9cb9 100644
--- a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-api/src/main/java/org/xwiki/cache/util/AbstractCacheConfigurationLoader.java
+++ b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-api/src/main/java/org/xwiki/cache/util/AbstractCacheConfigurationLoader.java
@@ -104,8 +104,6 @@ protected String createTempDir()
                 file.mkdirs();
             }
 
-            file.deleteOnExit();
-
             path = file.getAbsolutePath();
         }
 
diff --git a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-infinispan/pom.xml b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-infinispan/pom.xml
index 8b93faa..fb9d071 100644
--- a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-infinispan/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-infinispan/pom.xml
@@ -24,7 +24,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-cache</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-cache-infinispan</artifactId>
   <name>XWiki Commons - Cache - Infinispan</name>
@@ -32,6 +32,7 @@
   <description>XWiki Commons - Cache - Infinispan</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.68</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>0</xwiki.pitest.mutationThreshold>
     <!-- Old names of this module used for retro compatibility when resolving dependencies of old extensions -->
     <xwiki.extension.features>org.xwiki.platform:xwiki-platform-cache-infinispan</xwiki.extension.features>
   </properties>
@@ -49,7 +50,7 @@
     <dependency>
       <groupId>org.infinispan</groupId>
       <artifactId>infinispan-core</artifactId>
-      <version>8.2.6.Final</version>
+      <version>8.2.11.Final</version>
       <exclusions>
         <!-- Use javax.transaction:jta instead to not have duplicate JARs in generated WARs -->
         <exclusion>
diff --git a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-infinispan/src/main/java/org/xwiki/cache/infinispan/internal/InfinispanCache.java b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-infinispan/src/main/java/org/xwiki/cache/infinispan/internal/InfinispanCache.java
index e9f1efd..d8af5bb 100644
--- a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-infinispan/src/main/java/org/xwiki/cache/infinispan/internal/InfinispanCache.java
+++ b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-infinispan/src/main/java/org/xwiki/cache/infinispan/internal/InfinispanCache.java
@@ -153,17 +153,9 @@ public void nodeExpired(CacheEntryExpiredEvent<String, T> event)
     @CacheEntryRemoved
     public void nodeRemoved(CacheEntryRemovedEvent<String, T> event)
     {
-        String key = event.getKey();
-        T value = event.getValue();
-
-        if (event.isPre()) {
-            if (value != null) {
-                this.preEventData.put(key, value);
-            }
-        } else {
-            cacheEntryRemoved(event.getKey(), this.preEventData.get(key));
-
-            this.preEventData.remove(key);
+        // TODO: remove != null when https://issues.jboss.org/browse/ISPN-9491 is fixed
+        if (!event.isPre() && event.getOldValue() != null) {
+            cacheEntryRemoved(event.getKey(), event.getOldValue());
         }
     }
 
diff --git a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-infinispan/src/test/java/org/xwiki/cache/infinispan/InfinispanCacheTest.java b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-infinispan/src/test/java/org/xwiki/cache/infinispan/InfinispanCacheTest.java
index 91c34be..6e8f213 100644
--- a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-infinispan/src/test/java/org/xwiki/cache/infinispan/InfinispanCacheTest.java
+++ b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-infinispan/src/test/java/org/xwiki/cache/infinispan/InfinispanCacheTest.java
@@ -25,7 +25,7 @@
 import org.xwiki.cache.internal.DefaultCacheFactory;
 import org.xwiki.cache.internal.DefaultCacheManager;
 import org.xwiki.cache.internal.DefaultCacheManagerConfiguration;
-import org.xwiki.cache.tests.AbstractEvictionGenericTestCache;
+import org.xwiki.cache.test.AbstractEvictionGenericTestCache;
 import org.xwiki.test.annotation.ComponentList;
 
 /**
diff --git a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-infinispan/src/test/java/org/xwiki/cache/infinispan/InfinispanConfigTest.java b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-infinispan/src/test/java/org/xwiki/cache/infinispan/InfinispanConfigTest.java
index 5c818a5..6dfd50f 100644
--- a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-infinispan/src/test/java/org/xwiki/cache/infinispan/InfinispanConfigTest.java
+++ b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-infinispan/src/test/java/org/xwiki/cache/infinispan/InfinispanConfigTest.java
@@ -24,7 +24,7 @@
 import org.xwiki.cache.internal.DefaultCacheFactory;
 import org.xwiki.cache.internal.DefaultCacheManager;
 import org.xwiki.cache.internal.DefaultCacheManagerConfiguration;
-import org.xwiki.cache.tests.AbstractTestCache;
+import org.xwiki.cache.test.AbstractTestCache;
 import org.xwiki.environment.Environment;
 import org.xwiki.test.annotation.ComponentList;
 
diff --git a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/pom.xml b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/pom.xml
index 23c0f58..ab8a6c7 100644
--- a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-cache</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-cache-tests</artifactId>
   <name>XWiki Commons - Cache - Tests</name>
diff --git a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/src/main/java/org/xwiki/cache/test/AbstractEvictionGenericTestCache.java b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/src/main/java/org/xwiki/cache/test/AbstractEvictionGenericTestCache.java
new file mode 100644
index 0000000..2af000e
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/src/main/java/org/xwiki/cache/test/AbstractEvictionGenericTestCache.java
@@ -0,0 +1,240 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.cache.test;
+
+import org.junit.Assert;
+import org.junit.Test;
+import org.xwiki.cache.Cache;
+import org.xwiki.cache.CacheFactory;
+import org.xwiki.cache.config.CacheConfiguration;
+import org.xwiki.cache.config.LRUCacheConfiguration;
+import org.xwiki.cache.eviction.EntryEvictionConfiguration;
+import org.xwiki.cache.eviction.LRUEvictionConfiguration;
+import org.xwiki.cache.test.CacheEntryListenerTest.EventType;
+
+/**
+ * Base class for testing cache component implementation. Also test eviction.
+ * <p>
+ * Implementations with asynch eviction system should write there own tests.
+ * 
+ * @version $Id$
+ */
+public abstract class AbstractEvictionGenericTestCache extends AbstractGenericTestCache
+{
+    /**
+     * Indicate if the cache implementation send event for evicted entries.
+     */
+    private boolean supportEvictionEvent;
+
+    /**
+     * @param roleHint the role hint of the cache component implementation to test.
+     * @param supportEvictionEvent indicate of the cache implementation send eviction related events
+     */
+    protected AbstractEvictionGenericTestCache(String roleHint, boolean supportEvictionEvent)
+    {
+        super(roleHint);
+
+        this.supportEvictionEvent = supportEvictionEvent;
+    }
+
+    protected void customizeEviction(EntryEvictionConfiguration eviction)
+    {
+
+    }
+
+    // ///////////////////////////////////////////////////////::
+    // Tests
+
+    /**
+     * Validate the maximum cache entries constraint.
+     * 
+     * @throws Exception error
+     */
+    @Test
+    public void createAndDestroyCacheLRUMaxEntries() throws Exception
+    {
+        CacheFactory factory = getCacheFactory();
+
+        CacheConfiguration conf = new CacheConfiguration();
+        LRUEvictionConfiguration lec = new LRUEvictionConfiguration();
+        lec.setMaxEntries(1);
+        customizeEviction(lec);
+        conf.put(LRUEvictionConfiguration.CONFIGURATIONID, lec);
+
+        Cache<Object> cache = factory.newCache(conf);
+
+        Assert.assertNotNull(cache);
+
+        CacheEntryListenerTest eventListener;
+        if (this.supportEvictionEvent) {
+            eventListener = new CacheEntryListenerTest();
+            cache.addCacheEntryListener(eventListener);
+        } else {
+            eventListener = null;
+        }
+
+        cache.set(KEY, VALUE);
+
+        Assert.assertEquals(VALUE, cache.get(KEY));
+
+        cache.set(KEY2, VALUE2);
+
+        if (eventListener != null) {
+            Assert.assertTrue("No value has been evicted from the cache",
+                eventListener.waitForEntryEvent(EventType.REMOVE));
+            Assert.assertSame(VALUE, eventListener.getRemovedEvent().getEntry().getValue());
+        }
+
+        Assert.assertNull(cache.get(KEY));
+        Assert.assertEquals(VALUE2, cache.get(KEY2));
+
+        cache.dispose();
+    }
+
+    /**
+     * Validate the maximum time to live constraint.
+     * 
+     * @throws Exception error
+     */
+    @Test
+    public void createAndDestroyCacheLRUMAxIdle() throws Exception
+    {
+        CacheFactory factory = getCacheFactory();
+
+        CacheConfiguration conf = new CacheConfiguration();
+        LRUEvictionConfiguration lec = new LRUEvictionConfiguration();
+        lec.setMaxIdle(1);
+        customizeEviction(lec);
+        conf.put(LRUEvictionConfiguration.CONFIGURATIONID, lec);
+
+        Cache<Object> cache = factory.newCache(conf);
+
+        Assert.assertNotNull(cache);
+
+        CacheEntryListenerTest eventListener;
+        if (this.supportEvictionEvent) {
+            eventListener = new CacheEntryListenerTest();
+            cache.addCacheEntryListener(eventListener);
+        } else {
+            eventListener = null;
+        }
+
+        cache.set(KEY, VALUE);
+
+        Assert.assertEquals(VALUE, cache.get(KEY));
+
+        if (eventListener != null) {
+            Assert.assertTrue("No value has expired from the cache after provided max idle time",
+                eventListener.waitForEntryEvent(EventType.REMOVE));
+            Assert.assertSame(VALUE, eventListener.getRemovedEvent().getEntry().getValue());
+        }
+
+        Assert.assertNull(cache.get(KEY));
+
+        cache.dispose();
+    }
+
+    /**
+     * Validate the maximum time to live constraint.
+     * 
+     * @throws Exception error
+     */
+    @Test
+    public void createAndDestroyCacheLRULifespan() throws Exception
+    {
+        CacheFactory factory = getCacheFactory();
+
+        CacheConfiguration conf = new CacheConfiguration();
+        LRUEvictionConfiguration lec = new LRUEvictionConfiguration();
+        lec.setLifespan(1);
+        customizeEviction(lec);
+        conf.put(LRUEvictionConfiguration.CONFIGURATIONID, lec);
+
+        Cache<Object> cache = factory.newCache(conf);
+
+        Assert.assertNotNull(cache);
+
+        CacheEntryListenerTest eventListener;
+        if (this.supportEvictionEvent) {
+            eventListener = new CacheEntryListenerTest();
+            cache.addCacheEntryListener(eventListener);
+        } else {
+            eventListener = null;
+        }
+
+        cache.set(KEY, VALUE);
+
+        Assert.assertEquals(VALUE, cache.get(KEY));
+
+        if (eventListener != null) {
+            Assert.assertTrue("No value has expired from the cache after provide lifespan",
+                eventListener.waitForEntryEvent(EventType.REMOVE));
+            Assert.assertSame(VALUE, eventListener.getRemovedEvent().getEntry().getValue());
+        }
+
+        Assert.assertNull(cache.get(KEY));
+
+        cache.dispose();
+    }
+
+    /**
+     * Validate the combination of maximum time to live and maximum cache entries constraints.
+     * 
+     * @throws Exception error
+     */
+    @Test
+    public void createAndDestroyCacheLRUAll() throws Exception
+    {
+        CacheFactory factory = getCacheFactory();
+
+        LRUCacheConfiguration conf = new LRUCacheConfiguration();
+        LRUEvictionConfiguration lec = conf.getLRUEvictionConfiguration();
+        lec.setMaxEntries(1);
+        lec.setMaxIdle(1);
+        lec.setLifespan(1);
+        customizeEviction(lec);
+
+        Cache<Object> cache = factory.newCache(conf);
+
+        Assert.assertNotNull(cache);
+
+        CacheEntryListenerTest eventListener;
+        if (this.supportEvictionEvent) {
+            eventListener = new CacheEntryListenerTest();
+            cache.addCacheEntryListener(eventListener);
+        }
+
+        cache.set(KEY, VALUE);
+
+        Assert.assertEquals(VALUE, cache.get(KEY));
+
+        cache.set(KEY2, VALUE2);
+
+        Assert.assertNull(cache.get(KEY));
+        Assert.assertEquals(VALUE2, cache.get(KEY2));
+
+        Thread.sleep(1100);
+
+        Assert.assertNull(cache.get(KEY));
+        Assert.assertNull(cache.get(KEY2));
+
+        cache.dispose();
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/src/main/java/org/xwiki/cache/test/AbstractGenericTestCache.java b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/src/main/java/org/xwiki/cache/test/AbstractGenericTestCache.java
new file mode 100644
index 0000000..7ee0fbb
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/src/main/java/org/xwiki/cache/test/AbstractGenericTestCache.java
@@ -0,0 +1,221 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.cache.test;
+
+import org.junit.Assert;
+import org.junit.Test;
+import org.xwiki.cache.Cache;
+import org.xwiki.cache.CacheFactory;
+import org.xwiki.cache.config.CacheConfiguration;
+
+/**
+ * Base class for testing cache component implementation.
+ * 
+ * @version $Id$
+ */
+public abstract class AbstractGenericTestCache extends AbstractTestCache
+{
+    /**
+     * @param roleHint the role hint of the cache component implementation to test.
+     */
+    protected AbstractGenericTestCache(String roleHint)
+    {
+        super(roleHint);
+    }
+
+    // ///////////////////////////////////////////////////////::
+    // Tests
+
+    /**
+     * Validate factory initialization.
+     * 
+     * @throws Exception error.
+     */
+    @Test
+    public void getFactory() throws Exception
+    {
+        CacheFactory factory = getCacheFactory();
+
+        CacheFactory factory2 = getCacheFactory();
+
+        Assert.assertSame(factory, factory2);
+    }
+
+    /**
+     * Validate some basic cache use case without any constraints.
+     * 
+     * @throws Exception error.
+     */
+    @Test
+    public void createAndDestroyCacheSimple() throws Exception
+    {
+        CacheFactory factory = getCacheFactory();
+
+        Cache<Object> cache = factory.newCache(new CacheConfiguration());
+
+        Assert.assertNotNull(cache);
+
+        cache.set(KEY, VALUE);
+        cache.set(KEY2, VALUE2);
+
+        Assert.assertEquals(VALUE, cache.get(KEY));
+        Assert.assertEquals(VALUE2, cache.get(KEY2));
+
+        cache.dispose();
+    }
+
+    /**
+     * Validate {@link Cache#remove(String)}.
+     * 
+     * @throws Exception error.
+     */
+    @Test
+    public void remove() throws Exception
+    {
+        CacheFactory factory = getCacheFactory();
+
+        Cache<Object> cache = factory.newCache(new CacheConfiguration());
+
+        cache.set(KEY, VALUE);
+        cache.set(KEY2, VALUE2);
+
+        cache.remove(KEY);
+
+        Assert.assertNull(cache.get(KEY));
+        Assert.assertEquals(VALUE2, cache.get(KEY2));
+    }
+
+    /**
+     * Validate {@link Cache#removeAll()}.
+     * 
+     * @throws Exception error.
+     */
+    @Test
+    public void removeAll() throws Exception
+    {
+        CacheFactory factory = getCacheFactory();
+
+        Cache<Object> cache = factory.newCache(new CacheConfiguration());
+
+        cache.set(KEY, VALUE);
+        cache.set(KEY2, VALUE2);
+
+        cache.removeAll();
+
+        Assert.assertNull(cache.get(KEY));
+        Assert.assertNull(cache.get(KEY2));
+    }
+
+    /**
+     * Validate event management.
+     * 
+     * @throws Exception error.
+     */
+    @Test
+    public void events() throws Exception
+    {
+        CacheFactory factory = getCacheFactory();
+
+        Cache<Object> cache = factory.newCache(new CacheConfiguration());
+
+        CacheEntryListenerTest eventListener = new CacheEntryListenerTest();
+
+        cache.addCacheEntryListener(eventListener);
+
+        cache.set(KEY, VALUE);
+
+        Assert.assertNotNull(eventListener.getAddedEvent());
+        Assert.assertSame(cache, eventListener.getAddedEvent().getCache());
+        Assert.assertEquals(KEY, eventListener.getAddedEvent().getEntry().getKey());
+        Assert.assertEquals(VALUE, eventListener.getAddedEvent().getEntry().getValue());
+
+        cache.set(KEY, VALUE2);
+
+        Assert.assertNotNull(eventListener.getModifiedEvent());
+        Assert.assertSame(cache, eventListener.getModifiedEvent().getCache());
+        Assert.assertEquals(KEY, eventListener.getModifiedEvent().getEntry().getKey());
+        Assert.assertEquals(VALUE2, eventListener.getModifiedEvent().getEntry().getValue());
+
+        cache.remove(KEY);
+        cache.get(KEY);
+
+        Assert.assertNotNull(eventListener.getRemovedEvent());
+        Assert.assertSame(cache, eventListener.getRemovedEvent().getCache());
+        Assert.assertEquals(KEY, eventListener.getRemovedEvent().getEntry().getKey());
+        Assert.assertEquals(VALUE2, eventListener.getRemovedEvent().getEntry().getValue());
+
+        eventListener.reinitRemovedEvent();
+        cache.remove(KEY);
+
+        Assert.assertNull(eventListener.getRemovedEvent());
+    }
+
+    /**
+     * Validate that two different caches are really different.
+     * 
+     * @throws Exception error.
+     */
+    @Test
+    public void severalCaches() throws Exception
+    {
+        CacheFactory factory = getCacheFactory();
+
+        Cache<Object> cache = factory.newCache(new CacheConfiguration());
+        Cache<Object> cache2 = factory.newCache(new CacheConfiguration());
+
+        cache.set(KEY, VALUE);
+
+        Assert.assertNull(cache2.get(KEY));
+    }
+
+    /**
+     * Validate that when recreating a cache with the same id the second instance is in a proper state.
+     * 
+     * @throws Exception error
+     */
+    @Test
+    public void recreateCache() throws Exception
+    {
+        CacheFactory factory = getCacheFactory();
+
+        CacheConfiguration configuration = new CacheConfiguration();
+        configuration.setConfigurationId("test");
+
+        Cache<Object> cache = factory.newCache(configuration);
+
+        cache.set(KEY, VALUE);
+
+        Assert.assertEquals(VALUE, cache.get(KEY));
+
+        // dispose the first cache
+
+        cache.dispose();
+
+        // recreate it
+
+        cache = factory.newCache(configuration);
+
+        Assert.assertNull(cache.get(KEY));
+
+        cache.set(KEY, VALUE);
+
+        Assert.assertEquals(VALUE, cache.get(KEY));
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/src/main/java/org/xwiki/cache/test/AbstractTestCache.java b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/src/main/java/org/xwiki/cache/test/AbstractTestCache.java
new file mode 100644
index 0000000..74c9267
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/src/main/java/org/xwiki/cache/test/AbstractTestCache.java
@@ -0,0 +1,103 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.cache.test;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.xwiki.cache.CacheFactory;
+import org.xwiki.cache.CacheManager;
+import org.xwiki.configuration.internal.MemoryConfigurationSource;
+import org.xwiki.test.mockito.MockitoComponentManagerRule;
+
+/**
+ * Base class for testing cache component implementation.
+ *
+ * @version $Id$
+ */
+public abstract class AbstractTestCache
+{
+    /**
+     * The first key.
+     */
+    protected static final String KEY = "key";
+
+    /**
+     * The second key.
+     */
+    protected static final String KEY2 = "key2";
+
+    /**
+     * The value of the first key.
+     */
+    protected static final String VALUE = "value";
+
+    /**
+     * The value of the second key.
+     */
+    protected static final int VALUE2 = 2;
+
+    /**
+     * The Mockito tool.
+     */
+    @Rule
+    public MockitoComponentManagerRule componentManager = new MockitoComponentManagerRule();
+
+    /**
+     * The role hint of the cache component implementation to test.
+     */
+    protected String roleHint;
+
+    /**
+     * @param roleHint the role hint of the cache component implementation to test.
+     */
+    protected AbstractTestCache(String roleHint)
+    {
+        this.roleHint = roleHint;
+    }
+
+    /**
+     * Before.
+     * 
+     * @throws Exception when initialization fail
+     */
+    @Before
+    public void before() throws Exception
+    {
+        MemoryConfigurationSource configuration = this.componentManager.registerMemoryConfigurationSource();
+
+        configuration.setProperty("cache.defaultCache", this.roleHint);
+    }
+
+    /**
+     * @return a instance of the cache factory.
+     * @throws Exception error when searching for cache factory component.
+     */
+    public CacheFactory getCacheFactory() throws Exception
+    {
+        CacheManager cacheManager = this.componentManager.getInstance(CacheManager.class);
+
+        CacheFactory factory = cacheManager.getCacheFactory();
+
+        Assert.assertNotNull(factory);
+
+        return factory;
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/src/main/java/org/xwiki/cache/test/CacheEntryListenerTest.java b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/src/main/java/org/xwiki/cache/test/CacheEntryListenerTest.java
new file mode 100644
index 0000000..bf010eb
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/src/main/java/org/xwiki/cache/test/CacheEntryListenerTest.java
@@ -0,0 +1,213 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.cache.test;
+
+import org.xwiki.cache.event.CacheEntryEvent;
+import org.xwiki.cache.event.CacheEntryListener;
+
+/**
+ * Class used to test cache event management.
+ * 
+ * @version $Id$
+ */
+public class CacheEntryListenerTest implements CacheEntryListener<Object>
+{
+    /**
+     * 
+     */
+    public enum EventType
+    {
+        /**
+         * Add event.
+         */
+        ADD,
+
+        /**
+         * Modify event.
+         */
+        MODIFY,
+
+        /**
+         * Remove event.
+         */
+        REMOVE
+    }
+
+    /**
+     * Event object received with last insertion.
+     */
+    private CacheEntryEvent<Object> addedEvent;
+
+    /**
+     * Event object received with last modification.
+     */
+    private CacheEntryEvent<Object> modifiedEvent;
+
+    /**
+     * Event object received with last remove.
+     */
+    private CacheEntryEvent<Object> removedEvent;
+
+    /**
+     * @return event object received with last insertion.
+     */
+    public CacheEntryEvent<Object> getAddedEvent()
+    {
+        return this.addedEvent;
+    }
+
+    /**
+     * Set add event to null.
+     */
+    public void reinitAddEvent()
+    {
+        this.addedEvent = null;
+    }
+
+    /**
+     * @return event object received with last modification.
+     */
+    public CacheEntryEvent<Object> getModifiedEvent()
+    {
+        return this.modifiedEvent;
+    }
+
+    /**
+     * Set modified event to null.
+     */
+    public void reinitModifiedEvent()
+    {
+        this.modifiedEvent = null;
+    }
+
+    /**
+     * @return event object received with last remove.
+     */
+    public CacheEntryEvent<Object> getRemovedEvent()
+    {
+        return this.removedEvent;
+    }
+
+    /**
+     * Set removed event to null.
+     */
+    public void reinitRemovedEvent()
+    {
+        this.removedEvent = null;
+    }
+
+    @Override
+    public void cacheEntryAdded(CacheEntryEvent<Object> event)
+    {
+        this.addedEvent = event;
+    }
+
+    @Override
+    public void cacheEntryModified(CacheEntryEvent<Object> event)
+    {
+        this.modifiedEvent = event;
+    }
+
+    @Override
+    public void cacheEntryRemoved(CacheEntryEvent<Object> event)
+    {
+        this.removedEvent = event;
+    }
+
+    /**
+     * @param eventType event type.
+     * @return wait until it receive a entry removed event.
+     * @throws InterruptedException error
+     */
+    public boolean waitForEntryEvent(EventType eventType) throws InterruptedException
+    {
+        EventWaiter eventWaiter = new EventWaiter(eventType);
+
+        Thread thread = new Thread(eventWaiter);
+        thread.start();
+        thread.join(100000);
+
+        if (thread.isAlive()) {
+            eventWaiter.stop();
+
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * Event waiter.
+     */
+    class EventWaiter implements Runnable
+    {
+        /**
+         * Indicate that the thread should continue to run or have to stop.
+         */
+        private boolean run = true;
+
+        /**
+         * The event type.
+         */
+        private EventType eventType;
+
+        /**
+         * @param eventType the event type.
+         */
+        EventWaiter(EventType eventType)
+        {
+            this.eventType = eventType;
+        }
+
+        /**
+         * Stop.
+         */
+        void stop()
+        {
+            this.run = false;
+        }
+
+        @Override
+        public void run()
+        {
+            CacheEntryEvent<Object> event;
+
+            while (this.run) {
+                if (this.eventType == EventType.ADD) {
+                    event = addedEvent;
+                } else if (this.eventType == EventType.MODIFY) {
+                    event = modifiedEvent;
+                } else {
+                    event = removedEvent;
+                }
+
+                if (event != null) {
+                    break;
+                }
+
+                try {
+                    Thread.sleep(500);
+                } catch (InterruptedException e) {
+                    // ignore
+                }
+            }
+        }
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/src/main/java/org/xwiki/cache/tests/AbstractEvictionGenericTestCache.java b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/src/main/java/org/xwiki/cache/tests/AbstractEvictionGenericTestCache.java
deleted file mode 100644
index 3441426..0000000
--- a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/src/main/java/org/xwiki/cache/tests/AbstractEvictionGenericTestCache.java
+++ /dev/null
@@ -1,240 +0,0 @@
-/*
- * See the NOTICE file distributed with this work for additional
- * information regarding copyright ownership.
- *
- * This is free software; you can redistribute it and/or modify it
- * under the terms of the GNU Lesser General Public License as
- * published by the Free Software Foundation; either version 2.1 of
- * the License, or (at your option) any later version.
- *
- * This software is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this software; if not, write to the Free
- * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
- * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
- */
-package org.xwiki.cache.tests;
-
-import org.junit.Assert;
-import org.junit.Test;
-import org.xwiki.cache.Cache;
-import org.xwiki.cache.CacheFactory;
-import org.xwiki.cache.config.CacheConfiguration;
-import org.xwiki.cache.config.LRUCacheConfiguration;
-import org.xwiki.cache.eviction.EntryEvictionConfiguration;
-import org.xwiki.cache.eviction.LRUEvictionConfiguration;
-import org.xwiki.cache.tests.CacheEntryListenerTest.EventType;
-
-/**
- * Base class for testing cache component implementation. Also test eviction.
- * <p>
- * Implementations with asynch eviction system should write there own tests.
- * 
- * @version $Id$
- */
-public abstract class AbstractEvictionGenericTestCache extends AbstractGenericTestCache
-{
-    /**
-     * Indicate if the cache implementation send event for evicted entries.
-     */
-    private boolean supportEvictionEvent;
-
-    /**
-     * @param roleHint the role hint of the cache component implementation to test.
-     * @param supportEvictionEvent indicate of the cache implementation send eviction related events
-     */
-    protected AbstractEvictionGenericTestCache(String roleHint, boolean supportEvictionEvent)
-    {
-        super(roleHint);
-
-        this.supportEvictionEvent = supportEvictionEvent;
-    }
-
-    protected void customizeEviction(EntryEvictionConfiguration eviction)
-    {
-
-    }
-
-    // ///////////////////////////////////////////////////////::
-    // Tests
-
-    /**
-     * Validate the maximum cache entries constraint.
-     * 
-     * @throws Exception error
-     */
-    @Test
-    public void createAndDestroyCacheLRUMaxEntries() throws Exception
-    {
-        CacheFactory factory = getCacheFactory();
-
-        CacheConfiguration conf = new CacheConfiguration();
-        LRUEvictionConfiguration lec = new LRUEvictionConfiguration();
-        lec.setMaxEntries(1);
-        customizeEviction(lec);
-        conf.put(LRUEvictionConfiguration.CONFIGURATIONID, lec);
-
-        Cache<Object> cache = factory.newCache(conf);
-
-        Assert.assertNotNull(cache);
-
-        CacheEntryListenerTest eventListener;
-        if (this.supportEvictionEvent) {
-            eventListener = new CacheEntryListenerTest();
-            cache.addCacheEntryListener(eventListener);
-        } else {
-            eventListener = null;
-        }
-
-        cache.set(KEY, VALUE);
-
-        Assert.assertEquals(VALUE, cache.get(KEY));
-
-        cache.set(KEY2, VALUE2);
-
-        if (eventListener != null) {
-            Assert.assertTrue("No value has been evicted from the cache",
-                eventListener.waitForEntryEvent(EventType.REMOVE));
-            Assert.assertSame(VALUE, eventListener.getRemovedEvent().getEntry().getValue());
-        }
-
-        Assert.assertNull(cache.get(KEY));
-        Assert.assertEquals(VALUE2, cache.get(KEY2));
-
-        cache.dispose();
-    }
-
-    /**
-     * Validate the maximum time to live constraint.
-     * 
-     * @throws Exception error
-     */
-    @Test
-    public void createAndDestroyCacheLRUMAxIdle() throws Exception
-    {
-        CacheFactory factory = getCacheFactory();
-
-        CacheConfiguration conf = new CacheConfiguration();
-        LRUEvictionConfiguration lec = new LRUEvictionConfiguration();
-        lec.setMaxIdle(1);
-        customizeEviction(lec);
-        conf.put(LRUEvictionConfiguration.CONFIGURATIONID, lec);
-
-        Cache<Object> cache = factory.newCache(conf);
-
-        Assert.assertNotNull(cache);
-
-        CacheEntryListenerTest eventListener;
-        if (this.supportEvictionEvent) {
-            eventListener = new CacheEntryListenerTest();
-            cache.addCacheEntryListener(eventListener);
-        } else {
-            eventListener = null;
-        }
-
-        cache.set(KEY, VALUE);
-
-        Assert.assertEquals(VALUE, cache.get(KEY));
-
-        if (eventListener != null) {
-            Assert.assertTrue("No value has expired from the cache after provided max idle time",
-                eventListener.waitForEntryEvent(EventType.REMOVE));
-            Assert.assertSame(VALUE, eventListener.getRemovedEvent().getEntry().getValue());
-        }
-
-        Assert.assertNull(cache.get(KEY));
-
-        cache.dispose();
-    }
-
-    /**
-     * Validate the maximum time to live constraint.
-     * 
-     * @throws Exception error
-     */
-    @Test
-    public void createAndDestroyCacheLRULifespan() throws Exception
-    {
-        CacheFactory factory = getCacheFactory();
-
-        CacheConfiguration conf = new CacheConfiguration();
-        LRUEvictionConfiguration lec = new LRUEvictionConfiguration();
-        lec.setLifespan(1);
-        customizeEviction(lec);
-        conf.put(LRUEvictionConfiguration.CONFIGURATIONID, lec);
-
-        Cache<Object> cache = factory.newCache(conf);
-
-        Assert.assertNotNull(cache);
-
-        CacheEntryListenerTest eventListener;
-        if (this.supportEvictionEvent) {
-            eventListener = new CacheEntryListenerTest();
-            cache.addCacheEntryListener(eventListener);
-        } else {
-            eventListener = null;
-        }
-
-        cache.set(KEY, VALUE);
-
-        Assert.assertEquals(VALUE, cache.get(KEY));
-
-        if (eventListener != null) {
-            Assert.assertTrue("No value has expired from the cache after provide lifespan",
-                eventListener.waitForEntryEvent(EventType.REMOVE));
-            Assert.assertSame(VALUE, eventListener.getRemovedEvent().getEntry().getValue());
-        }
-
-        Assert.assertNull(cache.get(KEY));
-
-        cache.dispose();
-    }
-
-    /**
-     * Validate the combination of maximum time to live and maximum cache entries constraints.
-     * 
-     * @throws Exception error
-     */
-    @Test
-    public void createAndDestroyCacheLRUAll() throws Exception
-    {
-        CacheFactory factory = getCacheFactory();
-
-        LRUCacheConfiguration conf = new LRUCacheConfiguration();
-        LRUEvictionConfiguration lec = conf.getLRUEvictionConfiguration();
-        lec.setMaxEntries(1);
-        lec.setMaxIdle(1);
-        lec.setLifespan(1);
-        customizeEviction(lec);
-
-        Cache<Object> cache = factory.newCache(conf);
-
-        Assert.assertNotNull(cache);
-
-        CacheEntryListenerTest eventListener;
-        if (this.supportEvictionEvent) {
-            eventListener = new CacheEntryListenerTest();
-            cache.addCacheEntryListener(eventListener);
-        }
-
-        cache.set(KEY, VALUE);
-
-        Assert.assertEquals(VALUE, cache.get(KEY));
-
-        cache.set(KEY2, VALUE2);
-
-        Assert.assertNull(cache.get(KEY));
-        Assert.assertEquals(VALUE2, cache.get(KEY2));
-
-        Thread.sleep(1100);
-
-        Assert.assertNull(cache.get(KEY));
-        Assert.assertNull(cache.get(KEY2));
-
-        cache.dispose();
-    }
-}
diff --git a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/src/main/java/org/xwiki/cache/tests/AbstractGenericTestCache.java b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/src/main/java/org/xwiki/cache/tests/AbstractGenericTestCache.java
deleted file mode 100644
index 7315527..0000000
--- a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/src/main/java/org/xwiki/cache/tests/AbstractGenericTestCache.java
+++ /dev/null
@@ -1,216 +0,0 @@
-/*
- * See the NOTICE file distributed with this work for additional
- * information regarding copyright ownership.
- *
- * This is free software; you can redistribute it and/or modify it
- * under the terms of the GNU Lesser General Public License as
- * published by the Free Software Foundation; either version 2.1 of
- * the License, or (at your option) any later version.
- *
- * This software is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this software; if not, write to the Free
- * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
- * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
- */
-package org.xwiki.cache.tests;
-
-import org.junit.Assert;
-import org.junit.Test;
-import org.xwiki.cache.Cache;
-import org.xwiki.cache.CacheFactory;
-import org.xwiki.cache.config.CacheConfiguration;
-
-/**
- * Base class for testing cache component implementation.
- * 
- * @version $Id$
- */
-public abstract class AbstractGenericTestCache extends AbstractTestCache
-{
-    /**
-     * @param roleHint the role hint of the cache component implementation to test.
-     */
-    protected AbstractGenericTestCache(String roleHint)
-    {
-        super(roleHint);
-    }
-
-    // ///////////////////////////////////////////////////////::
-    // Tests
-
-    /**
-     * Validate factory initialization.
-     * 
-     * @throws Exception error.
-     */
-    @Test
-    public void getFactory() throws Exception
-    {
-        CacheFactory factory = getCacheFactory();
-
-        CacheFactory factory2 = getCacheFactory();
-
-        Assert.assertSame(factory, factory2);
-    }
-
-    /**
-     * Validate some basic cache use case without any constraints.
-     * 
-     * @throws Exception error.
-     */
-    @Test
-    public void createAndDestroyCacheSimple() throws Exception
-    {
-        CacheFactory factory = getCacheFactory();
-
-        Cache<Object> cache = factory.newCache(new CacheConfiguration());
-
-        Assert.assertNotNull(cache);
-
-        cache.set(KEY, VALUE);
-        cache.set(KEY2, VALUE2);
-
-        Assert.assertEquals(VALUE, cache.get(KEY));
-        Assert.assertEquals(VALUE2, cache.get(KEY2));
-
-        cache.dispose();
-    }
-
-    /**
-     * Validate {@link Cache#remove(String)}.
-     * 
-     * @throws Exception error.
-     */
-    @Test
-    public void remove() throws Exception
-    {
-        CacheFactory factory = getCacheFactory();
-
-        Cache<Object> cache = factory.newCache(new CacheConfiguration());
-
-        cache.set(KEY, VALUE);
-        cache.set(KEY2, VALUE2);
-
-        cache.remove(KEY);
-
-        Assert.assertNull(cache.get(KEY));
-        Assert.assertEquals(VALUE2, cache.get(KEY2));
-    }
-
-    /**
-     * Validate {@link Cache#removeAll()}.
-     * 
-     * @throws Exception error.
-     */
-    @Test
-    public void removeAll() throws Exception
-    {
-        CacheFactory factory = getCacheFactory();
-
-        Cache<Object> cache = factory.newCache(new CacheConfiguration());
-
-        cache.set(KEY, VALUE);
-        cache.set(KEY2, VALUE2);
-
-        cache.removeAll();
-
-        Assert.assertNull(cache.get(KEY));
-        Assert.assertNull(cache.get(KEY2));
-    }
-
-    /**
-     * Validate event management.
-     * 
-     * @throws Exception error.
-     */
-    @Test
-    public void events() throws Exception
-    {
-        CacheFactory factory = getCacheFactory();
-
-        Cache<Object> cache = factory.newCache(new CacheConfiguration());
-
-        CacheEntryListenerTest eventListener = new CacheEntryListenerTest();
-
-        cache.addCacheEntryListener(eventListener);
-
-        cache.set(KEY, VALUE);
-
-        Assert.assertNotNull(eventListener.getAddedEvent());
-        Assert.assertSame(cache, eventListener.getAddedEvent().getCache());
-        Assert.assertEquals(KEY, eventListener.getAddedEvent().getEntry().getKey());
-        Assert.assertEquals(VALUE, eventListener.getAddedEvent().getEntry().getValue());
-
-        cache.set(KEY, VALUE2);
-
-        Assert.assertNotNull(eventListener.getModifiedEvent());
-        Assert.assertSame(cache, eventListener.getModifiedEvent().getCache());
-        Assert.assertEquals(KEY, eventListener.getModifiedEvent().getEntry().getKey());
-        Assert.assertEquals(VALUE2, eventListener.getModifiedEvent().getEntry().getValue());
-
-        cache.remove(KEY);
-        cache.get(KEY);
-
-        Assert.assertNotNull(eventListener.getRemovedEvent());
-        Assert.assertSame(cache, eventListener.getRemovedEvent().getCache());
-        Assert.assertEquals(KEY, eventListener.getRemovedEvent().getEntry().getKey());
-        Assert.assertEquals(VALUE2, eventListener.getRemovedEvent().getEntry().getValue());
-    }
-
-    /**
-     * Validate that two different caches are really different.
-     * 
-     * @throws Exception error.
-     */
-    @Test
-    public void severalCaches() throws Exception
-    {
-        CacheFactory factory = getCacheFactory();
-
-        Cache<Object> cache = factory.newCache(new CacheConfiguration());
-        Cache<Object> cache2 = factory.newCache(new CacheConfiguration());
-
-        cache.set(KEY, VALUE);
-
-        Assert.assertNull(cache2.get(KEY));
-    }
-
-    /**
-     * Validate that when recreating a cache with the same id the second instance is in a proper state.
-     * 
-     * @throws Exception error
-     */
-    @Test
-    public void recreateCache() throws Exception
-    {
-        CacheFactory factory = getCacheFactory();
-
-        CacheConfiguration configuration = new CacheConfiguration();
-        configuration.setConfigurationId("test");
-
-        Cache<Object> cache = factory.newCache(configuration);
-
-        cache.set(KEY, VALUE);
-
-        Assert.assertEquals(VALUE, cache.get(KEY));
-
-        // dispose the first cache
-
-        cache.dispose();
-
-        // recreate it
-
-        cache = factory.newCache(configuration);
-
-        Assert.assertNull(cache.get(KEY));
-
-        cache.set(KEY, VALUE);
-
-        Assert.assertEquals(VALUE, cache.get(KEY));
-    }
-}
diff --git a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/src/main/java/org/xwiki/cache/tests/AbstractTestCache.java b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/src/main/java/org/xwiki/cache/tests/AbstractTestCache.java
deleted file mode 100644
index 850ab93..0000000
--- a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/src/main/java/org/xwiki/cache/tests/AbstractTestCache.java
+++ /dev/null
@@ -1,103 +0,0 @@
-/*
- * See the NOTICE file distributed with this work for additional
- * information regarding copyright ownership.
- *
- * This is free software; you can redistribute it and/or modify it
- * under the terms of the GNU Lesser General Public License as
- * published by the Free Software Foundation; either version 2.1 of
- * the License, or (at your option) any later version.
- *
- * This software is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this software; if not, write to the Free
- * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
- * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
- */
-package org.xwiki.cache.tests;
-
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Rule;
-import org.xwiki.cache.CacheFactory;
-import org.xwiki.cache.CacheManager;
-import org.xwiki.configuration.internal.MemoryConfigurationSource;
-import org.xwiki.test.mockito.MockitoComponentManagerRule;
-
-/**
- * Base class for testing cache component implementation.
- *
- * @version $Id$
- */
-public abstract class AbstractTestCache
-{
-    /**
-     * The first key.
-     */
-    protected static final String KEY = "key";
-
-    /**
-     * The second key.
-     */
-    protected static final String KEY2 = "key2";
-
-    /**
-     * The value of the first key.
-     */
-    protected static final String VALUE = "value";
-
-    /**
-     * The value of the second key.
-     */
-    protected static final int VALUE2 = 2;
-
-    /**
-     * The Mockito tool.
-     */
-    @Rule
-    public MockitoComponentManagerRule componentManager = new MockitoComponentManagerRule();
-
-    /**
-     * The role hint of the cache component implementation to test.
-     */
-    protected String roleHint;
-
-    /**
-     * @param roleHint the role hint of the cache component implementation to test.
-     */
-    protected AbstractTestCache(String roleHint)
-    {
-        this.roleHint = roleHint;
-    }
-
-    /**
-     * Before.
-     * 
-     * @throws Exception when initialization fail
-     */
-    @Before
-    public void before() throws Exception
-    {
-        MemoryConfigurationSource configuration = this.componentManager.registerMemoryConfigurationSource();
-
-        configuration.setProperty("cache.defaultCache", this.roleHint);
-    }
-
-    /**
-     * @return a instance of the cache factory.
-     * @throws Exception error when searching for cache factory component.
-     */
-    public CacheFactory getCacheFactory() throws Exception
-    {
-        CacheManager cacheManager = this.componentManager.getInstance(CacheManager.class);
-
-        CacheFactory factory = cacheManager.getCacheFactory();
-
-        Assert.assertNotNull(factory);
-
-        return factory;
-    }
-}
diff --git a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/src/main/java/org/xwiki/cache/tests/CacheEntryListenerTest.java b/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/src/main/java/org/xwiki/cache/tests/CacheEntryListenerTest.java
deleted file mode 100644
index 754feaf..0000000
--- a/xwiki-commons-core/xwiki-commons-cache/xwiki-commons-cache-tests/src/main/java/org/xwiki/cache/tests/CacheEntryListenerTest.java
+++ /dev/null
@@ -1,213 +0,0 @@
-/*
- * See the NOTICE file distributed with this work for additional
- * information regarding copyright ownership.
- *
- * This is free software; you can redistribute it and/or modify it
- * under the terms of the GNU Lesser General Public License as
- * published by the Free Software Foundation; either version 2.1 of
- * the License, or (at your option) any later version.
- *
- * This software is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this software; if not, write to the Free
- * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
- * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
- */
-package org.xwiki.cache.tests;
-
-import org.xwiki.cache.event.CacheEntryEvent;
-import org.xwiki.cache.event.CacheEntryListener;
-
-/**
- * Class used to test cache event management.
- * 
- * @version $Id$
- */
-public class CacheEntryListenerTest implements CacheEntryListener<Object>
-{
-    /**
-     * 
-     */
-    public enum EventType
-    {
-        /**
-         * Add event.
-         */
-        ADD,
-
-        /**
-         * Modify event.
-         */
-        MODIFY,
-
-        /**
-         * Remove event.
-         */
-        REMOVE
-    }
-
-    /**
-     * Event object received with last insertion.
-     */
-    private CacheEntryEvent<Object> addedEvent;
-
-    /**
-     * Event object received with last modification.
-     */
-    private CacheEntryEvent<Object> modifiedEvent;
-
-    /**
-     * Event object received with last remove.
-     */
-    private CacheEntryEvent<Object> removedEvent;
-
-    /**
-     * @return event object received with last insertion.
-     */
-    public CacheEntryEvent<Object> getAddedEvent()
-    {
-        return this.addedEvent;
-    }
-
-    /**
-     * Set add event to null.
-     */
-    public void reinitAddEvent()
-    {
-        this.addedEvent = null;
-    }
-
-    /**
-     * @return event object received with last modification.
-     */
-    public CacheEntryEvent<Object> getModifiedEvent()
-    {
-        return this.modifiedEvent;
-    }
-
-    /**
-     * Set modified event to null.
-     */
-    public void reinitModifiedEvent()
-    {
-        this.modifiedEvent = null;
-    }
-
-    /**
-     * @return event object received with last remove.
-     */
-    public CacheEntryEvent<Object> getRemovedEvent()
-    {
-        return this.removedEvent;
-    }
-
-    /**
-     * Set removed event to null.
-     */
-    public void reinitRemovedEvent()
-    {
-        this.removedEvent = null;
-    }
-
-    @Override
-    public void cacheEntryAdded(CacheEntryEvent<Object> event)
-    {
-        this.addedEvent = event;
-    }
-
-    @Override
-    public void cacheEntryModified(CacheEntryEvent<Object> event)
-    {
-        this.modifiedEvent = event;
-    }
-
-    @Override
-    public void cacheEntryRemoved(CacheEntryEvent<Object> event)
-    {
-        this.removedEvent = event;
-    }
-
-    /**
-     * @param eventType event type.
-     * @return wait until it receive a entry removed event.
-     * @throws InterruptedException error
-     */
-    public boolean waitForEntryEvent(EventType eventType) throws InterruptedException
-    {
-        EventWaiter eventWaiter = new EventWaiter(eventType);
-
-        Thread thread = new Thread(eventWaiter);
-        thread.start();
-        thread.join(100000);
-
-        if (thread.isAlive()) {
-            eventWaiter.stop();
-
-            return false;
-        }
-
-        return true;
-    }
-
-    /**
-     * Event waiter.
-     */
-    class EventWaiter implements Runnable
-    {
-        /**
-         * Indicate that the thread should continue to run or have to stop.
-         */
-        private boolean run = true;
-
-        /**
-         * The event type.
-         */
-        private EventType eventType;
-
-        /**
-         * @param eventType the event type.
-         */
-        EventWaiter(EventType eventType)
-        {
-            this.eventType = eventType;
-        }
-
-        /**
-         * Stop.
-         */
-        void stop()
-        {
-            this.run = false;
-        }
-
-        @Override
-        public void run()
-        {
-            CacheEntryEvent<Object> event;
-
-            while (this.run) {
-                if (this.eventType == EventType.ADD) {
-                    event = addedEvent;
-                } else if (this.eventType == EventType.MODIFY) {
-                    event = modifiedEvent;
-                } else {
-                    event = removedEvent;
-                }
-
-                if (event != null) {
-                    break;
-                }
-
-                try {
-                    Thread.sleep(500);
-                } catch (InterruptedException e) {
-                    // ignore
-                }
-            }
-        }
-    }
-}
diff --git a/xwiki-commons-core/xwiki-commons-classloader/pom.xml b/xwiki-commons-core/xwiki-commons-classloader/pom.xml
index 1214526..9cb3ea4 100644
--- a/xwiki-commons-core/xwiki-commons-classloader/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-classloader/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-core</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-classloader</artifactId>
   <name>XWiki Commons - ClassLoader - Parent POM</name>
diff --git a/xwiki-commons-core/xwiki-commons-classloader/xwiki-commons-classloader-api/pom.xml b/xwiki-commons-core/xwiki-commons-classloader/xwiki-commons-classloader-api/pom.xml
index 267b0a4..aa91a4b 100644
--- a/xwiki-commons-core/xwiki-commons-classloader/xwiki-commons-classloader-api/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-classloader/xwiki-commons-classloader-api/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-classloader</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-classloader-api</artifactId>
   <name>XWiki Commons - ClassLoader - API</name>
diff --git a/xwiki-commons-core/xwiki-commons-classloader/xwiki-commons-classloader-protocols/pom.xml b/xwiki-commons-core/xwiki-commons-classloader/xwiki-commons-classloader-protocols/pom.xml
index e9537b7..99a691d 100644
--- a/xwiki-commons-core/xwiki-commons-classloader/xwiki-commons-classloader-protocols/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-classloader/xwiki-commons-classloader-protocols/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-classloader</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-classloader-protocols</artifactId>
   <name>XWiki Commons - ClassLoader - Protocols - Parent POM</name>
diff --git a/xwiki-commons-core/xwiki-commons-classloader/xwiki-commons-classloader-protocols/xwiki-commons-classloader-protocol-jar/pom.xml b/xwiki-commons-core/xwiki-commons-classloader/xwiki-commons-classloader-protocols/xwiki-commons-classloader-protocol-jar/pom.xml
index d16627d..738d7ce 100644
--- a/xwiki-commons-core/xwiki-commons-classloader/xwiki-commons-classloader-protocols/xwiki-commons-classloader-protocol-jar/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-classloader/xwiki-commons-classloader-protocols/xwiki-commons-classloader-protocol-jar/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-classloader-protocols</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-classloader-protocol-jar</artifactId>
   <name>XWiki Commons - ClassLoader - Protocols - JAR</name>
diff --git a/xwiki-commons-core/xwiki-commons-collection/pom.xml b/xwiki-commons-core/xwiki-commons-collection/pom.xml
new file mode 100644
index 0000000..d1222ac
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-collection/pom.xml
@@ -0,0 +1,53 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+-->
+
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <parent>
+    <groupId>org.xwiki.commons</groupId>
+    <artifactId>xwiki-commons-core</artifactId>
+    <version>10.9-SNAPSHOT</version>
+  </parent>
+  <artifactId>xwiki-commons-collection</artifactId>
+  <name>XWiki Commons - Collection</name>
+  <packaging>jar</packaging>
+  <description>Offers collection-related APIs</description>
+  <properties>
+    <xwiki.jacoco.instructionRatio>1.00</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>100</xwiki.pitest.mutationThreshold>
+  </properties>
+  <dependencies>
+    <dependency>
+      <groupId>org.xwiki.commons</groupId>
+      <artifactId>xwiki-commons-stability</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+
+    <!-- Testing dependencies -->
+    <dependency>
+      <groupId>org.xwiki.commons</groupId>
+      <artifactId>xwiki-commons-tool-test-simple</artifactId>
+      <version>${project.version}</version>
+      <scope>test</scope>
+    </dependency>
+  </dependencies>
+</project>
diff --git a/xwiki-commons-core/xwiki-commons-collection/src/main/java/org/xwiki/collection/SoftCache.java b/xwiki-commons-core/xwiki-commons-collection/src/main/java/org/xwiki/collection/SoftCache.java
new file mode 100644
index 0000000..03ddf91
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-collection/src/main/java/org/xwiki/collection/SoftCache.java
@@ -0,0 +1,101 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.collection;
+
+import java.lang.ref.SoftReference;
+import java.util.WeakHashMap;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+
+import org.xwiki.stability.Unstable;
+
+/**
+ * A concurrent version of {@link WeakHashMap} in which the values are soft references.
+ * 
+ * @param <K> the type of keys maintained by this map
+ * @param <V> the type of mapped values
+ * @version $Id$
+ * @since 10.8RC1
+ * @since 9.11.8
+ */
+@Unstable
+public class SoftCache<K, V>
+{
+    private WeakHashMap<K, SoftReference<V>> map = new WeakHashMap<>();
+
+    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
+
+    /**
+     * @param key the entry key
+     * @return the value associated to the passed key
+     */
+    public V get(K key)
+    {
+        this.lock.readLock().lock();
+
+        try {
+            SoftReference<V> reference = this.map.get(key);
+
+            return reference != null ? reference.get() : null;
+        } finally {
+            this.lock.readLock().unlock();
+        }
+    }
+
+    /**
+     * Get the value associated to the passed key. If no value can be found stored and return the passed default value.
+     * 
+     * @param key the entry key
+     * @param defaultValue the default value
+     * @return the value associated to the passed key
+     */
+    public V get(K key, V defaultValue)
+    {
+        // Check if we only know an equal entry
+        V sharedValue = get(key);
+
+        if (sharedValue == null) {
+            // If no entry can be found, store and return the passed one
+            sharedValue = defaultValue;
+
+            // Make sure to remember the entry
+            put(key, defaultValue);
+        }
+
+        // Return the shared entry
+        return sharedValue;
+    }
+
+    /**
+     * Associate passed key to passed value.
+     * 
+     * @param key the entry key
+     * @param value the entry value
+     */
+    public void put(K key, V value)
+    {
+        this.lock.writeLock().lock();
+
+        try {
+            this.map.put(key, new SoftReference<>(value));
+        } finally {
+            this.lock.writeLock().unlock();
+        }
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-collection/src/test/java/org/xwiki/collection/SoftCacheTest.java b/xwiki-commons-core/xwiki-commons-collection/src/test/java/org/xwiki/collection/SoftCacheTest.java
new file mode 100644
index 0000000..5b693df
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-collection/src/test/java/org/xwiki/collection/SoftCacheTest.java
@@ -0,0 +1,52 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.collection;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertSame;
+
+/**
+ * Validate {@link SoftCache}.
+ * 
+ * @version $Id$
+ */
+public class SoftCacheTest
+{
+    private SoftCache<String, String> cache = new SoftCache<>();
+
+    @Test
+    public void testWithStrongReferences()
+    {
+        String value = "value";
+        String defaultValue = "default";
+
+        assertNull(this.cache.get(value));
+        assertSame(defaultValue, this.cache.get(value, defaultValue));
+
+        this.cache.put(value, value);
+
+        assertSame(value, this.cache.get(value));
+        assertSame(value, this.cache.get(value, defaultValue));
+    }
+
+    // TODO: find a way to force the JVM to clear all weak and soft references
+}
diff --git a/xwiki-commons-core/xwiki-commons-component/pom.xml b/xwiki-commons-core/xwiki-commons-component/pom.xml
index f630d7c..314be76 100644
--- a/xwiki-commons-core/xwiki-commons-component/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-component/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-core</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-component</artifactId>
   <name>XWiki Commons - Component - Parent POM</name>
diff --git a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/build.gradle b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/build.gradle
index 5467401..b1cc02b 100644
--- a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/build.gradle
+++ b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/build.gradle
@@ -21,7 +21,8 @@
 // WARNING: NOT WORKING, WORK IN PROGRESS. USE THE MAVEN BUILD WHICH IS THE XWIKI OFFICIAL BUILD TOOL.
 
 dependencies {
-    compile project(':xwiki-stability')
-    compile project(':xwiki-text')
-    compile 'javax.inject:javax.inject:1'
+    api project(':xwiki-stability')
+    api 'javax.inject:javax.inject:1'
+    implementation project(':xwiki-text')
+    implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"
 }
\ No newline at end of file
diff --git a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/pom.xml b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/pom.xml
index 443d413..256bbed 100644
--- a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-component</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-component-api</artifactId>
   <name>XWiki Commons - Component - API</name>
@@ -34,7 +34,8 @@
   <properties>
     <!-- Skipping revapi since xwiki-commons-legacy-component-api wraps this module and runs checks on it -->
     <xwiki.revapi.skip>true</xwiki.revapi.skip>
-    <xwiki.jacoco.instructionRatio>0.41</xwiki.jacoco.instructionRatio>
+    <xwiki.jacoco.instructionRatio>0.45</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>47</xwiki.pitest.mutationThreshold>
   </properties>
   <dependencies>
     <!-- Even though this module may not use the stability API, we declare a dependency here since this module is
diff --git a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/main/java/org/xwiki/component/descriptor/DefaultComponentDependency.java b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/main/java/org/xwiki/component/descriptor/DefaultComponentDependency.java
index f3e6762..48caceb 100644
--- a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/main/java/org/xwiki/component/descriptor/DefaultComponentDependency.java
+++ b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/main/java/org/xwiki/component/descriptor/DefaultComponentDependency.java
@@ -122,7 +122,7 @@ public boolean equals(Object object)
             if (object == null || object.getClass() != getClass()) {
                 result = false;
             } else {
-                // object must be Syntax at this point
+                // object must be ComponentDependency at this point
                 result = equals((ComponentDependency) object);
             }
         }
@@ -218,7 +218,7 @@ public void setRole(Class<T> role)
 
             setRoleType(new DefaultParameterizedType(ownerType, rawType, role));
         } else {
-            super.setRole(role);
+            super.setRoleType(role);
         }
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/main/java/org/xwiki/component/namespace/NamespaceContextExecutor.java b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/main/java/org/xwiki/component/namespace/NamespaceContextExecutor.java
new file mode 100644
index 0000000..d13d044
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/main/java/org/xwiki/component/namespace/NamespaceContextExecutor.java
@@ -0,0 +1,47 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.component.namespace;
+
+import java.util.concurrent.Callable;
+
+import org.xwiki.component.annotation.Role;
+
+/**
+ * Allow executing some code in the context of the specified namespace.
+ *
+ * @version $Id$
+ * @since 10.6RC1
+ * @since 10.5
+ * @since 9.11.6
+ */
+@Role
+public interface NamespaceContextExecutor
+{
+    /**
+     * Execute the passed {@link Callable} in the context of the specified namespace.
+     *
+     * @param namespace the namespace to use
+     * @param callable the task to execute
+     * @param <V> the result type of method <tt>call</tt>
+     * @return computed result
+     * @throws Exception if unable to compute a result
+     */
+    <V> V execute(Namespace namespace, Callable<V> callable) throws Exception;
+}
diff --git a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/main/java/org/xwiki/component/namespace/NamespaceUtils.java b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/main/java/org/xwiki/component/namespace/NamespaceUtils.java
index c72e535..a964d07 100644
--- a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/main/java/org/xwiki/component/namespace/NamespaceUtils.java
+++ b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/main/java/org/xwiki/component/namespace/NamespaceUtils.java
@@ -19,6 +19,9 @@
  */
 package org.xwiki.component.namespace;
 
+import java.util.HashSet;
+import java.util.Set;
+
 /**
  * Various namespaces utilities.
  *
@@ -27,6 +30,14 @@
  */
 public final class NamespaceUtils
 {
+    private static final Set<String> ROOT_NAMESPACES = new HashSet<>();
+
+    static {
+        ROOT_NAMESPACES.add("{root}");
+        ROOT_NAMESPACES.add("{}");
+        ROOT_NAMESPACES.add("");
+    };
+
     /**
      * Utility class.
      */
@@ -59,6 +70,10 @@ public static Namespace toNamespace(String namespace)
             return null;
         }
 
+        if (ROOT_NAMESPACES.contains(namespace)) {
+            return Namespace.ROOT;
+        }
+
         boolean escaped = false;
         StringBuilder typeBuilder = null;
         for (int i = 0; i < namespace.length(); ++i) {
diff --git a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/test/java/org/xwiki/component/descriptor/DefaultComponentDescriptorTest.java b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/test/java/org/xwiki/component/descriptor/DefaultComponentDescriptorTest.java
index f5c90e0..5008fa3 100644
--- a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/test/java/org/xwiki/component/descriptor/DefaultComponentDescriptorTest.java
+++ b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/test/java/org/xwiki/component/descriptor/DefaultComponentDescriptorTest.java
@@ -19,12 +19,14 @@
  */
 package org.xwiki.component.descriptor;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
 
 /**
  * Unit tests for {@link DefaultComponentDescriptor}.
- * 
+ *
  * @version $Id$
  * @since 3.3M1
  */
@@ -41,7 +43,7 @@
     private class ImplRole
     {
     }
-    
+
     private class ImplOtherRole
     {
     }
@@ -54,28 +56,28 @@ public void equals()
         cd1.setRoleType(Role.class);
         cd1.setRoleHint("hint");
 
-        Assert.assertEquals(cd1, cd1);
+        assertEquals(cd1, cd1);
 
         DefaultComponentDescriptor cd2 = new DefaultComponentDescriptor();
         cd2.setImplementation(ImplRole.class);
         cd2.setRoleType(Role.class);
         cd2.setRoleHint("hint");
 
-        Assert.assertEquals(cd1, cd2);
+        assertEquals(cd1, cd2);
 
         DefaultComponentDescriptor cd3 = new DefaultComponentDescriptor();
         cd3.setImplementation(ImplRole.class);
         cd3.setRoleType(OtherRole.class);
         cd3.setRoleHint("hint");
 
-        Assert.assertFalse(cd1.equals(cd3));
+        assertNotEquals(cd1, cd3);
 
         DefaultComponentDescriptor cd4 = new DefaultComponentDescriptor();
         cd4.setImplementation(ImplOtherRole.class);
         cd4.setRoleType(Role.class);
         cd4.setRoleHint("hint");
 
-        Assert.assertFalse(cd1.equals(cd4));
+        assertNotEquals(cd1, cd4);
 
         DefaultComponentDescriptor cd5 = new DefaultComponentDescriptor();
         cd5.setImplementation(ImplRole.class);
@@ -83,7 +85,7 @@ public void equals()
         cd5.setRoleHint("hint");
         cd5.setInstantiationStrategy(ComponentInstantiationStrategy.PER_LOOKUP);
 
-        Assert.assertFalse(cd1.equals(cd5));
+        assertNotEquals(cd1, cd5);
 
         DefaultComponentDescriptor cd6 = new DefaultComponentDescriptor();
         cd6.setImplementation(ImplRole.class);
@@ -91,10 +93,10 @@ public void equals()
         cd6.setRoleHint("hint");
         DefaultComponentDependency dep = new DefaultComponentDependency();
         dep.setName("name");
-        dep.setMappingType(String.class);
+        dep.setRoleType(String.class);
         cd6.addComponentDependency(dep);
 
-        Assert.assertFalse(cd1.equals(cd6));
+        assertNotEquals(cd1, cd6);
 
         DefaultComponentDescriptor cd7 = new DefaultComponentDescriptor();
         cd7.setImplementation(ImplRole.class);
@@ -102,10 +104,10 @@ public void equals()
         cd7.setRoleHint("hint");
         DefaultComponentDependency dep2 = new DefaultComponentDependency();
         dep2.setName("name");
-        dep2.setMappingType(String.class);
+        dep2.setRoleType(String.class);
         cd7.addComponentDependency(dep2);
 
-        Assert.assertEquals(cd6, cd7);
+        assertEquals(cd6, cd7);
 
         DefaultComponentDescriptor cd8 = new DefaultComponentDescriptor();
         cd8.setImplementation(ImplRole.class);
@@ -113,10 +115,22 @@ public void equals()
         cd8.setRoleHint("hint");
         DefaultComponentDependency dep3 = new DefaultComponentDependency();
         dep3.setName("name");
-        dep3.setMappingType(String.class);
+        dep3.setRoleType(String.class);
         cd8.addComponentDependency(dep3);
         cd8.addComponentDependency(dep3);
 
-        Assert.assertFalse(cd7.equals(cd8));
+        assertNotEquals(cd7, cd8);
+
+        // Indirectly verify DefaultComponentDependency.equals() when it's not equals
+        DefaultComponentDescriptor cd9 = new DefaultComponentDescriptor();
+        cd9.setImplementation(ImplRole.class);
+        cd9.setRoleType(Role.class);
+        cd9.setRoleHint("hint");
+        DefaultComponentDependency dep4 = new DefaultComponentDependency();
+        dep4.setName("name2");
+        dep4.setRoleType(String.class);
+        cd9.addComponentDependency(dep4);
+
+        assertNotEquals(cd6, cd9);
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/test/java/org/xwiki/component/descriptor/DefaultComponentRoleTest.java b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/test/java/org/xwiki/component/descriptor/DefaultComponentRoleTest.java
index c5ecc16..a85a8b0 100644
--- a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/test/java/org/xwiki/component/descriptor/DefaultComponentRoleTest.java
+++ b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/test/java/org/xwiki/component/descriptor/DefaultComponentRoleTest.java
@@ -19,8 +19,10 @@
  */
 package org.xwiki.component.descriptor;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
 
 /**
  * Unit tests for {@link DefaultComponentRole}.
@@ -45,24 +47,24 @@ public void equals()
         cr1.setRoleType(Role.class);
         cr1.setRoleHint("hint");
 
-        Assert.assertEquals(cr1, cr1);
+        assertEquals(cr1, cr1);
 
         DefaultComponentRole cr2 = new DefaultComponentRole();
         cr2.setRoleType(Role.class);
         cr2.setRoleHint("hint");
 
-        Assert.assertEquals(cr1, cr2);
+        assertEquals(cr1, cr2);
 
         DefaultComponentRole cr3 = new DefaultComponentRole();
         cr3.setRoleType(Role.class);
         cr3.setRoleHint("other");
 
-        Assert.assertFalse(cr1.equals(cr3));
+        assertFalse(cr1.equals(cr3));
 
         DefaultComponentRole cr4 = new DefaultComponentRole();
         cr4.setRoleType(OtherRole.class);
         cr4.setRoleHint("hint");
 
-        Assert.assertFalse(cr1.equals(cr4));
+        assertFalse(cr1.equals(cr4));
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/test/java/org/xwiki/component/internal/namespace/DefaultNamespaceValidatorTest.java b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/test/java/org/xwiki/component/internal/namespace/DefaultNamespaceValidatorTest.java
index aa47068..cd91225 100644
--- a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/test/java/org/xwiki/component/internal/namespace/DefaultNamespaceValidatorTest.java
+++ b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/test/java/org/xwiki/component/internal/namespace/DefaultNamespaceValidatorTest.java
@@ -21,11 +21,13 @@
 
 import java.util.Arrays;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.xwiki.component.namespace.NamespaceNotAllowedException;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 /**
  * Validate {@link DefaultNamespaceValidator}.
@@ -36,8 +38,6 @@
 {
     private DefaultNamespaceValidator validator = new DefaultNamespaceValidator();
 
-    // Tests
-
     @Test
     public void isAllowed()
     {
@@ -59,9 +59,12 @@ public void checkAllowed() throws NamespaceNotAllowedException
         this.validator.checkAllowed(Arrays.asList("namespace"), "namespace");
     }
 
-    @Test(expected = NamespaceNotAllowedException.class)
-    public void checkNoAllowed() throws NamespaceNotAllowedException
+    @Test
+    public void checkNoAllowed()
     {
-        this.validator.checkAllowed(Arrays.asList("namespace"), "wrong");
+        Throwable exception = assertThrows(NamespaceNotAllowedException.class, () -> {
+            this.validator.checkAllowed(Arrays.asList("namespace"), "wrong");
+        });
+        assertEquals("Allowed namespace list [[namespace]] does not matches namespace [wrong]", exception.getMessage());
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/test/java/org/xwiki/component/internal/namespace/NamespaceUtilsTest.java b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/test/java/org/xwiki/component/internal/namespace/NamespaceUtilsTest.java
index ace217d..5280e88 100644
--- a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/test/java/org/xwiki/component/internal/namespace/NamespaceUtilsTest.java
+++ b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/test/java/org/xwiki/component/internal/namespace/NamespaceUtilsTest.java
@@ -19,12 +19,13 @@
  */
 package org.xwiki.component.internal.namespace;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.xwiki.component.namespace.Namespace;
 import org.xwiki.component.namespace.NamespaceUtils;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertNotEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 
 /**
  * Validate {@link NamespaceUtils}.
@@ -51,5 +52,22 @@ public void toNamespace()
         assertEquals(new Namespace("type", "value"), NamespaceUtils.toNamespace("type:value"));
         assertEquals(new Namespace("t:pe", "val\\ue"), NamespaceUtils.toNamespace("t\\:pe:val\\ue"));
         assertEquals(new Namespace("", "value"), NamespaceUtils.toNamespace(":value"));
+        assertEquals(Namespace.ROOT, NamespaceUtils.toNamespace("{}"));
+    }
+
+    @Test
+    public void testEquals()
+    {
+        Namespace ns1 = new Namespace("type1", "value1");
+        assertEquals(ns1, ns1);
+
+        Namespace ns2 = new Namespace("type2", "value1");
+        assertNotEquals(ns1, ns2);
+
+        Namespace ns3 = new Namespace("type1", "value2");
+        assertNotEquals(ns1, ns3);
+
+        Namespace ns4 = new Namespace("type1", "value1");
+        assertEquals(ns1, ns4);
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/test/java/org/xwiki/component/util/ReflectionMethodUtilsTest.java b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/test/java/org/xwiki/component/util/ReflectionMethodUtilsTest.java
index 6515aee..036b175 100644
--- a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/test/java/org/xwiki/component/util/ReflectionMethodUtilsTest.java
+++ b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/test/java/org/xwiki/component/util/ReflectionMethodUtilsTest.java
@@ -19,14 +19,15 @@
  */
 package org.xwiki.component.util;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.xwiki.component.test.TestImplementation;
 import org.xwiki.component.test.TestInheritedAnnotation;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
 /**
  * Unit tests for {@link ReflectionMethodUtils}.
- * 
+ *
  * @version $Id$
  */
 public class ReflectionMethodUtilsTest
@@ -34,16 +35,16 @@
     @Test
     public void testGetMethodParameterAnnotations() throws SecurityException, NoSuchMethodException
     {
-        Assert.assertEquals(
+        assertEquals(
             1,
             ReflectionMethodUtils.getMethodParameterAnnotations(
-                TestImplementation.class.getMethod("methodWithAnnotationParameter", new Class< ? >[] {Object.class}),
+                TestImplementation.class.getMethod("methodWithAnnotationParameter", new Class<?>[]{ Object.class }),
                 0, TestInheritedAnnotation.class, true).size());
 
-        Assert.assertEquals(
+        assertEquals(
             0,
             ReflectionMethodUtils.getMethodParameterAnnotations(
-                TestImplementation.class.getMethod("methodWithAnnotationParameter", new Class< ? >[] {Object.class}),
+                TestImplementation.class.getMethod("methodWithAnnotationParameter", new Class<?>[]{ Object.class }),
                 0, TestInheritedAnnotation.class, false).size());
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/test/java/org/xwiki/component/util/ReflectionUtilsTest.java b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/test/java/org/xwiki/component/util/ReflectionUtilsTest.java
index a5229bc..e4d16fe 100644
--- a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/test/java/org/xwiki/component/util/ReflectionUtilsTest.java
+++ b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/test/java/org/xwiki/component/util/ReflectionUtilsTest.java
@@ -24,50 +24,47 @@
 import java.util.Collection;
 import java.util.List;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.xwiki.component.descriptor.ComponentRole;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertSame;
+import static org.junit.jupiter.api.Assertions.assertThrows;
+
 /**
  * Unit tests for {@link ReflectionUtils}.
- * 
+ *
  * @version $Id$
  */
 public class ReflectionUtilsTest
 {
     private static interface TestInterfaceSimple
     {
-
     }
 
     private static interface TestInterface<A, B>
     {
-
     }
 
     private static interface TestInterface2<A, B> extends TestInterface<A, B>
     {
-
     }
 
     private static class TestClass<A, B> implements TestInterface2<A, B>
     {
-
     }
 
     private static class TestClass2<A> extends TestClass<A, Integer>
     {
-
     }
 
     private static class TestClass3 extends TestClass2<List<String>>
     {
-
     }
 
     private static class TestClass4<T> extends TestClass2<T> implements TestInterfaceSimple
     {
-
     }
 
     private class AbstractTestFieldClass
@@ -83,76 +80,73 @@
     }
 
     @Test
-    public void testGetField() throws Exception
+    public void getField() throws Exception
     {
         Field field = ReflectionUtils.getField(TestFieldClass.class, "field");
-        Assert.assertNotNull(field);
-        Assert.assertEquals("field", field.getName());
+        assertNotNull(field);
+        assertEquals("field", field.getName());
     }
 
     @Test
-    public void testGetFieldFromSuperClass() throws Exception
+    public void getFieldFromSuperClass() throws Exception
     {
         Field field = ReflectionUtils.getField(TestFieldClass.class, "superField");
-        Assert.assertNotNull(field);
-        Assert.assertEquals("superField", field.getName());
+        assertNotNull(field);
+        assertEquals("superField", field.getName());
     }
 
     @Test
-    public void testGetFieldWhenDoesntExist()
+    public void getFieldWhenDoesntExist()
     {
-        try {
+        Throwable exception = assertThrows(NoSuchFieldException.class, () -> {
             ReflectionUtils.getField(TestFieldClass.class, "doesntexist");
-            Assert.fail();
-        } catch (NoSuchFieldException expected) {
-            Assert.assertEquals(
-                "No field named [doesntexist] in class [" + TestFieldClass.class.getName() + "] or superclasses",
-                expected.getMessage());
-        }
+        });
+        assertEquals("No field named [doesntexist] in class [" + TestFieldClass.class.getName() + "] or superclasses",
+            exception.getMessage());
     }
 
     @Test
-    public void testUnserializeType() throws Exception
+    public void unserializeType() throws Exception
     {
         Type simpleType = ComponentRole.class;
-        Assert.assertEquals(simpleType, ReflectionUtils.unserializeType("org.xwiki.component.descriptor.ComponentRole",
+        assertEquals(simpleType, ReflectionUtils.unserializeType("org.xwiki.component.descriptor.ComponentRole",
             Thread.currentThread().getContextClassLoader()));
     }
 
     @Test
-    public void testUnserializeTypeWithGenerics() throws Exception
+    public void unserializeTypeWithGenerics() throws Exception
     {
         Type genericsType = new DefaultParameterizedType(null, ComponentRole.class, String.class);
-        Assert.assertEquals(genericsType,
+        assertEquals(genericsType,
             ReflectionUtils.unserializeType("org.xwiki.component.descriptor.ComponentRole<java.lang.String>",
                 Thread.currentThread().getContextClassLoader()));
     }
 
     @Test
-    public void testUnserializeListType() throws Exception
+    public void unserializeListType() throws Exception
     {
         Type listType = new DefaultParameterizedType(null, java.util.List.class, ComponentRole.class);
-        Assert.assertEquals(listType,
+        assertEquals(listType,
             ReflectionUtils.unserializeType("java.util.List<org.xwiki.component.descriptor.ComponentRole>",
                 Thread.currentThread().getContextClassLoader()));
     }
 
     @Test
-    public void testUnserializeMapType() throws Exception
+    public void unserializeMapType() throws Exception
     {
         Type mapType = new DefaultParameterizedType(null, java.util.Map.class, String.class, ComponentRole.class);
-        Assert.assertEquals(mapType,
+        assertEquals(mapType,
             ReflectionUtils.unserializeType(
                 "java.util.Map<java.lang.String, " + "org.xwiki.component.descriptor.ComponentRole>",
                 Thread.currentThread().getContextClassLoader()));
     }
 
     @Test
-    public void testUnserializeMapTypeWithGenerics() throws Exception
+    public void unserializeMapTypeWithGenerics() throws Exception
     {
         Type annotatedType = new DefaultParameterizedType(null, ComponentRole.class, String.class);
         Type mapType = new DefaultParameterizedType(null, java.util.Map.class, String.class, annotatedType);
-        Assert.assertEquals(mapType,
+        assertEquals(mapType,
             ReflectionUtils.unserializeType(
                 "java.util.Map<java.lang.String, org.xwiki.component.descriptor.ComponentRole<java.lang.String>>",
                 Thread.currentThread().getContextClassLoader()));
@@ -164,7 +158,7 @@ public void testUnserializeMapInMapWithTypeWithGenerics() throws Exception
         Type annotatedType = new DefaultParameterizedType(null, ComponentRole.class, String.class);
         Type mapType1 = new DefaultParameterizedType(null, java.util.Map.class, String.class, annotatedType);
         Type mapType2 = new DefaultParameterizedType(null, java.util.Map.class, String.class, mapType1);
-        Assert.assertEquals(mapType2,
+        assertEquals(mapType2,
             ReflectionUtils.unserializeType(
                 "java.util.Map<java.lang.String, java.util.Map<java.lang.String, "
                     + "org.xwiki.component.descriptor.ComponentRole<java.lang.String>>>",
@@ -172,34 +166,34 @@ public void testUnserializeMapInMapWithTypeWithGenerics() throws Exception
     }
 
     @Test
-    public void testGetAllFields()
+    public void getAllFields()
     {
         Collection<Field> fields = ReflectionUtils.getAllFields(TestFieldClass.class);
 
-        Assert.assertEquals(2, fields.size());
+        assertEquals(2, fields.size());
     }
 
     @Test
-    public void testGetTypeClass()
+    public void getTypeClass()
     {
-        Assert.assertSame(TestFieldClass.class, ReflectionUtils.getTypeClass(TestFieldClass.class));
-        Assert.assertSame(TestFieldClass.class, ReflectionUtils
+        assertSame(TestFieldClass.class, ReflectionUtils.getTypeClass(TestFieldClass.class));
+        assertSame(TestFieldClass.class, ReflectionUtils
             .getTypeClass(new DefaultParameterizedType(ReflectionUtilsTest.class, TestFieldClass.class)));
         // TODO: Missing test on GenericArrayType
     }
 
     @Test
-    public void testResolveType()
+    public void resolveType()
     {
-        Assert.assertEquals(
+        assertEquals(
             new DefaultParameterizedType(ReflectionUtilsTest.class, TestInterface.class,
                 new DefaultParameterizedType(null, List.class, String.class), Integer.class),
             ReflectionUtils.resolveType(TestInterface.class, TestClass3.class));
 
-        Assert.assertEquals(TestInterfaceSimple.class,
+        assertEquals(TestInterfaceSimple.class,
             ReflectionUtils.resolveType(TestInterfaceSimple.class, TestClass4.class));
 
-        Assert.assertEquals(TestInterfaceSimple.class, ReflectionUtils.resolveType(TestInterfaceSimple.class,
+        assertEquals(TestInterfaceSimple.class, ReflectionUtils.resolveType(TestInterfaceSimple.class,
             new DefaultParameterizedType(ReflectionUtilsTest.class, TestClass4.class, String.class)));
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-archetype/pom.xml b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-archetype/pom.xml
index c4a491f..9fb79a9 100644
--- a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-archetype/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-archetype/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-component</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-component-archetype</artifactId>
   <name>XWiki Commons - Component - Component Archetype</name>
diff --git a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/build.gradle b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/build.gradle
index a9a5a21..c1a9139 100644
--- a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/build.gradle
+++ b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/build.gradle
@@ -21,9 +21,10 @@
 // WARNING: NOT WORKING, WORK IN PROGRESS. USE THE MAVEN BUILD WHICH IS THE XWIKI OFFICIAL BUILD TOOL.
 
 dependencies {
-    compile project(':xwiki-component-api')
-    compile project(':xwiki-component-observation')
-    compile "org.slf4j:slf4j-api:${slf4jVersion}"
-    testCompile project(':xwiki-test-simple')
-    testCompile 'com.google.inject:guice:3.0'
+    api project(':xwiki-component-api')
+    implementation project(':xwiki-component-observation')
+    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
+    implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"
+    testImplementation project(':xwiki-test-simple')
+    testImplementation 'com.google.inject:guice:3.0'
 }
\ No newline at end of file
diff --git a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/pom.xml b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/pom.xml
index fd3838e..6c06d58 100644
--- a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-component</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-component-default</artifactId>
   <name>XWiki Commons - Component - Default Implementation</name>
@@ -33,6 +33,7 @@
   <description>XWiki Commons - Component - Default Implementation</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.70</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>58</xwiki.pitest.mutationThreshold>
     <!-- Skipping revapi since xwiki-commons-legacy-component-default wraps this module and runs checks on it -->
     <xwiki.revapi.skip>true</xwiki.revapi.skip>
   </properties>
@@ -81,6 +82,11 @@
           </execution>
         </executions>
       </plugin>
+      <!-- Add test source root for executing DSpot-generated tests -->
+      <plugin>
+        <groupId>org.codehaus.mojo</groupId>
+        <artifactId>build-helper-maven-plugin</artifactId>
+      </plugin>
     </plugins>
   </build>
 </project>
diff --git a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/src/main/java/org/xwiki/component/embed/EmbeddableComponentManager.java b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/src/main/java/org/xwiki/component/embed/EmbeddableComponentManager.java
index 42b05ad..7764c0a 100644
--- a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/src/main/java/org/xwiki/component/embed/EmbeddableComponentManager.java
+++ b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/src/main/java/org/xwiki/component/embed/EmbeddableComponentManager.java
@@ -418,6 +418,15 @@ protected Object createLogger(Class<?> instanceClass)
         return LoggerFactory.getLogger(instanceClass);
     }
 
+    /**
+     * @deprecated use {@link #getInstance(Type, String)} instead
+     */
+    @Deprecated
+    protected <T> T getComponentInstance(RoleHint<T> roleHint) throws ComponentLookupException
+    {
+        return getInstance(roleHint.getRoleType(), roleHint.getHint());
+    }
+
     private <T> T getComponentInstance(ComponentEntry<T> componentEntry) throws Exception
     {
         T instance;
diff --git a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/src/test/dspot/org/xwiki/component/embed/AmplEmbeddableComponentManagerTest.java b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/src/test/dspot/org/xwiki/component/embed/AmplEmbeddableComponentManagerTest.java
new file mode 100644
index 0000000..1cc6c2b
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/src/test/dspot/org/xwiki/component/embed/AmplEmbeddableComponentManagerTest.java
@@ -0,0 +1,182 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.component.embed;
+
+import org.junit.Assert;
+import org.junit.Test;
+import org.mockito.Mockito;
+import org.slf4j.Logger;
+import org.xwiki.component.annotation.DisposePriority;
+import org.xwiki.component.descriptor.ComponentDescriptor;
+import org.xwiki.component.descriptor.DefaultComponentDescriptor;
+import org.xwiki.component.manager.ComponentEventManager;
+import org.xwiki.component.manager.ComponentLifecycleException;
+import org.xwiki.component.manager.ComponentManager;
+import org.xwiki.component.phase.Disposable;
+import org.xwiki.component.phase.Initializable;
+import org.xwiki.component.phase.InitializationException;
+
+public class AmplEmbeddableComponentManagerTest
+{
+    public static interface Role
+    {
+    }
+
+    public static class RoleImpl implements AmplEmbeddableComponentManagerTest.Role
+    {
+    }
+
+    public static class OtherRoleImpl implements AmplEmbeddableComponentManagerTest.Role
+    {
+    }
+
+    private static String lastDisposedComponent;
+
+    public static class InitializableRoleImpl implements AmplEmbeddableComponentManagerTest.Role, Initializable
+    {
+        private boolean initialized = false;
+
+        @Override
+        public void initialize() throws InitializationException
+        {
+            this.initialized = true;
+        }
+
+        public boolean isInitialized()
+        {
+            return this.initialized;
+        }
+    }
+
+    public static class DisposableRoleImpl implements AmplEmbeddableComponentManagerTest.Role, Disposable
+    {
+        private boolean finalized = false;
+
+        @Override
+        public void dispose() throws ComponentLifecycleException
+        {
+            this.finalized = true;
+            AmplEmbeddableComponentManagerTest.lastDisposedComponent = "DisposableRoleImpl";
+        }
+
+        public boolean isFinalized()
+        {
+            return this.finalized;
+        }
+    }
+
+    @DisposePriority(2000)
+    public static class DisposableWithPriorityRoleImpl implements AmplEmbeddableComponentManagerTest.Role, Disposable
+    {
+        private boolean finalized = false;
+
+        @Override
+        public void dispose() throws ComponentLifecycleException
+        {
+            this.finalized = true;
+            AmplEmbeddableComponentManagerTest.lastDisposedComponent = "DisposableWithPriorityRoleImpl";
+        }
+
+        public boolean isFinalized()
+        {
+            return this.finalized;
+        }
+    }
+
+    public static class LoggingRoleImpl implements AmplEmbeddableComponentManagerTest.Role
+    {
+        private Logger logger;
+
+        public Logger getLogger()
+        {
+            return this.logger;
+        }
+    }
+
+    @Test(timeout = 10000)
+    public void testHasComponent() throws Exception
+    {
+        EmbeddableComponentManager ecm = new EmbeddableComponentManager();
+        Assert.assertNull(((EmbeddableComponentManager) (ecm)).getParent());
+        Assert.assertNull(((EmbeddableComponentManager) (ecm)).getComponentEventManager());
+        Assert.assertNull(((EmbeddableComponentManager) (ecm)).getNamespace());
+        DefaultComponentDescriptor<AmplEmbeddableComponentManagerTest.Role> d1 =
+            new DefaultComponentDescriptor<AmplEmbeddableComponentManagerTest.Role>();
+        d1.setRoleType(AmplEmbeddableComponentManagerTest.Role.class);
+        d1.setRoleHint("default");
+        ecm.registerComponent(d1);
+        boolean o_testHasComponent__8 = ecm.hasComponent(AmplEmbeddableComponentManagerTest.Role.class);
+        Assert.assertTrue(o_testHasComponent__8);
+        boolean o_testHasComponent__9 = ecm.hasComponent(AmplEmbeddableComponentManagerTest.Role.class, "default");
+        Assert.assertTrue(o_testHasComponent__9);
+    }
+
+    private ComponentManager createParentComponentManager() throws Exception
+    {
+        return createParentComponentManager(null);
+    }
+
+    private ComponentManager createParentComponentManager(String hint) throws Exception
+    {
+        EmbeddableComponentManager parent = new EmbeddableComponentManager();
+        DefaultComponentDescriptor<AmplEmbeddableComponentManagerTest.Role> cd =
+            new DefaultComponentDescriptor<AmplEmbeddableComponentManagerTest.Role>();
+        cd.setRoleType(AmplEmbeddableComponentManagerTest.Role.class);
+        cd.setImplementation(AmplEmbeddableComponentManagerTest.RoleImpl.class);
+        if (hint != null) {
+            cd.setRoleHint(hint);
+        }
+        parent.registerComponent(cd);
+        return parent;
+    }
+
+    @Test(timeout = 10000)
+    public void testRelease() throws Exception
+    {
+        final EmbeddableComponentManager ecm = new EmbeddableComponentManager();
+        Assert.assertNull(((EmbeddableComponentManager) (ecm)).getParent());
+        Assert.assertNull(((EmbeddableComponentManager) (ecm)).getComponentEventManager());
+        Assert.assertNull(((EmbeddableComponentManager) (ecm)).getNamespace());
+        final DefaultComponentDescriptor<AmplEmbeddableComponentManagerTest.Role> cd =
+            new DefaultComponentDescriptor<AmplEmbeddableComponentManagerTest.Role>();
+        cd.setRoleType(AmplEmbeddableComponentManagerTest.Role.class);
+        cd.setImplementation(AmplEmbeddableComponentManagerTest.RoleImpl.class);
+        AmplEmbeddableComponentManagerTest.Role roleImpl = new AmplEmbeddableComponentManagerTest.RoleImpl();
+        ecm.registerComponent(cd, roleImpl);
+        final ComponentEventManager cem = Mockito.mock(ComponentEventManager.class);
+        ecm.setComponentEventManager(cem);
+        ecm.release(roleImpl);
+        Mockito.verify(cem).notifyComponentUnregistered(cd, ecm);
+        Mockito.verify(cem).notifyComponentRegistered(cd, ecm);
+        ecm.getInstance(AmplEmbeddableComponentManagerTest.Role.class);
+        ecm.getInstance(AmplEmbeddableComponentManagerTest.Role.class);
+    }
+
+    public static class ComponentDescriptorRoleImpl implements AmplEmbeddableComponentManagerTest.Role
+    {
+        private ComponentDescriptor<AmplEmbeddableComponentManagerTest.ComponentDescriptorRoleImpl> descriptor;
+
+        public ComponentDescriptor<AmplEmbeddableComponentManagerTest.ComponentDescriptorRoleImpl> getComponentDescriptor()
+        {
+            return this.descriptor;
+        }
+    }
+}
+
diff --git a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/src/test/java/org/xwiki/component/ProviderTest.java b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/src/test/java/org/xwiki/component/ProviderTest.java
index deffe2b..6835930 100644
--- a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/src/test/java/org/xwiki/component/ProviderTest.java
+++ b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/src/test/java/org/xwiki/component/ProviderTest.java
@@ -136,12 +136,12 @@ public void loadAndInjectProviders() throws ComponentLookupException, ComponentR
 
         // Register components for the list and map
         DefaultComponentDescriptor<Role> cd1 = new DefaultComponentDescriptor<Role>();
-        cd1.setRole(Role.class);
+        cd1.setRoleType(Role.class);
         cd1.setRoleHint("hint1");
         cd1.setImplementation(RoleImpl.class);
         cm.registerComponent(cd1);
         DefaultComponentDescriptor<Role> cd2 = new DefaultComponentDescriptor<Role>();
-        cd2.setRole(Role.class);
+        cd2.setRoleType(Role.class);
         cd2.setRoleHint("hint2");
         cd2.setImplementation(RoleImpl.class);
         cm.registerComponent(cd2);
diff --git a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-observation/build.gradle b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-observation/build.gradle
index 67122b9..4c758e0 100644
--- a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-observation/build.gradle
+++ b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-observation/build.gradle
@@ -21,7 +21,7 @@
 // WARNING: NOT WORKING, WORK IN PROGRESS. USE THE MAVEN BUILD WHICH IS THE XWIKI OFFICIAL BUILD TOOL.
 
 dependencies {
-    compile project(':xwiki-component-api')
-    compile project(':xwiki-observation-api')
-    compile "org.apache.commons:commons-lang3:${commonsLang3Version}"
+    api project(':xwiki-component-api')
+    api project(':xwiki-observation-api')
+    implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"
 }
\ No newline at end of file
diff --git a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-observation/pom.xml b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-observation/pom.xml
index e7dd7bf..049a6d8 100644
--- a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-observation/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-observation/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-component</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-component-observation</artifactId>
   <name>XWiki Commons - Component - Observation</name>
@@ -33,6 +33,7 @@
   <description>XWiki Commons - Component - Observation</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.74</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>57</xwiki.pitest.mutationThreshold>
   </properties>
   <dependencies>
     <dependency>
diff --git a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-observation/src/test/java/org/xwiki/component/event/ComponentDescriptorAddedEventTest.java b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-observation/src/test/java/org/xwiki/component/event/ComponentDescriptorAddedEventTest.java
index 13411f4..d391b85 100644
--- a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-observation/src/test/java/org/xwiki/component/event/ComponentDescriptorAddedEventTest.java
+++ b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-observation/src/test/java/org/xwiki/component/event/ComponentDescriptorAddedEventTest.java
@@ -21,10 +21,13 @@
 
 import java.lang.reflect.Type;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.xwiki.observation.event.Event;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
 /**
  * Unit tests for {@link ComponentDescriptorAddedEvent}.
  *
@@ -40,56 +43,49 @@
     }
 
     @Test
-    public void testMatchesAllComponentRoles()
+    public void matchesAllComponentRoles()
     {
         ComponentDescriptorAddedEvent event = new ComponentDescriptorAddedEvent();
         // Note: We use any class for the test but it's supposed to be a component role class.
-        Assert.assertTrue(event.matches(new ComponentDescriptorAddedEvent((Type) Dummy.class, "rolehint")));
+        assertTrue(event.matches(new ComponentDescriptorAddedEvent((Type) Dummy.class, "rolehint")));
     }
 
     @Test
-    public void testMatchesWhenDifferentEvent()
+    public void matchesWhenDifferentEvent()
     {
         ComponentDescriptorAddedEvent event = new ComponentDescriptorAddedEvent();
-        Assert.assertFalse(event.matches(new Event()
-        {
-            @Override
-            public boolean matches(Object otherEvent)
-            {
-                return false;
-            }
-        }));
+        assertFalse(event.matches((Event) e -> false));
     }
 
     @Test
-    public void testMatchesWhenSpecificRoleSpecified()
+    public void matchesWhenSpecificRoleSpecified()
     {
         // Note: We use any class for the test but it's supposed to be a component role class.
         ComponentDescriptorAddedEvent event = new ComponentDescriptorAddedEvent((Type) Dummy.class);
-        Assert.assertTrue(event.matches(new ComponentDescriptorAddedEvent((Type) Dummy.class, "rolehint")));
+        assertTrue(event.matches(new ComponentDescriptorAddedEvent((Type) Dummy.class, "rolehint")));
         // Use a different class so that it doesn't match
-        Assert.assertFalse(event.matches(new ComponentDescriptorAddedEvent((Type) ComponentDescriptorAddedEvent.class,
+        assertFalse(event.matches(new ComponentDescriptorAddedEvent((Type) ComponentDescriptorAddedEvent.class,
             "rolehint")));
     }
 
     @Test
     public void testEquals()
     {
-        Assert.assertEquals(new ComponentDescriptorAddedEvent(), new ComponentDescriptorAddedEvent());
-        Assert.assertEquals(new ComponentDescriptorAddedEvent((Type) Dummy.class), new ComponentDescriptorAddedEvent(
+        assertEquals(new ComponentDescriptorAddedEvent(), new ComponentDescriptorAddedEvent());
+        assertEquals(new ComponentDescriptorAddedEvent((Type) Dummy.class), new ComponentDescriptorAddedEvent(
             (Type) Dummy.class));
-        Assert.assertEquals(new ComponentDescriptorAddedEvent((Type) Dummy.class, "rolehint"),
+        assertEquals(new ComponentDescriptorAddedEvent((Type) Dummy.class, "rolehint"),
             new ComponentDescriptorAddedEvent((Type) Dummy.class, "rolehint"));
     }
 
     @Test
     public void testHashCode()
     {
-        Assert.assertEquals(new ComponentDescriptorAddedEvent().hashCode(),
+        assertEquals(new ComponentDescriptorAddedEvent().hashCode(),
             new ComponentDescriptorAddedEvent().hashCode());
-        Assert.assertEquals(new ComponentDescriptorAddedEvent((Type) Dummy.class).hashCode(),
+        assertEquals(new ComponentDescriptorAddedEvent((Type) Dummy.class).hashCode(),
             new ComponentDescriptorAddedEvent((Type) Dummy.class).hashCode());
-        Assert.assertEquals(new ComponentDescriptorAddedEvent((Type) Dummy.class, "rolehint").hashCode(),
+        assertEquals(new ComponentDescriptorAddedEvent((Type) Dummy.class, "rolehint").hashCode(),
             new ComponentDescriptorAddedEvent((Type) Dummy.class, "rolehint").hashCode());
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-observation/src/test/java/org/xwiki/component/event/ComponentDescriptorRemovedEventTest.java b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-observation/src/test/java/org/xwiki/component/event/ComponentDescriptorRemovedEventTest.java
index 767b7f4..452459a 100644
--- a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-observation/src/test/java/org/xwiki/component/event/ComponentDescriptorRemovedEventTest.java
+++ b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-observation/src/test/java/org/xwiki/component/event/ComponentDescriptorRemovedEventTest.java
@@ -21,10 +21,12 @@
 
 import java.lang.reflect.Type;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.xwiki.observation.event.Event;
 
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
 /**
  * Unit tests for {@link ComponentDescriptorRemovedEvent}.
  *
@@ -40,35 +42,28 @@
     }
 
     @Test
-    public void testMatchesAllComponentRoles()
+    public void matchesAllComponentRoles()
     {
         ComponentDescriptorRemovedEvent event = new ComponentDescriptorRemovedEvent();
         // Note: We use any class for the test but it's supposed to be a component role class.
-        Assert.assertTrue(event.matches(new ComponentDescriptorRemovedEvent((Type) Dummy.class, "rolehint")));
+        assertTrue(event.matches(new ComponentDescriptorRemovedEvent((Type) Dummy.class, "rolehint")));
     }
 
     @Test
-    public void testMatchesWhenDifferentEvent()
+    public void matchesWhenDifferentEvent()
     {
         ComponentDescriptorRemovedEvent event = new ComponentDescriptorRemovedEvent();
-        Assert.assertFalse(event.matches(new Event()
-        {
-            @Override
-            public boolean matches(Object otherEvent)
-            {
-                return false;
-            }
-        }));
+        assertFalse(event.matches((Event) e -> false));
     }
 
     @Test
-    public void testMatchesWhenSpecificRoleSpecified()
+    public void matchesWhenSpecificRoleSpecified()
     {
         // Note: We use any class for the test but it's supposed to be a component role class.
         ComponentDescriptorRemovedEvent event = new ComponentDescriptorRemovedEvent((Type) Dummy.class);
-        Assert.assertTrue(event.matches(new ComponentDescriptorRemovedEvent((Type) Dummy.class, "rolehint")));
+        assertTrue(event.matches(new ComponentDescriptorRemovedEvent((Type) Dummy.class, "rolehint")));
         // Use a different class so that it doesn't match
-        Assert.assertFalse(event.matches(new ComponentDescriptorRemovedEvent((Type) ComponentDescriptorRemovedEvent.class,
+        assertFalse(event.matches(new ComponentDescriptorRemovedEvent((Type) ComponentDescriptorRemovedEvent.class,
             "rolehint")));
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-configuration/pom.xml b/xwiki-commons-core/xwiki-commons-configuration/pom.xml
index 1ddfc17..e77d3b4 100644
--- a/xwiki-commons-core/xwiki-commons-configuration/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-configuration/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-core</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-configuration</artifactId>
   <name>XWiki Commons - Configuration - Parent POM</name>
diff --git a/xwiki-commons-core/xwiki-commons-configuration/xwiki-commons-configuration-api/pom.xml b/xwiki-commons-core/xwiki-commons-configuration/xwiki-commons-configuration-api/pom.xml
index 8fc1871..c6d1fcb 100644
--- a/xwiki-commons-core/xwiki-commons-configuration/xwiki-commons-configuration-api/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-configuration/xwiki-commons-configuration-api/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-configuration</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-configuration-api</artifactId>
   <name>XWiki Commons - Configuration - API</name>
diff --git a/xwiki-commons-core/xwiki-commons-context/build.gradle b/xwiki-commons-core/xwiki-commons-context/build.gradle
index 90e6963..b272d36 100644
--- a/xwiki-commons-core/xwiki-commons-context/build.gradle
+++ b/xwiki-commons-core/xwiki-commons-context/build.gradle
@@ -21,7 +21,7 @@
 // WARNING: NOT WORKING, WORK IN PROGRESS. USE THE MAVEN BUILD WHICH IS THE XWIKI OFFICIAL BUILD TOOL.
 
 dependencies {
-    compile project(':xwiki-component-api')
-    compile "org.slf4j:slf4j-api:${slf4jVersion}"
-    testCompile project(':xwiki-test-simple')
+    api project(':xwiki-component-api')
+    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
+    testImplementation project(':xwiki-test-simple')
 }
\ No newline at end of file
diff --git a/xwiki-commons-core/xwiki-commons-context/pom.xml b/xwiki-commons-core/xwiki-commons-context/pom.xml
index 0c00cc4..19f1ca5 100644
--- a/xwiki-commons-core/xwiki-commons-context/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-context/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-core</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-context</artifactId>
   <name>XWiki Commons - Context</name>
@@ -33,6 +33,7 @@
   <description>XWiki Commons - Context</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.79</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>91</xwiki.pitest.mutationThreshold>
   </properties>
   <dependencies>
     <dependency>
@@ -50,4 +51,13 @@
       <scope>test</scope>
     </dependency>
   </dependencies>
+  <build>
+    <plugins>
+      <!-- Add test source root for executing DSpot-generated tests -->
+      <plugin>
+        <groupId>org.codehaus.mojo</groupId>
+        <artifactId>build-helper-maven-plugin</artifactId>
+      </plugin>
+    </plugins>
+  </build>
 </project>
diff --git a/xwiki-commons-core/xwiki-commons-context/src/main/java/org/xwiki/context/Execution.java b/xwiki-commons-core/xwiki-commons-context/src/main/java/org/xwiki/context/Execution.java
index 5858e8b..ec3a897 100644
--- a/xwiki-commons-core/xwiki-commons-context/src/main/java/org/xwiki/context/Execution.java
+++ b/xwiki-commons-core/xwiki-commons-context/src/main/java/org/xwiki/context/Execution.java
@@ -19,6 +19,8 @@
  */
 package org.xwiki.context;
 
+import java.util.EmptyStackException;
+
 import org.xwiki.component.annotation.Role;
 
 /**
@@ -47,6 +49,8 @@
 
     /**
      * Remove a context level in the current thread.
+     *
+     * @throws EmptyStackException if this stack is empty.
      */
     void popContext();
 
diff --git a/xwiki-commons-core/xwiki-commons-context/src/test/dspot/org/xwiki/context/AmplExecutionContextTest.java b/xwiki-commons-core/xwiki-commons-context/src/test/dspot/org/xwiki/context/AmplExecutionContextTest.java
new file mode 100644
index 0000000..8f4c380
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-context/src/test/dspot/org/xwiki/context/AmplExecutionContextTest.java
@@ -0,0 +1,44 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.context;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public class AmplExecutionContextTest
+{
+    @Test(timeout = 10000)
+    public void illegalInheritance_failAssert0() throws Exception
+    {
+        try {
+            ExecutionContext context = new ExecutionContext();
+            ExecutionContext parent = new ExecutionContext();
+            parent.newProperty("inherited").inherited().initial("test").makeFinal().declare();
+            context.newProperty("inherited").inherited().initial("test").makeFinal().declare();
+            context.inheritFrom(parent);
+            org.junit.Assert.fail("illegalInheritance should have thrown IllegalStateException");
+        } catch (IllegalStateException expected) {
+            Assert.assertEquals(
+                "Execution context cannot be inherited because it already contains property [inherited] which must be inherited because it is an inherited final property.",
+                expected.getMessage());
+        }
+    }
+}
+
diff --git a/xwiki-commons-core/xwiki-commons-crypto/pom.xml b/xwiki-commons-core/xwiki-commons-crypto/pom.xml
index 39f91c9..0b94c40 100644
--- a/xwiki-commons-core/xwiki-commons-crypto/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-crypto/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-core</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-crypto</artifactId>
   <packaging>pom</packaging>
diff --git a/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-cipher/pom.xml b/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-cipher/pom.xml
index f29f9e2..b4ffe3c 100644
--- a/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-cipher/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-cipher/pom.xml
@@ -24,7 +24,7 @@
   <parent>
     <artifactId>xwiki-commons-crypto</artifactId>
     <groupId>org.xwiki.commons</groupId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-crypto-cipher</artifactId>
   <packaging>jar</packaging>
@@ -32,6 +32,7 @@
   <description>Provides confidentiality throught encryption</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.70</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>36</xwiki.pitest.mutationThreshold>
     <!-- Name to display by the Extension Manager -->
     <xwiki.extension.name>Cryptographic Services for Confidentiality</xwiki.extension.name>
   </properties>
@@ -42,5 +43,13 @@
       <version>${project.version}</version>
     </dependency>
   </dependencies>
-
+  <build>
+    <plugins>
+      <!-- Add test source root for executing DSpot-generated tests -->
+      <plugin>
+        <groupId>org.codehaus.mojo</groupId>
+        <artifactId>build-helper-maven-plugin</artifactId>
+      </plugin>
+    </plugins>
+  </build>
 </project>
diff --git a/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-cipher/src/test/dspot/org/xwiki/crypto/cipher/internal/asymmetric/factory/AmplBcRsaOaepCipherFactoryTest.java b/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-cipher/src/test/dspot/org/xwiki/crypto/cipher/internal/asymmetric/factory/AmplBcRsaOaepCipherFactoryTest.java
new file mode 100644
index 0000000..a565809
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-cipher/src/test/dspot/org/xwiki/crypto/cipher/internal/asymmetric/factory/AmplBcRsaOaepCipherFactoryTest.java
@@ -0,0 +1,161 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.crypto.cipher.internal.asymmetric.factory;
+
+import java.security.GeneralSecurityException;
+
+import org.hamcrest.CoreMatchers;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.ExpectedException;
+import org.xwiki.crypto.AsymmetricKeyFactory;
+import org.xwiki.crypto.BinaryStringEncoder;
+import org.xwiki.crypto.cipher.Cipher;
+import org.xwiki.crypto.cipher.CipherFactory;
+import org.xwiki.crypto.internal.DefaultSecureRandomProvider;
+import org.xwiki.crypto.internal.asymmetric.keyfactory.BcRSAKeyFactory;
+import org.xwiki.crypto.internal.encoder.Base64BinaryStringEncoder;
+import org.xwiki.crypto.internal.encoder.HexBinaryStringEncoder;
+import org.xwiki.crypto.params.cipher.asymmetric.AsymmetricCipherParameters;
+import org.xwiki.crypto.params.cipher.asymmetric.PrivateKeyParameters;
+import org.xwiki.crypto.params.cipher.asymmetric.PublicKeyParameters;
+import org.xwiki.crypto.params.cipher.symmetric.SymmetricCipherParameters;
+import org.xwiki.test.annotation.ComponentList;
+import org.xwiki.test.mockito.MockitoComponentMockingRule;
+
+@ComponentList({ Base64BinaryStringEncoder.class, HexBinaryStringEncoder.class, BcRSAKeyFactory.class,
+    DefaultSecureRandomProvider.class })
+public class AmplBcRsaOaepCipherFactoryTest
+{
+    // Link to decoded ASN.1: https://goo.gl/kgV0IB
+    private static final String PRIVATE_KEY = "MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDCmjim/3likJ4" + ((((((
+        (((((((((((((((((("VF564UyygqPjIX/z090AImLl0fDLUkIyCVTSd18wJ3axr1qjLtSgNPWet0puSxO"
+            + "FH0AzFKRCJOjUkQRU8iAkz64MLAf9xrx4nBECciqeB941s01kLtG8C/UqC3O9Sw")
+            + "HSdhtUpUU8V/91SiD09yNJsnODi3WqM3oLg1QYzKhoaD2mVo2xJLQ/QXqr2XIc5")
+            + "i2Mlpfq6S5JNbFD/I+UFhBUlBNuDOEV7ttIt2eFMEUsfkCestGo0YoQYOpTLPcP")
+            + "GRS7MnSY1CLWGUYqaMSnes0nS8ke2PPD4Q0suAZz4msnhNufanscstM8tcNtsZF")
+            + "6hj0JvbZok89szAgMBAAECggEBAKWJ1SlR5ysORDtDBXRc5HiiZEbnSGIFtYXaj")
+            + "N/nCsJBWBVCb+jZeirmU9bEGoB20OQ6WOjHYCnAqraQ51wMK5HgXvZBGtSMD/AH")
+            + "pkiF4YsOYULlXiUL2aQ4NijdvEC1sz1Cw9CAKmElb83UtZ1ZGkJnjhi35giZvU5")
+            + "BQRgbK5k57DFY66yv9VDg8tuD/enI9sRsCUZfCImuShGv4nLqhPMPg+1UxDPGet")
+            + "Vs8uEaJQ017E14wLKLA0DlED13icelU1A7ufkEdeBSv/yZ7ENjervzPwa9nITK/")
+            + "19uzqaHOcYZxmDQn6UHTnaLpIEaUvpp/pbed5S97ETSsqUBC8fqEUECgYEA/Sba")
+            + "o6efydhlXDHbXtyvaJWao19sbI9OfxGC6dR2fZiBx8Do9kVDDbMtb1PYEfLhYbi")
+            + "urmKGbUtcLSFgxNbZifUmG54M92nBsnsetMCqvMVNzYl2Je83V+NrIsLJjFIZ2C")
+            + "BvZa/FKOLDTwSe35fNqaS0ExdwcGNMIT//bDQCmyECgYEAxMq6rN+HpBRuhvvst")
+            + "V99zV+lI/1DzZuXExd+c3PSchiqkJrTLaQDvcaHQir9hK7RqF9vO7tvdluJjgX+")
+            + "f/CMPNQuC5k6vY/0fS4V2NQWtln9BBSzHtocTnZzFNq8tAZqyEhZUHIbkncroXv")
+            + "eUXqtlfOnKB2aYI/+3gPEMYJlH9MCgYA4exjA9r9B65QB0+Xb7mT8cpSD6uBoAD")
+            + "lFRITu4sZlE0exZ6sSdzWUsutqMUy+BHCguvHOWpEfhXbVYuMSR9VVYGrWMpc2B")
+            + "FSBG9MoBOyTHXpUZ10C7bJtW4IlyUvqkM7PV71C9MqKar2kvaUswdPTC7pZoBso")
+            + "GB9+M6crXxdNwQKBgDUVMlGbYi1CTaYfonQyM+8IE7WnhXiatZ+ywKtH3MZmHOw")
+        + "wtzIigdfZC3cvvX7i4S73vztvjdtxSaODvmiobEukOF9sj8m+YQa7Pa1lWFML5x")
+        + "IIu2BhGS2ZCeXgMvKkoH0x9tWaUhGqD5zZmtiDrPs75CUQBypw7SDaBzwLnld9A")
+        + "oGBAPgUh90PvUzbVVkzpVCPI82cmOIVMI1rDE6uCeNzIlN6Xu80RimCSaaDsESi")
+        + "tBtoVWLRWWmuCINyqr6e9AdyvbvT6mQCjbn9+y7t6ZAhLaya5ZMUVEBLyLLqMzr")
+        + "y oi/huj7m4nV4kPZz9LKxDRu3r6o0Pah+daDsTxEYObtsKa7e");
+
+    // Link to decoded ASN.1: https://goo.gl/2YsSco
+    private static final String PUBLIC_KEY = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwpo4pv95YpCeFReeuFM" + (
+        (((("soKj4yF/89PdACJi5dHwy1JCMglU0ndfMCd2sa9aoy7UoDT1nrdKbksThR9AMxS"
+            + "kQiTo1JEEVPIgJM+uDCwH/ca8eJwRAnIqngfeNbNNZC7RvAv1KgtzvUsB0nYbVK")
+            + "VFPFf/dUog9PcjSbJzg4t1qjN6C4NUGMyoaGg9plaNsSS0P0F6q9lyHOYtjJaX6")
+            + "ukuSTWxQ/yPlBYQVJQTbgzhFe7bSLdnhTBFLH5AnrLRqNGKEGDqUyz3DxkUuzJ0")
+            + "mNQi1hlGKmjEp3rNJ0vJHtjzw+ENLLgGc+JrJ4Tbn2p7HLLTPLXDbbGReoY9Cb2") + "2aJPPbMwIDAQAB");
+
+    private static final String INPUT = "4e6f77206973207468652074696d6520666f7220616c6c20676f6f64206d656e";
+
+    @Rule
+    public final MockitoComponentMockingRule<CipherFactory> mocker =
+        new MockitoComponentMockingRule<CipherFactory>(BcRsaOaepCipherFactory.class);
+
+    private CipherFactory factory;
+
+    private static PrivateKeyParameters privateKey;
+
+    private static PublicKeyParameters publicKey;
+
+    private static byte[] input;
+
+    @Before
+    public void configure() throws Exception
+    {
+        factory = mocker.getComponentUnderTest();
+        // Decode keys once for all tests.
+        if ((AmplBcRsaOaepCipherFactoryTest.privateKey) == null) {
+            BinaryStringEncoder base64Encoder = mocker.getInstance(BinaryStringEncoder.class, "Base64");
+            BinaryStringEncoder hexEencoder = mocker.getInstance(BinaryStringEncoder.class, "Base64");
+            AsymmetricKeyFactory keyfactory = mocker.getInstance(AsymmetricKeyFactory.class, "RSA");
+            AmplBcRsaOaepCipherFactoryTest.privateKey =
+                keyfactory.fromPKCS8(base64Encoder.decode(AmplBcRsaOaepCipherFactoryTest.PRIVATE_KEY));
+            AmplBcRsaOaepCipherFactoryTest.publicKey =
+                keyfactory.fromX509(base64Encoder.decode(AmplBcRsaOaepCipherFactoryTest.PUBLIC_KEY));
+            AmplBcRsaOaepCipherFactoryTest.input = hexEencoder.decode(AmplBcRsaOaepCipherFactoryTest.INPUT);
+        }
+    }
+
+    @Test(timeout = 10000)
+    public void testRSAEncryptionDecryptionProgressive_failAssert2() throws Exception
+    {
+        // AssertGenerator generate try/catch block with fail statement
+        try {
+            Cipher cipher = factory.getInstance(true, AmplBcRsaOaepCipherFactoryTest.publicKey);
+            cipher.update(AmplBcRsaOaepCipherFactoryTest.input, 0, 17);
+            cipher.update(AmplBcRsaOaepCipherFactoryTest.input, 17, 1);
+            cipher
+                .update(AmplBcRsaOaepCipherFactoryTest.input, 18, ((AmplBcRsaOaepCipherFactoryTest.input.length) - 18));
+            byte[] encrypted = cipher.doFinal();
+            cipher = factory.getInstance(false, AmplBcRsaOaepCipherFactoryTest.privateKey);
+            cipher.update(encrypted, 0, 65);
+            cipher.update(encrypted, 65, 1);
+            cipher.update(encrypted, 66, ((encrypted.length) - 66));
+            cipher.doFinal();
+            CoreMatchers.equalTo(AmplBcRsaOaepCipherFactoryTest.input);
+            cipher = factory.getInstance(true, AmplBcRsaOaepCipherFactoryTest.privateKey);
+            cipher.update(AmplBcRsaOaepCipherFactoryTest.input, 0, 15);
+            cipher.update(AmplBcRsaOaepCipherFactoryTest.input, 15, 1);
+            encrypted = cipher.doFinal(AmplBcRsaOaepCipherFactoryTest.input, 16,
+                ((AmplBcRsaOaepCipherFactoryTest.input.length) - 16));
+            cipher = factory.getInstance(false, AmplBcRsaOaepCipherFactoryTest.publicKey);
+            cipher.update(encrypted);
+            cipher.doFinal();
+            CoreMatchers.equalTo(AmplBcRsaOaepCipherFactoryTest.input);
+            cipher.doFinal();
+            CoreMatchers.equalTo(AmplBcRsaOaepCipherFactoryTest.input);
+            org.junit.Assert.fail("testRSAEncryptionDecryptionProgressive should have thrown GeneralSecurityException");
+        } catch (GeneralSecurityException expected) {
+            Assert.assertEquals("Cipher failed to process data.", expected.getMessage());
+        }
+    }
+
+    @Rule
+    public ExpectedException thrown = ExpectedException.none();
+
+    class WrongParameters implements AsymmetricCipherParameters
+    {
+    }
+
+    class SymmetricParameters implements SymmetricCipherParameters
+    {
+    }
+}
+
diff --git a/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-common/pom.xml b/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-common/pom.xml
index 0504484..f460b9f 100644
--- a/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-common/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-common/pom.xml
@@ -24,7 +24,7 @@
   <parent>
     <artifactId>xwiki-commons-crypto</artifactId>
     <groupId>org.xwiki.commons</groupId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-crypto-common</artifactId>
   <packaging>jar</packaging>
@@ -32,6 +32,7 @@
   <description>API common to all crypto modules</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.62</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>38</xwiki.pitest.mutationThreshold>
     <!-- Name to display by the Extension Manager -->
     <xwiki.extension.name>Cryptographic Services Common API</xwiki.extension.name>
     <!-- Cryptography requires complex expressions, allow a few such expressions -->
diff --git a/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-common/src/test/java/org/xwiki/crypto/internal/FixedSecureRandomProvider.java b/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-common/src/test/java/org/xwiki/crypto/internal/FixedSecureRandomProvider.java
index 25b91ee..3171b24 100644
--- a/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-common/src/test/java/org/xwiki/crypto/internal/FixedSecureRandomProvider.java
+++ b/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-common/src/test/java/org/xwiki/crypto/internal/FixedSecureRandomProvider.java
@@ -35,219 +35,447 @@
 public class FixedSecureRandomProvider implements Provider<SecureRandom>, Initializable
 {
     /**
-     * The random data below has been generated using {@link FindEntropyForSecureRandomProvider}.
-     * The purpose of this static random data is to avoid relying on the entropy of the underlying test machine,
-     * since this could be very long if the entropy is too low, and this increase over time if multiple tests are
-     * run in a raw.
+     * The random data below has been generated using {@link FindEntropyForSecureRandomProvider}. The purpose of this
+     * static random data is to avoid relying on the entropy of the underlying test machine, since this could be very
+     * long if the entropy is too low, and this increase over time if multiple tests are run in a raw.
      */
-    private static final byte[] RANDOM_DATA = Base64.decode(
-        "zUurWfUUIWxZ7uiYtxOY+emVmTgjukS61doC6zajs0Sx4kFjHrXuG4TBzeuhJk5HuJciPBSBam7w0yrWsertltm7kNHjvmnb6yZo"
-            + "QFWqkDKRvO7GGsocS5Xu6kYmK4Y2ceW0C2TQkAYGevgc8duX6sShak1ujkB5DkWHTPJy9lOOdVIaznUu4UZUQXGJFUiNCqxDksHh"
-            + "GX09RmqMtX1YgY15PRnrSxaTYGx9TUo1qTK7somGgJKPVvN+lj9tUKiwHmEXXf7Hudv5Xu/d/0rsGHgUPnZmwdRHPxxl+jPv747q"
-            + "/7ahyo38E4YBYVP8jx1lT9xWieCuTolKmRuNaLh4/CZ4BGbdER615ELFye1VINbySq4btzAmgeTo8ko/e/zr2E7zuAMmMRJuCJM/"
-            + "qQ/tEssDGohdvfhG0E234nUmAwoji0Q/HFstcDYPExjL90j5qObKMCIsmTwAvyKUkMua7jYMmxjAJKS3eaPYPo8r+Q87LQtkxcV7"
-            + "e14mazvDgPt1Nd9riOjOKsoaGHpDf/nNRU9mysZXs1UYxRrfcrjutZ3N/w2cip3edxVd9hI+YoB2/lXcHu+aRDh3f8OSJCib2MMn"
-            + "/mi0F60YQwXmwn8+ZYssuVT0CC27QnsJDBUaV/MjP1B0Htyx6Zajhz9PrkVJMAXY7MuRDg7tb/8U//pnu3GtXCN8DCLPJ1plBPMS"
-            + "z1Vy7LtRCyD9jcw/5wDIlEBBP69XgRuVlvMI5USzxW8hcql3h/hgkPC4AOKBq1P5NE99dxaTnUJO8IeN08lKq4SIG6+vtdbJcefP"
-            + "Fe5FNmwE6OQv0D8eubz1gQ7QCr4knObcqpyC9gey+2iRR39ituJqESAj21I6g2rxLI6C/tEBYSPxo919toNvbg/hX9duWDmjHYtt"
-            + "Bj3ZW6BuIc23GGbd+XiISFxrXnuLOq54adE7XXF2hkBl6xlz8iYu8FmXXtRdOqekG+OH+HMJ54KFBr2zYCrAX/3iUOKdPgDCVt85"
-            + "/94hjfVeBw9RrWtnSqvbqILczaUUzI8h6z/2QFdoP0G/bRJhMT0EqluafZexrInC7Nu/K7eWLkqFvCAnVG2g+MGGpA7jJ0j7gb2b"
-            + "/Fypiv8qBC5GERxpqx+0mjjusk4Dt75KYj4jGao+2/Lx2h9Rj2EvJwDO4MdRW2wjoknWG+yRGJ5mMUfwnQjxQegK41HiUwjjXLEf"
-            + "jxSbsocd0mMi35SuxHLkYQm60RgXoGATJo1aB+zNEz4qz++9ROm2rsuQ5GTPj+EHhXDSw9fMJ/iLr4eER1Rgxfy0QHbhDCSs6OYm"
-            + "YhGc+j7X8De0bhNJ5wNdVI9xwSLLYyE2F2pEzCxCXwsozUR0A/aqNG1ETh+7Kn2xL1D7qukAm0lfl5V0Yr4TW4ZveFDUbAPeOFvi"
-            + "xB/BquUyg2cbvW+aKxi85erXIEjw2n++N9eY6InYCDjrpFc6CQYpjJ/ABu4swBoig4gdrCC6+F23M4IDec+appxHgJPJwiLh/vYm"
-            + "coCTYmZoYe0sZamUcRIewUrUyw6c4mmeAyn4NBq0a9JnsZA/d9Jf2d+JnPYiQDWHtQyVQhN9sStR0LYoww1dFS8eH9weVZ8TaJBe"
-            + "q+dD6uCkC+L/lwVwpmO+nSy9SFcdvEZCr6YB3LN9jsy5MvPW6hgbWkwzWjVtsOKA+2Ta42mmbSn+yYyWEgu8h+vF0kzqq+GPxF2x"
-            + "AF3x4YsbqxMFIPFD5mRF43dwO5dfyHqmhmOB8awj2Fxo0zcVfxySd+1KictbGM2fOCUP77XfYRiKqso8w5A7f5nWAH977/TrwV2d"
-            + "tNNP7RRDM2xM/R4GuIjTiN2ZBw454jPly1G5tIDld77RXBMrfWSO2ePkJ5Bjftwy4SGkD/vGpU+OKkSvRPX9fgKYKMz5Bkfx0JYF"
-            + "48A36bg0N5ZMyt9pQSgp8t2P5bm5t/Kqad+DpzRKv0T032jpyIauPWhDKeTIVYUVXzG2gty26Wj1NhHCAsDBdFB0sdcjfma/BNab"
-            + "Zq28OwfrczOXMMWqHXsWZ6o3e8K35EVedXx8faFQCKCVW1z4a97dEHKsZsKVSuMft4Iz9ENVLLQNNCOhidpIf7kRPzq4lSWGxtDw"
-            + "FlpRHOjqLh43WShVQ3chPGWoAdmfA6BG8BOkPeFYtSHP60y1CXpsUTvhHJKB2Q8P0Sh+mCukjlKjILXJh0t8yQQtPsx7tyqbfxjR"
-            + "oQh9AtrhKeYJzVSb3A6LzfAbhi/tw4TRzF5jrhZRXNaKsnLmpPjo0FKoaqzQtQQEAEslFSasDdK0KSxZt6Df7C+4uUpOeGjjoAVM"
-            + "BxAsU6tAXgwwtztkAH1vL3saGVE1qA8xIrRWZjfUnI8RutfV4rEnNJZbWYJbYyw4vxMGA66Iois+wM9CMy8CPO3mJ3aAiH40lBFJ"
-            + "53SYaqwRlb2Q0yaasMrm6VsT6ikDtbMA7BC/g5uHQB67dLmKIbtoHZmWpiUqg+QwckOLVQVC1cISp8E+Zn7oLU/oygLQyyWYH2yD"
-            + "2aV+h+C3NIE0f6ybMDIJjAT6H/dmuUiXMFD+U54fveYVoAbTAOoF+UyLrsP9CKz9mT02UOpWGSj4A02OHLLpzaiPmWLD9vlArX1h"
-            + "S0KSEjSsZCVyLCCqOq8Yv8qURMoHdpQmNf9Gf7INJzlNvAADEZhdcTtFsyrS3dIR2YkZ5ldZ4DduHtapGFSobdRcDZSy3qvk+dtm"
-            + "kF2IxwhlJc5wtEktbC7SAVztlrPWOHXdE5vcUvcHGJV1/zZ6z64LHz7qkjaFmemVM2nIUpI6XevOSrdveOgpKUuBlq2IybG3sp+g"
-            + "iVS/Tj8oHiyz0DH1i+VzG1N20HO+jWPq2TCoej/JFnL0l07q4DTNRemLLuQhPggmK6ldrBO59NivF71v1M5XAp5wBF5SImJjCLyq"
-            + "yBmqeqUBjjAblejsoc8ofdFs/x5ZCQPq4zXcABPRX5qqX1Duj7JpiCJuC1ABNohsrEb+Y4VaL81VFd53Q79jIdqIyWr7OokenRaG"
-            + "F544HxOxT8EL+D5RmpBfZBQ+9Kr/EEiDZP+IReOByBDJPETE0Z4xED4Lodq567muGwGgtVUl8hQBfayJi7eGr1uQfgftFvSAL7G2"
-            + "NER8AczBZ+VQ+iUFo70V3kEBA/HTrEyM+Nmm+NgiTMczBV1HyenYJBNQf/TSUaTBF1isAF1a9KStb/ir2qFQNZCLosv9NENGEKgF"
-            + "wCMf4o8wexa9FIT0RXwfLa74uQhm/L2CwwBF0dnFQXKs8BZvWCrh5SU9qP+BEEPS96NxbtCvYvnFCodHAbzps9UDm2rAriOzQCdU"
-            + "cdx3k02UU/HSb8k8CfKzii+HzU00f3FX+RMb03ACDGW+d5zvxroqsqClqhpUL7ViRn65D3StN9xLDlNM6SQWoKfUcuLu/Myxc+e+"
-            + "yNcqgEVoiVn1yvzg7bNfTRzt1+eZHdAH/Ev9mhJljil8KgFfmuk4WZkTr49kpJB5N3BYxLU0Tka4JvA8EqfyQQcnVe44iU7Nbx2w"
-            + "xIuDcq2QtkIA9J9nPIAXvreZvVCZz3hl3xlxMO4ImfKuurhDgrXsrdF9SulmdEZ8Ryz3hz1fECktX1oY0d6kI/zPJj5/0Pj0kb2y"
-            + "GMDochofJefVYokpy6fhXLWgyY6gF2Yv2gI6kGnZEk5xOGd/SSLome+Y5FUY4/V+vANB7tj9u8ZyOBBgu5HM+mx6gbTapmvA8fWj"
-            + "bYFzXCjAj/KuwEvVqK/97abg3T9FCRmKMOCPzLncoBjdRDFFusiv5mWkOZQNqQx9zVqpoBEqEXmXoe51QOxv/P3Lu6bNFU7PTs50"
-            + "eN2Z5qOj2yK9Us7eTW+9xkHjIqvSUuIrFocZ+pAdjT4Vie4oA5kj8KTWPI1eBaJP8794UDqrLmMravru4rrGN3xmtNEVoVe/cBd8"
-            + "X2ulZCbrmEcnhGBcTHrMvO2HDFfA4HmleNDxss8ffUQmEVSjmnVoJSqMdYRgxG9L3lwrEfSYPHYzUdQAN+3vGWftfsdITYIKTq9q"
-            + "mBtpGVPm4/BF+TJ7kmvCerY4Jkv4xkuRBAoKKsq5QnPB7oBuvK8D2ykPR5XnfyWncdC03Dvbg6+RzZ6U3NZPqrO8126OjHZmL+Tg"
-            + "QS6dV/0XUutDjLMx5GwzeuPmgESM2TAtOwPPqINb0hQ0HTOc3STZLlRaE+57oAGrngaKbj2xWO9346mBEVVPIPqeTFPFcmbD521L"
-            + "6WtAnPPiPhOZYwy/GeUF0jHIKMmx80Xbrg7/YTEFuDzy6r9ZdkqAHLd2DgFZMi03gcNc3g+mIrKvxo0iGw8n4W4FlnQ+dfyg5m0H"
-            + "NNxdav2hS0apzdLeiq7xklovGMyX5N6zHQxYSRSGNAldgIc46VL1QILqtifdrEadr4j1FB1i31vikSUMvLVZENcuXDnJqd5/wLoM"
-            + "0Xxy9KzJOPQaVgvY2xhnbAng9ozAyKHvoGGak/Z8zRvNSwVkMA0bMhPAKziwVM6iPVVCIoxoplXy8JOf9BfoF94D4ueptqMZhiBJ"
-            + "1FnG3R58IsfHTTAqUxzmzr1BO80vgAQrW/GPkE4nXpSxNjB57cvBI1IccfZwNBbATL7yF3729nwKIZR++oh3tJazGc9RicTUZYtQ"
-            + "osyvWSyeYFYm4TjoKwM1Rp6FDnDiRxesBo1gy3WJ71wIakoNAib7uncfPXi2SLgvCB/cUUt7ZwowDDFguHhlkEhnWVHa+YzHvLYy"
-            + "QXs2ZWdNFFYHaNCrbhEXsDkzNex2G/hj9/BPAay5rcFq8y6DwTIlLJ3RpTNwDZVOQKThdaVLTuu+hrxyMJKY3edPsEPq68pGozSD"
-            + "o1/6gHKnYo5AmYMQsQLnAxHELXrSj57Vjm+lzpQnKZf8XaTVXk2dARPiY08AZMKtgNj9eyRLSIdm2HHeprhW5V455tXz5CobTp46"
-            + "qUsnbeQc0VnZqlI92BRJuIjwvxGrT+k07c4WtBFzsKPChK1tIOiqIIgQOddAv6x+bnc24IXbqn1Qmz9dLhP1LSvmZCW5JyjMAwAD"
-            + "ewJWrxBUQvqFzwVPP4Kji4vOsvpj6hnCN9LOMUwjCFewpZWi6xvh8VmmZ/ZI4q4sXBT23OCIQUZ7AN5AwPbb+A/Dhs8Bp6CiPy4F"
-            + "iAn+H8UL9DQVKplTkAx9LsqIWSALdV7ZWgOu5GJZ9MqQ+MvaKLGecHplBlUYJMwM1u520nSNyQxf34aOvHCIWam+5NUsyI/ixe5L"
-            + "POLET7lVZSmpFM1MiBRBs3C8/VaX3314CYeEErorRug2TpOgI81O7N9CIZIdHBbtLGKGD8pYSjrccpWUrm8a9AcWtsXIVXMljFcw"
-            + "Gw7Km1GjD9PHVgNbc9o5pFo5rVkk4mknVKhcG281NEWtzeRWw2u2FOhfZuPebWBwG7iyqtogjj6jW2hLubERDWLpoeHgz6wIW3Y5"
-            + "phrHpd/XHKZiy6x0BFV1jN/M6djlmqox7mQ9ZXOPZL+Wjh3xfV+39LzsN7+lbSGIl5BdW+rN99MC5lsgzhE6VN9ctOtqN5C6UOlB"
-            + "ow1eE8cuC4bIMOBuJXpl/KQojbGWXRaEihAoLZBB6Sj6tapcFH+gYpQKcNjdmnCZd1+zPQ1Iiq0p/ls0RrqmI6St1EcpGGXeolaA"
-            + "IlGPoi6MRaTGHHtRWtKHSgx6i6ezeT8sBLrFKO9Q3P44De3d3AjNa4V6XuC+ReP9uWE3YaWPEgCjygjinH9NcQ4sFosLMXFn8UC2"
-            + "5PHCnPb8hW3LRgg+6+Lscau+b1teC6fWHHgJHoW6AVtg4hxHyiPI1YCN2M6dpg76owC55p8IphX2EhXP8xQmzttui8fQKE1YbPLx"
-            + "BcWLlvtMdNe1T52utRE387Uh2MbIMVKN41okT39fXl2VMK8icWT2BF1Rxb+XaHW4EEehJAhq0HwvI+HPQOINL/XocRGsIuJGGxXF"
-            + "0p/ekORavO0y4AdHiVKT1fPeEDNZVRWjfGRXU8KDZPchGnhhKcBbiQsNEURBVD9Q1Hd3D+c81R611+AQxvSkeaMMxFI/wSWWiiuo"
-            + "uYB9WQgxVs2hE/2sjH+T6ulRViI4q6J00pAsCSs46f/UknzNIO04cniQR+Rbn1PQn6REgKok1rLN7NazfYRwD7uyRjQjEdPlCZN3"
-            + "cU6gDSUcQba+h2BMlzdHetqJ7MEozDSmJK36StV4ArUnzMxmABP3/+XW9f1uzuk0giJDSZTsyt5M3vZuqmvMnshqK03fFOXvMLrb"
-            + "eg/HQMqhuWSstL37Q/knrfTR1kKBZvBgVRCZuG4cO6w1FcT8p0xkcjXs21fXNWzLLT6ew41o3Gs2TxgNXc0BodGv8UBkpGr6+Pnj"
-            + "BWReR0P5gE2GLz4whSzYIgwrioZae1ispkJAdP/zmw97M87bUCG1uHp/1nkcISNEsf3a+zXXSeWilRLaqFC8ewtcwXrla4bep7tp"
-            + "GcJueMHUDh5KdPZJIdFwQ7F9Ge2DCzbIKSdbLhNJbysgv7pEIw9ICchiSz9GWcIT93uFHDVwfhAkuIt+XDOMV0u59/F5Z4C+Ayf3"
-            + "3xgmbmdXADfSMbzmXY5M0kse1yfPP1T4cuZ2ONawQY87Uz8nO3JV6kvRxSjaHybOO1XmXnwNE42pdY/0RfAy4tLR7EjBNA1jCVWT"
-            + "QXw1blwH/XE7JO+1QXlovX6ABwvlvTFZ8L02G/tNP7FjJjDSYw4CgvTSL60NuzuuwpGLytW+5MsUczuEXVEfJP74e/rHub+c15Un"
-            + "wUL2eyT1wQnumMIl01CLesfbKlR6TnzLkXWDtDiIjUbve76cyxb7VUdha+g1Mg5DZKNo6e0vh0dVEPpTmM4+n0sGWzYE185B0Tn6"
-            + "LAgpDHPycb0f/TRQttBuaCgPgvPZKKzf5fnabMpmh+BzGam9oMwJ30OUY22ImfyOLh3ff20CjhO6dZzptR012CM7DCwa9a5zjP3p"
-            + "xD97IJjJAyAZdRU7usioj2aKMs8JV5DH0fVWuLhcMJeelAyX27zGcpYGpz2oHaJnSfNtQfR5GV1dRTGBngikdaYLj77FrLDlKTBC"
-            + "7Fwi2xv28YnB06B4ElTSTH6+d5b8hUD1rFLq89tbfbG7KU7nQgakDRZTjM2CGoBMpoCoMcz8vxeK3JwS0t7QL9Aa4mlobD+twmS1"
-            + "XO1SAJBwYK3RvUD/zViuEumi12pAV9yCx+jwQOF2Y54ncvzU1qm1q8bY7MXU5dyZURDho7U3pJhxCF8BUw2/1jumP3AtNJr/qdhc"
-            + "KALhviBL5PKO2U15t+b8QDx8vMjb0eSFRCxLeja+AbJEoN3jsMmrxWKelea7WJXJaVDR1ISwVa4F3xxYJzo+ytOoqY/gF46HW+bf"
-            + "TDBh//Rih55HKyAsF3KBmht5ETs1yCKSAiNrNgack4/cxfIvxRTQEtrXtrlXdNDZ2j5l8FzgB9XnNm/FZJCOVe3MOUKsXltPaRSu"
-            + "Gyt5tAHkjg/ndnVDQqMtqpIr9A+3PdWSxDX78tDl/AenQpgm+9UZJvk62ClqrlKo9PIuhEYUdHZdQLm6fPsmn2vyx58Sv61BKJFJ"
-            + "pD0ca8sdzFpAi7BQkdbDe7Lghpt6Xqcg7Dc3SlEhxzVsADU1tkW15l1p2bpxp722cwzjD0suSET8hvQAp8BKsjcxGtMPm7f5WmTT"
-            + "kF7z7p65Z+JT/yLBat9AR27xIcHaiGFg9vj/j/eIlddTUgJ+oX8t9a22ulb/a16NEseOYnPh7stYeA9y/YTdvhFH092T2j3cb7EC"
-            + "xUeCPYMG4n/JTq/XI5S2fmX7rYCUWqKonQddDRTw0hJZ6O2Mvb+/mQgk7DW1pbfPqe/QThfGg/wSvLd0tECV0Vl/Z9iPVTzdpdWQ"
-            + "D3V3DAt1DpYWd6LQTnaRguPIRbVSh9NyEtEhT2qTyhVNpJMOp434enrpF+aNZguLAlQFtpCfON6ny+pL6uvbF6HWajXIDPd+5Kam"
-            + "GltoZur84jCU7zz1fh+WpITV+BgfrJ/WZUwdCaoNY3uT1ICKlAgeURXZqaISvxMqHegLFw+1L6W87VXzjdVQLExJfQbFTfcPDeeX"
-            + "2tJCX4e6QA3yetkG2ASV3/1kOS04FoERhODoSRyBxS48CWHDZP3H17j+XPghHVqEBXC3U3BHuy5+L+vm8h8IX3V5FBLzkS149s22"
-            + "+XQx3sbaaAEzfzaNqsRW6XC7t/wtM8ZhbhCVmOeoSUL73HUdso+5bwz716P86dHb7Iv/aOm5NoyelYGv0SxnclHPRu2bxpO/6ydX"
-            + "Y5EX+xA6W6AMvw3TIiYYFCokkJ8hNLnbHwu7Pw7/sX5w3TLk7TcxvsmwZWIoIVAjMTsHH0dTxxnTml7wAbT/FASJ5xwWL469enF1"
-            + "Rim7yhPwUyORMdst15bGoCw20kVAmfGnPZ9frQhV5rN8/3SR/z8THvIB3SnGQe1AchRYw36osbLfSRyavnDmKj5Oi1DvLW72mtJs"
-            + "02X9qVF8WKBOkJUJd0P2/pJz2H1wOsIu7ojfjAgX+fHkt09U6YgAq1AYls0vssbiSjQyqTyEIHzlyOf+xHWDiINjPxBCtQENoVfl"
-            + "uzDv/y2UNrYbAPmuZa1ST0HZrQHSD/Cu7KAtE648Y+ou/nTcLl5YCe6jBwFcnkqRa1yrPEXCRSF2276eN1/c5At/QIVtDJsra5Od"
-            + "7MLBZnn76ojZnpm5hYVHDTPSKqtngbU0MxP4EwdK1OMnlrcLyOCr4KYonDFebTndDOm5/pwcmBG96fqgUfWG0t0RlqE6tq3Nxo4J"
-            + "zJPaihsOM15d7W+XohopK8z/YD4nDBlMQCW/j38LTJGcSUmqKjjkuRi7IMy4aXr6h0GOJ4pIqat4SYF4lEKu6trTZOAL72Jno1KG"
-            + "H9vDkif0m3dumnGAD9KBXFEUBWglCSlhhVN5XBQOkq9eJ8SRD4FKh9qsEu3/Oia3UI1wGTcyv7v6JuhvISh5GjuELN79ccfkwBbH"
-            + "BZrNUq5AEJ/365Y8Hvk8iU94KgmTC28bvc8x7yEDTSA4yurpgnkhhu0THsP2TQLphuRleeXdjuedft09HyG1WhJVJH1/beglfyaU"
-            + "0rWBWAQX/He/7F6XMt1JZLxzUXxEiigJo25MngdwTp44Mr2RPddSUAQwa9WgUfK7u3jyh8OqrtpbN0U0hdilkMYPNj+SV1wnU7Mo"
-            + "A2KkeOBxnT6n5/4l3R30RPiQvzwuZz4+0JlknYaiQidTQoEUdY89HdytoTT8sG6ASbUTlrmJ2epIia0fhZ9f8GIvuy6Zni0NqshH"
-            + "BbYs5Bx+449kA58xYjMjq8R9EZUPuIFICIqTQqyZYVJY75OufqWf2nR97hWBcQtBkz/fLFZB6Ut1Yr6lBBqblqzCxPsrDVUQEULw"
-            + "skiIhUBiqwT26EITB9xLiLX5tSQd5gNjz5tvMtmndDQawB448hs1Lui2Fs1r4s/c/8m/9i+kOe3O+TbJbQIin2bt8fjT9W2Oh46W"
-            + "roShh1cQ3fcOa998kThPjVsD9nEjUgNbAVSa+Hky97NgvEcdVas/saZO81FSwnruq0lTZql8oFB7VMdAmjorW9YgQkcKt4QmlTTf"
-            + "mc7Y20yMJEIALYvTJ6XYhhyVnp0D0/PEM1DE9SThNCWzf/maBjRrMkW1iM3loGrTpWVkRFTvYFb/cjiDYV9PsVMHYJ2khSJjbhJX"
-            + "o77nVFuOpwp1VlvVKmeMntLcbWjuty3m3gRalbkRfnmC313N1pXu+4Co94Vs+xdcb2gufZjJ9QyNUMaIraq9xVWsoaRqWquJZ94C"
-            + "cJ6atu92Oxw3ZmlePvCuJK4E9W2QRYsn7dEzB32kBuRZQbURcFeBPTmUs0N9y8rlvRAbswv7vITUq/u4Z3/muP2JHGm7mq05WYVw"
-            + "ttWgslceAmeUgEyvNnd36cnc5NJ41qsb5Uix8cpxT+VywO3BPs9UJE2QTDFo6aQsYRUfXL+kNIMn6BkFSUkLyObTnn/ULfHp2maN"
-            + "6bSlSu8AmvLVIaHaEybZOaeVzMXWg3k0YGeFoqqyb7S+OqiD/OheVFqEu2i0vYjD6slJ9xr+DVjQ6SqeEThps+bRlDAoS/l/sFTL"
-            + "6Sq2UiF3k40t4xhbFGwPgvzYqliBcFdUfi+HO38GDOZnYD1NQmyQUUCRorBKS9lMqCdZ8Br7miK2jWVBDWLdEM7QTDNeDg2K6gim"
-            + "+LXIBW1cWjRTW0aDknjsGRVX2VF7WcZvNtsZZFb+49b64ikZyBmftMjUijGsYSU3d+bz6IOQ1NXFNewwgkdWJJqDkZJ0TA8UdQP5"
-            + "1BNq+ICO0DnrUh3kbCHFessxIXZUuduHdtEYfF0weioqOPvqV3E9bg6cXpDMX7CZduMaJewNF4RljVTw3fptmTccGqYJ1zlSGzmW"
-            + "eIdpQzDKnpGcarsRV23QbJ77W+IQzPiCfATxYWadcOD10dU6cBDAvFX6BiAVL7LjNVe6vfhVjcn0S21K3iBzODIrA7+jeKQXnGBM"
-            + "DO1XcYUwgY2x5JqkjAuiTzqrcRZvqF9bYfT6c8o1wvviXuKcDuxLgifc5sZYd9ATSdc9gIvBysfHyJkB42WqOVJdaX+jKRMRKN33"
-            + "mmER8/5xo9iL9LjC21EUXte4MxP7UtP2mcaHRlj3e/Bq8W49EU1bkXl/t8wM92om84eUDcukD5WrZS3HId5VrP0l76V3J4B2F06A"
-            + "Q0KAeND6y5N8fcGsJ4LdrBGsgwRjT38t1ds6OEu6X/QG5hC6/Zd6PTqzxGe7yKb16vnNGjKPHUvna7Ifl7n68kZ3wwGmVqgDy+ql"
-            + "Y6ZwI91ztVYwIFsWfagUMF3fiKYB8HI3yW9x/4TCQjnLeUYDB2oasAz+fhghPJnXPMJenQVwUe4DWFWhkvWjDrV95cDnhyB8Xza3"
-            + "HLc0RcMgh2XJbaiqy2yenCTPTmshFSUTr0Y0YOnbAuJBMofFrgV3tgoGIrHMoZI4WqHydU8eFcoi3+QnfCNQ6AoewOmUGbNJyWlE"
-            + "1MZUFQ1KVJsSzr+FMsny6VFLQD2e0SZrfmTBnaajMCf8U2DXIHK/3rx4HUH5FB7oNbY+TTT460P+8JEY57zB0R79ZfUJT+FRaRGd"
-            + "0vk6VURF+W82rNDC0lIj9bRYOcjn7bJOIIRF7h2OtOkP4JcQfDDnK1Ys7Oo7fnqzEZ+TDmuJybiLou273sofYt641qevC9wsTe+8"
-            + "dIYnHmC5gfm6jDEMncEnKD3PGH+WJCJk3OYuCDeh8kVdg7yJUehgIaWI7zzx3AXBq1NLQH79xbsffBsqpN0y2sDnOBXHQapfYRZK"
-            + "Myg8GV8nQ8zWeGrV8r8BZmEzS3tAVLUMSu4+ENDHEzyPGQuV8iSCWXRcIo64h143TJttMm2zisfgHB7exSzT4T27MGhjZsfzssHo"
-            + "GL6SoThGuqjeDg4P5VtVpDgMWiRZase13WVFnTbuO0b3ludxUoSTzv2nEp5OmBY7iA2tx4xTClWjCyj/DzoN6W7wls9zOry4CX5v"
-            + "ZgEMCcZrQrPG7QMSWxG+U7yoglwduUH4TfLRkA6f2HLXkp/VHrZc1yT8qvfVJy2o6QPsytWbQlVo4n0VeTvLnQdtIjaY5P+ewil9"
-            + "9eI7cvUG0z80cVRpHlB0ATHumx7VfnKFnb+3Y/o18lqQP+Az2TbIPjUqH92XUFc7AI8pnHHCajlOIbnr4nMb8y5BjcyakkLizQPg"
-            + "6lxtPZdFX5bESDAcGsqqNS6q8TQee792xrj0LckZN9dA2Wd4/yRYHInpPmjj8kn1f3HeLT8hU/cYRt68QglF/QvIBY/a4DQf938v"
-            + "XVKCApf2dNdwfsawV6C9xWvAfO6tUvxtqoNjZ7pgAuMSr9pimPkkfyhtUdqJi4Rt6Eb2BOGkhssP6P1wpPZlPV2VacVVP6OP4o0x"
-            + "bbeFPubfAwzc7uhrEGUYgvFPQCBY5e13IRvLBX06nFwOKztN/LRsBpXjMaJKQsGxj6oe8qkA160Zjxr1Nb+LBMvwCPGpHB3Z5xlp"
-            + "mpyEbXISsSNfZuNi8k6XWKJ7M61ntGumyarEvMRbq78BMlQ13zSMbml7Aasu8qgSuDJOAqLpyoEz6rBMtOwXfLQgCq1MsJu0Kpg0"
-            + "r6v+DGPWHQotarxcMuoaAQJddtg0OaxPtccoPppUqXcwvBCIJO3icK6bIy9a39AvFkUK7f/+iGxJcH+W9cCyiWGsmkvnDTnQj/qw"
-            + "0BZkI0o8+j5qOvQc219VD84Ga630SK1HOlxsbd3U96VQkBQxi1/ouY7qrFVzFak3o9PuEwfES1W5j2U0tixbi2HpDbHf22lcaSfG"
-            + "3z5TtneHch6f6T9u/ehKML440oTEH6odTVSNfKNqcWFGiO0f+NiNWAe7YnHawp12QBb8gO23LCWtyopuX/KGouw7O0SHdWuzlxMm"
-            + "+kYZpGt/fprCG2iKHZTIwbEDGd3ZszR4D0jD0lkcaEfa1w9ClRTlmOLJHHbQ3WAHmLUrkWwBQ6jk7FBkpqMZRoyeh+OPq41XXegI"
-            + "XJBgyfN5pUsGoAxe++heNp9xqoc2t3Fop4qvF6ScTUMuwqn0TwSr/PUJzGyg+Z1jCzJPyEwpNUVGCzEv8kBWcPjRMfkxfuDtnYwy"
-            + "XyXJAqAfnED46xZct5c9w6wwm5INREVWeKM0YnEQGU5P3TYAZAwXsp6eI7BlzMrTNwE4AiBzaagZ7O67O702z/5YEa8Z/LAI4Wwa"
-            + "9X0IWSm+cj9gIFnqyXUt5IMStnneyYAtAdumcZH+7G2nonkkF+p0Fys/HCYVGlur5w0GFw14Gg+WO8QfZOpZBN9EnL4abx+MP2EA"
-            + "S+pOHxcbVkHOzcHjo/Pp595XJbMFrF5Ov/jTob2pQWwuVw44sSQxGZYBzZw+mivaa46LloE8IUC4V1XER9VzBtiT3Uok//hcDF0g"
-            + "pTHnLE5tw+aWlTvYwh1uC6gtesclUF6D+hkwQ6OyFDIxy86rEFCcUn6ruQFrC3KC2aZljEhvn28qmMAnYxl2l9/UXSANhCpFq6Dt"
-            + "njr4shcPv8RixDmQYBDgAnms0SDxAnkfsJPGxPt/IKTP4RV2MaK/c/2vWRSyG4IyfOFK+i/hdA5UYotsphUjF7RAZLoJoajaX9H2"
-            + "vwudNWmkMEMQniM+soggAV5dOoUmVD+Cg733G81Bj41jJgQvADqsChwXNl4/szTrip8v4/P6Ho6CNqMPDVv2DSh6LKaSPL+AEx1l"
-            + "L7FfY7NrS3uajLGmcsvZvZlOY1yJupSbmwVL+7WBuMTZ/PuZ2sGuG6Ej+l5et12r0tFqstbbHShvK58SNzOvqhlMuJhTlJVdMuiZ"
-            + "cTxOfITEaYR89xC4cRqBeVZ4cle8WeCn3hoaOpseWPCpanoVycql+XmmbwZD30KilHdddcGZTaOY8yx9QITDlTJqUQm7O8t4c3bT"
-            + "dd/Cvs0ROUUqlwTMPkH7OsGTOfuCbsavlRIDXMJj5qmMLH2p8pIznwTiMCPWvghdiJ/t7jOAh+MhplZR3p+3Jl1zgD8dpQOgy8yn"
-            + "1vVPjq1OsOwpr90sgbcg+IiCEqHtQGvSM+GADXW8Q4yqM7+XhLT96mBdg3V7u24OzYtpWB4hygUIiuGE/itrj2RTRoKpKY9dJprO"
-            + "dSuNnOmQRNe+oTfUwtQCDKkVqLZX89wVDzzcKyM6OGzuGCFdEdRkstE2Tt4VGLfbrGs0j9YiKjceA8kHGNyFKwVFvYd/t8NjNgVL"
-            + "DqQWUA6SpT54zekaAlMrCDrfZtuXQB+15E+HWjvCijX3d18zzTbRIF9kmyFI8ZzRCd232QBx4WoI9I2ntweLHBC8cSGQpui2q0wU"
-            + "PpmwlOLsIL/AJtEsq38kC70uxbrk8eQWhGduIW/1/Sd3G5+cdnMQ2jz9uRp5NSxzsy7EMdRp8Kps+nb3H+/IXesJT2kEIgB4/r1Z"
-            + "FeJVVYue/zIKY1dzf12J5BEzqXIw9sjw6AkgI4tfqEe3j0ApAuBBgwf1A7igXWhnF8ZHbQhZUEJhsr1ROfDT/XYtGW396T4P8uK7"
-            + "TgDlECsyliPGGZHjsbQfO6nlysKANGIeQ/pRf/hZ1PkGIiCj2d8873TlkgYpXCUQRk1KzFrpRSAhEczRjhwEKNtLuViQeyC7g2g3"
-            + "YqFqBP46pd/z4C3pzN2HxOAPqBEhFFa9Oyc8RO8T+yz1NAHUFnRnfqi5NKgYAp4NBB8W2oQUJWLy8HZenNvntSXxnay21lPrKP05"
-            + "sDnSJMlzsPhzN95v+iH4Q06NoPfGydUY8L1bZjuJY1MUIdZvDesmWSXDP20b0qzoMi9aURkDaGeCt3gwf1TIPKwu0AR95vplMhrE"
-            + "HU3EjQVLpFES58Jnel10O4dPtzpYFlkX3Ieqndlq584bIFWdy047fYYcvBWf2djs2LrxqXH9XUxYA8m/1+1FuC+4mb5gsdSb7kFU"
-            + "ftRKbTZ6R6RQNRKVc1sxvr+ETh8xO/XHsWb7JmcDXa1WI47yvjOI2rufaoaIpAqED1KziwmoJc29XBvYHb+xw2aeJyhfEsAO80/T"
-            + "No7EZ6jpCUYPix7dhGOOgTG1P60+6yjMHSXpCBUaQw3C7Syn96SvncFEoIuPVD4LsFn8RVbo2kFbnOT4avESggm9cJaQSrE/BPMq"
-            + "9Rm9k+pMHIYKNdc/kRaSqh95R/j1SXux6ERawWWi28SetR9k9sK3kV3gTz24P/QwEoaCZyTRS5Io38Ph1vJ4TnRrLy/K3ZPZ9e0G"
-            + "/aipTalMBaJhd/jgBRy6zatiSbwEKSOPS1CsIanzS23LvzCe9DofXBJIMa7LxoXKOOGnxZSdSK78RuDsH9XQXznc6LJ2/F0Z/5wm"
-            + "Di1xwSIdzNQ3HK+UYOSR8PZtFF96HGhQHgjllULwPo14Au5MO8stDpqwIR6TrLSp1atu5OO2NuEscriP0OM9uGu87aakQUv7FVMX"
-            + "o3UC9hf3VqZahUy1KQ3KoCYfBAysUUzWSGO4InhKTqLyFTIeVBT8Y61eycKOBP9Huzo3KsAwEs8iDBq95Z89ekkTrAzrsY4aPQrU"
-            + "e6qnPvoVYOLBI8BTS2oT9w3irmMIpC9T534OADZ7Tt45vziZtz9wugGYpUnq7w6lvYiFvnRiZqaRYKL4Vy+1JLIXFg2MBppsJOFZ"
-            + "4oW6vKLlwsNFoqifmICcpSJ/CkYa/fusl7N4GlTiMZHMGYAn+v133DrKWN99G+iI7yp+Xm9KTHslE5/9c1e3ENB9EtSnhr34+94l"
-            + "AYJCAJnrdyax/e6MaxZL/w9f/bd1fIyVnrqGprcaxxQc5QK+qx+aDHnWBDxZf3KDatg1KEXxSpoE9MK8r8BqlV5uo+egwuUC/1Yr"
-            + "6HPiLdj/4EF4nzChShbgmxShSSpc8oeBR/xcyF+v8lgh9AiyjYA23KgxTLKzHgkeS1+2hK6olhnd1Nn1r7iQq9ExbnEdXX4u/xv7"
-            + "pczmhdp6Ci3QSTypoBB/nZWFLQgq3CC5n2eFiB5YJp4ov7P9T6UjUoJWmQSCOCVcuWY84r9iYEkWq5vYx971BUxdbUxGux6JCx/t"
-            + "SguxTeoOAoZ83ifR6vvTFkyFBuwUOQ/AZ1B0fLsMKoxy0Tt6kSdBjHrLxIMYhswVzRNNvEAj9qIlHGu/WTYQk/hvjdNtAozqv8wS"
-            + "sd0E8f0nCYe8x7E+VfInhCf75YyMWogG+uN0Y6zFWXDc6cGDHw6M2ifuusFOSqJW7dY15TRJB/EQmoD20SraTl7/HDtc3q+CYig6"
-            + "tzhV3jpjSNA6W/+NpHbbm5NkUOvzkilxeIvxDfDClMO3iYQpCtuJfv4jm3Q/A/iNxxEFms3Qgff+1QMaRn5ciJFj7TJxgSKn4hm7"
-            + "yC/cBtklLWoPWnIEQoW/xG1kR8IkMOUHcu4VP6wmWrYHr0T5hPIpUOB1pG2lKAOu7QoYCxKaeA+XlqrqvIkh1/AMvTEzSFtef2vd"
-            + "gZYFS0MBeJhW2clYR5b6hDshxg9g+GJZwZlJ0rtZ71deNqQD/m5SFhOe7cqoNt46RY1zdnrGeBx54TYsji6OcoK6mbWshgmY65Bw"
-            + "bdwhQAFSh535MvefFLW4TxizrhqZaGeKAehK9EtR/MOhtu+cylSVig4zFFY3sCbM3UTpUEqokMMDnT7rgeUjQX0fqNvZC+y+oR3r"
-            + "S/VugyDS6wOtFkxWhxHh+GQtBmpMImgQp9pDOiVfw6gnnbXx/Ced3p+15tRFTjGCI9CUp4J5DsQ9rjtq7YFQlk5w8ZEdfRfWdqHw"
-            + "BcHO67O1mlUQm/u79d49Ga5TqJ4YEvWyhXYBSFZ3TujkyuzMbIC7pzf1F6cBU078Tf365l5k9PmY4Rafe51Pcg+ue2TXNVnoEa6x"
-            + "OkTUdJqxKx8bQe2acb4jn7RXEtipPiiI728F6fBZSMMrksXLsXSx1GzybEm+kPqguMgBL3H6pqk6t+nv7HvD8ZNcHsW5sHS+b9Mj"
-            + "10TzlVrW7D5llzfOh759NlYvHsj1uQpw9lIiMIkOtgae3AbeFtnuOO6WggglyKsdxAOUGAhN+uKFuyBDz/fmlRa5YvrRLCXjLReC"
-            + "o/Cllo6bmypFCLFPTwS7ZN9JQ+a2j7lmJkLVB11uNzqs8Yh03r00ImNSBSfqeXP5M5c/ZBIxhFkk0G44svPVX+79LdR6bmRzHdxV"
-            + "p46O9V5T2g/+FNJnKimhJqrPiOzRSqnYLpiBv9ODdAJavao3hYVznmABa9MGIlPr7MdzK1tR3PYvwbobQQgNfUTks7+DSm/+jHND"
-            + "lOdoZ+LPK0lDrM7TftilzPQINqMURvpKwR6fm7n6t6s5HGxeFWKTOOlhl6DPqUPjm3D6LIrFkniDDk48U2SCrrdx3v+LAgfVtPhA"
-            + "iGrorczB1TSaEklLWvB8QtldMJDc5shc4qBSSGny4+mPjzFO83KwAevsO1eOmKV4RwjgUszqRz7BM5msOmLwuboFcyMZEHIsUf/R"
-            + "tuDCF5zG7QZ6eO1MzWe9ZrEumAN8yZe/ec96ws2kY1f3vw0+VirfE7ZK6HqblWZ/ueAUBnBmsQT4oN5vpLIZCV+uvdZxDUg9eA7v"
-            + "zIHgrzKcKjJWLtiK8WogjLJZJLsmqH5QdzDIzwa4eiaijlNh3rNJrRxovTKwHJi9NT7o2YaeGgmIWy5HacvMzacs+9tMv5gL2TDI"
-            + "CKeDRz8wI6BKoW3dbJ3uY/lScgMFlkhnewz2X+/LAXeT6B8HExzL9yzxYtJUpH6e+uQs8Qqq9VqzXnreBftaOOJ7zfU2p9Ld9HZd"
-            + "Zs/9tkipFgmEsuJKK3vD4tHaAbtiBmp4xkJT52fcDuC9uDeyU07RaYZ0EpeaTSgZsGkmIPsnUzZ8OhYu4FALEiJlEKz0VPSFrIGp"
-            + "KOxbl5F1L/N6PnqLfO37O6byA9TSXCbuDhkxioOlmLOQfHM4dqLbb7WyQMC/0UCwHNcAqZleJl/ptxP/cx3FRJIQ9dEOgIdFkp1y"
-            + "2P5AdnSgaPJLOUuQxvLa7+NUL8uaIVoGX5dPQ+MXQR2K92fsOTxMH2ETmbVgC7SJ9Hxj+9v8YcRYy9ppO5mzFNxWpGdBZSYpW4J+"
-            + "dU6mwF0nT7Fr6vsVR8Ac9ID2DPHss0EHE5moXr4vZPtYOJHiTV/L7TmeRW04Awtev5ymOOdnOLrdoJztF3Nro/W19WPyxAcN4G7l"
-            + "uY/er/YsxW2oVOKRZg6qm4F80gCoywHgZscuTArB/14Kiuc/Y+9zNimNnVadQz0wSvFJQW7/f55h5cxZN7ovVipKJ/DShUnpXtBw"
-            + "ocoeoWS6WXs3h6kFc+MeCXdhMji/4TvhnL1YnGvePp7e1Tiibk+R/AtIlcINgU5z1CHetwcHh8ymnImKWRWB9tCMEHRxcaxzcb8l"
-            + "/VQaaH3T79oicTxy9E5l0pk4XFaJB541EmTklH+MZFMjICnmllxTYqOgHf++sD6wY3fOt0tYi8RKQBDqYq8ok2ofuB65Axv8Meo+"
-            + "5LC/G7Tm5XlRaWd0aPyL/6Wdou2l4cZtKKrqYCVzqcSU0mgumbljsck1anEaDyyJ9XsiySIdKxL127xZRdgYVcUGbhnXnM8ZzTqm"
-            + "96w0B+onpJdv6a1RJLaS/V7kEb19CEVN6rVG5L+25cpEXizLEKb3eoEPRcAKiegN7fxvSrYtOOCYdbrt4TepA3JVv7t9GiQAF7fd"
-            + "QkIEcg11TLALZw/JGi6A4nvs98UQJoPUO6BN/GaedgEbFI1HvdSHx5v4sITFeYeQ47OrqEn6S0msgl3s4dayjJ4OyMF8/e1Qdwmn"
-            + "MUEMbx/v9dCYChaX67BDdUgIsQNWECRmBDmBGzS/dmIcIZv3ZM6qZpgK6lFekspq9CVTzTM2gZK/0t/aFPo/gi1zO0Qw6SEs31ld"
-            + "I5U2hkwhbmsANFjRxs7ZxUPZHRIuCEs25NxMNnULJXptYIRbxhtnIGEUEOl/l9LkRtKu2ccbcr5u3Kd4HNkfRBQTTT9Ow3z12Jng"
-            + "zks6jaXua22+C8QDpMXnkA9MDq0sBes5qxkq8/+gxgADP7PKowEeuGt/BXE0vSp4DXETxViYtjQuFXMgCadJqeJGh3wLm5vXI+xh"
-            + "v1WbAVTsRPDx0QfD11VXwXXwT0ejjjOulM/OWsN2AuPqfn3bt8ykVXqlnhi40BLqnFbkAFz3XPgk2XHbNoiob6fQ8uxmN917ipvd"
-            + "GMdWKvO7qhbwninL7UsR4OxlMHB7Zt/CgL7LjtX5efiwQyXTG5RsIt95ihVVWUZbgA1qACOaBorA8h1PEAHOR9GCwgOtnFKMjT1z"
-            + "gztzyPm4+IArm/533ggwSr80f0Pwj3D1Kh4OQtxODGc+62z8xUv4JDJaxaGKa7ipkTXWE1L+aVYgB+DjO194vwya5Rwcq4dlHkRx"
-            + "CQ9tV10Z4sotkhMLcnMReTdZwiWtUIrNmlVOB0VL2qrdYgYiDvZxCB2BPVQBEipu4z8O/k2Unil4Rfe780AbGXeejLcVQ25IwJt9"
-            + "fd/c6/J+DhJNLtjScdggrbGAoLK+GzxdPwd/vyDf87mTc2mZLEPm3TOdT/maq6wzIoeETixkaW4/pyPMkXJuWIv4/RRLv3yLm52y"
-            + "aQhDRpwwk8Eb+beUd2+9ZdwYxnRSsgSJp2lBar5IoH94WAoyNAac6fK7nz5zYnCN5y7g3QuWAzaI4skh3MZnds/+PN7b9zPa1Ud/"
-            + "hxVjINegXFk+ZT8pHUGQUM5Zqwgg8DJdr61dBb4KbYFEkVdIlpmZH+pnZ7SmWUFsfm2YkIgl/B8rxdsDqZw3HeB/3QTe8Q9MQGA1"
-            + "tbW/tb3bz60oYdDKJM0ZiylPZzAoYtWEdT2enqSdKXNCTrhfbHKFazfouprgPQzK2FMXq22w5EUyAea2umsVanV1q321DEGp0S5o"
-            + "99Q+BhcCZYHjMLXKJdL0rf9vn+hNGncsC5gtRwZdGAW8ieySgbeLZ21V621FzD0V72/wLf+yt5Vie9KYRY/OppgD8Jc4EPJLt5Uv"
-            + "+Y79l21X4VHsMCtmMyGJDbw0GBda4ycVj7MmUgSZ94bgigIw+lde5P3d2/e8Q3dm89k3787pzh0YNSttjcIk1sQXeXQPls8i1q1l"
-            + "6aubWSsi6AOFG5JJADJmTYEYGChCZVOJRiOf0fR6RmoHty/UxK6d2oXXZ8R9Nfju/fFbo+YRO3JlGx70tVkQJUJXNRUpUvFp5dld"
-            + "lEfNyuMs4SU0RsLPcOe5TelcjNWbuRQN9PWJDLL9sJHxFPHnfczLkTUUwUX6V7Sl93C3JC/scFL+Kegrw9mb0MdO2KSD1sc+BtSK"
-            + "x/dnnIGAglQEcXqa1JFZP3EOq2RkmEDYfI8xVcel7O6qnW6YuWA2Un7Dbs6QajXhR1h4fXAaEeleJeTCoiqdB6awb3PcwAzYMCeE"
-            + "Q3FAo72ae4UreUPGTDsP/BjLQy0NqHAYx6bwr9JPcpC79n0c/6C5cLpCYTEuHkWkZ/+ctoeSQD0nd8t/MLQCXlfOzNtikaSXr5DI"
-            + "5eO82L8+CzbNjvCjjUo5O/ZqBladi9JHe9R6YX3LDMM0rofx/IAJULCYEQPnCanaA3sb89xPRfpsmrKkDcrPSncuBJuY/4ETmCAc"
-            + "mtNPquf8wwXhVOts+PMLM+3VlhSm3N3YjC9VSf0EdxlMP16HgYlV+Sde+1YigmoUjqzgSrzRcXlSS2Al6VmIOQmVyzqUJ4ZS9sBA"
-            + "6VY3nNv4EHHD34dZriD7Dc7FSKbPmtfVwhbUkvUsKP5aDJdxDjD3wuoB2XcBKe/fwDTZf8Bnd9pQWBkKwTx3DnCaQe+ZxbeouwLI"
-            + "U+qtf3ZhV46y9EzHq/n2MN5yY+JUHnohxk4WmpSaCPZMpCCmxguTz0u2hRIyI20UCBaZ2pLFYk3my+SwJE/HCfb8Gd2gMG7brwsN"
-            + "IAiovKOSH0L1Cao2xDF5wzOuR2DRv3CyNruwdYbOKLNnZSh8f5zJqUcqxVRPd1Wp5SxCHXR9Dj7khrwwN3vXtPENzdFjflDihXIH"
-            + "ei4rgrf/jC+twJ3KVpeyxxI6s7USboGYBdDt9yUejYLLB2FY1NUaU/9qKWbSZWrSMNiQ1O63x8Ofq+FtQUsBlp9tnuoyxVpWW6qJ"
-            + "HoKFN5yhFeQ6I23LJt0BqnqS3KMNqzcaqZBPSv4QsOTymt9MjIQr28qFkg3A7BEDYMImvqSVK52IDlEVrNZ1bEo+1s+XdiUPifam"
-            + "pEkysZuxbJHHOg5XPSyB4sy2RE96m6zsjDt90bzg8b+dTzmr7I7iqb3Q3/XklaJSDIpC1Tihki6zgZv/umfePzfPygIGZLzgzvmx"
-            + "zisvRI9G84k1d9u/JJMjCGn8mnMCA6Gb1hRqn0qo19I37k1a6PI=");
+    private static final byte[] RANDOM_DATA = Base64
+        .decode("vc0J+XQa1Nk6mEowKLNXmmp5zhHJ5TLr/RUPpPe3ij6W6mcjOrn27pONwgUNr3htHp1m/5e5CmvZQ6ysHDYJl8O4LjOhmjTHMDSb"
+            + "E1z/7wlxT4NQ+GdsBmrqh9k4wweh9i7QjZHGvfdMkWQSxMFFYAaupt2RRZItGRzSQLzKhax3di5gKQj5WG1LpFHIyrQ5tvaUpxPT"
+            + "lutRR4pE4F8L0T5LwRQvsU5E7qGsZgTSY5cUZLHv99+i0gfBijRz4d3yyXEQw0uAC+C8lQy3wsSyWt4LdcnTMmBXybO0mKY+TIlh"
+            + "S55s5Sz+gwb1b2FqEQD44Z2/sZhjDcHWvZ8+pGWN2rqVrWDvBuwAmHvTapyldm26ZrAUS88jp6PznE2mjIWTMNAhQLto6qLK0JwI"
+            + "9HNUnufjB1/uOiN58dVZMkRLGAOqgaRDnlBq/wqTSy3RqyaXxOVH/LLZm3bFuZrKcveKYdehGyQ+gjOwDwAIqrs+3g0XzvWY2BfQ"
+            + "PIZNxRZsp3TZntihMjaqh46xDNtapbcJvzhz9xWDdrJH4ThyU262WrNUpcya9WwblCdSJktnj9rkUcnrP9ks3uX1TPGi8+p5hZqG"
+            + "YQtsGbV5WWd55FU+bkoGhqJruoetbYVwwl3kTF0IUZW8BldVqnrTfyMovUXwaTSHEHqZwo6cUkW1rRgv8e49VWdd4qmLPZCyKChU"
+            + "mTK+2UYR7TQOtd+wWEZZFuoU46cR5LpmIDBHkvuZ01sNr1CIEQiydCpSvFpK4sHXCJ2GHJ5aCSh3b0NCr396SxgHQtCoSRsuduOw"
+            + "wPQWSFGGXzzpqid2B7qvrLHjZF0vWcqyqIHFdX5IuHseJq6/FCpCqExxEd2hlSfHWuKhBQ6pylPTM9kbhjQBaXBxlTZO7X1NSS7x"
+            + "zcrlo3e/kl+qIyXIzjfWP3kjC3JK5mDZqTcVMUXyD8w1ejUM8h2jMChdCrVJ/Vf0pBVcN8IoAM0LhaDfPs95xK1YVMl48lTrJh1K"
+            + "LR1SsDJ5I8Gpak/lpI3JvntuQgIompRx/Ie1BhmBZ02edWUQo7PRHyNnh7V+H8FjOVGlpI0CI6/cYq/M8TZvcwufmFk5oEtY6iw4"
+            + "zp1HpNTHYRMJOB5YsycWcDVCyerO0wmw57nJfW5gpRN6Vx8PyO7lMP7mT+G1ds22daDmpjWHcaSE3xz2FbUS/D5I4jr84UMltNDy"
+            + "F4EnYWjqQkhlrKMU8zVvbESdfv8c10ayckRXFyX9Q37Q/QDlWGRY3kkqFrAMTjvFoGvCwQhaId4W92JHq+6WN09xxGgIserDs9om"
+            + "+Rq5q0oFSxVfo/sfyFrAMHAXGAAJ16p7zCrdh7iCarAeXAjHUuI9VYO5Y10nI0WL7HKVYi9xP9ndoMuRDJbmnJAaQkRFpioIMIrj"
+            + "Sw9eqv7m6SQHfNwD7034i6VNg9wlU0o3CZIRU9vuW7CgtKWrH0FuctPYYv2TFLPCyTk8rk9HZDeBVQk5XDPeSu7JjzMKKeQhFiWN"
+            + "jhLw6xnuBPhIKsaDwJ+NN1euEi0gySP36/eESyWRFV4PRkANlvvxeXfTysKYQzkB0n6UKQFq1Lx1DfNNXNhXqtngIxaUpBFJf+lw"
+            + "c7Qn7IWDEfMWbsHtZQ2K1zsdmUriElO2CQH2O1AOIXV5xWFGNGHzogw8Vj/XFu1UJs9UfXE/tv+bgL0tizhB5XDZZAbOpCsbkivu"
+            + "tevHLsIlpci28EPuM+Ep3zQ7j7YBzXYow/0qRtu4OqYF/cNiG1/dpzl1hpdGJ9G4VcA0cEzwC4ogUZDL+EeCKiOyg34WjYP9mc2W"
+            + "I3tI1A4sanHbLXy0Ei/nd4mVopDv/jqfvbwpmswayvzGIVoDKczuT9291tWfe2rHv0chjsAORUTkqCJ2Y1jJ3xVkOXXKOb7fsKva"
+            + "tt1b8gT2Qk39hGqomx99WNpwSbNkGWjwt2Mdq5wX4V/9U+3XjOUy//vAwP/GVkHxjaEBarqKHCYv9Z8M2LR0XkcWHjbYsurHHGM9"
+            + "VpjhGPAkJVdcsbPOmFFLFSDSKpdJOgcjJWbDzjtBr5ciEK/ZwJsDr0H1py/27MwP5WDjM3oqwXo5JM/BN8dQXAuhMtSj0IOT7krc"
+            + "QrjOoFQv/xPtMpNqNTfTLCejB5XqyEvpy0+0N6MSd/k9lgDGo7v22wZJq/ZU117B52F9zhq3qVVsaWPr93eKXXfgZCZewEXEBu1h"
+            + "iP/MtaSw46BIMvuSSEY5a1dRPxUIo+dONUsB3WOX1VetIVKR5A08JJYGxVyaQO4f2ZZkJGUxG7S3FRoPx8vh4iFVz2x1M3oKka63"
+            + "A8CRMmn3oHAz9eIms/HxvltlYCPe74YWVRSiQ/AT/aCdTO54/UZa34L/bZQd4imv17KpbpeTJR7gHUkZT5ZEgtDUe9Ve3SxRj1iN"
+            + "VYeGq3dANtHQ3aYdpOojZIrsQ29jQA3BCwCGMO5JKl43GijS8LRxMgupAkSNUt+QA5xhwmNWHOUHcvawvryOQzazPKTG2E/ZjT+c"
+            + "6oKIvRL9TeocJSWbSfNjjMyBC8cz5C3IkXKg9sxBpLesXChuBazP0fNidkn79Zl4SoILQo9EsuOoiOShC1HXuCCd8J4stcg8QomS"
+            + "APQOjLBN8DpCeNyeMnPz+9GNaeZbXAM9yGSiC3xmsSMoEHfCPeWCd00RQJrwD+tzMQnc8DcgmpYJdnZWEjd8pCtN75igSnu7Oscp"
+            + "QWsdU5XeSR9kkDtn3kp+bqM5VhzezL1nQQyWgFX+KTMfYedpzQcr4VagHD/NoBpHbpH6y7qj3k3+K4NBtAeeh6X6TqMm0PPNetfD"
+            + "YNXQUxuMc43j72hjkBStURbIaeN76TNq4LRS0WOZYCH5bBZmCuJBFjkLuVqPriXrMkGf1OICg67HzGxor3N5IJ5DPvf5SIQCFOWK"
+            + "hFT01crpPZYcMSUU154OJ+Um5cpZ+EBAEPDTWK4x3xYyyDeZa9Z9/WY5n4vX2PQyj0KLCyPubLnj3mo+KGEWO039cj5EhT+0BIPl"
+            + "pgLJsKSMK/DtSyoPHX4xACvXtAWlLWNgNQUFo1o+vmMdMVCTAKwi/K+IGk+JMtBjm8FVbRKgFMxzOe2uobwgcJGiQ7iojfJG1pCx"
+            + "vP16o/Juihs5WL3iwtdtnmOzOQV+GIwKxfRRKCCc4dwGput4cxyrbjDBYF2wGrYNydzJbVTL9EO1T5sVaVSOyYCjjeiz1UgNSLb4"
+            + "vOU2kGZN9GMG/LOAaXBNPr71zroreFLLP+xdmK+3ybclGCPuSf63BEUPs8B+aDVDe8sDGrpyOG+wbZdpqeUvVtXyBvhTgkDl5/w6"
+            + "z1yXRVYdR5tTAAlU07kBKUeLmnDh0Uc1SKOOzdoz3G+RHuHk2OcMWKxX4euz+BRIrV+Le0xYmFRp7SDcg+c3ohL0Pg2u2G2FCliu"
+            + "s8XFdA5caNqlfXKr2QowOu3HFDZtDjS3aSQlY2OxLuH9SwBYLRmZrIVNMwuKJIH2Zenl59S7jhckERqgdhlMyRIHMinoqqFVeEPE"
+            + "9V1NOFTkk3W6jjPF6p/bupGcKDn0vspNYYv3bAaJJwxJOt33nvtroYaQxDWbZq7HJYorNLjxV+sPlUbzwQlSxrhnMjMNL43qOk+q"
+            + "7gR9XQGkq+UFGsuY45Z7X1evckL6HKW8QcfHtqDJ0C+jaWAQ7eth+QnDE+F0P9vn3Sq4a6woHmo4wif+pGRwfhzHyqEojNcO8YZZ"
+            + "pocS3PIR/2NIfaZt8eqpJbWt2IkXWQrt9wq2/fcVhFp/WLZNV+cA9WfXzEnDVGxveSF17E1C4Ue942E28CSA0MqVlAX90yL1FAU4"
+            + "n/QHeLczanUy5WbYWhNcXRFAE8562aJGE/YV2n6rUcPm1Z9PFd3+4dFN/Pmv37hdypF3Q+NdWLq23RQlwRPIZocqBiOaOxmB1DGC"
+            + "wgGdSPGVe0YCFAdfSMKsQ8Ns1BUGNjtJtehsYY7Kn7DTyGjJ54IRfFAAU6y/Frv4f17S69q8s4uevuX1LXvvgKM/Ws+g61cnkjIG"
+            + "9kwm4l7LZL8X3pFZje+zlVVVFtiL1jq8cr3Ff9ROfYxxY/GQB+Z1qSy64K+arUUe/l5249HzDB1lIsAlP3rdTsqYJKMmDCd06AtM"
+            + "QdR/+LqlB8JQZOqfFI6C/IvlocalDrv/wXduetkZQqSvQ8fZlWdjf3amZrdjD7VRk+KUgYXmhK5g02yW3f+QmcTyCeue7bPB4Ut+"
+            + "xvxL7Dn5HGuklmxjBvMb6M7QMLUi5cDhPaYe22LYz60fOhAk3wgldBtwS+n0ghakyTwBvfVRuVEFU/CxZ0OLaTGWknirysyBl/NR"
+            + "YDeWrdJXvJq29zn5CPsiJgUY94K7IMjAwoMhpvAQg60rbjfbWgHHbZssytkh6gA4l+OO1RSUzcFRMWu6UM2fTAnWnmiQz90b9cqE"
+            + "QWmIyHnfSKHu1QAXtHfd5iI9kaHyXll+yDtbdzfqyFSUFa3vJNcbalcxjVuIL4xE4JYLuWtqHPFmD1jZ6IEJKzgPRQAG6si1d6QI"
+            + "4bZFDztWQla2eY8aIyuyex0cDsCtkrhfrU2rSjvA/zTgsWk9UOtphfxbwBxJ4HqnPoyue+hK5Ug6hdT9aUQJMhDGX7UWv1lemeMg"
+            + "E2VBArA43wV44rwmx65ly6BLOiLh406eNSQe9xhMscU5IsoEEQUALNg3ASJdmtkg7yUYsVAhWkB2ZzDHGMjcXyyEkhDNR+onSWVx"
+            + "IXGmAkfyWVpn76kHunFYVWPyYYe1zisRBUo/fswXaxpBvPg3w4am9XkoSbbCBP8QtK4ynjkygySViW5FVYWzY5wL1Z3jwb7bbNKM"
+            + "Mui7acj7Nh0h9fY7DQLBc4wA3LbC3autb8IDrmX0zqLk9DjNCqaYo+qfpYfIiJQk8P84dX7jg47fALs4k1LKclJ3my3N3XCDLEzG"
+            + "dd8YqCRp+4QIkIgk1z4DxfIe+QvQfO19kEEF5lss5PTaWD2/3mEIEj2AznrBB94g/KiZ+ZyBxZmOgX9cjJQ8IkxZDrcC6j+nN/ZB"
+            + "dekCE/5OOmntJ2fLsn8i2x+6GgPEpnbcD4/kqIZMB+Lw9qohDfmIpfMClCHy4x1GeVuaIHce5xUP5JcoD0h4PnGe8V1P/eRvYlBp"
+            + "HyATop42xux8UE1Gh8QGnpqle3olxhZwY/i+T7Lo5BeFexx9ao1duej59tXxA6tsHmo/ZiB2xciqMg7atEzeakErPRlvQe0CxTZX"
+            + "jaTXoK7mUzVeJn4T0irVSg2pEWQw++dXMAMQDYixbKwCdS7lzUvaseFF6y87Hz6OxqkiCTAD/u/9uSmpOm3mKyl4Pazps+Ydu0Mz"
+            + "PjUj/g9i7s3em+EGvX8pZcUogtS3NQ3RCH1ZBYDMu5phGjQ3cu+drftV+lcdazxDq8GoNzrC3g8lAz8G1TGIN1aSsFFBzqxoAJR+"
+            + "Oo0hcTM1QFyhDsb7rcFb/7GVgBeUjeMFacUI75ipHIA0C43biH88Q47Khrs9ioUaOnuAVWU35ulwzyvb2/vNlzFrwgmoNXDzWeEf"
+            + "JUVATwNNbXxTS7nQjR7+O1pfq1CsASHK4zaTRtbHUU6adME3xVfJRiSILkEkF3iHeoDKDNXPRW7P1NDaG4G2Rk2uXGJxRC4gV0vi"
+            + "eYd80RiAaYGrLGabi+eshLcyNz3JHp7B5Fq3SGdjwFBX0wdBWXFbFx13uWmXwFrSCU350ELmesCxBdVKrlQphaQ0hKqXKbNfKI9U"
+            + "pOGe/Llhg21NyODqikCKHGZ4H73igyHmj0qBQZxi3swDr3GN/X0QxqzEhdcdmsLI6TOH6zEdHsP0O2AFoZdoYysVTtoi3z/VkayS"
+            + "ruF7Ap9mQ1di8rQyvjeU6FwxLP7cS4B9/Vu1Qy68tIlPux7OlMiZbREueGxtXisXHC/C6LJrJ+BuqPqdShgXFr2CDyS7r17zp+6v"
+            + "dBwi+X5fmzqDlPBOqbM3UT8EZeH2uhldYrqY3/gb9Usmq1y2MrAK9jUY01B6oGtrBSRl1sK8X3eIGGEhIegJyB9FgOmlv9sV3AT5"
+            + "3wJKN22dnvfWuKAP3MCaZ8I1VfAawkHIug//yjYvY65hiFnytYPjvRfut86tHvz+N6OSN6xFJX1nmWMYtO8N+QtD1eT52jwWd3Mn"
+            + "QkFMn9aWtMv/v5IOuRdJGRVKuyD2N/VBPMLmgTV7PJjCjkgOOXz6iV/aBG8Stxefc5j0abw+7KYUBwkiZPiGDgWF36HMHIBOAgrX"
+            + "+9+zCXJvTGcq+dJZ0NGVKYMl2aqqU+qPD9o7pEEjXJFgbA5mqtsgspoZkCAkV07MDVPZrW8HIUL8vM5skUd1ALT8kjc1sWG6trAe"
+            + "4VYMswYvmh4H09UX7Q2w710mOZHtXswjI9dCz7rEYdfzdUzUWNqGpFuHN0Usg2aRQp9Ix2W1JSBT4LdRodOwXkKbgZVLWUrGd17b"
+            + "fK3vX0BSjeFyEz14H8CZxcTSRmJWNMIo9rHWMXsD5wERfU8cvHofxj/MWYFqZAVSrZlx3ubGahnakkd+F5qF/JhUarofvRalIOGn"
+            + "bI/uGXzkR6SyBfCMbDs/mq+9UizSl1jO+T6p0nv8S98NPCkkweRW6gKM/iRau3L5nAb7jniIv4hBNFDWjE3Z0+QCuayAiPxVqNzN"
+            + "T5mG5ymnEDFY2ZgOnhQLU4ZkOoW2H4PxR6ODGttOk9mz/mYq2TL2jypskBBbsH0ydCPwXdpkabJz6qNlpP1vEgmwJrW7YgWRytIh"
+            + "oSzZCv3EMjYrI0LvXNY4HENDLAh+eWE2ONCWKtBtc9hJwhw4S1EUnLGqaHHsnKsKnhuXm9CgIpWZYJ7q5qHXD3dyOcgg/PvTgFrT"
+            + "CGVeimkyKz9tugUk6jem0uXxxXIxvoaopPZPrh8OMdEcv/1AzaPdvjTHJeWTfzFWjouSOc0haAeoJH5e+n6nxhDeyc8Su8UYkWM5"
+            + "bXZXoDMK12S5+rs7SgL9aFosHrN0K8FuFNwMHJ/KR0a+H9iGVrZPnMoUfVI7DyK6cEbiMqCQyz1HcG5Nc89eW2Kgr5eH7Xe/WEW4"
+            + "X30zflsOSuTjnVr+uAR67ql8wzRuG8ONwWTpHbbgCyoNsH8xgc9SjKvcqolgFHcOXZrxHHsY9ZUrDW262ahobTpIWPkQL2VC1l80"
+            + "SpAnxo8K6v0xKWC9RsGckuSXmE2kyEtqM3QQ6UYv3suz2kubuVP/MGwe0KGt1m05LNmvaFc4Ey8cLCI1uYn9Uadh6oBbbTojjM/8"
+            + "Ei4Q+vyfvuq77K1PR1wxr34KFcyrWzhrMfZB8GEDDFokyPXbMVX82krsgVd4NoN3es+dwl3fQmsX8QjbJN2mddTaYWkjLjn/HXTy"
+            + "+p2i+csNm7/ItwxarVi7NLYGjwMTlpbTZALFW4O9br7tEjwAiLKIgD/r8QipLxpm1aSqX9gimtX8rr8NWg/dXB/2GoyKmQYpHGTW"
+            + "IQNEsEkPtdpNYP+sp8xqNkY709o2B3p496xPXG2j9b6mW1tIJd3O7yZVnwkas/dv8r6bbl95B8oQuB4kQzPhYQmExcb/6p33Kfam"
+            + "NrJlZ0HZTVFAcVdmvNiOhFL37ojcYVpoYLx5PcUoQuLy12bB5XdVrHEtcPzzBXL73A741PSQTcor7F1X+v0NPm0lBa+jfymPQfMY"
+            + "QcDGKa57b2JbQEq9a8fZB4tnmH6LEDo9nWUrCXD/ZVjT3Nsbvj700IvHHlh8QLeI6bJ5JCDRKhqCoh/z9TU1Bf+BITI4r+WKVkVb"
+            + "4E2jmE9j6YJD3l7uqTJYP4uZ7mcXU01SqBS1ZT3OeQpJJJshxIicdZN/euwhb13Fz7USfy64f3N7qSbQ5LF3OYAa4hVtIBWPz1J5"
+            + "VaS9dFqu4qZDyB0qwob13ekox9jFXUr21ide+/aCkp57ibWN/VQ5vVVQWCAlTghgy1yW5ucMspBwxqA8qZFc6ZsVlr/hs5/H/PTg"
+            + "38TCmaW6HNoMmpxi0ho+FhPwioSkwCx6TESJt5J/z9ml/XaOj4MBdVn66e8xXb+FiFub36DBMmW9ox4y2EiWCJmNS/Hr6hp4BxMR"
+            + "72WbHIrVnDn2OSt/iKsAhWKtktwzDplf8URbCz9cGYsrcQ/KK5Na99rZd9RNKwr28/QjmPf8gIg4tvNy8SWEMbFjZ5NMdip5Z01Y"
+            + "gaRuXwZ0wplDCILbx3JZEZQweFEZ71PgLAAFjl3iR5NSfLQWCPd/Ee5qA91sHdlLPgGCD3uiVPVE6+0I0uzDZ3hl5huxIlovkyDm"
+            + "8m4UqmkQk6Kx/QYPBmqW7mNmtcEB7+QBpTLVyM4fQcLiqfoYFDWB3HccoYzkCNdmPbG3gc5E849I9CmB3NLD+F84om1nIwd8uCgC"
+            + "4XtwddQZrS37RP5ChV50eYtEeSSOBDYH0Kq+C5pLdZEQPWp4euZLYPZiOaa5nRKQ0+onhte5VmoH5qi1ID0uyq4S2vv50zRDZ/++"
+            + "KHnWuNqgt/26grapNu9LpHQ8DxkIi1x6EhZ/kmn7yf4Fm1HIs9cP8uqlwz2vm+PRDU9+XUO71lQpHG6XRviflLoa1kgfqC0lbSaO"
+            + "XeCH+c3Xn2P8HQXGdFRD+tnNWZirB5thIN4QPpPEjujNhwuGsSIVQSdYLvlE+G1FkvqoVHvhUNdvyHYEHjggJrBBaqdgobrpaDR4"
+            + "hL2GOkCoYRtcejP1pg/seKV5Apo1GAApShD9IZC2qfapNnqXtZXS0VrM/JyEpMzOq8GV5YTyTreZM1zUpcgz1VXfm5DJD8D0Kg+b"
+            + "yOgmNZE+Y/DioFeXBl+jeW3hbZBe8JX+e1ndilHVwTAxm8VZdVbJ30bNzIy4mO3aqHhdh/XRJK5/isCNLBB7GAHLGdxjk+aoghnj"
+            + "SQ0Fh402923T2bPqQ3+ShkxV8VW+tYtHLnRZYVe9BvtbArM+ZHF3DIULywhFjl8C547j/xDJvXaIOQKkdaE5J4iPJj5i8IqObM7/"
+            + "i56Du2VVBgTIkqHF8ZLldzH0uDM4jjeoJzNm01nplGUh0izu4+3Jl/FBXxJxb4dUVkgsvzSMzLi68ZBy6TRy8wrH8Bvu8uwMFWLy"
+            + "rAiTtgfTG/ALz2S7xd71XL1xPf2gK8/xKxiJl658RaiDBIaIL8QZvHEqUf5Gb7eyGFpuOLe3fi2MrF29EJ3gerqvprToEcjg77Dp"
+            + "1pJSbKm94guzYLYR5KDMpE0pHIMb2VqxYaIGvUtwTpahf3f1xZeW+n6ylda1akL6Jigqn6KKjyuWGWMYMvwPxTQFm7804vpmFy3F"
+            + "eA8Fx4XWR6FJ2Drl+1gncm/b9le/73R4pyXYWHV4JvsF+PxWukIKIMiq2vH8FVy/6ICJfRsCr//xG+4RDC4Uv7eHz744m3Vh1W+1"
+            + "HJfGMHoWTH0TPRfvRoI+dt37EkjMUVIAXQFci3fFB+X0eVAenle77k04EucS5T8gDbxkOa7HFXEmgDPegp9gxEtXqeMsVAv7FqdM"
+            + "M8YcwNInEWRo0s8EcCFswUYflY+eTvxn03NSNDLn4WT0hsT44l4LA/rJoQGbcDXb3NzDayJCXdmgFK6ZziVzpwqJzgU3NbDRR+ZF"
+            + "L3+gqvo4lWfOCU+6hUf26aenQNXRDmsSc+Ws/4PLpZGmdGj7KembqPB/Z5rcEARE+cVHk2HQbPPqyMdgiqMSo4c5ucXBAbQ+6uVy"
+            + "W2hb5TbwkQTCWTrUVt++JrcLcHguJIzuW3WD0tGkvElZi2tfF8rgABCQW7kYdRMKHPKtpux2aQWOaLHLW4l87fBofOC45n3r8YGv"
+            + "Itm6OyLetY9R9FNYr8riIG+YbIf0I67AP8KPz29gryIlxQKZD5RtXczTUFOHaSGdyGUDsqsV4kP+TvlNYipSxam8W4HuBhpSuY33"
+            + "/wriKEW0Kp0Ken2UF1r6ycfikKU74GbmHi/LFfhemsgzHJ2UHoWlUYMqQxL5gtnU5SL5ox42GOhVm7uh5YS3wtPi+mBBzvffB4LH"
+            + "PbxxeRVNvJ/v2YVFJFm/dg0x20Q1szQ1F12FJ2+cT1IkhgGQsDQAODnhq59oe3MHDMIYG0cGHYrosaGiudkcLWevLdQUjOSAFAKP"
+            + "7njo43gWgb2OID6G1ho07Ydio+Lzr8OyABFHi3Ha3djrvuGwT9H6aZ3TAKIetdmYBIotQNI6L4iur1XylVpG2RpJjTdNYRl9BfX0"
+            + "hXNwQJX2kprubIiQUWhaCammoJ9v7L3hKp8zFR9kE2YiYnozHApPJCzXrTUXZdo2zebC6TtI6YUUKmPfHhmirMPPlVVWmIXA8S2C"
+            + "9zYbPbQB6pCBcAg3l0DiG7EWB86T+nUvqejx5lhjc8z+xlE8wdGuloAsBeK93X/cKiLCXSWcw4m5Z9kfcMQD4ceMdM9TfZtILhSZ"
+            + "pwVd3fXn3SazJPlDusN15egWY0ipI+Y3JDsHyjO+L0LEy+OIX90RTqYriz+1bWhdITqWk8gYl9zA2oqpgvwp36JS6SJGUXrTDxJP"
+            + "miXd2fY1kxoldvrc/+XCyIml/lhEz+Rw/y4SVGU39T7P5GqFg6VJ9i9kFGKyafFk9JNYrsKmWLvqHjRlq7GG4RyMeaGcGdVmRuEO"
+            + "O16nGjTqas0D6huNAC51x8Le3+cmqY111zAXx69LdaZHAADMbT6E2NMP/zu19K3Mu1aCLpNCrzTTSlAvPdbjDtmRexh4Gk8bO7Hf"
+            + "KfxXvY3qtNn1lbw6+raKJQff+UYslcHTePcjs10AJ3uM1/aXfssPXcEX51oWh8iOOHqw/m6GO+miJMtxiRRbdZJYTfdnM4WnZN40"
+            + "YwZj6JoWgZ1mdB2S3xjYnBajBrYasfGCcMMOeh61x2N1X4WmIHi7AiXRfF8war+AeAsRhNXuLR6Pai6gIgiifLty3eQj7Ck2gEoM"
+            + "T/jiV34eP+RHX3t5Qby+lFAslm/asS9XQDvSG4bqQIANFhsS2JOuY90iHu/VX2R7nXk/IfAPKsCvFMTO61k6e+waPrxyt9EYkONE"
+            + "7FvwOwnzJG/dhn4s1goIlnJgFqyChZyv+NVMNaCKly0Tkh5FVJHM/pQHsov8pmKaHNJ/8Gw8MTVeVhnJkel+ucVhLL4zvg5ShMeq"
+            + "e8gFw9zxngfsuYIw3ETAFiDP6YkFxDvqzLz1IDYLcKEwWZX9LPXBXvOkMdR5e9Dzc6wvBLXDWArsPKIwEfV6iBOWZPs4LWTDCDtm"
+            + "+4y67nraBO4QozYhNLFqfu8zafYnCTCM5RxmNnkC0H9tg44N0Dm1xtiTI65tyw5u8djQ9g3gF5/NAyrOPz3N274AHnoybfAtAmwN"
+            + "SqUMaZ/Bq3/jJyYcO7yhtawOwad+uOO9S1RGeRlkTLGTMMncwG1+qmzxlTRqGD734Vqm+rc4e/bciY45lbQyVGHhUHfPpNxRzsfR"
+            + "IW4iiZATOYj+l3jDF4ZoBXKBsYSFtC/PTtpoA1T/WJ5/3N1fTpjX7jOyYEq+iuYgmvTknZWqyBZ4JjT0J7LjjWYeNEGZHf9dVbze"
+            + "lHh0XMnnuIEbfzlEsWFJCtZaFnI+TnD4OitfidHm79HrCHZKTUz0y6PVm2ZT9D6XKz1FvpLOi3nBZWgwykePJOYZmiabi4Ec/z4m"
+            + "ilLNDyQn+3M9qf9PQ30IvGbjqFx3Q2ttA9nncYuw4IPOedzMwQ4uUrh7MTVoHbkKJWf7CED57ycbgxz1l5JP4lWJv9isjY65xpS1"
+            + "JVZijx+E7RCGax5piWtyOM3FM1roLozcU6uqxT+E97eTHMRmaLSI1Jt+px60QukUTn69iJy77qDWs8rLgRKdNi3lC2MuDIz+fUNy"
+            + "F7i5mg6d4nAySZOJycP/RIDnixeUG8MRlobq/spWTJ9rK680fuHIar7sTyAgozZztJ1WVOf/8lSeQ3l+TZajWC72Dn4gL1WFINnJ"
+            + "f2do4hJ+BOu3X11U2C4l+3kJ4cV0I0jHOHjf4+weuilyg9UOK51ID65n09MfbrLyvJhCV7sJQJaQ6SXARzanwJHXbSkVaU1lPxzj"
+            + "G2Cv0gVWJnjze0L1k3ryI6lInwXGFR5QCfddkZVVwo+Ao5xqAx57J2oYq09kYssPnlS9UOx02Of3RxypFebUH9yIRNQyLnYh/YHe"
+            + "QAcxI7yPqs/eRqaxrAegvHKyiFZ+jeP3Nc3j+/G75dktNfD0YV43LdqOELAs7mTkDbvdCsKUeyptsvi4MtbWHu2QuXoBAPagDiQ6"
+            + "+FBC0DUSfXJUO/WYj8mgQZo+1osAkrFWD1uhDW42f4um2Vf8MKsXzC6TJFud52sOG7DB4HtElDmEvMtL7+6yw/T0tSQdI3qQRcUJ"
+            + "1ztoSpfzBGKa1WS1Rv2+h7AwK8b4sElB+pAOFJ8fEdwaPiptyI/dwItmIkLB3lB9krj7UDsSXTzTEzYHsO8tNjQTsLldLKiPGg5n"
+            + "YdMzFS1hXP8Aar2gS1rxlCNswNpskEU/jKaJ0H/NMILn2TOlLybBuvEoJW/PCcB4Ui8PI28JPsA4V999ROQv7JzDcsoFRMrTjW3U"
+            + "iyilpOOdRxoDZDO6lWfZL5IxuXQMOsBTFB3WwS+gUs7wUdkGuii0BHjJXMbIXwtUoAf2UJP0jS9pNCSUkMAcDTQW9+C/I0DaSKF2"
+            + "4GCH28maELaLI6iznTpXBBlIX0pxiYts/ie9+RNABtDkiyyA33ZeQ1RNWTG8QrNHF+T62t4an0+nGjpIP4iE8PaTudY/d8e24XLt"
+            + "pMTkhhAtkZYiqoSFqH1LRBWzPDz/TifitA3RpfAMHkgYymV9ZrVXtARxfWASo7lHzi4x1WOsGfpeGsclIE8PITWRYYD2LqgWalkW"
+            + "i1Zpk+UueZoEsAHSbJAQSmdcrwNzqdVA7i/0hWh04Cm83fzQlnlnwq3YkINt04o8mrhdtLtLSDDyb2JxyQ7hJiaag0pWDDyDdzAt"
+            + "W90J6W9oMxA6YaRva20h8pAxnAvp9cUqaTNJNWK9+7YkVok/Nw+zS9XB4/ATXi75VhgupkGthifAc73zbcPz30shEoLTJp5M6iqU"
+            + "I58Idx7bNgJpWTJ3p7g8H1qjTZ9/8szfxPAebLjvYC0gH9wbNvjFFFLOMC4gf3RJgefyl9vtU3f7KVpWZtTPMpHGgEdoJ6wYOYtR"
+            + "d1EnyqB68zzxb/fHZrnl/lHa6gfCtsgaO87Yw2xNhkLr7kSKCuP0VOAGNtwtJZIbRIX3UHI5lcOI641Yt5FQaTl48uR20xPr1WQ7"
+            + "oejq8BMh1LUToreoAMPspjDf56e3JDEj+AQDs8jhhI+QHKdc2NdlLwvp7aB37cHBX/2OLtjHjXz3Zm1qHgc0udmzOYbV+/oC0gBv"
+            + "Zzcm1WnNSmBl24HxVEohBynQb8FFmHBFq6yxdtwXBipt3yaNPGBkOzltkvN7v2q/vWMtqNjTbE349YKqz8bmMqnAV+PEEZdpebvo"
+            + "IU2kUaF9j0D0WGbZ6eMr9BdpjgBlYEcCxoomVb4MvRLNdXKJ//kqhNY3kUB1KMFnTSrTH1D9SousEiVYbp9JX4AKgj6zJzZrg0iB"
+            + "zpHm4e4dGx9W2gIayI9YnQHoGYwJ2hZ46VCYLLDr54mjwpmNBHm5+tvdUuOdYMDMSjOe2l2nnvWMg8tjIeI52mDvuPkYuLTtrnfQ"
+            + "DSgHPiY6IkxjTk7VZBxwwQM0S6BqdICs1cr7yZk5/U6Fwf2TO0KDyHEF+OUexSZO09o5uzZZ/aorJGZR9kmmljOE60hTRyUrHdrG"
+            + "oa3tWTBq2axvmDbU/BldywpNEjRnuJZyOd31iTZtnpIApSvwMH2/MaYwDv1OVoXV1r9Odo45VZ2+1nRTOhu2+zG8EwqOkzt1qiy7"
+            + "CLpJiboRb2LnKcLtxBHTaWRodNZO/RftLg0zul3durOHLdamjn0SOutw57aK+s50QdTBNDHUy694fZ1xLjvA12Lr3MmjB0/2M+vu"
+            + "tJeHHLQbUE3aoJkSmiZ6utkejAkQCMyCwe8H5n7EYoV8GNd5J7erLfQf+hH66wD6MQQFWxf7MKe5cYBg4NUxH7MIpf04CrWcaS7a"
+            + "1zTUtocHkUtVE91BoqcJGPTZEFW/D8N5OEGg+eYOOLhgH275rsaQ4yiRQavZ8Io8wyyKewgyU2NRnSuImSrhlsj23LCLnPUmnV9C"
+            + "7hE9Jnsmks66uvcMFESP4ChorsnnParcj5aURYVD5thKgEtFihARxfC8R9HqLm8yF1x2p6ZI6XxewxfA3g4rF9qoqAQB4S9U9MaG"
+            + "YGqaju2WXwaEmd4Sod4LdFqLHMTPAOZvULVcxWhuY+GTSCi4wDdMZkvj3mN185aNZ2krKMLa6nXZx8+3iJ2DsmQLUrZZa0+14Wk1"
+            + "uRj4nYNtfwdBbX9XfnvWCfRPw5iTD5AVlpdi5WhA4p4bZ4LWIxP4uDpiVvQCCPGwrJDFJ0/b5nkpH6Lo9vqXHS/TY2eihbtPOz+0"
+            + "RIewR3pY2dW8AEIBlBXDYInl/+rCsujzZBXBzY6YljO4/SQupc97dMQFV2D0FyMyRxtDLA5oorB/yvvS6dJXWj/9I8HE20z/6qkn"
+            + "xrryqQPP+6kmIbHJmEHO/UpCJ1aC+lbM/C6uRFq9JWD9fOeAqj7aZ+WvQqf/+zRa50OspvWw9TcrwFjyU+VC10w72ECcqtLNiWof"
+            + "HukbTraQEn4S9hfqpG23nBEr098yLV75CIQ0Byukz7zcbhCRohfGOPq1RUSukc1GRm/zUaQqFN81k021+WLkorIrYU60uDj0OCiR"
+            + "erAmc7a3KIQTEakQrlnEL99U3miJahxpOTd5mw23yG5hpYLqF6OerqN6cdFlc1fACLrcQh2hLN3dHeOlILyVhjnAqgZq4CwSTbqh"
+            + "AN+7qID2m/Wbyr2SvwfAWwh3ZA+gCWAbE5UeZqO5KphYWLFkGUHN9gyqDQ6+svV+Ue1RFjVU1m0PKtGpF2YA42z8whotWzEG+qCq"
+            + "MPdSKBHiBj1h3VO5d+foWC+GeXtb7NZbmQyYz7f7Ry3YerlbhgNcQHJ+k6p39QAUQyxExGzmdBCgbJEqC8qFll9fkuqFq2/5TxbG"
+            + "9EI7G7jsitaYjTo5lMwzLtCecFpopEcc1BakcpsA4kYfhgxURQxr9ogJrROArmAxR2RCnhSg/jbvAoZm+ssmh4Za4xN3Rz7Npjhw"
+            + "Ixp4ueTBVR36ck8D2tR3xNcL+Tl+EixDF1q9CvhG32dNAi7RNO3G2pvgt22XhT6V8wPohYKjajuNiwJrn5P0S7Ev7vxz97HHrZd1"
+            + "00nxLj0jyVGEiPG6qpbaM9nB0m0rXPQXsim/K7GfiLX4E95DqYrf8HXkbwd9UQEAOuzin3/jejVJ9vOlA2cl5E4CTNoifilkQRdP"
+            + "eLZQ43khJoijeIz74DORcCnJq0hITyC8IfeJ9Diquobv/BhpZBVotkD4bbWo+cO9HBuc/BiGDNGcMMuKZPLosOSk1tcrq8dIqGzM"
+            + "CXCWnYom8QR/gx8Cf79b3sAuUFOb1AGdTx3PFrSNdHDrI9GTQ3bZmgaLjUGv6eHcgbA3/p5OokhKHOG+ZNDrfeomkwygjGig5T1W"
+            + "CnuB1VE0jKvoVZuNVmesPWWNjmW+o+8yuFblf99spuEOeQmkBa6a9N6/MJvzOFQKSBZwWKVOThpWv8nY9bFdxtQnLiRHHG5YSrbZ"
+            + "SPgg0vAaL2sUy+vCeulzUTaSjNr7pf+vHkfE9tCUyoHtmzSbomP8QRXFBkZbI0nSWVFCM2fapwGj+8uJS+vRbEL/HXFsICBUzkOg"
+            + "J25AoVvj2LiNiK1b/CaBXxaVX3u6F7Gtz1EO/tAzSejeVnF1KvmZjapZBfGFVk35/097UcUqY0foGPBuhKa7frT57vRgPmIh/sKt"
+            + "zhW3qxVRVxxYokN2wjPuyN+nbdk+GE1usnrvRBT7XMMtw08m4hp0/49O4HW8FtyaymxfLGCS6qJBpcIaWCwvD93QPpFH7JB1c6Te"
+            + "swVy6Yth7KIZLFb94EogM1RXXuZvCCLz7jzFDiBep/11xNwsIZaZjboh+WNED+oh6gP7BC0TJ8pB/gY0d3m+/63jygsw5Yi74LPp"
+            + "FV/Ft0oDOEEXaFCd5qc6EzLXeaGfB6TnvDc3nk2hs2OogNCNaMaGuu6KlOw1KT8f6JCAC5VDbeTOWcryTjKbVfh4glhyXuVDlPUo"
+            + "bLa/a3ipDrl0ZyXpquXFKrz0fGbKzu3A2/4lrZje+3r7vF0fEs9EqViLDvgxd6ajoGRWtqWaBuDtH1eXNTNbSiiVTnxbr5ZPQVog"
+            + "PqhJFqjYOezPOwEpkQXEFVkGihT15NbqkA6L75bAxBcmh4K/OjZP/KbToR78P2aF1gBFa3fgki1hi1v+pytq/42qkWTMNx34qtgP"
+            + "h09VDhiALn6IjE+hICA58JJZLuMR9UJEQorJR7yy+y/Z3iHXl8XXwoAaa6c3552vKJ0ZsN39LbaPX5ITmV9PWtcAth3MX7jhY2rr"
+            + "NeFybrsVnNhASZFhVwPh+n/3YH3lLl1K/JRFX34Aps32QnaX4Fh7muyTHQssPUiecuKLxYxw9zTxu+iLbIXmmPpIT/I3pznmFN8W"
+            + "0b9DhE9uO9RsIWHYLeBEH3D5Aizr6ZuGdq2jaUAAlBxfWUzetcGWjn+XC6itHCfNgv4S3fhTv54QDT+8dog8Q+seFWCV9+7xS9qG"
+            + "1QK/K4RFFLG1nYAjVZlVTY1WxanFEGK7XDR3hTlIJ+49R3LG5SOEcTAo/e5WvuJ7WkJUsWsABPbuuxWdOtL08xkUnKbJaqcYSiM4"
+            + "MWcX34ZljQfK3KsMyiTfXgw8I+GPOZbnnU3wKaDG1ERZWvkhU3aDTmuQJoQJEwkvMD2cpMLDnblsM99HFDVuAW9Gi3VNumLLSjkT"
+            + "JFrJRCkGmF7bAQEb7EuSgyzlliI0DIPs6shw6nLITcvQ9VGBM0MFjF6iUWwKTehcjVEWh7NQ0ll76hBsnfCzicODCtUrlQ4ZKqwq"
+            + "TkKb6YOi7fbJl0lFXjnpIRI2cdDZPgcUve+jvXmxHIZ/8FPgfs6sQfDGKUOEZCPmMz2128sZdvaa6un7bIFA4I1fApU3NbrfNLPp"
+            + "U+FxQIBhiXkXso38xE6vY61a+AyfcTBzQb9FcakaVob561Ug0G1kHDNdRpKVF+jm3A+zaL0c0nE1MJjXOG27CqFSSfkeZGNnBli6"
+            + "yuRtz4rxnHDccHSczjP5E18gBEghtiwwckURaQWDYM2rb/0bOjn/pJ1SwMWPTkxCRMGmmTPEXgu3VPXOvTMrToSZ8gYFntphZTjI"
+            + "4AeunUYBK++QeQS/GPUaoTHJJXOXziyCjSBapieiiwE8Hn1zDR5dq2EIFAfSp+39zM9rnzq1Zm+AIETYF8tja6tduHlk6xUbwLQb"
+            + "ccTwzHiOT3jY7r/1MvQdvYEbRun736ECxLPaBdkH3Q7HYKeus7VNlHZ2sG65wIm3iOSgZY6TZtYG56KJ3Q0lyTVzGU2YYNmSlxkd"
+            + "geS4KvOWjMdDcBgpI006OURls/I6R2JKtu/Bl3l3Ek4NfXMZDyHL+th5vqSIbDLufAHwp7zaH6T2cVzajaI6iK4puDoyz/+f0cI/"
+            + "XfXnUAfWljPuHwyDCuXXwTbwSETxRyIuZVmnAvL3ZxwpBrxToLXSEfrcnVV9dyhuNZgokVR47yE17ocO3BPrGWcr+AwybFJD6QvO"
+            + "PJ8LIvpFrNCkZLav95BrlenSC1PfJKEIt4lhDFkt99gM+5DwB3p89cGoJw5w7yeoQjHHJpIaYUArj+qfs2eiEfOtQEFZw8E6HHKE"
+            + "UaUn1y5RpndPv+/Sikkk0qXyhqjDYSIynPFA9N8CSLJUM2k6yZ0Nz2RoOqtFY5oGlupgyitCvV0RdMQIvY6aKbfeBVbWxNHu6JaS"
+            + "iOAg8ujlpdXRqNY6iIB8c1yt/vXI8JDWXcUJZUWEMOQDZSBoNj05j3DBKEJw+mbPTh4zJrr3CRRNiqCpnPoRqw9qUfzzGmYC6jZf"
+            + "e5ryF7oqOxQTd8aRl2O11wqTtKRepgqbbP/BwyyoRcSlK8IDu+1Agimkj/+HT+IxpXUMJeS2I1pAP4OyAVUOUM2x2EPjhI9gZw7e"
+            + "xSO7rKEdpBzL1BGvHGtmTtrIQL4WzCt6A2DkA+2RPFpCRayfFcuZgm6EwjirTQbCnE9KGmGhEDVqe3VXpdOHoRY+9Fkz/6DRNB6H"
+            + "+FUz6m2f55nXTUzLszqlyV43snXS1YgUjwOrHwarBM2p1634jWZhd8ngG8u/NxZg/2YPVigB63EcGnvEf9RAfnUKHjvP0VQ7obsN"
+            + "yaVCP9sfTa83vOGDMAOPtwl89DroASHONV2tIr/YqvgvL8CyKt2jg7yT6rkdtU85/H079p1ezl9pasMJgvW49Hxx6dsy4aW/K0+U"
+            + "83t5pPwmGChmDtt03IuQFl3FbrH9N1uLGAKwIRvX0HS00h64qfXOo/RccoKXT1kEbFAW7AxamCS0D6ohKDsYTAu/ingZBI3ooAl3"
+            + "XftgNgJEloOsDN+KsLuaA9PR3NARRegQ0DPb0k0AufjPyhkImkrzIp4Duit3/1okkOIATuIZombJO5QUjXJG1IpfDkZZxiRq1Mz4"
+            + "If+L2LY7A/1nHKjnxT6EGGBFY+9xtQSWfQTICdqXUJDaVZc0QYjCReE0aMHztqgBPf0YxXqsWZ2lButnQoT5ZsvF6hO6yw1sU35n"
+            + "Pef+pREQDfnaIuSj6sx1x1khUgOWLQsHQRZbUBeZCRstRgBJ2gR3CVv/Inc2Cjky8slxR4lIisqolS6I16TaMVnt18QwtcvKnCL/"
+            + "+8wFu1mDLHh3wUJFLtQWAwmUYiqAV6NovhnMeQzaXQdk72L7Jd/51PGKwsiYHCTACVeiexCDfRnktVc/rI6FNduW6i6R69uTPZe7"
+            + "r360X+l03NxwGeqNALdQcUdc6/FCgsGpGKPLBrqrY5oK7GkXVywKxMfc41SIVkgUtOq9+vp3X0d5nFS8DytQctAUv6Z+OOYdYPyZ"
+            + "r8z2xweANtaXJybOyIVzx81npoDfTGTzf2CJiajCh3xJlslD/MqjJzERNGll/zZwIiRvE8qfQHM5FJ+ALcBu+84vkwjzlleDxV4e"
+            + "GiZsCkrq4r/4Y4oroFg9rUAdTHmSSW2ZfY4WobrVUMmBVp+liuONmrez7ruVPv5X+i3HEVv/vR94fRDeNr/BOda6S45eWzR7oP1N"
+            + "xm/dK+zpb4x7LDWP8MtvEt6L5ZHMcD2ICJds9bHl1eyDOKgi3zAI4HCNaUgmby66DryGwwN8Siyn7xZv8v5hGDWsXKQvb45D0Wif"
+            + "npKCw1HxQV8GsCnxjyp9LCHuZB8L7Oobm30HE2b4GIvoSERP/gYWSAu8TKiXHepOdC4fpNZHV+llt1cAF7yxFykd5EUmv8Oldv3F"
+            + "Xr+tGeenpMFbiPRO/mbc3MmPJqgNs1rgmONVlAYydRz7f7PRy47qK0gue8s6ZJ9Vq9wC8S21+sX+6x4poeQQenLYg+PNn0H9m3tf"
+            + "F2y0NKUdk+wHIdzEuwUsWJY0gDO+AER0bG5BS4iBgdgJTJ3eLh7nnvcmqMweZD5AHh2upXH127P7eVgoFUwHqkixDTyC9kljULON"
+            + "LK2P4VTx3V1jA1NQAiOZuvf8g1xW8HEjZHOwrtkCIrR55fPeclvo+BYh3+jPp1T6aRTmY8pte45eNRXxBdBHk+XZ6Ho6rz1Jry+8"
+            + "9zHOZs5tJYGoAyVBMAk7oVGIfLIc32Y3EqlZbMWejCmTs0leFAXrcqFWOSQaEfcgsPhkgsUErfhDFOfGPaFKulnIy8ztKooEvJ7m"
+            + "pO1eh3vQhSH/XoBK1sx5WVYmdtcmpct3io9E0WRwjjwSbigs5eLB98qQExXX8MuHikOKl7mE5qhWKuG10JXBORttQkqN3YMlfapA"
+            + "QI2TQksq0e1VTiZ1rp0z9G5qqpSTSs5VNTFlV+3UwGiEnNkEfr2wjxepiNsm/AtjGLWej0XTZS4HiaPY/1q7sAS6Q7+GkoruSpsu"
+            + "VeMu/ibuq6x0VT8LSzygHaIGUk82fkQBrzwPsx4bRy8O9YCXMY4HzjXTIYL2qexze7pf5r1JCA00cX3KuQWGVzXvlf+pNOkNr2Kg"
+            + "cfPnoToKhhmOxti9M1uXDW4c5GDffccow9f6kZBkOVAGg9xkC+eiMDGfNM222odxMhsk8gjoXhL7rgcIBiQRry8oLWwRNIQpulRh"
+            + "5kGcv9Qt6TyblQ6uay5V9q+53OjKDfAMbAEqs8yIBXaABuA0EfysY/jdAwjE4dMD0bcbpnRFedx6d0aqt9NQRyOQn0dA9e/cKQr8"
+            + "0abI/Ls5CdKvalT9ISinn6RDSMOxcFUzfS7qfDIc7Rb6w1zXd2+3/aNklq84F7lu41HUjhBNxLydPLOXenxXz3/P0kUoxwGCWZhG"
+            + "6mNVnc2mFW+d3cLuvnqFfYdYojJxyW2nQo3g8rSy/KOJqUgdAQKBIrx5jw52O4vN4c4j4eVXpDR1HUaIUVj02Gi10D4EngoVlBcn"
+            + "ND03py5bypThV8RkhD56tWxIGmy96Kz3IxKj51egnYPsHBSJk/clkk0QVRcSboB71dwDl+OXZS3ymwIUVEM8gD5V2jR2syuqZByb"
+            + "TtRDebZkSMeBLqagzWGb9gsbvA5TIlVP4YCD/9AHs8VAsWdIb5KlVBj6Zafp1VU66C/me/1BBQNoljTtXq5uJAbP8ayeAhafHqvs"
+            + "HsAIufdShm+VhpiucoPzzp30Mc8FD3lYh7Ijge//noCiem0HnufM3SfGjVEg12DsrGmgeuc30iWsVuAKGADygpLF2D/MhLXI8uJ/"
+            + "MVtird/DjXpRGhE1IDxnm97Wqe8BbtuFribI+kr0RHSfe7BFgVJkQDjIwrrd0ho3YLMqyBDASSm0QlBuGogFurMOvffiwTzMlPH+"
+            + "ktsFfONa8rGGVyV4/WTaFm0pAjZmYTCS2lnVwPQusmZ7t7nLU6uTjGPWhqWBC69SfrE/29l0FOWp/l/ppEeaOIgdxTlFjPvK33aL"
+            + "Tb9Y1qtpa6bsTEwIqg0hEnK9s6bK8Z+a9fcRJ2FoulhsRc6nj3FVbpPvcpjaO2filOA+JseX4EEFPRn/GLT246DyuBzUl+TNqkJP"
+            + "1pI5x/hnG2X3gr8zo41N12TvszTaqX/Ngd9/kOTUJmjkmqsC5lYrCrtFSHJm0JUb7aFKG+m06J637kLTCuhEZdELaDeRMxFD1Ka5"
+            + "lh8+ZHMNxovEaVGBmJL6u+S0sMuONjWvntViKaCvWDtVGCXvYRt7T3jbOtYzKAdPQLj5DvRBbBhYUpnPPk2QtW2wHzGFPjzyK1aA"
+            + "MP4OeZDEWoh+zo+HuWyz4mVFVYn0jGyl5Xm9a1R6h+XCM+PyTvMP3tZznbGE9ybOxykqBuY9kx1ppVy6jaJ1tl04mhD+slhTlIXs"
+            + "JZG7aKMFoemtKW4Nlo+B2U+PqoYkS5iQJLR9638uu5UwWGPFvYFM3w5jDHGygJMiEkrIIasrXs53+6GnK7yUcMauTzWinxz7EU7i"
+            + "i3eNuaplipX505WoophXyd2b5NUrefYHdzJg8keViQ2xATB/QWQ3bzRaQddSDvxCOUD+fkcJZVTU2ib6d5GDr32po7/zxWANQyKw"
+            + "plOIKXgTOlT9fujM0tyfvi+onn34NoQLDgRUlIx4klXn9ew4WXJPZxhvQR3VA8MKcoYotIyw/m8cktpuDdxNIowf2z16ocH89N6m"
+            + "ZyMNF0sIEHjpzAbJMiP9sb2tFZ62LH+Gw4mf8YmTnZPOYsEn3JrrKz73UXhg5lrVN13m7POy6E0ohnseATAd7/Tm8ifYmadc7upd"
+            + "eL+KJsGCDPkQ9pcnT7OnGIUI8DfRCABXYF/oxtsfPWMz5mBkkXc0+zZvZlFBcLwuh6THoTj1q55S7CWfScJlzjOhW6xVruXebbgq"
+            + "VekNvn7LBD9wdW0XKVURrCHU0pF/TmjpuSm+LTkmOQuVtQrOj2krk2dGv7xk+ht5NlHFiSweUM9Wc4CEdgYwkxKuNVRksGSVqCDZ"
+            + "NXDuYZksX4UZN/flrFy3+DK8vYbOuDcLjJUG+PmS3qtjTNK53AefQTAstpTalNDl/3ew02EuZyTSTMMAURmgtR/Idlq4k/Hvx/qM"
+            + "N4sY24ITjbCrJxbjTbwnQ/nWGenZ/A+ssGgYJlj8jaQ+2yx4J3SWbfOLV7izqto66nVeGy9PvObnu6Tk/WTXO2FHTWMG0Hze8ZN2"
+            + "4Q16DOempr5LDcLew/AjuhawqBZKmL9itByYqOqJaHsTZ6uTl0A6CNiZqWbD447Wn/WRnifu+df3qnWHcaf2M9Hrtf9XJ5egIoyj"
+            + "4ccjtluNrLj5oA/gtDKQ18XnlEFvrO3jSlk/pH2hcjPdHnjyF2qsErzV4DFUP53pbQVU4OvGbj+SbRYq2HojNZwOViqsh92HezYx"
+            + "lcwT7/j9xkVk3T4FmAcg0/+VHlKpbvjvCJq2qNi41QApikXMe9AybRgcJFIeI+3XLQbyIiPFRTXg+aUM1k5/HGW0xnPsdH2o2LHo"
+            + "hb6oy5xi79qwc+n4Ef4DuzjGIvxK760HJwIzwJlm6/Rfbr1Vav7iWYTTKEdkDsc2XK2APCQQ8SKZ8RQo+yQTGy1QTmd++DGGl5mA"
+            + "31y4A7cLdnGAIPgvkXdlWdrHHjQpciT/7Xqv1d/DHe/dqSPdwwFjOaKPy5Eq5yj9E5PZTiwumZUO80VpIOGq3b11a3/E4P52ZAiT"
+            + "Y5NYREFKUUzj4JGqRz9WRYKEtofVGUoxsoobw2Jo85CmXQXbdb/gNtCGkKErae7BvIUPRG+CwGkFAmLKBoQgO+ArGNPJj/tD7DCI"
+            + "6TTjB41f23WfmowMYTkYgxuGsQtuj2fVA2m/buvkQBgDUGCnTmskDijEA26O6A/peCV3Q4VSteWZ8P60y50jYsKe5Gy8/lVihn2C"
+            + "APSAvqU8LnD+yvPLRH5IJI93NMQ2hNxjFqhnWyO4mlm4hddyi+5CYzZEa9wxGDMO0jJTF2OJR9Vf+lpxDMLNq3fM5myb2g5IKDpb"
+            + "EhOfbtTxhpetPznJ+2oJQWF7cQ+TxiDFaRfPS4GDTKIOdxnXioMGEAVAtDSLuQOYjMseXyynZYwmK5E1k+h94Y8BVojWBL0Amtue"
+            + "n31+i1n8t3Ma0FrLpmOP6jnWZaBFKCtzTVP3zxo48mpmWnfPU1jTjjVaUPUIIpzUzRWTtxvbbIZVUUdy6yZYBdmaqxVqylntDPwr"
+            + "INS80D5Y1DUtevifA4WlmAN0466XL5YyANeSSi5eb6YpVnSS+dncai0MmWVRh/r5z4WdlLebsWDmpu5WNYqU4JgpgtV2u1VCA04s"
+            + "w/bBTZSKWwFBQbFf4Pz+TzPkaxQYQA/j3C2CkgET96YV2BLKP7Ijz17WmrtqJi5qUHwrfY4bIVv17F8KJL+kGh9p2n1I18fug3q8"
+            + "KRLIC6DbJYF4Ivwm+HJlkdABgeNR2oNvmWw3GimdD1zoVHFg50HQt/bDLaq6VNAPswjLbFuvwoCk1XRDZwb+AE7MWITM0dg1GJOB"
+            + "sUSgRx28zaomgtjlbMgxbFJ0LZ4v2AsxIEB9GJQWaL50jq6qkiWLa5z+OvcZ/3IeQkRg9AEzOHe1GzVDkeG2usVkCe8AMhz+Hffw"
+            + "+dNEv4j9WJtNGAuFKTKb3Ul+oHwA3708Hv3Ab7J7fUeIF4wb3sW7TgAoTgXh3roZKl11uY4zPNz2BXNu7KOjybFurogBagd3/MFJ"
+            + "uHy72DIxDIhrvm1ebvnYjLnmYcVbBvLgswUKjggM5AtPZanBB0AVTaQz/8W0Ui81nTJZxZloRrimy5M5Vt1X+sNRCkK7sghjp09V"
+            + "BQ+2zq6emilXh4iBSHeqvVHA+1ya7W6rRzjhYlkyd7hTre77aylD4T7mQGXivTlXWQn1tKPSt4H/3MpMp+hIuoK91S9HjK1uMxRZ"
+            + "qyaP1rDhatb1WnS15ja1+bDDhzr7kx2RVkZXVbSr60qgkNtp+2QxR/q1Aozzhpy4brzmxIJFLNOFmZ4DGhyGd3BT+wH8fAV2QlIj"
+            + "9Hrm1pnGOU/sp0YG9CNJct69U5FrSJwOYC1d7oJ8qtLiaG2T9O0vlwzrk6jtUZ7xYzylCmSXm2/i5/oElUZ3OGhn56N3VVcKV4w6"
+            + "veDEdJ9WuC3VLfHv4xS1/o2tT0pOmqnIqimmTxTH6uiPEmm6K+EDblQ4TyPcpm+t4P+IlQTCS9Q92FmeyaoSVKkzAmQ5PzXYHtON"
+            + "1ku6yJkXKeRp1dnZg4R6YKK4HGIoFoLl2al1xmwxbIdZMUEr5aS4LdhtqgRxsSZk62oMlvnXzPFMm6XAPNLJwIuLz6XI5M2w+dVY"
+            + "fXrMF0upY0g88WLqctpweDla3w0r07kKa+3zrQ+FV9i85Xj8Jcp0QK/bsIlbp1bnApaDU+5FZxZ/aeUf1USPhzRRpM/Qs4ldrs0N"
+            + "6nZUp2X2y11NdLnQusycXgiyrvShk2SOMn6fRbOg5NtUkgY5+uvqhdp2sNFoZUw/anCvjDYHHCHZGt0HnJrYfVDTgp3SogI4J1OX"
+            + "3DwEgc/v/dnuumLt8W8vCDLiMSVlKMf7ZM9vutZaB0+HVAz/8xsaYUQwg9HUVYkaS5MJR0yeIVwJxeaFBulcRjVxjo1mSZZzOzhu"
+            + "ydaKkmcQ6B7ZAMaoCOpUJITZB0X+SkeHNYVbO4W+wEySbSj/elDzj9kMTO56zfEoCdIFiZdJ5pnSCu4TydzVGuefxqEXA1lxZTgC"
+            + "glnijmSvy59kVLF73EyqKktRCf4/rVteZ4iVjXe8WaYzu2P0lpk/5Op8QctTH5OjBHEbPH31782ta2AVyAL8w/7p75eMlNtGIYAZ"
+            + "EvrNQKcg48ewW3Q1SZLhECxKGecsrX8uxE5zcfdP0H7mf2/PeMO6AbdaEKVPGMjAkuXc3H9NcJ1xeaYmHPz8fz9FU/QHh71vvja2"
+            + "uGgAJQXHo2g7SYS+Fzi8LKJI83D5uEEv/Cuj2hqGcVlMvABgePzEgSxWrqjElWj/GV5YNy1Z7r5ufZRDCVVFq9V2SATyaDJuvaxz"
+            + "01FXNF/6kpfn530pu5jjHWeOkBFMtHvBvdVY/mZ0SYi88/2G4q1cXj5ZmjNkh6mRFlzy5DxkxY8h2QQ2+IowgPOhTCr7lF2QzXxh"
+            + "S7EhrXFsxV58+v1Iwh7ld/X+hs2Q66x/q2Lm5M17NAdJ9HYrFmhqA8OQkJgh6lYhEpvQ06cRpCU0f6gnYJPYxT2wmEWzjOXsXh1T"
+            + "CgF/o3i4KRMy53gNlSM0r7/I4J9hlDC57SggusNdoUHbxe81oaMxMuwEIY+Fp2SvK6JniXhMGcIbU9vDCVgSy/v9UPlxczKHafy4"
+            + "FLp1d3KcPrnfOA4DR+9LTP3RD5TbtK04dSGLxgzqoKAoSbg4llJawCmf/pUfTHkb9QwBFA94DNjBZ7wzZ7VpA0PDI0NOTaVE2Lje"
+            + "Dss2yarsACp5zZf0CgP/lCkHZhsmG7roNDKDCKTotvtmg4QTsBUoDEHSTdNfearUbvGZeBLjetxOMbIqQtcY918B4K5TYFM4Dqcd"
+            + "CiVi82/hjN6TbcFre184r2423wUZk9cRae22lUxywBQl0E59xxdfqWGzO3kYKrUjEsgL6+dT+NY6TGf6vUYusecH14TeBwcyxdoS"
+            + "HjlzvXiQT9h1LEbl/gAq37704Oi/wLkB8b0smvVk/6hoXGkfyeUjUPONt3Z5o0ATVzBIlFfcbqPLaFRgOYRtnFc+dgoCQKuGWj9o"
+            + "9cH+hi4K6+61ARGmU8hiiBk7wqwLaIshBoM+POjemdsUHP8lb8WWFb2hEWUMS/o5y64RnryRFeUUGPzqzvxV0aifrJp7oWJkVU/E"
+            + "70ChpOUXbaflINJPQHQjtf05LzG6V3AunYWnuNRDzkGF/OsLYZm6i7HlcDCEC2I2r10NX/ZuPKxs0z4e1xJztZAUqN4k+zxc3NBU"
+            + "PHJ5e3NLhh5F0xDDY0Q6C8w8ZaCjqYC/kUMqK6fY6qpJ31UpXmh071EH1F/Ph9NGgKsvHnsCox5WjyjdZayIs8MRgYfblo7wuket"
+            + "Wb1A8UgdzEdG38i4ilqjDpRyxMJfD/ZbTqL/prqvym/ip/T8Yfz7dDxwi7TQRl+rzoHzAfhLojZghZ9dVaat0lY7QoY9TzEIN5zW"
+            + "y5qrCwVg6GuRuR3yUPMmbCpOuS16DmUu95yyJVEoJ88XIS4p7B9G8SDm7KtjxikBDrZ06mmzUSuxchvmUumiDSFpgtyu8TZQAat2"
+            + "PqAKDr3ZKYKobJVWCbEV0SIfKY/1fByp2YSqNtpMx6o576HygCbI7wX8Bqt53AJ8Av7qaI0iy8kkS+LfYwuRhlOfnbBFefXfolwO"
+            + "cNmZkI5KLDUq1FYjHQYldWsgk96GQXLz65ciTnrxJKZhpjbwZNeUM99oGppK9na7hkrtqXUCngv4cmVHSfO/wDNfWYxWoWVtS1Hq"
+            + "u7XGpd0KdIiWsjHWjXXXj/gMEm4jULaeO4Aszg0x0fh/gkWrSDMx1JAu66mG94h3qI/gi/ufZ5GOdhwVBa3Wud43ktPpmBSlLUT1"
+            + "nfhJ80+0U91Qz2+pKw5ACKVF4XVx0d0Pp3HhLpgUlP4X+N7tPFN01aFKv6kmVwDR5d7p3un2ba4b7Ze5cP6eNA4mUjmvFsjyBv92"
+            + "smoSe2dYo3xK9gaiLwsmNubfdYSiwSe905G1AYmXVKyMPYAAvqBhHEtlXvWNamL9J4q2O+X9K//rSiglg4t2BUGSo3RLWgN5t3DF"
+            + "q92u5Xt1sw33jbQIE6zIMPOcNn9TYBhNHRx03TvyvxGINKAPjGI0ZQ9om5ZtlJTDc3C54WCniTAUTnYiTjDB9J68RxJ5P35XPbs6"
+            + "uVVhCPflDqO00RSJUbO80mzL/gPwI22p0ENMzYUeaSoev+8/3PHpxQmeHNzIWqebq9qFxnr7dJN7MeZklpl5n1SR/oGriKbaDsvZ"
+            + "RXjx4UmgpzKT993U1SckITQFiMb9xp3V0pFmhjjagOz+BjAJ9irpbBgOEssPLUM14rs9RZ9jeCWfx83WcgRG/9ErYnfbS5xFx0y8"
+            + "6y9PIylsR/FyF/3GJ4hN8yYJNaT3IqVk14Pa1WKXxTB4NwNtL6BMrZ/isJgheqQkHGiTGMGJ00vmyrMeD43TdmZauOStpm5o8zg3"
+            + "+CwHzU8pobVLxbARrJvzYaCIiojQ9c9bflCePp+ssq7ebq1u1knYvvEjxl/L/Sur0qK0pT9XYdJQawzhzJwKWyITEN4OOeyWDQ9P"
+            + "UJE0YUkVrwBp675dafqZyi2L/yYhb/RtZp3lJpwmLZQp81K0ND5uILELymuXMLIVCBi6hUheCl/jhPcY4X70c6u00/O+uAGLHRY3"
+            + "1AedAOO/dpwNSPCbRqed2BnDnI1LYSW/x2l8KNufg8xd42GTu0TJyJEJfhgIyckZrbdpRpYWJq/Rz8vDqUvyFhANEYGJDMq0ot3P"
+            + "6Gg5o5Y6AKaaWIoz+Bn38DdZxcjHb11q/caUQqO6URj3F5GjiT3WhODkzBjDNa0wJo+b5klYq27lFKANAWQpxhbGsenmty0qvOvR"
+            + "I3dp8w0Xxal2C3yJzeRYvLXVLKb00RLBlrSEoNBrLd0j8WoLKXcuSunEiRungJJerMrAdLbP79rqr19C17N+ng987rj77qKKat33"
+            + "aNoeu6PoQEYQcoXacpvY5MuJ/jlB74KOq4AYdCE+fKVXMLl/9oy2NDSxHSF893A/SiZ8huMiKQfc+eEKcez7ac2h48FErKp2apat"
+            + "aQgGS6zVbmMcacIWp/9eGzPQQ9ikReAhl9Qflxy7xHV59hS6U3xA12VEIFV8eKbd7a7o/f4uczVu/730i6MqEAiD2Z/B/aUn24eT"
+            + "Q8dMjWZCd/hLlBo8Zw/hfAX/VGs3z/Mrq5RvsgVtM5oXmeeNSxAuog+U6RvHZdxUM9D7u08/FLu89fgIcJwKp+uDxMfyR4u/+M/F"
+            + "NutSKxI9zQrDmzoO3mXCLrOqqxQTeVVSxuu701FRZ87s+MHFUrjAI5QUY27Bjq9dZV/iEJYajDOEbxyD0L4iCu/7tZPVwIc0GUNf"
+            + "IJCzcYYpH0oYgOofH3z00uk9ghThqUE57A+U8G1yd2NRNHZHmjSQLPubovuN3iuGPwpJih2rmj3uen56bQ77Xm2z+2Qgz5auGFkp"
+            + "7Y7yVHIJBHeyY6MYDIOSp8PY6hxPiqz1kspcYtpLT1PYVhtuyevzVUJYL0+2C8XIvmIb46Xf5PeCk6KzU8NKAxq0oxn442KlWE0b"
+            + "asczfzNsiyQpilsqISPa2/61l/gZfnC4KnKVk4Tp6Brl6GBztlOxFbeYzWnpZ3h8zrLxxeUaiSayIlH/Kf4Gq0GCW0g2PVFfpvut"
+            + "TQsa9MbdjfkwT41+ddx+ZQ0YkYIRQ4SiibrCX5D4M6+b+PxzDvrnLl4+3gEayL6eXr+i28xBJNTphnfUimbJUkXKSa96AM3ZQNQy"
+            + "oFUF4uqJE/czysuG/x+pg4QiaGONzoZ2FzfA4VkaEov7K389FQzYslMzM+iray5gf7vlCOn+aNnCBXV4VsINSx0G751zJYls8N8O"
+            + "AImGAAv+dGsjoPFAGFIQH2Y7xIHvQGKNfbSxuCf1oPr4PXwFPaw4sY7duchM1xYLTPzwxCKCLwcWbFS7gV3wSDVNffLiRH0mN/OI"
+            + "oWJN8F7iWyBEbLQshGSt2YW3TeX2lri97YFaMu3ECpxMG5Z5BLiYAFvMBspKMXvKbx9bwY/BD3b/pSNl8lD+DNaQZ5xVQKQm2D5r"
+            + "EhKLwzBrKssg5K2hg0R8qJzEwH81aVZl1I8I43YZA8OWTnHOtbQYafY8DZm1wsqKrTlwflIVKJKGhOI7J+THAg4FjdTFsLL6Q6aw"
+            + "XF0KxWNWVJBtGUbHRi1ONALVjd5mKeufybJHV4rVX6LfcInvr8fp0LojgHLNiuUy8YpvveezL9z85Dzt4UwSYwSj2YIyxbqvuJCX"
+            + "3t7e0on9LwNr3Ju2r3kTZtsogAXsKA915k1JQWoPAjY76FbgB0sLcm8s/NMpejJ+EgId0eQo78mLLdXfIGNPGANEmBD8u7IMEdsS"
+            + "ceFbVIhi9CRS/M9q6fEf4HCK4/gY6/1dzKSGHEFAt5uUMFb3BrglupsYPNgo3DXN0pd9RmEpHwPpW1b6vCMuQ+2W0XCqmN1zqE5O"
+            + "zhhNQ0zk2NMJhzWgwj7s/ECHsVdMgd1ZeeIJVzktcwwC1GUAUNAvwekZ8D1foXJP7OAFyWHSbSDgvahVk9ofJBPGHjJDUFM8QWeb"
+            + "nWEIToHwejZickC79EfP95nniF+VcV+ypwkSjQOdEbPxtMRO2jRWk4G71Zj0eJsORS22XY5Pkj5wpuoHKpwp91G8X23wnImqSdz1"
+            + "xWvpgCyQiiMzJZEyQzn86tFMfdvnZKhPThatfRTMh28fmsUsDOxAm99z5NR9hUO0Y/9We/woha+7pLBemSxP62otQNq6sl4GG/k9"
+            + "hFdghr5K4SSIiPPPwD1AbnJRcx/w2VQRJKQlGIWeJdUfe9ZHbFy1RRWKmKAq8ud6tsSs4uzhN4DCtsOKIAJMrFO8um228WuiNFHT"
+            + "hK3zDr2+FfjK9QzBsZT5fpWl99ggaHuXP7bIy8d+BuShMCEYK5O+4/+MASwSaN4Z8nEFvGkvWZlactL0EuEh45MnmV3eKNXGcdup"
+            + "d9LddSbrvQaSJC/3LJB+FW6D2nhsvDavujkFNcp+Xvm1ulRfzUyVBp00hRvfhBTSGO5t8XO7KxH0h8uNdVZFt1uEM2gN8bfdv3w8"
+            + "qjQLLrpMWAoY3lT/n895YjlP2kzTGVCggjlbJc1LahZkkuUnffM0wY6Wc5PficEPpIDYlVoyPll5d5YKZXhqlU4410dS05j9HL9v"
+            + "TiOU2oGnbW7rUsMlnGvbQX/ie9O48/fMlRlAtZh6VKchAXEV1or6Xp+koa4hnh223KDJaCWuWuXwrGPI5ipMWRvaZldqR3Ssd5WJ"
+            + "bj9s9gCl1hVj2tIs9dUy2V5TJJsago8kcGUW7jWPE2YXTt7EHgyB325S1/X6+en4kzmwhE7FUWR02rkTiX9w6uvFyq/9KO5y+Ftt"
+            + "KqFxJcpTo0GNMjE8B3X4R6ZiXJcYP2NyoZH0/wJm1Ppl0kJT9IJtMFw9CbSOoAGnqBVLXmj3150oFAPOBWRB8oKF2Bf9kCSz2kQo"
+            + "WTPst2JfIPWaY6i/GtaKz4GWJRjP6RA/RRP9jfno9b5yALHpC1vzHHhEqZENjPpXYeyujwCt+XmiEfFdmp5YmvaJhh++CcJiU4o2"
+            + "IxT7nmdsEaucVoqM6ZR+xXYcAEhUz9Bz5sXsJ9gn0qai4KdXBpnYFVEUSx2bWu2i5KRh4fJ3dn95D/yph7MdFLeVyM2A6dLGI7Fj"
+            + "8lE8nDi5UZWfPxK4221+p527gMsIS2qfvUER9qeQvJqsNbIkg7RO2usVqqVjdkeSdQvIuxx82qkJuJVpI4nKafgrCDcmfzkaSNm8"
+            + "jgm581HPD2XUs9GMHnYmIIhUuGIi42+tvnnCEl5IAsQT/FRZ9q5QC3vmv46Ietf/SJNiVZC5AJAP61S/zOsL+sPUpEGJUlVD1Byf"
+            + "JXQKlscX8vHCD9mKbh5hJi/U8K3+UVveJthfX/mglhmm89W2z17MFvfLqgQ9YsIAFPCJ1YOibSvWLialtBHQP5moJ6+dQkUi51Ez"
+            + "7FjpzZ0it1RHWDhF0PFDY/ew1PtYIMDkAX4ZF1e7DJx/7U7GAIz9SiEAbhJj7SEI4ed6xTaL/XgXYpmbThMx9Xav3CmY1Bz5OEAX"
+            + "euljZ8s0cjT5lts2NTdt2AiHxxriJw5aFEelRriXSuz2eKZg3kxwKQazZYg4TPQkDCsZ2SC2skYCYmJFiPaJe5+8IClIp7bMOzo0"
+            + "DaC6+oZCL2OlXthLnbGnf2zyAoC7q4AAW1x4ohFsGcjm/ll6RIFS68L/xgTyzOIh9NiaSG+usk+2KpJ5rOrgSMHwk8Ps/7aefxn8"
+            + "XZMqsF4o8jgQ5fV+a5kwJNPXHP+UwyOAdOtJkAnTRLHbs+FjZxA72xCUz0CPAJO9WLhGbvk8VShabyCe4ZnTJqmjEibZwxN02pAf"
+            + "yrGJkUjtPBYDXd7+7MW5oqm9wKa/ZpxxR2T2w5L8Q1mMLuQ1YPkr0vZjxsUm8LyHURgrl0oOQdi9of72UdziPPXsdrCfuclUQdSM"
+            + "CbHIrMM6Th+I4uDe7e4CADOyhBoHYtzhzyzyGyxeYYB4yZt+VGleK8fXoP/O0uoOVPwBhHtCcfWXlc/NRXWoaE2gmXbRWC7uX2ah"
+            + "FW1SqCQBs3YnjJeQa0EMGRXgj+ibN94+EGIORn8miXS0YxctuQFqZD/wnhr7twOqTkYKx2Af8ok76lU3s8DhST2m8eLGX0ADh6xT"
+            + "76SDY3AWf3YJOGfx2Gd04pkO9nBrf8xL5pvON2iqs+fbyngk5DrlUpoFl0YGI9x2ETItTw4Nwh0igDhN0qR/yCWjm3S5piPfbv1G"
+            + "dW7ZA1sZH+WqY7AniJfEgFCsxmsn5XSTtlyvX6eAgd35eAasdU7rL4oIU2yGy3mbNyhcDjv6kSenIVZTs7m4+luKuL88xXHozmBQ"
+            + "PA0PBR8k616HjnyWrrpP5SJwSEBJcY9/AVDxvf4ltIyQAntuAAln/8uoWwDBp6y4z39fF10vI3yYWoqEXypHuxD2v8lKNd5YAKaO"
+            + "pNvpB/TOTajhpM4rE1FGP3cBnAW4z9F0uw2E77RVTbDeT/Ym8F6PYAfzCzzL48lEq3YKXliYo3hV9tvylqD7YVwz+tFFA0Rs5Mv4"
+            + "XdRiqfX0PZbvWCz54so7Bs7SN9fPmaDZXHtGDYYPYNE1j6dlYGC4bi0KawwWkXFFwxes9lp+vLlkYg+0ccUf1T+yvZ8YdaS1Xr6a"
+            + "Vsjab5oPgdmm/ysvaVSwod2NSg+4jzjLiqne9tlKNXRzh1kE9zbeku20t/C5gLqcte78wlcSZsi1gkzPj20h90OnSd27eh+GRU6M"
+            + "piLRKSSGaMgAkn+ere0YbakPbT6XtHi97pESn0CDcrmWmJM14vrFmRXucFGhc5Rhn0geG6Xyx0EscJGZIKW+QG6sf3QE1KP37duD"
+            + "2+Qj+2/LpzVnbyAJeOaHvvbSHkF65wWszD6DUrHBCCIv3svGYILCpZjXye3eA43X9cM2uss6nVTw4eZ/AplzB/81QJfe+5v8UsvE"
+            + "7OM92KOfxITwv5E34XechakeKATzW3q3PlV4MDM2aecsO2vAerAzCx1/Y13884JVO1R5zU+HqGqYlalRW+Cxr0dNOtGjnCDMDVXC"
+            + "Q5FSYnDrI+fBUVzguWRupuz7iLRBVCJ0+jgWk0JlWlxsxuEccdppU2E+4fZCTr2faBQHaJPwee0v3j0NLVZurMPFAH9TPLawCryF"
+            + "avFn6M8weGuMQZBKUHlq+hNd9amlmK0ArCOPImg6k7SQXogbTbE2Nn1oRfJWu6iQGuWBtj8FapnXLpZebMj/Itbr/EGNZ2L20PWC"
+            + "OiYvYU4SEdVAbb+tTQK7sZl0IQdhtDJs3Zu1G1SB1RaMpLGq7D5sfjx0lCEkcwUVEEOtS0Ag5fYychRsOHnXVP9B+FmqwCHJfw3C"
+            + "yUKFMkG/8Bh5kVCeNaWYkBR7iqAqKPRT8/cymGyZeFeixcWPVgc7f1o7P4TreFxVnQ+6tPFzA7zaSYLy+3N7SY7w04Cu/iPiG62c"
+            + "m5u5cLL/FqIkROw/NBwQzSTuJsalRFuroGjQXjnBhBxDTSnje9Jn4bAewPd/nmPhBq5O6H7FZU37A5hraQcwgW3CdX3DmEjStlPU"
+            + "vOtF2HSN4BzRb++O1NxNLkJbITn8ey1g6FKNX+ZDEn8NPUaHSux4vQc5q2Xpow0lP2H9QmI4mailLZfCe8Fe0ccm8SH4KBt9AT51"
+            + "6kbls0kdnby5C+PvUYJGE3jhnJpFD/jkgmRXookij5Nq2uqxU8Qjlb8VKIdGObvqByD3K6wXeWaQGOQdPNHbLQpbktQL3aDuuCQv"
+            + "0qVtSuhSmviN4LKMVeYuH/2Qspu6XltrUcvItasJiC1xRfhlahxMjufbiFHATRdwcQrU/i1H4lQAC8ZsQFcDg1A4kKsDK3TBKjfF"
+            + "APN6JtVyhf+irN5Wzh8jXFuEYsN/aRWUMPziNNKE3oJsFgZZb3VAgbjZVoTv6LGoD6qcpjzfopwYR4DaOWmTrotPNdbZLl6uGIxu"
+            + "GlPG3Tbc22IoxwL3fdKyCf782W+EatsHWtv2wqp4zLS9HSzsZ75D+sxAhU6X9XpBqvJDQPOdycyNGXgPL3gk0uVFT/v8EdxJC30m"
+            + "rixtbZQApl9vhCtd0hPbhkA6AWqPln0Ztrk9dQR/dBW6sP/4dUSQ2rYn3XrP9uZSyOojR6kqnIE65sEAOdvGAfyjU5gQUp2L0cN6"
+            + "/FdoV5ERvhFHjlpwQUYiIdsjSZKERSfzNqcDufaFKmG6cKGgoHqP7ibO4QFCWedijKx714UZ+CZ7qMRRM1ljh0LaCPETIGqxwfYD"
+            + "tEb7tzJOxJ+D5CjHv6uhd11bnqWhMa0AQgjv+5OcEn0IJJ6sFBJvOa3kJ1vn0g8O12ikBj0DF34dBevxL0XViLzRHWhSMC8bYXfU"
+            + "xK+SrWIXuIYlnzDPLHgLROY/UdRIC3PRllErB/vfkflWbjEJIhiA3x9abQi68+rEMbj9XMLjSAmYpz/Tn7YKf5+lxNmJrlMtTFUr"
+            + "5BeZw1Qk6TI092d5RHO75H4HCaMb6AyjD7dREYhYWe/+BcvWmCPuRMSEjy2seeNONiLCBU7olc7lM3w6iDmdWMbTQnkyxUtXaiQ5"
+            + "FZEwP2wbyyKIgi4X8yBFLiU2W5M3ZuAUZoqX/+4o0MCjUnagYdUNdtqFnwIAHOHSBOiSX2rDSVHk+/+TQKHINOot0iLj3JT/i/K9"
+            + "UKplvrG72W39kCrex46Nepen6/ZvCM2RJOGW+9DYqC4CIpeI36wOCPvqkR/96HM6rONuNiCKJiohpCh8O5SukbTnnUWJXN6lawzT"
+            + "kRhsIo2PV58auQKdVYAyZdEiwnABCtyj2NT0LdXl5RF2GOov9KeoxCZj7N+MwuBAuuEPZdXJF4AweGWWLTAUb+TjJigB1EJT2DUU"
+            + "wSA8pz+/WwFrPt8nMf5v/uuY+eKnGFNr/1v/FTY+2Cecx+TGZ0tf+WlFCoEwSL6pzI3LOjOIxVoTRFdvL3UKES3QpqZSNhDStdeR"
+            + "d7QsT6s+PmkEzpTm+F4hxk8z2HpDh1vdvfsUiAm8NB42Ru/7USdbCrx2u6CwRhzJC1rCzHEAYDSuFyL091PbFcyplQJr9xcpw//0"
+            + "fouGsMMe1EwMuRB1Iln8HyzH+aRdaqFy7T6VjDEi+hKGORAgN4EwsZEZJP/y+eCwnQRTk0wFpDFnCiXqZOza5kt1uJetMEV+GMG9"
+            + "ZO27KJvwmHIt+YEElj9+gZwCU0xoTo9KWkhpqbp4oFkeKWJiJFHbkLrk8bABd/ouvv4QhhxaPb3UDc8LViQo/T0JvNgZJufYgwcf"
+            + "Yv3zL6MxMsND2g1wVV7XRNanermSbCF6Ise2dvjCJ5AWYTgM4rPDrI2xIs/y/hS1KQiM9hpLiCBP6uW0U8pK9TM5Kta51WAmP4eE"
+            + "1Qqd79gL4+cj59JJDfLIKNbFDvGdJrPSYt/+gFsyZUvUbTwBxiDtJNw91jmgs0Hvc93//5T4Sq4gh7KXl+JlEeRCR7C0v6ft11L4"
+            + "reCBm9QJT+I2cbn7wtEKdMGTgkSVYKb0bD/qOS+cw0RwEXtmaF8K4YBw4PiUarOCrSjT2pZKmXh8KCUynev9Ak2d+mq/O2GYqH80"
+            + "fcbW1vCvOyJiMhmfP7PTQ9jCyQFihdYMYbl+bP3ra+x7qONFdtDQnTm7kvUICNKH26xxQiTf2uCkQnVrh0ZaTR/9tlXDipDq63Fc"
+            + "M6PMP1yI0kF8eOMw6wyGwZJAJgDPX3SikOKEUbbo8vOCmhJLLlCm+t0A52vTHWVQqKr/vN1Q71gnAyp82tkoXmAOWaC3HiRwD7lA"
+            + "f2b4O9EpplpgP5MmQkvKAY0V2TjG3Lh28XLr+Pr3gZ1OTRbu/XF6rbzE6KdRHvNXHtWXcxQyNRVO6zAJKGLGe9MCcXJ6p2LlyILj"
+            + "8QbVhMh6zohryDg8b0bxCh4VKUZ541OW8whdT0p46lkdpPITtJaO6TXdKyHDZ6B8jzaQ6rcVrngY+0WEusGGQnuxtVW1vv9YfgC+"
+            + "gODNCtu4S3E0MMVly+na7d3lAf+npl4i9f6FArXt01/Oq3DxocPqL/YKkuGpu0KJS0HPHgx+xl5ThEvG7tRsna5qnqxn0PlLjOR6"
+            + "cwYaSrS9POJ1SuW22ZgehuHkD2jbTeXaGGnnQY3hB7TEMvjhRy4XfJnhJsdktfxkvXwsiLFZI4Blm9xsHIxWuvEAtCGpIoUBVnL5"
+            + "1e9nQvkkdmdF5dHmr7gg3EB+pJ5TEmjJOv7/gafUt9LhMSluMpSSKJx8UqdUH5C6phvtuyMqQrD9Mfw4yFQn7h578mnDRFDJ6lf2"
+            + "pl2PTbjWcAp8aL1hXm2MCf0KuVb0e6Q1Y0PqvYd0FAPsk1fNtpjvU7Jm4rO9UW4J9zV1sZ/WpcgGZM+0//6ngIzgW8l+mvcEU//4"
+            + "mcE2VYkUv9EB1qWwTm1POVAZkcvmxBbEE1ug/WkxuGwCdElJttD630LOgkM4L4Hmuk3a36QjvweA/wHIE/IomAYXFcjzuCRtW4h4"
+            + "0nO0EjFzTq1jWu6buj7xz48XGA0OJA99OlUJttMcuZZG6EEfMWdBkqXACh9/J0Xk3sbfouuFLTPOHe/ErDUmpJC6fFDVfVLztqMV"
+            + "454YiAeqzMw27V4wMgMtfOjnLTJs83GB83chmiXsNEnAem+IjHpUYVssGhSn5US1/2wXonk2zOUuW2wFyHLi1BjUiF+CN9wOadJm"
+            + "lTl3zmY+TIy6GyOlwY+ycTxGosMYZwNiKJjp82huHCdMpnmMu6lyfJUnFuqHr5iDgoVKLyv3ChQiRy4VSO/oUPapo43j7FtrbAIr"
+            + "UADSizQ8XsEY/kFFP9IxgOexBh/uOVvnrrMctFVoScMgkEM6cErMCTVy0jsRwnc7DapiLQ2Y80GrfDLumQV8jqn72zAoEAJLLhNy"
+            + "ra/EFMpcGRCUGq69COlEULzRbpJGRS+gpG2hiO3IDbSo+Pd9DmEsUYkS+7XEAX6kCldeQVntTVlMsBoCUxSv9AfiYFfCa9VtDx/p"
+            + "EemDXXHyzu5QbXbsvbf45sR4N2rZCd0rajLLSxbGnpBLO4EtKIeKFuSHjCnxjC53yj/8jLaDlnIhJDU6roN7XGU3rNCxT9XLhCo8"
+            + "yN1N0irVn71KktnAAiujVlzJvlT1VQR4tdtz6CV+FoZ+tx13rJ21zbsLAhQ+6EF/Vb2DYBNZH8kANFeadiImv/lOARKHzin5nw+P"
+            + "5aw9WtXc7XI/Ptoi7GkJjjLdVAz1FnNu1waJJ55DYqek/nh1b1VGDnYn8Y5Bnu0/njbgdtk7HgmoTXmEYsJ8tzed1fEBFfmsGr/s"
+            + "ihbtjj211W/dE7UJ8KiLGW1D9ZqJ6s7skaofXOo5YoufJiD//tHW+owmVYyweRomekKSOA1dCcQaGMeaamLWGN0zWxJeQ5O6a1b0"
+            + "WmJx/B68N03gxxFHT6VDjKgkNUGHyNEzn6TH5wgGYCZGfDQCdwBHK7pmah9d4+JZPwi+AabDdlITait6H1uMhSwRjQiv3MdQX3gA"
+            + "RGLus8CZZxDIaI9Y4anmSSPrNzvixW5nVgTbZd/X3ptnBG03WqLyNCfwEaPNOpeCMDRdT2yS5SL7hnhQsN4m+Yq1PlTyvbWm/uRc"
+            + "3C4yEbUlaEX3FCcYEfoMDi6908y4B71lSurD9rjfaLY2Y/FoT6rdxrUYQk0KLZbOtI+TQ0fSgh9oDaRF1RnjALlALA04fjNnM56M"
+            + "mg0dZ/G6eZqsVDb5xKC2E4w5B+BX4lMC/b4SmbEHgwKjfq9Ssghg69FgKPYmSsURMx0PZPAMqKuecYLD8PHcMEqMuwPD5JgQ9T1q"
+            + "A22oZIOrJGK8/b8jd0OqN9iTueE7p7M5uBGj/MMvhRpRVPHIB2m0fVUy0jhcswmKO/ECvC+veu1f7eLMxfdt1QoGYav9QxHyKxHQ"
+            + "12y6jlUnzxvSDnY6SbVWEXq2584miZBrFDl5S+rJbRrLkojFuNobrFMMItqcOKpWIhTx7KBFOBIKzqCzdsghajUEWH8mcevgpa8z"
+            + "3n8UphejNzNZYLEqlhV22T+xxTpvSvNd/+Sjt5sTYJ+9J4UvYLEno1cyb9i9IiEq0VGPIn5gXEDOyGAqe+2cCLQqHlnyOIFxluq6"
+            + "bmOK8uu7w8zV0cy9QNSvDemt6PZG636F2KIQLcj0GxV9dzGOOB5mGrf+2k3tN3BPpPm4EMgal7P9i4AK+Of01ZB0ww96sYxVgclZ"
+            + "Mrs3x3kZftR1OndYET19b1k1hZyJemlM2pEndhWfk5cb7jz12OaNHulGVv/0D0r3wJbwemHe9gtUSMgV0s7zH1KalF7njFBwHAzT"
+            + "lvRHHABUuN2HVpUEuPGtbiYhTBMT12rkanSFsR62VdO+oY9LaPHJc8wAO4Y7ihae1rRDjyuErbs0oP64R+C3K9CG48xxiHiePKdw"
+            + "VEwkcDGU1NvdUWOtnshQ/UR8C3u8y08BlPRN+AtkHpav10z2t9YClPgXoCzwenRjcv2mMdOJuyr+2py/KwBHZkVqOwbpoKgyAUEm"
+            + "bOuk7ZEQ27RCzRwZtN8D2fuLQp3BtwveWKza0sWnOVL0DkbxXeS4KWnBmaBy6bVSYZ3+XzVqyZ0r+fn08BqnvmJJfw48aMR13ymI"
+            + "l/a5tswZ7C0AU+dAI+ApxzOGMZXbWgCVsrogglwb3L6B+tZM7bVHwLsxOmJIgdTk7wkIZgKb96CkvYcBYq77b66dexrfXrxUdD5B"
+            + "OQcWSHlAdcmrYTDicjvC4ZdpZeCmplE4aToJBwmrFQr5csmYc+B8EAc2V83W6Mpwpebk0C3cPxVjrHdH72L7IKimhRDeFsb/7nmk"
+            + "gqi4P89PnMsU8M9w1o4IjHkEzTnjdGlDLzTWl8bd7YwutiAzVoDQeZHEAbn3E23U3ZcltsmWMwND2472SmF+gk0EaSZNQjRqVVlC"
+            + "HaBsBl3GTlHyXyCuplnXRS8sUpy36TkzCNsphfQxr2cbipdiGt1N8xpMUuxA/uRX8zSgHNSwTk9tnHpAiX82HHcDHaM9j1U7TFL+"
+            + "o+zJBfJzvBITJztRq0NwjF9mznO0CEQ1aHubhbw/Fj4HlcML5u6qqbfZkeFP9WXblSv+F8fnmqKXdGLMQEudKt42nJ5JEci5xJkS"
+            + "uUwxuU8R//1pgGiK+5ZKDDJljxrjZappAMNzDU0GIMM2jI5Gyd7vQcpMygTl47ApQ/3oyWQ4Fz+lZ0HGaqUPpERvloYmQWlAGe+H"
+            + "73u3bGB+06hg7YgTZNndhoQcbvjESbXTtcQSgtRE47UaHZqWohtfS8o7CaWhw+hfDz6a/z4imKcm/qPJgNtCvT6rVLFN64KiHPtU"
+            + "MtXxk0XAyn/TNUTDWfsQ4KN4gJqXhpi6HCGt6x8p5rDxEXKflLeDrl66Gxjv2ZwUvFDnCuNolXGWmeWvzBLI+Sm31FLNokJX9o9u"
+            + "e+G03jpCQLw66WQjngd6p/IewnF95SZ469j1/WPwSGTPM4BKkBbAtZz0Yq2XzCTmzvmJ0aqI6Z7Wp1sYjzjZTURp37NOgUXCWYJa"
+            + "Px0HZrtZKC9jJaLqTXWzRvaEyFnc6pUVsVwneZdn5TViM1U6EH32Ufy/TAkcmz0dpjrg5YhOzPUHTyPiSSFOuF6puNej+rE7kxoO"
+            + "t1ck5sHAMLSXqeK8TLLzQy72buW3k6uXq23uHtmBbQ6HyNXNSA/13Eu1LO/+0pgtRoafPsbyXrCzwkHYnDVB6oqv6hxVgKjDD5sd"
+            + "uTuUnNKKiZRSof3ilwhSyVQff6bJM7DBV2DcbdO0OFe5GUfJ21G9GZyjXTyGFxlAtJYxHFwuSqaMji6LtZmSKGh329Ld31P8pR5z"
+            + "ZQXsra2XfN9phOyG0o8OabiIc7kHUQyFGBgqbnWzRnvt6/EPpQSYxKXg3ASw8gVGbUZHxxxLYmWed8z9e04npypePsHhx/KPq2TG"
+            + "3tIUGT6nxR114XSu8/bkPgdD1MGu+D2A/1N9f1BYISAE04wqkIPcBWJ2MdSu6deLO8HnwPh/7AZLFV+EC3uHaR4lUXzhzr3CQI+i"
+            + "hDLi9opyeIav/oIKzWCevOGFE7Pcrug3yrmVtX8AFYiHGaxWLALN8uwYUs8VB5URkEs62ywmMMrmESM+XWQBtkV4WTaEgV/88AWF"
+            + "28NZJIGTiRyYGzKJLUnS3+1Bos/VK4g/cXOHggVRjo2qTQTQ7i+G2tFA841Aq3IoGh79X9SQ/ZF7S1zRbLt0OwPHxCvVYYE8UZ01"
+            + "Afi2dTf0K8BlTk1swyVwpzrb7nplZIu3bmZWSLNarc3YjYWlYcuEhLAWxwZ1aDgLqgkpRQsas/Y2yE5QnnkQaaiwEAlPq/7aYTml"
+            + "Sgw53s+OHGgkRiDJc1KTqZKg2o8GGQo9knYr1qONX1shJsh4nKqar4EqqI14EN2pw1QGCh8OM3Q/a7Wt9QEVknEcqLo0mam7XoDY"
+            + "OvP8GGftqWfZNkHtQqQ8JgM3KeJsYEzCFwU3JkdVjsKOsybl+ying8Pygfw3vzA/Fq6D1D1JFt7NGuiAr2lsDXiJKxwwqSNlvFK6"
+            + "5HfXNt/2C/CWat7u5Vq/5s9KG2boSSTVLrr0QpLmHEEdDI7BWbUib25hMYhgxKLMhSN83odQ80wpmWavOULydGMxA+Y1LHWWO2DR"
+            + "s39bN2g7ykKgW3R5QenuC3T0csZlAxacHjZoJ8XsSyWVjwenE+S2ShSToLNbAzCho7o0yrdtEE/hZkyQmfs4QBagjF6zqaZDMbRf"
+            + "igjwz1w7ksdhlfeQ163F8LcIbpUhmv4A5diMf9SNV8wV8J5tX48SOpQXdruXxFIkDuH1/5E+F14TktF03t8Y2k2FDv4WAZkSPuIL"
+            + "JXPbtFOPqAa3mLRtoDt8hq9iZqH0dyN0HynrfVbENDBEKcTlyJVPUPlQdWxb7XM67bNGcjGuBjq4617QhjBdFWuh3EEP5p2yc5f/"
+            + "tGVZT6kttp5BLjpwVESpvZF29yZ7IdtFtN0WwOAVCj+xI6+2y7YfSR8jBo4WWwReoGvsH9jU92MXysidKyus8HVyyDA2fzFsu82x"
+            + "F7hvqYAWgIMSrlL2GH1DYiuDFH1zUgtLpJO/Zl0Gxnt5Y9N/QPbqVdcPGrnTtV4XHqgv7t85sa67hhGVtWYHY6+yQ5yFHYBdE7iW"
+            + "DBV/x805BEZwvuwDsPXUzNJriLKWXejtWoufSGMaRfrlkGkatSPWoww7MQARQZTejwPLt9ybNaeSaMKBarIrovZE1p0IQaBGsPo5"
+            + "xjDVoAhFFvfWzn5t9Ri36oQNkoxjnnwsAclSnAtjrtCRI/k9p0YZ9YE/s55dxO9K4VkuLG8emWEd2KKnXR90e1JprrhHohcM/EZc"
+            + "g5oOvX6u9r6ay0oQ+ldG/zNyL4wHpR2FVUMJ2lqsvWtqB/F3NjjyVC4varYVzTXGIw5mdlbSxwQZgBwgty4oEGT0eSpp8l/6wUNt"
+            + "bcJLUI2AFxRjXOdAotKJWokvg9kK+1nPwlih1l3owAmeDrP/WR3jkQrJoImuSi6M2EOkbJI6l6wxpzUTtrGFcGwIyOcczS4gq6eO"
+            + "gt8ap0wRchJD3T7vxgbQpx4WKL79K/LGEvL8FjPUSFX6GEZDt/uboptwI0DnNCFswqtMsPGnF7WI04GdICBlLhXGHfrdFqV9KE4J"
+            + "t2HJsnnosnZyZ1ZA41rD8XBplHHwzefLaJ2kY6Bou1dLcC6rik84G7JhYL0ncteI5MI0m7tFezA9ML2QBf0UGsNLhXR1Z1xnPFt9"
+            + "7JocCwDHHwZAyNJ9MnK8sXQDHygkq01wF79bKmC4IL+6MKVPDiIArl/+qSxEoUnpJDzAl/OpeDji9MR9p66q3VvcBwDDzo/34Ac4"
+            + "FLpqMVIdjJKXUkV+iqv8q/JYJe1o6byUwBLZ5ShXyBE0WFfdJw9oywEQF9PGnOMGiB2vtS5sTUd+ZHrX8Znl73edYLfv5Ekgfe/g"
+            + "Ojo7Qt+d6eo0NehBordsswcQkuJnLxW0QACcf/bR2PMgUr8Tn7HVe5FLMoVoWgTVSCSKEUissfwlZOKLH2mYJH9BMlzm72o8ROgC"
+            + "ST5VBZMR8OOWwX2K7KM1ZF4QrpL6H0/UPgUcT7VL0ommKIpCU2S0Rz3YWfwJMn/BYu8u2MnNFz7BfGG9CMXT/1nI+B0Cx/xxtiJK"
+            + "z0cDPqhoP+10f8GLnECgFDC8Bp9yKYdBBL1yCRk9KqyJz8O5fXUqo11Yhas7zp8y+GMSl84GuQSeIcfnSI8kLFv2OyT11pWXlEyt"
+            + "16PhOH6dEgAqRn7l69Gb9f+iDS/b6UudrEv6Av8PIUXygns16h7ZE6HHwG7GnCR/GP+UxcjAxeKu7rd8Idde7JSjPJB1i7sfVvWT"
+            + "7DOJcNgCs2wZeJsw8C29gx/FiFg5+Q/T47Fsz1MbWxpLVa/PShBjRGts/1i4MmdIqO+/+WPkJCwHDb0fbH/A49A5bvTIELz7APxu"
+            + "HVWaeAzfhKCiXTwjkjAso3HuJCbTZLUNbjdknLjCTl2+t9ZxMeb7A++saDjd4Z01yOKfXieJyAC9JdeBW23gN6Udbe1j3LVxgJRv"
+            + "TEm0Tigxnlqe7thSs/KWkuwpkC5aEuqS1Xlv2g99LnEh3PXFQ8qU7kaYWHakIkbHSWfJjW/6vr+fx5yao4HJZXqM60izZPQ7L7i6"
+            + "w35ywWFMTBYZiIPZMO2IpasEFBrb7j2u4KX10MXLrxmqP9Tu0fSPT9JEp8CjttQ0UAzEtMj90/fnlFTchy1P7BCp8MNjcLTZPuLQ"
+            + "vOTxNJuRua4iyml6y+tU0AUFtMJCrS58vx1PXiuScQ3SUOU7uVcHsR5xWl5SDgbCuGxJSFCR4cXFKt3gjuOTLQ3zZR4OcvGAOnhc"
+            + "r9gUn+g55HoEmahrD841H9HSEpNknGYEfDs4LChMegxeDpreoqVfI/12h2npp4/MzPNCyArE2zJAlNxW8Xdrbh3K5N/Gjv3vl778"
+            + "NAKaPgxTx9T8uqnrfTtsykOsOT3Yd16AAUDS82cvGVGUAOoxJeHNXeL4aDIkiyKycM7gWnzekHv0innKTBQQEtfa8kAV05M6YkRB"
+            + "vwtlPRkmQD7A+ozUTtxhonAWv6BCbQvIiST2U1csDQpc0IbWDkuPhmzdN2NhkKF7gYB9xbtcizdk36jAjXNStjPg20LXIiA90nZf"
+            + "iB6um59x7dVdUcO6Ce859L1vu6t9CXTnjlo7KlOo3rr/VKhqI2FHPDkRhq1sXfaqp4XhtiMIyHCJ28UeQrL+c6+vp/7gSu+Lzxwl"
+            + "ZQYLHGzWI4tyJ4xH1alX0fm5W0pqLholCgMduQsoKfGrIvQvhNz4b0pqTwAvMtz0n/6eNhdzU6Ab423m1URXtBz69QQ8h9mOUJTs"
+            + "TPnjMfn4nvdNHbw/uyHi2WO31Z4rbksVCZ0kPZn25eiLSV4ElUBV7c0BY67uSKO+ZU16A02DOVPop5HQ7Sda1JrEmdievLfgnHwc"
+            + "ycnV3txTNXfq3nYPGKH0ItsihUxZWB3WvNc4uoWlLXvext+uA/Dk5dP6yjazchXh0G9t4aPJwD1p2VsVi1R8yE8cQcXt9lkzDDGo"
+            + "1WPzM+6qSAnILNNMwiGsPfod1p91Q0YdzcFwA3M2FL8Xsov+UoymIFvkKau9YYZQTfUwBeApnXPCXA6kAb68wlAHCMrcpI5Z/Anh"
+            + "C6cQQ7/YMUZbJuIHI9x1itUGQjSRTM70DHbK21ucl3TroFUkTarqy3azkq4sfYKX7qYiglU0k2qgeMLQo7AzDXlggAYREVPAZr2C"
+            + "Bqt+whuepRb1baqSBzWU3EX94NYaEILKm83KTygOvISOzEK97sTvT82OCxqMy6/HIeKfGSH3+xhgRd8TBkWzBUSom4mZlfYjrLSW"
+            + "YqvDPW/unKhekFUewhrgy50rR5TrlXjTIYvrq+yeRed3BdMPMDq1wwWldAf+eysYffexaclM4N9oUKce7VAaX0kLPJcf0IwiVkKj"
+            + "LxJutohUNWcosoMxYFJVl9O3rQIp4cQ4/9iDxtl8KJKfxH5QR9arKA4wqOArGkKIAiTKl7GLpBobsFn0sMPE+Wv0h894MHb3N+lC"
+            + "KjZlPIMA6PxxRzhuODv7EKLqqcdP4HVJxFQIrHQO9UzFXjNs0vI258PP879Gz8GV+cFXI4xSDDljiRqjGBrXsw9FMSNX4AdrybfN"
+            + "MLTMlMGwpe60U8HANa5C6gWLiydpPEnzwe2/lvJTxB4eRmDstiwnWCTlCx2jk4GJcl9uhjzamoc9kleyyd+/x6LsWGCwT5OZgrK9"
+            + "8CFkOlhwCMtBkwQ0A7nVoF3XPwJHoI6fmLMkbmgLz4bR9UoSrllVehEWoExsUe1DPaYNyYzsfLqIr88oyMYp2jlPd5E9eMuCgCCD"
+            + "5Tv+XwcYc8Wo/m7w5YYRjiUATGTYcl/pcQGHDR1Nx0Afxj0xfMj9cU56kgwiZV749wRHIdNXyOCLP2e72K1kK60aiL8JGOBai5AC"
+            + "dt0F009YFyVKdYmQu0aZqS1khc2+Uy/bYOT+EQT3UpLIUl3bX0TFRBMCIYlmpXem5jy32IM8Giw5R9INGeeoorEo+y0qreUeNecH"
+            + "Zimxp1Tf/2yA9RqJRzTSLcEE7xIcA0g1MfnNoaeN79lSbflfZXcK5mtZWE+/xjQX898HpTgYsaDfpDQJ1OlKU8D2PI0lMgiOumaA"
+            + "bm9Dxc4A164idtJVhv5F");
 
     private SecureRandom random;
 
@@ -263,7 +491,8 @@ public void initialize() throws InitializationException
         random = new FixedSecureRandom(RANDOM_DATA);
     }
 
-    public void setRandomSource(SecureRandom source) {
+    public void setRandomSource(SecureRandom source)
+    {
         random = source;
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-password/pom.xml b/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-password/pom.xml
index c5ccf0d..0733634 100644
--- a/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-password/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-password/pom.xml
@@ -24,7 +24,7 @@
   <parent>
     <artifactId>xwiki-commons-crypto</artifactId>
     <groupId>org.xwiki.commons</groupId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-crypto-password</artifactId>
   <packaging>jar</packaging>
@@ -32,6 +32,7 @@
   <description>Provides passwords encryption and validation</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.65</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>72</xwiki.pitest.mutationThreshold>
     <!-- Name to display by the Extension Manager -->
     <xwiki.extension.name>Cryptographic Services for Password Encryption</xwiki.extension.name>
   </properties>
diff --git a/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-pkix/pom.xml b/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-pkix/pom.xml
index edc1fb8..2fa04c2 100644
--- a/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-pkix/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-pkix/pom.xml
@@ -24,7 +24,7 @@
   <parent>
     <artifactId>xwiki-commons-crypto</artifactId>
     <groupId>org.xwiki.commons</groupId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-crypto-pkix</artifactId>
   <packaging>jar</packaging>
@@ -32,6 +32,7 @@
   <description>Provides X.509 certificates management</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.76</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>71</xwiki.pitest.mutationThreshold>
     <!-- Name to display by the Extension Manager -->
     <xwiki.extension.name>Cryptographic Services for Authentication</xwiki.extension.name>
     <!-- Working with cryptography requires a lot of classes, relax the coupling requirements -->
diff --git a/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-signer/pom.xml b/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-signer/pom.xml
index 61f8e3c..e412a20 100644
--- a/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-signer/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-signer/pom.xml
@@ -24,7 +24,7 @@
   <parent>
     <artifactId>xwiki-commons-crypto</artifactId>
     <groupId>org.xwiki.commons</groupId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-crypto-signer</artifactId>
   <packaging>jar</packaging>
@@ -32,6 +32,7 @@
   <description>Provides integrity using signature</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.71</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>75</xwiki.pitest.mutationThreshold>
     <!-- Name to display by the Extension Manager -->
     <xwiki.extension.name>Cryptographic Services for Integrity</xwiki.extension.name>
   </properties>
diff --git a/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-store/pom.xml b/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-store/pom.xml
index f912d9c..acbc434 100644
--- a/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-store/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-store/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <artifactId>xwiki-commons-crypto</artifactId>
     <groupId>org.xwiki.commons</groupId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-crypto-store</artifactId>
   <packaging>pom</packaging>
diff --git a/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-store/xwiki-commons-crypto-store-api/pom.xml b/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-store/xwiki-commons-crypto-store-api/pom.xml
index 0813682..5216dfe 100644
--- a/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-store/xwiki-commons-crypto-store-api/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-store/xwiki-commons-crypto-store-api/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <artifactId>xwiki-commons-crypto-store</artifactId>
     <groupId>org.xwiki.commons</groupId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-crypto-store-api</artifactId>
   <packaging>jar</packaging>
diff --git a/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-store/xwiki-commons-crypto-store-filesystem/pom.xml b/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-store/xwiki-commons-crypto-store-filesystem/pom.xml
index 08bb1a2..ed6f8c7 100644
--- a/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-store/xwiki-commons-crypto-store-filesystem/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-crypto/xwiki-commons-crypto-store/xwiki-commons-crypto-store-filesystem/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <artifactId>xwiki-commons-crypto-store</artifactId>
     <groupId>org.xwiki.commons</groupId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-crypto-store-filesystem</artifactId>
   <packaging>jar</packaging>
diff --git a/xwiki-commons-core/xwiki-commons-diff/pom.xml b/xwiki-commons-core/xwiki-commons-diff/pom.xml
index 7ebadea..239ddd1 100644
--- a/xwiki-commons-core/xwiki-commons-diff/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-diff/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-core</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-diff</artifactId>
   <name>XWiki Commons - Diff</name>
diff --git a/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-api/pom.xml b/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-api/pom.xml
index 4adc9cb..8189c6a 100644
--- a/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-api/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-api/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-diff</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-diff-api</artifactId>
   <name>XWiki Commons - Diff API</name>
@@ -33,6 +33,7 @@
   <description>XWiki Commons - Diff API</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.61</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>49</xwiki.pitest.mutationThreshold>
   </properties>
   <dependencies>
     <dependency>
diff --git a/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-api/src/main/java/org/xwiki/diff/internal/DefaultDiffManager.java b/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-api/src/main/java/org/xwiki/diff/internal/DefaultDiffManager.java
index f9bad1f..4373f1a 100644
--- a/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-api/src/main/java/org/xwiki/diff/internal/DefaultDiffManager.java
+++ b/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-api/src/main/java/org/xwiki/diff/internal/DefaultDiffManager.java
@@ -127,6 +127,16 @@
 
             if (patchCurrent.isEmpty()) {
                 mergeResult.setMerged(next);
+            } else if (isFullyModified(commonAncestor, patchCurrent)) {
+                // If current is completely modified compared to the common ancestor we assume any change in next is
+                // a conflict
+                // ... except if the current content is identical to the next one!
+                if (!current.equals(next)) {
+                    Delta<E> deltaNext = nextElement(patchNext);
+                    Delta<E> deltaCurrent = nextElement(patchCurrent);
+                    logConflict(mergeResult, deltaCurrent, deltaNext);
+                }
+                mergeResult.setMerged(fallback(commonAncestor, next, current, configuration));
             } else {
                 merge(mergeResult, commonAncestor, patchNext, patchCurrent, configuration);
             }
@@ -135,8 +145,28 @@
         return mergeResult;
     }
 
+    private <E> List<E> fallback(List<E> commonAncestor, List<E> next, List<E> current,
+            MergeConfiguration<E> configuration)
+    {
+        Version fallbackVersion;
+        if (configuration != null) {
+            fallbackVersion = configuration.getFallbackOnConflict();
+        } else {
+            fallbackVersion = Version.CURRENT;
+        }
+
+        switch (fallbackVersion) {
+            case NEXT:
+                return next;
+            case PREVIOUS:
+                return commonAncestor;
+            default:
+                return current;
+        }
+    }
+
     private <E> int fallback(List<E> commonAncestor, Delta<E> deltaNext, Delta<E> deltaCurrent, List<E> merged,
-        int currentIndex, MergeConfiguration<E> configuration)
+            int currentIndex, MergeConfiguration<E> configuration)
     {
         int newIndex = currentIndex;
 
@@ -357,4 +387,16 @@
     {
         return delta != null && delta.getPrevious().getIndex() == index;
     }
+
+    /**
+     * Check if the content is completely different between the ancestor and the current version
+     *
+     * @param <E> the type of compared elements
+     * @param commonAncestor previous version
+     * @param patchCurrent patch to the current version
+     * @return either or not the user has changed everything
+     */
+    private <E> boolean isFullyModified(List commonAncestor, Patch<E> patchCurrent) {
+        return patchCurrent.size() == 1 && commonAncestor.size() == patchCurrent.get(0).getPrevious().size();
+    }
 }
diff --git a/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-api/src/test/java/org/xwiki/diff/internal/DefaultDiffManagerTest.java b/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-api/src/test/java/org/xwiki/diff/internal/DefaultDiffManagerTest.java
index 3a6a7db..65d0aa7 100644
--- a/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-api/src/test/java/org/xwiki/diff/internal/DefaultDiffManagerTest.java
+++ b/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-api/src/test/java/org/xwiki/diff/internal/DefaultDiffManagerTest.java
@@ -264,28 +264,28 @@ public void testMergeCharList() throws Exception
         Assert.assertEquals(toCharacters("aijb"), result.getMerged());
 
         result =
-            this.mocker.getComponentUnderTest().merge(toCharacters(""), toCharacters("ab"), toCharacters("abc"), null);
+            this.mocker.getComponentUnderTest().merge(toCharacters("d"), toCharacters("ab d"), toCharacters("abc d"), null);
 
         Assert.assertEquals(0, result.getLog().getLogs(LogLevel.ERROR).size());
-        Assert.assertEquals(toCharacters("abc"), result.getMerged());
+        Assert.assertEquals(toCharacters("abc d"), result.getMerged());
 
         result =
-            this.mocker.getComponentUnderTest().merge(toCharacters(""), toCharacters("abc"), toCharacters("ab"), null);
+            this.mocker.getComponentUnderTest().merge(toCharacters("d"), toCharacters("abc d"), toCharacters("ab d"), null);
 
         Assert.assertEquals(0, result.getLog().getLogs(LogLevel.ERROR).size());
-        Assert.assertEquals(toCharacters("abc"), result.getMerged());
+        Assert.assertEquals(toCharacters("abc d"), result.getMerged());
 
         result =
-            this.mocker.getComponentUnderTest().merge(toCharacters(""), toCharacters("bc"), toCharacters("abc"), null);
+            this.mocker.getComponentUnderTest().merge(toCharacters("d"), toCharacters("bcd"), toCharacters("abcd"), null);
 
         Assert.assertEquals(0, result.getLog().getLogs(LogLevel.ERROR).size());
-        Assert.assertEquals(toCharacters("abc"), result.getMerged());
+        Assert.assertEquals(toCharacters("abcd"), result.getMerged());
 
         result =
-            this.mocker.getComponentUnderTest().merge(toCharacters(""), toCharacters("abc"), toCharacters("bc"), null);
+            this.mocker.getComponentUnderTest().merge(toCharacters("d"), toCharacters("abcd"), toCharacters("bcd"), null);
 
         Assert.assertEquals(0, result.getLog().getLogs(LogLevel.ERROR).size());
-        Assert.assertEquals(toCharacters("abc"), result.getMerged());
+        Assert.assertEquals(toCharacters("abcd"), result.getMerged());
 
         // Misc
 
@@ -354,4 +354,24 @@ public void testMergeWithEmptyNew() throws Exception
         Assert.assertEquals(1, result.getLog().getLogs(LogLevel.ERROR).size());
         Assert.assertEquals(toCharacters("b"), result.getMerged());
     }
+
+    @Test
+    public void testMergeWhenUserHasChangedAllContent() throws Exception
+    {
+        MergeResult<String> result;
+
+        // Test 1: All content has changed between previous and current
+        result = mocker.getComponentUnderTest().merge(Arrays.asList("Line 1", "Line 2", "Line 3"),
+                Arrays.asList("Line 1", "Line 2 modified", "Line 3", "Line 4 Added"),
+                Arrays.asList("New content", "That is completely different"), null);
+
+        Assert.assertEquals(Arrays.asList("New content", "That is completely different"), result.getMerged());
+
+        // Test 2: All content has been deleted between previous and current
+        result = mocker.getComponentUnderTest().merge(Arrays.asList("Line 1", "Line 2", "Line 3"),
+                Arrays.asList("Line 1", "Line 2 modified", "Line 3", "Line 4 Added"),
+                Collections.emptyList(), null);
+
+        Assert.assertEquals(Collections.emptyList(), result.getMerged());
+    }
 }
diff --git a/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-display/pom.xml b/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-display/pom.xml
index b56f891..9f6cf64 100644
--- a/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-display/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-display/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-diff</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-diff-display</artifactId>
   <name>XWiki Commons - Diff Display API</name>
@@ -33,6 +33,7 @@
   <description>APIs that help you display diffs.</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.95</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>82</xwiki.pitest.mutationThreshold>
   </properties>
   <dependencies>
     <dependency>
diff --git a/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-script/pom.xml b/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-script/pom.xml
index c41735d..d099163 100644
--- a/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-script/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-script/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-diff</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-diff-script</artifactId>
   <name>XWiki Commons - Diff Script API</name>
diff --git a/xwiki-commons-core/xwiki-commons-environment/pom.xml b/xwiki-commons-core/xwiki-commons-environment/pom.xml
index 24e041a..a729bad 100644
--- a/xwiki-commons-core/xwiki-commons-environment/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-environment/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-core</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-environment</artifactId>
   <name>XWiki Commons - Environment - Parent POM</name>
diff --git a/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-api/pom.xml b/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-api/pom.xml
index 72104da..1da3222 100644
--- a/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-api/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-api/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-environment</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-environment-api</artifactId>
   <name>XWiki Commons - Environment - API</name>
diff --git a/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-common/pom.xml b/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-common/pom.xml
index f2fd391..9eb0c34 100644
--- a/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-common/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-common/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-environment</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-environment-common</artifactId>
   <name>XWiki Commons - Environment - Common</name>
diff --git a/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-servlet/pom.xml b/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-servlet/pom.xml
index bef09db..33b7b3a 100644
--- a/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-servlet/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-servlet/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-environment</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-environment-servlet</artifactId>
   <name>XWiki Commons - Environment - Servlet</name>
@@ -33,6 +33,7 @@
   <description>XWiki Commons - Environment - Servlet</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.65</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>100</xwiki.pitest.mutationThreshold>
   </properties>
   <dependencies>
     <dependency>
diff --git a/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-servlet/src/test/java/org/xwiki/environment/internal/ServletEnvironmentTest.java b/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-servlet/src/test/java/org/xwiki/environment/internal/ServletEnvironmentTest.java
index b89aa62..9cf3225 100644
--- a/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-servlet/src/test/java/org/xwiki/environment/internal/ServletEnvironmentTest.java
+++ b/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-servlet/src/test/java/org/xwiki/environment/internal/ServletEnvironmentTest.java
@@ -25,14 +25,19 @@
 import javax.servlet.ServletContext;
 
 import org.apache.commons.io.FileUtils;
-import org.junit.*;
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.RegisterExtension;
 import org.slf4j.Logger;
 import org.xwiki.component.embed.EmbeddableComponentManager;
 import org.xwiki.component.util.ReflectionUtils;
 import org.xwiki.environment.Environment;
-import org.xwiki.test.AllLogRule;
+import org.xwiki.test.junit5.LogCaptureExtension;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.mockito.Mockito.*;
 
 /**
@@ -49,13 +54,10 @@
 
     private ServletEnvironment environment;
 
-    /**
-     * Capture logs.
-     */
-    @Rule
-    public AllLogRule logRule = new AllLogRule();
+    @RegisterExtension
+    LogCaptureExtension logCapture = new LogCaptureExtension();
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception
     {
         this.servletTmpDir = new File(System.getProperty("java.io.tmpdir"), "ServletEnvironmentTest-tmpDir");
@@ -66,7 +68,7 @@ public void setUp() throws Exception
         this.environment = ecm.getInstance(Environment.class);
     }
 
-    @After
+    @AfterEach
     public void tearDown() throws Exception
     {
         FileUtils.deleteQuietly(this.servletTmpDir);
@@ -75,13 +77,11 @@ public void tearDown() throws Exception
     @Test
     public void getResourceWhenServletContextNotSet()
     {
-        try {
+        Throwable exception = assertThrows(RuntimeException.class, () -> {
             this.environment.getResource("/whatever");
-            fail();
-        } catch (RuntimeException expected) {
-            assertEquals("The Servlet Environment has not been properly initialized "
-                + "(The Servlet Context is not set)", expected.getMessage());
-        }
+        });
+        assertEquals("The Servlet Environment has not been properly initialized (The Servlet Context is not set)",
+            exception.getMessage());
     }
 
     @Test
@@ -120,7 +120,7 @@ public void getResourceWhenMalformedURLException() throws Exception
         this.environment.setServletContext(servletContext);
         assertNull(this.environment.getResource("bad resource"));
         assertEquals("Error getting resource [bad resource] because of invalid path format. Reason: [invalid url]",
-            this.logRule.getMessage(0));
+            logCapture.getMessage(0));
     }
 
     @Test
diff --git a/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-standard/pom.xml b/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-standard/pom.xml
index 6da361a..ffffe83 100644
--- a/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-standard/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-standard/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-environment</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-environment-standard</artifactId>
   <name>XWiki Commons - Environment - Standard</name>
@@ -33,6 +33,7 @@
   <description>XWiki Commons - Environment - Standard</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.63</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>78</xwiki.pitest.mutationThreshold>
   </properties>
   <dependencies>
     <dependency>
diff --git a/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-standard/src/main/java/org/xwiki/environment/System.java b/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-standard/src/main/java/org/xwiki/environment/System.java
index 0e77d52..b40e95e 100644
--- a/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-standard/src/main/java/org/xwiki/environment/System.java
+++ b/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-standard/src/main/java/org/xwiki/environment/System.java
@@ -130,7 +130,7 @@ public static ComponentManager initialize(File permanentDirectory, File resource
     {
         // Step 1: Initialize Component system
         EmbeddableComponentManager ecm = new EmbeddableComponentManager();
-        ecm.initialize(classLoader == null ? System.class.getClassLoader() : classLoader);
+        ecm.initialize(classLoader == null ? Thread.currentThread().getContextClassLoader() : classLoader);
 
         // Step 2: Initialize Environment
         StandardEnvironment environment;
diff --git a/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-standard/src/main/java/org/xwiki/environment/internal/StandardEnvironment.java b/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-standard/src/main/java/org/xwiki/environment/internal/StandardEnvironment.java
index e7672ae..3852e3e 100644
--- a/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-standard/src/main/java/org/xwiki/environment/internal/StandardEnvironment.java
+++ b/xwiki-commons-core/xwiki-commons-environment/xwiki-commons-environment-standard/src/main/java/org/xwiki/environment/internal/StandardEnvironment.java
@@ -47,7 +47,7 @@
     /**
      * @see #setResourceClassLoader(ClassLoader)
      */
-    private ClassLoader resourceClassLoader = StandardEnvironment.class.getClassLoader();
+    private ClassLoader resourceClassLoader;
 
     /**
      * @param resourceDirectory the directory where resources such as configuration files (actually any content that
@@ -105,7 +105,8 @@ public URL getResource(String resourceName)
 
         // If not found, try in the Resource Class Loader
         if (resourceURL == null) {
-            resourceURL = this.resourceClassLoader.getResource(resourceName);
+            resourceURL = (this.resourceClassLoader == null ? Thread.currentThread().getContextClassLoader()
+                : this.resourceClassLoader).getResource(resourceName);
         }
 
         return resourceURL;
diff --git a/xwiki-commons-core/xwiki-commons-extension/pom.xml b/xwiki-commons-core/xwiki-commons-extension/pom.xml
index 3878359..7fe588f 100644
--- a/xwiki-commons-core/xwiki-commons-extension/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-extension/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-core</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-extension</artifactId>
   <name>XWiki Commons - Extension - Parent POM</name>
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/pom.xml b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/pom.xml
index 648d6b6..358ef07 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/pom.xml
@@ -25,14 +25,15 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-extension</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-extension-api</artifactId>
   <name>XWiki Commons - Extension - API</name>
   <packaging>jar</packaging>
   <description>XWiki Commons - Extension - API</description>
   <properties>
-    <xwiki.jacoco.instructionRatio>0.68</xwiki.jacoco.instructionRatio>
+    <xwiki.jacoco.instructionRatio>0.71</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>65</xwiki.pitest.mutationThreshold>
     <!-- Old names of this module used for retro compatibility when resolving dependencies of old extensions -->
     <xwiki.extension.features>org.xwiki.platform:xwiki-platform-extension-api</xwiki.extension.features>
     <!-- TODO: Remove once the tests have been fixed to not output anything to the console! -->
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/AbstractExtension.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/AbstractExtension.java
index 3471360..8610c49 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/AbstractExtension.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/AbstractExtension.java
@@ -194,6 +194,8 @@ public void set(Extension extension)
         setDependencies(extension.getDependencies());
         setManagedDependencies(extension.getManagedDependencies());
 
+        setRepositories(extension.getRepositories());
+
         setProperties(extension.getProperties());
     }
 
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/AbstractExtensionDependency.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/AbstractExtensionDependency.java
index b557228..87f93aa 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/AbstractExtensionDependency.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/AbstractExtensionDependency.java
@@ -85,6 +85,8 @@ public AbstractExtensionDependency(ExtensionDependency dependency, VersionConstr
     {
         this(dependency.getId(), versionConstraint != null ? versionConstraint : dependency.getVersionConstraint(),
             dependency.isOptional(), dependency.getProperties());
+
+        setRepositories(dependency.getRepositories());
     }
 
     /**
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/AbstractRemoteExtension.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/AbstractRemoteExtension.java
index 599e70c..bd6c79b 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/AbstractRemoteExtension.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/AbstractRemoteExtension.java
@@ -21,7 +21,6 @@
 
 import org.xwiki.extension.rating.RatingExtension;
 import org.xwiki.extension.repository.ExtensionRepository;
-import org.xwiki.stability.Unstable;
 
 /**
  * Base class for {@link RatingExtension} implementations.
@@ -29,7 +28,6 @@
  * @version $Id$
  * @since 8.3RC1
  */
-@Unstable
 public abstract class AbstractRemoteExtension extends AbstractExtension implements RemoteExtension
 {
     /**
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/ExtensionFeaturesInjector.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/ExtensionFeaturesInjector.java
new file mode 100644
index 0000000..34b61b5
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/ExtensionFeaturesInjector.java
@@ -0,0 +1,39 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.extension;
+
+import java.util.Collection;
+
+/**
+ * Allow injecting features in extensions whiles they are loaded from a repository. This is useful for extension you
+ * don't control comming from various repositories. A good example is various group ids (npm, bower, classic) used for
+ * webjar extensions which are the same thing from XWiki point of view.
+ * 
+ * @version $Id$
+ * @since 10.2
+ */
+public interface ExtensionFeaturesInjector
+{
+    /**
+     * @param extension the extension for which to inject additional features
+     * @return the additional features that should be added to this extension
+     */
+    Collection<ExtensionId> getFeatures(Extension extension);
+}
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/ExtensionManager.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/ExtensionManager.java
index 85a02ad..65f1190 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/ExtensionManager.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/ExtensionManager.java
@@ -19,8 +19,15 @@
  */
 package org.xwiki.extension;
 
+import java.util.Collections;
+
 import org.xwiki.component.annotation.Role;
+import org.xwiki.component.namespace.Namespace;
 import org.xwiki.extension.repository.ExtensionRepository;
+import org.xwiki.extension.repository.result.CollectionIterableResult;
+import org.xwiki.extension.repository.result.IterableResult;
+import org.xwiki.extension.repository.search.ExtensionQuery;
+import org.xwiki.extension.repository.search.SearchException;
 
 /**
  * Main entry point for some extensions management tasks.
@@ -99,4 +106,34 @@
      * @since 4.0M2
      */
     ExtensionRepository getRepository(String repositoryId);
+
+    /**
+     * Get the accessible (i.e. core or installed) extension instance from the passed namespace and matching the passed
+     * feature/id.
+     * 
+     * @param feature the extension id or provided feature (virtual extension)
+     * @param namespace the namespace from where the extension is usable
+     * @return the {@link Extension} instance
+     * @since 10.0RC1
+     */
+    default Extension getAccessibleExtension(String feature, Namespace namespace)
+    {
+        return null;
+    }
+
+    /**
+     * Search accessible (i.e. core or installed) extensions based of the provided query and only in the passed
+     * namespace.
+     *
+     * @param namespace the namespace where to search
+     * @param query the extension query used to filter and order the result
+     * @return the found extensions descriptors, empty list if nothing could be found
+     * @throws SearchException error when trying to search provided pattern
+     * @since 10.0RC1
+     */
+    default IterableResult<Extension> searchAccessibleExtensions(Namespace namespace, ExtensionQuery query)
+        throws SearchException
+    {
+        return new CollectionIterableResult<>(0, query.getOffset(), Collections.emptyList());
+    }
 }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/MutableExtension.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/MutableExtension.java
index f2a20af..8796709 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/MutableExtension.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/MutableExtension.java
@@ -23,7 +23,6 @@
 import java.util.Map;
 
 import org.xwiki.extension.repository.ExtensionRepositoryDescriptor;
-import org.xwiki.stability.Unstable;
 
 /**
  * Mutable version of {@link Extension}.
@@ -31,7 +30,6 @@
  * @version $Id$
  * @since 8.4RC1
  */
-@Unstable
 public interface MutableExtension extends Extension
 {
     /**
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/RemoteExtension.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/RemoteExtension.java
index efc7f50..d051323 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/RemoteExtension.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/RemoteExtension.java
@@ -20,7 +20,6 @@
 package org.xwiki.extension;
 
 import org.xwiki.extension.repository.ExtensionRepositoryManager;
-import org.xwiki.stability.Unstable;
 
 /**
  * An extension that come from a remote extensions repository.
@@ -32,7 +31,6 @@
  * @version $Id$
  * @since 8.3RC1
  */
-@Unstable
 public interface RemoteExtension extends Extension
 {
     /**
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/handler/internal/DefaultExtensionInitializer.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/handler/internal/DefaultExtensionInitializer.java
index 288ccf9..552b4db 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/handler/internal/DefaultExtensionInitializer.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/handler/internal/DefaultExtensionInitializer.java
@@ -90,7 +90,7 @@ public void initialize(String namespaceToLoad)
     @Override
     public void initialize(String namespaceToInitialize, String type)
     {
-        Map<String, Set<InstalledExtension>> initializedExtensions = new HashMap<String, Set<InstalledExtension>>();
+        Map<String, Set<InstalledExtension>> initializedExtensions = new HashMap<>();
 
         // Load extensions from local repository
         Collection<InstalledExtension> installedExtensions;
@@ -153,7 +153,7 @@ private void initializeExtensionInNamespace(InstalledExtension installedExtensio
         Set<InstalledExtension> initializedExtensionsInNamespace = initializedExtensions.get(namespace);
 
         if (initializedExtensionsInNamespace == null) {
-            initializedExtensionsInNamespace = new HashSet<InstalledExtension>();
+            initializedExtensionsInNamespace = new HashSet<>();
             initializedExtensions.put(namespace, initializedExtensionsInNamespace);
         }
 
@@ -189,7 +189,7 @@ private void initializeExtensionInNamespace(InstalledExtension installedExtensio
                         initializeExtensionInNamespace(dependencyExtension, namespace, initializedExtensions);
                     } catch (Exception e) {
                         if (dependency.isOptional()) {
-                            this.logger.warn("Failed to initialize dependency [{}]: ", dependency,
+                            this.logger.warn("Failed to initialize dependency [{}]: {}", dependency,
                                 ExceptionUtils.getRootCauseMessage(e));
                         } else {
                             throw new ExtensionException("Failed to initialize dependency [" + dependency + "]", e);
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/DefaultExtensionManager.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/DefaultExtensionManager.java
index 23f27b2..f83062a 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/DefaultExtensionManager.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/DefaultExtensionManager.java
@@ -19,6 +19,7 @@
  */
 package org.xwiki.extension.internal;
 
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -31,6 +32,7 @@
 import org.xwiki.component.annotation.Component;
 import org.xwiki.component.manager.ComponentLookupException;
 import org.xwiki.component.manager.ComponentManager;
+import org.xwiki.component.namespace.Namespace;
 import org.xwiki.component.phase.Initializable;
 import org.xwiki.component.phase.InitializationException;
 import org.xwiki.extension.Extension;
@@ -44,6 +46,12 @@
 import org.xwiki.extension.repository.ExtensionRepositoryManager;
 import org.xwiki.extension.repository.InstalledExtensionRepository;
 import org.xwiki.extension.repository.LocalExtensionRepository;
+import org.xwiki.extension.repository.internal.RepositoryUtils;
+import org.xwiki.extension.repository.result.IterableResult;
+import org.xwiki.extension.repository.search.AdvancedSearchable;
+import org.xwiki.extension.repository.search.ExtensionQuery;
+import org.xwiki.extension.repository.search.SearchException;
+import org.xwiki.extension.wrap.WrappingExtensionRepository;
 
 /**
  * Default implementation of {@link ExtensionManager}.
@@ -190,4 +198,73 @@ public ExtensionRepository getRepository(String repositoryId)
 
         return repository;
     }
+
+    @Override
+    public Extension getAccessibleExtension(String feature, Namespace namespace)
+    {
+        // Try installed extension
+        Extension extension = this.installedExtensionRepository.getInstalledExtension(feature, namespace.serialize());
+
+        if (extension == null) {
+            // Try core extension
+            extension = this.coreExtensionRepository.getCoreExtension(feature);
+        }
+
+        return extension;
+    }
+
+    @Override
+    public IterableResult<Extension> searchAccessibleExtensions(Namespace namespace, ExtensionQuery query)
+        throws SearchException
+    {
+        return RepositoryUtils.search(query,
+            Arrays.asList(new SearchableInstalledExtensionRepository(this.installedExtensionRepository, namespace),
+                this.coreExtensionRepository));
+    }
+
+    private static class SearchableInstalledExtensionRepository
+        extends WrappingExtensionRepository<InstalledExtensionRepository> implements AdvancedSearchable
+    {
+        private final Namespace namespace;
+
+        private final String serializedNamespace;
+
+        SearchableInstalledExtensionRepository(InstalledExtensionRepository repository, Namespace namespace)
+        {
+            super(repository);
+
+            this.namespace = namespace;
+            this.serializedNamespace = this.namespace != null ? this.namespace.serialize() : null;
+        }
+
+        @Override
+        public IterableResult<Extension> search(String pattern, int offset, int nb) throws SearchException
+        {
+            ExtensionQuery query = new ExtensionQuery(pattern);
+            query.setOffset(offset);
+            query.setLimit(nb);
+
+            return search(query);
+        }
+
+        @Override
+        public boolean isFilterable()
+        {
+            return getWrapped().isFilterable();
+        }
+
+        @Override
+        public boolean isSortable()
+        {
+            return getWrapped().isSortable();
+        }
+
+        @Override
+        public IterableResult<Extension> search(ExtensionQuery query) throws SearchException
+        {
+            return (IterableResult) (this.namespace != null
+                ? getWrapped().searchInstalledExtensions(this.serializedNamespace, query)
+                : getWrapped().searchInstalledExtensions(query));
+        }
+    }
 }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/ExtensionFactory.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/ExtensionFactory.java
index daf9a39..711bb88 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/ExtensionFactory.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/ExtensionFactory.java
@@ -24,6 +24,7 @@
 
 import javax.inject.Singleton;
 
+import org.xwiki.collection.SoftCache;
 import org.xwiki.component.annotation.Component;
 import org.xwiki.extension.DefaultExtensionAuthor;
 import org.xwiki.extension.DefaultExtensionDependency;
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/ExtensionUtils.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/ExtensionUtils.java
index 5de1eef..1b4f702 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/ExtensionUtils.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/ExtensionUtils.java
@@ -26,8 +26,10 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 
 import org.apache.commons.lang3.StringUtils;
 import org.xwiki.extension.CoreExtension;
@@ -132,6 +134,23 @@ public static ExtensionDependency getDependency(ExtensionDependency dependency,
     }
 
     /**
+     * "add" an object in a readonly {@link Set}. This method return a new Set which contains the passed set and object
+     * to add.
+     * 
+     * @param readonly the {@link Set} to add an object to
+     * @param obj the object to add
+     * @return the new {@link Set}
+     */
+    public static <T> Set<T> append(Set<T> readonly, T obj)
+    {
+        Set<T> writable = readonly != null ? new HashSet<>(readonly) : new HashSet<>();
+
+        writable.add(obj);
+
+        return writable;
+    }
+
+    /**
      * Delete and return the value of the passed special property.
      * 
      * @param <T> type of the property value
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/SoftCache.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/SoftCache.java
deleted file mode 100644
index eb71958..0000000
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/SoftCache.java
+++ /dev/null
@@ -1,98 +0,0 @@
-/*
- * See the NOTICE file distributed with this work for additional
- * information regarding copyright ownership.
- *
- * This is free software; you can redistribute it and/or modify it
- * under the terms of the GNU Lesser General Public License as
- * published by the Free Software Foundation; either version 2.1 of
- * the License, or (at your option) any later version.
- *
- * This software is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this software; if not, write to the Free
- * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
- * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
- */
-package org.xwiki.extension.internal;
-
-import java.lang.ref.SoftReference;
-import java.util.WeakHashMap;
-import java.util.concurrent.locks.ReentrantReadWriteLock;
-
-/**
- * A concurrent version of {@link WeakHashMap} in which the values are soft references.
- * 
- * @param <K> the type of keys maintained by this map
- * @param <V> the type of mapped values
- * @version $Id$
- * @since 9.1RC1
- * @since 8.4.3
- */
-public class SoftCache<K, V>
-{
-    private WeakHashMap<K, SoftReference<V>> map = new WeakHashMap<>();
-
-    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
-
-    /**
-     * @param key the entry key
-     * @return the value associated to the passed key
-     */
-    public V get(K key)
-    {
-        this.lock.readLock().lock();
-
-        try {
-            SoftReference<V> reference = this.map.get(key);
-
-            return reference != null ? reference.get() : null;
-        } finally {
-            this.lock.readLock().unlock();
-        }
-    }
-
-    /**
-     * Get the value associated to the passed key. If no value can be found stored and return the passed default value.
-     * 
-     * @param key the entry key
-     * @param defaultValue the default value
-     * @return the value associated to the passed key
-     */
-    public V get(K key, V defaultValue)
-    {
-        // Check if we only know an equal entry
-        V sharedValue = get(key);
-
-        if (sharedValue == null) {
-            // If no entry can be found, store and return the passed one
-            sharedValue = defaultValue;
-
-            // Make sure to remember the entry
-            put(key, defaultValue);
-        }
-
-        // Return the shared entry
-        return sharedValue;
-    }
-
-    /**
-     * Associate passed key to passed value.
-     * 
-     * @param key the entry key
-     * @param value the entry value
-     */
-    public void put(K key, V value)
-    {
-        this.lock.writeLock().lock();
-
-        try {
-            this.map.put(key, new SoftReference<>(value));
-        } finally {
-            this.lock.writeLock().unlock();
-        }
-    }
-}
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/job/internal/AbstractInstallPlanJob.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/job/internal/AbstractInstallPlanJob.java
index 1f0bc4e..f7696e7 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/job/internal/AbstractInstallPlanJob.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/job/internal/AbstractInstallPlanJob.java
@@ -494,18 +494,21 @@ private ExtensionDependency checkInstalledDependency(ExtensionDependency extensi
      * @param namespace the namespace where to install the extension
      * @param parentBranch the children of the parent {@link DefaultExtensionPlanNode}
      * @param managedDependencies the managed dependencies
+     * @param parents the parents extensions (which triggered this extension install)
      * @throws InstallException error when trying to install provided extension
      * @throws ResolveException
      * @throws IncompatibleVersionConstraintException
      */
     private void installExtensionDependency(ExtensionDependency extensionDependency, String namespace,
-        List<ModifableExtensionPlanNode> parentBranch, Map<String, ExtensionDependency> managedDependencies)
-        throws InstallException, IncompatibleVersionConstraintException, ResolveException
+        List<ModifableExtensionPlanNode> parentBranch, Map<String, ExtensionDependency> managedDependencies,
+        Set<String> parents) throws InstallException, IncompatibleVersionConstraintException, ResolveException
     {
         if (extensionDependency.isOptional()) {
-            installOptionalExtensionDependency(extensionDependency, namespace, parentBranch, managedDependencies);
+            installOptionalExtensionDependency(extensionDependency, namespace, parentBranch, managedDependencies,
+                parents);
         } else {
-            installMandatoryExtensionDependency(extensionDependency, namespace, parentBranch, managedDependencies);
+            installMandatoryExtensionDependency(extensionDependency, namespace, parentBranch, managedDependencies,
+                parents);
         }
     }
 
@@ -516,23 +519,26 @@ private void installExtensionDependency(ExtensionDependency extensionDependency,
      * @param namespace the namespace where to install the extension
      * @param parentBranch the children of the parent {@link DefaultExtensionPlanNode}
      * @param managedDependencies the managed dependencies
+     * @param parents the parents extensions (which triggered this extension install)
      * @throws InstallException error when trying to install provided extension
      * @throws ResolveException
      * @throws IncompatibleVersionConstraintException
      */
     private boolean installOptionalExtensionDependency(ExtensionDependency extensionDependency, String namespace,
-        List<ModifableExtensionPlanNode> parentBranch, Map<String, ExtensionDependency> managedDependencies)
+        List<ModifableExtensionPlanNode> parentBranch, Map<String, ExtensionDependency> managedDependencies,
+        Set<String> parents)
     {
         // Save current plan
         List<ModifableExtensionPlanNode> dependencyBranch = new ArrayList<>();
 
         try {
-            installMandatoryExtensionDependency(extensionDependency, namespace, dependencyBranch, managedDependencies);
+            installMandatoryExtensionDependency(extensionDependency, namespace, dependencyBranch, managedDependencies,
+                parents);
 
             parentBranch.addAll(dependencyBranch);
 
             return true;
-        } catch (Exception e) {
+        } catch (Throwable e) {
             if (getRequest().isVerbose()) {
                 this.logger.warn("Failed to install optional dependency [{}] with error: {}", extensionDependency,
                     ExceptionUtils.getRootCauseMessage(e));
@@ -549,13 +555,14 @@ private boolean installOptionalExtensionDependency(ExtensionDependency extension
      * @param namespace the namespace where to install the extension
      * @param parentBranch the children of the parent {@link DefaultExtensionPlanNode}
      * @param managedDependencies the managed dependencies
+     * @param parents the parents extensions (which triggered this extension install)
      * @throws InstallException error when trying to install provided extension
      * @throws ResolveException
      * @throws IncompatibleVersionConstraintException
      */
     protected void installMandatoryExtensionDependency(ExtensionDependency extensionDependency, String namespace,
-        List<ModifableExtensionPlanNode> parentBranch, Map<String, ExtensionDependency> managedDependencies)
-        throws InstallException, IncompatibleVersionConstraintException, ResolveException
+        List<ModifableExtensionPlanNode> parentBranch, Map<String, ExtensionDependency> managedDependencies,
+        Set<String> parents) throws InstallException, IncompatibleVersionConstraintException, ResolveException
     {
         // Make sure the dependency have a version constraint
         if (extensionDependency.getVersionConstraint() == null) {
@@ -585,7 +592,7 @@ protected void installMandatoryExtensionDependency(ExtensionDependency extension
         // upgrade/downgrade/replace it)
         if (namespace != null && getRequest().isRootModificationsAllowed()
             && hasIncompatileRootDependency(extensionDependency)) {
-            installMandatoryExtensionDependency(extensionDependency, null, parentBranch, managedDependencies);
+            installMandatoryExtensionDependency(extensionDependency, null, parentBranch, managedDependencies, parents);
 
             return;
         }
@@ -616,7 +623,7 @@ protected void installMandatoryExtensionDependency(ExtensionDependency extension
 
         // Not found locally, search it remotely
         ModifableExtensionPlanNode node =
-            installExtensionDependency(targetDependency, true, namespace, managedDependencies);
+            installExtensionDependency(targetDependency, true, namespace, managedDependencies, parents);
 
         node.versionConstraint = versionConstraint;
 
@@ -631,11 +638,12 @@ protected void installMandatoryExtensionDependency(ExtensionDependency extension
      * @param dependency indicate if the extension is installed as a dependency
      * @param namespace the namespace where to install the extension
      * @param managedDependencies the managed dependencies
+     * @param parents the parents extensions (which triggered this extension install)
      * @return the install plan node for the provided extension
      * @throws InstallException error when trying to install provided extension
      */
     private ModifableExtensionPlanNode installExtensionDependency(ExtensionDependency targetDependency,
-        boolean dependency, String namespace, Map<String, ExtensionDependency> managedDependencies)
+        boolean dependency, String namespace, Map<String, ExtensionDependency> managedDependencies, Set<String> parents)
         throws InstallException
     {
         this.progressManager.pushLevelProgress(2, this);
@@ -660,7 +668,7 @@ private ModifableExtensionPlanNode installExtensionDependency(ExtensionDependenc
 
             try {
                 return installExtension(extension, rewrittenExtension, dependency, namespace, targetDependency,
-                    managedDependencies);
+                    managedDependencies, parents);
             } catch (Exception e) {
                 throw new InstallException(
                     String.format("Failed to create an install plan for extension dependency [%s]", targetDependency),
@@ -763,7 +771,7 @@ private ModifableExtensionPlanNode installExtension(ExtensionId extensionId, boo
 
             try {
                 return installExtension(extension, rewrittenExtension, dependency, namespace, null,
-                    Collections.emptyMap());
+                    Collections.emptyMap(), null);
             } catch (Exception e) {
                 throw new InstallException("Failed to resolve extension", e);
             }
@@ -849,6 +857,7 @@ protected void checkTypeInstall(Extension extension, String namespace) throws In
      * @param namespace the namespace where to install the extension
      * @param initialDependency the initial dependency used to resolve the extension
      * @param managedDependencies the managed dependencies
+     * @param parents the parents extensions (which triggered this extension install)
      * @return the install plan node for the provided extension
      * @throws InstallException error when trying to install provided extension
      * @throws IncompatibleVersionConstraintException
@@ -857,8 +866,8 @@ protected void checkTypeInstall(Extension extension, String namespace) throws In
      */
     private ModifableExtensionPlanNode installExtension(Extension sourceExtension, Extension rewrittenExtension,
         boolean dependency, String namespace, ExtensionDependency initialDependency,
-        Map<String, ExtensionDependency> managedDependencies) throws InstallException, ResolveException,
-        IncompatibleVersionConstraintException, UninstallException, NamespaceNotAllowedException
+        Map<String, ExtensionDependency> managedDependencies, Set<String> parents) throws InstallException,
+        ResolveException, IncompatibleVersionConstraintException, UninstallException, NamespaceNotAllowedException
     {
         boolean allowed = isNamespaceAllowed(rewrittenExtension, namespace);
 
@@ -868,7 +877,7 @@ private ModifableExtensionPlanNode installExtension(Extension sourceExtension, E
                 if (getRequest().isRootModificationsAllowed()) {
                     // Try to install it on root namespace
                     return installExtension(sourceExtension, rewrittenExtension, dependency, null, initialDependency,
-                        managedDependencies);
+                        managedDependencies, parents);
                 }
             }
 
@@ -887,7 +896,7 @@ private ModifableExtensionPlanNode installExtension(Extension sourceExtension, E
             if (checkRootExtension(rewrittenExtension)) {
                 // Restart install on root
                 return installExtension(sourceExtension, rewrittenExtension, dependency, null, initialDependency,
-                    managedDependencies);
+                    managedDependencies, parents);
             }
         }
 
@@ -952,6 +961,8 @@ private ModifableExtensionPlanNode installExtension(Extension sourceExtension, E
 
             List<ModifableExtensionPlanNode> children = null;
             if (!dependencies.isEmpty()) {
+                parents = ExtensionUtils.append(parents, rewrittenExtension.getId().getId());
+
                 this.progressManager.pushLevelProgress(dependencies.size() + 1, this);
 
                 try {
@@ -959,6 +970,11 @@ private ModifableExtensionPlanNode installExtension(Extension sourceExtension, E
                     for (ExtensionDependency extensionDependency : dependencies) {
                         this.progressManager.startStep(this);
 
+                        if (parents.contains(extensionDependency.getId())) {
+                            // In case of cross dependency just ignore it
+                            continue;
+                        }
+
                         // Replace with managed dependency if any
                         extensionDependency =
                             ExtensionUtils.getDependency(extensionDependency, managedDependencies, rewrittenExtension);
@@ -969,13 +985,13 @@ private ModifableExtensionPlanNode installExtension(Extension sourceExtension, E
                             .getRecommendedDependency(extensionDependency, this.configuration, this.factory);
                         if (recommendedDependency != null) {
                             valid = installOptionalExtensionDependency(recommendedDependency, namespace, children,
-                                ExtensionUtils.append(managedDependencies, rewrittenExtension));
+                                ExtensionUtils.append(managedDependencies, rewrittenExtension), parents);
                         }
 
                         // If recommended version is invalid, try the one provided by the extension
                         if (!valid) {
                             installExtensionDependency(extensionDependency, namespace, children,
-                                ExtensionUtils.append(managedDependencies, rewrittenExtension));
+                                ExtensionUtils.append(managedDependencies, rewrittenExtension), parents);
                         }
 
                         this.progressManager.endStep(this);
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/ExtensionRepositoryManager.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/ExtensionRepositoryManager.java
index 946a785..688c354 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/ExtensionRepositoryManager.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/ExtensionRepositoryManager.java
@@ -34,7 +34,7 @@
 import org.xwiki.extension.version.Version;
 
 /**
- * Proxy repository in to make easier to search in all remove extension repositories.
+ * Proxy repository in to make easier to search in all remote extension repositories.
  *
  * @version $Id$
  * @since 4.0M1
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/AbstractCachedExtensionRepository.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/AbstractCachedExtensionRepository.java
index cecee05..6016a99 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/AbstractCachedExtensionRepository.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/AbstractCachedExtensionRepository.java
@@ -215,30 +215,25 @@ public boolean exists(ExtensionId extensionId)
     public IterableResult<Version> resolveVersions(String id, int offset, int nb) throws ResolveException
     {
         if (id == null) {
-            return new CollectionIterableResult<Version>(0, offset, Collections.<Version>emptyList());
+            return new CollectionIterableResult<>(0, offset, Collections.<Version>emptyList());
         }
 
-        List<E> versions = this.extensionsVersions.get(id);
+        List<E> extensionVersions = this.extensionsVersions.get(id);
 
-        if (versions == null) {
+        if (extensionVersions == null) {
             throw new ExtensionNotFoundException("Can't find extension with id [" + id + "]");
         }
 
-        if (nb == 0 || offset >= versions.size()) {
-            return new CollectionIterableResult<Version>(versions.size(), offset, Collections.<Version>emptyList());
+        if (nb == 0 || offset >= extensionVersions.size()) {
+            return new CollectionIterableResult<>(extensionVersions.size(), offset, Collections.<Version>emptyList());
         }
 
-        int fromId = offset < 0 ? 0 : offset;
-        int toId = offset + nb > versions.size() || nb < 0 ? versions.size() - 1 : offset + nb;
-
-        List<Version> result = new ArrayList<Version>(toId - fromId);
-
-        // Invert to sort in ascendent order
-        for (int i = toId - 1; i >= fromId; --i) {
-            result.add(versions.get(i).getId().getVersion());
+        List<Version> versions = new ArrayList<>(extensionVersions.size());
+        for (E extension : extensionVersions) {
+            versions.add(extension.getId().getVersion());
         }
 
-        return new CollectionIterableResult<Version>(versions.size(), offset, result);
+        return RepositoryUtils.getIterableResult(offset, nb, versions);
     }
 
     // Searchable
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/DefaultExtensionRepositoryManager.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/DefaultExtensionRepositoryManager.java
index 7214de4..97d255e 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/DefaultExtensionRepositoryManager.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/DefaultExtensionRepositoryManager.java
@@ -57,12 +57,10 @@
 import org.xwiki.extension.repository.ExtensionRepositoryId;
 import org.xwiki.extension.repository.ExtensionRepositoryManager;
 import org.xwiki.extension.repository.ExtensionRepositorySource;
-import org.xwiki.extension.repository.result.CollectionIterableResult;
 import org.xwiki.extension.repository.result.IterableResult;
 import org.xwiki.extension.repository.search.AdvancedSearchable;
 import org.xwiki.extension.repository.search.ExtensionQuery;
 import org.xwiki.extension.repository.search.SearchException;
-import org.xwiki.extension.repository.search.Searchable;
 import org.xwiki.extension.version.Version;
 
 /**
@@ -421,83 +419,7 @@ public boolean exists(ExtensionId extensionId)
     @Override
     public IterableResult<Extension> search(ExtensionQuery query) throws SearchException
     {
-        IterableResult<Extension> searchResult = null;
-
-        int currentOffset = query.getOffset() > 0 ? query.getOffset() : 0;
-        int currentNb = query.getLimit();
-
-        // A local index would avoid things like this...
-        for (ExtensionRepository repository : this.repositories) {
-            try {
-                ExtensionQuery customQuery = query;
-                if (currentOffset != customQuery.getOffset() && currentNb != customQuery.getLimit()) {
-                    customQuery = new ExtensionQuery(query);
-                    customQuery.setOffset(currentOffset);
-                    customQuery.setLimit(currentNb);
-                }
-
-                searchResult = search(repository, customQuery, searchResult);
-
-                if (searchResult != null) {
-                    if (currentOffset > 0) {
-                        currentOffset = query.getOffset() - searchResult.getTotalHits();
-                        if (currentOffset < 0) {
-                            currentOffset = 0;
-                        }
-                    }
-
-                    if (currentNb > 0) {
-                        currentNb = query.getLimit() - searchResult.getSize();
-                        if (currentNb < 0) {
-                            currentNb = 0;
-                        }
-                    }
-                }
-            } catch (SearchException e) {
-                this.logger.error(
-                    "Failed to search on repository [{}] with query [{}]. " + "Ignore and go to next repository.",
-                    repository.getDescriptor().toString(), query, e);
-            }
-        }
-
-        return searchResult != null ? (IterableResult) searchResult
-            : new CollectionIterableResult<Extension>(0, query.getOffset(), Collections.<Extension>emptyList());
-
-    }
-
-    /**
-     * Search one repository.
-     *
-     * @param repository the repository to search
-     * @param query the search query
-     * @param previousSearchResult the current search result merged from all previous repositories
-     * @return the updated maximum number of search results to return
-     * @throws SearchException error while searching on provided repository
-     */
-    private IterableResult<Extension> search(ExtensionRepository repository, ExtensionQuery query,
-        IterableResult<Extension> previousSearchResult) throws SearchException
-    {
-        IterableResult<Extension> result;
-
-        if (repository instanceof Searchable) {
-            if (repository instanceof AdvancedSearchable) {
-                AdvancedSearchable searchableRepository = (AdvancedSearchable) repository;
-
-                result = searchableRepository.search(query);
-            } else {
-                Searchable searchableRepository = (Searchable) repository;
-
-                result = searchableRepository.search(query.getQuery(), query.getOffset(), query.getLimit());
-            }
-
-            if (previousSearchResult != null) {
-                result = RepositoryUtils.appendSearchResults(previousSearchResult, result);
-            }
-        } else {
-            result = previousSearchResult;
-        }
-
-        return result;
+        return RepositoryUtils.search(query, this.repositories);
     }
 
     @Override
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/RepositoryUtils.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/RepositoryUtils.java
index eb45b34..53fa2b0 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/RepositoryUtils.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/RepositoryUtils.java
@@ -27,15 +27,21 @@
 import java.util.regex.Pattern;
 
 import org.apache.commons.lang3.StringUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.xwiki.extension.Extension;
 import org.xwiki.extension.internal.converter.ExtensionIdConverter;
+import org.xwiki.extension.repository.ExtensionRepository;
 import org.xwiki.extension.repository.result.AggregatedIterableResult;
 import org.xwiki.extension.repository.result.CollectionIterableResult;
 import org.xwiki.extension.repository.result.IterableResult;
+import org.xwiki.extension.repository.search.AdvancedSearchable;
 import org.xwiki.extension.repository.search.ExtensionQuery;
 import org.xwiki.extension.repository.search.ExtensionQuery.COMPARISON;
 import org.xwiki.extension.repository.search.ExtensionQuery.Filter;
 import org.xwiki.extension.repository.search.ExtensionQuery.SortClause;
+import org.xwiki.extension.repository.search.SearchException;
+import org.xwiki.extension.repository.search.Searchable;
 
 /**
  * A set of Repository related tools.
@@ -50,6 +56,8 @@
      */
     public static final String SEARCH_PATTERN_SUFFIXNPREFIX = ".*";
 
+    private static final Logger LOGGER = LoggerFactory.getLogger(RepositoryUtils.class);
+
     /**
      * Utility class.
      */
@@ -107,7 +115,7 @@ private RepositoryUtils()
 
         // Filter
         if (StringUtils.isEmpty(query.getQuery())) {
-            result = extensions instanceof List ? (List<E>) extensions : new ArrayList<E>(extensions);
+            result = extensions instanceof List ? (List<E>) extensions : new ArrayList<>(extensions);
         } else {
             result = filter(query.getQuery(), query.getFilters(), extensions, forceUnique);
         }
@@ -129,14 +137,14 @@ private RepositoryUtils()
     public static <E> CollectionIterableResult<E> getIterableResult(int offset, int nb, Collection<E> elements)
     {
         if (nb == 0 || offset >= elements.size()) {
-            return new CollectionIterableResult<E>(elements.size(), offset, Collections.<E>emptyList());
+            return new CollectionIterableResult<>(elements.size(), offset, Collections.<E>emptyList());
         }
 
         List<E> list;
         if (elements instanceof List) {
             list = (List<E>) elements;
         } else {
-            list = new ArrayList<E>(elements);
+            list = new ArrayList<>(elements);
         }
 
         return getIterableResultFromList(offset, nb, list);
@@ -166,7 +174,7 @@ private RepositoryUtils()
             toIndex = elements.size();
         }
 
-        return new CollectionIterableResult<E>(elements.size(), offset, elements.subList(fromIndex, toIndex));
+        return new CollectionIterableResult<>(elements.size(), offset, elements.subList(fromIndex, toIndex));
     }
 
     /**
@@ -181,7 +189,7 @@ private RepositoryUtils()
     private static <E extends Extension> List<E> filter(String pattern, Collection<Filter> filters,
         Collection<E> extensions, boolean forceUnique)
     {
-        List<E> result = new ArrayList<E>(extensions.size());
+        List<E> result = new ArrayList<>(extensions.size());
 
         Pattern patternMatcher =
             Pattern.compile(SEARCH_PATTERN_SUFFIXNPREFIX + pattern.toLowerCase() + SEARCH_PATTERN_SUFFIXNPREFIX);
@@ -367,7 +375,7 @@ public static void sort(List<? extends Extension> extensions, Collection<SortCla
         if (previousSearchResult instanceof AggregatedIterableResult) {
             newResult = ((AggregatedIterableResult<E>) previousSearchResult);
         } else if (previousSearchResult != null) {
-            newResult = new AggregatedIterableResult<E>(previousSearchResult.getOffset());
+            newResult = new AggregatedIterableResult<>(previousSearchResult.getOffset());
             newResult.addSearchResult(previousSearchResult);
         } else {
             return result;
@@ -377,4 +385,100 @@ public static void sort(List<? extends Extension> extensions, Collection<SortCla
 
         return newResult;
     }
+
+    /**
+     * Search passed repositories based of the provided query.
+     * 
+     * @param query the query
+     * @param repositories the repositories
+     * @return the found extensions descriptors, empty list if nothing could be found
+     * @throws SearchException error when trying to search provided query
+     * @since 10.0RC1
+     */
+    public static IterableResult<Extension> search(ExtensionQuery query, Iterable<ExtensionRepository> repositories)
+        throws SearchException
+    {
+        IterableResult<Extension> searchResult = null;
+
+        int currentOffset = query.getOffset() > 0 ? query.getOffset() : 0;
+        int currentNb = query.getLimit();
+
+        // A local index would avoid things like this...
+        for (ExtensionRepository repository : repositories) {
+            try {
+                searchResult = search(repository, query, currentOffset, currentNb, searchResult);
+
+                if (searchResult != null) {
+                    if (currentOffset > 0) {
+                        currentOffset = query.getOffset() - searchResult.getTotalHits();
+                        if (currentOffset < 0) {
+                            currentOffset = 0;
+                        }
+                    }
+
+                    if (currentNb > 0) {
+                        currentNb = query.getLimit() - searchResult.getSize();
+                        if (currentNb < 0) {
+                            currentNb = 0;
+                        }
+                    }
+                }
+            } catch (SearchException e) {
+                LOGGER.error(
+                    "Failed to search on repository [{}] with query [{}]. " + "Ignore and go to next repository.",
+                    repository.getDescriptor().toString(), query, e);
+            }
+        }
+
+        return searchResult != null ? searchResult
+            : new CollectionIterableResult<>(0, query.getOffset(), Collections.<Extension>emptyList());
+    }
+
+    private static IterableResult<Extension> search(ExtensionRepository repository, ExtensionQuery query,
+        int currentOffset, int currentNb, IterableResult<Extension> previousSearchResult) throws SearchException
+    {
+        ExtensionQuery customQuery = query;
+        if (currentOffset != customQuery.getOffset() && currentNb != customQuery.getLimit()) {
+            customQuery = new ExtensionQuery(query);
+            customQuery.setOffset(currentOffset);
+            customQuery.setLimit(currentNb);
+        }
+
+        return search(repository, customQuery, previousSearchResult);
+    }
+
+    /**
+     * Search one repository.
+     *
+     * @param repository the repository to search
+     * @param query the search query
+     * @param previousSearchResult the current search result merged from all previous repositories
+     * @return the updated maximum number of search results to return
+     * @throws SearchException error while searching on provided repository
+     */
+    public static IterableResult<Extension> search(ExtensionRepository repository, ExtensionQuery query,
+        IterableResult<Extension> previousSearchResult) throws SearchException
+    {
+        IterableResult<Extension> result;
+
+        if (repository instanceof Searchable) {
+            if (repository instanceof AdvancedSearchable) {
+                AdvancedSearchable searchableRepository = (AdvancedSearchable) repository;
+
+                result = searchableRepository.search(query);
+            } else {
+                Searchable searchableRepository = (Searchable) repository;
+
+                result = searchableRepository.search(query.getQuery(), query.getOffset(), query.getLimit());
+            }
+
+            if (previousSearchResult != null) {
+                result = RepositoryUtils.appendSearchResults(previousSearchResult, result);
+            }
+        } else {
+            result = previousSearchResult;
+        }
+
+        return result;
+    }
 }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/core/CoreExtensionCache.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/core/CoreExtensionCache.java
index 0ae7e1b..80b63f2 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/core/CoreExtensionCache.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/core/CoreExtensionCache.java
@@ -121,12 +121,9 @@ public DefaultCoreExtension getExtension(DefaultCoreExtensionRepository reposito
 
         if (file.exists()) {
             try (FileInputStream stream = new FileInputStream(file)) {
-                DefaultCoreExtension coreExtension =
-                    this.serializer.loadCoreExtensionDescriptor(repository, descriptorURL, stream);
-
-                return coreExtension;
+                return this.serializer.loadCoreExtensionDescriptor(repository, descriptorURL, stream);
             } catch (Exception e) {
-                this.logger.warn("Failed to parse cached core extension", e);
+                this.logger.warn("Failed to parse cached core extension descriptor [{}]", descriptorURL, e);
             }
         }
 
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/local/DefaultLocalExtensionRepository.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/local/DefaultLocalExtensionRepository.java
index 16b94ba..dd11ac2 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/local/DefaultLocalExtensionRepository.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/local/DefaultLocalExtensionRepository.java
@@ -173,11 +173,7 @@ public LocalExtension storeExtension(Extension extension) throws LocalExtensionR
                 localExtension = createExtension(extension);
 
                 InputStream is = extension.getFile().openStream();
-                try {
-                    FileUtils.copyInputStreamToFile(is, localExtension.getFile().getFile());
-                } finally {
-                    is.close();
-                }
+                FileUtils.copyInputStreamToFile(is, localExtension.getFile().getFile());
                 this.storage.saveDescriptor(localExtension);
 
                 // Cache extension
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/version/internal/DefaultVersion.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/version/internal/DefaultVersion.java
index 9eca304..2df6ad4 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/version/internal/DefaultVersion.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/version/internal/DefaultVersion.java
@@ -231,7 +231,7 @@ public String toString()
         private static final Map<String, Integer> QUALIFIERS;
 
         static {
-            QUALIFIERS = new HashMap<String, Integer>();
+            QUALIFIERS = new HashMap<>();
             QUALIFIERS.put("alpha", Integer.valueOf(-5));
             QUALIFIERS.put("a", Integer.valueOf(-5));
             QUALIFIERS.put("beta", Integer.valueOf(-4));
@@ -429,7 +429,7 @@ private void setVersion(String rawVersion)
      */
     private void parse()
     {
-        this.elements = new ArrayList<Element>();
+        this.elements = new ArrayList<>();
 
         try {
             for (Tokenizer tokenizer = new Tokenizer(this.rawVersion); tokenizer.next();) {
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/wrap/WrappingExtension.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/wrap/WrappingExtension.java
index 2c2b2b6..0262de3 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/wrap/WrappingExtension.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/wrap/WrappingExtension.java
@@ -20,9 +20,11 @@
 package org.xwiki.extension.wrap;
 
 import java.util.Collection;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
 
+import org.apache.commons.lang3.ObjectUtils;
 import org.xwiki.extension.Extension;
 import org.xwiki.extension.ExtensionAuthor;
 import org.xwiki.extension.ExtensionDependency;
@@ -94,7 +96,9 @@ public ExtensionId getId()
     public Collection<ExtensionId> getExtensionFeatures()
     {
         if (this.overwrites.containsKey(Extension.FIELD_EXTENSIONFEATURES)) {
-            return (Collection<ExtensionId>) this.overwrites.get(Extension.FIELD_EXTENSIONFEATURES);
+            return ObjectUtils.defaultIfNull(
+                (Collection<ExtensionId>) this.overwrites.get(Extension.FIELD_EXTENSIONFEATURES),
+                Collections.emptyList());
         }
 
         return getWrapped().getExtensionFeatures();
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_da.properties b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_da.properties
index 30c5342..a1157cb 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_da.properties
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_da.properties
@@ -1,30 +1,86 @@
-## XWiki Translation for language da generated from http://www.l10n.xwiki.org
-extension.log.job.downgrade.begin=Nedgraderer fra udvidelse {2} til udvidelse [{1}] i alle navnerum
-extension.log.job.downgrade.beginOnNamespace=Nedgraderer fra udvidelse {3} til udvidelse [{1}] i navnerum [{2}]
-extension.log.job.downgrade.failure.end=Nedgradering fejlede fra udvidelse {3} til udvidelse [{1}] i alle navnerum.
-extension.log.job.downgrade.failure.endOnNamespace=Nedgradering fejlede fra udvidelse {3} til udvidelse [{1}] i navnerum [{2}]
-extension.log.job.downgrade.success.end=Nedgradering Ok fra udvidelse {3} til udvidelse [{1}] i alle navnerum
-extension.log.job.downgrade.success.endOnNamespace=Nedgradering Ok fra udvidelse {3} til udvidelse [{1}] i navnerum [{2}]
-extension.log.job.downloading=Henter udvidelse [{0}]
+# ---------------------------------------------------------------------------
+# See the NOTICE file distributed with this work for additional
+# information regarding copyright ownership.
+#
+# This is free software; you can redistribute it and/or modify it
+# under the terms of the GNU Lesser General Public License as
+# published by the Free Software Foundation; either version 2.1 of
+# the License, or (at your option) any later version.
+#
+# This software is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this software; if not, write to the Free
+# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+# 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+# ---------------------------------------------------------------------------
+
+###############################################################################
+# This contains the translations of the module in the default language
+# (generally English).
+#
+# Translation key syntax:
+#   <short top level project name>.<short module name>.<propertyName>
+#   where:
+#   * <short top level project name> = top level project name without the "xwiki-" prefix,
+#                                     for example: commons, rendering, platform, enterprise, manager, etc
+#   * <short module name> = the name of the Maven module without the <short top level project name> prefix,
+#                           for example: oldcore, scheduler, activitystream, etc
+#   * <propertyName> = the name of the property using camel case,
+#                      for example updateJobClassCommitComment
+#
+# Comments: it's possible to add some detail about a key to make easier to
+#   translate it by adding a comment before it. To make sure a comment is not
+#   assigned to the following key use at least three sharps (###) for the comment
+#   or after it.
+#
+# Deprecated keys:
+#   * when deleting a key it should be moved to deprecated section at the end
+#     of the file (between #@deprecatedstart and #@deprecatedend) and associated to the
+#     first version in which it started to be deprecated
+#   * when renaming a key, it should be moved to the same deprecated section
+#     and a comment should be added with the following syntax:
+#     #@deprecated new.key.name
+#     old.key.name=Some translation
+###############################################################################
+
+# Those are generated keys with the same passed arguments
+# 0 is the action id (NONE, INSTALL, UPGRADE, DOWNGRADE, UNINSTALL)
+# 1 the new extension
+# 2 the namespace for which the action is executed
+# 3 is the previous extension
+###
 extension.log.job.install.begin=Installerer udvidelse [{0}]
 extension.log.job.install.beginOnNamespace=Installerer udvidelse [{1}] i navnerum [{2}]
-extension.log.job.install.failure.end=Installation af udvidelse [{1}] fejlede i alle navnerum
-extension.log.job.install.failure.endOnNamespace=Installation af udvidelse [{1}] fejlede i navnerum [{2}]
 extension.log.job.install.success.end=Installation af udvidelse [{1}] Ok i alle navnerum
 extension.log.job.install.success.endOnNamespace=Installation af udvidelse [{1}] Ok i navnerum [{2}]
-extension.log.job.plan.resolve=Finder grundlag for udvidelse [{0}] i navnerum [{1}]
-extension.log.job.plan.resolveOnNamespace=Finder grundlag for udvidelse [{0}] i alle navnerum
-extension.log.job.plan.resolvedependency=Finder grundlag for udvidelse [{0}] i navnerum [{1}]
-extension.log.job.plan.resolvedependencyOnNamespace=Finder grundlag for udvidelse [{0}] i alle navnerum
-extension.log.job.uninstall.begin=Afinstallerer udvidelse [{1}] fra alle navnerum
-extension.log.job.uninstall.beginOnNamespace=Afinstallerer udvidelse [{1}] fra navnerum [{2}]
-extension.log.job.uninstall.failure.end=Afinstallation af udvidelse [{1}] fejlede fra alle navnerum
-extension.log.job.uninstall.failure.endOnNamespace=Afinstallation af udvidelse [{1}] fejlede fra navnerum [{2}]
-extension.log.job.uninstall.success.end=Afinstallation af udvidelse [{1}] Ok fra alle navnerum
-extension.log.job.uninstall.success.endOnNamespace=Afinstallation af udvidelse [{1}] Ok fra navnerum [{2}]
+extension.log.job.install.failure.end=Installation af udvidelse [{1}] fejlede i alle navnerum
+extension.log.job.install.failure.endOnNamespace=Installation af udvidelse [{1}] fejlede i navnerum [{2}]
 extension.log.job.upgrade.begin=Opgraderer udvidelse {3} til udvidelse [{1}] i alle navnerum
 extension.log.job.upgrade.beginOnNamespace=Opgraderer udvidelse {3} til udvidelse [{1}] i navnerum [{2}]
-extension.log.job.upgrade.failure.end=Opgradering fra udvidelse [{3}] til udvidelse [{1}] fejlede i alle navnerum
-extension.log.job.upgrade.failure.endOnNamespace=Opgradering fra udvidelse [{3}] til udvidelse [{1}] fejlede i navnerum [{2}]
 extension.log.job.upgrade.success.end=Opgradering fra udvidelse [{3}] til udvidelse [{1}] Ok i alle navnerum
 extension.log.job.upgrade.success.endOnNamespace=Opgradering fra udvidelse [{3}] til udvidelse [{1}] Ok i navnerum [{2}]
+extension.log.job.upgrade.failure.end=Opgradering fra udvidelse [{3}] til udvidelse [{1}] fejlede i alle navnerum
+extension.log.job.upgrade.failure.endOnNamespace=Opgradering fra udvidelse [{3}] til udvidelse [{1}] fejlede i navnerum [{2}]
+extension.log.job.downgrade.begin=Nedgraderer fra udvidelse {2} til udvidelse [{1}] i alle navnerum
+extension.log.job.downgrade.beginOnNamespace=Nedgraderer fra udvidelse {3} til udvidelse [{1}] i navnerum [{2}]
+extension.log.job.downgrade.success.end=Nedgradering Ok fra udvidelse {3} til udvidelse [{1}] i alle navnerum
+extension.log.job.downgrade.success.endOnNamespace=Nedgradering Ok fra udvidelse {3} til udvidelse [{1}] i navnerum [{2}]
+extension.log.job.downgrade.failure.end=Nedgradering fejlede fra udvidelse {3} til udvidelse [{1}] i alle navnerum
+extension.log.job.downgrade.failure.endOnNamespace=Nedgradering fejlede fra udvidelse {3} til udvidelse [{1}] i navnerum [{2}]
+extension.log.job.uninstall.begin=Afinstallerer udvidelse [{1}] fra alle navnerum
+extension.log.job.uninstall.beginOnNamespace=Afinstallerer udvidelse [{1}] fra navnerum [{2}]
+extension.log.job.uninstall.success.end=Afinstallation af udvidelse [{1}] Ok fra alle navnerum
+extension.log.job.uninstall.success.endOnNamespace=Afinstallation af udvidelse [{1}] Ok fra navnerum [{2}]
+extension.log.job.uninstall.failure.end=Afinstallation af udvidelse [{1}] fejlede fra alle navnerum
+extension.log.job.uninstall.failure.endOnNamespace=Afinstallation af udvidelse [{1}] fejlede fra navnerum [{2}]
+
+extension.log.job.plan.resolve=Finder grundlag for udvidelse [{0}] i navnerum [{1}]
+extension.log.job.plan.resolveOnNamespace=Finder grundlag for udvidelse [{0}] i alle navnerum
+extension.log.job.plan.resolvedependency=Finder grundlag for udvidelse [{0}] i navnerum [{1}]
+extension.log.job.plan.resolvedependencyOnNamespace=Finder grundlag for udvidelse [{0}] i alle navnerum
+
+extension.log.job.downloading=Henter udvidelse [{0}]
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_de.properties b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_de.properties
index 564d7c7..6cb6fbf 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_de.properties
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_de.properties
@@ -1,4 +1,86 @@
-## XWiki Translation for language de generated from http://www.l10n.xwiki.org
-extension.log.job.downloading=Download von Erweiterung [{0}]
+# ---------------------------------------------------------------------------
+# See the NOTICE file distributed with this work for additional
+# information regarding copyright ownership.
+#
+# This is free software; you can redistribute it and/or modify it
+# under the terms of the GNU Lesser General Public License as
+# published by the Free Software Foundation; either version 2.1 of
+# the License, or (at your option) any later version.
+#
+# This software is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this software; if not, write to the Free
+# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+# 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+# ---------------------------------------------------------------------------
+
+###############################################################################
+# This contains the translations of the module in the default language
+# (generally English).
+#
+# Translation key syntax:
+#   <short top level project name>.<short module name>.<propertyName>
+#   where:
+#   * <short top level project name> = top level project name without the "xwiki-" prefix,
+#                                     for example: commons, rendering, platform, enterprise, manager, etc
+#   * <short module name> = the name of the Maven module without the <short top level project name> prefix,
+#                           for example: oldcore, scheduler, activitystream, etc
+#   * <propertyName> = the name of the property using camel case,
+#                      for example updateJobClassCommitComment
+#
+# Comments: it's possible to add some detail about a key to make easier to
+#   translate it by adding a comment before it. To make sure a comment is not
+#   assigned to the following key use at least three sharps (###) for the comment
+#   or after it.
+#
+# Deprecated keys:
+#   * when deleting a key it should be moved to deprecated section at the end
+#     of the file (between #@deprecatedstart and #@deprecatedend) and associated to the
+#     first version in which it started to be deprecated
+#   * when renaming a key, it should be moved to the same deprecated section
+#     and a comment should be added with the following syntax:
+#     #@deprecated new.key.name
+#     old.key.name=Some translation
+###############################################################################
+
+# Those are generated keys with the same passed arguments
+# 0 is the action id (NONE, INSTALL, UPGRADE, DOWNGRADE, UNINSTALL)
+# 1 the new extension
+# 2 the namespace for which the action is executed
+# 3 is the previous extension
+###
+extension.log.job.install.begin=Installation der Erweiterung [{1}] in allen Bereichen
+extension.log.job.install.beginOnNamespace=Installation der Erweiterung [{1}] im Bereich [{2}]
+extension.log.job.install.success.end=Installation der Erweiterung [{1}] in allen Bereichen erfolgreich erfolgt
+extension.log.job.install.success.endOnNamespace=Installation der Erweiterung [{1}] war im Bereich [{2}] erfolgreich
+extension.log.job.install.failure.end=Installation der Erweiterung [{1}] war in allen Bereichen fehlerhaft
+extension.log.job.install.failure.endOnNamespace=Installation der Erweiterung [{1}] war im Bereich [{2}] fehlerhaft
+extension.log.job.upgrade.begin=Aktualisierung der Erweiterung(en) von {3} bis [{1}] in allen Bereichen
+extension.log.job.upgrade.beginOnNamespace=Installation der Erweiterung(en) von {3} bis [{1}] im Bereich [{2}]
+extension.log.job.upgrade.success.end=Aktualisierung der Erweiterung(en) von {3} bis [{1}] in allen Bereichen erfolgreich abgeschlossen
+extension.log.job.upgrade.success.endOnNamespace=Aktualisierung der Erweiterung(en) von {3} bis [{1}] im Bereich [{2}] erfolgreich abgeschlossen
+extension.log.job.upgrade.failure.end=Aktualisierung der Erweiterung(en) von {3} bis [{1}] in allen Bereichen fehlgeschlagen
+extension.log.job.upgrade.failure.endOnNamespace=Aktualisierung der Erweiterung(en) von {3} bis [{1}] im Bereich [{2}] fehlgeschlagen
+extension.log.job.downgrade.begin=Downgrade der Erweiterung(en) von {3} bis [{1}] in allen Bereichen
+extension.log.job.downgrade.beginOnNamespace=Downgrade der Erweiterung(en) von {3} bis [{1}] im Bereich [{2}]
+extension.log.job.downgrade.success.end=Downgrade der Erweiterung(en) von {3} bis [{1}] in allen Bereichen erfolgreich abgeschlossen
+extension.log.job.downgrade.success.endOnNamespace=Downgrade der Erweiterung(en) von {3} bis [{1}] im Bereich [{2}] erfolgreich abgeschlossen
+extension.log.job.downgrade.failure.end=Downgrade der Erweiterung(en) von {3} bis [{1}] in allen Bereichen fehlgeschlagen
+extension.log.job.downgrade.failure.endOnNamespace=Downgrade der Erweiterung(en) von {3} bis [{1}] im Bereich [{2}] fehlgeschlagen
+extension.log.job.uninstall.begin=Deinstalliere Erweiterung [{1}] aus allen Bereichen
+extension.log.job.uninstall.beginOnNamespace=Deinstalliere Erweiterung [{1}] aus Bereich [{2}]
+extension.log.job.uninstall.success.end=Deinstallation der Erweiterung [{1}] aus allen Bereichen erfolgreich abgeschlossen
+extension.log.job.uninstall.success.endOnNamespace=Deinstallation der Erweiterung [{1}] aus Bereich [{2}] erfolgreich abgeschlossen
+extension.log.job.uninstall.failure.end=Deinstallation der Erweiterung [{1}] aus allen Bereichen fehlgeschlagen
+extension.log.job.uninstall.failure.endOnNamespace=Deinstallation der Erweiterung [{1}] aus Bereich [{2}] fehlgeschlagen
+
 extension.log.job.plan.resolve=Ermittle [{0}] im Namensraum [{1}]
+extension.log.job.plan.resolveOnNamespace=Ermittle [{0}] in allen Bereichen
 extension.log.job.plan.resolvedependency=Ermittle Abh\u00E4ngigkeit [{0}] im Namensraum [{1}]
+extension.log.job.plan.resolvedependencyOnNamespace=Ermittle Abh\u00E4ngigkeit [{0}] in allen Bereichen
+
+extension.log.job.downloading=Download von Erweiterung [{0}]
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_fr.properties b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_fr.properties
index d9a24ed..73e8fca 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_fr.properties
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_fr.properties
@@ -1,30 +1,86 @@
-## XWiki Translation for language fr generated from http://www.l10n.xwiki.org
-extension.log.job.downgrade.begin=La r\u00E9trogradation de l''(les) extension(s) {3} vers l''(les) extension(s) {1} sur l''ensemble des espaces de noms a d\u00E9marr\u00E9.
-extension.log.job.downgrade.beginOnNamespace=La r\u00E9trogradation de l''(les) extension(s) {3} vers l''(les) extension(s) {1} sur l''espace de noms {2} a d\u00E9marr\u00E9.
-extension.log.job.downgrade.failure.end=La r\u00E9trogradation de l''(les) extension(s) {3} vers l''(les) extension(s) {1} sur l''ensemble des espaces de noms a \u00E9chou\u00E9.
-extension.log.job.downgrade.failure.endOnNamespace=La r\u00E9trogradation de l''(les) extension(s) {3} vers l''(les) extension(s) {1} sur l''espace de noms {2} a \u00E9chou\u00E9.
-extension.log.job.downgrade.success.end=La r\u00E9trogradation de l''(les) extension(s) {3} vers l''(les) extension(s) {1} sur l''ensemble des espaces de noms a r\u00E9ussi.
-extension.log.job.downgrade.success.endOnNamespace=La r\u00E9trogradation de l''(les) extension(s) {3} vers l''(les) extension(s) {1} sur l''espace de noms {2} a r\u00E9ussi.
-extension.log.job.downloading=T\u00E9l\u00E9chargement de l''extension [{0}]
+# ---------------------------------------------------------------------------
+# See the NOTICE file distributed with this work for additional
+# information regarding copyright ownership.
+#
+# This is free software; you can redistribute it and/or modify it
+# under the terms of the GNU Lesser General Public License as
+# published by the Free Software Foundation; either version 2.1 of
+# the License, or (at your option) any later version.
+#
+# This software is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this software; if not, write to the Free
+# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+# 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+# ---------------------------------------------------------------------------
+
+###############################################################################
+# This contains the translations of the module in the default language
+# (generally English).
+#
+# Translation key syntax:
+#   <short top level project name>.<short module name>.<propertyName>
+#   where:
+#   * <short top level project name> = top level project name without the "xwiki-" prefix,
+#                                     for example: commons, rendering, platform, enterprise, manager, etc
+#   * <short module name> = the name of the Maven module without the <short top level project name> prefix,
+#                           for example: oldcore, scheduler, activitystream, etc
+#   * <propertyName> = the name of the property using camel case,
+#                      for example updateJobClassCommitComment
+#
+# Comments: it's possible to add some detail about a key to make easier to
+#   translate it by adding a comment before it. To make sure a comment is not
+#   assigned to the following key use at least three sharps (###) for the comment
+#   or after it.
+#
+# Deprecated keys:
+#   * when deleting a key it should be moved to deprecated section at the end
+#     of the file (between #@deprecatedstart and #@deprecatedend) and associated to the
+#     first version in which it started to be deprecated
+#   * when renaming a key, it should be moved to the same deprecated section
+#     and a comment should be added with the following syntax:
+#     #@deprecated new.key.name
+#     old.key.name=Some translation
+###############################################################################
+
+# Those are generated keys with the same passed arguments
+# 0 is the action id (NONE, INSTALL, UPGRADE, DOWNGRADE, UNINSTALL)
+# 1 the new extension
+# 2 the namespace for which the action is executed
+# 3 is the previous extension
+###
 extension.log.job.install.begin=Installation de l''extension {1} sur l''ensemble des espaces de noms
 extension.log.job.install.beginOnNamespace=Installation de l''extension {1} sur l''espace de noms {2}
-extension.log.job.install.failure.end=L''installation de l''extension {1} sur l''ensemble des espaces de noms a \u00E9chou\u00E9.
-extension.log.job.install.failure.endOnNamespace=L''installation de l''extension {1} sur l''espace de noms {2} a \u00E9chou\u00E9.
-extension.log.job.install.success.end=L''installation de l''extension {1} sur l''ensemble des espaces de noms a r\u00E9ussi.
-extension.log.job.install.success.endOnNamespace=L''installation de l''extension {1} sur l''espace de noms {2} a r\u00E9ussi.
+extension.log.job.install.success.end=L''installation de l''extension {1} sur l''ensemble des espaces de noms a r\u00E9ussi
+extension.log.job.install.success.endOnNamespace=L''installation de l''extension {1} sur l''espace de noms {2} a r\u00E9ussi
+extension.log.job.install.failure.end=L''installation de l''extension {1} sur l''ensemble des espaces de noms a \u00E9chou\u00E9
+extension.log.job.install.failure.endOnNamespace=L''installation de l''extension {1} sur l''espace de noms {2} a \u00E9chou\u00E9
+extension.log.job.upgrade.begin=La mise \u00E0 jour de l''(les) extension(s) {3} par l''(les) extension(s) {1} sur l''ensemble des espaces de noms a d\u00E9marr\u00E9
+extension.log.job.upgrade.beginOnNamespace=La mise \u00E0 jour de l''(les) extension(s) {3} par l''(les) extension(s) {1} sur l''espace de noms {2} a d\u00E9marr\u00E9
+extension.log.job.upgrade.success.end=La mise \u00E0 jour de l''(les) extension(s) {3} par l''(les) extension(s) {1} sur l''ensemble des espaces de noms a r\u00E9ussi
+extension.log.job.upgrade.success.endOnNamespace=La mise \u00E0 jour de l''(les) extension(s) {3} par l''(les) extension(s) {1} sur l''espace de noms {2} a r\u00E9ussi
+extension.log.job.upgrade.failure.end=La mise \u00E0 jour de l''(les) extension(s) {3} par l''(les) extension(s) {1} sur l''ensemble des espaces de noms a \u00E9chou\u00E9
+extension.log.job.upgrade.failure.endOnNamespace=La mise \u00E0 jour de l''(les) extension(s) {3} par l''(les) extension(s) {1} sur l''espace de noms {2} a \u00E9chou\u00E9
+extension.log.job.downgrade.begin=La r\u00E9trogradation de l''(les) extension(s) {3} vers l''(les) extension(s) {1} sur l''ensemble des espaces de noms a d\u00E9marr\u00E9
+extension.log.job.downgrade.beginOnNamespace=La r\u00E9trogradation de l''(les) extension(s) {3} vers l''(les) extension(s) {1} sur l''espace de noms {2} a d\u00E9marr\u00E9
+extension.log.job.downgrade.success.end=La r\u00E9trogradation de l''(les) extension(s) {3} vers l''(les) extension(s) {1} sur l''ensemble des espaces de noms a r\u00E9ussi
+extension.log.job.downgrade.success.endOnNamespace=La r\u00E9trogradation de l''(les) extension(s) {3} vers l''(les) extension(s) {1} sur l''espace de noms {2} a r\u00E9ussi
+extension.log.job.downgrade.failure.end=La r\u00E9trogradation de l''(les) extension(s) {3} vers l''(les) extension(s) {1} sur l''ensemble des espaces de noms a \u00E9chou\u00E9
+extension.log.job.downgrade.failure.endOnNamespace=La r\u00E9trogradation de l''(les) extension(s) {3} vers l''(les) extension(s) {1} sur l''espace de noms {2} a \u00E9chou\u00E9
+extension.log.job.uninstall.begin=D\u00E9sinstallation de l''extension {1} de l''ensemble des espaces de noms
+extension.log.job.uninstall.beginOnNamespace=D\u00E9sinstallation de l''extension {1} de l''espace de noms {2}
+extension.log.job.uninstall.success.end=La d\u00E9sinstallation de l''extension {1} de l''ensemble des espaces de noms a r\u00E9ussi
+extension.log.job.uninstall.success.endOnNamespace=D\u00E9sinstallation de l''extension {1} de l''espace de noms {2} a r\u00E9ussi
+extension.log.job.uninstall.failure.end=La d\u00E9sinstallation de l''extension {1} de l''ensemble des espaces de noms a \u00E9chou\u00E9
+extension.log.job.uninstall.failure.endOnNamespace=La d\u00E9sinstallation de l''extension {1} de l''espace de noms {2} a \u00E9chou\u00E9
+
 extension.log.job.plan.resolve=Recherche de l''extension {0} sur l''espace de noms {1}
 extension.log.job.plan.resolveOnNamespace=Recherche de l''extension {0} sur l''ensemble des espaces de noms
 extension.log.job.plan.resolvedependency=Recherche des d\u00E9pendances de l''extension {0} sur l''espace de noms {1}
 extension.log.job.plan.resolvedependencyOnNamespace=Recherche des d\u00E9pendances de l''extension {0} sur l''ensemble des espaces de noms
-extension.log.job.uninstall.begin=D\u00E9sinstallation de l''extension {1} de l''ensemble des espaces de noms
-extension.log.job.uninstall.beginOnNamespace=D\u00E9sinstallation de l''extension {1} de l''espace de noms {2}
-extension.log.job.uninstall.failure.end=La d\u00E9sinstallation de l''extension {1} de l''ensemble des espaces de noms a \u00E9chou\u00E9.
-extension.log.job.uninstall.failure.endOnNamespace=La d\u00E9sinstallation de l''extension {1} de l''espace de noms {2} a \u00E9chou\u00E9.
-extension.log.job.uninstall.success.end=La d\u00E9sinstallation de l''extension {1} de l''ensemble des espaces de noms a r\u00E9ussi.
-extension.log.job.uninstall.success.endOnNamespace=D\u00E9sinstallation de l''extension {1} de l''espace de noms {2} a r\u00E9ussi.
-extension.log.job.upgrade.begin=La mise \u00E0 jour de l''(les) extension(s) {3} par l''(les) extension(s) {1} sur l''ensemble des espaces de noms a d\u00E9marr\u00E9.
-extension.log.job.upgrade.beginOnNamespace=La mise \u00E0 jour de l''(les) extension(s) {3} par l''(les) extension(s) {1} sur l''espace de noms {2} a d\u00E9marr\u00E9.
-extension.log.job.upgrade.failure.end=La mise \u00E0 jour de l''(les) extension(s) {3} par l''(les) extension(s) {1} sur l''ensemble des espaces de noms a \u00E9chou\u00E9.
-extension.log.job.upgrade.failure.endOnNamespace=La mise \u00E0 jour de l''(les) extension(s) {3} par l''(les) extension(s) {1} sur l''espace de noms {2} a \u00E9chou\u00E9.
-extension.log.job.upgrade.success.end=La mise \u00E0 jour de l''(les) extension(s) {3} par l''(les) extension(s) {1} sur l''ensemble des espaces de noms a r\u00E9ussi.
-extension.log.job.upgrade.success.endOnNamespace=La mise \u00E0 jour de l''(les) extension(s) {3} par l''(les) extension(s) {1} sur l''espace de noms {2} a r\u00E9ussi.
+
+extension.log.job.downloading=T\u00E9l\u00E9chargement de l''extension [{0}]
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_hr.properties b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_hr.properties
index cdacb0d..d68d597 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_hr.properties
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_hr.properties
@@ -1,30 +1,86 @@
-## XWiki Translation for language hr generated from http://www.l10n.xwiki.org
-extension.log.job.downgrade.begin=Degradiranje od ekstenzije(a) {3} do ekstenzije [{1}] u svim imenicima
-extension.log.job.downgrade.beginOnNamespace=Degradiranje od ekstenzije(a) {3} do ekstenzije [{1}] u imeniku [{2}]
-extension.log.job.downgrade.failure.end=Neuspje\u0161no degradiranje od ekstenzije(a) {3} do ekstenzije [{1}] u svim imenicima
-extension.log.job.downgrade.failure.endOnNamespace=Neuspje\u0161no degradiranje od ekstenzije(a) {3} do ekstenzije [{1}] u imeniku [{2}]
-extension.log.job.downgrade.success.end=Uspje\u0161no degradiranje od ekstenzije(a) {3} do ekstenzije [{1}] u svim imenicima
-extension.log.job.downgrade.success.endOnNamespace=Uspje\u0161no degradiranje od ekstenzije(a) {3} do ekstenzije [{1}] u imeniku [{2}]
-extension.log.job.downloading=Preuzimanje ekstenzije [{0}]
+# ---------------------------------------------------------------------------
+# See the NOTICE file distributed with this work for additional
+# information regarding copyright ownership.
+#
+# This is free software; you can redistribute it and/or modify it
+# under the terms of the GNU Lesser General Public License as
+# published by the Free Software Foundation; either version 2.1 of
+# the License, or (at your option) any later version.
+#
+# This software is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this software; if not, write to the Free
+# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+# 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+# ---------------------------------------------------------------------------
+
+###############################################################################
+# This contains the translations of the module in the default language
+# (generally English).
+#
+# Translation key syntax:
+#   <short top level project name>.<short module name>.<propertyName>
+#   where:
+#   * <short top level project name> = top level project name without the "xwiki-" prefix,
+#                                     for example: commons, rendering, platform, enterprise, manager, etc
+#   * <short module name> = the name of the Maven module without the <short top level project name> prefix,
+#                           for example: oldcore, scheduler, activitystream, etc
+#   * <propertyName> = the name of the property using camel case,
+#                      for example updateJobClassCommitComment
+#
+# Comments: it's possible to add some detail about a key to make easier to
+#   translate it by adding a comment before it. To make sure a comment is not
+#   assigned to the following key use at least three sharps (###) for the comment
+#   or after it.
+#
+# Deprecated keys:
+#   * when deleting a key it should be moved to deprecated section at the end
+#     of the file (between #@deprecatedstart and #@deprecatedend) and associated to the
+#     first version in which it started to be deprecated
+#   * when renaming a key, it should be moved to the same deprecated section
+#     and a comment should be added with the following syntax:
+#     #@deprecated new.key.name
+#     old.key.name=Some translation
+###############################################################################
+
+# Those are generated keys with the same passed arguments
+# 0 is the action id (NONE, INSTALL, UPGRADE, DOWNGRADE, UNINSTALL)
+# 1 the new extension
+# 2 the namespace for which the action is executed
+# 3 is the previous extension
+###
 extension.log.job.install.begin=Instalacija ekstenzije [{1}] u sve imenike
 extension.log.job.install.beginOnNamespace=Instalacija ekstenzije [{1}] u imenik [{2}]
-extension.log.job.install.failure.end=Neuspje\u0161na instalacija ekstenzije [{1}] u sve imenike
-extension.log.job.install.failure.endOnNamespace=Neuspje\u0161na instalacija ekstenzije [{1}] u imenik [{2}]
 extension.log.job.install.success.end=Uspje\u0161na instalacija ekstenzije [{1}] u sve imenike
 extension.log.job.install.success.endOnNamespace=Uspje\u0161na instalacija ekstenzije [{1}] u imenik [{2}]
-extension.log.job.plan.resolve=Utvr\u0111ivanje ekstenzije [{0}] u imeniku [{1}]
-extension.log.job.plan.resolveOnNamespace=Utvr\u0111ivanje ekstenzije [{0}] u svim imenicima
-extension.log.job.plan.resolvedependency=Utvr\u0111ivanje ekstenzije [{0}] u imeniku [{1}]
-extension.log.job.plan.resolvedependencyOnNamespace=Utvr\u0111ivanje ekstenzije [{0}] u svim imenicima
-extension.log.job.uninstall.begin=Deinstalacija ekstenzije [{1}] iz svih imenika
-extension.log.job.uninstall.beginOnNamespace=Deinstalacija ekstenzije [{1}] iz imenika [{2}]
-extension.log.job.uninstall.failure.end=Neuspje\u0161na deinstalacija ekstenzije [{1}] iz svih imenika
-extension.log.job.uninstall.failure.endOnNamespace=Neuspje\u0161na deinstalacija ekstenzije [{1}] iz imenika [{2}]
-extension.log.job.uninstall.success.end=Uspje\u0161na deinstalacija ekstenzije [{1}] iz svih imenika
-extension.log.job.uninstall.success.endOnNamespace=Uspje\u0161na deinstalacija ekstenzije [{1}] iz imenika [{2}]
+extension.log.job.install.failure.end=Neuspje\u0161na instalacija ekstenzije [{1}] u sve imenike
+extension.log.job.install.failure.endOnNamespace=Neuspje\u0161na instalacija ekstenzije [{1}] u imenik [{2}]
 extension.log.job.upgrade.begin=Nadogradnja od ekstenzije(a) {3} do ekstenzije [{1}] u svim imenicima
 extension.log.job.upgrade.beginOnNamespace=Nadogradnja od ekstenzije(a) {3} do ekstenzije [{1}] u imeniku [{2}]
-extension.log.job.upgrade.failure.end=Neuspje\u0161na nadogradnja od ekstenzije(a) {3} do ekstenzije [{1}] u svim imenicima
-extension.log.job.upgrade.failure.endOnNamespace=Neuspje\u0161na nadogradnja od ekstenzije(a) {3} do ekstenzije [{1}] u imeniku [{2}]
 extension.log.job.upgrade.success.end=Uspje\u0161na nadogradnja od ekstenzije(a) {3} do ekstenzije [{1}] u svim imenicima
 extension.log.job.upgrade.success.endOnNamespace=Uspje\u0161na nadogradnja od ekstenzije(a) {3} do ekstenzije [{1}] u imeniku [{2}]
+extension.log.job.upgrade.failure.end=Neuspje\u0161na nadogradnja od ekstenzije(a) {3} do ekstenzije [{1}] u svim imenicima
+extension.log.job.upgrade.failure.endOnNamespace=Neuspje\u0161na nadogradnja od ekstenzije(a) {3} do ekstenzije [{1}] u imeniku [{2}]
+extension.log.job.downgrade.begin=Degradiranje od ekstenzije(a) {3} do ekstenzije [{1}] u svim imenicima
+extension.log.job.downgrade.beginOnNamespace=Degradiranje od ekstenzije(a) {3} do ekstenzije [{1}] u imeniku [{2}]
+extension.log.job.downgrade.success.end=Uspje\u0161no degradiranje od ekstenzije(a) {3} do ekstenzije [{1}] u svim imenicima
+extension.log.job.downgrade.success.endOnNamespace=Uspje\u0161no degradiranje od ekstenzije(a) {3} do ekstenzije [{1}] u imeniku [{2}]
+extension.log.job.downgrade.failure.end=Neuspje\u0161no degradiranje od ekstenzije(a) {3} do ekstenzije [{1}] u svim imenicima
+extension.log.job.downgrade.failure.endOnNamespace=Neuspje\u0161no degradiranje od ekstenzije(a) {3} do ekstenzije [{1}] u imeniku [{2}]
+extension.log.job.uninstall.begin=Deinstalacija ekstenzije [{1}] iz svih imenika
+extension.log.job.uninstall.beginOnNamespace=Deinstalacija ekstenzije [{1}] iz imenika [{2}]
+extension.log.job.uninstall.success.end=Uspje\u0161na deinstalacija ekstenzije [{1}] iz svih imenika
+extension.log.job.uninstall.success.endOnNamespace=Uspje\u0161na deinstalacija ekstenzije [{1}] iz imenika [{2}]
+extension.log.job.uninstall.failure.end=Neuspje\u0161na deinstalacija ekstenzije [{1}] iz svih imenika
+extension.log.job.uninstall.failure.endOnNamespace=Neuspje\u0161na deinstalacija ekstenzije [{1}] iz imenika [{2}]
+
+extension.log.job.plan.resolve=Utvr\u0111ivanje ekstenzije [{0}] u imeniku [{1}]
+extension.log.job.plan.resolveOnNamespace=Utvr\u0111ivanje ekstenzije [{0}] u svim imenicima
+extension.log.job.plan.resolvedependency=Utvr\u0111ivanje ekstenzije [{0}] u imeniku [{1}]
+extension.log.job.plan.resolvedependencyOnNamespace=Utvr\u0111ivanje ekstenzije [{0}] u svim imenicima
+
+extension.log.job.downloading=Preuzimanje ekstenzije [{0}]
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_id.properties b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_id.properties
new file mode 100644
index 0000000..3ec218c
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_id.properties
@@ -0,0 +1,86 @@
+# ---------------------------------------------------------------------------
+# See the NOTICE file distributed with this work for additional
+# information regarding copyright ownership.
+#
+# This is free software; you can redistribute it and/or modify it
+# under the terms of the GNU Lesser General Public License as
+# published by the Free Software Foundation; either version 2.1 of
+# the License, or (at your option) any later version.
+#
+# This software is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this software; if not, write to the Free
+# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+# 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+# ---------------------------------------------------------------------------
+
+###############################################################################
+# This contains the translations of the module in the default language
+# (generally English).
+#
+# Translation key syntax:
+#   <short top level project name>.<short module name>.<propertyName>
+#   where:
+#   * <short top level project name> = top level project name without the "xwiki-" prefix,
+#                                     for example: commons, rendering, platform, enterprise, manager, etc
+#   * <short module name> = the name of the Maven module without the <short top level project name> prefix,
+#                           for example: oldcore, scheduler, activitystream, etc
+#   * <propertyName> = the name of the property using camel case,
+#                      for example updateJobClassCommitComment
+#
+# Comments: it's possible to add some detail about a key to make easier to
+#   translate it by adding a comment before it. To make sure a comment is not
+#   assigned to the following key use at least three sharps (###) for the comment
+#   or after it.
+#
+# Deprecated keys:
+#   * when deleting a key it should be moved to deprecated section at the end
+#     of the file (between #@deprecatedstart and #@deprecatedend) and associated to the
+#     first version in which it started to be deprecated
+#   * when renaming a key, it should be moved to the same deprecated section
+#     and a comment should be added with the following syntax:
+#     #@deprecated new.key.name
+#     old.key.name=Some translation
+###############################################################################
+
+# Those are generated keys with the same passed arguments
+# 0 is the action id (NONE, INSTALL, UPGRADE, DOWNGRADE, UNINSTALL)
+# 1 the new extension
+# 2 the namespace for which the action is executed
+# 3 is the previous extension
+###
+### Missing: extension.log.job.install.begin=Installing extension [{1}] on all namespaces
+### Missing: extension.log.job.install.beginOnNamespace=Installing extension [{1}] on namespace [{2}]
+### Missing: extension.log.job.install.success.end=Successfully installed extension [{1}] on all namespaces
+### Missing: extension.log.job.install.success.endOnNamespace=Successfully installed extension [{1}] on namespace [{2}]
+### Missing: extension.log.job.install.failure.end=Failed to install extension [{1}] on all namespaces
+### Missing: extension.log.job.install.failure.endOnNamespace=Failed to install extension [{1}] on namespace [{2}]
+### Missing: extension.log.job.upgrade.begin=Upgrading from extension(s) {3} to extension [{1}] on all namespaces
+### Missing: extension.log.job.upgrade.beginOnNamespace=Upgrading from extension(s) {3} to extension [{1}] on namespace [{2}]
+### Missing: extension.log.job.upgrade.success.end=Successfully upgraded from extension(s) {3} to extension [{1}] on all namespaces
+### Missing: extension.log.job.upgrade.success.endOnNamespace=Successfully upgraded from extension(s) {3} to extension [{1}] on namespace [{2}]
+### Missing: extension.log.job.upgrade.failure.end=Failed to upgrade from extension(s) {3} to extension [{1}] on all namespaces
+### Missing: extension.log.job.upgrade.failure.endOnNamespace=Failed to upgrade from extension(s) {3} to extension [{1}] on namespace [{2}]
+### Missing: extension.log.job.downgrade.begin=Downgrading from extension(s) {3} to extension [{1}] on all namespaces
+### Missing: extension.log.job.downgrade.beginOnNamespace=Downgrading from extension(s) {3} to extension [{1}] on namespace [{2}]
+### Missing: extension.log.job.downgrade.success.end=Successfully downgraded from extension(s) {3} to extension [{1}] on all namespaces
+### Missing: extension.log.job.downgrade.success.endOnNamespace=Successfully downgraded from extension(s) {3} to extension [{1}] on namespace [{2}]
+### Missing: extension.log.job.downgrade.failure.end=Failed to downgrade from extension(s) {3} to extension [{1}] on all namespaces
+### Missing: extension.log.job.downgrade.failure.endOnNamespace=Failed to downgrade from extension(s) {3} to extension [{1}] on namespace [{2}]
+### Missing: extension.log.job.uninstall.begin=Uninstalling extension [{1}] from all namespaces
+### Missing: extension.log.job.uninstall.beginOnNamespace=Uninstalling extension [{1}] on namespace [{2}]
+### Missing: extension.log.job.uninstall.success.end=Successfully uninstalled extension [{1}] from all namespaces
+### Missing: extension.log.job.uninstall.success.endOnNamespace=Successfully uninstalled extension [{1}] from namespace [{2}]
+### Missing: extension.log.job.uninstall.failure.end=Failed to uninstall extension [{1}] from all namespaces
+### Missing: extension.log.job.uninstall.failure.endOnNamespace=Failed to uninstall extension [{1}] from namespace [{2}]
+
+### Missing: extension.log.job.plan.resolve=Resolving extension [{0}] on namespace [{1}]
+### Missing: extension.log.job.plan.resolveOnNamespace=Resolving extension [{0}] on all namespaces
+### Missing: extension.log.job.plan.resolvedependency=Resolving extension [{0}] on namespace [{1}]
+### Missing: extension.log.job.plan.resolvedependencyOnNamespace=Resolving extension [{0}] on all namespaces
+
+### Missing: extension.log.job.downloading=Downloading extension [{0}]
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_lv.properties b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_lv.properties
index 159a4c5..6e5d7b7 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_lv.properties
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_lv.properties
@@ -1,30 +1,86 @@
-## XWiki Translation for language lv generated from http://www.l10n.xwiki.org
-extension.log.job.downgrade.begin=Novecina no papla\u0161in\u0101juma(iem) {3} uz papla\u0161in\u0101jumu [{1}] vis\u0101s v\u0101rdtelp\u0101s
-extension.log.job.downgrade.beginOnNamespace=Novecina no papla\u0161in\u0101juma(iem) {3} uz papla\u0161in\u0101jumu [{1}] v\u0101rdtelp\u0101 [{2}]
-extension.log.job.downgrade.failure.end=Neizdev\u0101s novecin\u0101t nopapla\u0161in\u0101juma(iem) {3} uz papla\u0161in\u0101jumu [{1}] vis\u0101s v\u0101rdtelp\u0101s
-extension.log.job.downgrade.failure.endOnNamespace=Neizdev\u0101s novecin\u0101t no papla\u0161in\u0101juma(iem) {3} uz papla\u0161in\u0101jumu [{1}] v\u0101rdtelp\u0101 [{2}]
-extension.log.job.downgrade.success.end=Veiksm\u012Bgi novecin\u0101ju no papla\u0161in\u0101juma(iem) {3} uz papla\u0161in\u0101jumu [{1}] vis\u0101s v\u0101rdtelp\u0101s
-extension.log.job.downgrade.success.endOnNamespace=Veiksm\u012Bgi novecin\u0101ju no papla\u0161in\u0101juma(iem) {3} uz papla\u0161in\u0101jumu [{1}] v\u0101rdtelp\u0101 [{2}]
-extension.log.job.downloading=Lejupl\u0101d\u0113 papla\u0161in\u0101jumu [{0}]
+# ---------------------------------------------------------------------------
+# See the NOTICE file distributed with this work for additional
+# information regarding copyright ownership.
+#
+# This is free software; you can redistribute it and/or modify it
+# under the terms of the GNU Lesser General Public License as
+# published by the Free Software Foundation; either version 2.1 of
+# the License, or (at your option) any later version.
+#
+# This software is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this software; if not, write to the Free
+# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+# 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+# ---------------------------------------------------------------------------
+
+###############################################################################
+# This contains the translations of the module in the default language
+# (generally English).
+#
+# Translation key syntax:
+#   <short top level project name>.<short module name>.<propertyName>
+#   where:
+#   * <short top level project name> = top level project name without the "xwiki-" prefix,
+#                                     for example: commons, rendering, platform, enterprise, manager, etc
+#   * <short module name> = the name of the Maven module without the <short top level project name> prefix,
+#                           for example: oldcore, scheduler, activitystream, etc
+#   * <propertyName> = the name of the property using camel case,
+#                      for example updateJobClassCommitComment
+#
+# Comments: it's possible to add some detail about a key to make easier to
+#   translate it by adding a comment before it. To make sure a comment is not
+#   assigned to the following key use at least three sharps (###) for the comment
+#   or after it.
+#
+# Deprecated keys:
+#   * when deleting a key it should be moved to deprecated section at the end
+#     of the file (between #@deprecatedstart and #@deprecatedend) and associated to the
+#     first version in which it started to be deprecated
+#   * when renaming a key, it should be moved to the same deprecated section
+#     and a comment should be added with the following syntax:
+#     #@deprecated new.key.name
+#     old.key.name=Some translation
+###############################################################################
+
+# Those are generated keys with the same passed arguments
+# 0 is the action id (NONE, INSTALL, UPGRADE, DOWNGRADE, UNINSTALL)
+# 1 the new extension
+# 2 the namespace for which the action is executed
+# 3 is the previous extension
+###
 extension.log.job.install.begin=Uzst\u0101da papla\u0161in\u0101jumu [{1}] vis\u0101s v\u0101rdtelp\u0101s
 extension.log.job.install.beginOnNamespace=Uzst\u0101da papla\u0161in\u0101jumu [{1}] v\u0101rdtelp\u0101 [{2}]
-extension.log.job.install.failure.end=Neizdev\u0101s uzst\u0101d\u012Bt papla\u0161in\u0101jumu [{1}] vis\u0101s v\u0101rdtelp\u0101s
-extension.log.job.install.failure.endOnNamespace=Neizdev\u0101s uzst\u0101d\u012Bt papla\u0161in\u0101jumu[{1}] v\u0101rdtelp\u0101 [{2}]
 extension.log.job.install.success.end=Sekm\u012Bgi uzst\u0101d\u012Bju papla\u0161in\u0101jumu [{1}] vis\u0101s v\u0101rdtelp\u0101s
 extension.log.job.install.success.endOnNamespace=Sekm\u012Bgi uzst\u0101d\u012Bju papla\u0161in\u0101jumu [{1}] v\u0101rdtelp\u0101 [{2}]
-extension.log.job.plan.resolve=Mekl\u0113ju papla\u0161in\u0101jumu [{0}] v\u0101rdtelp\u0101 [{1}]
-extension.log.job.plan.resolveOnNamespace=Mekl\u0113ju papla\u0161in\u0101jumu [{0}] vis\u0101s v\u0101rdtelp\u0101s
-extension.log.job.plan.resolvedependency=Mekl\u0113ju papla\u0161in\u0101jumu [{0}] v\u0101rdtelp\u0101 [{1}]
-extension.log.job.plan.resolvedependencyOnNamespace=Mekl\u0113ju papla\u0161in\u0101jumu [{0}] vis\u0101s v\u0101rdtelp\u0101s
-extension.log.job.uninstall.begin=No\u0146emu papla\u0161in\u0101jumu [{1}] vis\u0101s v\u0101rdtelp\u0101s
-extension.log.job.uninstall.beginOnNamespace=No\u0146emu papla\u0161in\u0101jumu [{1}] v\u0101rdtelp\u0101 [{2}]
-extension.log.job.uninstall.failure.end=Neizdev\u0101s no\u0146emt papla\u0161in\u0101jumu[{1}] vis\u0101s v\u0101rdtelp\u0101s
-extension.log.job.uninstall.failure.endOnNamespace=Neizdev\u0101s no\u0146emt papla\u0161in\u0101jumu[{1}] v\u0101rdtelp\u0101 [{2}]
-extension.log.job.uninstall.success.end=Veiksm\u012Bgi no\u0146\u0113mu papla\u0161in\u0101jumu [{1}] vis\u0101s v\u0101rdtelp\u0101s
-extension.log.job.uninstall.success.endOnNamespace=Veiksm\u012Bgi no\u0146\u0113mu papla\u0161in\u0101jumu [{1}] v\u0101rdtelp\u0101 [{2}]
+extension.log.job.install.failure.end=Neizdev\u0101s uzst\u0101d\u012Bt papla\u0161in\u0101jumu [{1}] vis\u0101s v\u0101rdtelp\u0101s
+extension.log.job.install.failure.endOnNamespace=Neizdev\u0101s uzst\u0101d\u012Bt papla\u0161in\u0101jumu[{1}] v\u0101rdtelp\u0101 [{2}]
 extension.log.job.upgrade.begin=Atjaunoju no papla\u0161in\u0101juma(iem) {3} uz papla\u0161in\u0101jumu [{1}] vis\u0101s v\u0101rdtelp\u0101s
 extension.log.job.upgrade.beginOnNamespace=Atjauno no papla\u0161in\u0101juma(iem) {3} uz papla\u0161in\u0101jumu [{1}] v\u0101rdtelp\u0101 [{2}]
-extension.log.job.upgrade.failure.end=Neizdev\u0101s atjaunot no papla\u0161in\u0101juma(iem) {3} uz papla\u0161in\u0101jumu [{1}] vis\u0101s v\u0101rdtelp\u0101s
-extension.log.job.upgrade.failure.endOnNamespace=Neizdev\u0101s atjaunot no papla\u0161in\u0101juma(iem) {3} uz papla\u0161in\u0101jumu [{1}] v\u0101rdtelp\u0101 [{2}]
 extension.log.job.upgrade.success.end=Veiksm\u012Bgi atjaunoju no papla\u0161in\u0101juma(iem) {3} uz papla\u0161in\u0101jumu [{1}] vis\u0101s sirdstelp\u0101s
 extension.log.job.upgrade.success.endOnNamespace=Veiksm\u012Bgi atjaunoju no papla\u0161in\u0101juma(iem) {3} uz papla\u0161in\u0101jumu [{1}] v\u0101rdtelp\u0101 [{2}]
+extension.log.job.upgrade.failure.end=Neizdev\u0101s atjaunot no papla\u0161in\u0101juma(iem) {3} uz papla\u0161in\u0101jumu [{1}] vis\u0101s v\u0101rdtelp\u0101s
+extension.log.job.upgrade.failure.endOnNamespace=Neizdev\u0101s atjaunot no papla\u0161in\u0101juma(iem) {3} uz papla\u0161in\u0101jumu [{1}] v\u0101rdtelp\u0101 [{2}]
+extension.log.job.downgrade.begin=Novecina no papla\u0161in\u0101juma(iem) {3} uz papla\u0161in\u0101jumu [{1}] vis\u0101s v\u0101rdtelp\u0101s
+extension.log.job.downgrade.beginOnNamespace=Novecina no papla\u0161in\u0101juma(iem) {3} uz papla\u0161in\u0101jumu [{1}] v\u0101rdtelp\u0101 [{2}]
+extension.log.job.downgrade.success.end=Veiksm\u012Bgi novecin\u0101ju no papla\u0161in\u0101juma(iem) {3} uz papla\u0161in\u0101jumu [{1}] vis\u0101s v\u0101rdtelp\u0101s
+extension.log.job.downgrade.success.endOnNamespace=Veiksm\u012Bgi novecin\u0101ju no papla\u0161in\u0101juma(iem) {3} uz papla\u0161in\u0101jumu [{1}] v\u0101rdtelp\u0101 [{2}]
+extension.log.job.downgrade.failure.end=Neizdev\u0101s novecin\u0101t nopapla\u0161in\u0101juma(iem) {3} uz papla\u0161in\u0101jumu [{1}] vis\u0101s v\u0101rdtelp\u0101s
+extension.log.job.downgrade.failure.endOnNamespace=Neizdev\u0101s novecin\u0101t no papla\u0161in\u0101juma(iem) {3} uz papla\u0161in\u0101jumu [{1}] v\u0101rdtelp\u0101 [{2}]
+extension.log.job.uninstall.begin=No\u0146emu papla\u0161in\u0101jumu [{1}] vis\u0101s v\u0101rdtelp\u0101s
+extension.log.job.uninstall.beginOnNamespace=No\u0146emu papla\u0161in\u0101jumu [{1}] v\u0101rdtelp\u0101 [{2}]
+extension.log.job.uninstall.success.end=Veiksm\u012Bgi no\u0146\u0113mu papla\u0161in\u0101jumu [{1}] vis\u0101s v\u0101rdtelp\u0101s
+extension.log.job.uninstall.success.endOnNamespace=Veiksm\u012Bgi no\u0146\u0113mu papla\u0161in\u0101jumu [{1}] v\u0101rdtelp\u0101 [{2}]
+extension.log.job.uninstall.failure.end=Neizdev\u0101s no\u0146emt papla\u0161in\u0101jumu[{1}] vis\u0101s v\u0101rdtelp\u0101s
+extension.log.job.uninstall.failure.endOnNamespace=Neizdev\u0101s no\u0146emt papla\u0161in\u0101jumu[{1}] v\u0101rdtelp\u0101 [{2}]
+
+extension.log.job.plan.resolve=Mekl\u0113ju papla\u0161in\u0101jumu [{0}] v\u0101rdtelp\u0101 [{1}]
+extension.log.job.plan.resolveOnNamespace=Mekl\u0113ju papla\u0161in\u0101jumu [{0}] vis\u0101s v\u0101rdtelp\u0101s
+extension.log.job.plan.resolvedependency=Mekl\u0113ju papla\u0161in\u0101jumu [{0}] v\u0101rdtelp\u0101 [{1}]
+extension.log.job.plan.resolvedependencyOnNamespace=Mekl\u0113ju papla\u0161in\u0101jumu [{0}] vis\u0101s v\u0101rdtelp\u0101s
+
+extension.log.job.downloading=Lejupl\u0101d\u0113 papla\u0161in\u0101jumu [{0}]
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_pt_BR.properties b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_pt_BR.properties
index dd50b105..858d7ca 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_pt_BR.properties
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_pt_BR.properties
@@ -1,5 +1,86 @@
-## XWiki Translation for language pt_BR generated from http://www.l10n.xwiki.org
+# ---------------------------------------------------------------------------
+# See the NOTICE file distributed with this work for additional
+# information regarding copyright ownership.
+#
+# This is free software; you can redistribute it and/or modify it
+# under the terms of the GNU Lesser General Public License as
+# published by the Free Software Foundation; either version 2.1 of
+# the License, or (at your option) any later version.
+#
+# This software is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this software; if not, write to the Free
+# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+# 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+# ---------------------------------------------------------------------------
+
+###############################################################################
+# This contains the translations of the module in the default language
+# (generally English).
+#
+# Translation key syntax:
+#   <short top level project name>.<short module name>.<propertyName>
+#   where:
+#   * <short top level project name> = top level project name without the "xwiki-" prefix,
+#                                     for example: commons, rendering, platform, enterprise, manager, etc
+#   * <short module name> = the name of the Maven module without the <short top level project name> prefix,
+#                           for example: oldcore, scheduler, activitystream, etc
+#   * <propertyName> = the name of the property using camel case,
+#                      for example updateJobClassCommitComment
+#
+# Comments: it's possible to add some detail about a key to make easier to
+#   translate it by adding a comment before it. To make sure a comment is not
+#   assigned to the following key use at least three sharps (###) for the comment
+#   or after it.
+#
+# Deprecated keys:
+#   * when deleting a key it should be moved to deprecated section at the end
+#     of the file (between #@deprecatedstart and #@deprecatedend) and associated to the
+#     first version in which it started to be deprecated
+#   * when renaming a key, it should be moved to the same deprecated section
+#     and a comment should be added with the following syntax:
+#     #@deprecated new.key.name
+#     old.key.name=Some translation
+###############################################################################
+
+# Those are generated keys with the same passed arguments
+# 0 is the action id (NONE, INSTALL, UPGRADE, DOWNGRADE, UNINSTALL)
+# 1 the new extension
+# 2 the namespace for which the action is executed
+# 3 is the previous extension
+###
+extension.log.job.install.begin=Instalando complemento [{1}] em todos os namespaces
+### Missing: extension.log.job.install.beginOnNamespace=Installing extension [{1}] on namespace [{2}]
+### Missing: extension.log.job.install.success.end=Successfully installed extension [{1}] on all namespaces
+### Missing: extension.log.job.install.success.endOnNamespace=Successfully installed extension [{1}] on namespace [{2}]
+### Missing: extension.log.job.install.failure.end=Failed to install extension [{1}] on all namespaces
+### Missing: extension.log.job.install.failure.endOnNamespace=Failed to install extension [{1}] on namespace [{2}]
+### Missing: extension.log.job.upgrade.begin=Upgrading from extension(s) {3} to extension [{1}] on all namespaces
+### Missing: extension.log.job.upgrade.beginOnNamespace=Upgrading from extension(s) {3} to extension [{1}] on namespace [{2}]
+### Missing: extension.log.job.upgrade.success.end=Successfully upgraded from extension(s) {3} to extension [{1}] on all namespaces
+### Missing: extension.log.job.upgrade.success.endOnNamespace=Successfully upgraded from extension(s) {3} to extension [{1}] on namespace [{2}]
+### Missing: extension.log.job.upgrade.failure.end=Failed to upgrade from extension(s) {3} to extension [{1}] on all namespaces
+### Missing: extension.log.job.upgrade.failure.endOnNamespace=Failed to upgrade from extension(s) {3} to extension [{1}] on namespace [{2}]
 extension.log.job.downgrade.begin=Baixando vers\u00E3o do complemento {3} para [{1}] em todos os namespaces
 extension.log.job.downgrade.beginOnNamespace=Baixando vers\u00E3o do complemento {3} para [{1}] no namespace [{2}]
+### Missing: extension.log.job.downgrade.success.end=Successfully downgraded from extension(s) {3} to extension [{1}] on all namespaces
+### Missing: extension.log.job.downgrade.success.endOnNamespace=Successfully downgraded from extension(s) {3} to extension [{1}] on namespace [{2}]
+### Missing: extension.log.job.downgrade.failure.end=Failed to downgrade from extension(s) {3} to extension [{1}] on all namespaces
+### Missing: extension.log.job.downgrade.failure.endOnNamespace=Failed to downgrade from extension(s) {3} to extension [{1}] on namespace [{2}]
+### Missing: extension.log.job.uninstall.begin=Uninstalling extension [{1}] from all namespaces
+### Missing: extension.log.job.uninstall.beginOnNamespace=Uninstalling extension [{1}] on namespace [{2}]
+### Missing: extension.log.job.uninstall.success.end=Successfully uninstalled extension [{1}] from all namespaces
+### Missing: extension.log.job.uninstall.success.endOnNamespace=Successfully uninstalled extension [{1}] from namespace [{2}]
+### Missing: extension.log.job.uninstall.failure.end=Failed to uninstall extension [{1}] from all namespaces
+### Missing: extension.log.job.uninstall.failure.endOnNamespace=Failed to uninstall extension [{1}] from namespace [{2}]
+
+### Missing: extension.log.job.plan.resolve=Resolving extension [{0}] on namespace [{1}]
+### Missing: extension.log.job.plan.resolveOnNamespace=Resolving extension [{0}] on all namespaces
+### Missing: extension.log.job.plan.resolvedependency=Resolving extension [{0}] on namespace [{1}]
+### Missing: extension.log.job.plan.resolvedependencyOnNamespace=Resolving extension [{0}] on all namespaces
+
 extension.log.job.downloading=Baixando complemento [{0}]
-extension.log.job.install.begin=Instalando complemento [{1}] em todos os namespaces
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_zh.properties b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_zh.properties
index ee35a8d..031997b 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_zh.properties
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/ApplicationResources_zh.properties
@@ -1,30 +1,86 @@
-## XWiki Translation for language zh generated from http://www.l10n.xwiki.org
+# ---------------------------------------------------------------------------
+# See the NOTICE file distributed with this work for additional
+# information regarding copyright ownership.
+#
+# This is free software; you can redistribute it and/or modify it
+# under the terms of the GNU Lesser General Public License as
+# published by the Free Software Foundation; either version 2.1 of
+# the License, or (at your option) any later version.
+#
+# This software is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this software; if not, write to the Free
+# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+# 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+# ---------------------------------------------------------------------------
+
+###############################################################################
+# This contains the translations of the module in the default language
+# (generally English).
+#
+# Translation key syntax:
+#   <short top level project name>.<short module name>.<propertyName>
+#   where:
+#   * <short top level project name> = top level project name without the "xwiki-" prefix,
+#                                     for example: commons, rendering, platform, enterprise, manager, etc
+#   * <short module name> = the name of the Maven module without the <short top level project name> prefix,
+#                           for example: oldcore, scheduler, activitystream, etc
+#   * <propertyName> = the name of the property using camel case,
+#                      for example updateJobClassCommitComment
+#
+# Comments: it's possible to add some detail about a key to make easier to
+#   translate it by adding a comment before it. To make sure a comment is not
+#   assigned to the following key use at least three sharps (###) for the comment
+#   or after it.
+#
+# Deprecated keys:
+#   * when deleting a key it should be moved to deprecated section at the end
+#     of the file (between #@deprecatedstart and #@deprecatedend) and associated to the
+#     first version in which it started to be deprecated
+#   * when renaming a key, it should be moved to the same deprecated section
+#     and a comment should be added with the following syntax:
+#     #@deprecated new.key.name
+#     old.key.name=Some translation
+###############################################################################
+
+# Those are generated keys with the same passed arguments
+# 0 is the action id (NONE, INSTALL, UPGRADE, DOWNGRADE, UNINSTALL)
+# 1 the new extension
+# 2 the namespace for which the action is executed
+# 3 is the previous extension
+###
+extension.log.job.install.begin=\u5728\u6240\u6709\u7684namespace\u4E0A\u5B89\u88C5extension [{1}]
+extension.log.job.install.beginOnNamespace=\u5728namespace [{2}]\u4E0A\u5B89\u88C5extension [{1}]
+extension.log.job.install.success.end=\u6210\u529F\u7684\u5728\u6240\u6709\u7684namespace\u4E0A\u5B89\u88C5\u4E86extension [{1}]
+extension.log.job.install.success.endOnNamespace=\u6210\u529F\u7684\u5728namespace [{2}]\u4E0A\u5B89\u88C5\u4E86extension [{1}]
+extension.log.job.install.failure.end=\u5728\u6240\u6709\u7684namespace\u4E0A\u5B89\u88C5extension [{1}] \u65F6\u5931\u8D25\u4E86
+extension.log.job.install.failure.endOnNamespace=\u5728namespace [{2}]\u4E0A\u5B89\u88C5extension [{1}] \u65F6\u5931\u8D25\u4E86
+extension.log.job.upgrade.begin=\u6B63\u5728\u6240\u6709\u7684namespace\u4E0A\u4ECEextension(s){3}\u5347\u7EA7\u5230[{1}]
+extension.log.job.upgrade.beginOnNamespace=\u6B63\u5728namespace [{2}]\u4E0A\u4ECEextension(s){3}\u5347\u7EA7\u5230[{1}]
+extension.log.job.upgrade.success.end=\u6210\u529F\u7684\u5728\u6240\u6709\u7684namespace\u4E0A\u4ECEextension(s){3}\u5347\u7EA7\u4E86\u5230[{1}]
+extension.log.job.upgrade.success.endOnNamespace=\u6210\u529F\u7684\u5728namespace [{2}]\u4E0A\u4ECEextension(s){3}\u5347\u7EA7\u4E86\u5230[{1}]
+extension.log.job.upgrade.failure.end=\u5728\u6240\u6709\u7684namespace\u4E0A\u4ECEextension(s){3}\u5347\u7EA7\u5230[{1}]\u65F6\u5931\u8D25\u4E86
+extension.log.job.upgrade.failure.endOnNamespace=\u5728namespace [{2}]\u4E0A\u4ECEextension(s){3}\u5347\u7EA7\u5230[{1}]\u65F6\u5931\u8D25\u4E86
 extension.log.job.downgrade.begin=\u6B63\u5728\u6240\u6709\u7684namespace\u4E0A\u4ECEextension(s){3}\u964D\u7EA7\u5230[{1}]
 extension.log.job.downgrade.beginOnNamespace=\u6B63\u5728namespace[{2}]\u4E0A\u4ECEextension(s){3}\u964D\u7EA7\u5230[{1}]
-extension.log.job.downgrade.failure.end=\u5728\u6240\u6709\u7684namespace\u4E0A\u4ECEextension(s){3}\u964D\u7EA7\u5230[{1}]\u65F6\u5931\u8D25\u4E86\u3002
-extension.log.job.downgrade.failure.endOnNamespace=\u5728namespace[{2}]\u4E0A\u4ECEextension(s){3}\u964D\u7EA7\u5230[{1}]\u65F6\u5931\u8D25\u4E86
 extension.log.job.downgrade.success.end=\u6210\u529F\u7684\u5728\u6240\u6709\u7684namespace\u4E0A\u4ECEextension(s){3}\u964D\u7EA7\u5230\u4E86[{1}]
 extension.log.job.downgrade.success.endOnNamespace=\u6210\u529F\u7684\u5728namespace [{2}]\u4E0A\u4ECEextension(s){3}\u964D\u7EA7\u5230\u4E86[{1}]
-extension.log.job.downloading=\u6B63\u5728\u4E0B\u8F7Dextension [{0}]
-extension.log.job.install.begin=\u5728\u6240\u6709\u7684namespace\u4E0A\u5B89\u88C5extension [{1}] 
-extension.log.job.install.beginOnNamespace=\u5728namespace [{2}]\u4E0A\u5B89\u88C5extension [{1}] 
-extension.log.job.install.failure.end=\u5728\u6240\u6709\u7684namespace\u4E0A\u5B89\u88C5extension [{1}] \u65F6\u5931\u8D25\u4E86
-extension.log.job.install.failure.endOnNamespace=\u5728namespace [{2}]\u4E0A\u5B89\u88C5extension [{1}] \u65F6\u5931\u8D25\u4E86
-extension.log.job.install.success.end=\u6210\u529F\u7684\u5728\u6240\u6709\u7684namespace\u4E0A\u5B89\u88C5\u4E86extension [{1}] 
-extension.log.job.install.success.endOnNamespace=\u6210\u529F\u7684\u5728namespace [{2}]\u4E0A\u5B89\u88C5\u4E86extension [{1}] 
+extension.log.job.downgrade.failure.end=\u5728\u6240\u6709\u7684namespace\u4E0A\u4ECEextension(s){3}\u964D\u7EA7\u5230[{1}]\u65F6\u5931\u8D25\u4E86\u3002
+extension.log.job.downgrade.failure.endOnNamespace=\u5728namespace[{2}]\u4E0A\u4ECEextension(s){3}\u964D\u7EA7\u5230[{1}]\u65F6\u5931\u8D25\u4E86
+extension.log.job.uninstall.begin=\u5728\u6240\u6709\u7684namespace\u4E0A\u5378\u8F7Dextension [{1}]
+extension.log.job.uninstall.beginOnNamespace=\u5728namespace [{2}]\u4E0A\u5378\u8F7Dextension [{1}]
+extension.log.job.uninstall.success.end=\u6210\u529F\u7684\u5728\u6240\u6709\u7684namespace\u4E0A\u5378\u8F7D\u4E86extension [{1}]
+extension.log.job.uninstall.success.endOnNamespace=\u6210\u529F\u7684\u5728namespace [{2}]\u4E0A\u5378\u8F7D\u4E86extension [{1}]
+extension.log.job.uninstall.failure.end=\u5728\u6240\u6709\u7684namespace\u4E0A\u5378\u8F7Dextension [{1}] \u65F6\u5931\u8D25\u4E86
+extension.log.job.uninstall.failure.endOnNamespace=\u5728namespace [{2}]\u4E0A\u5378\u8F7Dextension [{1}] \u65F6\u5931\u8D25\u4E86
+
 extension.log.job.plan.resolve=\u6B63\u5728namespace [{1}]\u4E0A\u89E3\u6790extension [{0}]
 extension.log.job.plan.resolveOnNamespace=\u6B63\u5728\u6240\u6709\u7684namespace [{1}]\u4E0A\u89E3\u6790extension [{0}]
 extension.log.job.plan.resolvedependency=\u6B63\u5728namespace [{1}]\u4E0A\u89E3\u6790extension [{0}]
 extension.log.job.plan.resolvedependencyOnNamespace=\u6B63\u5728\u6240\u6709\u7684namespace [{1}]\u4E0A\u89E3\u6790extension [{0}]
-extension.log.job.uninstall.begin=\u5728\u6240\u6709\u7684namespace\u4E0A\u5378\u8F7Dextension [{1}] 
-extension.log.job.uninstall.beginOnNamespace=\u5728namespace [{2}]\u4E0A\u5378\u8F7Dextension [{1}] 
-extension.log.job.uninstall.failure.end=\u5728\u6240\u6709\u7684namespace\u4E0A\u5378\u8F7Dextension [{1}] \u65F6\u5931\u8D25\u4E86
-extension.log.job.uninstall.failure.endOnNamespace=\u5728namespace [{2}]\u4E0A\u5378\u8F7Dextension [{1}] \u65F6\u5931\u8D25\u4E86
-extension.log.job.uninstall.success.end=\u6210\u529F\u7684\u5728\u6240\u6709\u7684namespace\u4E0A\u5378\u8F7D\u4E86extension [{1}] 
-extension.log.job.uninstall.success.endOnNamespace=\u6210\u529F\u7684\u5728namespace [{2}]\u4E0A\u5378\u8F7D\u4E86extension [{1}] 
-extension.log.job.upgrade.begin=\u6B63\u5728\u6240\u6709\u7684namespace\u4E0A\u4ECEextension(s){3}\u5347\u7EA7\u5230[{1}]
-extension.log.job.upgrade.beginOnNamespace=\u6B63\u5728namespace [{2}]\u4E0A\u4ECEextension(s){3}\u5347\u7EA7\u5230[{1}]
-extension.log.job.upgrade.failure.end=\u5728\u6240\u6709\u7684namespace\u4E0A\u4ECEextension(s){3}\u5347\u7EA7\u5230[{1}]\u65F6\u5931\u8D25\u4E86
-extension.log.job.upgrade.failure.endOnNamespace=\u5728namespace [{2}]\u4E0A\u4ECEextension(s){3}\u5347\u7EA7\u5230[{1}]\u65F6\u5931\u8D25\u4E86
-extension.log.job.upgrade.success.end=\u6210\u529F\u7684\u5728\u6240\u6709\u7684namespace\u4E0A\u4ECEextension(s){3}\u5347\u7EA7\u4E86\u5230[{1}]
-extension.log.job.upgrade.success.endOnNamespace=\u6210\u529F\u7684\u5728namespace [{2}]\u4E0A\u4ECEextension(s){3}\u5347\u7EA7\u4E86\u5230[{1}]
+
+extension.log.job.downloading=\u6B63\u5728\u4E0B\u8F7Dextension [{0}]
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/AbstractExtensionTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/AbstractExtensionTest.java
index 253f639..b440730 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/AbstractExtensionTest.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/AbstractExtensionTest.java
@@ -19,12 +19,19 @@
  */
 package org.xwiki.extension;
 
-import org.junit.Before;
-import org.junit.Test;
+import java.util.ArrayList;
+import java.util.Arrays;
+
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+import org.xwiki.extension.repository.DefaultExtensionRepositoryDescriptor;
 import org.xwiki.extension.repository.ExtensionRepository;
+import org.xwiki.extension.repository.ExtensionRepositoryDescriptor;
+import org.xwiki.extension.version.internal.DefaultVersionConstraint;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertSame;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
+import static org.junit.jupiter.api.Assertions.assertSame;
 import static org.mockito.Mockito.mock;
 
 /**
@@ -32,6 +39,24 @@
  */
 public class AbstractExtensionTest
 {
+    public static final ExtensionRepositoryDescriptor DESCRIPTOR1 = new DefaultExtensionRepositoryDescriptor("id1");
+
+    public static final ExtensionRepositoryDescriptor DESCRIPTOR2 = new DefaultExtensionRepositoryDescriptor("id2");
+
+    public static final DefaultExtensionAuthor AUTHOR1 = new DefaultExtensionAuthor("name1", "http://url1");
+
+    public static final DefaultExtensionAuthor AUTHOR2 = new DefaultExtensionAuthor("name1", "http://url2");
+
+    public static final ExtensionLicense LICENSE1 = new ExtensionLicense("license1", Arrays.asList("content1"));
+
+    public static final ExtensionLicense LICENSE2 = new ExtensionLicense("license2", Arrays.asList("content2"));
+
+    public static final DefaultExtensionDependency DEPENDENCY1 =
+        new DefaultExtensionDependency("id1", new DefaultVersionConstraint("version1"));
+
+    public static final DefaultExtensionDependency DEPENDENCY2 =
+        new DefaultExtensionDependency("id2", new DefaultVersionConstraint("version2"));
+
     private AbstractExtension extension;
 
     private ExtensionRepository repository;
@@ -40,7 +65,7 @@
 
     private String type;
 
-    private static class TestExtension extends AbstractExtension
+    public static class TestExtension extends AbstractExtension
     {
         public TestExtension(ExtensionId id, String type, ExtensionId... features)
         {
@@ -50,6 +75,11 @@ public TestExtension(ExtensionId id, String type, ExtensionId... features)
                 addExtensionFeature(feature);
             }
         }
+
+        public TestExtension(Extension extension)
+        {
+            super(null, extension);
+        }
     }
 
     private AbstractExtension toExtension(String id, String version, ExtensionId... features)
@@ -64,8 +94,8 @@ private void assertCompareTo(int comparizon, Extension e1, Extension e2)
 
     // Tests
 
-    @Before
-    public void before()
+    @BeforeEach
+    public void beforeEach()
     {
         this.repository = mock(ExtensionRepository.class);
         this.id = new ExtensionId("extesionid", "extensionversion");
@@ -77,7 +107,7 @@ public void before()
     }
 
     @Test
-    public void testGet()
+    public void get()
     {
         assertSame(this.repository, this.extension.get("repository"));
         assertEquals(this.id.getId(), this.extension.get("id"));
@@ -86,7 +116,7 @@ public void testGet()
     }
 
     @Test
-    public void testCompareTo()
+    public void compareTo()
     {
         assertCompareTo(0, toExtension("id", "2.0"), toExtension("id", "2.0"));
         assertCompareTo(-1, toExtension("id", "2.0"), toExtension("id", "3.0"));
@@ -104,4 +134,62 @@ public void testCompareTo()
 
         assertCompareTo(-1, toExtension("id", "1.0"), null);
     }
+
+    @Test
+    public void set()
+    {
+        AbstractExtension extension = toExtension("id", "version", new ExtensionId("feature", "featureversion"));
+
+        extension.addAuthor(AUTHOR1);
+        extension.addAuthor(AUTHOR2);
+
+        extension.addRepository(DESCRIPTOR1);
+        extension.addRepository(DESCRIPTOR2);
+
+        extension.addLicense(LICENSE1);
+        extension.addLicense(LICENSE2);
+
+        extension.addDependency(DEPENDENCY1);
+        extension.addDependency(DEPENDENCY2);
+
+        extension.addManagedDependency(DEPENDENCY1);
+        extension.addManagedDependency(DEPENDENCY2);
+
+        extension.addAllowedNamespace("namespace1");
+        extension.addAllowedNamespace("namespace2");
+
+        AbstractExtension cloneExtension = new TestExtension(extension);
+
+        assertEquals(extension, cloneExtension);
+        assertEquals(extension.getId(), cloneExtension.getId());
+        assertEquals(new ArrayList<>(extension.getExtensionFeatures()),
+            new ArrayList<>(cloneExtension.getExtensionFeatures()));
+        assertEquals(Arrays.asList(DESCRIPTOR1, DESCRIPTOR2), cloneExtension.getRepositories());
+        assertEquals(Arrays.asList(AUTHOR1, AUTHOR2), cloneExtension.getAuthors());
+        assertEquals(Arrays.asList(LICENSE1, LICENSE2), cloneExtension.getLicenses());
+        assertEquals(Arrays.asList(DEPENDENCY1, DEPENDENCY2), cloneExtension.getDependencies());
+        assertEquals(Arrays.asList(DEPENDENCY1, DEPENDENCY2), cloneExtension.getManagedDependencies());
+        assertEquals(Arrays.asList("namespace1", "namespace2"), new ArrayList<>(cloneExtension.getAllowedNamespaces()));
+    }
+
+    @Test
+    public void equals()
+    {
+        AbstractExtension extension = toExtension("id", "version");
+        AbstractExtension cloneExtension = new TestExtension(extension);
+
+        assertEquals(extension, cloneExtension);
+
+        cloneExtension.setCategory("othercategory");
+
+        assertEquals(extension, cloneExtension);
+
+        AbstractExtension extensionWithDifferentId = toExtension("otherid", "version");
+
+        assertNotEquals(extension, extensionWithDifferentId);
+
+        AbstractExtension extensionWithDifferentVersion = toExtension("id", "otherversion");
+
+        assertNotEquals(extension, extensionWithDifferentVersion);
+    }
 }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/DefaultExtensionAuthorTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/DefaultExtensionAuthorTest.java
new file mode 100644
index 0000000..5e34a6d
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/DefaultExtensionAuthorTest.java
@@ -0,0 +1,43 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.extension;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
+
+/**
+ * Validate {@link DefaultExtensionAuthor}.
+ * 
+ * @version $Id$
+ * @since 10.7RC1
+ */
+public class DefaultExtensionAuthorTest
+{
+    @Test
+    public void equals()
+    {
+        assertEquals(new DefaultExtensionAuthor("name", "url"), new DefaultExtensionAuthor("name", "url"));
+
+        assertNotEquals(new DefaultExtensionAuthor("name", "url"), new DefaultExtensionAuthor("name2", "url"));
+        assertNotEquals(new DefaultExtensionAuthor("name", "url"), new DefaultExtensionAuthor("name", "url2"));
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/DefaultExtensionDependencyTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/DefaultExtensionDependencyTest.java
new file mode 100644
index 0000000..b2cb59f
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/DefaultExtensionDependencyTest.java
@@ -0,0 +1,146 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.extension;
+
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.junit.jupiter.api.Test;
+import org.xwiki.extension.version.internal.DefaultVersionConstraint;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
+import static org.junit.jupiter.api.Assertions.assertNotSame;
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+/**
+ * Validate {@link DefaultExtensionDependency}.
+ * 
+ * @version $Id$
+ */
+public class DefaultExtensionDependencyTest
+{
+    @Test
+    public void properties()
+    {
+        DefaultExtensionDependency dependency =
+            new DefaultExtensionDependency("id", new DefaultVersionConstraint("version"));
+
+        Map<String, Object> properties = new HashMap<>();
+
+        properties.put("key1", "value1");
+
+        dependency.setProperties(properties);
+
+        assertNotSame(properties, dependency.getProperties());
+        assertEquals(properties, dependency.getProperties());
+        assertEquals("value1", dependency.getProperty("key1"));
+        assertNull(dependency.getProperty("nokey"));
+        assertEquals("default", dependency.getProperty("nokey", "default"));
+
+        dependency.putProperty("key2", "value2");
+
+        assertNotEquals(properties, dependency.getProperties());
+
+        properties.put("key2", "value2");
+
+        assertEquals(properties, dependency.getProperties());
+    }
+
+    @Test
+    public void equals()
+    {
+        assertEquals(new DefaultExtensionDependency("id", new DefaultVersionConstraint("version")),
+            new DefaultExtensionDependency("id", new DefaultVersionConstraint("version")));
+
+        assertNotEquals(new DefaultExtensionDependency("id", new DefaultVersionConstraint("version")),
+            new DefaultExtensionDependency("id2", new DefaultVersionConstraint("version")));
+
+        assertNotEquals(new DefaultExtensionDependency("id", new DefaultVersionConstraint("version")),
+            new DefaultExtensionDependency("id", new DefaultVersionConstraint("version2")));
+    }
+
+    @Test
+    public void isCompatibleWithExtensionId()
+    {
+        DefaultExtensionDependency dependency =
+            new DefaultExtensionDependency("id", new DefaultVersionConstraint("[1.0, 2.0]"));
+
+        assertTrue(dependency.isCompatible(new ExtensionId("id", "1.0")));
+        assertTrue(dependency.isCompatible(new ExtensionId("id", "1.1")));
+        assertTrue(dependency.isCompatible(new ExtensionId("id", "2.0")));
+
+        assertFalse(dependency.isCompatible(new ExtensionId("id2", "1.0")));
+        assertFalse(dependency.isCompatible(new ExtensionId("id", "0.9")));
+        assertFalse(dependency.isCompatible(new ExtensionId("id", "3.0")));
+    }
+
+    @Test
+    public void isCompatibleWithExtension()
+    {
+        DefaultExtensionDependency dependency =
+            new DefaultExtensionDependency("id", new DefaultVersionConstraint("[1.0, 2.0]"));
+
+        assertTrue(
+            dependency.isCompatible(new AbstractExtensionTest.TestExtension(new ExtensionId("id", "1.0"), "type")));
+        assertTrue(
+            dependency.isCompatible(new AbstractExtensionTest.TestExtension(new ExtensionId("id", "1.1"), "type")));
+        assertTrue(
+            dependency.isCompatible(new AbstractExtensionTest.TestExtension(new ExtensionId("id", "2.0"), "type")));
+
+        assertFalse(
+            dependency.isCompatible(new AbstractExtensionTest.TestExtension(new ExtensionId("id", "0.9"), "type")));
+        assertFalse(
+            dependency.isCompatible(new AbstractExtensionTest.TestExtension(new ExtensionId("id", "3.0"), "type")));
+
+        assertTrue(dependency.isCompatible(new AbstractExtensionTest.TestExtension(new ExtensionId("id2", "1.0"),
+            "type", new ExtensionId("id", "1.0"))));
+        assertTrue(dependency.isCompatible(new AbstractExtensionTest.TestExtension(new ExtensionId("id2", "1.0"),
+            "type", new ExtensionId("id", "1.1"))));
+        assertTrue(dependency.isCompatible(new AbstractExtensionTest.TestExtension(new ExtensionId("id2", "1.0"),
+            "type", new ExtensionId("id", "2.0"))));
+
+        assertFalse(dependency.isCompatible(new AbstractExtensionTest.TestExtension(new ExtensionId("id2", "1.0"),
+            "type", new ExtensionId("id", "0.9"))));
+        assertFalse(dependency.isCompatible(new AbstractExtensionTest.TestExtension(new ExtensionId("id2", "1.0"),
+            "type", new ExtensionId("id", "3.0"))));
+    }
+
+    @Test
+    public void repositories()
+    {
+        DefaultExtensionDependency dependency =
+            new DefaultExtensionDependency("id", new DefaultVersionConstraint("version"));
+
+        assertTrue(dependency.getRepositories().isEmpty());
+
+        dependency.setRepositories(Arrays.asList(AbstractExtensionTest.DESCRIPTOR1));
+
+        assertEquals(Arrays.asList(AbstractExtensionTest.DESCRIPTOR1), dependency.getRepositories());
+
+        dependency.addRepository(AbstractExtensionTest.DESCRIPTOR2);
+
+        assertEquals(Arrays.asList(AbstractExtensionTest.DESCRIPTOR1, AbstractExtensionTest.DESCRIPTOR2),
+            dependency.getRepositories());
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/DefaultExtensionIssueManagementTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/DefaultExtensionIssueManagementTest.java
new file mode 100644
index 0000000..3a94a32
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/DefaultExtensionIssueManagementTest.java
@@ -0,0 +1,45 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.extension;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
+
+/**
+ * Validate {@link DefaultExtensionIssueManagement}.
+ * 
+ * @version $Id$
+ */
+public class DefaultExtensionIssueManagementTest
+{
+    @Test
+    public void equals()
+    {
+        assertEquals(new DefaultExtensionIssueManagement("system", "http://url"),
+            new DefaultExtensionIssueManagement("system", "http://url"));
+
+        assertNotEquals(new DefaultExtensionIssueManagement("system", "http://url"),
+            new DefaultExtensionIssueManagement("system2", "http://url"));
+        assertNotEquals(new DefaultExtensionIssueManagement("system", "http://url"),
+            new DefaultExtensionIssueManagement("system", "http://url2"));
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/DefaultExtensionScmTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/DefaultExtensionScmTest.java
new file mode 100644
index 0000000..54947c2
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/DefaultExtensionScmTest.java
@@ -0,0 +1,69 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.extension;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
+
+/**
+ * Validate {@link DefaultExtensionScm}.
+ * 
+ * @version $Id$
+ */
+public class DefaultExtensionScmTest
+{
+    @Test
+    public void equals()
+    {
+        assertEquals(
+            new DefaultExtensionScm("http://url", new DefaultExtensionScmConnection("system", "path"),
+                new DefaultExtensionScmConnection("devsystem", "devpath")),
+            new DefaultExtensionScm("http://url", new DefaultExtensionScmConnection("system", "path"),
+                new DefaultExtensionScmConnection("devsystem", "devpath")));
+
+        assertNotEquals(
+            new DefaultExtensionScm("http://url2", new DefaultExtensionScmConnection("system", "path"),
+                new DefaultExtensionScmConnection("devsystem", "devpath")),
+            new DefaultExtensionScm("http://url", new DefaultExtensionScmConnection("system", "path"),
+                new DefaultExtensionScmConnection("devsystem", "devpath")));
+        assertNotEquals(
+            new DefaultExtensionScm("http://url", new DefaultExtensionScmConnection("system", "path"),
+                new DefaultExtensionScmConnection("devsystem", "devpath")),
+            new DefaultExtensionScm("http://url", new DefaultExtensionScmConnection("system2", "path"),
+                new DefaultExtensionScmConnection("devsystem", "devpath")));
+        assertNotEquals(
+            new DefaultExtensionScm("http://url", new DefaultExtensionScmConnection("system", "path"),
+                new DefaultExtensionScmConnection("devsystem", "devpath")),
+            new DefaultExtensionScm("http://url", new DefaultExtensionScmConnection("system", "path2"),
+                new DefaultExtensionScmConnection("devsystem", "devpath")));
+        assertNotEquals(
+            new DefaultExtensionScm("http://url", new DefaultExtensionScmConnection("system", "path"),
+                new DefaultExtensionScmConnection("devsystem", "devpath")),
+            new DefaultExtensionScm("http://url", new DefaultExtensionScmConnection("system", "path"),
+                new DefaultExtensionScmConnection("devsystem2", "devpath")));
+        assertNotEquals(
+            new DefaultExtensionScm("http://url", new DefaultExtensionScmConnection("system", "path"),
+                new DefaultExtensionScmConnection("devsystem", "devpath")),
+            new DefaultExtensionScm("http://url", new DefaultExtensionScmConnection("system", "path"),
+                new DefaultExtensionScmConnection("devsystem", "devpath2")));
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/ExtensionLicenseTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/ExtensionLicenseTest.java
new file mode 100644
index 0000000..ea8e5b8
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/ExtensionLicenseTest.java
@@ -0,0 +1,47 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.extension;
+
+import java.util.Arrays;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
+
+/**
+ * Validate {@link ExtensionLicense}.
+ * 
+ * @version $Id$
+ */
+public class ExtensionLicenseTest
+{
+    @Test
+    public void equals()
+    {
+        assertEquals(new ExtensionLicense("name", Arrays.asList("content")),
+            new ExtensionLicense("name", Arrays.asList("content")));
+        assertEquals(new ExtensionLicense("name", Arrays.asList("content")),
+            new ExtensionLicense("name", Arrays.asList("content2")));
+
+        assertNotEquals(new ExtensionLicense("name", Arrays.asList("content")),
+            new ExtensionLicense("name2", Arrays.asList("content")));
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/TestResources.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/TestResources.java
index 9061732..ccd63de 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/TestResources.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/TestResources.java
@@ -119,6 +119,10 @@
     public static final ExtensionId REMOTE_WITH_OVERWRITTEN_MANAGED_DEPENDENY_ID =
         new ExtensionId("rwithoverwrittenmanageddependency", "version");
 
+    public static final ExtensionId REMOTE_CROSSDEPENDENCY1 = new ExtensionId("crossdependency1", "version");
+
+    public static final ExtensionId REMOTE_CROSSDEPENDENCY2 = new ExtensionId("crossdependency2", "version");
+
     // Methods
 
     public void init(InstalledExtensionRepository installedExtensionRepository) throws ResolveException
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/job/internal/InstallPlanJobTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/job/internal/InstallPlanJobTest.java
index 73212a4..4960b06 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/job/internal/InstallPlanJobTest.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/job/internal/InstallPlanJobTest.java
@@ -750,6 +750,29 @@ public void testInstallWithInvalidOptionalDependency() throws Throwable
         Assert.assertEquals(0, node.getChildren().size());
     }
 
+    @Test
+    public void testInstallPlanWithCrossDependencies() throws Throwable
+    {
+        ExtensionPlan plan = installPlan(TestResources.REMOTE_CROSSDEPENDENCY1);
+
+        // Tree
+
+        Assert.assertEquals(1, plan.getTree().size());
+
+        ExtensionPlanNode node = plan.getTree().iterator().next();
+
+        ExtensionPlanAction action = node.getAction();
+
+        Assert.assertEquals(TestResources.REMOTE_CROSSDEPENDENCY1, action.getExtension().getId());
+        Assert.assertEquals(Action.INSTALL, node.getAction().getAction());
+        Assert.assertEquals(1, node.getChildren().size());
+
+        ExtensionPlanNode childnode = node.getChildren().iterator().next();
+
+        Assert.assertEquals(TestResources.REMOTE_CROSSDEPENDENCY2, childnode.getAction().getExtension().getId());
+        Assert.assertEquals(Action.INSTALL, node.getAction().getAction());
+    }
+
     // Failures
 
     @Test(expected = InstallException.class)
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/job/plan/internal/DefaultExtensionPlanActionTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/job/plan/internal/DefaultExtensionPlanActionTest.java
new file mode 100644
index 0000000..29674e5
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/job/plan/internal/DefaultExtensionPlanActionTest.java
@@ -0,0 +1,64 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.extension.job.plan.internal;
+
+import org.junit.jupiter.api.Test;
+import org.xwiki.extension.AbstractExtensionTest;
+import org.xwiki.extension.AbstractExtensionTest.TestExtension;
+import org.xwiki.extension.ExtensionId;
+import org.xwiki.extension.job.plan.ExtensionPlanAction.Action;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
+
+/**
+ * Validate {@link DefaultExtensionPlanAction}.
+ * 
+ * @version $Id$
+ */
+public class DefaultExtensionPlanActionTest
+{
+    @Test
+    public void equals()
+    {
+        TestExtension testExtension1 = new AbstractExtensionTest.TestExtension(new ExtensionId("id"), "type");
+        TestExtension testExtension2 = new AbstractExtensionTest.TestExtension(new ExtensionId("id2"), "type");
+
+        assertEquals(
+            new DefaultExtensionPlanAction(testExtension1, testExtension2, null, Action.INSTALL, "namespace", true),
+            new DefaultExtensionPlanAction(testExtension1, testExtension2, null, Action.INSTALL, "namespace", true));
+        assertEquals(
+            new DefaultExtensionPlanAction(testExtension1, testExtension2, null, Action.INSTALL, "namespace", true),
+            new DefaultExtensionPlanAction(testExtension1, testExtension1, null, Action.INSTALL, "namespace", true));
+        assertEquals(
+            new DefaultExtensionPlanAction(testExtension1, testExtension2, null, Action.INSTALL, "namespace", true),
+            new DefaultExtensionPlanAction(testExtension1, testExtension2, null, Action.UNINSTALL, "namespace", true));
+        assertEquals(
+            new DefaultExtensionPlanAction(testExtension1, testExtension2, null, Action.INSTALL, "namespace", true),
+            new DefaultExtensionPlanAction(testExtension1, testExtension2, null, Action.INSTALL, "namespace", false));
+
+        assertNotEquals(
+            new DefaultExtensionPlanAction(testExtension1, testExtension2, null, Action.INSTALL, "namespace", true),
+            new DefaultExtensionPlanAction(testExtension2, testExtension2, null, Action.INSTALL, "namespace", true));
+        assertNotEquals(
+            new DefaultExtensionPlanAction(testExtension1, testExtension2, null, Action.INSTALL, "namespace", true),
+            new DefaultExtensionPlanAction(testExtension1, testExtension2, null, Action.INSTALL, "namespace2", true));
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/repository/DefaultExtensionRepositoryDescriptorTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/repository/DefaultExtensionRepositoryDescriptorTest.java
new file mode 100644
index 0000000..6f8adb1
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/repository/DefaultExtensionRepositoryDescriptorTest.java
@@ -0,0 +1,91 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.extension.repository;
+
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
+import static org.junit.jupiter.api.Assertions.assertNotSame;
+import static org.junit.jupiter.api.Assertions.assertNull;
+
+/**
+ * Validate {@link DefaultExtensionRepositoryDescriptor}.
+ * 
+ * @version $Id$
+ * @since 10.7RC1
+ */
+public class DefaultExtensionRepositoryDescriptorTest
+{
+    @Test
+    public void equals() throws URISyntaxException
+    {
+        assertEquals(new DefaultExtensionRepositoryDescriptor("id", "type", new URI("uri:uri")),
+            new DefaultExtensionRepositoryDescriptor("id", "type", new URI("uri:uri")));
+
+        assertNotEquals(new DefaultExtensionRepositoryDescriptor("id", "type", new URI("uri:uri")),
+            new DefaultExtensionRepositoryDescriptor("id2", "type", new URI("uri:uri")));
+        assertNotEquals(new DefaultExtensionRepositoryDescriptor("id", "type", new URI("uri:uri")),
+            new DefaultExtensionRepositoryDescriptor("id", "type2", new URI("uri:uri")));
+        assertNotEquals(new DefaultExtensionRepositoryDescriptor("id", "type", new URI("uri:uri")),
+            new DefaultExtensionRepositoryDescriptor("id", "type", new URI("uri:uri2")));
+
+        DefaultExtensionRepositoryDescriptor descriptor1 = new DefaultExtensionRepositoryDescriptor("id");
+        DefaultExtensionRepositoryDescriptor descriptor2 = new DefaultExtensionRepositoryDescriptor("id");
+
+        descriptor1.putProperty("key", "value");
+
+        assertNotEquals(descriptor1, descriptor2);
+
+        descriptor2.putProperty("key", "value");
+
+        assertEquals(descriptor1, descriptor2);
+    }
+
+    @Test
+    public void properties()
+    {
+        DefaultExtensionRepositoryDescriptor descriptor = new DefaultExtensionRepositoryDescriptor("id");
+
+        Map<String, String> properties = new HashMap<>();
+
+        properties.put("key1", "value1");
+
+        descriptor.setProperties(properties);
+
+        assertNotSame(properties, descriptor.getProperties());
+        assertEquals(properties, descriptor.getProperties());
+        assertEquals("value1", descriptor.getProperty("key1"));
+        assertNull(descriptor.getProperty("nokey"));
+
+        descriptor.putProperty("key2", "value2");
+
+        assertNotEquals(properties, descriptor.getProperties());
+
+        properties.put("key2", "value2");
+
+        assertEquals(properties, descriptor.getProperties());
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/repository/core/DefaultCoreExtensionRepositoryTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/repository/core/DefaultCoreExtensionRepositoryTest.java
index ead998d..e510222 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/repository/core/DefaultCoreExtensionRepositoryTest.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/repository/core/DefaultCoreExtensionRepositoryTest.java
@@ -19,78 +19,147 @@
  */
 package org.xwiki.extension.repository.core;
 
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.Collection;
+import java.util.Map;
+
+import javax.inject.Named;
+
+import org.junit.jupiter.api.Test;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
 import org.xwiki.environment.Environment;
+import org.xwiki.extension.CoreExtension;
 import org.xwiki.extension.Extension;
 import org.xwiki.extension.ExtensionId;
 import org.xwiki.extension.ResolveException;
 import org.xwiki.extension.repository.CoreExtensionRepository;
+import org.xwiki.extension.repository.internal.core.DefaultCoreExtension;
+import org.xwiki.extension.repository.internal.core.DefaultCoreExtensionRepository;
+import org.xwiki.extension.repository.internal.core.ExtensionScanner;
 import org.xwiki.extension.repository.result.IterableResult;
 import org.xwiki.extension.repository.search.SearchException;
 import org.xwiki.extension.test.ConfigurableDefaultCoreExtensionRepository;
 import org.xwiki.extension.version.internal.DefaultVersion;
+import org.xwiki.test.annotation.AfterComponent;
 import org.xwiki.test.annotation.AllComponents;
-import org.xwiki.test.mockito.MockitoComponentMockingRule;
-
-import static org.junit.Assert.assertEquals;
-
+import org.xwiki.test.junit5.mockito.ComponentTest;
+import org.xwiki.test.junit5.mockito.InjectMockComponents;
+import org.xwiki.test.junit5.mockito.MockComponent;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.fail;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.doAnswer;
+
+/**
+ * Validate {@link DefaultCoreExtensionRepository}.
+ * 
+ * @version $Id$
+ */
+@ComponentTest
 @AllComponents
 public class DefaultCoreExtensionRepositoryTest
 {
-    @Rule
-    public MockitoComponentMockingRule<CoreExtensionRepository> mocker =
-        new MockitoComponentMockingRule<CoreExtensionRepository>(ConfigurableDefaultCoreExtensionRepository.class);
+    @MockComponent
+    private Environment environment;
+
+    @MockComponent
+    @Named("test")
+    private ExtensionScanner scanner;
 
+    @InjectMockComponents
     private ConfigurableDefaultCoreExtensionRepository coreExtensionRepository;
 
-    @Before
-    public void before() throws Exception
+    @AfterComponent
+    public void afterComponent()
     {
-        this.mocker.registerMockComponent(Environment.class);
-
-        this.coreExtensionRepository =
-            (ConfigurableDefaultCoreExtensionRepository) this.mocker.getInstance(CoreExtensionRepository.class);
+        doAnswer(new Answer<Void>()
+        {
+            @Override
+            public Void answer(InvocationOnMock invocation) throws Throwable
+            {
+                Map<String, DefaultCoreExtension> extensions = invocation.getArgument(0);
+
+                extensions.put("id1", new DefaultCoreExtension(coreExtensionRepository, new URL("http://url1"),
+                    new ExtensionId("id1", "version1"), "type1"));
+                extensions.put("id2", new DefaultCoreExtension(coreExtensionRepository, new URL("http://url2"),
+                    new ExtensionId("id2", "version2"), "type2"));
+
+                return null;
+            }
+        }).when(this.scanner).scanJARs(any(Map.class), any(Collection.class),
+            any(DefaultCoreExtensionRepository.class));
+
+        doAnswer(new Answer<DefaultCoreExtension>()
+        {
+            @Override
+            public DefaultCoreExtension answer(InvocationOnMock invocation) throws Throwable
+            {
+                return new DefaultCoreExtension(coreExtensionRepository, new URL("http://urlE"),
+                    new ExtensionId("idE", "versionE"), "typeE");
+            }
+        }).when(this.scanner).scanEnvironment(any(DefaultCoreExtensionRepository.class));
     }
 
+    // Tests
+
     /**
      * Validate core extension loading and others initializations.
      */
     @Test
-    public void testInit()
+    public void init() throws MalformedURLException
     {
-        Assert.assertEquals(0, this.coreExtensionRepository.countExtensions());
+        assertEquals(3, this.coreExtensionRepository.countExtensions());
+
+        assertEquals("id1", this.coreExtensionRepository.getCoreExtension("id1").getId().getId());
+        assertEquals("version1", this.coreExtensionRepository.getCoreExtension("id1").getId().getVersion().getValue());
+        assertEquals(new URL("http://url1"), this.coreExtensionRepository.getCoreExtension("id1").getURL());
+        assertEquals("type1", this.coreExtensionRepository.getCoreExtension("id1").getType());
+
+        assertEquals("id2", this.coreExtensionRepository.getCoreExtension("id2").getId().getId());
+        assertEquals("version2", this.coreExtensionRepository.getCoreExtension("id2").getId().getVersion().getValue());
+        assertEquals(new URL("http://url2"), this.coreExtensionRepository.getCoreExtension("id2").getURL());
+        assertEquals("type2", this.coreExtensionRepository.getCoreExtension("id2").getType());
+
+        CoreExtension environmentExtension = this.coreExtensionRepository.getEnvironmentExtension();
+
+        assertEquals("idE", environmentExtension.getId().getId());
+        assertEquals("versionE", environmentExtension.getId().getVersion().getValue());
+        assertEquals(new URL("http://urlE"), environmentExtension.getURL());
+        assertEquals("typeE", environmentExtension.getType());
     }
 
     /**
      * Validate {@link CoreExtensionRepository#getCoreExtension(String)}
      */
     @Test
-    public void testGetCoreExtension()
+    public void getCoreExtension()
     {
-        Assert.assertNull(this.coreExtensionRepository.getCoreExtension("unexistingextension"));
+        assertNull(this.coreExtensionRepository.getCoreExtension("unexistingextension"));
 
         this.coreExtensionRepository.addExtensions("existingextension", new DefaultVersion("version"));
 
         Extension extension = this.coreExtensionRepository.getCoreExtension("existingextension");
 
-        Assert.assertNotNull(extension);
-        Assert.assertEquals("existingextension", extension.getId().getId());
-        Assert.assertEquals("version", extension.getId().getVersion().getValue());
+        assertNotNull(extension);
+        assertEquals("existingextension", extension.getId().getId());
+        assertEquals("version", extension.getId().getVersion().getValue());
     }
 
     /**
      * Validate {@link CoreExtensionRepository#resolve(ExtensionId)}
      */
     @Test
-    public void testResolve() throws ResolveException
+    public void resolve() throws ResolveException
     {
         try {
             this.coreExtensionRepository.resolve(new ExtensionId("unexistingextension", "version"));
 
-            Assert.fail("Resolve should have failed");
+            fail("Resolve should have failed");
         } catch (ResolveException expected) {
             // expected
         }
@@ -100,16 +169,16 @@ public void testResolve() throws ResolveException
         try {
             this.coreExtensionRepository.resolve(new ExtensionId("existingextension", "wrongversion"));
 
-            Assert.fail("Resolve should have failed");
+            fail("Resolve should have failed");
         } catch (ResolveException expected) {
             // expected
         }
 
         Extension extension = this.coreExtensionRepository.resolve(new ExtensionId("existingextension", "version"));
 
-        Assert.assertNotNull(extension);
-        Assert.assertEquals("existingextension", extension.getId().getId());
-        Assert.assertEquals("version", extension.getId().getVersion().getValue());
+        assertNotNull(extension);
+        assertEquals("existingextension", extension.getId().getId());
+        assertEquals("version", extension.getId().getVersion().getValue());
     }
 
     /**
@@ -118,7 +187,7 @@ public void testResolve() throws ResolveException
      * @throws SearchException
      */
     @Test
-    public void testSearchWithSeveralFeatures() throws SearchException
+    public void searchWithSeveralFeatures() throws SearchException
     {
         this.coreExtensionRepository.addExtensions("extension", new DefaultVersion("version"),
             new ExtensionId("testfeature1"), new ExtensionId("testfeature2"));
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/repository/installed/DefaultInstalledExtensionTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/repository/installed/DefaultInstalledExtensionTest.java
index c502bab..9a99d4e 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/repository/installed/DefaultInstalledExtensionTest.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/repository/installed/DefaultInstalledExtensionTest.java
@@ -24,19 +24,28 @@
 import java.util.Date;
 import java.util.HashSet;
 
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.xwiki.extension.ExtensionId;
 import org.xwiki.extension.repository.internal.installed.DefaultInstalledExtension;
 import org.xwiki.extension.repository.internal.local.DefaultLocalExtension;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+/**
+ * Validate {@link DefaultInstalledExtension}.
+ * 
+ * @version $Id$
+ */
 public class DefaultInstalledExtensionTest
 {
     private DefaultInstalledExtension installedExtension;
 
-    @Before
-    public void setUp()
+    @BeforeEach
+    public void beforeEach()
     {
         DefaultLocalExtension localExtension =
             new DefaultLocalExtension(null, new ExtensionId("installed", "version"), "type");
@@ -44,129 +53,164 @@ public void setUp()
     }
 
     @Test
-    public void testIsInstalled()
+    public void isInstalled()
     {
-        Assert.assertFalse(this.installedExtension.isInstalled());
-        Assert.assertFalse(this.installedExtension.isInstalled("namespace"));
+        assertFalse(this.installedExtension.isInstalled());
+        assertFalse(this.installedExtension.isInstalled("namespace"));
 
         this.installedExtension.setInstalled(true);
 
-        Assert.assertTrue(this.installedExtension.isInstalled());
-        Assert.assertTrue(this.installedExtension.isInstalled("namespace"));
+        assertTrue(this.installedExtension.isInstalled());
+        assertTrue(this.installedExtension.isInstalled("namespace"));
 
         this.installedExtension.setInstalled(true, "namespace");
 
-        Assert.assertTrue(this.installedExtension.isInstalled());
-        Assert.assertTrue(this.installedExtension.isInstalled("namespace"));
+        assertTrue(this.installedExtension.isInstalled());
+        assertTrue(this.installedExtension.isInstalled("namespace"));
 
         this.installedExtension.setInstalled(false);
 
-        Assert.assertFalse(this.installedExtension.isInstalled());
-        Assert.assertFalse(this.installedExtension.isInstalled("namespace"));
+        assertFalse(this.installedExtension.isInstalled());
+        assertFalse(this.installedExtension.isInstalled("namespace"));
     }
 
     @Test
-    public void testIsValid()
+    public void isValid()
     {
-        Assert.assertTrue(this.installedExtension.isValid(null));
-        Assert.assertTrue(this.installedExtension.isValid("namespace"));
+        assertTrue(this.installedExtension.isValid(null));
+        assertTrue(this.installedExtension.isValid("namespace"));
 
         this.installedExtension.setValid(null, false);
 
-        Assert.assertFalse(this.installedExtension.isValid(null));
-        Assert.assertTrue(this.installedExtension.isValid("namespace"));
+        assertFalse(this.installedExtension.isValid(null));
+        assertTrue(this.installedExtension.isValid("namespace"));
+
+        this.installedExtension.setValid("namespace", false);
+
+        assertFalse(this.installedExtension.isValid(null));
+        assertFalse(this.installedExtension.isValid("namespace"));
+
+        this.installedExtension.setInstalled(true, "namespace");
+
+        assertFalse(this.installedExtension.isValid(null));
+        assertTrue(this.installedExtension.isValid("namespace"));
+
+        this.installedExtension.setValid("namespace", false);
+
+        assertFalse(this.installedExtension.isValid(null));
+        assertFalse(this.installedExtension.isValid("namespace"));
+
+        this.installedExtension.setInstalled(false, "namespace");
+
+        assertFalse(this.installedExtension.isValid(null));
+        assertTrue(this.installedExtension.isValid("namespace"));
     }
 
     @Test
-    public void testIsDependency()
+    public void isDependency()
     {
-        Assert.assertFalse(this.installedExtension.isDependency());
-        Assert.assertFalse(this.installedExtension.isDependency("namespace"));
+        assertFalse(this.installedExtension.isDependency());
+        assertFalse(this.installedExtension.isDependency("namespace"));
 
         this.installedExtension.setInstalled(true);
 
-        Assert.assertFalse(this.installedExtension.isDependency());
-        Assert.assertFalse(this.installedExtension.isDependency("namespace"));
+        assertFalse(this.installedExtension.isDependency());
+        assertFalse(this.installedExtension.isDependency("namespace"));
 
         this.installedExtension.setDependency(true, null);
 
-        Assert.assertTrue(this.installedExtension.isDependency());
-        Assert.assertTrue(this.installedExtension.isDependency("namespace"));
+        assertTrue(this.installedExtension.isDependency());
+        assertTrue(this.installedExtension.isDependency("namespace"));
 
         this.installedExtension.setInstalled(true, "namespace");
 
-        Assert.assertFalse(this.installedExtension.isDependency("namespace"));
+        assertFalse(this.installedExtension.isDependency("namespace"));
 
         this.installedExtension.setDependency(true, "namespace");
 
-        Assert.assertTrue(this.installedExtension.isDependency("namespace"));
+        assertTrue(this.installedExtension.isDependency("namespace"));
 
         this.installedExtension.setDependency(false, "namespace");
 
-        Assert.assertFalse(this.installedExtension.isDependency("namespace"));
+        assertFalse(this.installedExtension.isDependency("namespace"));
 
         this.installedExtension.setDependency(false, null);
         this.installedExtension.setDependency(true, "namespace");
 
-        Assert.assertTrue(this.installedExtension.isDependency("namespace"));
+        assertTrue(this.installedExtension.isDependency("namespace"));
     }
 
     @Test
-    public void testGetNamespaces()
+    public void getNamespaces()
     {
-        Assert.assertNull(this.installedExtension.getNamespaces());
+        assertNull(this.installedExtension.getNamespaces());
 
         this.installedExtension.setInstalled(true, "namespace1");
 
-        Assert
-            .assertEquals(Arrays.asList("namespace1"), new ArrayList<String>(this.installedExtension.getNamespaces()));
+        assertEquals(Arrays.asList("namespace1"), new ArrayList<String>(this.installedExtension.getNamespaces()));
 
         this.installedExtension.setInstalled(true, "namespace2");
 
-        Assert.assertEquals(new HashSet<String>(Arrays.asList("namespace1", "namespace2")), new HashSet<String>(
-            this.installedExtension.getNamespaces()));
+        assertEquals(new HashSet<String>(Arrays.asList("namespace1", "namespace2")),
+            new HashSet<String>(this.installedExtension.getNamespaces()));
 
         this.installedExtension.setNamespaces(Arrays.asList("namespace3"));
 
-        Assert
-            .assertEquals(Arrays.asList("namespace3"), new ArrayList<String>(this.installedExtension.getNamespaces()));
+        assertEquals(Arrays.asList("namespace3"), new ArrayList<String>(this.installedExtension.getNamespaces()));
 
     }
 
     @Test
-    public void testSetInstallDate()
+    public void setInstallDate()
     {
         Date date = new Date(13);
 
         this.installedExtension.setInstallDate(date, "foo");
-        Assert.assertNull(this.installedExtension.getInstallDate("foo"));
+        assertNull(this.installedExtension.getInstallDate("foo"));
 
         this.installedExtension.setInstallDate(date, null);
-        Assert.assertNull(this.installedExtension.getInstallDate(null));
+        assertNull(this.installedExtension.getInstallDate(null));
 
         this.installedExtension.setInstalled(true, "foo");
         this.installedExtension.setInstallDate(date, "foo");
-        Assert.assertEquals(date, this.installedExtension.getInstallDate("foo"));
-        Assert.assertNull(this.installedExtension.getInstallDate("bar"));
-        Assert.assertNull(this.installedExtension.getInstallDate(null));
+        assertEquals(date, this.installedExtension.getInstallDate("foo"));
+        assertNull(this.installedExtension.getInstallDate("bar"));
+        assertNull(this.installedExtension.getInstallDate(null));
 
         this.installedExtension.setInstalled(false, "foo");
-        Assert.assertNull(this.installedExtension.getInstallDate("foo"));
+        assertNull(this.installedExtension.getInstallDate("foo"));
 
         this.installedExtension.setInstalled(true, null);
         this.installedExtension.setInstallDate(date, null);
-        Assert.assertEquals(date, this.installedExtension.getInstallDate(null));
-        Assert.assertEquals(date, this.installedExtension.getInstallDate("foo"));
+        assertEquals(date, this.installedExtension.getInstallDate(null));
+        assertEquals(date, this.installedExtension.getInstallDate("foo"));
 
         this.installedExtension.setInstalled(false, null);
-        Assert.assertNull(this.installedExtension.getInstallDate(null));
-        Assert.assertNull(this.installedExtension.getInstallDate("foo"));
+        assertNull(this.installedExtension.getInstallDate(null));
+        assertNull(this.installedExtension.getInstallDate("foo"));
 
         this.installedExtension.setInstalled(true, "foo");
         this.installedExtension.setInstallDate(new Date(27), "foo");
         this.installedExtension.setInstalled(true, null);
         this.installedExtension.setInstallDate(date, null);
-        Assert.assertEquals(date, this.installedExtension.getInstallDate(null));
-        Assert.assertEquals(date, this.installedExtension.getInstallDate("foo"));
+        assertEquals(date, this.installedExtension.getInstallDate(null));
+        assertEquals(date, this.installedExtension.getInstallDate("foo"));
+    }
+
+    @Test
+    public void isValidated()
+    {
+        assertFalse(this.installedExtension.isValidated("namespace1"));
+        assertFalse(this.installedExtension.isValidated("namespace2"));
+
+        this.installedExtension.setValid("namespace1", true);
+
+        assertTrue(this.installedExtension.isValidated("namespace1"));
+        assertFalse(this.installedExtension.isValidated("namespace2"));
+
+        this.installedExtension.setValid("namespace2", false);
+
+        assertTrue(this.installedExtension.isValidated("namespace1"));
+        assertTrue(this.installedExtension.isValidated("namespace2"));
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/repository/local/DefaultExtensionSerializerTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/repository/local/DefaultExtensionSerializerTest.java
index 9864ae9..671c5a2 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/repository/local/DefaultExtensionSerializerTest.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/repository/local/DefaultExtensionSerializerTest.java
@@ -21,84 +21,84 @@
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
-import java.net.MalformedURLException;
-import java.net.URL;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.Date;
 import java.util.HashSet;
 
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.transform.TransformerException;
 
-import org.junit.Assert;
-import org.junit.Rule;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.xwiki.component.manager.ComponentLookupException;
-import org.xwiki.extension.DefaultExtensionAuthor;
-import org.xwiki.extension.DefaultExtensionDependency;
+import org.xwiki.extension.AbstractExtensionTest;
 import org.xwiki.extension.DefaultExtensionIssueManagement;
 import org.xwiki.extension.DefaultExtensionScm;
 import org.xwiki.extension.DefaultExtensionScmConnection;
 import org.xwiki.extension.ExtensionId;
-import org.xwiki.extension.ExtensionLicense;
 import org.xwiki.extension.InvalidExtensionException;
 import org.xwiki.extension.internal.ExtensionFactory;
 import org.xwiki.extension.repository.internal.DefaultExtensionSerializer;
-import org.xwiki.extension.repository.internal.ExtensionSerializer;
 import org.xwiki.extension.repository.internal.local.DefaultLocalExtension;
-import org.xwiki.extension.version.internal.DefaultVersionConstraint;
 import org.xwiki.test.annotation.ComponentList;
-import org.xwiki.test.mockito.MockitoComponentMockingRule;
+import org.xwiki.test.junit5.mockito.ComponentTest;
+import org.xwiki.test.junit5.mockito.InjectMockComponents;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
+
+@ComponentTest
 @ComponentList(ExtensionFactory.class)
 public class DefaultExtensionSerializerTest
 {
-    @Rule
-    public final MockitoComponentMockingRule<ExtensionSerializer> componentManager =
-        new MockitoComponentMockingRule<ExtensionSerializer>(DefaultExtensionSerializer.class);
+    @InjectMockComponents
+    private DefaultExtensionSerializer serializer;
 
     private DefaultLocalExtension serializeAndUnserialize(DefaultLocalExtension extension)
-        throws ParserConfigurationException, TransformerException, InvalidExtensionException, ComponentLookupException
+        throws ParserConfigurationException, TransformerException, InvalidExtensionException
     {
         ByteArrayOutputStream os = new ByteArrayOutputStream();
 
-        this.componentManager.getComponentUnderTest().saveExtensionDescriptor(extension, os);
+        this.serializer.saveExtensionDescriptor(extension, os);
 
         ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());
 
-        DefaultLocalExtension unserializedExtension =
-            this.componentManager.getComponentUnderTest().loadLocalExtensionDescriptor(null, is);
-
-        Assert.assertEquals(extension, unserializedExtension);
-        Assert.assertEquals(extension.getDescription(), unserializedExtension.getDescription());
-        Assert.assertEquals(extension.getName(), unserializedExtension.getName());
-        Assert.assertEquals(extension.getCategory(), unserializedExtension.getCategory());
-        Assert.assertEquals(extension.getSummary(), unserializedExtension.getSummary());
-        Assert.assertEquals(extension.getWebSite(), unserializedExtension.getWebSite());
-        Assert.assertEquals(extension.getAuthors(), unserializedExtension.getAuthors());
-        Assert.assertEquals(new ArrayList<ExtensionId>(extension.getExtensionFeatures()),
-            new ArrayList<ExtensionId>(unserializedExtension.getExtensionFeatures()));
-        Assert.assertEquals(new ArrayList<String>(extension.getFeatures()),
-            new ArrayList<String>(unserializedExtension.getFeatures()));
-        Assert.assertEquals(new ArrayList<String>(extension.getAllowedNamespaces()),
-            new ArrayList<String>(unserializedExtension.getAllowedNamespaces()));
-        Assert.assertEquals(new ArrayList<ExtensionLicense>(extension.getLicenses()),
-            new ArrayList<ExtensionLicense>(unserializedExtension.getLicenses()));
-        Assert.assertEquals(extension.getScm(), unserializedExtension.getScm());
-        Assert.assertEquals(extension.getIssueManagement(), unserializedExtension.getIssueManagement());
-        Assert.assertEquals(extension.getProperties(), unserializedExtension.getProperties());
+        DefaultLocalExtension unserializedExtension = this.serializer.loadLocalExtensionDescriptor(null, is);
+
+        assertEquals(extension, unserializedExtension);
+        assertEquals(extension.getDescription(), unserializedExtension.getDescription());
+        assertEquals(extension.getName(), unserializedExtension.getName());
+        assertEquals(extension.getCategory(), unserializedExtension.getCategory());
+        assertEquals(extension.getSummary(), unserializedExtension.getSummary());
+        assertEquals(extension.getWebSite(), unserializedExtension.getWebSite());
+        assertEquals(extension.getAuthors(), unserializedExtension.getAuthors());
+        assertEquals(new ArrayList<>(extension.getExtensionFeatures()),
+            new ArrayList<>(unserializedExtension.getExtensionFeatures()));
+        assertEquals(new ArrayList<>(extension.getFeatures()), new ArrayList<>(unserializedExtension.getFeatures()));
+        if (extension.getAllowedNamespaces() != null) {
+            assertEquals(new ArrayList<>(extension.getAllowedNamespaces()),
+                new ArrayList<>(unserializedExtension.getAllowedNamespaces()));
+        } else {
+            assertNull(unserializedExtension.getAllowedNamespaces());
+        }
+        assertEquals(new ArrayList<>(extension.getLicenses()), new ArrayList<>(unserializedExtension.getLicenses()));
+        assertEquals(extension.getScm(), unserializedExtension.getScm());
+        assertEquals(extension.getIssueManagement(), unserializedExtension.getIssueManagement());
+        assertEquals(extension.getProperties(), unserializedExtension.getProperties());
 
+        assertEquals(extension.getDependencies().size(), unserializedExtension.getDependencies().size());
         for (int i = 0; i < extension.getDependencies().size(); ++i) {
-            Assert.assertEquals(extension.getDependencies().get(i), unserializedExtension.getDependencies().get(i));
-            Assert.assertEquals(extension.getDependencies().get(i).getProperties(),
+            assertEquals(extension.getDependencies().get(i), unserializedExtension.getDependencies().get(i));
+            assertEquals(extension.getDependencies().get(i).getProperties(),
                 unserializedExtension.getDependencies().get(i).getProperties());
         }
 
+        assertEquals(extension.getManagedDependencies().size(), unserializedExtension.getManagedDependencies().size());
         for (int i = 0; i < extension.getManagedDependencies().size(); ++i) {
-            Assert.assertEquals(extension.getManagedDependencies().get(i),
+            assertEquals(extension.getManagedDependencies().get(i),
                 unserializedExtension.getManagedDependencies().get(i));
-            Assert.assertEquals(extension.getManagedDependencies().get(i).getProperties(),
+            assertEquals(extension.getManagedDependencies().get(i).getProperties(),
                 unserializedExtension.getManagedDependencies().get(i).getProperties());
         }
 
@@ -108,21 +108,27 @@ private DefaultLocalExtension serializeAndUnserialize(DefaultLocalExtension exte
     // Tests
 
     @Test
-    public void testSerialize() throws ParserConfigurationException, TransformerException, InvalidExtensionException,
-        MalformedURLException, ComponentLookupException
+    public void testSerializeAndUnserialize()
+        throws ParserConfigurationException, TransformerException, InvalidExtensionException, ComponentLookupException
     {
         DefaultLocalExtension extension =
             new DefaultLocalExtension(null, new ExtensionId("extensionid", "extensionversion"), "type");
 
         // Minimum extension
-        // serializeAndUnserialize(extension);
+        serializeAndUnserialize(extension);
 
-        DefaultExtensionDependency dependency =
-            new DefaultExtensionDependency("dependencyid", new DefaultVersionConstraint("dependencyversion"));
-        extension.addDependency(dependency);
+        extension.addDependency(AbstractExtensionTest.DEPENDENCY1);
 
         // Minimum extension with minimum dependency
-        // serializeAndUnserialize(extension);
+        serializeAndUnserialize(extension);
+
+        extension.addDependency(AbstractExtensionTest.DEPENDENCY2);
+
+        AbstractExtensionTest.DEPENDENCY1
+            .setProperties(Collections.<String, Object>singletonMap("dependencykey", "dependencyvalue"));
+
+        extension.addManagedDependency(AbstractExtensionTest.DEPENDENCY1);
+        extension.addManagedDependency(AbstractExtensionTest.DEPENDENCY2);
 
         extension.setDescription("description");
         extension.setSummary("summary");
@@ -133,19 +139,21 @@ public void testSerialize() throws ParserConfigurationException, TransformerExce
 
         extension.putProperty("key1", "value1");
         extension.putProperty("key2", true);
-        extension.putProperty("key3", 42);
-        extension.putProperty("key4", Arrays.asList("list1", "list2"));
-        extension.putProperty("key5", new HashSet<String>(Arrays.asList("list1", "list2")));
-        extension.putProperty("key6", Collections.<String, Object>singletonMap("key", "value"));
-        extension.putProperty("key7", Collections.<String, Object>singletonMap("key",
-            Collections.<String, Object>singletonMap("subkey", "subvalue")));
-
-        extension.addAuthor(new DefaultExtensionAuthor("authorname", "http://authorurl"));
+        extension.putProperty("key3", false);
+        extension.putProperty("key4", 42);
+        extension.putProperty("key5", Arrays.asList("list1", "list2"));
+        extension.putProperty("key6", new HashSet<String>(Arrays.asList("list1", "list2")));
+        extension.putProperty("key7", Collections.singletonMap("key", "value"));
+        extension.putProperty("key8", Collections.singletonMap("key", Collections.singletonMap("subkey", "subvalue")));
+        extension.putProperty("key9", new Date(0));
+
+        extension.addAuthor(AbstractExtensionTest.AUTHOR1);
+        extension.addAuthor(AbstractExtensionTest.AUTHOR2);
         extension.addFeature("feature1");
         extension.addExtensionFeature(new ExtensionId("feature2", "version"));
         extension.addAllowedNamespace("namespae1");
-        extension.addLicense(new ExtensionLicense("licensename", Arrays.asList("license content")));
-        dependency.setProperties(Collections.<String, Object>singletonMap("dependencykey", "dependencyvalue"));
+        extension.addLicense(AbstractExtensionTest.LICENSE1);
+        extension.addLicense(AbstractExtensionTest.LICENSE2);
 
         extension.setScm(new DefaultExtensionScm("url", new DefaultExtensionScmConnection("system", "path"),
             new DefaultExtensionScmConnection("system2", "path2")));
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/repository/local/DefaultLocalExtensionRepositoryTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/repository/local/DefaultLocalExtensionRepositoryTest.java
index 0f30392..167b8ba 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/repository/local/DefaultLocalExtensionRepositoryTest.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/repository/local/DefaultLocalExtensionRepositoryTest.java
@@ -37,6 +37,7 @@
 import org.xwiki.extension.repository.search.ExtensionQuery.COMPARISON;
 import org.xwiki.extension.repository.search.SearchException;
 import org.xwiki.extension.test.MockitoRepositoryUtilsRule;
+import org.xwiki.extension.version.Version;
 import org.xwiki.extension.version.internal.DefaultVersionConstraint;
 import org.xwiki.test.annotation.AllComponents;
 import org.xwiki.test.mockito.MockitoComponentManagerRule;
@@ -263,4 +264,15 @@ public void testRemove() throws ResolveException
         Assert.assertFalse(this.localExtensionRepository
             .getLocalExtensionVersions(TestResources.INSTALLED_ID.getId() + "-feature").contains(localExtension));
     }
+
+    @Test
+    public void resolveVersions() throws ResolveException
+    {
+        IterableResult<Version> versions =
+            this.localExtensionRepository.resolveVersions(TestResources.INSTALLED_ONNAMESPACE_ID.getId(), 0, -1);
+
+        assertEquals(1, versions.getTotalHits());
+        assertEquals(1, versions.getSize());
+        assertEquals(TestResources.INSTALLED_ONNAMESPACE_ID.getVersion(), versions.iterator().next());
+    }
 }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/ConfigurableDefaultCoreExtensionRepository.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/ConfigurableDefaultCoreExtensionRepository.java
index 51dd6c5..6a6bc8b 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/ConfigurableDefaultCoreExtensionRepository.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/ConfigurableDefaultCoreExtensionRepository.java
@@ -42,22 +42,24 @@ public ConfigurableEnvironmentExtension(DefaultCoreExtensionRepository repositor
         }
     }
 
-    private ConfigurableEnvironmentExtension environmentExtension;
+    private ConfigurableEnvironmentExtension configurableEnvironmentExtension;
 
     public ConfigurableDefaultCoreExtensionRepository()
     {
-        this.environmentExtension = new ConfigurableEnvironmentExtension(this);
+        this.configurableEnvironmentExtension = new ConfigurableEnvironmentExtension(this);
     }
 
     @Override
     public CoreExtension getEnvironmentExtension()
     {
-        return getConfigurableEnvironmentExtension();
+        CoreExtension coreExtension = super.getEnvironmentExtension();
+
+        return coreExtension != null ? coreExtension : getConfigurableEnvironmentExtension();
     }
 
     public ConfigurableEnvironmentExtension getConfigurableEnvironmentExtension()
     {
-        return this.environmentExtension;
+        return this.configurableEnvironmentExtension;
     }
 
     @Override
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/MockitoRepositoryUtils.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/MockitoRepositoryUtils.java
index e5b5d5c..c317193 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/MockitoRepositoryUtils.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/MockitoRepositoryUtils.java
@@ -23,9 +23,10 @@
 import java.util.List;
 
 import org.mockito.Mockito;
+import org.mockito.internal.util.MockUtil;
 import org.xwiki.component.annotation.ComponentAnnotationLoader;
 import org.xwiki.component.descriptor.ComponentDescriptor;
-import org.xwiki.component.descriptor.DefaultComponentDescriptor;
+import org.xwiki.configuration.ConfigurationSource;
 import org.xwiki.configuration.internal.MemoryConfigurationSource;
 import org.xwiki.environment.Environment;
 import org.xwiki.extension.handler.ExtensionInitializer;
@@ -33,19 +34,19 @@
 import org.xwiki.extension.repository.DefaultExtensionRepositoryDescriptor;
 import org.xwiki.extension.repository.ExtensionRepositoryManager;
 import org.xwiki.extension.version.internal.DefaultVersion;
-import org.xwiki.test.mockito.MockitoComponentManagerRule;
+import org.xwiki.test.mockito.MockitoComponentManager;
 
 import static org.mockito.ArgumentMatchers.any;
 
 public class MockitoRepositoryUtils extends RepositoryUtils
 {
-    protected final MockitoComponentManagerRule componentManager;
+    protected final MockitoComponentManager componentManager;
 
     private FileExtensionRepository remoteRepository;
 
     private ComponentAnnotationLoader componentLoader;
 
-    public MockitoRepositoryUtils(MockitoComponentManagerRule componentManager)
+    public MockitoRepositoryUtils(MockitoComponentManager componentManager)
     {
         this.componentManager = componentManager;
     }
@@ -53,20 +54,37 @@ public MockitoRepositoryUtils(MockitoComponentManagerRule componentManager)
     @Override
     public void setup() throws Exception
     {
-        super.setup();
+        Environment environment = null;
+        if (this.componentManager.hasComponent(Environment.class)) {
+            // Reconfigure repository directories based on existing mocked environment
+            environment = this.componentManager.getInstance(Environment.class);
+            if (MockUtil.isMock(environment)) {
+                initializeDirectories(environment);
+            } else {
+                // Force mocking environment
+                environment = null;
+            }
+        }
 
-        // Disable default repositories
-        MemoryConfigurationSource memoryConfigurationSource = this.componentManager.registerMemoryConfigurationSource();
-        memoryConfigurationSource.setProperty("extension.repositories", Arrays.asList(""));
+        if (environment == null) {
+            environment = this.componentManager.registerMockComponent(Environment.class);
+            Mockito.when(environment.getPermanentDirectory()).thenReturn(getPermanentDirectory());
+            Mockito.when(environment.getTemporaryDirectory()).thenReturn(getTemporaryDirectory());
+            Mockito.when(environment.getResourceAsStream(any())).thenReturn(null);
+        }
 
-        final Environment environment = this.componentManager.registerMockComponent(Environment.class);
-        Mockito.when(environment.getPermanentDirectory()).thenReturn(getPermanentDirectory());
-        Mockito.when(environment.getTemporaryDirectory()).thenReturn(getTemporaryDirectory());
-        Mockito.when(environment.getResourceAsStream(any())).thenReturn(null);
+        super.setup();
 
-        DefaultComponentDescriptor<Environment> dcd = new DefaultComponentDescriptor<Environment>();
-        dcd.setRoleType(Environment.class);
-        this.componentManager.registerComponent(dcd, environment);
+        ConfigurationSource configurationSource;
+        if (!this.componentManager.hasComponent(ConfigurationSource.class)) {
+            configurationSource = this.componentManager.registerMemoryConfigurationSource();
+        } else {
+            configurationSource = this.componentManager.getInstance(ConfigurationSource.class);
+        }
+        if (configurationSource instanceof MemoryConfigurationSource) {
+            // Disable default repositories
+            ((MemoryConfigurationSource) configurationSource).setProperty("extension.repositories", Arrays.asList(""));
+        }
 
         // add default test core extension
         registerComponent(ConfigurableDefaultCoreExtensionRepository.class);
@@ -87,13 +105,13 @@ public void setup() throws Exception
         // maven repositories
 
         if (getMavenRepository().exists()) {
-            repositoryManager.addRepository(new DefaultExtensionRepositoryDescriptor(MAVENREPOSITORY_ID, "maven",
-                getMavenRepository().toURI()));
+            repositoryManager.addRepository(
+                new DefaultExtensionRepositoryDescriptor(MAVENREPOSITORY_ID, "maven", getMavenRepository().toURI()));
         }
 
         if (getMaven2Repository().exists()) {
-            repositoryManager.addRepository(new DefaultExtensionRepositoryDescriptor(MAVEN2REPOSITORY_ID, "maven",
-                getMaven2Repository().toURI()));
+            repositoryManager.addRepository(
+                new DefaultExtensionRepositoryDescriptor(MAVEN2REPOSITORY_ID, "maven", getMaven2Repository().toURI()));
         }
 
         // init
@@ -101,7 +119,7 @@ public void setup() throws Exception
         this.componentManager.<ExtensionInitializer>getInstance(ExtensionInitializer.class);
     }
 
-    public MockitoComponentManagerRule getComponentManager()
+    public MockitoComponentManager getComponentManager()
     {
         return this.componentManager;
     }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/MockitoRepositoryUtilsRule.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/MockitoRepositoryUtilsRule.java
index 008b6be..6547587 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/MockitoRepositoryUtilsRule.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/MockitoRepositoryUtilsRule.java
@@ -22,6 +22,7 @@
 import org.junit.rules.MethodRule;
 import org.junit.runners.model.FrameworkMethod;
 import org.junit.runners.model.Statement;
+import org.xwiki.test.mockito.MockitoComponentManager;
 import org.xwiki.test.mockito.MockitoComponentManagerRule;
 
 public class MockitoRepositoryUtilsRule extends MockitoRepositoryUtils implements MethodRule
@@ -38,7 +39,10 @@ public MockitoRepositoryUtilsRule(MockitoComponentManagerRule componentManager)
         this(componentManager, componentManager);
     }
 
-    public MockitoRepositoryUtilsRule(MockitoComponentManagerRule componentManager, MethodRule parent)
+    /**
+     * @since 10.2
+     */
+    public MockitoRepositoryUtilsRule(MockitoComponentManager componentManager, MethodRule parent)
     {
         super(componentManager);
 
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/RepositoryUtils.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/RepositoryUtils.java
index d851bf2..4b56a79 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/RepositoryUtils.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/RepositoryUtils.java
@@ -35,6 +35,7 @@
 import org.reflections.util.ClasspathHelper;
 import org.reflections.util.ConfigurationBuilder;
 import org.reflections.util.FilterBuilder;
+import org.xwiki.environment.Environment;
 
 /**
  * @version $Id$
@@ -45,34 +46,54 @@
 
     protected static final String MAVEN2REPOSITORY_ID = "test-maven2";
 
-    protected final File permanentDirectory;
+    protected static final String MAVENUNKNWONREPOSITORY_ID = "test-mavenunknown";
 
-    protected final File temporaryDirectory;
+    protected File permanentDirectory;
 
-    protected final File extensionDirectory;
+    protected File temporaryDirectory;
 
-    protected final File localRepositoryRoot;
+    protected File extensionDirectory;
 
-    protected final File mavenRepositoryRoot;
+    protected File localRepositoryRoot;
 
-    protected final File maven2RepositoryRoot;
+    protected File mavenRepositoryRoot;
 
-    protected final File remoteRepositoryRoot;
+    protected File maven2RepositoryRoot;
 
-    protected final ExtensionPackager extensionPackager;
+    protected File mavenUnknownRepositoryRoot;
+
+    protected File remoteRepositoryRoot;
+
+    protected ExtensionPackager extensionPackager;
 
     public RepositoryUtils()
     {
+        initializeDirectories();
+    }
+
+    protected void initializeDirectories(Environment environment)
+    {
+        this.temporaryDirectory = environment.getTemporaryDirectory();
+        this.permanentDirectory = environment.getPermanentDirectory();
+
+        initializeDirectories();
+    }
+
+    protected void initializeDirectories()
+    {
         File testDirectory = new File("target/test-" + new Date().getTime()).getAbsoluteFile();
 
-        this.temporaryDirectory = new File(testDirectory, "temporary-dir");
+        if (this.temporaryDirectory == null) {
+            this.temporaryDirectory = new File(testDirectory, "temporary-dir");
+            this.permanentDirectory = new File(testDirectory, "permanent-dir");
+        }
 
-        this.permanentDirectory = new File(testDirectory, "permanent-dir");
         this.extensionDirectory = new File(this.permanentDirectory, "extension/");
         this.localRepositoryRoot = new File(this.extensionDirectory, "repository/");
 
         this.mavenRepositoryRoot = new File(testDirectory, "maven/");
         this.maven2RepositoryRoot = new File(testDirectory, "maven2/");
+        this.mavenUnknownRepositoryRoot = new File(testDirectory, "mavenunknown/");
         this.remoteRepositoryRoot = new File(testDirectory, "remote/");
 
         Map<String, RepositorySerializer> repositories = new HashMap<String, RepositorySerializer>();
@@ -125,6 +146,11 @@ public File getMaven2Repository()
         return this.maven2RepositoryRoot;
     }
 
+    public File getMavenUnknownRepository()
+    {
+        return this.mavenUnknownRepositoryRoot;
+    }
+
     public String getMavenRepositoryId()
     {
         return MAVENREPOSITORY_ID;
@@ -135,6 +161,11 @@ public String getMaven2RepositoryId()
         return MAVEN2REPOSITORY_ID;
     }
 
+    public String getMavenUnknown()
+    {
+        return MAVEN2REPOSITORY_ID;
+    }
+
     public ExtensionPackager getExtensionPackager()
     {
         return this.extensionPackager;
@@ -147,6 +178,7 @@ public void setup() throws Exception
         copyResourceFolder(getLocalRepository(), "repository.local");
         copyResourceFolder(getMavenRepository(), "repository.maven");
         copyResourceFolder(getMaven2Repository(), "repository.maven2");
+        copyResourceFolder(getMaven2Repository(), "repository.mavenunknown");
 
         // generated extensions
 
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/TestVersion.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/TestVersion.java
new file mode 100644
index 0000000..b6a4488
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/TestVersion.java
@@ -0,0 +1,57 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.extension.test;
+
+import org.xwiki.extension.version.Version;
+import org.xwiki.extension.version.internal.DefaultVersion;
+
+/**
+ * Just here to have an implementation of {@link Version} which is not {@link DefaultVersion}.
+ * 
+ * @version $Id$
+ * @since 10.7RC1
+ */
+public class TestVersion implements Version
+{
+    private final String version;
+
+    public TestVersion(String version)
+    {
+        this.version = version;
+    }
+
+    @Override
+    public int compareTo(Version o)
+    {
+        return 0;
+    }
+
+    @Override
+    public String getValue()
+    {
+        return this.version;
+    }
+
+    @Override
+    public Type getType()
+    {
+        return Type.STABLE;
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/version/internal/DefaultVersionConstraintTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/version/internal/DefaultVersionConstraintTest.java
index a4c57a0..a3a0648 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/version/internal/DefaultVersionConstraintTest.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/version/internal/DefaultVersionConstraintTest.java
@@ -21,19 +21,21 @@
 
 import java.util.Arrays;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+import org.xwiki.extension.test.TestVersion;
 import org.xwiki.extension.version.IncompatibleVersionConstraintException;
 import org.xwiki.extension.version.InvalidVersionRangeException;
+import org.xwiki.extension.version.Version;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class DefaultVersionConstraintTest
 {
     @Test
-    public void testMerge() throws IncompatibleVersionConstraintException
+    public void merge() throws IncompatibleVersionConstraintException
     {
         assertEquals("2.0", new DefaultVersionConstraint("1.0").merge(new DefaultVersionConstraint("2.0")).getValue());
         assertEquals("[2.0]",
@@ -45,23 +47,19 @@ public void testMerge() throws IncompatibleVersionConstraintException
 
         // Invalid
 
-        try {
+        Throwable exception = assertThrows(IncompatibleVersionConstraintException.class, () -> {
             new DefaultVersionConstraint("[1.0]").merge(new DefaultVersionConstraint("[2.0]")).getValue();
-            Assert.fail("Should have failed");
-        } catch (IncompatibleVersionConstraintException expected) {
-            // expected
-        }
+        });
+        assertEquals("Ranges [[1.0]] and [[2.0]] are incompatibles", exception.getMessage());
 
-        try {
+        exception = assertThrows(IncompatibleVersionConstraintException.class, () -> {
             new DefaultVersionConstraint("[1.0]").merge(new DefaultVersionConstraint("2.0")).getValue();
-            Assert.fail("Should have failed");
-        } catch (IncompatibleVersionConstraintException expected) {
-            // expected
-        }
+        });
+        assertEquals("Ranges [[1.0]] and [[2.0,]] are incompatibles", exception.getMessage());
     }
 
     @Test
-    public void testParse() throws InvalidVersionRangeException
+    public void parse() throws InvalidVersionRangeException
     {
         assertEquals("1.0", new DefaultVersionConstraint("1.0").getVersion().getValue());
         assertEquals(Arrays.asList(new DefaultVersionRangeCollection("[1.0]")),
@@ -79,16 +77,22 @@ public void testParse() throws InvalidVersionRangeException
     }
 
     @Test
-    public void testContainsVersion()
+    public void containsVersion()
     {
-        assertTrue(new DefaultVersionConstraint("1.0").containsVersion(new DefaultVersion("1.0")));
-        assertFalse(new DefaultVersionConstraint("1.0").containsVersion(new DefaultVersion("2.0")));
+        assertTrue(new DefaultVersionConstraint("1.0").containsVersion((Version) new DefaultVersion("1.0")));
+        assertFalse(new DefaultVersionConstraint("1.0").containsVersion((Version) new DefaultVersion("2.0")));
+
+        assertTrue(new DefaultVersionConstraint("1.0").containsVersion(new TestVersion("1.0")));
+        assertFalse(new DefaultVersionConstraint("1.0").containsVersion(new TestVersion("2.0")));
     }
 
     @Test
-    public void testIsCompatible()
+    public void isCompatible()
     {
-        assertTrue(new DefaultVersionConstraint("1.0").isCompatible(new DefaultVersion("1.0")));
-        assertTrue(new DefaultVersionConstraint("1.0").isCompatible(new DefaultVersion("2.0")));
+        assertTrue(new DefaultVersionConstraint("1.0").isCompatible((Version) new DefaultVersion("1.0")));
+        assertTrue(new DefaultVersionConstraint("1.0").isCompatible((Version) new DefaultVersion("2.0")));
+
+        assertTrue(new DefaultVersionConstraint("1.0").isCompatible(new TestVersion("1.0")));
+        assertTrue(new DefaultVersionConstraint("1.0").isCompatible(new TestVersion("2.0")));
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/version/internal/DefaultVersionRangeTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/version/internal/DefaultVersionRangeTest.java
index 9d43452..d7e92a9 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/version/internal/DefaultVersionRangeTest.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/version/internal/DefaultVersionRangeTest.java
@@ -19,110 +19,132 @@
  */
 package org.xwiki.extension.version.internal;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+import org.xwiki.extension.test.TestVersion;
 import org.xwiki.extension.version.InvalidVersionRangeException;
+import org.xwiki.extension.version.Version;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
+import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class DefaultVersionRangeTest
 {
     @Test
-    public void testIsCompatible() throws InvalidVersionRangeException
+    public void isCompatible() throws InvalidVersionRangeException
     {
         // Compatible
-        Assert.assertTrue(new DefaultVersionRange("[1.0]").isCompatible(new DefaultVersionRange("[1.0]")));
-        Assert.assertTrue(new DefaultVersionRange("[1.0,2.0]").isCompatible(new DefaultVersionRange("[1.0]")));
-        Assert.assertTrue(new DefaultVersionRange("[1.0,2.0]").isCompatible(new DefaultVersionRange("[1.0,3.0]")));
-        Assert.assertTrue(new DefaultVersionRange("[1.0,2.0]").isCompatible(new DefaultVersionRange("[2.0,3.0]")));
-        Assert.assertTrue(new DefaultVersionRange("(,2.0]").isCompatible(new DefaultVersionRange("[2.0,)")));
-        Assert.assertTrue(new DefaultVersionRange("(,2.0]").isCompatible(new DefaultVersionRange("[1.0,)")));
-        Assert.assertTrue(new DefaultVersionRange("(,2.0)").isCompatible(new DefaultVersionRange("(1.0,)")));
+        assertTrue(new DefaultVersionRange("[1.0]").isCompatible(new DefaultVersionRange("[1.0]")));
+        assertTrue(new DefaultVersionRange("[1.0,2.0]").isCompatible(new DefaultVersionRange("[1.0]")));
+        assertTrue(new DefaultVersionRange("[1.0,2.0]").isCompatible(new DefaultVersionRange("[1.0,3.0]")));
+        assertTrue(new DefaultVersionRange("[1.0,2.0]").isCompatible(new DefaultVersionRange("[2.0,3.0]")));
+        assertTrue(new DefaultVersionRange("(,2.0]").isCompatible(new DefaultVersionRange("[2.0,)")));
+        assertTrue(new DefaultVersionRange("(,2.0]").isCompatible(new DefaultVersionRange("[1.0,)")));
+        assertTrue(new DefaultVersionRange("(,2.0)").isCompatible(new DefaultVersionRange("(1.0,)")));
 
         // Not compatible
-        Assert.assertFalse(new DefaultVersionRange("[1.0,2.0)").isCompatible(new DefaultVersionRange("(2.0,3.0]")));
-        Assert.assertFalse(new DefaultVersionRange("(,2.0)").isCompatible(new DefaultVersionRange("(2.0,)")));
-        Assert.assertFalse(new DefaultVersionRange("[1.0]").isCompatible(new DefaultVersionRange("[2.0]")));
+        assertFalse(new DefaultVersionRange("[1.0,2.0)").isCompatible(new DefaultVersionRange("(2.0,3.0]")));
+        assertFalse(new DefaultVersionRange("(,2.0)").isCompatible(new DefaultVersionRange("(2.0,)")));
+        assertFalse(new DefaultVersionRange("[1.0]").isCompatible(new DefaultVersionRange("[2.0]")));
     }
 
     @Test
-    public void testGetValue()
+    public void getValue()
     {
-        Assert.assertEquals("[1.0,2.0]", new DefaultVersionRange(new DefaultVersion("1.0"), true, new DefaultVersion(
+        assertEquals("[1.0,2.0]", new DefaultVersionRange(new DefaultVersion("1.0"), true, new DefaultVersion(
             "2.0"), true).getValue());
-        Assert.assertEquals("(1.0,2.0]", new DefaultVersionRange(new DefaultVersion("1.0"), false, new DefaultVersion(
+        assertEquals("(1.0,2.0]", new DefaultVersionRange(new DefaultVersion("1.0"), false, new DefaultVersion(
             "2.0"), true).getValue());
-        Assert.assertEquals("[1.0,2.0)", new DefaultVersionRange(new DefaultVersion("1.0"), true, new DefaultVersion(
+        assertEquals("[1.0,2.0)", new DefaultVersionRange(new DefaultVersion("1.0"), true, new DefaultVersion(
             "2.0"), false).getValue());
-        Assert.assertEquals("(1.0,2.0)", new DefaultVersionRange(new DefaultVersion("1.0"), false, new DefaultVersion(
+        assertEquals("(1.0,2.0)", new DefaultVersionRange(new DefaultVersion("1.0"), false, new DefaultVersion(
             "2.0"), false).getValue());
 
-        Assert
-            .assertEquals("(1.0,)", new DefaultVersionRange(new DefaultVersion("1.0"), false, null, false).getValue());
-        Assert.assertEquals("[1.0,)", new DefaultVersionRange(new DefaultVersion("1.0"), true, null, false).getValue());
-        Assert.assertEquals("(1.0,]", new DefaultVersionRange(new DefaultVersion("1.0"), false, null, true).getValue());
-        Assert.assertEquals("[1.0,]", new DefaultVersionRange(new DefaultVersion("1.0"), true, null, true).getValue());
+        assertEquals("(1.0,)", new DefaultVersionRange(new DefaultVersion("1.0"), false, null, false).getValue());
+        assertEquals("[1.0,)", new DefaultVersionRange(new DefaultVersion("1.0"), true, null, false).getValue());
+        assertEquals("(1.0,]", new DefaultVersionRange(new DefaultVersion("1.0"), false, null, true).getValue());
+        assertEquals("[1.0,]", new DefaultVersionRange(new DefaultVersion("1.0"), true, null, true).getValue());
     }
 
     @Test
     public void testToString()
     {
-        Assert.assertEquals("[1.0,2.0]", new DefaultVersionRange(new DefaultVersion("1.0"), true, new DefaultVersion(
+        assertEquals("[1.0,2.0]", new DefaultVersionRange(new DefaultVersion("1.0"), true, new DefaultVersion(
             "2.0"), true).toString());
     }
 
     @Test
     public void testHashCode() throws InvalidVersionRangeException
     {
-        Assert.assertEquals(new DefaultVersionRange("[1.0,2.0]").hashCode(),
+        assertEquals(new DefaultVersionRange("[1.0,2.0]").hashCode(),
             new DefaultVersionRange("[1.0,2.0]").hashCode());
-        Assert.assertEquals(new DefaultVersionRange("[1.0]").hashCode(),
+        assertEquals(new DefaultVersionRange("[1.0]").hashCode(),
             new DefaultVersionRange("[1.0,1.0]").hashCode());
 
-        Assert.assertNotEquals(new DefaultVersionRange("[1.0,2.0)").hashCode(),
+        assertNotEquals(new DefaultVersionRange("[1.0,2.0)").hashCode(),
             new DefaultVersionRange("[1.0.2.0]").hashCode());
     }
 
     @Test
     public void testEquals() throws InvalidVersionRangeException
     {
-        Assert.assertEquals(new DefaultVersionRange("[1.0,2.0]"), new DefaultVersionRange("[1.0,2.0]"));
-        Assert.assertEquals(new DefaultVersionRange("[1.0]"), new DefaultVersionRange("[1.0,1.0]"));
+        assertEquals(new DefaultVersionRange("[1.0,2.0]"), new DefaultVersionRange("[1.0,2.0]"));
+        assertEquals(new DefaultVersionRange("[1.0]"), new DefaultVersionRange("[1.0,1.0]"));
 
-        Assert.assertNotEquals(new DefaultVersionRange("[1.0,2.0)"), new DefaultVersionRange("[1.0.2.0]"));
+        assertNotEquals(new DefaultVersionRange("[1.0,2.0)"), new DefaultVersionRange("[1.0.2.0]"));
     }
 
     @Test
-    public void testContainsVersion() throws InvalidVersionRangeException
+    public void containsVersion() throws InvalidVersionRangeException
     {
-        Assert.assertTrue(new DefaultVersionRange("[1.0,2.0]").containsVersion(new DefaultVersion("1.0")));
-        Assert.assertTrue(new DefaultVersionRange("[1.0,2.0]").containsVersion(new DefaultVersion("2.0")));
+        assertTrue(new DefaultVersionRange("[1.0,2.0]").containsVersion((Version) new DefaultVersion("1.0")));
+        assertTrue(new DefaultVersionRange("[1.0,2.0]").containsVersion((Version) new DefaultVersion("2.0")));
+
+        assertFalse(new DefaultVersionRange("[2.0]").containsVersion((Version) new DefaultVersion("1.0")));
+        assertFalse(new DefaultVersionRange("[2.0]").containsVersion((Version) new DefaultVersion("3.0")));
+        assertFalse(new DefaultVersionRange("(1.0,2.0)").containsVersion((Version) new DefaultVersion("1.0")));
+        assertFalse(new DefaultVersionRange("(1.0,2.0)").containsVersion((Version) new DefaultVersion("2.0")));
 
-        Assert.assertFalse(new DefaultVersionRange("[2.0]").containsVersion(new DefaultVersion("1.0")));
-        Assert.assertFalse(new DefaultVersionRange("[2.0]").containsVersion(new DefaultVersion("3.0")));
-        Assert.assertFalse(new DefaultVersionRange("(1.0,2.0)").containsVersion(new DefaultVersion("1.0")));
-        Assert.assertFalse(new DefaultVersionRange("(1.0,2.0)").containsVersion(new DefaultVersion("2.0")));
+        assertTrue(new DefaultVersionRange("[1.0,2.0]").containsVersion(new TestVersion("1.0")));
+        assertTrue(new DefaultVersionRange("[1.0,2.0]").containsVersion(new TestVersion("2.0")));
+
+        assertFalse(new DefaultVersionRange("[2.0]").containsVersion(new TestVersion("1.0")));
+        assertFalse(new DefaultVersionRange("[2.0]").containsVersion(new TestVersion("3.0")));
+        assertFalse(new DefaultVersionRange("(1.0,2.0)").containsVersion(new TestVersion("1.0")));
+        assertFalse(new DefaultVersionRange("(1.0,2.0)").containsVersion(new TestVersion("2.0")));
     }
 
-    @Test(expected = InvalidVersionRangeException.class)
-    public void testInvalidVersionRangeWithSingleVersionWithLowerBoundInclusive() throws InvalidVersionRangeException
+    @Test
+    public void invalidVersionRangeWithSingleVersionWithLowerBoundInclusive()
     {
-        new DefaultVersionRange("]1.0]");
+        assertThrows(InvalidVersionRangeException.class, () -> {
+            new DefaultVersionRange("]1.0]");
+        });
     }
 
-    @Test(expected = InvalidVersionRangeException.class)
-    public void testInvalidVersionRangeWithSingleVersionWithUpperBoundInclusive() throws InvalidVersionRangeException
+    @Test
+    public void invalidVersionRangeWithSingleVersionWithUpperBoundInclusive()
     {
-        new DefaultVersionRange("[1.0[");
+        assertThrows(InvalidVersionRangeException.class, () -> {
+            new DefaultVersionRange("[1.0[");
+        });
     }
 
-    @Test(expected = InvalidVersionRangeException.class)
-    public void testInvalidVersionRangeWithRangeMoreThanTwoBound() throws InvalidVersionRangeException
+    @Test
+    public void invalidVersionRangeWithRangeMoreThanTwoBound()
     {
-        new DefaultVersionRange("[1.0,2.0,3.0]");
+        assertThrows(InvalidVersionRangeException.class, () -> {
+            new DefaultVersionRange("[1.0,2.0,3.0]");
+        });
     }
 
-    @Test(expected = InvalidVersionRangeException.class)
-    public void testInvalidVersionRangeWithLowerBoundGreaterThanUpperBound() throws InvalidVersionRangeException
+    @Test
+    public void invalidVersionRangeWithLowerBoundGreaterThanUpperBound()
     {
-        new DefaultVersionRange("[2.0,1.0]");
+        assertThrows(InvalidVersionRangeException.class, () -> {
+            new DefaultVersionRange("[2.0,1.0]");
+        });
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/version/internal/DefaultVersionTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/version/internal/DefaultVersionTest.java
index a8b39fb..3a56707 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/version/internal/DefaultVersionTest.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/version/internal/DefaultVersionTest.java
@@ -25,10 +25,18 @@
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.xwiki.extension.version.Version;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+/**
+ * Validate {@link DefaultVersion}.
+ * 
+ * @version $Id$
+ */
 public class DefaultVersionTest
 {
     private void validateSerialize(Version version) throws IOException, ClassNotFoundException
@@ -41,42 +49,57 @@ private void validateSerialize(Version version) throws IOException, ClassNotFoun
 
         ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());
         ObjectInputStream in = new ObjectInputStream(inputStream);
-        Assert.assertEquals(version, in.readObject());
+        assertEquals(version, in.readObject());
         in.close();
         inputStream.close();
     }
 
+    // Tests
+
     @Test
-    public void testCompareTo()
+    public void compareTo()
     {
-        Assert.assertEquals(0, new DefaultVersion("1.1").compareTo(new DefaultVersion("1.1")));
-        Assert.assertTrue(new DefaultVersion("1.2").compareTo(new DefaultVersion("1.1")) > 0);
-        Assert.assertTrue(new DefaultVersion("1.1").compareTo(new DefaultVersion("1.2")) < 0);
+        assertEquals(0, new DefaultVersion("1.1").compareTo(new DefaultVersion("1.1")));
+        assertEquals(0, new DefaultVersion("1.1").compareTo(new DefaultVersion("1.1.0")));
+        assertEquals(0, new DefaultVersion("1.1").compareTo(new DefaultVersion("1.1.")));
+        assertEquals(0, new DefaultVersion("1.1").compareTo(new DefaultVersion("1.1ga")));
+        assertEquals(0, new DefaultVersion("1.1").compareTo(new DefaultVersion("1.1final")));
+        assertTrue(new DefaultVersion("1.2").compareTo(new DefaultVersion("1.1")) > 0);
+        assertTrue(new DefaultVersion("1.1").compareTo(new DefaultVersion("1.2")) < 0);
 
-        Assert.assertTrue(new DefaultVersion("1.1").compareTo(new DefaultVersion("1.1w")) < 0);
+        assertTrue(new DefaultVersion("1.1").compareTo(new DefaultVersion("1.1w")) < 0);
 
-        Assert.assertTrue(new DefaultVersion("1.1").compareTo(new DefaultVersion("1.1-milestone-1")) > 0);
-        Assert.assertTrue(new DefaultVersion("1.1.1").compareTo(new DefaultVersion("1.1-milestone-1")) > 0);
+        assertTrue(new DefaultVersion("1.1").compareTo(new DefaultVersion("1.1-milestone-1")) > 0);
+        assertTrue(new DefaultVersion("1.1.1").compareTo(new DefaultVersion("1.1-milestone-1")) > 0);
     }
 
     @Test
-    public void testType()
+    public void getType()
     {
-        Assert.assertEquals(Version.Type.SNAPSHOT, new DefaultVersion("1.1-SNAPSHOT").getType());
-        Assert.assertEquals(Version.Type.BETA, new DefaultVersion("1.1-milestone-1").getType());
-        Assert.assertEquals(Version.Type.STABLE, new DefaultVersion("1.1").getType());
+        assertEquals(Version.Type.SNAPSHOT, new DefaultVersion("1.1-SNAPSHOT").getType());
+        assertEquals(Version.Type.BETA, new DefaultVersion("1.1-milestone-1").getType());
+        assertEquals(Version.Type.STABLE, new DefaultVersion("1.1").getType());
     }
 
     @Test
-    public void testSerialize() throws IOException, ClassNotFoundException
+    public void serialize() throws IOException, ClassNotFoundException
     {
         validateSerialize(new DefaultVersion("1.1"));
         validateSerialize(new DefaultVersion("1.1-milestone-1"));
     }
 
     @Test
-    public void testBigInteger()
+    public void getTypeForBigInteger()
     {
         new DefaultVersion("1.2147483648").getType();
     }
+
+    @Test
+    public void testHashCode()
+    {
+        assertEquals(new DefaultVersion("1.1").hashCode(), new DefaultVersion("1.1").hashCode());
+        assertEquals(new DefaultVersion("1.1").hashCode(), new DefaultVersion("1.1.0").hashCode());
+
+        assertNotEquals(new DefaultVersion("1.1").hashCode(), new DefaultVersion("2.0").hashCode());
+    }
 }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/resources/repository/remote/crossdependency1-version.test b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/resources/repository/remote/crossdependency1-version.test
new file mode 100644
index 0000000..e69de29
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/resources/repository/remote/crossdependency1-version.xed b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/resources/repository/remote/crossdependency1-version.xed
new file mode 100644
index 0000000..bc8fd44
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/resources/repository/remote/crossdependency1-version.xed
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<extension>
+  <id>crossdependency1</id>
+  <version>version</version>
+  <type>test</type>
+  <dependencies>
+    <dependency>
+      <id>crossdependency2</id>
+      <version>version</version>
+    </dependency>
+  </dependencies>
+</extension>
\ No newline at end of file
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/resources/repository/remote/crossdependency2-version.test b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/resources/repository/remote/crossdependency2-version.test
new file mode 100644
index 0000000..e69de29
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/resources/repository/remote/crossdependency2-version.xed b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/resources/repository/remote/crossdependency2-version.xed
new file mode 100644
index 0000000..04de5ef
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/resources/repository/remote/crossdependency2-version.xed
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<extension>
+  <id>crossdependency2</id>
+  <version>version</version>
+  <type>test</type>
+  <dependencies>
+    <dependency>
+      <id>crossdependency1</id>
+      <version>version</version>
+    </dependency>
+  </dependencies>
+</extension>
\ No newline at end of file
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-handlers/pom.xml b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-handlers/pom.xml
index b647882..fb89e56 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-handlers/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-handlers/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-extension</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-extension-handlers</artifactId>
   <name>XWiki Commons - Extension - Handler - Parent POM</name>
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-handlers/xwiki-commons-extension-handler-jar/pom.xml b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-handlers/xwiki-commons-extension-handler-jar/pom.xml
index 9de6721..79a77ff 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-handlers/xwiki-commons-extension-handler-jar/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-handlers/xwiki-commons-extension-handler-jar/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-extension-handlers</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-extension-handler-jar</artifactId>
   <name>XWiki Commons - Extension - Handler - JAR</name>
@@ -33,6 +33,7 @@
   <description>XWiki Commons - Extension - Handler - JAR</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.81</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>0</xwiki.pitest.mutationThreshold>
     <!-- Old names of this module used for retro compatibility when resolving dependencies of old extensions -->
     <xwiki.extension.features>org.xwiki.platform:xwiki-platform-extension-handler-jar</xwiki.extension.features>
     <!-- Too many dependencies required -->
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-handlers/xwiki-commons-extension-handler-jar/src/main/java/org/xwiki/extension/jar/internal/handler/JarExtensionHandler.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-handlers/xwiki-commons-extension-handler-jar/src/main/java/org/xwiki/extension/jar/internal/handler/JarExtensionHandler.java
index 3a86db1..e369ebb 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-handlers/xwiki-commons-extension-handler-jar/src/main/java/org/xwiki/extension/jar/internal/handler/JarExtensionHandler.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-handlers/xwiki-commons-extension-handler-jar/src/main/java/org/xwiki/extension/jar/internal/handler/JarExtensionHandler.java
@@ -119,7 +119,7 @@ public static boolean isWebjar(Extension extension)
         // But it's not the case for:
 
         // ** webjar.org releases (i.e. most of the webjars). We assume "org.webjars:*" id means it's a webjar
-        if (extension.getId().getId().startsWith("org.webjars:")) {
+        if (StringUtils.startsWithAny(extension.getId().getId(), "org.webjars:", "org.webjars.")) {
             return true;
         }
         // ** contrib extensions which support version of XWiki older than 9.0RC1. We support a custom property which
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-handlers/xwiki-commons-extension-handler-jar/src/main/java/org/xwiki/extension/jar/internal/handler/JarExtensionJobFinishingListener.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-handlers/xwiki-commons-extension-handler-jar/src/main/java/org/xwiki/extension/jar/internal/handler/JarExtensionJobFinishingListener.java
index 29bfceb..c061d71 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-handlers/xwiki-commons-extension-handler-jar/src/main/java/org/xwiki/extension/jar/internal/handler/JarExtensionJobFinishingListener.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-handlers/xwiki-commons-extension-handler-jar/src/main/java/org/xwiki/extension/jar/internal/handler/JarExtensionJobFinishingListener.java
@@ -39,7 +39,6 @@
 import org.xwiki.component.annotation.Component;
 import org.xwiki.context.Execution;
 import org.xwiki.context.ExecutionContext;
-import org.xwiki.extension.ExtensionId;
 import org.xwiki.extension.InstalledExtension;
 import org.xwiki.extension.ResolveException;
 import org.xwiki.extension.UninstallException;
@@ -76,7 +75,7 @@ private void add(String namespace)
             if (!this.rootNamespace) {
                 if (namespace != null) {
                     if (this.namespaces == null) {
-                        this.namespaces = new HashSet<String>();
+                        this.namespaces = new HashSet<>();
                     }
                     this.namespaces.add(namespace);
                 } else {
@@ -168,7 +167,7 @@ private void popUninstallLevel()
                 (Stack<UninstalledExtensionCollection>) context.getProperty(contextKey);
 
             if (extensions == null && create) {
-                extensions = new Stack<UninstalledExtensionCollection>();
+                extensions = new Stack<>();
                 context.setProperty(contextKey, extensions);
             }
 
@@ -200,7 +199,7 @@ private UninstalledExtensionCollection getCurrentJobUninstalledExtensions(boolea
         return null;
     }
 
-    private void addUninstalledExtension(ExtensionId id, String namespace)
+    private void addUninstalledExtension(String namespace)
     {
         UninstalledExtensionCollection collection = getCurrentJobUninstalledExtensions(true);
 
@@ -228,7 +227,7 @@ public void onEvent(Event event, Object source, Object data)
     private void onExtensionRemovedEvent(ExtensionEvent event, InstalledExtension extension)
     {
         if (JarExtensionHandler.isSupported(extension.getType())) {
-            addUninstalledExtension(event.getExtensionId(), event.getNamespace());
+            addUninstalledExtension(event.getNamespace());
         }
     }
 
@@ -310,7 +309,7 @@ private void unloadJAR(InstalledExtension installedExtension, String namespace,
         Set<InstalledExtension> unloadedExtensionsInNamespace = unloadedExtensions.get(namespace);
 
         if (unloadedExtensionsInNamespace == null) {
-            unloadedExtensionsInNamespace = new HashSet<InstalledExtension>();
+            unloadedExtensionsInNamespace = new HashSet<>();
             unloadedExtensions.put(namespace, unloadedExtensionsInNamespace);
         }
 
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/pom.xml b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/pom.xml
index 5adac45..186041e 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-extension</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-extension-maven</artifactId>
   <name>XWiki Commons - Extension - Maven</name>
@@ -33,6 +33,7 @@
   <description>XWiki Commons - Extension - Maven</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.70</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>28</xwiki.pitest.mutationThreshold>
     <!-- Old names of this module used for retro compatibility when resolving dependencies of old extensions -->
     <xwiki.extension.features>org.xwiki.platform:xwiki-platform-extension-api</xwiki.extension.features>
     <!-- TODO: Remove once the tests have been fixed to not output anything to the console! -->
@@ -92,7 +93,7 @@
             <id>default</id>
             <configuration>
               <excludes>
-                **/ModelConverter.java,
+                **/AbstractModelConverter.java,
                 **/MavenUtils.java,
                 **/MavenExtensionScanner.java
               </excludes>
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/ArtifactModel.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/ArtifactModel.java
new file mode 100644
index 0000000..f9de616
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/ArtifactModel.java
@@ -0,0 +1,91 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.extension.maven;
+
+import org.apache.maven.model.Model;
+import org.xwiki.stability.Unstable;
+
+/**
+ * Add classifier and type information to Maven {@link Model}.
+ * <p>
+ * The {@link Model} is designed as an unserialized version of the pom.xml but the same pom can be associated to several
+ * different artifacts (with different classifier and type). {@code packaging} is only the default type.
+ * 
+ * @version $Id$
+ * @since 10.9RC1
+ * @since 10.8.1
+ */
+@Unstable
+public class ArtifactModel
+{
+    private String classifier;
+
+    private String type;
+
+    private Model model;
+
+    /**
+     * @param model the Maven {@link Model}
+     */
+    public ArtifactModel(Model model)
+    {
+        this.model = model;
+    }
+
+    /**
+     * @return the classifier
+     */
+    public String getClassifier()
+    {
+        return this.classifier;
+    }
+
+    /**
+     * @param classifier the classifier
+     */
+    public void setClassifier(String classifier)
+    {
+        this.classifier = classifier;
+    }
+
+    /**
+     * @return the type
+     */
+    public String getType()
+    {
+        return this.type;
+    }
+
+    /**
+     * @param type the type
+     */
+    public void setType(String type)
+    {
+        this.type = type;
+    }
+
+    /**
+     * @return the Maven {@link Model}
+     */
+    public Model getModel()
+    {
+        return this.model;
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/AbstractMavenExtension.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/AbstractMavenExtension.java
index 5eebf5e..dc51f98 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/AbstractMavenExtension.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/AbstractMavenExtension.java
@@ -55,6 +55,14 @@
     public static final String PKEY_MAVEN_GROUPID = PKEY_MAVENPRFIX + "groupid";
 
     /**
+     * The name of the property containing the classifier.
+     * 
+     * @since 10.9RC1
+     * @since 10.8.1
+     */
+    public static final String PKEY_MAVEN_CLASSIFIER = PKEY_MAVENPRFIX + "classifier";
+
+    /**
      * @param repository the repository where this extension comes from
      * @param groupId the maven artifact group id
      * @param artifactId the maven artifact artifact id
@@ -81,10 +89,29 @@ public AbstractMavenExtension(ExtensionRepository repository, String groupId, St
     public AbstractMavenExtension(ExtensionRepository repository, String groupId, String artifactId, Version version,
         String type)
     {
-        super(repository, new ExtensionId(groupId + ':' + artifactId, version), type);
+        this(repository, groupId, artifactId, null, version, type);
+    }
+
+    /**
+     * @param repository the repository where this extension comes from
+     * @param groupId the maven artifact group id
+     * @param artifactId the maven artifact artifact id
+     * @param classifier the maven artifact classifier
+     * @param version the maven artifact version
+     * @param type the extension type
+     * @since 10.9RC1
+     * @since 10.8.1
+     */
+    public AbstractMavenExtension(ExtensionRepository repository, String groupId, String artifactId, String classifier,
+        Version version, String type)
+    {
+        super(repository, MavenUtils.toExtensionId(groupId, artifactId, classifier, version), type);
 
         setMavenGroupId(groupId);
         setMavenArtifactId(artifactId);
+        if (classifier != null) {
+            setMavenClassifier(classifier);
+        }
     }
 
     /**
@@ -134,6 +161,16 @@ public void setMavenArtifactId(String artifactId)
     }
 
     /**
+     * @param classifier the Maven classifier
+     * @since 10.9RC1
+     * @since 10.8.1
+     */
+    public void setMavenClassifier(String classifier)
+    {
+        putProperty(PKEY_MAVEN_CLASSIFIER, classifier);
+    }
+
+    /**
      * @return the Maven model object if any
      */
     public Model getMavenModel()
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/DefaultMavenExtension.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/DefaultMavenExtension.java
index fda3f88..cbb3ef3 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/DefaultMavenExtension.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/DefaultMavenExtension.java
@@ -20,6 +20,7 @@
 package org.xwiki.extension.maven.internal;
 
 import org.xwiki.extension.Extension;
+import org.xwiki.extension.ExtensionFile;
 import org.xwiki.extension.repository.ExtensionRepository;
 import org.xwiki.extension.version.Version;
 
@@ -59,6 +60,22 @@ public DefaultMavenExtension(ExtensionRepository repository, String groupId, Str
     }
 
     /**
+     * @param repository the repository where this extension comes from
+     * @param groupId the maven artifact group id
+     * @param artifactId the maven artifact artifact id
+     * @param classifier the maven artifact classifier
+     * @param version the maven artifact version
+     * @param type the extension type
+     * @since 10.9RC1
+     * @since 10.8.1
+     */
+    public DefaultMavenExtension(ExtensionRepository repository, String groupId, String artifactId, String classifier,
+        Version version, String type)
+    {
+        super(repository, groupId, artifactId, classifier, version, type);
+    }
+
+    /**
      * Create new Maven extension descriptor by copying provided one.
      *
      * @param repository the repository where this extension comes from
@@ -68,4 +85,17 @@ public DefaultMavenExtension(ExtensionRepository repository, Extension extension
     {
         super(repository, extension);
     }
+
+    /**
+     * {@inheritDoc}
+     * 
+     * @see org.xwiki.extension.AbstractExtension#setFile(org.xwiki.extension.ExtensionFile)
+     * @since 10.9RC1
+     * @since 10.8.1
+     */
+    @Override
+    public void setFile(ExtensionFile file)
+    {
+        super.setFile(file);
+    }
 }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/DefaultMavenExtensionDependency.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/DefaultMavenExtensionDependency.java
index 38f41bf..354aa0c 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/DefaultMavenExtensionDependency.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/DefaultMavenExtensionDependency.java
@@ -45,13 +45,6 @@
     public static final String PKEY_MAVEN_DEPENDENCY_SCOPE = "maven.dependency.scope";
 
     /**
-     * The key associated to the Maven dependency object.
-     * 
-     * @since 8.1M1
-     */
-    public static final String PKEY_MAVEN_DEPENDENCY_OPTIONAL = "maven.dependency.optional";
-
-    /**
      * Create new instance by cloning the provided one.
      *
      * @param dependency the extension dependency to copy
@@ -86,16 +79,6 @@ public static String getScope(ExtensionDependency dependency)
         return (String) dependency.getProperty(PKEY_MAVEN_DEPENDENCY_SCOPE);
     }
 
-    /**
-     * @param dependency the generic dependency
-     * @return true is the dependency is optional
-     * @since 8.1M1
-     */
-    public static boolean isOptional(ExtensionDependency dependency)
-    {
-        return dependency.getProperty(PKEY_MAVEN_DEPENDENCY_OPTIONAL, false);
-    }
-
     @Override
     public Dependency getMavenDependency()
     {
@@ -107,10 +90,4 @@ public String getScope()
     {
         return getScope(this);
     }
-
-    @Override
-    public boolean isOptional()
-    {
-        return isOptional(this);
-    }
 }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/MavenExtensionDependency.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/MavenExtensionDependency.java
index b31ed50..70214e3 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/MavenExtensionDependency.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/MavenExtensionDependency.java
@@ -40,10 +40,4 @@
      * @since 8.1M1
      */
     String getScope();
-
-    /**
-     * @return true is the dependency is optional
-     * @since 8.1M1
-     */
-    boolean isOptional();
 }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/MavenExtensionScanner.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/MavenExtensionScanner.java
index c639216..27529ed 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/MavenExtensionScanner.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/MavenExtensionScanner.java
@@ -193,7 +193,7 @@ private DefaultCoreExtension getCoreExension(URL jarURL, URL descriptorURL,
     {
         DefaultCoreExtension coreExtension = this.cache.getExtension(repository, descriptorURL);
 
-        if (coreExtension != null && coreExtension.getDescriptorURL().equals(descriptorURL)) {
+        if (coreExtension != null && coreExtension.getDescriptorURL().toString().equals(descriptorURL.toString())) {
             return coreExtension;
         }
 
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/MavenUtils.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/MavenUtils.java
index 2f40e12..55483b0 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/MavenUtils.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/MavenUtils.java
@@ -26,7 +26,10 @@
 import org.apache.maven.model.Model;
 import org.apache.maven.model.Parent;
 import org.xwiki.extension.DefaultExtensionScmConnection;
+import org.xwiki.extension.ExtensionId;
 import org.xwiki.extension.ExtensionScmConnection;
+import org.xwiki.extension.version.Version;
+import org.xwiki.extension.version.internal.DefaultVersion;
 
 /**
  * Various Maven related helpers.
@@ -106,6 +109,40 @@ public static String toExtensionId(String groupId, String artifactId, String cla
     }
 
     /**
+     * Create a extension identifier from Maven artifact identifier elements.
+     * 
+     * @param groupId the group id
+     * @param artifactId the artifact id
+     * @param classifier the classifier
+     * @param version the version
+     * @return the extension identifier
+     * @since 10.9RC1
+     * @since 10.8.1
+     */
+    public static ExtensionId toExtensionId(String groupId, String artifactId, String classifier, String version)
+    {
+        return toExtensionId(groupId, artifactId, classifier, version != null ? new DefaultVersion(version) : null);
+    }
+
+    /**
+     * Create a extension identifier from Maven artifact identifier elements.
+     * 
+     * @param groupId the group id
+     * @param artifactId the artifact id
+     * @param classifier the classifier
+     * @param version the version
+     * @return the extension identifier
+     * @since 10.9RC1
+     * @since 10.8.1
+     */
+    public static ExtensionId toExtensionId(String groupId, String artifactId, String classifier, Version version)
+    {
+        String extensionId = toExtensionId(groupId, artifactId, classifier);
+
+        return new ExtensionId(extensionId, version);
+    }
+
+    /**
      * Get the extension type from maven packaging.
      *
      * @param packaging the maven packaging
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/converter/AbstractModelConverter.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/converter/AbstractModelConverter.java
new file mode 100644
index 0000000..47170f1
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/converter/AbstractModelConverter.java
@@ -0,0 +1,261 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.extension.maven.internal.converter;
+
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.Map;
+import java.util.Properties;
+
+import javax.inject.Inject;
+import javax.inject.Singleton;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.maven.model.Dependency;
+import org.apache.maven.model.Developer;
+import org.apache.maven.model.IssueManagement;
+import org.apache.maven.model.License;
+import org.apache.maven.model.Model;
+import org.apache.maven.model.Repository;
+import org.apache.maven.model.Scm;
+import org.xwiki.component.annotation.Component;
+import org.xwiki.extension.DefaultExtensionScm;
+import org.xwiki.extension.Extension;
+import org.xwiki.extension.ExtensionDependency;
+import org.xwiki.extension.ExtensionFeaturesInjector;
+import org.xwiki.extension.ExtensionId;
+import org.xwiki.extension.ExtensionLicense;
+import org.xwiki.extension.ExtensionLicenseManager;
+import org.xwiki.extension.ExtensionScmConnection;
+import org.xwiki.extension.internal.ExtensionFactory;
+import org.xwiki.extension.internal.ExtensionUtils;
+import org.xwiki.extension.internal.converter.ExtensionIdConverter;
+import org.xwiki.extension.maven.internal.DefaultMavenExtension;
+import org.xwiki.extension.maven.internal.DefaultMavenExtensionDependency;
+import org.xwiki.extension.maven.internal.MavenUtils;
+import org.xwiki.extension.repository.ExtensionRepositoryDescriptor;
+import org.xwiki.extension.version.Version;
+import org.xwiki.extension.version.internal.DefaultVersionConstraint;
+import org.xwiki.properties.converter.AbstractConverter;
+
+/**
+ * Create an {@link Extension} from a Maven {@link Model}.
+ * 
+ * @version $Id$
+ * @since 10.9RC1
+ * @since 10.8
+ */
+public class AbstractModelConverter<T> extends AbstractConverter<T>
+{
+    @Inject
+    private ExtensionLicenseManager licenseManager;
+
+    @Inject
+    private ExtensionFactory factory;
+
+    @Inject
+    private List<ExtensionFeaturesInjector> featureInjectors;
+
+    protected DefaultMavenExtension convertToExtension(Model model, String groupId, String artifactId, String classifier,
+        String type, String versionString)
+    {
+        Version version = this.factory.getVersion(versionString);
+
+        Properties properties = (Properties) model.getProperties().clone();
+
+        DefaultMavenExtension extension = new DefaultMavenExtension(null, groupId, artifactId, classifier, version, type);
+
+        extension.setName(getPropertyString(properties, Extension.FIELD_NAME, true, model.getName()));
+        extension.setSummary(getPropertyString(properties, Extension.FIELD_SUMMARY, true, model.getDescription()));
+        extension.setWebsite(getPropertyString(properties, Extension.FIELD_WEBSITE, true, model.getUrl()));
+
+        // authors
+        for (Developer developer : model.getDevelopers()) {
+            String authorURL = null;
+            if (developer.getUrl() != null) {
+                authorURL = developer.getUrl();
+            }
+
+            extension.addAuthor(this.factory
+                .getExtensionAuthor(StringUtils.defaultIfBlank(developer.getName(), developer.getId()), authorURL));
+        }
+
+        // licenses
+        for (License license : model.getLicenses()) {
+            extension.addLicense(getExtensionLicense(license));
+        }
+
+        // scm
+        Scm scm = model.getScm();
+        if (scm != null
+            && (scm.getConnection() != null || scm.getDeveloperConnection() != null || scm.getUrl() != null)) {
+            ExtensionScmConnection connection = MavenUtils.toExtensionScmConnection(scm.getConnection());
+            ExtensionScmConnection developerConnection =
+                MavenUtils.toExtensionScmConnection(scm.getDeveloperConnection());
+
+            extension.setScm(new DefaultExtensionScm(scm.getUrl(), connection, developerConnection));
+        }
+
+        // issue management
+        IssueManagement issueManagement = model.getIssueManagement();
+        if (issueManagement != null && issueManagement.getUrl() != null) {
+            extension.setIssueManagement(
+                this.factory.getExtensionIssueManagement(issueManagement.getSystem(), issueManagement.getUrl()));
+        }
+
+        // features
+        List<ExtensionId> extensionFeatures = new ArrayList<>();
+        String featuresString = getProperty(properties, Extension.FIELD_FEATURES, true);
+        if (StringUtils.isNotBlank(featuresString)) {
+            Collection<String> features = ExtensionUtils.importPropertyStringList(featuresString, true);
+            extensionFeatures.addAll(ExtensionIdConverter.toExtensionIdList(features, extension.getId().getVersion()));
+        }
+        // add injected features
+        for (ExtensionFeaturesInjector injector : this.featureInjectors) {
+            Collection<ExtensionId> injectedFeatures = injector.getFeatures(extension);
+            if (injectedFeatures != null) {
+                for (ExtensionId injectedFeature : injectedFeatures) {
+                    if (!extensionFeatures.contains(injectedFeature)) {
+                        extensionFeatures.add(injectedFeature);
+                    }
+                }
+            }
+        }
+        extension.setExtensionFeatures(extensionFeatures);
+
+        // category
+        String categoryString = getProperty(properties, Extension.FIELD_CATEGORY, true);
+        if (StringUtils.isNotBlank(categoryString)) {
+            extension.setCategory(categoryString);
+        }
+
+        // namespaces
+        String namespacesString = getProperty(properties, Extension.FIELD_NAMESPACES, true);
+        if (StringUtils.isNotBlank(namespacesString)) {
+            Collection<String> namespaces = ExtensionUtils.importPropertyStringList(namespacesString, true);
+            extension.setAllowedNamespaces(namespaces);
+        }
+
+        // repositories
+        List<ExtensionRepositoryDescriptor> repositories;
+        List<Repository> mavenRepositories = model.getRepositories();
+        if (!mavenRepositories.isEmpty()) {
+            repositories = new ArrayList<>(mavenRepositories.size());
+
+            for (Repository mavenRepository : mavenRepositories) {
+                // There is no point in remembering Maven central repository since all extension will have it
+                if (!StringUtils.equals(mavenRepository.getId(), "central")) {
+                    try {
+                        ExtensionRepositoryDescriptor repositoryDescriptor =
+                            this.factory.getExtensionRepositoryDescriptor(mavenRepository.getId(), "maven",
+                                new URI(mavenRepository.getUrl()));
+
+                        repositories.add(repositoryDescriptor);
+                    } catch (URISyntaxException e) {
+                        // TODO: log ?
+                    }
+                }
+            }
+        } else {
+            repositories = null;
+        }
+        extension.setRepositories(repositories);
+
+        // dependencies
+        for (Dependency mavenDependency : model.getDependencies()) {
+            if (mavenDependency.getScope() == null || mavenDependency.getScope().equals("compile")
+                || mavenDependency.getScope().equals("runtime")) {
+                ExtensionDependency extensionDependency = toExtensionDependency(mavenDependency, model, repositories);
+
+                extension.addDependency(extensionDependency);
+            }
+        }
+
+        // managed dependencies
+        if (model.getDependencyManagement() != null) {
+            for (Dependency mavenDependency : model.getDependencyManagement().getDependencies()) {
+                ExtensionDependency extensionDependency = toExtensionDependency(mavenDependency, model, repositories);
+
+                extension.addManagedDependency(extensionDependency);
+            }
+        }
+
+        // various properties
+
+        extension.putProperty(MavenUtils.PKEY_MAVEN_MODEL, model);
+
+        for (Map.Entry<Object, Object> entry : properties.entrySet()) {
+            String key = (String) entry.getKey();
+            if (key.startsWith("xwiki.extension.")) {
+                extension.putProperty(key, entry.getValue());
+            }
+        }
+
+        return extension;
+    }
+
+    private ExtensionDependency toExtensionDependency(Dependency mavenDependency, Model model,
+        List<ExtensionRepositoryDescriptor> repositories)
+    {
+        String dependencyGroupId = MavenUtils.resolveGroupId(mavenDependency.getGroupId(), model, true);
+        String dependencyArtifactId = mavenDependency.getArtifactId();
+        String dependencyClassifier = mavenDependency.getClassifier();
+        String dependencyVersion = MavenUtils.resolveVersion(mavenDependency.getVersion(), model, true);
+
+        DefaultMavenExtensionDependency dependency = new DefaultMavenExtensionDependency(
+            MavenUtils.toExtensionId(dependencyGroupId, dependencyArtifactId, dependencyClassifier),
+            new DefaultVersionConstraint(dependencyVersion), mavenDependency);
+
+        dependency.setRepositories(repositories);
+
+        return this.factory.getExtensionDependency(dependency);
+    }
+
+    private String getProperty(Properties properties, String propertyName, boolean delete)
+    {
+        return delete ? (String) properties.remove(Extension.IKEYPREFIX + propertyName)
+            : properties.getProperty(Extension.IKEYPREFIX + propertyName);
+    }
+
+    private String getPropertyString(Properties properties, String propertyName, boolean delete, String def)
+    {
+        return StringUtils.defaultString(getProperty(properties, propertyName, delete), def);
+    }
+
+    // TODO: download custom licenses content
+    private ExtensionLicense getExtensionLicense(License license)
+    {
+        if (license.getName() == null) {
+            return new ExtensionLicense("noname", null);
+        }
+
+        return createLicenseByName(license.getName());
+    }
+
+    private ExtensionLicense createLicenseByName(String name)
+    {
+        ExtensionLicense extensionLicense = this.licenseManager.getLicense(name);
+
+        return extensionLicense != null ? extensionLicense : new ExtensionLicense(name, null);
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/converter/ArtifactModelConverter.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/converter/ArtifactModelConverter.java
new file mode 100644
index 0000000..e366dde
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/converter/ArtifactModelConverter.java
@@ -0,0 +1,74 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.extension.maven.internal.converter;
+
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+
+import javax.inject.Singleton;
+
+import org.apache.maven.model.Model;
+import org.xwiki.component.annotation.Component;
+import org.xwiki.component.util.DefaultParameterizedType;
+import org.xwiki.extension.Extension;
+import org.xwiki.extension.maven.ArtifactModel;
+import org.xwiki.extension.maven.internal.MavenExtension;
+import org.xwiki.extension.maven.internal.MavenUtils;
+import org.xwiki.properties.converter.ConversionException;
+import org.xwiki.properties.converter.Converter;
+
+/**
+ * Create an {@link Extension} from a Maven {@link Model}.
+ * 
+ * @version $Id$
+ * @since 9.0RC1
+ */
+@Component
+@Singleton
+public class ArtifactModelConverter extends AbstractModelConverter<ArtifactModel>
+{
+    /**
+     * The role of the component.
+     */
+    public static final ParameterizedType ROLE =
+        new DefaultParameterizedType(null, Converter.class, ArtifactModel.class);
+
+    @Override
+    public <G> G convert(Type targetType, Object sourceValue)
+    {
+        if (targetType == Extension.class) {
+            return (G) convertToExtension((ArtifactModel) sourceValue);
+        } else {
+            throw new ConversionException(String.format("Unsupported target type [%s]", targetType));
+        }
+    }
+
+    private MavenExtension convertToExtension(ArtifactModel artifactModel)
+    {
+        String groupId = MavenUtils.resolveGroupId(artifactModel.getModel());
+        String artifactId = artifactModel.getModel().getArtifactId();
+        String classifier = artifactModel.getClassifier();
+        String type = MavenUtils.packagingToType(
+            artifactModel.getType() != null ? artifactModel.getType() : artifactModel.getModel().getPackaging());
+        String version = MavenUtils.resolveVersion(artifactModel.getModel());
+
+        return convertToExtension(artifactModel.getModel(), groupId, artifactId, classifier, type, version);
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/converter/ModelConverter.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/converter/ModelConverter.java
index b7ffa58..ac2e403 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/converter/ModelConverter.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/converter/ModelConverter.java
@@ -21,44 +21,15 @@
 
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
-import java.net.URI;
-import java.net.URISyntaxException;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-import java.util.Map;
-import java.util.Properties;
 
-import javax.inject.Inject;
 import javax.inject.Singleton;
 
-import org.apache.commons.lang3.StringUtils;
-import org.apache.maven.model.Dependency;
-import org.apache.maven.model.Developer;
-import org.apache.maven.model.IssueManagement;
-import org.apache.maven.model.License;
 import org.apache.maven.model.Model;
-import org.apache.maven.model.Repository;
-import org.apache.maven.model.Scm;
 import org.xwiki.component.annotation.Component;
 import org.xwiki.component.util.DefaultParameterizedType;
-import org.xwiki.extension.DefaultExtensionScm;
 import org.xwiki.extension.Extension;
-import org.xwiki.extension.ExtensionDependency;
-import org.xwiki.extension.ExtensionLicense;
-import org.xwiki.extension.ExtensionLicenseManager;
-import org.xwiki.extension.ExtensionScmConnection;
-import org.xwiki.extension.internal.ExtensionFactory;
-import org.xwiki.extension.internal.ExtensionUtils;
-import org.xwiki.extension.internal.converter.ExtensionIdConverter;
-import org.xwiki.extension.maven.internal.DefaultMavenExtension;
-import org.xwiki.extension.maven.internal.DefaultMavenExtensionDependency;
 import org.xwiki.extension.maven.internal.MavenExtension;
 import org.xwiki.extension.maven.internal.MavenUtils;
-import org.xwiki.extension.repository.ExtensionRepositoryDescriptor;
-import org.xwiki.extension.version.Version;
-import org.xwiki.extension.version.internal.DefaultVersionConstraint;
-import org.xwiki.properties.converter.AbstractConverter;
 import org.xwiki.properties.converter.ConversionException;
 import org.xwiki.properties.converter.Converter;
 
@@ -70,19 +41,13 @@
  */
 @Component
 @Singleton
-public class ModelConverter extends AbstractConverter<Model>
+public class ModelConverter extends AbstractModelConverter<Model>
 {
     /**
      * The role of the component.
      */
     public static final ParameterizedType ROLE = new DefaultParameterizedType(null, Converter.class, Model.class);
 
-    @Inject
-    private ExtensionLicenseManager licenseManager;
-
-    @Inject
-    private ExtensionFactory factory;
-
     @Override
     public <G> G convert(Type targetType, Object sourceValue)
     {
@@ -95,169 +60,11 @@
 
     private MavenExtension convertToExtension(Model model)
     {
-        Properties properties = (Properties) model.getProperties().clone();
-
-        Version version = this.factory.getVersion(MavenUtils.resolveVersion(model));
         String groupId = MavenUtils.resolveGroupId(model);
+        String artifactId = model.getArtifactId();
+        String type = MavenUtils.packagingToType(model.getPackaging());
+        String version = MavenUtils.resolveVersion(model);
 
-        DefaultMavenExtension extension = new DefaultMavenExtension(null, groupId, model.getArtifactId(), version,
-            MavenUtils.packagingToType(model.getPackaging()));
-
-        extension.setName(getPropertyString(properties, Extension.FIELD_NAME, true, model.getName()));
-        extension.setSummary(getPropertyString(properties, Extension.FIELD_SUMMARY, true, model.getDescription()));
-        extension.setWebsite(getPropertyString(properties, Extension.FIELD_WEBSITE, true, model.getUrl()));
-
-        // authors
-        for (Developer developer : model.getDevelopers()) {
-            String authorURL = null;
-            if (developer.getUrl() != null) {
-                authorURL = developer.getUrl();
-            }
-
-            extension.addAuthor(this.factory
-                .getExtensionAuthor(StringUtils.defaultIfBlank(developer.getName(), developer.getId()), authorURL));
-        }
-
-        // licenses
-        for (License license : model.getLicenses()) {
-            extension.addLicense(getExtensionLicense(license));
-        }
-
-        // scm
-        Scm scm = model.getScm();
-        if (scm != null
-            && (scm.getConnection() != null || scm.getDeveloperConnection() != null || scm.getUrl() != null)) {
-            ExtensionScmConnection connection = MavenUtils.toExtensionScmConnection(scm.getConnection());
-            ExtensionScmConnection developerConnection =
-                MavenUtils.toExtensionScmConnection(scm.getDeveloperConnection());
-
-            extension.setScm(new DefaultExtensionScm(scm.getUrl(), connection, developerConnection));
-        }
-
-        // issue management
-        IssueManagement issueManagement = model.getIssueManagement();
-        if (issueManagement != null && issueManagement.getUrl() != null) {
-            extension.setIssueManagement(
-                this.factory.getExtensionIssueManagement(issueManagement.getSystem(), issueManagement.getUrl()));
-        }
-
-        // features
-        String featuresString = getProperty(properties, Extension.FIELD_FEATURES, true);
-        if (StringUtils.isNotBlank(featuresString)) {
-            Collection<String> features = ExtensionUtils.importPropertyStringList(featuresString, true);
-            extension
-                .setExtensionFeatures(ExtensionIdConverter.toExtensionIdList(features, extension.getId().getVersion()));
-        }
-
-        // category
-        String categoryString = getProperty(properties, Extension.FIELD_CATEGORY, true);
-        if (StringUtils.isNotBlank(categoryString)) {
-            extension.setCategory(categoryString);
-        }
-
-        // namespaces
-        String namespacesString = getProperty(properties, Extension.FIELD_NAMESPACES, true);
-        if (StringUtils.isNotBlank(namespacesString)) {
-            Collection<String> namespaces = ExtensionUtils.importPropertyStringList(namespacesString, true);
-            extension.setAllowedNamespaces(namespaces);
-        }
-
-        // repositories
-        List<ExtensionRepositoryDescriptor> repositories;
-        List<Repository> mavenRepositories = model.getRepositories();
-        if (!mavenRepositories.isEmpty()) {
-            repositories = new ArrayList<>(mavenRepositories.size());
-
-            for (Repository mavenRepository : mavenRepositories) {
-                try {
-                    ExtensionRepositoryDescriptor repositoryDescriptor = this.factory.getExtensionRepositoryDescriptor(
-                        mavenRepository.getId(), "maven", new URI(mavenRepository.getUrl()));
-
-                    repositories.add(repositoryDescriptor);
-                } catch (URISyntaxException e) {
-                    // TODO: log ?
-                }
-            }
-        } else {
-            repositories = null;
-        }
-        extension.setRepositories(repositories);
-
-        // dependencies
-        for (Dependency mavenDependency : model.getDependencies()) {
-            if (mavenDependency.getScope() == null || mavenDependency.getScope().equals("compile")
-                || mavenDependency.getScope().equals("runtime")) {
-                ExtensionDependency extensionDependency = toExtensionDependency(mavenDependency, model, repositories);
-
-                extension.addDependency(extensionDependency);
-            }
-        }
-
-        // managed dependencies
-        if (model.getDependencyManagement() != null) {
-            for (Dependency mavenDependency : model.getDependencyManagement().getDependencies()) {
-                ExtensionDependency extensionDependency = toExtensionDependency(mavenDependency, model, repositories);
-
-                extension.addManagedDependency(extensionDependency);
-            }
-        }
-
-        // various properties
-
-        extension.putProperty(MavenUtils.PKEY_MAVEN_MODEL, model);
-
-        for (Map.Entry<Object, Object> entry : properties.entrySet()) {
-            String key = (String) entry.getKey();
-            if (key.startsWith("xwiki.extension.")) {
-                extension.putProperty(key, entry.getValue());
-            }
-        }
-
-        return extension;
-    }
-
-    private ExtensionDependency toExtensionDependency(Dependency mavenDependency, Model model,
-        List<ExtensionRepositoryDescriptor> repositories)
-    {
-        String dependencyGroupId = MavenUtils.resolveGroupId(mavenDependency.getGroupId(), model, true);
-        String dependencyArtifactId = mavenDependency.getArtifactId();
-        String dependencyClassifier = mavenDependency.getClassifier();
-        String dependencyVersion = MavenUtils.resolveVersion(mavenDependency.getVersion(), model, true);
-
-        DefaultMavenExtensionDependency dependency = new DefaultMavenExtensionDependency(
-            MavenUtils.toExtensionId(dependencyGroupId, dependencyArtifactId, dependencyClassifier),
-            new DefaultVersionConstraint(dependencyVersion), mavenDependency);
-
-        dependency.setRepositories(repositories);
-
-        return this.factory.getExtensionDependency(dependency);
-    }
-
-    private String getProperty(Properties properties, String propertyName, boolean delete)
-    {
-        return delete ? (String) properties.remove(Extension.IKEYPREFIX + propertyName)
-            : properties.getProperty(Extension.IKEYPREFIX + propertyName);
-    }
-
-    private String getPropertyString(Properties properties, String propertyName, boolean delete, String def)
-    {
-        return StringUtils.defaultString(getProperty(properties, propertyName, delete), def);
-    }
-
-    // TODO: download custom licenses content
-    private ExtensionLicense getExtensionLicense(License license)
-    {
-        if (license.getName() == null) {
-            return new ExtensionLicense("noname", null);
-        }
-
-        return createLicenseByName(license.getName());
-    }
-
-    private ExtensionLicense createLicenseByName(String name)
-    {
-        ExtensionLicense extensionLicense = this.licenseManager.getLicense(name);
-
-        return extensionLicense != null ? extensionLicense : new ExtensionLicense(name, null);
+        return convertToExtension(model, groupId, artifactId, null, type, version);
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/resources/META-INF/components.txt b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/resources/META-INF/components.txt
index 6ea4e07..fd86be1 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/resources/META-INF/components.txt
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/resources/META-INF/components.txt
@@ -1,2 +1,3 @@
 org.xwiki.extension.maven.internal.MavenExtensionScanner
+org.xwiki.extension.maven.internal.converter.ArtifactModelConverter
 org.xwiki.extension.maven.internal.converter.ModelConverter
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/test/java/org/xwiki/extension/maven/internal/converter/ArtifactModelConverterTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/test/java/org/xwiki/extension/maven/internal/converter/ArtifactModelConverterTest.java
new file mode 100644
index 0000000..11cbec8
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/test/java/org/xwiki/extension/maven/internal/converter/ArtifactModelConverterTest.java
@@ -0,0 +1,95 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.extension.maven.internal.converter;
+
+import org.apache.maven.model.Model;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+import org.xwiki.extension.Extension;
+import org.xwiki.extension.maven.ArtifactModel;
+import org.xwiki.properties.internal.DefaultConverterManager;
+import org.xwiki.test.annotation.AllComponents;
+import org.xwiki.test.junit5.mockito.ComponentTest;
+import org.xwiki.test.junit5.mockito.InjectMockComponents;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+/**
+ * Validate {@link ModelConverter} component.
+ *
+ * @version $Id$
+ */
+@ComponentTest
+@AllComponents
+public class ArtifactModelConverterTest
+{
+    @InjectMockComponents
+    private DefaultConverterManager converter;
+
+    private ArtifactModel artifactModel;
+
+    @BeforeEach
+    public void beforeEach()
+    {
+        Model model = new Model();
+
+        model.setGroupId("groupid");
+        model.setArtifactId("artifactid");
+        model.setVersion("version");
+        model.setPackaging("pom");
+
+        this.artifactModel = new ArtifactModel(model);
+    }
+
+    @Test
+    public void testConvertWithClassifier() throws SecurityException
+    {
+        this.artifactModel.setClassifier("classifier");
+
+        Extension extension = this.converter.convert(Extension.class, artifactModel);
+
+        assertEquals("groupid:artifactid:classifier", extension.getId().getId());
+        assertEquals("pom", extension.getType());
+    }
+
+    @Test
+    public void testConvertWithType() throws SecurityException
+    {
+        this.artifactModel.setType("type");
+
+        Extension extension = this.converter.convert(Extension.class, artifactModel);
+
+        assertEquals("groupid:artifactid", extension.getId().getId());
+        assertEquals("type", extension.getType());
+    }
+
+    @Test
+    public void testConvertWithClassifierAndType() throws SecurityException
+    {
+        this.artifactModel.setClassifier("classifier");
+        this.artifactModel.setType("type");
+
+        Extension extension = this.converter.convert(Extension.class, artifactModel);
+
+        assertEquals("groupid:artifactid:classifier", extension.getId().getId());
+        assertEquals("type", extension.getType());
+    }
+
+}
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/test/java/org/xwiki/extension/maven/internal/converter/ModelConverterTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/test/java/org/xwiki/extension/maven/internal/converter/ModelConverterTest.java
index 71f9565..f2000e4 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/test/java/org/xwiki/extension/maven/internal/converter/ModelConverterTest.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/test/java/org/xwiki/extension/maven/internal/converter/ModelConverterTest.java
@@ -23,22 +23,31 @@
 import java.net.URISyntaxException;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.List;
 
+import org.apache.commons.collections4.ListUtils;
+import org.apache.maven.model.Dependency;
 import org.apache.maven.model.Model;
 import org.apache.maven.model.Repository;
 import org.junit.Rule;
 import org.junit.Test;
 import org.xwiki.component.manager.ComponentLookupException;
 import org.xwiki.extension.Extension;
-import org.xwiki.extension.maven.internal.converter.ModelConverter;
+import org.xwiki.extension.ExtensionDependency;
+import org.xwiki.extension.ExtensionFeaturesInjector;
+import org.xwiki.extension.ExtensionId;
 import org.xwiki.extension.repository.DefaultExtensionRepositoryDescriptor;
 import org.xwiki.properties.ConverterManager;
 import org.xwiki.properties.internal.DefaultConverterManager;
 import org.xwiki.test.annotation.AllComponents;
+import org.xwiki.test.annotation.BeforeComponent;
 import org.xwiki.test.mockito.MockitoComponentMockingRule;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.when;
 
 /**
  * Validate {@link ModelConverter} component.
@@ -48,10 +57,23 @@
 @AllComponents
 public class ModelConverterTest
 {
+    private static final List<ExtensionId> INJECTED_FEATURES =
+        Arrays.asList(new ExtensionId("injectedfeature1", "injectedversion1"),
+            new ExtensionId("injectedfeature2", "injectedversion2"));
+
     @Rule
     public MockitoComponentMockingRule<ConverterManager> mocker =
         new MockitoComponentMockingRule<ConverterManager>(DefaultConverterManager.class);
 
+    @BeforeComponent
+    public void beforeComponent() throws Exception
+    {
+        ExtensionFeaturesInjector featureProvider =
+            this.mocker.registerMockComponent(ExtensionFeaturesInjector.class, "test");
+
+        when(featureProvider.getFeatures(any(Extension.class))).thenReturn(INJECTED_FEATURES);
+    }
+
     @Test
     public void testConvertFromExtension() throws SecurityException, ComponentLookupException, URISyntaxException
     {
@@ -63,15 +85,24 @@ public void testConvertFromExtension() throws SecurityException, ComponentLookup
         model.addProperty(Extension.IKEYPREFIX + Extension.FIELD_CATEGORY, "category");
         model.addProperty(Extension.IKEYPREFIX + Extension.FIELD_NAMESPACES,
             "namespace1, namespace2,\r\n\t {root}, \"namespace3\", 'namespace4'");
+        model.addProperty(Extension.IKEYPREFIX + Extension.FIELD_FEATURES, "feature1/1.0");
         Repository repository = new Repository();
         repository.setId("repository-id");
         repository.setUrl("http://url");
         model.addRepository(repository);
+        Dependency dependency = new Dependency();
+        dependency.setGroupId("dgroupid");
+        dependency.setArtifactId("dartifactId");
+        dependency.setVersion("1.0");
+        dependency.setOptional(true);
+        model.addDependency(dependency);
 
         Extension extension = this.mocker.getComponentUnderTest().convert(Extension.class, model);
 
         assertEquals(model.getGroupId() + ':' + model.getArtifactId(), extension.getId().getId());
         assertEquals(model.getVersion(), extension.getId().getVersion().getValue());
+        assertEquals(ListUtils.union(Arrays.asList(new ExtensionId("feature1", "1.0")), INJECTED_FEATURES),
+            new ArrayList<>(extension.getExtensionFeatures()));
         assertEquals("category", extension.getCategory());
         assertNull(extension.getProperty(Extension.IKEYPREFIX + Extension.FIELD_CATEGORY));
         assertEquals(Arrays.asList("namespace1", "namespace2", "{root}", "namespace3", "namespace4"),
@@ -80,6 +111,9 @@ public void testConvertFromExtension() throws SecurityException, ComponentLookup
         assertEquals(
             Arrays.asList(new DefaultExtensionRepositoryDescriptor("repository-id", "maven", new URI("http://url"))),
             extension.getRepositories());
+        assertEquals(1, extension.getDependencies().size());
+        ExtensionDependency extensionDependency = extension.getDependencies().iterator().next();
+        assertTrue(extensionDependency.isOptional());
     }
 
     @Test
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/test/java/org/xwiki/extension/repository/core/DefaultCoreExtensionRepositoryTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/test/java/org/xwiki/extension/repository/core/DefaultCoreExtensionRepositoryTest.java
index 7473da2..bea8250 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/test/java/org/xwiki/extension/repository/core/DefaultCoreExtensionRepositoryTest.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/test/java/org/xwiki/extension/repository/core/DefaultCoreExtensionRepositoryTest.java
@@ -50,7 +50,7 @@ public void before() throws Exception
      * Validate core extension loading and others initializations.
      */
     @Test
-    public void testInit()
+    public void init()
     {
         Assert.assertTrue(this.coreExtensionRepository.countExtensions() > 0);
     }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/pom.xml b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/pom.xml
index b73acbf..7f8b172 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-extension</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-extension-repositories</artifactId>
   <name>XWiki Commons - Extension - Repository - Parent POM</name>
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-http/pom.xml b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-http/pom.xml
index 3c7e9ed..ed40ded 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-http/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-http/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-extension-repositories</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-extension-repository-http</artifactId>
   <name>XWiki Commons - Extension - Repository - HTTP</name>
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven-snapshots/pom.xml b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven-snapshots/pom.xml
index 45c9ea8..225569b 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven-snapshots/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven-snapshots/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-extension-repositories</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-extension-repository-maven-snapshots</artifactId>
   <name>XWiki Commons - Extension - Repository - Maven - Snapshots Default Repository</name>
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/pom.xml b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/pom.xml
index 0b8ffb0..033c56f 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-extension-repositories</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-extension-repository-maven</artifactId>
   <name>XWiki Commons - Extension - Repository - Maven</name>
@@ -33,7 +33,8 @@
   <description>Allows accessing extensions located in a Maven repository</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.68</xwiki.jacoco.instructionRatio>
-    <aether.version>1.1.0</aether.version>
+    <xwiki.pitest.mutationThreshold>51</xwiki.pitest.mutationThreshold>
+    <maven.resolver.version>1.1.1</maven.resolver.version>
     <!-- Old names of this module used for retro compatibility when resolving dependencies of old extensions -->
     <xwiki.extension.features>org.xwiki.platform:xwiki-platform-extension-repository-aether,org.xwiki.commons:xwiki-commons-extension-repository-maven</xwiki.extension.features>
     <!-- Name to display by the Extension Manager -->
@@ -42,6 +43,16 @@
     <xwiki.surefire.captureconsole.skip>true</xwiki.surefire.captureconsole.skip>
   </properties>
   <dependencies>
+    <!-- Test dependencies forced in front to workaround https://bugs.eclipse.org/bugs/show_bug.cgi?id=536868 -->
+    <!-- TODO: remove when Eclipse 4.9 final is released -->
+    <dependency>
+      <groupId>org.xwiki.commons</groupId>
+      <artifactId>xwiki-commons-extension-api</artifactId>
+      <version>${project.version}</version>
+      <type>test-jar</type>
+      <scope>test</scope>
+    </dependency>
+
     <dependency>
       <groupId>org.xwiki.commons</groupId>
       <artifactId>xwiki-commons-properties</artifactId>
@@ -59,38 +70,38 @@
     </dependency>
     <!-- Aether -->
     <dependency>
-      <groupId>org.eclipse.aether</groupId>
-      <artifactId>aether-api</artifactId>
-      <version>${aether.version}</version>
+      <groupId>org.apache.maven.resolver</groupId>
+      <artifactId>maven-resolver-api</artifactId>
+      <version>${maven.resolver.version}</version>
     </dependency>
     <dependency>
-      <groupId>org.eclipse.aether</groupId>
-      <artifactId>aether-util</artifactId>
-      <version>${aether.version}</version>
+      <groupId>org.apache.maven.resolver</groupId>
+      <artifactId>maven-resolver-util</artifactId>
+      <version>${maven.resolver.version}</version>
     </dependency>
     <dependency>
-      <groupId>org.eclipse.aether</groupId>
-      <artifactId>aether-impl</artifactId>
-      <version>${aether.version}</version>
+      <groupId>org.apache.maven.resolver</groupId>
+      <artifactId>maven-resolver-impl</artifactId>
+      <version>${maven.resolver.version}</version>
     </dependency>
     <dependency>
-      <groupId>org.eclipse.aether</groupId>
-      <artifactId>aether-connector-basic</artifactId>
-      <version>${aether.version}</version>
+      <groupId>org.apache.maven.resolver</groupId>
+      <artifactId>maven-resolver-connector-basic</artifactId>
+      <version>${maven.resolver.version}</version>
     </dependency>
     <dependency>
-      <groupId>org.eclipse.aether</groupId>
-      <artifactId>aether-transport-http</artifactId>
-      <version>${aether.version}</version>
+      <groupId>org.apache.maven.resolver</groupId>
+      <artifactId>maven-resolver-transport-http</artifactId>
+      <version>${maven.resolver.version}</version>
     </dependency>
     <dependency>
-      <groupId>org.eclipse.aether</groupId>
-      <artifactId>aether-transport-file</artifactId>
-      <version>${aether.version}</version>
+      <groupId>org.apache.maven.resolver</groupId>
+      <artifactId>maven-resolver-transport-file</artifactId>
+      <version>${maven.resolver.version}</version>
     </dependency>
     <dependency>
       <groupId>org.apache.maven</groupId>
-      <artifactId>maven-aether-provider</artifactId>
+      <artifactId>maven-resolver-provider</artifactId>
     </dependency>
     <dependency>
       <groupId>org.apache.maven</groupId>
@@ -106,12 +117,7 @@
       <groupId>javax.annotation</groupId>
       <artifactId>javax.annotation-api</artifactId>
     </dependency>
-    <dependency>
-      <groupId>com.google.inject</groupId>
-      <artifactId>guice</artifactId>
-      <version>4.1.0</version>
-      <classifier>no_aop</classifier>
-    </dependency>
+
     <!-- Test dependencies -->
     <dependency>
       <groupId>org.xwiki.commons</groupId>
@@ -131,6 +137,14 @@
           <artifactId>log4j</artifactId>
           <groupId>log4j</groupId>
         </exclusion>
+        <exclusion>
+          <groupId>org.json</groupId>
+          <artifactId>json</artifactId>
+        </exclusion>
+        <exclusion>
+          <groupId>com.google.guava</groupId>
+          <artifactId>guava</artifactId>
+        </exclusion>
       </exclusions>
     </dependency>
     <dependency>
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherExtensionDependency.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherExtensionDependency.java
index ca9f51b..8e6fba6 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherExtensionDependency.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherExtensionDependency.java
@@ -47,8 +47,8 @@ public AetherExtensionDependency(ExtensionDependency extensionDependency, Depend
         if (extensionRepository != null) {
             List<ExtensionRepositoryDescriptor> newRepositories = new ArrayList<>(getRepositories().size() + 1);
 
-            newRepositories.add(extensionRepository);
             newRepositories.addAll(getRepositories());
+            newRepositories.add(extensionRepository);
 
             setRepositories(newRepositories);
         }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherExtensionFile.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherExtensionFile.java
index c8763e6..8aeed87 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherExtensionFile.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherExtensionFile.java
@@ -19,24 +19,10 @@
  */
 package org.xwiki.extension.repository.aether.internal;
 
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
-import java.util.Arrays;
-import java.util.List;
 
-import org.eclipse.aether.RepositorySystem;
 import org.eclipse.aether.artifact.Artifact;
-import org.eclipse.aether.impl.RepositoryConnectorProvider;
-import org.eclipse.aether.repository.RemoteRepository;
-import org.eclipse.aether.resolution.ArtifactRequest;
-import org.eclipse.aether.resolution.ArtifactResolutionException;
-import org.eclipse.aether.resolution.ArtifactResult;
-import org.eclipse.aether.spi.connector.ArtifactDownload;
-import org.eclipse.aether.spi.connector.RepositoryConnector;
-import org.eclipse.aether.transfer.NoRepositoryConnectorException;
 import org.xwiki.extension.ExtensionFile;
 
 /**
@@ -49,28 +35,6 @@
 
     private AetherExtensionRepository repository;
 
-    static class AetherExtensionFileInputStream extends FileInputStream
-    {
-        private XWikiRepositorySystemSession session;
-
-        public AetherExtensionFileInputStream(File file, XWikiRepositorySystemSession session)
-            throws FileNotFoundException
-        {
-            super(file);
-
-            this.session = session;
-        }
-
-        @Override
-        public void close() throws IOException
-        {
-            super.close();
-
-            // Cleanup AETHER session
-            this.session.close();
-        }
-    }
-
     public AetherExtensionFile(Artifact artifact, AetherExtensionRepository repository)
     {
         this.repository = repository;
@@ -87,45 +51,6 @@ public long getLength()
     @Override
     public InputStream openStream() throws IOException
     {
-        XWikiRepositorySystemSession session = this.repository.createRepositorySystemSession();
-
-        List<RemoteRepository> repositories = this.repository.newResolutionRepositories(session);
-        RemoteRepository repository = repositories.get(0);
-
-        RepositoryConnector connector;
-        try {
-            RepositoryConnectorProvider repositoryConnectorProvider = this.repository.getRepositoryConnectorProvider();
-            connector = repositoryConnectorProvider.newRepositoryConnector(session, repository);
-        } catch (NoRepositoryConnectorException e) {
-            throw new IOException("Failed to download artifact [" + this.artifact + "]", e);
-        }
-
-        ArtifactDownload download = new ArtifactDownload();
-        download.setArtifact(this.artifact);
-        download.setRepositories(repositories);
-
-        try {
-            connector.get(Arrays.asList(download), null);
-        } finally {
-            connector.close();
-        }
-
-        // /////////////////////////////////////////////////////////////////////////////:
-
-        ArtifactRequest artifactRequest = new ArtifactRequest();
-        artifactRequest.setRepositories(repositories);
-        artifactRequest.setArtifact(this.artifact);
-
-        ArtifactResult artifactResult;
-        try {
-            RepositorySystem repositorySystem = this.repository.getRepositorySystem();
-            artifactResult = repositorySystem.resolveArtifact(session, artifactRequest);
-        } catch (ArtifactResolutionException e) {
-            throw new IOException("Failed to resolve artifact", e);
-        }
-
-        File aetherFile = artifactResult.getArtifact().getFile();
-
-        return new AetherExtensionFileInputStream(aetherFile, session);
+        return this.repository.openStream(this.artifact);
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherExtensionRepository.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherExtensionRepository.java
index 78f7e9a..5ecf05f 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherExtensionRepository.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherExtensionRepository.java
@@ -20,6 +20,11 @@
 package org.xwiki.extension.repository.aether.internal;
 
 import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.file.Files;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -64,7 +69,10 @@
 import org.eclipse.aether.resolution.VersionRequest;
 import org.eclipse.aether.resolution.VersionResolutionException;
 import org.eclipse.aether.resolution.VersionResult;
+import org.eclipse.aether.spi.connector.ArtifactDownload;
+import org.eclipse.aether.spi.connector.RepositoryConnector;
 import org.eclipse.aether.transfer.ArtifactNotFoundException;
+import org.eclipse.aether.transfer.NoRepositoryConnectorException;
 import org.eclipse.aether.util.version.GenericVersionScheme;
 import org.eclipse.aether.version.InvalidVersionSpecificationException;
 import org.xwiki.component.manager.ComponentLookupException;
@@ -96,6 +104,31 @@
  */
 public class AetherExtensionRepository extends AbstractExtensionRepository
 {
+    protected static class AetherExtensionFileInputStream extends FileInputStream
+    {
+        private final File file;
+
+        private final boolean delete;
+
+        public AetherExtensionFileInputStream(File file, boolean delete) throws FileNotFoundException
+        {
+            super(file);
+
+            this.file = file;
+            this.delete = delete;
+        }
+
+        @Override
+        public void close() throws IOException
+        {
+            super.close();
+
+            if (this.delete && this.file.exists()) {
+                Files.delete(this.file.toPath());
+            }
+        }
+    }
+
     /**
      * Used to parse the version.
      */
@@ -169,15 +202,62 @@ public RepositoryConnectorProvider getRepositoryConnectorProvider()
         return this.repositoryConnectorProvider;
     }
 
-    protected XWikiRepositorySystemSession createRepositorySystemSession()
+    protected XWikiRepositorySystemSession createRepositorySystemSession() throws ResolveException
     {
-        XWikiRepositorySystemSession session = this.repositoryFactory.createRepositorySystemSession();
+        XWikiRepositorySystemSession session;
+        try {
+            session = this.repositoryFactory.createRepositorySystemSession();
+        } catch (IOException e) {
+            throw new ResolveException("Failed to create the repository system session", e);
+        }
 
         session.addConfigurationProperties(getDescriptor().getProperties());
 
         return session;
     }
 
+    protected File createTemporaryFile(String prefix, String suffix) throws IOException
+    {
+        return this.repositoryFactory.createTemporaryFile(prefix, suffix);
+    }
+
+    protected InputStream openStream(Artifact artifact) throws IOException
+    {
+        XWikiRepositorySystemSession session;
+        try {
+            session = createRepositorySystemSession();
+        } catch (ResolveException e) {
+            throw new IOException("Failed to create the repository system session", e);
+        }
+
+        List<RemoteRepository> repositories = newResolutionRepositories(session);
+        RemoteRepository repository = repositories.get(0);
+
+        RepositoryConnector connector;
+        try {
+            RepositoryConnectorProvider repositoryConnectorProvider = getRepositoryConnectorProvider();
+            connector = repositoryConnectorProvider.newRepositoryConnector(session, repository);
+        } catch (NoRepositoryConnectorException e) {
+            throw new IOException("Failed to download artifact [" + artifact + "]", e);
+        }
+
+        File file = createTemporaryFile(artifact.getArtifactId(), artifact.getExtension());
+
+        ArtifactDownload download = new ArtifactDownload();
+        download.setArtifact(artifact);
+        download.setRepositories(repositories);
+        download.setFile(file);
+
+        try {
+            connector.get(Arrays.asList(download), null);
+        } finally {
+            connector.close();
+            session.close();
+        }
+
+        return new AetherExtensionFileInputStream(file, true);
+    }
+
     @Override
     public Extension resolve(ExtensionId extensionId) throws ResolveException
     {
@@ -392,9 +472,9 @@ private AetherExtension resolveMaven(Artifact artifact, String artifactExtension
     {
         // Get Maven descriptor
 
-        Model model;
+        Artifact pomArtifact;
         try {
-            model = loadPom(artifact, session);
+            pomArtifact = downloadPom(artifact, session);
         } catch (ArtifactResolutionException e1) {
             if (e1.getResult() != null && !e1.getResult().getExceptions().isEmpty()
                 && e1.getResult().getExceptions().get(0) instanceof ArtifactNotFoundException) {
@@ -406,6 +486,13 @@ private AetherExtension resolveMaven(Artifact artifact, String artifactExtension
             throw new ResolveException("Failed to resolve artifact [" + artifact + "] descriptor", e2);
         }
 
+        Model model;
+        try {
+            model = createModel(pomArtifact.getFile(), session);
+        } catch (ModelBuildingException e) {
+            throw new ResolveException("Failed to create Maven model", e);
+        }
+
         if (model == null) {
             throw new ResolveException("Failed to resolve artifact [" + artifact + "] descriptor");
         }
@@ -424,10 +511,10 @@ private AetherExtension resolveMaven(Artifact artifact, String artifactExtension
 
         Extension mavenExtension = this.extensionConverter.convert(Extension.class, model);
 
-        Artifact filerArtifact = new DefaultArtifact(artifact.getGroupId(), artifact.getArtifactId(),
-            artifact.getClassifier(), artifactExtension, artifact.getVersion());
+        Artifact fileArtifact = new DefaultArtifact(pomArtifact.getGroupId(), pomArtifact.getArtifactId(),
+            artifact.getClassifier(), artifactExtension, pomArtifact.getVersion());
 
-        AetherExtension extension = new AetherExtension(mavenExtension, filerArtifact, this, factory);
+        AetherExtension extension = new AetherExtension(mavenExtension, fileArtifact, this, factory);
 
         // Convert Maven dependencies to Aether dependencies
         extension.setDependencies(toAetherDependencies(mavenExtension.getDependencies(), session));
@@ -501,8 +588,8 @@ private Artifact resolveVersion(Artifact artifact, List<RemoteRepository> reposi
         return pomArtifact.setVersion(versionResult.getVersion());
     }
 
-    private Model loadPom(Artifact artifact, RepositorySystemSession session)
-        throws VersionResolutionException, ArtifactResolutionException, ModelBuildingException
+    private Artifact downloadPom(Artifact artifact, RepositorySystemSession session)
+        throws VersionResolutionException, ArtifactResolutionException
     {
         List<RemoteRepository> repositories = newResolutionRepositories(session);
 
@@ -514,9 +601,7 @@ private Model loadPom(Artifact artifact, RepositorySystemSession session)
         ArtifactResult resolveResult = this.artifactResolver.resolveArtifact(session, resolveRequest);
         pomArtifact = resolveResult.getArtifact();
 
-        // Create model
-
-        return createModel(pomArtifact.getFile(), session);
+        return pomArtifact;
     }
 
     private Model createModel(File pomFile, RepositorySystemSession session) throws ModelBuildingException
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherExtensionRepositoryFactory.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherExtensionRepositoryFactory.java
index 54d9075..0d81c6c 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherExtensionRepositoryFactory.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherExtensionRepositoryFactory.java
@@ -19,11 +19,17 @@
  */
 package org.xwiki.extension.repository.aether.internal;
 
+import java.io.File;
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+
 import javax.inject.Inject;
 import javax.inject.Named;
 import javax.inject.Provider;
 import javax.inject.Singleton;
 
+import org.apache.commons.lang3.StringUtils;
 import org.codehaus.plexus.PlexusContainer;
 import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
 import org.eclipse.aether.RepositorySystem;
@@ -35,6 +41,7 @@
 import org.xwiki.component.manager.ComponentManager;
 import org.xwiki.component.phase.Initializable;
 import org.xwiki.component.phase.InitializationException;
+import org.xwiki.environment.Environment;
 import org.xwiki.extension.ExtensionManagerConfiguration;
 import org.xwiki.extension.repository.AbstractExtensionRepositoryFactory;
 import org.xwiki.extension.repository.ExtensionRepository;
@@ -59,8 +66,11 @@
     @Inject
     private ExtensionManagerConfiguration configuration;
 
-    private RepositorySystem repositorySystem;
+    @Inject
+    private Environment environment;
 
+    private RepositorySystem repositorySystem;
+    
     @Override
     public void initialize() throws InitializationException
     {
@@ -71,9 +81,10 @@ public void initialize() throws InitializationException
         }
     }
 
-    public XWikiRepositorySystemSession createRepositorySystemSession()
+    public XWikiRepositorySystemSession createRepositorySystemSession() throws IOException
     {
-        XWikiRepositorySystemSession session = new XWikiRepositorySystemSession(this.repositorySystem);
+        XWikiRepositorySystemSession session =
+            new XWikiRepositorySystemSession(this.repositorySystem, this.environment);
 
         session.setUserAgent(this.configuration.getUserAgent());
 
@@ -88,9 +99,17 @@ public ExtensionRepository createRepository(ExtensionRepositoryDescriptor reposi
             RemoteRepository.Builder aetherRepositoryBuilder = new RemoteRepository.Builder(
                 repositoryDescriptor.getId(), "default", repositoryDescriptor.getURI().toString());
 
-            // Don't use cached data
-            aetherRepositoryBuilder.setPolicy(new RepositoryPolicy(true, RepositoryPolicy.UPDATE_POLICY_ALWAYS,
-                RepositoryPolicy.CHECKSUM_POLICY_WARN));
+            // Checksum policy
+            String checksumPolicy = repositoryDescriptor.getProperty("checksumPolicy");
+            if (StringUtils.isEmpty(checksumPolicy)) {
+                checksumPolicy = RepositoryPolicy.CHECKSUM_POLICY_WARN;
+            }
+
+            // Update policy
+            String updatePolicy = RepositoryPolicy.UPDATE_POLICY_ALWAYS;
+
+            // Don't cached SNAPSHOTs
+            aetherRepositoryBuilder.setPolicy(new RepositoryPolicy(true, updatePolicy, checksumPolicy));
 
             // Authentication
             String username = repositoryDescriptor.getProperty("auth.user");
@@ -113,4 +132,11 @@ public ExtensionRepository createRepository(ExtensionRepositoryDescriptor reposi
             throw new ExtensionRepositoryException("Failed to create repository [" + repositoryDescriptor + "]", e);
         }
     }
+
+    public File createTemporaryFile(String prefix, String suffix) throws IOException
+    {
+        Path filesDirectory = this.environment.getTemporaryDirectory().toPath().resolve("extension/download/files/");
+        Files.createDirectories(filesDirectory);
+        return Files.createTempFile(filesDirectory, prefix, suffix).toFile();
+    }
 }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/XWikiRepositorySystemSession.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/XWikiRepositorySystemSession.java
index 2ef8dbf..21ec25a 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/XWikiRepositorySystemSession.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/XWikiRepositorySystemSession.java
@@ -21,6 +21,8 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
 import java.util.Map;
 
 import org.apache.commons.io.FileUtils;
@@ -36,10 +38,9 @@
 import org.eclipse.aether.util.artifact.DefaultArtifactTypeRegistry;
 import org.eclipse.aether.util.repository.JreProxySelector;
 import org.eclipse.aether.util.repository.SimpleArtifactDescriptorPolicy;
+import org.xwiki.environment.Environment;
 import org.xwiki.extension.maven.internal.MavenUtils;
 
-import com.google.common.io.Files;
-
 /**
  * Encapsulate {@link DefaultRepositorySystemSession} to generate and clean a temporary local repository for each
  * sessions.
@@ -66,8 +67,10 @@ public XWikiRepositorySystemSession(RepositorySystemSession session)
 
     /**
      * @param repositorySystem the AETHER repository system component
+     * @param enviroment the environment component
+     * @throws IOException when failing to create a temporary directory to download the required files
      */
-    public XWikiRepositorySystemSession(RepositorySystem repositorySystem)
+    public XWikiRepositorySystemSession(RepositorySystem repositorySystem, Environment enviroment) throws IOException
     {
         DefaultRepositorySystemSession wsession = MavenRepositorySystemUtils.newSession();
         this.session = wsession;
@@ -75,7 +78,9 @@ public XWikiRepositorySystemSession(RepositorySystem repositorySystem)
 
         // Local repository
 
-        File localDir = Files.createTempDir();
+        Path downloadDirectory = enviroment.getTemporaryDirectory().toPath().resolve("extension/download");
+        Files.createDirectories(downloadDirectory);
+        File localDir = Files.createTempDirectory(downloadDirectory, "repository").toFile();
         LocalRepository localRepository = new LocalRepository(localDir);
         wsession.setLocalRepositoryManager(repositorySystem.newLocalRepositoryManager(wsession, localRepository));
 
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/test/java/org/xwiki/extension/repository/aether/internal/AetherDefaultRepositoryManagerTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/test/java/org/xwiki/extension/repository/aether/internal/AetherDefaultRepositoryManagerTest.java
index 7427359..7ec40ec 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/test/java/org/xwiki/extension/repository/aether/internal/AetherDefaultRepositoryManagerTest.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/test/java/org/xwiki/extension/repository/aether/internal/AetherDefaultRepositoryManagerTest.java
@@ -22,7 +22,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
-import java.net.URL;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashSet;
@@ -55,6 +55,8 @@
 import org.xwiki.extension.version.internal.DefaultVersionConstraint;
 import org.xwiki.test.annotation.AllComponents;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
 @AllComponents
 public class AetherDefaultRepositoryManagerTest
 {
@@ -308,12 +310,8 @@ public void testDownload() throws ExtensionException, IOException
     {
         Extension extension = this.repositoryManager.resolve(this.extensionId);
 
-        InputStream is = extension.getFile().openStream();
-
-        try {
+        try (InputStream is = extension.getFile().openStream()) {
             Assert.assertEquals("content", IOUtils.toString(is));
-        } finally {
-            is.close();
         }
     }
 
@@ -322,12 +320,8 @@ public void testDownloadSNAPSHOT() throws ExtensionException, IOException
     {
         Extension extension = this.repositoryManager.resolve(this.snapshotExtensionId);
 
-        InputStream is = extension.getFile().openStream();
-
-        try {
+        try (InputStream is = extension.getFile().openStream()) {
             Assert.assertEquals("snapshot content", IOUtils.toString(is));
-        } finally {
-            is.close();
         }
     }
 
@@ -336,12 +330,8 @@ public void testDownloadClassifier() throws ExtensionException, IOException
     {
         Extension extension = this.repositoryManager.resolve(this.extensionIdClassifier);
 
-        InputStream is = extension.getFile().openStream();
-
-        try {
+        try (InputStream is = extension.getFile().openStream()) {
             Assert.assertEquals("classifier content", IOUtils.toString(is));
-        } finally {
-            is.close();
         }
     }
 
@@ -350,12 +340,8 @@ public void testDownloadBundle() throws ExtensionException, IOException
     {
         Extension extension = this.repositoryManager.resolve(this.bundleExtensionId);
 
-        InputStream is = extension.getFile().openStream();
-
-        try {
+        try (InputStream is = extension.getFile().openStream()) {
             Assert.assertEquals("content", IOUtils.toString(is));
-        } finally {
-            is.close();
         }
     }
 
@@ -404,6 +390,25 @@ public void testResolveWithEmptyScmAndIssueManagement() throws ResolveException
         Assert.assertNull(extension.getScm());
     }
 
+    @Test
+    public void testResolveDependencyFromUnknownRepository() throws ResolveException, IOException
+    {
+        // Make sure to put a proper repository in the pom
+        File pomFile =
+            new File(this.repositoryUtil.getMavenRepository(), "eugroupid/euartifactid/version/euartifactid-version.pom");
+        String pom = FileUtils.readFileToString(pomFile, StandardCharsets.UTF_8);
+        pom.replace("${{repository.mavenunknown}}", this.repositoryUtil.getMavenUnknownRepository().toURI().toString());
+        FileUtils.write(pomFile, pom, StandardCharsets.UTF_8);
+
+        Extension extension = this.repositoryManager.resolve(new ExtensionId("eugroupid:euartifactid", "version"));
+
+        ExtensionDependency extensionDependency = extension.getDependencies().iterator().next();
+
+        Extension dependency = this.repositoryManager.resolve(extensionDependency);
+
+        assertEquals(extensionDependency.getId(), dependency.getId().getId());
+    }
+
     // Failures
 
     @Test(expected = ExtensionNotFoundException.class)
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/test/resources/repository/maven/eugroupid/euartifactid/maven-metadata.xml b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/test/resources/repository/maven/eugroupid/euartifactid/maven-metadata.xml
new file mode 100644
index 0000000..0a5f267
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/test/resources/repository/maven/eugroupid/euartifactid/maven-metadata.xml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+-->
+
+<metadata>
+  <groupId>eugroupid</groupId>
+  <artifactId>euartifactid</artifactId>
+  <versioning>
+    <latest>version</latest>
+    <release>version</release>
+    <versions>
+      <version>version</version>
+    </versions>
+    <lastUpdated>20091103142109</lastUpdated>
+  </versioning>
+</metadata>
\ No newline at end of file
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/test/resources/repository/maven/eugroupid/euartifactid/version/euartifactid-version.pom b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/test/resources/repository/maven/eugroupid/euartifactid/version/euartifactid-version.pom
new file mode 100644
index 0000000..0ef4c8c
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/test/resources/repository/maven/eugroupid/euartifactid/version/euartifactid-version.pom
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+-->
+
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>eugroupid</groupId>
+  <artifactId>euartifactid</artifactId>
+  <version>version</version>
+  <packaging>type</packaging>
+
+  <dependencies>
+    <dependency>
+      <groupId>ugroupid</groupId>
+      <artifactId>uartifactid</artifactId>
+      <version>version</version>
+      <type>type</type>
+    </dependency>
+  </dependencies>
+
+  <repositories>
+    <repository>
+      <url>${{repositories.unknownmaven}}</url>
+    </repository>
+  </repositories>
+</project>
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/test/resources/repository/maven/eugroupid/euartifactid/version/euartifactid-version.type b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/test/resources/repository/maven/eugroupid/euartifactid/version/euartifactid-version.type
new file mode 100644
index 0000000..6b584e8
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/test/resources/repository/maven/eugroupid/euartifactid/version/euartifactid-version.type
@@ -0,0 +1 @@
+content
\ No newline at end of file
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/test/resources/repository/mavenunknown/ugroupid/uartifactid/maven-metadata.xml b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/test/resources/repository/mavenunknown/ugroupid/uartifactid/maven-metadata.xml
new file mode 100644
index 0000000..00b9390
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/test/resources/repository/mavenunknown/ugroupid/uartifactid/maven-metadata.xml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+-->
+
+<metadata>
+  <groupId>egroupid</groupId>
+  <artifactId>eartifactid</artifactId>
+  <versioning>
+    <latest>version</latest>
+    <release>version</release>
+    <versions>
+      <version>version</version>
+    </versions>
+    <lastUpdated>20091103142109</lastUpdated>
+  </versioning>
+</metadata>
\ No newline at end of file
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/test/resources/repository/mavenunknown/ugroupid/uartifactid/version/uartifactid-version.pom b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/test/resources/repository/mavenunknown/ugroupid/uartifactid/version/uartifactid-version.pom
new file mode 100644
index 0000000..d3aa742
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/test/resources/repository/mavenunknown/ugroupid/uartifactid/version/uartifactid-version.pom
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+-->
+
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>egroupid</groupId>
+  <artifactId>eartifactid</artifactId>
+  <version>version</version>
+  <packaging>pom</packaging>
+
+  <description>parent description</description>
+</project>
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-xwiki/pom.xml b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-xwiki/pom.xml
index 71ceaa8..adcc2c6 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-xwiki/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-xwiki/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-extension-repositories</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-extension-repository-xwiki</artifactId>
   <name>XWiki Commons - Extension - Repository - XWiki</name>
@@ -33,6 +33,7 @@
   <description>Allows accessing extensions located in an XWiki repository</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.18</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>19</xwiki.pitest.mutationThreshold>
     <!-- Old names of this module used for retro compatibility when resolving dependencies of old extensions -->
     <xwiki.extension.features>org.xwiki.platform:xwiki-platform-extension-repository-xwiki-handler,org.xwiki.commons:xwiki-commons-extension-repository-xwiki-handler</xwiki.extension.features>
     <!-- Name to display by the Extension Manager -->
@@ -62,6 +63,10 @@
           <artifactId>log4j</artifactId>
           <groupId>log4j</groupId>
         </exclusion>
+        <exclusion>
+          <groupId>org.json</groupId>
+          <artifactId>json</artifactId>
+        </exclusion>
       </exclusions>
     </dependency>
     <dependency>
diff --git a/xwiki-commons-core/xwiki-commons-filter/pom.xml b/xwiki-commons-core/xwiki-commons-filter/pom.xml
index 672ad63..f261655 100644
--- a/xwiki-commons-core/xwiki-commons-filter/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-filter/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-core</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-filter</artifactId>
   <name>XWiki Commons - Filter - Parent POM</name>
diff --git a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/pom.xml b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/pom.xml
index d131ca4..95f1132 100644
--- a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/pom.xml
@@ -25,14 +25,15 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-filter</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-filter-api</artifactId>
   <name>XWiki Commons - Filter - API</name>
   <packaging>jar</packaging>
   <description>XWiki Commons - Filter - API</description>
   <properties>
-    <xwiki.jacoco.instructionRatio>0</xwiki.jacoco.instructionRatio>
+    <xwiki.jacoco.instructionRatio>0.30</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>15</xwiki.pitest.mutationThreshold>
   </properties>
   <dependencies>
     <dependency>
diff --git a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/main/java/org/xwiki/filter/type/FilterStreamType.java b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/main/java/org/xwiki/filter/type/FilterStreamType.java
index 24cd18e..e51ad8f 100644
--- a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/main/java/org/xwiki/filter/type/FilterStreamType.java
+++ b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/main/java/org/xwiki/filter/type/FilterStreamType.java
@@ -260,7 +260,8 @@ public boolean equals(Object object)
         } else {
             if (object instanceof FilterStreamType) {
                 result = Objects.equals(getType(), ((FilterStreamType) object).getType())
-                    && Objects.equals(getDataFormat(), ((FilterStreamType) object).getDataFormat());
+                    && Objects.equals(getDataFormat(), ((FilterStreamType) object).getDataFormat())
+                    && Objects.equals(getVersion(), ((FilterStreamType) object).getVersion());
             } else {
                 result = false;
             }
diff --git a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/test/java/org/xwiki/filter/internal/AbstractFilterDescriptorManagerTest.java b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/test/java/org/xwiki/filter/internal/AbstractFilterDescriptorManagerTest.java
index a54aacf..25430ce 100644
--- a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/test/java/org/xwiki/filter/internal/AbstractFilterDescriptorManagerTest.java
+++ b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/test/java/org/xwiki/filter/internal/AbstractFilterDescriptorManagerTest.java
@@ -24,11 +24,8 @@
 import java.util.Collections;
 import java.util.Map;
 
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.xwiki.component.manager.ComponentLookupException;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.xwiki.component.util.DefaultParameterizedType;
 import org.xwiki.filter.FilterDescriptor;
 import org.xwiki.filter.FilterDescriptorManager;
@@ -39,19 +36,31 @@
 import org.xwiki.filter.test.TestFilterImplementation;
 import org.xwiki.properties.ConverterManager;
 import org.xwiki.properties.converter.ConversionException;
-import org.xwiki.test.mockito.MockitoComponentMockingRule;
-
-import static org.junit.Assert.assertNotSame;
+import org.xwiki.test.junit5.mockito.ComponentTest;
+import org.xwiki.test.junit5.mockito.InjectMockComponents;
+import org.xwiki.test.junit5.mockito.MockComponent;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertNotSame;
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+/**
+ * @version $Id$
+ */
+@ComponentTest
 public abstract class AbstractFilterDescriptorManagerTest
 {
-    @Rule
-    public MockitoComponentMockingRule<FilterDescriptorManager> mocker =
-        new MockitoComponentMockingRule<FilterDescriptorManager>(DefaultFilterDescriptorManager.class);
+    @MockComponent
+    private ConverterManager converter;
+
+    @InjectMockComponents
+    private DefaultFilterDescriptorManager manager;
 
     private Object filter;
 
@@ -62,18 +71,17 @@ public AbstractFilterDescriptorManagerTest(Object filter)
         this.filter = filter;
     }
 
-    @Before
-    public void before() throws ComponentLookupException
+    @BeforeEach
+    public void beforeEach()
     {
-        ConverterManager converter = this.mocker.getInstance(ConverterManager.class);
-
-        when(converter.convert(int.class, "42")).thenReturn(42);
-        when(converter.convert(String.class, "default value")).thenReturn("default value");
-        when(converter.convert(Color.class, "#ffffff")).thenReturn(Color.WHITE);
-        when(converter.convert(new DefaultParameterizedType(null, Map.class, new Type[] { String.class, String.class }),
-            "")).thenThrow(ConversionException.class);
-
-        this.filterDescriptor = this.mocker.getComponentUnderTest().getFilterDescriptor(this.filter.getClass());
+        when(this.converter.convert(int.class, "42")).thenReturn(42);
+        when(this.converter.convert(String.class, "default value")).thenReturn("default value");
+        when(this.converter.convert(Color.class, "#ffffff")).thenReturn(Color.WHITE);
+        when(this.converter
+            .convert(new DefaultParameterizedType(null, Map.class, new Type[] { String.class, String.class }), ""))
+                .thenThrow(ConversionException.class);
+
+        this.filterDescriptor = this.manager.getFilterDescriptor(this.filter.getClass());
     }
 
     @Test
@@ -81,14 +89,14 @@ public void containerWithParameters()
     {
         FilterElementDescriptor filterElement = this.filterDescriptor.getElement("containerwithparameters");
 
-        Assert.assertNotNull(filterElement);
+        assertNotNull(filterElement);
 
         FilterElementParameterDescriptor<?> parameter0 = filterElement.getParameters()[0];
         parameter0 = filterElement.getParameter("param0");
 
-        Assert.assertEquals("param0", parameter0.getName());
-        Assert.assertEquals(0, parameter0.getIndex());
-        Assert.assertEquals(String.class, parameter0.getType());
+        assertEquals("param0", parameter0.getName());
+        assertEquals(0, parameter0.getIndex());
+        assertEquals(String.class, parameter0.getType());
     }
 
     @Test
@@ -96,59 +104,59 @@ public void containerWithNamedParameters()
     {
         FilterElementDescriptor filterElement = this.filterDescriptor.getElement("containerwithnamedparameters");
 
-        Assert.assertNotNull(filterElement);
+        assertNotNull(filterElement);
 
         FilterElementParameterDescriptor<?> parameter0 = filterElement.getParameters()[0];
         parameter0 = filterElement.getParameter("namedParam");
 
-        Assert.assertNotNull(parameter0);
+        assertNotNull(parameter0);
 
-        Assert.assertEquals("namedParam", parameter0.getName());
-        Assert.assertEquals(0, parameter0.getIndex());
-        Assert.assertEquals(String.class, parameter0.getType());
+        assertEquals("namedParam", parameter0.getName());
+        assertEquals(0, parameter0.getIndex());
+        assertEquals(String.class, parameter0.getType());
     }
 
     @Test
-    public void nameInheritance() throws ComponentLookupException
+    public void nameInheritance()
     {
-        FilterElementDescriptor filterElement = this.mocker.getComponentUnderTest()
-            .getFilterDescriptor(TestFilterImplementation.class).getElement("containerwithnamedparameters");
+        FilterElementDescriptor filterElement =
+            this.manager.getFilterDescriptor(TestFilterImplementation.class).getElement("containerwithnamedparameters");
 
-        Assert.assertNotNull(filterElement);
+        assertNotNull(filterElement);
 
         FilterElementParameterDescriptor<?> parameter0 = filterElement.getParameters()[0];
         parameter0 = filterElement.getParameter("namedParam");
 
-        Assert.assertNotNull(parameter0);
+        assertNotNull(parameter0);
 
-        Assert.assertEquals("namedParam", parameter0.getName());
-        Assert.assertEquals(0, parameter0.getIndex());
-        Assert.assertEquals(String.class, parameter0.getType());
+        assertEquals("namedParam", parameter0.getName());
+        assertEquals(0, parameter0.getIndex());
+        assertEquals(String.class, parameter0.getType());
     }
 
     @Test
-    public void withDefaultValue() throws ComponentLookupException
+    public void withDefaultValue()
     {
-        FilterElementDescriptor filterElement = this.mocker.getComponentUnderTest()
-            .getFilterDescriptor(TestFilterImplementation.class).getElement("childwithdefaultvalue");
+        FilterElementDescriptor filterElement =
+            this.manager.getFilterDescriptor(TestFilterImplementation.class).getElement("childwithdefaultvalue");
 
-        Assert.assertNotNull(filterElement);
+        assertNotNull(filterElement);
 
         FilterElementParameterDescriptor<Integer> parameter0 = filterElement.getParameter("int");
 
-        Assert.assertEquals(Integer.valueOf(42), parameter0.getDefaultValue());
+        assertEquals(Integer.valueOf(42), parameter0.getDefaultValue());
 
         FilterElementParameterDescriptor<String> parameter1 = filterElement.getParameter("string");
 
-        Assert.assertEquals("default value", parameter1.getDefaultValue());
+        assertEquals("default value", parameter1.getDefaultValue());
 
         FilterElementParameterDescriptor<Color> parameter2 = filterElement.getParameter("color");
 
-        Assert.assertEquals(Color.WHITE, parameter2.getDefaultValue());
+        assertEquals(Color.WHITE, parameter2.getDefaultValue());
 
         FilterElementParameterDescriptor<Map<String, String>> parameter3 = filterElement.getParameter("map");
 
-        Assert.assertEquals(Collections.EMPTY_MAP, parameter3.getDefaultValue());
+        assertEquals(Collections.EMPTY_MAP, parameter3.getDefaultValue());
     }
 
     @Test
@@ -156,10 +164,10 @@ public void namedChild()
     {
         FilterElementDescriptor filterElement = this.filterDescriptor.getElement("childwithname");
 
-        Assert.assertNotNull(filterElement);
-        Assert.assertNull(filterElement.getBeginMethod());
-        Assert.assertNull(filterElement.getEndMethod());
-        Assert.assertNotNull(filterElement.getOnMethod());
+        assertNotNull(filterElement);
+        assertNull(filterElement.getBeginMethod());
+        assertNull(filterElement.getEndMethod());
+        assertNotNull(filterElement.getOnMethod());
     }
 
     @Test
@@ -167,23 +175,23 @@ public void namedContainer()
     {
         FilterElementDescriptor filterElement = this.filterDescriptor.getElement("containerwithname");
 
-        Assert.assertNotNull(filterElement);
-        Assert.assertNotNull(filterElement.getBeginMethod());
-        Assert.assertNotNull(filterElement.getEndMethod());
-        Assert.assertNull(filterElement.getOnMethod());
+        assertNotNull(filterElement);
+        assertNotNull(filterElement.getBeginMethod());
+        assertNotNull(filterElement.getEndMethod());
+        assertNull(filterElement.getOnMethod());
     }
 
-    @Test(expected = FilterException.class)
-    public void proxyFailing() throws FilterException, ComponentLookupException
+    @Test
+    public void proxyFailing() throws FilterException
     {
         UnknownFilter filter = mock(UnknownFilter.class);
         doThrow(FilterException.class).when(filter).onUnknwon(any(), any());
 
-        UnknownFilter proxyFilter = this.mocker.getComponentUnderTest().createFilterProxy(filter, UnknownFilter.class,
-            FilterDescriptorManager.class);
+        UnknownFilter proxyFilter =
+            this.manager.createFilterProxy(filter, UnknownFilter.class, FilterDescriptorManager.class);
 
         assertNotSame(filter, proxyFilter);
 
-        proxyFilter.onUnknwon(null, null);
+        assertThrows(FilterException.class, () -> proxyFilter.onUnknwon(null, null));
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/test/java/org/xwiki/filter/internal/FilterStreamTypeConverterTest.java b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/test/java/org/xwiki/filter/internal/FilterStreamTypeConverterTest.java
deleted file mode 100644
index 3945586..0000000
--- a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/test/java/org/xwiki/filter/internal/FilterStreamTypeConverterTest.java
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * See the NOTICE file distributed with this work for additional
- * information regarding copyright ownership.
- *
- * This is free software; you can redistribute it and/or modify it
- * under the terms of the GNU Lesser General Public License as
- * published by the Free Software Foundation; either version 2.1 of
- * the License, or (at your option) any later version.
- *
- * This software is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this software; if not, write to the Free
- * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
- * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
- */
-package org.xwiki.filter.internal;
-
-import org.junit.Assert;
-import org.junit.Rule;
-import org.junit.Test;
-import org.xwiki.filter.internal.type.FilterStreamTypeConverter;
-import org.xwiki.filter.type.FilterStreamType;
-import org.xwiki.properties.converter.Converter;
-import org.xwiki.test.mockito.MockitoComponentMockingRule;
-
-/**
- * Unit tests for {@link FilterStreamTypeConverter}.
- *
- * @version $Id$
- */
-public class FilterStreamTypeConverterTest
-{
-    @Rule
-    public MockitoComponentMockingRule<Converter<FilterStreamType>> mocker =
-        new MockitoComponentMockingRule<Converter<FilterStreamType>>(FilterStreamTypeConverter.class);
-
-    @Test
-    public void convertToTypeObject() throws Exception
-    {
-        FilterStreamType type =
-            this.mocker.getComponentUnderTest().convert(FilterStreamType.class,
-                FilterStreamType.XWIKI_XAR_CURRENT.serialize());
-        Assert.assertEquals(FilterStreamType.XWIKI_XAR_CURRENT, type);
-    }
-
-    @Test
-    public void convertToTypeObjectWhenNull() throws Exception
-    {
-        FilterStreamType type = this.mocker.getComponentUnderTest().convert(FilterStreamType.class, null);
-        Assert.assertNull(type);
-    }
-
-    @Test
-    public void convertToString() throws Exception
-    {
-        String typeId = this.mocker.getComponentUnderTest().convert(String.class, FilterStreamType.XWIKI_XAR_CURRENT);
-        Assert.assertEquals(FilterStreamType.XWIKI_XAR_CURRENT.serialize(), typeId);
-    }
-
-    @Test
-    public void convertToStringWhenNull() throws Exception
-    {
-        String typeId = this.mocker.getComponentUnderTest().convert(String.class, null);
-        Assert.assertNull(typeId);
-    }
-}
diff --git a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/test/java/org/xwiki/filter/internal/ImplementationDescriptorManagerTest.java b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/test/java/org/xwiki/filter/internal/ImplementationDescriptorManagerTest.java
index 3bd2df8..e36ac19 100644
--- a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/test/java/org/xwiki/filter/internal/ImplementationDescriptorManagerTest.java
+++ b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/test/java/org/xwiki/filter/internal/ImplementationDescriptorManagerTest.java
@@ -21,6 +21,11 @@
 
 import org.xwiki.filter.test.TestFilterImplementation;
 
+/**
+ * Test manipulating a descriptor generated from a usual POJO.
+ * 
+ * @version $Id$
+ */
 public class ImplementationDescriptorManagerTest extends AbstractFilterDescriptorManagerTest
 {
     public ImplementationDescriptorManagerTest()
diff --git a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/test/java/org/xwiki/filter/internal/ProxyFilterDescriptorManagerTest.java b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/test/java/org/xwiki/filter/internal/ProxyFilterDescriptorManagerTest.java
index db6730c..35b2a7b 100644
--- a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/test/java/org/xwiki/filter/internal/ProxyFilterDescriptorManagerTest.java
+++ b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/test/java/org/xwiki/filter/internal/ProxyFilterDescriptorManagerTest.java
@@ -25,12 +25,17 @@
 
 import org.xwiki.filter.test.TestFilter;
 
+/**
+ * Test manipulating a descriptor generated from a proxy.
+ * 
+ * @version $Id$
+ */
 public class ProxyFilterDescriptorManagerTest extends AbstractFilterDescriptorManagerTest
 {
     public ProxyFilterDescriptorManagerTest()
     {
-        super(Proxy.newProxyInstance(ProxyFilterDescriptorManagerTest.class.getClassLoader(), new Class[] { TestFilter.class },
-            new InvocationHandler()
+        super(Proxy.newProxyInstance(ProxyFilterDescriptorManagerTest.class.getClassLoader(),
+            new Class[] { TestFilter.class }, new InvocationHandler()
             {
                 @Override
                 public Object invoke(Object proxy, Method method, Object[] args) throws Throwable
diff --git a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/test/java/org/xwiki/filter/internal/type/FilterStreamTypeConverterTest.java b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/test/java/org/xwiki/filter/internal/type/FilterStreamTypeConverterTest.java
new file mode 100644
index 0000000..e6f3eca
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/test/java/org/xwiki/filter/internal/type/FilterStreamTypeConverterTest.java
@@ -0,0 +1,69 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.filter.internal.type;
+
+import org.junit.jupiter.api.Test;
+import org.xwiki.filter.type.FilterStreamType;
+import org.xwiki.test.junit5.mockito.ComponentTest;
+import org.xwiki.test.junit5.mockito.InjectMockComponents;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
+
+/**
+ * Unit tests for {@link FilterStreamTypeConverter}.
+ *
+ * @version $Id$
+ */
+@ComponentTest
+public class FilterStreamTypeConverterTest
+{
+    @InjectMockComponents
+    private FilterStreamTypeConverter converter;
+
+    @Test
+    public void convertToTypeObject() throws Exception
+    {
+        FilterStreamType type =
+            this.converter.convert(FilterStreamType.class, FilterStreamType.XWIKI_XAR_CURRENT.serialize());
+        assertEquals(FilterStreamType.XWIKI_XAR_CURRENT, type);
+    }
+
+    @Test
+    public void convertToTypeObjectWhenNull() throws Exception
+    {
+        FilterStreamType type = this.converter.convert(FilterStreamType.class, null);
+        assertNull(type);
+    }
+
+    @Test
+    public void convertToString() throws Exception
+    {
+        String typeId = this.converter.convert(String.class, FilterStreamType.XWIKI_XAR_CURRENT);
+        assertEquals(FilterStreamType.XWIKI_XAR_CURRENT.serialize(), typeId);
+    }
+
+    @Test
+    public void convertToStringWhenNull() throws Exception
+    {
+        String typeId = this.converter.convert(String.class, null);
+        assertNull(typeId);
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/test/java/org/xwiki/filter/type/FilterStreamTypeTest.java b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/test/java/org/xwiki/filter/type/FilterStreamTypeTest.java
index f815073..14e8427 100644
--- a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/test/java/org/xwiki/filter/type/FilterStreamTypeTest.java
+++ b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-api/src/test/java/org/xwiki/filter/type/FilterStreamTypeTest.java
@@ -19,8 +19,12 @@
  */
 package org.xwiki.filter.type;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 /**
  * Validate {@link FilterStreamType}.
@@ -36,7 +40,7 @@ public void testSerializeWithDataAndVersion()
     {
         FilterStreamType type = new FilterStreamType(new SystemType("type"), "data", "version");
 
-        Assert.assertEquals("type+data/version", type.serialize());
+        assertEquals("type+data/version", type.serialize());
     }
 
     @Test
@@ -44,9 +48,9 @@ public void testUnserializeWithDataAndVersion()
     {
         FilterStreamType type = FilterStreamType.unserialize("type+data/version");
 
-        Assert.assertEquals("type", type.getType().getId());
-        Assert.assertEquals("data", type.getDataFormat());
-        Assert.assertEquals("version", type.getVersion());
+        assertEquals("type", type.getType().getId());
+        assertEquals("data", type.getDataFormat());
+        assertEquals("version", type.getVersion());
     }
 
     @Test
@@ -54,9 +58,9 @@ public void testUnserializeWithData()
     {
         FilterStreamType type = FilterStreamType.unserialize("type+data");
 
-        Assert.assertEquals("type", type.getType().getId());
-        Assert.assertEquals("data", type.getDataFormat());
-        Assert.assertNull(type.getVersion());
+        assertEquals("type", type.getType().getId());
+        assertEquals("data", type.getDataFormat());
+        assertNull(type.getVersion());
     }
 
     @Test
@@ -64,9 +68,9 @@ public void testUnserializeWithEmptyData()
     {
         FilterStreamType type = FilterStreamType.unserialize("type+");
 
-        Assert.assertEquals("type", type.getType().getId());
-        Assert.assertEquals("", type.getDataFormat());
-        Assert.assertNull(type.getVersion());
+        assertEquals("type", type.getType().getId());
+        assertEquals("", type.getDataFormat());
+        assertNull(type.getVersion());
     }
 
     @Test
@@ -74,9 +78,9 @@ public void testUnserializeWithVersion()
     {
         FilterStreamType type = FilterStreamType.unserialize("type/version");
 
-        Assert.assertEquals("type", type.getType().getId());
-        Assert.assertNull(type.getDataFormat());
-        Assert.assertEquals("version", type.getVersion());
+        assertEquals("type", type.getType().getId());
+        assertNull(type.getDataFormat());
+        assertEquals("version", type.getVersion());
     }
 
     @Test
@@ -84,8 +88,30 @@ public void testUnserializeWithEmptyVersion()
     {
         FilterStreamType type = FilterStreamType.unserialize("type/");
 
-        Assert.assertEquals("type", type.getType().getId());
-        Assert.assertNull(type.getDataFormat());
-        Assert.assertEquals("", type.getVersion());
+        assertEquals("type", type.getType().getId());
+        assertNull(type.getDataFormat());
+        assertEquals("", type.getVersion());
+    }
+
+    @Test
+    public void equals()
+    {
+        FilterStreamType type = new FilterStreamType(new SystemType("type"), "data", "version");
+
+        assertEquals(type, new FilterStreamType(new SystemType("type"), "data", "version"));
+
+        assertNotEquals(type, new FilterStreamType(new SystemType("type2"), "data", "version"));
+        assertNotEquals(type, new FilterStreamType(new SystemType("type"), "data2", "version"));
+        assertNotEquals(type, new FilterStreamType(new SystemType("type"), "data", "version2"));
+    }
+
+    @Test
+    public void compareTo()
+    {
+        FilterStreamType type = new FilterStreamType(new SystemType("type"), "data", "2.0");
+
+        assertEquals(0, type.compareTo(new FilterStreamType(new SystemType("type"), "data", "2.0")));
+        assertTrue(type.compareTo(new FilterStreamType(new SystemType("type"), "data", "1.0")) > 0);
+        assertTrue(type.compareTo(new FilterStreamType(new SystemType("type"), "data", "3.0")) < 0);
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-events/pom.xml b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-events/pom.xml
index 707b603..f7ec1cb 100644
--- a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-events/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-events/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-filter</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-filter-events</artifactId>
   <packaging>pom</packaging>
diff --git a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-events/xwiki-commons-filter-event-extension/pom.xml b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-events/xwiki-commons-filter-event-extension/pom.xml
index fa385c2..5ae92da 100644
--- a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-events/xwiki-commons-filter-event-extension/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-events/xwiki-commons-filter-event-extension/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-filter-events</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-filter-event-extension</artifactId>
   <name>XWiki Commons - Filter - Event - Extension</name>
diff --git a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-streams/pom.xml b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-streams/pom.xml
index eb47f39..c9e2fbe 100644
--- a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-streams/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-streams/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-filter</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-filter-streams</artifactId>
   <packaging>pom</packaging>
diff --git a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-streams/xwiki-commons-filter-stream-xml/pom.xml b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-streams/xwiki-commons-filter-stream-xml/pom.xml
index 84e133d..e2d70b5 100644
--- a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-streams/xwiki-commons-filter-stream-xml/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-streams/xwiki-commons-filter-stream-xml/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-filter-streams</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-filter-stream-xml</artifactId>
   <name>XWiki Commons - Filter - Stream - Generic XML</name>
diff --git a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/pom.xml b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/pom.xml
index ee505a9..33ca650 100644
--- a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/pom.xml
@@ -25,13 +25,14 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-filter</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-filter-test</artifactId>
   <name>XWiki Commons - Filter - Test framework</name>
   <description>Filter test framework</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.00</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>7</xwiki.pitest.mutationThreshold>
   </properties>
   <dependencies>
     <dependency>
diff --git a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/src/main/java/org/xwiki/filter/test/integration/FilterTest.java b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/src/main/java/org/xwiki/filter/test/integration/FilterTest.java
index 048e607..10266c2 100644
--- a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/src/main/java/org/xwiki/filter/test/integration/FilterTest.java
+++ b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/src/main/java/org/xwiki/filter/test/integration/FilterTest.java
@@ -29,8 +29,8 @@
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.StringUtils;
-import org.junit.Assert;
 import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
 import org.xwiki.component.manager.ComponentManager;
 import org.xwiki.configuration.ConfigurationSource;
 import org.xwiki.filter.FilterException;
@@ -190,7 +190,7 @@ private InputSource getInputSource(TestConfiguration testConfiguration, String v
     }
 
     private Map<String, Object> toOutputConfiguration(TestConfiguration testConfiguration,
-        ExpectTestConfiguration expectTestConfiguration, InputSource expect) throws FilterException
+        ExpectTestConfiguration expectTestConfiguration, InputSource expect)
     {
         Map<String, Object> outputConfiguration = new HashMap<>();
         for (Map.Entry<String, String> entry : expectTestConfiguration.entrySet()) {
@@ -267,7 +267,7 @@ private void runTestInternal() throws Throwable
     private void assertExpectedResult(String typeId, InputSource expected, OutputTarget actual) throws IOException
     {
         if (actual instanceof StringWriterOutputTarget) {
-            Assert.assertEquals(expected.toString(), actual.toString());
+            Assertions.assertEquals(expected.toString(), actual.toString());
         } else if (actual instanceof ByteArrayOutputTarget) {
             byte[] actualBytes = ((ByteArrayOutputTarget) actual).toByteArray();
 
@@ -277,11 +277,11 @@ private void assertExpectedResult(String typeId, InputSource expected, OutputTar
                 byte[] expectedBytes = IOUtils.toByteArray(((InputStreamInputSource) expected).getInputStream());
                 expected.close();
 
-                Assert.assertArrayEquals(expectedBytes, actualBytes);
+                Assertions.assertArrayEquals(expectedBytes, actualBytes);
             }
         } else {
             // No idea how to compare that
-            Assert.fail("Output target type [" + actual.getClass() + "] is not supported");
+            Assertions.fail("Output target type [" + actual.getClass() + "] is not supported");
         }
     }
 
diff --git a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/src/main/java/org/xwiki/filter/test/integration/FilterTestSuite.java b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/src/main/java/org/xwiki/filter/test/integration/FilterTestSuite.java
index b4cb4ec..a36e306 100644
--- a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/src/main/java/org/xwiki/filter/test/integration/FilterTestSuite.java
+++ b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/src/main/java/org/xwiki/filter/test/integration/FilterTestSuite.java
@@ -19,15 +19,19 @@
  */
 package org.xwiki.filter.test.integration;
 
+import java.lang.annotation.Annotation;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
+import org.junit.After;
+import org.junit.Before;
 import org.junit.runner.Description;
 import org.junit.runner.Runner;
 import org.junit.runner.notification.Failure;
@@ -41,7 +45,6 @@
 import org.xwiki.test.mockito.MockitoComponentManager;
 
 /**
- * 
  * @version $Id$
  * @since 6.2M1
  */
@@ -80,7 +83,7 @@
 
         private final TestConfiguration configuration;
 
-        TestClassRunnerForParameters(Class< ? > type, TestConfiguration configuration) throws InitializationError
+        TestClassRunnerForParameters(Class<?> type, TestConfiguration configuration) throws InitializationError
         {
             super(type);
 
@@ -90,8 +93,8 @@
         @Override
         public Object createTest() throws Exception
         {
-            return getTestClass().getOnlyConstructor().newInstance(
-                new Object[] {this.configuration, getComponentManager()});
+            return getTestClass().getOnlyConstructor()
+                .newInstance(new Object[] { this.configuration, getComponentManager() });
         }
 
         @Override
@@ -128,36 +131,60 @@ protected void runChild(FrameworkMethod method, RunNotifier notifier)
             initializeComponentManager(notifier);
 
             // Check all methods for a ComponentManager annotation and call the found ones.
+            callMethodWithAnnotation(Initialized.class, notifier, getComponentManager());
+
+            // Run @Before
+            callMethodWithAnnotation(Before.class, notifier);
+
+            try {
+                super.runChild(method, notifier);
+            } finally {
+                // Run @After
+                callMethodWithAnnotation(After.class, notifier);
+
+                shutdownComponentManager(notifier);
+            }
+        }
+
+        private void callMethodWithAnnotation(Class<? extends Annotation> annotation, RunNotifier notifier,
+            Object... args)
+        {
             try {
                 for (Method klassMethod : klassInstance.getClass().getMethods()) {
-                    Initialized componentManagerAnnotation = klassMethod.getAnnotation(Initialized.class);
+                    Annotation componentManagerAnnotation = klassMethod.getAnnotation((Class<Annotation>) annotation);
                     if (componentManagerAnnotation != null) {
                         // Call it!
-                        klassMethod.invoke(klassInstance, getComponentManager());
+                        klassMethod.invoke(klassInstance, args);
                     }
                 }
             } catch (Exception e) {
-                notifier.fireTestFailure(new Failure(getDescription(), new RuntimeException(
-                    "Failed to call Component Manager initialization method", e)));
-            }
-
-            try {
-                super.runChild(method, notifier);
-            } finally {
-                shutdownComponentManager(notifier);
+                notifier.fireTestFailure(new Failure(getDescription(),
+                    new RuntimeException("Failed to call method with annotation [" + annotation + "]", e)));
             }
         }
 
         private void initializeComponentManager(RunNotifier notifier)
         {
+            // Initialize component manager
             try {
                 this.mockitoComponentManager.initializeTest(klassInstance);
                 this.mockitoComponentManager.registerMemoryConfigurationSource();
             } catch (Exception e) {
-                notifier.fireTestFailure(new Failure(getDescription(), new RuntimeException(
-                    "Failed to initialize Component Manager", e)));
+                notifier.fireTestFailure(
+                    new Failure(getDescription(), new RuntimeException("Failed to initialize Component Manager", e)));
             }
 
+            // Inject component manager
+            for (Field field : klassInstance.getClass().getFields()) {
+                if (field.getType() == MockitoComponentManager.class && field.isAccessible()) {
+                    try {
+                        field.set(klassInstance, this.mockitoComponentManager);
+                    } catch (Exception e) {
+                        notifier.fireTestFailure(new Failure(getDescription(),
+                            new RuntimeException("Failed to inject Component Manager", e)));
+                    }
+                }
+            }
         }
 
         private void shutdownComponentManager(RunNotifier notifier)
@@ -165,12 +192,12 @@ private void shutdownComponentManager(RunNotifier notifier)
             try {
                 this.mockitoComponentManager.shutdownTest();
             } catch (Exception e) {
-                notifier.fireTestFailure(new Failure(getDescription(), new RuntimeException(
-                    "Failed to shutdown Component Manager", e)));
+                notifier.fireTestFailure(
+                    new Failure(getDescription(), new RuntimeException("Failed to shutdown Component Manager", e)));
             }
         }
 
-        private ComponentManager getComponentManager() throws Exception
+        private ComponentManager getComponentManager()
         {
             return this.mockitoComponentManager;
         }
@@ -181,9 +208,9 @@ private ComponentManager getComponentManager() throws Exception
     /**
      * Only called reflectively. Do not use programmatically.
      */
-    public FilterTestSuite(Class< ? > klass) throws Throwable
+    public FilterTestSuite(Class<?> klass) throws Throwable
     {
-        super(klass, Collections.<Runner> emptyList());
+        super(klass, Collections.<Runner>emptyList());
 
         try {
             this.klassInstance = klass.newInstance();
@@ -214,8 +241,8 @@ public FilterTestSuite(Class< ? > klass) throws Throwable
     /**
      * {@inheritDoc}
      * <p>
-     * We override this method so that the JUnit results are not displayed in a test hierarchy with a
-     * single test result for each node (as it would be otherwise since RenderingTest has a single test method).
+     * We override this method so that the JUnit results are not displayed in a test hierarchy with a single test result
+     * for each node (as it would be otherwise since RenderingTest has a single test method).
      * </p>
      */
     @Override
diff --git a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/src/main/java/org/xwiki/filter/test/internal/DefaultFileAssertComparator.java b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/src/main/java/org/xwiki/filter/test/internal/DefaultFileAssertComparator.java
index f120031..b15529f 100644
--- a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/src/main/java/org/xwiki/filter/test/internal/DefaultFileAssertComparator.java
+++ b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/src/main/java/org/xwiki/filter/test/internal/DefaultFileAssertComparator.java
@@ -23,7 +23,7 @@
 import java.io.IOException;
 
 import org.apache.commons.io.FileUtils;
-import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 
 /**
  * @version $Id$
@@ -37,12 +37,12 @@ public void assertEquals(String message, File expected, File actual) throws IOEx
         byte[] expectedBytes = FileUtils.readFileToByteArray(expected);
         byte[] actualBytes = FileUtils.readFileToByteArray(actual);
 
-        Assert.assertArrayEquals(message, expectedBytes, actualBytes);
+        Assertions.assertArrayEquals(expectedBytes, actualBytes, message);
     }
 
     @Override
     public void assertEquals(String message, byte[] expected, byte[] actual)
     {
-        Assert.assertArrayEquals(message, expected, actual);
+        Assertions.assertArrayEquals(expected, actual, message);
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/src/main/java/org/xwiki/filter/test/internal/FileAssert.java b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/src/main/java/org/xwiki/filter/test/internal/FileAssert.java
index 2347ede..c00d897 100644
--- a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/src/main/java/org/xwiki/filter/test/internal/FileAssert.java
+++ b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/src/main/java/org/xwiki/filter/test/internal/FileAssert.java
@@ -40,21 +40,32 @@
     private final static DefaultFileAssertComparator DEFAULT_COMPARATOR = new DefaultFileAssertComparator();
 
     static {
-        StringFileAssertComparator stringFileAssertComparator = new StringFileAssertComparator();
+        setStringComparator("txt");
+        setStringComparator("xml");
+        setStringComparator("properties");
 
-        COMPARATORS.put("txt", stringFileAssertComparator);
-        COMPARATORS.put("xml", stringFileAssertComparator);
-        COMPARATORS.put("properties", stringFileAssertComparator);
+        setZIPComparator("xar");
+        setZIPComparator("jar");
+        setZIPComparator("zip");
+    }
 
-        ZIPFileAssertComparator zipFileAssertComparator = new ZIPFileAssertComparator();
+    private FileAssert()
+    {
+    }
 
-        COMPARATORS.put("xar", zipFileAssertComparator);
-        COMPARATORS.put("jar", zipFileAssertComparator);
-        COMPARATORS.put("zip", zipFileAssertComparator);
+    public static void setComparator(String extension, FileAssertComparator comparator)
+    {
+        COMPARATORS.put(extension, comparator);
     }
 
-    private FileAssert()
+    public static void setStringComparator(String extension)
+    {
+        setComparator(extension, new StringFileAssertComparator());
+    }
+
+    public static void setZIPComparator(String extension)
     {
+        setComparator(extension, new ZIPFileAssertComparator());
     }
 
     public static FileAssertComparator getComparator(String filename)
diff --git a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/src/main/java/org/xwiki/filter/test/internal/StringFileAssertComparator.java b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/src/main/java/org/xwiki/filter/test/internal/StringFileAssertComparator.java
index 41b2606..5504b42 100644
--- a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/src/main/java/org/xwiki/filter/test/internal/StringFileAssertComparator.java
+++ b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/src/main/java/org/xwiki/filter/test/internal/StringFileAssertComparator.java
@@ -24,7 +24,7 @@
 
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
-import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 
 /**
  * @version $Id$
@@ -38,7 +38,7 @@ public void assertEquals(String message, File expected, File actual) throws IOEx
         String expectedString = FileUtils.readFileToString(expected, "UTF8");
         String actualString = FileUtils.readFileToString(actual, "UTF8");
 
-        Assert.assertEquals(message, expectedString, actualString);
+        Assertions.assertEquals(expectedString, actualString, message);
     }
 
     @Override
@@ -47,6 +47,6 @@ public void assertEquals(String message, byte[] expected, byte[] actual) throws
         String expectedString = IOUtils.toString(expected, "UTF8");
         String actualString = IOUtils.toString(actual, "UTF8");
 
-        Assert.assertEquals(message, expectedString, actualString);
+        Assertions.assertEquals(expectedString, actualString, message);
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/src/main/java/org/xwiki/filter/test/internal/ZIPFileAssertComparator.java b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/src/main/java/org/xwiki/filter/test/internal/ZIPFileAssertComparator.java
index 325a42f..c4801e2 100644
--- a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/src/main/java/org/xwiki/filter/test/internal/ZIPFileAssertComparator.java
+++ b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-test/src/main/java/org/xwiki/filter/test/internal/ZIPFileAssertComparator.java
@@ -34,7 +34,7 @@
 import org.apache.commons.compress.archivers.zip.ZipFile;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
-import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 
 /**
  * @version $Id$
@@ -83,33 +83,32 @@ public static boolean isZip(File file) throws IOException
     /**
      * Asserts that two ZIP files are equal. If they are not, an {@link AssertionError} without a message is thrown.
      */
+    @Override
     public void assertEquals(String message, File expected, File actual)
     {
-        Assert.assertNotNull(expected);
-        Assert.assertNotNull(actual);
+        Assertions.assertNotNull(expected);
+        Assertions.assertNotNull(actual);
 
-        Assert.assertTrue("Expected file does not exist [" + expected.getAbsolutePath() + "]", expected.exists());
-        Assert.assertTrue("Actual file does not exist [" + actual.getAbsolutePath() + "]", actual.exists());
+        Assertions.assertTrue(expected.exists(), "Expected file does not exist [" + expected.getAbsolutePath() + "]");
+        Assertions.assertTrue(actual.exists(), "Actual file does not exist [" + actual.getAbsolutePath() + "]");
 
-        Assert.assertTrue("Expected file not readable", expected.canRead());
-        Assert.assertTrue("Actual file not readable", actual.canRead());
+        Assertions.assertTrue(expected.canRead(), "Expected file not readable");
+        Assertions.assertTrue(actual.canRead(), "Actual file not readable");
 
         try {
             Map<String, byte[]> expectedMap = unzip(expected);
             Map<String, byte[]> actualMap = unzip(actual);
 
+            Assertions.assertEquals(expectedMap.keySet(), actualMap.keySet(), "ZIP entries names not matching");
+
             for (Map.Entry<String, byte[]> expectedEntry : expectedMap.entrySet()) {
                 byte[] actualContent = actualMap.get(expectedEntry.getKey());
 
-                Assert.assertNotNull("Entry [" + expectedEntry.getKey() + "] not present", actualContent);
-
                 FileAssertComparator fileAssertComparator = FileAssert.getComparator(expectedEntry.getKey());
 
                 fileAssertComparator.assertEquals("Entry [" + expectedEntry.getKey() + "] has different content",
                     expectedEntry.getValue(), actualContent);
             }
-
-            Assert.assertEquals("Too much entries", expectedMap.size(), actualMap.size());
         } catch (IOException e) {
             throw new AssertionFailedError(e.toString());
         }
diff --git a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-xml/pom.xml b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-xml/pom.xml
index d67d9f7..6d39679 100644
--- a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-xml/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-xml/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-filter</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-filter-xml</artifactId>
   <name>XWiki Commons - Filter - XML</name>
@@ -33,6 +33,7 @@
   <description>XWiki Commons - Filter - XML</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>55</xwiki.pitest.mutationThreshold>
     <!-- Working with XStream requires a lot of classes, relax the coupling requirements -->
     <checkstyle.suppressions.location>${basedir}/src/main/checkstyle/checkstyle-suppressions.xml</checkstyle.suppressions.location>
   </properties>
diff --git a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-xml/src/main/java/org/xwiki/filter/xml/internal/XMLUtils.java b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-xml/src/main/java/org/xwiki/filter/xml/internal/XMLUtils.java
index 0caec7c..74ba121 100644
--- a/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-xml/src/main/java/org/xwiki/filter/xml/internal/XMLUtils.java
+++ b/xwiki-commons-core/xwiki-commons-filter/xwiki-commons-filter-xml/src/main/java/org/xwiki/filter/xml/internal/XMLUtils.java
@@ -20,6 +20,8 @@
 package org.xwiki.filter.xml.internal;
 
 import java.lang.reflect.Type;
+import java.net.URI;
+import java.net.URL;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -28,6 +30,7 @@
 import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.regex.Pattern;
@@ -48,7 +51,7 @@
     /**
      * The default mapping between interface and instance.
      */
-    private static final Map<Class<?>, Object> DEFAULTS = new HashMap<Class<?>, Object>();
+    private static final Map<Class<?>, Object> DEFAULTS = new HashMap<>();
 
     static {
         DEFAULTS.put(boolean.class, false);
@@ -63,13 +66,16 @@
         DEFAULTS.put(Set.class, new LinkedHashSet<Object>());
         DEFAULTS.put(List.class, new ArrayList<Object>());
         DEFAULTS.put(Collection.class, new ArrayList<Object>());
+        DEFAULTS.put(Locale.class, Locale.ROOT);
+        DEFAULTS.put(URI.class, null);
+        DEFAULTS.put(URL.class, null);
     }
 
     /**
      * The classes of object that can easily be converted to simple String.
      */
-    private static final Set<Class<?>> SIMPLECLASSES = new HashSet<Class<?>>(Arrays.<Class<?>>asList(
-        String.class, Character.class, Boolean.class, byte[].class));
+    private static final Set<Class<?>> SIMPLECLASSES = new HashSet<>(Arrays.<Class<?>>asList(String.class,
+        Character.class, Boolean.class, byte[].class, Locale.class, URL.class, URI.class));
 
     /**
      * Utility class.
@@ -89,9 +95,8 @@ public static boolean isSimpleType(Type type)
         if (type instanceof Class) {
             Class<?> typeClass = (Class<?>) type;
 
-            simpleType =
-                SIMPLECLASSES.contains(typeClass) || Number.class.isAssignableFrom(typeClass)
-                    || typeClass.isPrimitive() || typeClass.isEnum();
+            simpleType = SIMPLECLASSES.contains(typeClass) || Number.class.isAssignableFrom(typeClass)
+                || typeClass.isPrimitive() || typeClass.isEnum();
         }
 
         return simpleType;
diff --git a/xwiki-commons-core/xwiki-commons-groovy/pom.xml b/xwiki-commons-core/xwiki-commons-groovy/pom.xml
index 7d5e516..48e1976 100644
--- a/xwiki-commons-core/xwiki-commons-groovy/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-groovy/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-core</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-groovy</artifactId>
   <name>XWiki Commons - Groovy</name>
@@ -33,6 +33,9 @@
   <description>XWiki Commons - Groovy</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.94</xwiki.jacoco.instructionRatio>
+
+    <!-- Impersonate the old groovy-all module so that EM does not try to install it when hitting it as dependency of an extension -->
+    <xwiki.extension.features>org.codehaus.groovy:groovy-all</xwiki.extension.features>
   </properties>
   <dependencies>
     <dependency>
@@ -48,14 +51,58 @@
     <!-- Groovy engine -->
     <dependency>
       <groupId>org.codehaus.groovy</groupId>
-      <artifactId>groovy-all</artifactId>
+      <artifactId>groovy</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.codehaus.groovy</groupId>
+      <artifactId>groovy-datetime</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.codehaus.groovy</groupId>
+      <artifactId>groovy-jmx</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.codehaus.groovy</groupId>
+      <artifactId>groovy-json</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.codehaus.groovy</groupId>
+      <artifactId>groovy-jsr223</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.codehaus.groovy</groupId>
+      <artifactId>groovy-macro</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.codehaus.groovy</groupId>
+      <artifactId>groovy-nio</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.codehaus.groovy</groupId>
+      <artifactId>groovy-servlet</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.codehaus.groovy</groupId>
+      <artifactId>groovy-sql</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.codehaus.groovy</groupId>
+      <artifactId>groovy-templates</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.codehaus.groovy</groupId>
+      <artifactId>groovy-xml</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.codehaus.groovy</groupId>
+      <artifactId>groovy-dateutil</artifactId>
     </dependency>
-    <!-- Adding a dependency on Ivy since groovy-all only has an optional dependency on it and since we want to bundle
-         it so that XWiki users scripting in Groovy can use Grapes out of the box. -->
+    <!-- Adding a dependency on Ivy since the main groovy artifact POM only has an optional dependency on it and since
+         we want to bundle it so that XWiki users scripting in Groovy can use Grapes out of the box. -->
     <dependency>
       <groupId>org.apache.ivy</groupId>
       <artifactId>ivy</artifactId>
-      <version>2.3.0</version>
+      <version>2.4.0</version>
     </dependency>
     <!-- Test Dependencies -->
     <dependency>
diff --git a/xwiki-commons-core/xwiki-commons-groovy/src/test/java/org/xwiki/groovy/internal/TimedInterruptGroovyCompilationCustomizerTest.java b/xwiki-commons-core/xwiki-commons-groovy/src/test/java/org/xwiki/groovy/internal/TimedInterruptGroovyCompilationCustomizerTest.java
index 72db30c..f132ac6 100644
--- a/xwiki-commons-core/xwiki-commons-groovy/src/test/java/org/xwiki/groovy/internal/TimedInterruptGroovyCompilationCustomizerTest.java
+++ b/xwiki-commons-core/xwiki-commons-groovy/src/test/java/org/xwiki/groovy/internal/TimedInterruptGroovyCompilationCustomizerTest.java
@@ -67,7 +67,7 @@ public void executeWithTimedInterruptCustomizer() throws Exception
             engine.eval("while (true) {}");
             Assert.fail("Should have thrown an exception here");
         } catch (ScriptException e) {
-            Assert.assertTrue(e.getMessage().contains("Execution timed out after 1 units."));
+            Assert.assertTrue(e.getMessage().contains("Execution timed out after 1 seconds."));
         }
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-job/pom.xml b/xwiki-commons-core/xwiki-commons-job/pom.xml
index ecc51fb..dc9ae5f 100644
--- a/xwiki-commons-core/xwiki-commons-job/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-job/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-core</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-job</artifactId>
   <name>XWiki Commons - Job</name>
@@ -126,4 +126,22 @@
       </plugin>
     </plugins>
   </build>
+  <profiles>
+    <profile>
+      <id>quality</id>
+      <build>
+        <plugins>
+          <!-- pitest/descartes is currently failing on this module,
+               see https://github.com/STAMP-project/pitest-descartes/issues/51 -->
+          <plugin>
+            <groupId>org.pitest</groupId>
+            <artifactId>pitest-maven</artifactId>
+            <configuration>
+              <skip>true</skip>
+            </configuration>
+          </plugin>
+        </plugins>
+      </build>
+    </profile>
+  </profiles>
 </project>
diff --git a/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/AbstractJob.java b/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/AbstractJob.java
index 4b37648..bc457ac 100644
--- a/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/AbstractJob.java
+++ b/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/AbstractJob.java
@@ -313,6 +313,8 @@ protected R castRequest(Request request)
     }
 
     /**
+     * Create a new standard {@link JobStatus}. Jobs requiring a custom {@link JobStatus} should overwrite this method.
+     * 
      * @param request contains information related to the job to execute
      * @return the status of the job
      */
diff --git a/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/AbstractJobStatus.java b/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/AbstractJobStatus.java
index 08fd8ee..1aa5a43 100644
--- a/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/AbstractJobStatus.java
+++ b/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/AbstractJobStatus.java
@@ -25,6 +25,7 @@
 import java.util.concurrent.locks.Condition;
 import java.util.concurrent.locks.ReentrantLock;
 
+import org.xwiki.job.event.status.CancelableJobStatus;
 import org.xwiki.job.event.status.JobProgress;
 import org.xwiki.job.event.status.JobStatus;
 import org.xwiki.job.event.status.QuestionAnsweredEvent;
@@ -45,7 +46,7 @@
  * @version $Id$
  * @since 7.4M1
  */
-public abstract class AbstractJobStatus<R extends Request> implements JobStatus
+public abstract class AbstractJobStatus<R extends Request> implements JobStatus, CancelableJobStatus
 {
     /**
      * Used register itself to receive logging and progress related events.
@@ -136,6 +137,15 @@
     private boolean canceled;
 
     /**
+     * Flag indicating if the job can be canceled.
+     */
+    private boolean cancelable;
+
+    private boolean serialized = true;
+
+    private long quesionEnd = -1;
+
+    /**
      * @param request the request provided when started the job
      * @param parentJobStatus the status of the parent job (i.e. the status of the job that started this one); pass
      *            {@code null} if this job hasn't been started by another job (i.e. if this is not a sub-job)
@@ -291,7 +301,13 @@ public boolean ask(Object question, long time, TimeUnit unit) throws Interrupted
                     answered();
                 } else {
                     if (unit != null) {
+                        // Remember timeout
+                        this.quesionEnd = System.nanoTime() + unit.toNanos(time);
+
                         notTimeout = this.answered.await(time, unit);
+
+                        // Reset time left
+                        this.quesionEnd = -1;
                     } else {
                         this.answered.await();
                     }
@@ -306,6 +322,12 @@ public boolean ask(Object question, long time, TimeUnit unit) throws Interrupted
     }
 
     @Override
+    public long getQuestionTimeLeft(TimeUnit unit)
+    {
+        return quesionEnd > -1 ? this.quesionEnd - System.nanoTime() : -1;
+    }
+
+    @Override
     public Object getQuestion()
     {
         return this.question;
@@ -367,12 +389,12 @@ public boolean isSubJob()
         return getParentJobStatus() != null;
     }
 
-    /**
-     * @return true if the job log should be grabbed
-     */
+    @Override
     public boolean isIsolated()
     {
-        return this.isolated;
+        Boolean isolatedRequest = getRequest().isStatusLogIsolated();
+
+        return isolatedRequest != null ? isolatedRequest : this.isolated;
     }
 
     /**
@@ -392,31 +414,58 @@ public JobStatus getParentJobStatus()
         return this.parentJobStatus;
     }
 
-    // Deprecated
-
     @Override
-    @Deprecated
-    public List<LogEvent> getLog(LogLevel level)
+    public boolean isCancelable()
     {
-        return getLog().getLogs(level);
+        return this.cancelable;
     }
 
     /**
-     * Cancel the job.
-     *
+     * @param cancelable true if the job can be canceled
+     */
+    public void setCancelable(boolean cancelable)
+    {
+        this.cancelable = cancelable;
+    }
+
+    /**
+     * {@inheritDoc}
+     * 
+     * @see org.xwiki.job.event.status.CancelableJobStatus#cancel()
      * @since 9.4RC1
      */
+    @Override
     public void cancel()
     {
         this.canceled = true;
     }
 
     /**
-     * @return {@code true} if the job was canceled, {@code false} otherwise
+     * {@inheritDoc}
+     * 
+     * @see org.xwiki.job.event.status.CancelableJobStatus#isCanceled()
      * @since 9.4RC1
      */
+    @Override
     public boolean isCanceled()
     {
         return this.canceled;
     }
+
+    @Override
+    public boolean isSerialized()
+    {
+        Boolean serializdRequest = getRequest().isStatusSerialized();
+
+        return serializdRequest != null ? serializdRequest : this.serialized;
+    }
+
+    // Deprecated
+
+    @Override
+    @Deprecated
+    public List<LogEvent> getLog(LogLevel level)
+    {
+        return getLog().getLogs(level);
+    }
 }
diff --git a/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/AbstractRequest.java b/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/AbstractRequest.java
index f993500..11bcba5 100644
--- a/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/AbstractRequest.java
+++ b/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/AbstractRequest.java
@@ -26,6 +26,8 @@
 import java.util.List;
 import java.util.Map;
 
+import org.xwiki.job.event.status.JobStatus;
+
 /**
  * Base class for {@link Request} implementations.
  *
@@ -54,6 +56,10 @@
      */
     private boolean verbose = true;
 
+    private Boolean statusLogIsolated;
+
+    private Boolean statusSerialized;
+
     /**
      * Default constructor.
      */
@@ -195,4 +201,36 @@ public void setVerbose(boolean verbose)
     {
         this.verbose = verbose;
     }
+
+    @Override
+    public Boolean isStatusLogIsolated()
+    {
+        return this.statusLogIsolated;
+    }
+
+    /**
+     * @param statusLogIsolated true if the log should be isolated from standard output, null to fallback on
+     *            {@link JobStatus#isIsolated()}
+     * @since 10.0
+     */
+    public void setStatusLogIsolated(Boolean statusLogIsolated)
+    {
+        this.statusLogIsolated = statusLogIsolated;
+    }
+
+    @Override
+    public Boolean isStatusSerialized()
+    {
+        return this.statusSerialized;
+    }
+
+    /**
+     * @param statusSerialized true if the job status should be serialized, null to fallback on
+     *            {@link JobStatus#isSerialized()}
+     * @since 10.0
+     */
+    public void setStatusSerialized(Boolean statusSerialized)
+    {
+        this.statusSerialized = statusSerialized;
+    }
 }
diff --git a/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/Request.java b/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/Request.java
index 1aa6362..5eacab6 100644
--- a/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/Request.java
+++ b/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/Request.java
@@ -23,6 +23,8 @@
 import java.util.Collection;
 import java.util.List;
 
+import org.xwiki.job.event.status.JobStatus;
+
 /**
  * A {@link Job} request.
  *
@@ -91,4 +93,23 @@
      * @since 5.4RC1
      */
     boolean isVerbose();
+
+    /**
+     * @return true if the job status should be serialized, null to fallback on {@link JobStatus#isSerialized()}
+     * @since 10.0
+     */
+    default Boolean isStatusSerialized()
+    {
+        return null;
+    }
+
+    /**
+     * @return true if the log should be isolated from standard output, null to fallbacl on
+     *         {@link JobStatus#isIsolated()}
+     * @since 10.0
+     */
+    default Boolean isStatusLogIsolated()
+    {
+        return null;
+    }
 }
diff --git a/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/event/status/CancelableJobStatus.java b/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/event/status/CancelableJobStatus.java
new file mode 100644
index 0000000..bd46dcd
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/event/status/CancelableJobStatus.java
@@ -0,0 +1,47 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.job.event.status;
+
+import org.xwiki.stability.Unstable;
+
+/**
+ * The status of a job that can be canceled.
+ * 
+ * @version $Id$
+ * @since 10.2
+ */
+@Unstable
+public interface CancelableJobStatus extends JobStatus
+{
+    /**
+     * @return {@code true} if the job support being canceled
+     */
+    boolean isCancelable();
+
+    /**
+     * Cancel the job.
+     */
+    void cancel();
+
+    /**
+     * @return {@code true} if the job was canceled, {@code false} otherwise
+     */
+    boolean isCanceled();
+}
diff --git a/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/event/status/JobStatus.java b/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/event/status/JobStatus.java
index e770b6d..0e3756b 100644
--- a/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/event/status/JobStatus.java
+++ b/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/event/status/JobStatus.java
@@ -127,6 +127,16 @@ default boolean ask(Object question, long time, TimeUnit unit) throws Interrupte
     }
 
     /**
+     * @param unit the time unit of the returned value
+     * @return the time left before the question timeout
+     * @since 10.2
+     */
+    default long getQuestionTimeLeft(TimeUnit unit)
+    {
+        return -1;
+    }
+
+    /**
      * @return the question
      * @since 4.0M2
      */
@@ -149,6 +159,24 @@ default boolean ask(Object question, long time, TimeUnit unit) throws Interrupte
      */
     Date getEndDate();
 
+    /**
+     * @return true if the job status should be serialized
+     * @since 10.0
+     */
+    default boolean isSerialized()
+    {
+        return true;
+    }
+
+    /**
+     * @return true if the log should be isolated from standard output
+     * @since 10.0
+     */
+    default boolean isIsolated()
+    {
+        return true;
+    }
+
     // Deprecated
 
     /**
diff --git a/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/internal/DefaultJobStatusStore.java b/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/internal/DefaultJobStatusStore.java
index 25fe4d1..656fd53 100644
--- a/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/internal/DefaultJobStatusStore.java
+++ b/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/internal/DefaultJobStatusStore.java
@@ -309,6 +309,8 @@ private void saveJobStatus(JobStatus status)
             File statusFile = getJobFolder(status.getRequest().getId());
             statusFile = new File(statusFile, FILENAME_STATUS);
 
+            this.logger.debug("Serializing status [{}] in [{}]", status.getRequest().getId(), statusFile);
+
             this.serializer.write(status, statusFile);
         } catch (Exception e) {
             this.logger.warn("Failed to save job status [{}]", status, e);
@@ -364,11 +366,16 @@ private void store(JobStatus status, boolean async)
     {
         if (status != null && status.getRequest() != null && status.getRequest().getId() != null) {
             synchronized (this.cache) {
-                this.cache.set(toUniqueString(status.getRequest().getId()), status);
+                String id = toUniqueString(status.getRequest().getId());
+
+                this.logger.debug("Store status [{}] in cache", id);
+
+                this.cache.set(id, status);
             }
 
             // Only store Serializable job status on file system
-            if (status.getClass().isAnnotationPresent(Serializable.class) || status instanceof java.io.Serializable) {
+            if (status.isSerialized() && status.getClass().isAnnotationPresent(Serializable.class)
+                || status instanceof java.io.Serializable) {
                 if (async) {
                     this.executorService.execute(new JobStatusSerializerRunnable(status));
                 } else {
diff --git a/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/internal/JobStatusSerializer.java b/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/internal/JobStatusSerializer.java
index b5f42da..aee79a8 100644
--- a/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/internal/JobStatusSerializer.java
+++ b/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/internal/JobStatusSerializer.java
@@ -25,13 +25,13 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.io.OutputStreamWriter;
+import java.nio.file.FileAlreadyExistsException;
 import java.nio.file.Files;
 import java.nio.file.StandardCopyOption;
 
 import javax.xml.parsers.ParserConfigurationException;
 
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.io.IOUtils;
 import org.xwiki.job.event.status.JobStatus;
 import org.xwiki.job.internal.xstream.SafeXStream;
 
@@ -74,17 +74,28 @@ public void write(JobStatus status, File file) throws IOException
     {
         File tempFile = File.createTempFile(file.getName(), ".tmp");
 
-        FileOutputStream stream = FileUtils.openOutputStream(tempFile);
-
-        try {
+        try (FileOutputStream stream = FileUtils.openOutputStream(tempFile)) {
             write(status, stream);
-        } finally {
-            IOUtils.closeQuietly(stream);
         }
 
         // Copy the file to its final destination
         file.mkdirs();
-        Files.move(tempFile.toPath(), file.toPath(), StandardCopyOption.REPLACE_EXISTING);
+        for (int i = 0; i < 10; ++i) {
+            try {
+                Files.move(tempFile.toPath(), file.toPath(), StandardCopyOption.REPLACE_EXISTING);
+
+                // Stop the retry loop if it succeeded
+                break;
+            } catch (FileAlreadyExistsException e) {
+                // Yes it sounds pretty weird but it can happen so we try 10 times before giving up
+                // Wait a bit before retrying
+                try {
+                    Thread.sleep(1000);
+                } catch (InterruptedException ei) {
+                    throw e;
+                }
+            }
+        }
     }
 
     /**
diff --git a/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/internal/script/safe/JobStatusScriptSafeProvider.java b/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/internal/script/safe/JobStatusScriptSafeProvider.java
index 140def3..533dc8f 100644
--- a/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/internal/script/safe/JobStatusScriptSafeProvider.java
+++ b/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/internal/script/safe/JobStatusScriptSafeProvider.java
@@ -23,6 +23,7 @@
 import javax.inject.Singleton;
 
 import org.xwiki.component.annotation.Component;
+import org.xwiki.job.event.status.CancelableJobStatus;
 import org.xwiki.job.event.status.JobStatus;
 import org.xwiki.script.internal.safe.ScriptSafeProvider;
 
@@ -46,6 +47,10 @@
     @Override
     public <S> S get(JobStatus unsafe)
     {
+        if (unsafe instanceof CancelableJobStatus) {
+            return (S) new SafeCancelableJobStatus((CancelableJobStatus) unsafe, this.defaultSafeProvider);
+        }
+
         return (S) new SafeJobStatus(unsafe, this.defaultSafeProvider);
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/internal/script/safe/SafeCancelableJobStatus.java b/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/internal/script/safe/SafeCancelableJobStatus.java
new file mode 100644
index 0000000..37b60aa
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/internal/script/safe/SafeCancelableJobStatus.java
@@ -0,0 +1,61 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.job.internal.script.safe;
+
+import org.xwiki.job.event.status.CancelableJobStatus;
+import org.xwiki.script.internal.safe.ScriptSafeProvider;
+
+/**
+ * Provide a public script access to a cancelable job status.
+ * 
+ * @param <J>
+ * @version $Id$
+ * @since 10.2
+ */
+public class SafeCancelableJobStatus<J extends CancelableJobStatus> extends SafeJobStatus<J>
+    implements CancelableJobStatus
+{
+    /**
+     * @param status the wrapped job status
+     * @param safeProvider the provider of instances safe for public scripts
+     */
+    public SafeCancelableJobStatus(J status, ScriptSafeProvider<?> safeProvider)
+    {
+        super(status, safeProvider);
+    }
+
+    @Override
+    public boolean isCancelable()
+    {
+        return getWrapped().isCancelable();
+    }
+
+    @Override
+    public void cancel()
+    {
+        // Don't allow anyone to cancel a job
+    }
+
+    @Override
+    public boolean isCanceled()
+    {
+        return getWrapped().isCanceled();
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/internal/script/safe/SafeJobStatus.java b/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/internal/script/safe/SafeJobStatus.java
index 8aaa99f..24511c6 100644
--- a/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/internal/script/safe/SafeJobStatus.java
+++ b/xwiki-commons-core/xwiki-commons-job/src/main/java/org/xwiki/job/internal/script/safe/SafeJobStatus.java
@@ -121,4 +121,16 @@ public Date getEndDate()
     {
         return getWrapped().getEndDate();
     }
+
+    @Override
+    public boolean isIsolated()
+    {
+        return getWrapped().isIsolated();
+    }
+
+    @Override
+    public boolean isSerialized()
+    {
+        return getWrapped().isSerialized();
+    }
 }
diff --git a/xwiki-commons-core/xwiki-commons-job/src/main/resources/ApplicationResources.properties b/xwiki-commons-core/xwiki-commons-job/src/main/resources/ApplicationResources.properties
index 5205140..4f6bab0 100644
--- a/xwiki-commons-core/xwiki-commons-job/src/main/resources/ApplicationResources.properties
+++ b/xwiki-commons-core/xwiki-commons-job/src/main/resources/ApplicationResources.properties
@@ -52,4 +52,4 @@ job.log.beginWithId=Starting job of type [{0}] with identifier [{1}]
 job.log.end=Finished job of type [{0}]
 job.log.endWithId=Finished job of type [{0}] with identifier [{1}]
 
-job.log.label=Job log
\ No newline at end of file
+job.log.label=Job log
diff --git a/xwiki-commons-core/xwiki-commons-job/src/main/resources/ApplicationResources_da.properties b/xwiki-commons-core/xwiki-commons-job/src/main/resources/ApplicationResources_da.properties
index 28490e5..e971a12 100644
--- a/xwiki-commons-core/xwiki-commons-job/src/main/resources/ApplicationResources_da.properties
+++ b/xwiki-commons-core/xwiki-commons-job/src/main/resources/ApplicationResources_da.properties
@@ -1,6 +1,55 @@
-## XWiki Translation for language da generated from http://www.l10n.xwiki.org
+# ---------------------------------------------------------------------------
+# See the NOTICE file distributed with this work for additional
+# information regarding copyright ownership.
+#
+# This is free software; you can redistribute it and/or modify it
+# under the terms of the GNU Lesser General Public License as
+# published by the Free Software Foundation; either version 2.1 of
+# the License, or (at your option) any later version.
+#
+# This software is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this software; if not, write to the Free
+# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+# 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+# ---------------------------------------------------------------------------
+
+###############################################################################
+# This contains the translations of the module in the default language
+# (generally English).
+#
+# Translation key syntax:
+#   <short top level project name>.<short module name>.<propertyName>
+#   where:
+#   * <short top level project name> = top level project name without the "xwiki-" prefix,
+#                                     for example: commons, rendering, platform, enterprise, manager, etc
+#   * <short module name> = the name of the Maven module without the <short top level project name> prefix,
+#                           for example: oldcore, scheduler, activitystream, etc
+#   * <propertyName> = the name of the property using camel case,
+#                      for example updateJobClassCommitComment
+#
+# Comments: it's possible to add some detail about a key to make easier to
+#   translate it by adding a comment before it. To make sure a comment is not
+#   assigned to the following key use at least three sharps (###) for the comment
+#   or after it.
+#
+# Deprecated keys:
+#   * when deleting a key it should be moved to deprecated section at the end
+#     of the file (between #@deprecatedstart and #@deprecatedend) and associated to the
+#     first version in which it started to be deprecated
+#   * when renaming a key, it should be moved to the same deprecated section
+#     and a comment should be added with the following syntax:
+#     #@deprecated new.key.name
+#     old.key.name=Some translation
+###############################################################################
+
 job.log.begin=Starter et job af typen [{0}]
 job.log.beginWithId=Starter et job af typen [{0}] med id [{1}]
 job.log.end=Afslutter et job af typen  [{0}]
 job.log.endWithId=Afslutter et job af typen  [{0}] med id [{1}]
+
 job.log.label=Joblog
diff --git a/xwiki-commons-core/xwiki-commons-job/src/main/resources/ApplicationResources_de.properties b/xwiki-commons-core/xwiki-commons-job/src/main/resources/ApplicationResources_de.properties
index 0af0cc8..d203c5d 100644
--- a/xwiki-commons-core/xwiki-commons-job/src/main/resources/ApplicationResources_de.properties
+++ b/xwiki-commons-core/xwiki-commons-job/src/main/resources/ApplicationResources_de.properties
@@ -1,3 +1,55 @@
-## XWiki Translation for language de generated from http://www.l10n.xwiki.org
+# ---------------------------------------------------------------------------
+# See the NOTICE file distributed with this work for additional
+# information regarding copyright ownership.
+#
+# This is free software; you can redistribute it and/or modify it
+# under the terms of the GNU Lesser General Public License as
+# published by the Free Software Foundation; either version 2.1 of
+# the License, or (at your option) any later version.
+#
+# This software is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this software; if not, write to the Free
+# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+# 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+# ---------------------------------------------------------------------------
+
+###############################################################################
+# This contains the translations of the module in the default language
+# (generally English).
+#
+# Translation key syntax:
+#   <short top level project name>.<short module name>.<propertyName>
+#   where:
+#   * <short top level project name> = top level project name without the "xwiki-" prefix,
+#                                     for example: commons, rendering, platform, enterprise, manager, etc
+#   * <short module name> = the name of the Maven module without the <short top level project name> prefix,
+#                           for example: oldcore, scheduler, activitystream, etc
+#   * <propertyName> = the name of the property using camel case,
+#                      for example updateJobClassCommitComment
+#
+# Comments: it's possible to add some detail about a key to make easier to
+#   translate it by adding a comment before it. To make sure a comment is not
+#   assigned to the following key use at least three sharps (###) for the comment
+#   or after it.
+#
+# Deprecated keys:
+#   * when deleting a key it should be moved to deprecated section at the end
+#     of the file (between #@deprecatedstart and #@deprecatedend) and associated to the
+#     first version in which it started to be deprecated
+#   * when renaming a key, it should be moved to the same deprecated section
+#     and a comment should be added with the following syntax:
+#     #@deprecated new.key.name
+#     old.key.name=Some translation
+###############################################################################
+
 job.log.begin=Proze\u00DF der Art [{0}] wird gestartet
+### Missing: job.log.beginWithId=Starting job of type [{0}] with identifier [{1}]
 job.log.end=Proze\u00DF der Art [{0}] ist beendet
+### Missing: job.log.endWithId=Finished job of type [{0}] with identifier [{1}]
+
+job.log.label=Proze\u00DFhistorie
diff --git a/xwiki-commons-core/xwiki-commons-job/src/main/resources/ApplicationResources_fr.properties b/xwiki-commons-core/xwiki-commons-job/src/main/resources/ApplicationResources_fr.properties
index 61bae6d..6c97d2f 100644
--- a/xwiki-commons-core/xwiki-commons-job/src/main/resources/ApplicationResources_fr.properties
+++ b/xwiki-commons-core/xwiki-commons-job/src/main/resources/ApplicationResources_fr.properties
@@ -1,6 +1,55 @@
-## XWiki Translation for language fr generated from http://www.l10n.xwiki.org
+# ---------------------------------------------------------------------------
+# See the NOTICE file distributed with this work for additional
+# information regarding copyright ownership.
+#
+# This is free software; you can redistribute it and/or modify it
+# under the terms of the GNU Lesser General Public License as
+# published by the Free Software Foundation; either version 2.1 of
+# the License, or (at your option) any later version.
+#
+# This software is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this software; if not, write to the Free
+# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+# 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+# ---------------------------------------------------------------------------
+
+###############################################################################
+# This contains the translations of the module in the default language
+# (generally English).
+#
+# Translation key syntax:
+#   <short top level project name>.<short module name>.<propertyName>
+#   where:
+#   * <short top level project name> = top level project name without the "xwiki-" prefix,
+#                                     for example: commons, rendering, platform, enterprise, manager, etc
+#   * <short module name> = the name of the Maven module without the <short top level project name> prefix,
+#                           for example: oldcore, scheduler, activitystream, etc
+#   * <propertyName> = the name of the property using camel case,
+#                      for example updateJobClassCommitComment
+#
+# Comments: it's possible to add some detail about a key to make easier to
+#   translate it by adding a comment before it. To make sure a comment is not
+#   assigned to the following key use at least three sharps (###) for the comment
+#   or after it.
+#
+# Deprecated keys:
+#   * when deleting a key it should be moved to deprecated section at the end
+#     of the file (between #@deprecatedstart and #@deprecatedend) and associated to the
+#     first version in which it started to be deprecated
+#   * when renaming a key, it should be moved to the same deprecated section
+#     and a comment should be added with the following syntax:
+#     #@deprecated new.key.name
+#     old.key.name=Some translation
+###############################################################################
+
 job.log.begin=D\u00E9marrage de la t\u00E2che de type [{0}]
 job.log.beginWithId=D\u00E9marrage de la t\u00E2che de type [{0}] portant l''identifiant [{1}]
 job.log.end=T\u00E2che de type [{0}] termin\u00E9e
 job.log.endWithId=T\u00E2che de type [{0}] portant l''identifiant [{1}] termin\u00E9e
+
 job.log.label=Journal de la t\u00E2che
diff --git a/xwiki-commons-core/xwiki-commons-job/src/main/resources/ApplicationResources_hr.properties b/xwiki-commons-core/xwiki-commons-job/src/main/resources/ApplicationResources_hr.properties
index 800c3c5..8243376 100644
--- a/xwiki-commons-core/xwiki-commons-job/src/main/resources/ApplicationResources_hr.properties
+++ b/xwiki-commons-core/xwiki-commons-job/src/main/resources/ApplicationResources_hr.properties
@@ -1,6 +1,55 @@
-## XWiki Translation for language hr generated from http://www.l10n.xwiki.org
+# ---------------------------------------------------------------------------
+# See the NOTICE file distributed with this work for additional
+# information regarding copyright ownership.
+#
+# This is free software; you can redistribute it and/or modify it
+# under the terms of the GNU Lesser General Public License as
+# published by the Free Software Foundation; either version 2.1 of
+# the License, or (at your option) any later version.
+#
+# This software is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this software; if not, write to the Free
+# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+# 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+# ---------------------------------------------------------------------------
+
+###############################################################################
+# This contains the translations of the module in the default language
+# (generally English).
+#
+# Translation key syntax:
+#   <short top level project name>.<short module name>.<propertyName>
+#   where:
+#   * <short top level project name> = top level project name without the "xwiki-" prefix,
+#                                     for example: commons, rendering, platform, enterprise, manager, etc
+#   * <short module name> = the name of the Maven module without the <short top level project name> prefix,
+#                           for example: oldcore, scheduler, activitystream, etc
+#   * <propertyName> = the name of the property using camel case,
+#                      for example updateJobClassCommitComment
+#
+# Comments: it's possible to add some detail about a key to make easier to
+#   translate it by adding a comment before it. To make sure a comment is not
+#   assigned to the following key use at least three sharps (###) for the comment
+#   or after it.
+#
+# Deprecated keys:
+#   * when deleting a key it should be moved to deprecated section at the end
+#     of the file (between #@deprecatedstart and #@deprecatedend) and associated to the
+#     first version in which it started to be deprecated
+#   * when renaming a key, it should be moved to the same deprecated section
+#     and a comment should be added with the following syntax:
+#     #@deprecated new.key.name
+#     old.key.name=Some translation
+###############################################################################
+
 job.log.begin=Zapo\u010Dinje posao tipa [{0}]
 job.log.beginWithId=Zapo\u010Dinje posao tipa [{0}] s identifikatorom [{1}]
 job.log.end=Zavr\u0161etak posla tipa [{0}]
 job.log.endWithId=Zavr\u0161etak posla tipa [{0}] s identifikatorom [{1}]
+
 job.log.label=Dnevnik posla
diff --git a/xwiki-commons-core/xwiki-commons-job/src/main/resources/ApplicationResources_lv.properties b/xwiki-commons-core/xwiki-commons-job/src/main/resources/ApplicationResources_lv.properties
index d36599d..b347606 100644
--- a/xwiki-commons-core/xwiki-commons-job/src/main/resources/ApplicationResources_lv.properties
+++ b/xwiki-commons-core/xwiki-commons-job/src/main/resources/ApplicationResources_lv.properties
@@ -1,6 +1,55 @@
-## XWiki Translation for language lv generated from http://www.l10n.xwiki.org
+# ---------------------------------------------------------------------------
+# See the NOTICE file distributed with this work for additional
+# information regarding copyright ownership.
+#
+# This is free software; you can redistribute it and/or modify it
+# under the terms of the GNU Lesser General Public License as
+# published by the Free Software Foundation; either version 2.1 of
+# the License, or (at your option) any later version.
+#
+# This software is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this software; if not, write to the Free
+# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+# 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+# ---------------------------------------------------------------------------
+
+###############################################################################
+# This contains the translations of the module in the default language
+# (generally English).
+#
+# Translation key syntax:
+#   <short top level project name>.<short module name>.<propertyName>
+#   where:
+#   * <short top level project name> = top level project name without the "xwiki-" prefix,
+#                                     for example: commons, rendering, platform, enterprise, manager, etc
+#   * <short module name> = the name of the Maven module without the <short top level project name> prefix,
+#                           for example: oldcore, scheduler, activitystream, etc
+#   * <propertyName> = the name of the property using camel case,
+#                      for example updateJobClassCommitComment
+#
+# Comments: it's possible to add some detail about a key to make easier to
+#   translate it by adding a comment before it. To make sure a comment is not
+#   assigned to the following key use at least three sharps (###) for the comment
+#   or after it.
+#
+# Deprecated keys:
+#   * when deleting a key it should be moved to deprecated section at the end
+#     of the file (between #@deprecatedstart and #@deprecatedend) and associated to the
+#     first version in which it started to be deprecated
+#   * when renaming a key, it should be moved to the same deprecated section
+#     and a comment should be added with the following syntax:
+#     #@deprecated new.key.name
+#     old.key.name=Some translation
+###############################################################################
+
 job.log.begin=S\u0101ku [{0}] veida darbu
-job.log.beginWithId=S\u0101ku [{0}] veida darbu ar identifikatoru [{1}] 
+job.log.beginWithId=S\u0101ku [{0}] veida darbu ar identifikatoru [{1}]
 job.log.end=Beidzu [{0}] veida darbu
-job.log.endWithId=Beidzu [{0}] darbu ar identifikatoru [{0}] 
+job.log.endWithId=Beidzu [{0}] darbu ar identifikatoru [{0}]
+
 job.log.label=Darbu \u017Eurn\u0101ls
diff --git a/xwiki-commons-core/xwiki-commons-job/src/test/java/org/xwiki/job/internal/DefaultJobExecutorTest.java b/xwiki-commons-core/xwiki-commons-job/src/test/java/org/xwiki/job/internal/DefaultJobExecutorTest.java
index 7c58232..3e261ba 100644
--- a/xwiki-commons-core/xwiki-commons-job/src/test/java/org/xwiki/job/internal/DefaultJobExecutorTest.java
+++ b/xwiki-commons-core/xwiki-commons-job/src/test/java/org/xwiki/job/internal/DefaultJobExecutorTest.java
@@ -21,48 +21,68 @@
 
 import java.util.Arrays;
 
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.xwiki.component.internal.ContextComponentManagerProvider;
-import org.xwiki.component.manager.ComponentLookupException;
 import org.xwiki.job.DefaultRequest;
-import org.xwiki.job.JobExecutor;
+import org.xwiki.job.Job;
 import org.xwiki.job.JobGroupPath;
 import org.xwiki.job.event.status.JobStatus.State;
 import org.xwiki.job.test.TestBasicGroupedJob;
 import org.xwiki.test.annotation.ComponentList;
-import org.xwiki.test.mockito.MockitoComponentMockingRule;
+import org.xwiki.test.junit5.mockito.ComponentTest;
+import org.xwiki.test.junit5.mockito.InjectMockComponents;
 
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertSame;
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertSame;
+import static org.junit.jupiter.api.Assertions.fail;
 
 /**
  * Validate {@link DefaultJobExecutor};
  * 
  * @version $Id$
  */
+@ComponentTest
 @ComponentList(ContextComponentManagerProvider.class)
 public class DefaultJobExecutorTest
 {
-    @Rule
-    public MockitoComponentMockingRule<JobExecutor> mocker =
-        new MockitoComponentMockingRule<JobExecutor>(DefaultJobExecutor.class);
+    @InjectMockComponents
+    private DefaultJobExecutor executor;
 
-    @Before
-    public void before() throws Exception
+    private void waitJobWaiting(Job job)
     {
+        waitJobState(State.WAITING, job);
     }
 
-    private TestBasicGroupedJob groupedJob(String... path)
+    private void waitJobFinished(Job job)
     {
-        return new TestBasicGroupedJob("type", new JobGroupPath(Arrays.asList(path)), new DefaultRequest());
+        waitJobState(State.FINISHED, job);
     }
 
-    // Tests
+    private void waitJobState(State expected, Job job)
+    {
+        int wait = 0;
+
+        do {
+            if (expected == job.getStatus().getState()) {
+                return;
+            }
+
+            // Wait a bit
+            try {
+                Thread.sleep(1);
+            } catch (InterruptedException e) {
+                fail("Job state monitor has been interrupted");
+            }
+
+            wait += 1;
+        } while (wait < 100);
+
+        fail("Job never reached expected state [" + expected + "]. Still [" + job.getStatus().getState()
+            + "] after 100 milliseconds");
+    }
 
     @Test
-    public void testMatchingGroupPathAreBlocked() throws ComponentLookupException, InterruptedException
+    public void matchingGroupPathAreBlocked()
     {
         TestBasicGroupedJob jobA = groupedJob("A");
         TestBasicGroupedJob jobAB = groupedJob("A", "B");
@@ -76,22 +96,18 @@ public void testMatchingGroupPathAreBlocked() throws ComponentLookupException, I
         job12.lock();
         job1.lock();
 
-        // Give all jobs to JobExecutor
-        this.mocker.getComponentUnderTest().execute(jobA);
-        // Give enough time for the job to be fully taken into account
-        Thread.sleep(10);
-
-        this.mocker.getComponentUnderTest().execute(jobAB);
-        // Give enough time for the job to be fully taken into account
-        Thread.sleep(10);
+        // Give first jobs to JobExecutor
+        this.executor.execute(jobA);
+        this.executor.execute(job12);
 
-        this.mocker.getComponentUnderTest().execute(job12);
-        // Give enough time for the job to be fully taken into account
-        Thread.sleep(10);
+        // Give enough time for the jobs to be fully taken into account
+        waitJobWaiting(jobA);
+        waitJobWaiting(job12);
 
-        this.mocker.getComponentUnderTest().execute(job1);
-        // Give enough time for the job to be fully taken into account
-        Thread.sleep(10);
+        // Give following jobs to JobExecutor (to make sure they are actually after since the grouped job executor queue
+        // is not "fair")
+        this.executor.execute(jobAB);
+        this.executor.execute(job1);
 
         ////////////////////
         // A and A/B
@@ -101,14 +117,14 @@ public void testMatchingGroupPathAreBlocked() throws ComponentLookupException, I
 
         // Next job
         jobA.unlock();
-        Thread.sleep(10);
+        waitJobWaiting(jobAB);
 
         assertSame(State.FINISHED, jobA.getStatus().getState());
         assertSame(State.WAITING, jobAB.getStatus().getState());
 
         // Next job
         jobAB.unlock();
-        Thread.sleep(10);
+        waitJobFinished(jobAB);
 
         assertSame(State.FINISHED, jobA.getStatus().getState());
         assertSame(State.FINISHED, jobAB.getStatus().getState());
@@ -121,16 +137,21 @@ public void testMatchingGroupPathAreBlocked() throws ComponentLookupException, I
 
         // Next job
         job12.unlock();
-        Thread.sleep(10);
+        waitJobWaiting(job1);
 
         assertSame(State.FINISHED, job12.getStatus().getState());
         assertSame(State.WAITING, job1.getStatus().getState());
 
         // Next job
         job1.unlock();
-        Thread.sleep(10);
+        waitJobFinished(job1);
 
         assertSame(State.FINISHED, job1.getStatus().getState());
         assertSame(State.FINISHED, job1.getStatus().getState());
     }
+
+    private TestBasicGroupedJob groupedJob(String... path)
+    {
+        return new TestBasicGroupedJob("type", new JobGroupPath(Arrays.asList(path)), new DefaultRequest());
+    }
 }
diff --git a/xwiki-commons-core/xwiki-commons-job/src/test/java/org/xwiki/job/test/TestBasicGroupedJob.java b/xwiki-commons-core/xwiki-commons-job/src/test/java/org/xwiki/job/test/TestBasicGroupedJob.java
index 0da87a5..2cb70ec 100644
--- a/xwiki-commons-core/xwiki-commons-job/src/test/java/org/xwiki/job/test/TestBasicGroupedJob.java
+++ b/xwiki-commons-core/xwiki-commons-job/src/test/java/org/xwiki/job/test/TestBasicGroupedJob.java
@@ -189,6 +189,20 @@ public Date getEndDate()
     }
 
     @Override
+    public boolean isIsolated()
+    {
+        // Not implemented
+        return true;
+    }
+
+    @Override
+    public boolean isSerialized()
+    {
+        // Not implemented
+        return true;
+    }
+
+    @Override
     @Deprecated
     public List<LogEvent> getLog(LogLevel level)
     {
diff --git a/xwiki-commons-core/xwiki-commons-legacy/pom.xml b/xwiki-commons-core/xwiki-commons-legacy/pom.xml
index 8791bfe..b27bb3a 100644
--- a/xwiki-commons-core/xwiki-commons-legacy/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-legacy/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-core</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-legacy</artifactId>
   <name>XWiki Commons - Legacy</name>
@@ -39,6 +39,7 @@
     <module>xwiki-commons-legacy-component</module>
     <module>xwiki-commons-legacy-configuration</module>
     <module>xwiki-commons-legacy-properties</module>
+    <module>xwiki-commons-legacy-velocity</module>
   </modules>
   <dependencies>
     <!-- Needed for backward compatibility Aspects -->
diff --git a/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-component/pom.xml b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-component/pom.xml
index 9a94624..896108a 100644
--- a/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-component/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-component/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-legacy</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-legacy-component</artifactId>
   <name>XWiki Commons - Legacy - Component - Parent POM</name>
diff --git a/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-component/xwiki-commons-legacy-component-api/pom.xml b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-component/xwiki-commons-legacy-component-api/pom.xml
index 2067e4e..6ea6e10 100644
--- a/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-component/xwiki-commons-legacy-component-api/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-component/xwiki-commons-legacy-component-api/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-legacy-component</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-legacy-component-api</artifactId>
   <name>XWiki Commons - Legacy - Component - API</name>
diff --git a/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-component/xwiki-commons-legacy-component-default/pom.xml b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-component/xwiki-commons-legacy-component-default/pom.xml
index 5df8ec5..57cdacd 100644
--- a/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-component/xwiki-commons-legacy-component-default/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-component/xwiki-commons-legacy-component-default/pom.xml
@@ -25,14 +25,15 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-legacy-component</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-legacy-component-default</artifactId>
   <name>XWiki Commons - Legacy - Component - Default Implementation</name>
   <packaging>jar</packaging>
   <description>Legacy module for xwiki-commons-component-default</description>
   <properties>
-    <xwiki.jacoco.instructionRatio>0.25</xwiki.jacoco.instructionRatio>
+    <xwiki.jacoco.instructionRatio>0.22</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>7</xwiki.pitest.mutationThreshold>
     <!-- The features provided by this module so that it's found when resolving extension -->
     <xwiki.extension.features>org.xwiki.commons:xwiki-commons-component-default</xwiki.extension.features>
   </properties>
diff --git a/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-component/xwiki-commons-legacy-component-default/src/main/aspect/org/xwiki/component/embed/EmbeddableComponentManagerCompatibilityAspect.aj b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-component/xwiki-commons-legacy-component-default/src/main/aspect/org/xwiki/component/embed/EmbeddableComponentManagerCompatibilityAspect.aj
index f06dbe7..bbb7fd2 100644
--- a/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-component/xwiki-commons-legacy-component-default/src/main/aspect/org/xwiki/component/embed/EmbeddableComponentManagerCompatibilityAspect.aj
+++ b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-component/xwiki-commons-legacy-component-default/src/main/aspect/org/xwiki/component/embed/EmbeddableComponentManagerCompatibilityAspect.aj
@@ -19,13 +19,11 @@
  */
 package org.xwiki.component.embed;
 
-import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.lang.reflect.Type;
 
 import org.xwiki.component.descriptor.ComponentDescriptor;
-import org.xwiki.component.internal.RoleHint;
 import org.xwiki.component.manager.ComponentLookupException;
 
 /**
diff --git a/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-configuration/pom.xml b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-configuration/pom.xml
index adced18..7611dbb 100644
--- a/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-configuration/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-configuration/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-legacy</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-legacy-configuration</artifactId>
   <name>XWiki Commons - Legacy - Configuration</name>
diff --git a/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-properties/pom.xml b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-properties/pom.xml
index d267ad7..f4cd2de 100644
--- a/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-properties/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-properties/pom.xml
@@ -25,14 +25,15 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-legacy</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-legacy-properties</artifactId>
-  <name>XWiki Commons - Properties</name>
+  <name>XWiki Commons - Legacy - Properties</name>
   <packaging>jar</packaging>
-  <description>XWiki Commons - Properties</description>
+  <description>XWiki Commons - Legacy - Properties</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.55</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>59</xwiki.pitest.mutationThreshold>
   </properties>
   <dependencies>
     <dependency>
@@ -52,7 +53,6 @@
       <artifactId>xwiki-commons-legacy-component-api</artifactId>
       <version>${project.version}</version>
     </dependency>
-
     <!-- Tests dependencies -->
     <dependency>
       <groupId>org.xwiki.commons</groupId>
diff --git a/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/pom.xml b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/pom.xml
new file mode 100644
index 0000000..9d6e71a
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/pom.xml
@@ -0,0 +1,73 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+-->
+
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <parent>
+    <groupId>org.xwiki.commons</groupId>
+    <artifactId>xwiki-commons-legacy</artifactId>
+    <version>10.9-SNAPSHOT</version>
+  </parent>
+  <artifactId>xwiki-commons-legacy-velocity</artifactId>
+  <name>XWiki Commons - Legacy - Velocity</name>
+  <packaging>jar</packaging>
+  <description>XWiki Commons - Legacy - Velocity</description>
+  <properties>
+    <xwiki.jacoco.instructionRatio>0.70</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>73</xwiki.pitest.mutationThreshold>
+  </properties>
+  <dependencies>
+    <dependency>
+      <groupId>org.xwiki.commons</groupId>
+      <artifactId>xwiki-commons-velocity</artifactId>
+      <version>${project.version}</version>
+      <!-- Trigger legacy version -->
+      <exclusions>
+        <exclusion>
+          <groupId>org.xwiki.commons</groupId>
+          <artifactId>xwiki-commons-component-api</artifactId>
+        </exclusion>
+      </exclusions>
+    </dependency>
+    <dependency>
+      <groupId>org.xwiki.commons</groupId>
+      <artifactId>xwiki-commons-legacy-component-api</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+
+    <!-- Tests dependencies -->
+    <dependency>
+      <groupId>org.xwiki.commons</groupId>
+      <artifactId>xwiki-commons-tool-test-component</artifactId>
+      <version>${project.version}</version>
+      <scope>test</scope>
+      <exclusions>
+        <!-- Trigger legacy version -->
+        <exclusion>
+          <groupId>org.xwiki.commons</groupId>
+          <artifactId>xwiki-commons-component-api</artifactId>
+        </exclusion>
+      </exclusions>
+    </dependency>
+  </dependencies>
+</project>
+       
diff --git a/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/main/java/org/xwiki/velocity/introspection/AbstractChainableUberspector.java b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/main/java/org/xwiki/velocity/introspection/AbstractChainableUberspector.java
new file mode 100644
index 0000000..0a41406
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/main/java/org/xwiki/velocity/introspection/AbstractChainableUberspector.java
@@ -0,0 +1,48 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.velocity.introspection;
+
+/**
+ * Default implementation of a {@link ChainableUberspector chainable uberspector} that forwards all calls to the wrapped
+ * uberspector (when that is possible). It should be used as the base class for all chainable uberspectors.
+ *
+ * @version $Id$
+ * @since 1.5M1
+ * @see ChainableUberspector
+ * @deprecated since 8.0M1; this is now part of the official Velocity library, use
+ *             {@link org.apache.velocity.util.introspection.AbstractChainableUberspector} instead
+ */
+@Deprecated
+public abstract class AbstractChainableUberspector
+    extends org.apache.velocity.util.introspection.AbstractChainableUberspector implements ChainableUberspector
+{
+    @Override
+    public void init()
+    {
+        // This method is kept because the version in Velocity 1.7 doesn't catch exceptions
+        if (this.inner != null) {
+            try {
+                this.inner.init();
+            } catch (Exception e) {
+                this.log.error(e.getMessage(), e);
+            }
+        }
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/main/java/org/xwiki/velocity/introspection/ChainableUberspector.java b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/main/java/org/xwiki/velocity/introspection/ChainableUberspector.java
new file mode 100644
index 0000000..8be3f16
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/main/java/org/xwiki/velocity/introspection/ChainableUberspector.java
@@ -0,0 +1,35 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.velocity.introspection;
+
+/**
+ * Interface that marks uberspectors as chainable, meaning that multiple uberspectors can be combined in a chain (using
+ * the Decorator pattern).
+ *
+ * @version $Id$
+ * @since 1.5M1
+ * @deprecated since 8.0M1; this is now part of the official Velocity library, use
+ *             {@link org.apache.velocity.util.introspection.ChainableUberspector} instead
+ */
+@Deprecated
+public interface ChainableUberspector extends org.apache.velocity.util.introspection.ChainableUberspector
+{
+    // Everything is part of the super interface
+}
diff --git a/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/main/java/org/xwiki/velocity/introspection/ChainingUberspector.java b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/main/java/org/xwiki/velocity/introspection/ChainingUberspector.java
new file mode 100644
index 0000000..275615d
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/main/java/org/xwiki/velocity/introspection/ChainingUberspector.java
@@ -0,0 +1,177 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.velocity.introspection;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.velocity.runtime.RuntimeServices;
+import org.apache.velocity.util.ClassUtils;
+import org.apache.velocity.util.RuntimeServicesAware;
+import org.apache.velocity.util.introspection.Uberspect;
+import org.apache.velocity.util.introspection.UberspectLoggable;
+
+/**
+ * <p>
+ * Since the current version of the Velocity engine (1.5) does not allow more than one uberspector, this class is a
+ * workaround. It manually constructs a <strong>chain of uberspectors</strong>, loading the classes in the order
+ * defined in the <code>"runtime.introspector.uberspect.chainClasses"</code> property, and after that simply
+ * forwarding all calls to the top of the chain. Note that the calls will be made from the rightmost class to the
+ * leftmost one. Along the chain, each uberspectors can forward the call to the rest of the chain, build its own result,
+ * and/or process in any way the resulting value. This allows uberspectors to enhance the list of returned methods,
+ * block out methods returned by other uberspectors, or take various actions on the returned method (for example add or
+ * remove parameters before searching the method, log executed method names, or catch exceptions when executing those
+ * methods).
+ * </p>
+ * <p>
+ * This is not actually part of the chain, but is more of a handle that allows the calls intended for only one
+ * uberspector to reach the chain. It duplicates some of the code from the velocity runtime initialization code, hoping
+ * that a future version of the engine will support chaining natively.
+ * </p>
+ * <p>
+ * The chain is defined using the configuration parameter <code>runtime.introspector.uberspect.chainClasses</code>.
+ * This property should contain a list of canonical class names. Any wrong entry in the list will be ignored. If this
+ * property is not defined or contains only wrong classnames, then by default a <code>SecureUberspector</code> is used
+ * as the only entry in the chain. The first (leftmost) uberspector does not have to be chainable (as it will not need
+ * to forward calls). If a uberspector in the middle of the chain is not chainable, then it will break the chain at that
+ * point (all previos uberspectors will be discarded from the chain).
+ * </p>
+ *
+ * @since 1.5M1
+ * @see ChainableUberspector
+ * @version $Id$
+ * @deprecated since 8.0M1; Velocity supports the same functionality natively since 1.6; just move the configuration
+ *             from {@code runtime.introspector.uberspect.chainClasses} to {@code runtime.introspector.uberspect}
+ */
+@Deprecated
+public class ChainingUberspector extends AbstractChainableUberspector implements Uberspect, RuntimeServicesAware,
+    UberspectLoggable
+{
+    /** The key of the parameter that allows defining the list of chained uberspectors. */
+    public static final String UBERSPECT_CHAIN_CLASSNAMES = "runtime.introspector.uberspect.chainClasses";
+
+    /** The runtime is needed for accessing the configuration. */
+    private RuntimeServices runtime;
+
+    @Override
+    public void setRuntimeServices(RuntimeServices rs)
+    {
+        this.runtime = rs;
+    }
+
+    /**
+     * {@inheritDoc}
+     * <p>
+     * This implementation initializes the uberspector chain.
+     * </p>
+     *
+     * @see org.apache.velocity.util.introspection.Uberspect#init()
+     */
+    @Override
+    public void init()
+    {
+        this.log.debug("Initializing the chaining uberspector.");
+        // Create the chain
+        // TODO Since we're in Plexus already, should we use components?
+        String[] chainClassnames = this.runtime.getConfiguration().getStringArray(UBERSPECT_CHAIN_CLASSNAMES);
+        for (String classname : chainClassnames) {
+            initializeUberspector(classname);
+        }
+        // If the chain is empty, use a SecureUberspector
+        if (this.inner == null) {
+            this.log.error("No chained uberspectors defined! "
+                + "This uberspector is just a placeholder that relies on a real uberspector "
+                + "to actually allow method calls. Using SecureUberspect instead as a fallback.");
+            initializeUberspector(SecureUberspector.class.getCanonicalName());
+        }
+        // Initialize all the uberspectors in the chain
+        try {
+            this.inner.init();
+        } catch (Exception e) {
+            this.log.warn(e.getMessage());
+        }
+    }
+
+    /**
+     * Instantiates an uberspector class and adds it to the chain. Also set the log and runtime services, if the class
+     * implements the proper interfaces. The {@link Uberspect#init()} method is not called.
+     *
+     * @param classname The name of the uberspector class to add to the chain.
+     */
+    protected void initializeUberspector(String classname)
+    {
+        // Avoids direct recursive calls
+        if (!StringUtils.isEmpty(classname) && !classname.equals(this.getClass().getCanonicalName())) {
+            Uberspect u = instantiateUberspector(classname);
+            if (u == null) {
+                return;
+            }
+
+            // Set the log and runtime services, if applicable
+            if (u instanceof UberspectLoggable) {
+                ((UberspectLoggable) u).setLog(this.log);
+            }
+            if (u instanceof RuntimeServicesAware) {
+                ((RuntimeServicesAware) u).setRuntimeServices(this.runtime);
+            }
+
+            // Link it in the chain
+            if (u instanceof ChainableUberspector) {
+                ((ChainableUberspector) u).wrap(this.inner);
+            } else if (u instanceof org.apache.velocity.util.introspection.ChainableUberspector) {
+                ((org.apache.velocity.util.introspection.ChainableUberspector) u).wrap(this.inner);
+            }
+            this.inner = u;
+        }
+    }
+
+    /**
+     * Tries to create an uberspector instance using reflection.
+     *
+     * @param classname The name of the uberspector class to instantiate.
+     * @return An instance of the specified Uberspector. If the class cannot be instantiated using the default
+     *         constructor, or does not implement {@link Uberspect}, <code>null</code> is returned.
+     */
+    protected Uberspect instantiateUberspector(String classname)
+    {
+        Object o = null;
+        try {
+            o = ClassUtils.getNewInstance(classname);
+        } catch (ClassNotFoundException cnfe) {
+            this.log.warn(String.format("The specified uberspector [%s]"
+                + " does not exist or is not accessible to the current classloader.", classname));
+        } catch (IllegalAccessException e) {
+            this.log.warn(String.format("The specified uberspector [%s] does not have a public default constructor.",
+                classname));
+        } catch (InstantiationException e) {
+            this.log.warn(String.format("The specified uberspector [%s] cannot be instantiated.", classname));
+        } catch (ExceptionInInitializerError e) {
+            this.log.warn(String.format("Exception while instantiating the Uberspector [%s]: %s", classname, e
+                .getMessage()));
+        }
+
+        if (!(o instanceof Uberspect)) {
+            if (o != null) {
+                this.log.warn("The specified class for Uberspect [" + classname + "] does not implement "
+                    + Uberspect.class.getName());
+            }
+            return null;
+        }
+        return (Uberspect) o;
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/main/java/org/xwiki/velocity/introspection/LinkingUberspector.java b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/main/java/org/xwiki/velocity/introspection/LinkingUberspector.java
new file mode 100644
index 0000000..a3aaea2
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/main/java/org/xwiki/velocity/introspection/LinkingUberspector.java
@@ -0,0 +1,233 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.velocity.introspection;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.velocity.runtime.RuntimeServices;
+import org.apache.velocity.util.ClassUtils;
+import org.apache.velocity.util.RuntimeServicesAware;
+import org.apache.velocity.util.introspection.Info;
+import org.apache.velocity.util.introspection.Uberspect;
+import org.apache.velocity.util.introspection.UberspectImpl;
+import org.apache.velocity.util.introspection.UberspectLoggable;
+import org.apache.velocity.util.introspection.VelMethod;
+import org.apache.velocity.util.introspection.VelPropertyGet;
+import org.apache.velocity.util.introspection.VelPropertySet;
+
+/**
+ * <p>
+ * Since the current version of the Velocity engine (1.5) does not allow more than one uberspector, this class is a
+ * workaround. It manually constructs an <strong>array of uberspectors</strong>, loading the classes in the order
+ * defined in the <code>"runtime.introspector.uberspect.arrayClasses"</code> property, and after that forwards calls to
+ * each of the uberspectors, in order, until one of them returns something different than <code>null</code>. Note that
+ * the calls will be made from the leftmost class to the rightmost one. This allows building and combining different
+ * small uberspectors that perform a specialised search for methods, instead of bloating a single class with different
+ * introspection tricks.
+ * </p>
+ * <p>
+ * This is not actually part of the array, but is more of a handle that allows the calls intended for only one
+ * uberspector to reach the array. It duplicates some of the code from the velocity runtime initialization code, hoping
+ * that a future version of the engine will support this natively.
+ * </p>
+ * <p>
+ * The array is defined using the configuration parameter <code>runtime.introspector.uberspect.arrayClasses</code>. This
+ * property should contain a list of canonical class names. Any wrong entry in the list will be ignored. If this
+ * property is not defined or contains only wrong classnames, then by default a <code>SecureUberspector</code> is used
+ * as the only entry in the array.
+ * </p>
+ *
+ * @since 1.5RC1
+ * @see ChainingUberspector
+ * @version $Id$
+ * @deprecated since 8.0M1; chaining uberspectors is much more powerful, this class was never more than a proof of
+ *             concept
+ */
+@Deprecated
+public class LinkingUberspector extends UberspectImpl implements Uberspect, RuntimeServicesAware, UberspectLoggable
+{
+    /** The key of the parameter that allows defining the array of uberspectors. */
+    public static final String UBERSPECT_ARRAY_CLASSNAMES = "runtime.introspector.uberspect.arrayClasses";
+
+    /** The runtime is needed for accessing the configuration. */
+    private RuntimeServices runtime;
+
+    /** The array of uberspectors to use. */
+    private List<Uberspect> uberspectors;
+
+    @Override
+    public void setRuntimeServices(RuntimeServices rs)
+    {
+        this.runtime = rs;
+    }
+
+    /**
+     * {@inheritDoc}
+     * <p>
+     * This implementation initializes the array of uberspectors.
+     * </p>
+     *
+     * @see org.apache.velocity.util.introspection.Uberspect#init()
+     */
+    @Override
+    public void init()
+    {
+        this.log.debug("Initializing the linking uberspector.");
+        // Create the array
+        String[] arrayClassnames = this.runtime.getConfiguration().getStringArray(UBERSPECT_ARRAY_CLASSNAMES);
+        this.uberspectors = new ArrayList<Uberspect>(arrayClassnames.length);
+        for (String classname : arrayClassnames) {
+            initializeUberspector(classname);
+        }
+        // If the chain is empty, use a SecureUberspector
+        if (this.uberspectors.isEmpty()) {
+            this.log.error("No uberspectors defined! "
+                + "This uberspector is just a placeholder that relies on at least one real uberspector "
+                + "to actually allow method calls. Using SecureUberspector instead as a fallback.");
+            initializeUberspector(SecureUberspector.class.getCanonicalName());
+        }
+    }
+
+    /**
+     * Instantiates and initializes an uberspector class and adds it to the array. Also set the log and runtime
+     * services, if the class implements the proper interfaces.
+     *
+     * @param classname The name of the uberspector class to add to the chain.
+     */
+    protected void initializeUberspector(String classname)
+    {
+        // Avoids direct recursive calls
+        if (!StringUtils.isEmpty(classname) && !classname.equals(this.getClass().getCanonicalName())) {
+            Uberspect u = instantiateUberspector(classname);
+            if (u == null) {
+                return;
+            }
+
+            // Set the log and runtime services, if applicable
+            if (u instanceof UberspectLoggable) {
+                ((UberspectLoggable) u).setLog(this.log);
+            }
+            if (u instanceof RuntimeServicesAware) {
+                ((RuntimeServicesAware) u).setRuntimeServices(this.runtime);
+            }
+
+            // Initialize the uberspector
+            try {
+                u.init();
+                // Add it to the array
+                this.uberspectors.add(u);
+            } catch (Exception e) {
+                this.log.warn(e.getMessage());
+                // If the initialization failed, don't add this uberspector to the chain.
+            }
+        }
+    }
+
+    /**
+     * Tries to create an uberspector instance using reflection.
+     *
+     * @param classname The name of the uberspector class to instantiate.
+     * @return An instance of the specified Uberspector. If the class cannot be instantiated using the default
+     *         constructor, or does not implement {@link Uberspect}, <code>null</code> is returned.
+     */
+    protected Uberspect instantiateUberspector(String classname)
+    {
+        Object o = null;
+        try {
+            o = ClassUtils.getNewInstance(classname);
+        } catch (ClassNotFoundException e) {
+            this.log.warn(String.format("The specified uberspector [%s]"
+                + " does not exist or is not accessible to the current classloader.", classname));
+        } catch (IllegalAccessException e) {
+            this.log.warn(String.format("The specified uberspector [%s] does not have a public default constructor.",
+                classname));
+        } catch (InstantiationException e) {
+            this.log.warn(String.format("The specified uberspector [%s] cannot be instantiated.", classname));
+        } catch (ExceptionInInitializerError e) {
+            this.log.warn(String.format("Exception while instantiating the Uberspector [%s]: %s", classname, e
+                .getMessage()));
+        }
+
+        if (!(o instanceof Uberspect)) {
+            if (o != null) {
+                this.log.warn("The specified class for Uberspect [" + classname + "] does not implement "
+                    + Uberspect.class.getName());
+            }
+            return null;
+        }
+        return (Uberspect) o;
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public Iterator getIterator(Object obj, Info i) throws Exception
+    {
+        Iterator it;
+        for (Uberspect u : this.uberspectors) {
+            it = u.getIterator(obj, i);
+            if (it != null) {
+                return it;
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public VelMethod getMethod(Object obj, String methodName, Object[] args, Info i) throws Exception
+    {
+        VelMethod method;
+        for (Uberspect u : this.uberspectors) {
+            method = u.getMethod(obj, methodName, args, i);
+            if (method != null) {
+                return method;
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public VelPropertyGet getPropertyGet(Object obj, String identifier, Info i) throws Exception
+    {
+        VelPropertyGet getter;
+        for (Uberspect u : this.uberspectors) {
+            getter = u.getPropertyGet(obj, identifier, i);
+            if (getter != null) {
+                return getter;
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public VelPropertySet getPropertySet(Object obj, String identifier, Object arg, Info i) throws Exception
+    {
+        VelPropertySet setter;
+        for (Uberspect u : this.uberspectors) {
+            setter = u.getPropertySet(obj, identifier, arg, i);
+            if (setter != null) {
+                return setter;
+            }
+        }
+        return null;
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/test/java/org/xwiki/velocity/introspection/ChainingUberspectorTest.java b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/test/java/org/xwiki/velocity/introspection/ChainingUberspectorTest.java
new file mode 100644
index 0000000..171c94b
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/test/java/org/xwiki/velocity/introspection/ChainingUberspectorTest.java
@@ -0,0 +1,293 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.velocity.introspection;
+
+import java.io.StringReader;
+import java.io.StringWriter;
+import java.util.Date;
+import java.util.Properties;
+
+import org.apache.velocity.VelocityContext;
+import org.apache.velocity.runtime.RuntimeConstants;
+import org.apache.velocity.util.introspection.UberspectImpl;
+import org.jmock.Expectations;
+import org.jmock.States;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.slf4j.Logger;
+import org.xwiki.component.util.ReflectionUtils;
+import org.xwiki.test.ComponentManagerRule;
+import org.xwiki.test.annotation.ComponentList;
+import org.xwiki.test.jmock.JMockRule;
+import org.xwiki.velocity.VelocityEngine;
+import org.xwiki.velocity.internal.DefaultVelocityConfiguration;
+import org.xwiki.velocity.internal.DefaultVelocityContextFactory;
+import org.xwiki.velocity.internal.DefaultVelocityEngine;
+
+/**
+ * Unit tests for {@link ChainingUberspector}.
+ */
+@ComponentList({
+    DefaultVelocityEngine.class,
+    DefaultVelocityConfiguration.class,
+    DefaultVelocityContextFactory.class
+})
+public class ChainingUberspectorTest
+{
+    @Rule
+    public final ComponentManagerRule componentManager = new ComponentManagerRule();
+
+    @Rule
+    public final JMockRule mockery = new JMockRule();
+
+    private VelocityEngine engine;
+
+    private Logger mockLogger;
+
+    private States loggingVerification = this.mockery.states("loggingVerification");
+
+    @Before
+    public void setUp() throws Exception
+    {
+        // Register in-memory configuration sources for the test.
+        this.componentManager.registerMemoryConfigurationSource();
+
+        this.engine = this.componentManager.getInstance(VelocityEngine.class);
+
+        this.mockLogger = this.mockery.mock(Logger.class);
+        this.mockery.checking(new Expectations()
+        {
+            {
+                ignoring(ChainingUberspectorTest.this.mockLogger);
+                when(ChainingUberspectorTest.this.loggingVerification.isNot("on"));
+            }
+        });
+
+        ReflectionUtils.setFieldValue(this.engine, "logger", this.mockLogger);
+    }
+
+    /*
+     * Tests that the uberspectors in the chain are called, and without a real uberspector no methods are found.
+     */
+    @Test
+    public void testEmptyChain() throws Exception
+    {
+        Properties prop = new Properties();
+        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, ChainingUberspector.class
+                .getCanonicalName());
+        prop.setProperty(ChainingUberspector.UBERSPECT_CHAIN_CLASSNAMES, TestingUberspector.class
+                .getCanonicalName());
+        TestingUberspector.methodCalls = 0;
+        this.engine.initialize(prop);
+        StringWriter writer = new StringWriter();
+        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate",
+            new StringReader("#set($foo = 'hello')#set($bar = $foo.toString())$bar"));
+        Assert.assertEquals("$bar", writer.toString());
+        Assert.assertEquals(1, TestingUberspector.methodCalls);
+    }
+
+    /*
+     * Tests that using several uberspectors in the chain works, and methods are correctly found by the last uberspector
+     * in the chain.
+     */
+    @Test
+    public void testBasicChaining() throws Exception
+    {
+        Properties prop = new Properties();
+        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, ChainingUberspector.class
+            .getCanonicalName());
+        prop.setProperty(ChainingUberspector.UBERSPECT_CHAIN_CLASSNAMES, UberspectImpl.class
+            .getCanonicalName()
+            + "," + TestingUberspector.class.getCanonicalName());
+        TestingUberspector.methodCalls = 0;
+        TestingUberspector.getterCalls = 0;
+        this.engine.initialize(prop);
+        StringWriter writer = new StringWriter();
+        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate",
+            new StringReader("#set($foo = 'hello')#set($bar = $foo.toString())$bar"));
+        Assert.assertEquals("hello", writer.toString());
+        Assert.assertEquals(1, TestingUberspector.methodCalls);
+        Assert.assertEquals(0, TestingUberspector.getterCalls);
+    }
+
+    /*
+     * Tests that invalid uberspectors classnames are ignored.
+     */
+    @Test
+    public void testInvalidUberspectorsAreIgnored() throws Exception
+    {
+        Properties prop = new Properties();
+        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, ChainingUberspector.class
+            .getCanonicalName());
+        prop.setProperty(ChainingUberspector.UBERSPECT_CHAIN_CLASSNAMES, UberspectImpl.class
+            .getCanonicalName()
+            + ","
+            + AbstractChainableUberspector.class.getCanonicalName()
+            + ","
+            + InvalidUberspector.class.getCanonicalName()
+            + ","
+            + TestingUberspector.class.getCanonicalName() + "," + Date.class.getCanonicalName());
+        TestingUberspector.methodCalls = 0;
+        InvalidUberspector.methodCalls = 0;
+        this.engine.initialize(prop);
+        StringWriter writer = new StringWriter();
+        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate",
+            new StringReader("#set($foo = 'hello')#set($bar = $foo.toString())$bar"));
+        Assert.assertEquals("hello", writer.toString());
+        Assert.assertEquals(1, TestingUberspector.methodCalls);
+        Assert.assertEquals(0, InvalidUberspector.methodCalls);
+    }
+
+    /*
+     * Tests that a non-chainable entry in the chain does not forward calls.
+     */
+    @Test
+    public void testChainBreakingOnNonChainableEntry() throws Exception
+    {
+        Properties prop = new Properties();
+        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, ChainingUberspector.class
+            .getCanonicalName());
+        prop.setProperty(ChainingUberspector.UBERSPECT_CHAIN_CLASSNAMES, TestingUberspector.class
+            .getCanonicalName()
+            + "," + UberspectImpl.class.getCanonicalName());
+        TestingUberspector.methodCalls = 0;
+        this.engine.initialize(prop);
+        StringWriter writer = new StringWriter();
+        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate",
+            new StringReader("#set($foo = 'hello')#set($bar = $foo.toString())$bar"));
+        Assert.assertEquals("hello", writer.toString());
+        Assert.assertEquals(0, TestingUberspector.methodCalls);
+    }
+
+    /*
+     * Checks that the default (non-secure) uberspector works and allows calling restricted methods.
+     */
+    @Test
+    public void testDefaultUberspectorWorks() throws Exception
+    {
+        Properties prop = new Properties();
+        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, ChainingUberspector.class
+            .getCanonicalName());
+        prop.setProperty(ChainingUberspector.UBERSPECT_CHAIN_CLASSNAMES, UberspectImpl.class
+            .getCanonicalName());
+        this.engine.initialize(prop);
+        StringWriter writer = new StringWriter();
+        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate",
+            new StringReader("#set($foo = 'hello')"
+                + "#set($bar = $foo.getClass().getConstructors())$bar"));
+        Assert.assertTrue(writer.toString().startsWith("[Ljava.lang.reflect.Constructor"));
+    }
+
+    /*
+     * Checks that the secure uberspector works and does not allow calling restricted methods.
+     */
+    @Test
+    public void testSecureUberspectorWorks() throws Exception
+    {
+        Properties prop = new Properties();
+        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, ChainingUberspector.class
+            .getCanonicalName());
+        prop.setProperty(ChainingUberspector.UBERSPECT_CHAIN_CLASSNAMES, SecureUberspector.class
+            .getCanonicalName());
+        this.engine.initialize(prop);
+        StringWriter writer = new StringWriter();
+
+        this.loggingVerification.become("on");
+        this.mockery.checking(new Expectations()
+        {{
+            // Get rid of debug log
+            allowing(mockLogger).isDebugEnabled();
+            returnValue(false);
+
+            // Allow one warning for getConstructors since it's forbidden
+            oneOf(mockLogger).warn("Cannot retrieve method getConstructors from object of class java.lang.Class due to security restrictions.");
+        }});
+
+        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate",
+            new StringReader("#set($foo = 'hello')"
+                + "#set($bar = $foo.getClass().getConstructors())$foo $foo.class.name $bar"));
+        Assert.assertEquals("hello java.lang.String $bar", writer.toString());
+    }
+
+    /*
+     * Checks that when the chain property is not configured, by default the secure ubespector is used.
+     */
+    @Test
+    public void testSecureUberspectorEnabledByDefault() throws Exception
+    {
+        Properties prop = new Properties();
+        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, ChainingUberspector.class
+            .getCanonicalName());
+        prop.setProperty(ChainingUberspector.UBERSPECT_CHAIN_CLASSNAMES, "");
+        this.engine.initialize(prop);
+        StringWriter writer = new StringWriter();
+        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate",
+            new StringReader("#set($foo = 'hello')"
+                + "#set($bar = $foo.getClass().getConstructors())$foo $foo.class.name $bar"));
+        Assert.assertEquals("hello java.lang.String $bar", writer.toString());
+    }
+
+    /*
+     * Checks that the deprecated check uberspector works.
+     */
+    @SuppressWarnings("deprecation")
+    @Test
+    public void testDeprecatedUberspector() throws Exception
+    {
+        Properties prop = new Properties();
+        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, ChainingUberspector.class
+            .getCanonicalName());
+        prop.setProperty(ChainingUberspector.UBERSPECT_CHAIN_CLASSNAMES, UberspectImpl.class
+            .getCanonicalName()
+            + ","
+            + TestingUberspector.class.getCanonicalName()
+            + ","
+            + DeprecatedCheckUberspector.class.getCanonicalName());
+        TestingUberspector.methodCalls = 0;
+        TestingUberspector.getterCalls = 0;
+        this.engine.initialize(prop);
+        StringWriter writer = new StringWriter();
+        VelocityContext context = new org.apache.velocity.VelocityContext();
+        Date d = new Date();
+        context.put("date", d);
+        context.put("dobject", new DeprecatedObject());
+
+        final String threadIdPrefix = Thread.currentThread().getId() + ":";
+
+        // Define expectations on the Logger
+        this.loggingVerification.become("on");
+        this.mockery.checking(new Expectations()
+        {{
+            oneOf(mockLogger).warn("Deprecated usage of method [java.util.Date.getYear] in " + threadIdPrefix + "mytemplate@1,19");
+            oneOf(mockLogger).warn("Deprecated usage of getter [java.util.Date.getMonth] in " + threadIdPrefix + "mytemplate@1,40");
+            oneOf(mockLogger).warn("Deprecated usage of method [org.xwiki.velocity.introspection.DeprecatedObject.foo] in " + threadIdPrefix + "mytemplate@1,55");
+            oneOf(mockLogger).warn("Deprecated usage of method [org.xwiki.velocity.introspection.DeprecatedObject.size] in " + threadIdPrefix + "mytemplate@1,70");
+        }});
+
+        this.engine.evaluate(context, writer, "mytemplate",
+            new StringReader("#set($foo = $date.getYear())$foo $date.month $dobject.foo() $dobject.size()"));
+
+        Assert.assertEquals(d.getYear() + " " + d.getMonth() + " foo 0", writer.toString());
+        Assert.assertEquals(3, TestingUberspector.methodCalls);
+        Assert.assertEquals(1, TestingUberspector.getterCalls);
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/test/java/org/xwiki/velocity/introspection/DeprecatedObject.java b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/test/java/org/xwiki/velocity/introspection/DeprecatedObject.java
new file mode 100644
index 0000000..88f5b71
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/test/java/org/xwiki/velocity/introspection/DeprecatedObject.java
@@ -0,0 +1,31 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.velocity.introspection;
+
+import java.util.ArrayList;
+
+@Deprecated
+public class DeprecatedObject extends ArrayList<String>
+{
+    public String foo()
+    {
+        return "foo";
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/test/java/org/xwiki/velocity/introspection/InvalidUberspector.java b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/test/java/org/xwiki/velocity/introspection/InvalidUberspector.java
new file mode 100644
index 0000000..dc3084a
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/test/java/org/xwiki/velocity/introspection/InvalidUberspector.java
@@ -0,0 +1,40 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.velocity.introspection;
+
+import org.apache.velocity.util.introspection.Info;
+import org.apache.velocity.util.introspection.VelMethod;
+
+public class InvalidUberspector extends AbstractChainableUberspector
+{
+    public static int methodCalls = 0;
+
+    private InvalidUberspector()
+    {
+        // This is private to ensure that it cannot be instatiated. Nothing to do here.
+    }
+
+    @Override
+    public VelMethod getMethod(Object obj, String methodName, Object[] args, Info i) throws Exception
+    {
+        ++methodCalls;
+        return super.getMethod(obj, methodName, args, i);
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/test/java/org/xwiki/velocity/introspection/LinkingUberspectorTest.java b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/test/java/org/xwiki/velocity/introspection/LinkingUberspectorTest.java
new file mode 100644
index 0000000..7df9013
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/test/java/org/xwiki/velocity/introspection/LinkingUberspectorTest.java
@@ -0,0 +1,167 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.velocity.introspection;
+
+import java.io.StringReader;
+import java.io.StringWriter;
+import java.util.Date;
+import java.util.Properties;
+
+import org.apache.velocity.runtime.RuntimeConstants;
+import org.apache.velocity.util.introspection.UberspectImpl;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+import org.xwiki.test.annotation.AllComponents;
+import org.xwiki.test.junit5.mockito.ComponentTest;
+import org.xwiki.test.mockito.MockitoComponentManager;
+import org.xwiki.velocity.VelocityEngine;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+/**
+ * Unit tests for {@link LinkingUberspector}.
+ *
+ * @version $Id$
+ */
+@ComponentTest
+@AllComponents
+public class LinkingUberspectorTest
+{
+    private VelocityEngine engine;
+
+    @BeforeEach
+    public void setUp(MockitoComponentManager componentManager) throws Exception
+    {
+        componentManager.registerMemoryConfigurationSource();
+        this.engine = componentManager.getInstance(VelocityEngine.class);
+    }
+
+    /*
+     * Tests that the uberspectors in the list are called, and without a real uberspector no methods are found.
+     */
+    @Test
+    public void emptyArray() throws Exception
+    {
+        Properties prop = new Properties();
+        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, LinkingUberspector.class.getCanonicalName());
+        prop.setProperty(LinkingUberspector.UBERSPECT_ARRAY_CLASSNAMES, TestingUberspector.class.getCanonicalName());
+        TestingUberspector.methodCalls = 0;
+        this.engine.initialize(prop);
+        StringWriter writer = new StringWriter();
+        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate", new StringReader(
+            "#set($foo = 'hello')#set($bar = $foo.toString())$bar"));
+        assertEquals("$bar", writer.toString());
+        assertEquals(1, TestingUberspector.methodCalls);
+    }
+
+    /*
+     * Tests that using several uberspectors in the array works, methods are correctly found by a valid uberspector in
+     * the chain, and after a method is found no further calls are performed.
+     */
+    @Test
+    public void basicArray() throws Exception
+    {
+        Properties prop = new Properties();
+        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, LinkingUberspector.class.getCanonicalName());
+        prop.setProperty(LinkingUberspector.UBERSPECT_ARRAY_CLASSNAMES, TestingUberspector.class.getCanonicalName()
+            + "," + TestingUberspector.class.getCanonicalName() + "," + UberspectImpl.class.getCanonicalName() + ","
+            + TestingUberspector.class.getCanonicalName());
+        TestingUberspector.methodCalls = 0;
+        TestingUberspector.getterCalls = 0;
+        this.engine.initialize(prop);
+        StringWriter writer = new StringWriter();
+        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate", new StringReader(
+            "#set($foo = 'hello')#set($bar = $foo.toString())$bar"));
+        assertEquals("hello", writer.toString());
+        assertEquals(2, TestingUberspector.methodCalls);
+        assertEquals(0, TestingUberspector.getterCalls);
+    }
+
+    /*
+     * Tests that invalid uberspectors classnames are ignored.
+     */
+    @Test
+    public void invalidUberspectorsAreIgnored() throws Exception
+    {
+        Properties prop = new Properties();
+        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, LinkingUberspector.class.getCanonicalName());
+        prop.setProperty(LinkingUberspector.UBERSPECT_ARRAY_CLASSNAMES, Date.class.getCanonicalName() + ","
+            + AbstractChainableUberspector.class.getCanonicalName() + "," + InvalidUberspector.class.getCanonicalName()
+            + "," + TestingUberspector.class.getCanonicalName() + "," + UberspectImpl.class.getCanonicalName());
+        TestingUberspector.methodCalls = 0;
+        InvalidUberspector.methodCalls = 0;
+        this.engine.initialize(prop);
+        StringWriter writer = new StringWriter();
+        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate", new StringReader(
+            "#set($foo = 'hello')#set($bar = $foo.toString())$bar"));
+        assertEquals("hello", writer.toString());
+        assertEquals(1, TestingUberspector.methodCalls);
+        assertEquals(0, InvalidUberspector.methodCalls);
+    }
+
+    /*
+     * Checks that the default (non-secure) uberspector works and allows calling restricted methods.
+     */
+    @Test
+    public void defaultUberspectorWorks() throws Exception
+    {
+        Properties prop = new Properties();
+        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, LinkingUberspector.class.getCanonicalName());
+        prop.setProperty(LinkingUberspector.UBERSPECT_ARRAY_CLASSNAMES, UberspectImpl.class.getCanonicalName());
+        this.engine.initialize(prop);
+        StringWriter writer = new StringWriter();
+        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate", new StringReader(
+            "#set($foo = 'hello')" + "#set($bar = $foo.getClass().getConstructors())$bar"));
+        assertTrue(writer.toString().startsWith("[Ljava.lang.reflect.Constructor"));
+    }
+
+    /*
+     * Checks that the secure uberspector works and does not allow calling restricted methods.
+     */
+    @Test
+    public void secureUberspectorWorks() throws Exception
+    {
+        Properties prop = new Properties();
+        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, LinkingUberspector.class.getCanonicalName());
+        prop.setProperty(LinkingUberspector.UBERSPECT_ARRAY_CLASSNAMES, SecureUberspector.class.getCanonicalName());
+        this.engine.initialize(prop);
+        StringWriter writer = new StringWriter();
+        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate", new StringReader(
+            "#set($foo = 'hello')" + "#set($bar = $foo.getClass().getConstructors())$foo$bar"));
+        assertEquals("hello$bar", writer.toString());
+    }
+
+    /*
+     * Checks that when the array property is not configured, by default the secure ubespector is used.
+     */
+    @Test
+    public void secureUberspectorEnabledByDefault() throws Exception
+    {
+        Properties prop = new Properties();
+        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, LinkingUberspector.class.getCanonicalName());
+        prop.setProperty(LinkingUberspector.UBERSPECT_ARRAY_CLASSNAMES, "");
+        this.engine.initialize(prop);
+        StringWriter writer = new StringWriter();
+        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate", new StringReader(
+            "#set($foo = 'hello')" + "#set($bar = $foo.getClass().getConstructors())$foo$bar"));
+        assertEquals("hello$bar", writer.toString());
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/test/java/org/xwiki/velocity/introspection/TestingUberspector.java b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/test/java/org/xwiki/velocity/introspection/TestingUberspector.java
new file mode 100644
index 0000000..d324083
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-legacy/xwiki-commons-legacy-velocity/src/test/java/org/xwiki/velocity/introspection/TestingUberspector.java
@@ -0,0 +1,45 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.velocity.introspection;
+
+import org.apache.velocity.util.introspection.Info;
+import org.apache.velocity.util.introspection.VelMethod;
+import org.apache.velocity.util.introspection.VelPropertyGet;
+
+public class TestingUberspector extends AbstractChainableUberspector
+{
+    public static int methodCalls = 0;
+
+    public static int getterCalls = 0;
+
+    @Override
+    public VelMethod getMethod(Object obj, String methodName, Object[] args, Info i) throws Exception
+    {
+        ++methodCalls;
+        return super.getMethod(obj, methodName, args, i);
+    }
+
+    @Override
+    public VelPropertyGet getPropertyGet(Object obj, String identifier, Info i) throws Exception
+    {
+        ++getterCalls;
+        return super.getPropertyGet(obj, identifier, i);
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-logging/pom.xml b/xwiki-commons-core/xwiki-commons-logging/pom.xml
index c728b7c..79d06ff 100644
--- a/xwiki-commons-core/xwiki-commons-logging/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-logging/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-core</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-logging</artifactId>
   <name>XWiki Commons - Loggging</name>
diff --git a/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/pom.xml b/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/pom.xml
index ee78ce8..cfbd10f 100644
--- a/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/pom.xml
@@ -25,14 +25,15 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-logging</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-logging-api</artifactId>
   <name>XWiki Commons - Logging - API</name>
   <packaging>jar</packaging>
   <description>XWiki Commons - Logging - API</description>
   <properties>
-    <xwiki.jacoco.instructionRatio>0.75</xwiki.jacoco.instructionRatio>
+    <xwiki.jacoco.instructionRatio>0.76</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>82</xwiki.pitest.mutationThreshold>
   </properties>
   <dependencies>
     <dependency>
diff --git a/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/CompositeLoggerTest.java b/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/CompositeLoggerTest.java
index 1b784e4..9b96f13 100644
--- a/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/CompositeLoggerTest.java
+++ b/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/CompositeLoggerTest.java
@@ -19,10 +19,11 @@
  */
 package org.xwiki.logging;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.xwiki.logging.test.Utils;
 
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
 /**
  * Test {@link CompositeLogger}.
  *
@@ -38,11 +39,11 @@ public void test()
 
         Logger logger = new CompositeLogger(logQueue, logTree);
 
-        Assert.assertTrue(logger.isTraceEnabled());
-        Assert.assertTrue(logger.isDebugEnabled());
-        Assert.assertTrue(logger.isInfoEnabled());
-        Assert.assertTrue(logger.isWarnEnabled());
-        Assert.assertTrue(logger.isErrorEnabled());
+        assertTrue(logger.isTraceEnabled());
+        assertTrue(logger.isDebugEnabled());
+        assertTrue(logger.isInfoEnabled());
+        assertTrue(logger.isWarnEnabled());
+        assertTrue(logger.isErrorEnabled());
 
         Utils.populateLogger(logger);
 
diff --git a/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/LogQueueTest.java b/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/LogQueueTest.java
index 11805c0..e4dd038 100644
--- a/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/LogQueueTest.java
+++ b/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/LogQueueTest.java
@@ -21,10 +21,15 @@
 
 import java.util.Arrays;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.xwiki.logging.event.LogEvent;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
 /**
  * Test {@link LogQueue}.
  *
@@ -33,88 +38,88 @@
 public class LogQueueTest
 {
     @Test
-    public void testError()
+    public void error()
     {
         LogQueue queue = new LogQueue();
         LogEvent logEvent;
 
         queue.error("");
         logEvent = queue.poll();
-        Assert.assertEquals(Arrays.asList(""), logEvent.getMessageElements());
-        Assert.assertEquals("", logEvent.getFormattedMessage());
+        assertEquals(Arrays.asList(""), logEvent.getMessageElements());
+        assertEquals("", logEvent.getFormattedMessage());
 
         queue.error("message");
-        Assert.assertEquals("message", queue.poll().getFormattedMessage());
+        assertEquals("message", queue.poll().getFormattedMessage());
 
         queue.error("message {}", "param");
-        Assert.assertEquals("message param", queue.poll().getFormattedMessage());
+        assertEquals("message param", queue.poll().getFormattedMessage());
 
         queue.error("message {} {}", "param1", "param2");
         logEvent = queue.poll();
-        Assert.assertEquals("message param1 param2", logEvent.getFormattedMessage());
-        Assert.assertEquals(Arrays.asList("message ", " ", ""), logEvent.getMessageElements());
-        Assert.assertEquals(Arrays.asList("param1", "param2"), Arrays.asList(logEvent.getArgumentArray()));
+        assertEquals("message param1 param2", logEvent.getFormattedMessage());
+        assertEquals(Arrays.asList("message ", " ", ""), logEvent.getMessageElements());
+        assertEquals(Arrays.asList("param1", "param2"), Arrays.asList(logEvent.getArgumentArray()));
 
         queue.error("message {}", "param1", new Exception());
         logEvent = queue.poll();
-        Assert.assertEquals("message param1", logEvent.getFormattedMessage());
-        Assert.assertEquals(Arrays.asList("message ", ""), logEvent.getMessageElements());
-        Assert.assertEquals(Arrays.asList("param1"), Arrays.asList(logEvent.getArgumentArray()));
-        Assert.assertNotNull(logEvent.getThrowable());
-        Assert.assertNull(logEvent.getTranslationKey());
+        assertEquals("message param1", logEvent.getFormattedMessage());
+        assertEquals(Arrays.asList("message ", ""), logEvent.getMessageElements());
+        assertEquals(Arrays.asList("param1"), Arrays.asList(logEvent.getArgumentArray()));
+        assertNotNull(logEvent.getThrowable());
+        assertNull(logEvent.getTranslationKey());
 
         queue.error("message {}", new Object[] { "param1", new Exception() });
         logEvent = queue.poll();
-        Assert.assertEquals("message param1", logEvent.getFormattedMessage());
-        Assert.assertEquals(Arrays.asList("message ", ""), logEvent.getMessageElements());
-        Assert.assertEquals(Arrays.asList("param1"), Arrays.asList(logEvent.getArgumentArray()));
-        Assert.assertNotNull(logEvent.getThrowable());
-        Assert.assertNull(logEvent.getTranslationKey());
+        assertEquals("message param1", logEvent.getFormattedMessage());
+        assertEquals(Arrays.asList("message ", ""), logEvent.getMessageElements());
+        assertEquals(Arrays.asList("param1"), Arrays.asList(logEvent.getArgumentArray()));
+        assertNotNull(logEvent.getThrowable());
+        assertNull(logEvent.getTranslationKey());
 
         queue.error(new TranslationMarker("translation.key"), "message");
         logEvent = queue.poll();
-        Assert.assertEquals("translation.key", logEvent.getTranslationKey());
-        Assert.assertEquals(Arrays.asList("message"), logEvent.getMessageElements());
-        Assert.assertEquals(Arrays.asList(), Arrays.asList(logEvent.getArgumentArray()));
+        assertEquals("translation.key", logEvent.getTranslationKey());
+        assertEquals(Arrays.asList("message"), logEvent.getMessageElements());
+        assertEquals(Arrays.asList(), Arrays.asList(logEvent.getArgumentArray()));
     }
 
     @Test
-    public void testContainLogsFrom()
+    public void containLogsFrom()
     {
         LogQueue queue = new LogQueue();
 
-        Assert.assertFalse(queue.containLogsFrom(LogLevel.TRACE));
-        Assert.assertFalse(queue.containLogsFrom(LogLevel.DEBUG));
-        Assert.assertFalse(queue.containLogsFrom(LogLevel.INFO));
-        Assert.assertFalse(queue.containLogsFrom(LogLevel.WARN));
-        Assert.assertFalse(queue.containLogsFrom(LogLevel.ERROR));
+        assertFalse(queue.containLogsFrom(LogLevel.TRACE));
+        assertFalse(queue.containLogsFrom(LogLevel.DEBUG));
+        assertFalse(queue.containLogsFrom(LogLevel.INFO));
+        assertFalse(queue.containLogsFrom(LogLevel.WARN));
+        assertFalse(queue.containLogsFrom(LogLevel.ERROR));
 
         queue.warn("");
 
-        Assert.assertTrue(queue.containLogsFrom(LogLevel.TRACE));
-        Assert.assertTrue(queue.containLogsFrom(LogLevel.DEBUG));
-        Assert.assertTrue(queue.containLogsFrom(LogLevel.INFO));
-        Assert.assertTrue(queue.containLogsFrom(LogLevel.WARN));
-        Assert.assertFalse(queue.containLogsFrom(LogLevel.ERROR));
+        assertTrue(queue.containLogsFrom(LogLevel.TRACE));
+        assertTrue(queue.containLogsFrom(LogLevel.DEBUG));
+        assertTrue(queue.containLogsFrom(LogLevel.INFO));
+        assertTrue(queue.containLogsFrom(LogLevel.WARN));
+        assertFalse(queue.containLogsFrom(LogLevel.ERROR));
     }
 
     @Test
-    public void testGetLogsFrom()
+    public void getLogsFrom()
     {
         LogQueue queue = new LogQueue();
 
-        Assert.assertTrue(queue.getLogsFrom(LogLevel.TRACE).isEmpty());
-        Assert.assertTrue(queue.getLogsFrom(LogLevel.DEBUG).isEmpty());
-        Assert.assertTrue(queue.getLogsFrom(LogLevel.INFO).isEmpty());
-        Assert.assertTrue(queue.getLogsFrom(LogLevel.WARN).isEmpty());
-        Assert.assertTrue(queue.getLogsFrom(LogLevel.ERROR).isEmpty());
+        assertTrue(queue.getLogsFrom(LogLevel.TRACE).isEmpty());
+        assertTrue(queue.getLogsFrom(LogLevel.DEBUG).isEmpty());
+        assertTrue(queue.getLogsFrom(LogLevel.INFO).isEmpty());
+        assertTrue(queue.getLogsFrom(LogLevel.WARN).isEmpty());
+        assertTrue(queue.getLogsFrom(LogLevel.ERROR).isEmpty());
 
         queue.warn("");
 
-        Assert.assertFalse(queue.getLogsFrom(LogLevel.TRACE).isEmpty());
-        Assert.assertFalse(queue.getLogsFrom(LogLevel.DEBUG).isEmpty());
-        Assert.assertFalse(queue.getLogsFrom(LogLevel.INFO).isEmpty());
-        Assert.assertFalse(queue.getLogsFrom(LogLevel.WARN).isEmpty());
-        Assert.assertTrue(queue.getLogsFrom(LogLevel.ERROR).isEmpty());
+        assertFalse(queue.getLogsFrom(LogLevel.TRACE).isEmpty());
+        assertFalse(queue.getLogsFrom(LogLevel.DEBUG).isEmpty());
+        assertFalse(queue.getLogsFrom(LogLevel.INFO).isEmpty());
+        assertFalse(queue.getLogsFrom(LogLevel.WARN).isEmpty());
+        assertTrue(queue.getLogsFrom(LogLevel.ERROR).isEmpty());
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/LogTreeTest.java b/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/LogTreeTest.java
index e98a9a9..b3928e9 100644
--- a/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/LogTreeTest.java
+++ b/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/LogTreeTest.java
@@ -21,10 +21,11 @@
 
 import java.util.Iterator;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.xwiki.logging.event.LogEvent;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
 /**
  * Test {@link LogTree}.
  *
@@ -33,19 +34,19 @@
 public class LogTreeTest
 {
     @Test
-    public void testTwoLevel0()
+    public void twoLevel0()
     {
         LogTree logTree = new LogTree();
 
         logTree.error("message1");
         logTree.error("message2");
 
-        Assert.assertEquals(2, logTree.size(false));
-        Assert.assertEquals(2, logTree.size(true));
+        assertEquals(2, logTree.size(false));
+        assertEquals(2, logTree.size(true));
     }
 
     @Test
-    public void test3Levels()
+    public void ThreeLevels()
     {
         LogTree logTree = new LogTree();
 
@@ -65,15 +66,15 @@ public void test3Levels()
         logTree.error(LogEvent.MARKER_END, "end22");
         logTree.error(LogEvent.MARKER_END, "end2");
 
-        Assert.assertEquals(2, logTree.size(false));
-        Assert.assertEquals(14, logTree.size(true));
+        assertEquals(2, logTree.size(false));
+        assertEquals(14, logTree.size(true));
 
         Iterator<LogEvent> iterator0 = logTree.iterator();
 
         LogTreeNode node1 = (LogTreeNode) iterator0.next();
 
-        Assert.assertEquals(3, node1.size(false));
-        Assert.assertEquals(6, node1.size(true));
+        assertEquals(3, node1.size(false));
+        assertEquals(6, node1.size(true));
 
         Iterator<LogEvent> iterator1 = node1.iterator();
 
@@ -81,7 +82,7 @@ public void test3Levels()
 
         LogTreeNode node11 = (LogTreeNode) iterator1.next();
 
-        Assert.assertEquals(3, node11.size(false));
-        Assert.assertEquals(3, node11.size(true));
+        assertEquals(3, node11.size(false));
+        assertEquals(3, node11.size(true));
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/LogUtilsTest.java b/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/LogUtilsTest.java
index c655254..b985f55 100644
--- a/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/LogUtilsTest.java
+++ b/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/LogUtilsTest.java
@@ -19,10 +19,12 @@
  */
 package org.xwiki.logging;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.xwiki.logging.event.LogEvent;
 
+import static org.junit.jupiter.api.Assertions.assertArrayEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
 /**
  * Test {@link LogUtils}.
  *
@@ -31,33 +33,33 @@
 public class LogUtilsTest
 {
     @Test
-    public void testTranslate()
+    public void translate()
     {
         LogEvent logEvent = new LogEvent(LogLevel.ERROR, "hello {} world {}", new Object[] { "one", "two" }, null);
 
         LogEvent translatedLogEvent = LogUtils.translate(logEvent, "hello2 {} world2 {}");
 
-        Assert.assertEquals("hello2 {} world2 {}", translatedLogEvent.getMessage());
-        Assert.assertArrayEquals(new Object[] { "one", "two" }, translatedLogEvent.getArgumentArray());
+        assertEquals("hello2 {} world2 {}", translatedLogEvent.getMessage());
+        assertArrayEquals(new Object[] { "one", "two" }, translatedLogEvent.getArgumentArray());
 
         translatedLogEvent = LogUtils.translate(logEvent, "hello2 {0} world2 {1}");
 
-        Assert.assertEquals("hello2 {} world2 {}", translatedLogEvent.getMessage());
-        Assert.assertArrayEquals(new Object[] { "one", "two" }, translatedLogEvent.getArgumentArray());
+        assertEquals("hello2 {} world2 {}", translatedLogEvent.getMessage());
+        assertArrayEquals(new Object[] { "one", "two" }, translatedLogEvent.getArgumentArray());
 
         translatedLogEvent = LogUtils.translate(logEvent, "hello2 {1} world2 {0}");
 
-        Assert.assertEquals("hello2 {} world2 {}", translatedLogEvent.getMessage());
-        Assert.assertArrayEquals(new Object[] { "two", "one" }, translatedLogEvent.getArgumentArray());
+        assertEquals("hello2 {} world2 {}", translatedLogEvent.getMessage());
+        assertArrayEquals(new Object[] { "two", "one" }, translatedLogEvent.getArgumentArray());
 
         translatedLogEvent = LogUtils.translate(logEvent, "hello2 {0}");
 
-        Assert.assertEquals("hello2 {}", translatedLogEvent.getMessage());
-        Assert.assertArrayEquals(new Object[] { "one", "two" }, translatedLogEvent.getArgumentArray());
+        assertEquals("hello2 {}", translatedLogEvent.getMessage());
+        assertArrayEquals(new Object[] { "one", "two" }, translatedLogEvent.getArgumentArray());
 
         translatedLogEvent = LogUtils.translate(logEvent, "hello2 {1}");
 
-        Assert.assertEquals("hello2 {}", translatedLogEvent.getMessage());
-        Assert.assertArrayEquals(new Object[] { "two", "two" }, translatedLogEvent.getArgumentArray());
+        assertEquals("hello2 {}", translatedLogEvent.getMessage());
+        assertArrayEquals(new Object[] { "two", "two" }, translatedLogEvent.getArgumentArray());
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/event/LogEventTest.java b/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/event/LogEventTest.java
index 4b797da..8afd271 100644
--- a/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/event/LogEventTest.java
+++ b/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/event/LogEventTest.java
@@ -22,11 +22,12 @@
 import java.util.Arrays;
 
 import org.apache.commons.lang3.ArrayUtils;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.xwiki.logging.LogLevel;
 import org.xwiki.logging.LogQueue;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
 /**
  * Test {@link LogEvent}.
  *
@@ -39,19 +40,19 @@ public void testGetMessageElements()
     {
         LogEvent logEvent = new LogEvent(null, LogLevel.ERROR, "", null, null);
 
-        Assert.assertEquals(logEvent.getMessageElements(), Arrays.asList(""));
+        assertEquals(logEvent.getMessageElements(), Arrays.asList(""));
 
         logEvent = new LogEvent(null, LogLevel.ERROR, "", ArrayUtils.EMPTY_OBJECT_ARRAY, null);
 
-        Assert.assertEquals(logEvent.getMessageElements(), Arrays.asList(""));
+        assertEquals(logEvent.getMessageElements(), Arrays.asList(""));
 
         logEvent = new LogEvent(null, LogLevel.ERROR, "message", ArrayUtils.EMPTY_OBJECT_ARRAY, null);
 
-        Assert.assertEquals(logEvent.getMessageElements(), Arrays.asList("message"));
+        assertEquals(logEvent.getMessageElements(), Arrays.asList("message"));
 
         logEvent = new LogEvent(null, LogLevel.ERROR, "message {}", new Object[] { "" }, null);
 
-        Assert.assertEquals(logEvent.getMessageElements(), Arrays.asList("message ", ""));
+        assertEquals(logEvent.getMessageElements(), Arrays.asList("message ", ""));
     }
 
     @Test
@@ -63,6 +64,6 @@ public void testLogLogger()
 
         logEvent.log(queue);
 
-        Assert.assertEquals(logEvent.getMessage(), "message");
+        assertEquals(logEvent.getMessage(), "message");
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/internal/helpers/ExtendedMessageFormatterTest.java b/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/internal/helpers/ExtendedMessageFormatterTest.java
index 8d4fe0f..52e8e82 100644
--- a/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/internal/helpers/ExtendedMessageFormatterTest.java
+++ b/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/internal/helpers/ExtendedMessageFormatterTest.java
@@ -21,8 +21,10 @@
 
 import java.util.Arrays;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 
 /**
  * Validate {@link ExtendedMessageFormatter}.
@@ -32,69 +34,68 @@
 public class ExtendedMessageFormatterTest
 {
     @Test
-    public void testNullMessage()
+    public void nullMessage()
     {
-        Assert.assertNull(ExtendedMessageFormatter.parseMessage(null, new Object[] {}));
+        assertNull(ExtendedMessageFormatter.parseMessage(null, new Object[] {}));
     }
 
     @Test
-    public void testEmptyMessage()
+    public void emptyMessage()
     {
-        Assert.assertEquals(Arrays.asList(""), ExtendedMessageFormatter.parseMessage("", new Object[] {}));
+        assertEquals(Arrays.asList(""), ExtendedMessageFormatter.parseMessage("", new Object[] {}));
     }
 
     @Test
-    public void testNullArguments()
+    public void nNullArguments()
     {
-        Assert.assertEquals(Arrays.asList("message"), ExtendedMessageFormatter.parseMessage("message", null));
+        assertEquals(Arrays.asList("message"), ExtendedMessageFormatter.parseMessage("message", null));
     }
 
     @Test
-    public void testEmptyArguments()
+    public void emptyArguments()
     {
-        Assert
-            .assertEquals(Arrays.asList("message"), ExtendedMessageFormatter.parseMessage("message", new Object[] {}));
+        assertEquals(Arrays.asList("message"), ExtendedMessageFormatter.parseMessage("message", new Object[] {}));
     }
 
     @Test
-    public void testPlain()
+    public void plain()
     {
-        Assert.assertEquals(Arrays.asList("message"),
+        assertEquals(Arrays.asList("message"),
             ExtendedMessageFormatter.parseMessage("message", new Object[] { "0" }));
     }
 
     @Test
-    public void testWithArguments()
+    public void withArguments()
     {
-        Assert.assertEquals(Arrays.asList("hello ", " world"),
+        assertEquals(Arrays.asList("hello ", " world"),
             ExtendedMessageFormatter.parseMessage("hello {} world", new Object[] { "0" }));
     }
 
     @Test
-    public void testWithoutArguments()
+    public void withoutArguments()
     {
-        Assert.assertEquals(Arrays.asList("hello {} world"),
+        assertEquals(Arrays.asList("hello {} world"),
             ExtendedMessageFormatter.parseMessage("hello {} world", new Object[] {}));
     }
 
     @Test
-    public void testWithEndingArgument()
+    public void withEndingArgument()
     {
-        Assert.assertEquals(Arrays.asList("hello ", ""),
+        assertEquals(Arrays.asList("hello ", ""),
             ExtendedMessageFormatter.parseMessage("hello {}", new Object[] { "0" }));
     }
 
     @Test
-    public void testWithoutTooMuchArguments()
+    public void withoutTooMuchArguments()
     {
-        Assert.assertEquals(Arrays.asList("hello ", " world"),
+        assertEquals(Arrays.asList("hello ", " world"),
             ExtendedMessageFormatter.parseMessage("hello {} world", new Object[] { "0", "1" }));
     }
 
     @Test
-    public void testWithOnlyArguments()
+    public void withOnlyArguments()
     {
-        Assert.assertEquals(Arrays.asList("", "", ""),
+        assertEquals(Arrays.asList("", "", ""),
             ExtendedMessageFormatter.parseMessage("{}{}", new Object[] { "0", "1" }));
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/internal/helpers/MessageParserTest.java b/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/internal/helpers/MessageParserTest.java
index 48144b5..a86bc66 100644
--- a/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/internal/helpers/MessageParserTest.java
+++ b/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/internal/helpers/MessageParserTest.java
@@ -19,10 +19,12 @@
  */
 package org.xwiki.logging.internal.helpers;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.xwiki.logging.internal.helpers.MessageParser.MessageIndex;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
+
 /**
  * Validate {@link MessageParser}.
  *
@@ -31,90 +33,90 @@
 public class MessageParserTest
 {
     @Test
-    public void testPlain()
+    public void plain()
     {
         MessageParser parser = new MessageParser("plain text", false);
 
-        Assert.assertEquals("plain text", parser.next().getString());
-        Assert.assertNull(parser.next());
+        assertEquals("plain text", parser.next().getString());
+        assertNull(parser.next());
 
         parser = new MessageParser("plain text", true);
 
-        Assert.assertEquals("plain text", parser.next().getString());
-        Assert.assertNull(parser.next());
+        assertEquals("plain text", parser.next().getString());
+        assertNull(parser.next());
     }
 
     @Test
-    public void testLogWithTwoArguments()
+    public void logWithTwoArguments()
     {
         MessageParser parser = new MessageParser("hello {} world {}", false);
 
-        Assert.assertEquals("hello ", parser.next().getString());
-        Assert.assertEquals("{}", parser.next().getString());
-        Assert.assertEquals(0, ((MessageIndex) parser.getCurrentMessageElement()).getIndex());
-        Assert.assertEquals(" world ", parser.next().getString());
-        Assert.assertEquals("{}", parser.next().getString());
-        Assert.assertEquals(1, ((MessageIndex) parser.getCurrentMessageElement()).getIndex());
-        Assert.assertNull(parser.next());
+        assertEquals("hello ", parser.next().getString());
+        assertEquals("{}", parser.next().getString());
+        assertEquals(0, ((MessageIndex) parser.getCurrentMessageElement()).getIndex());
+        assertEquals(" world ", parser.next().getString());
+        assertEquals("{}", parser.next().getString());
+        assertEquals(1, ((MessageIndex) parser.getCurrentMessageElement()).getIndex());
+        assertNull(parser.next());
 
         parser = new MessageParser("hello {} world {}", true);
 
-        Assert.assertEquals("hello ", parser.next().getString());
-        Assert.assertEquals("{}", parser.next().getString());
-        Assert.assertEquals(0, ((MessageIndex) parser.getCurrentMessageElement()).getIndex());
-        Assert.assertEquals(" world ", parser.next().getString());
-        Assert.assertEquals("{}", parser.next().getString());
-        Assert.assertEquals(1, ((MessageIndex) parser.getCurrentMessageElement()).getIndex());
-        Assert.assertNull(parser.next());
+        assertEquals("hello ", parser.next().getString());
+        assertEquals("{}", parser.next().getString());
+        assertEquals(0, ((MessageIndex) parser.getCurrentMessageElement()).getIndex());
+        assertEquals(" world ", parser.next().getString());
+        assertEquals("{}", parser.next().getString());
+        assertEquals(1, ((MessageIndex) parser.getCurrentMessageElement()).getIndex());
+        assertNull(parser.next());
     }
 
     @Test
-    public void testLogWithEscaping()
+    public void logWithEscaping()
     {
         MessageParser parser = new MessageParser("one \\{} two \\\\{} three \\\\\\{}", false);
 
-        Assert.assertEquals("one {} two \\", parser.next().getString());
-        Assert.assertEquals("\\{}", parser.next().getString());
-        Assert.assertEquals(0, ((MessageIndex) parser.getCurrentMessageElement()).getIndex());
-        Assert.assertEquals(" three \\\\", parser.next().getString());
-        Assert.assertEquals("\\{}", parser.next().getString());
-        Assert.assertEquals(1, ((MessageIndex) parser.getCurrentMessageElement()).getIndex());
-        Assert.assertNull(parser.next());
+        assertEquals("one {} two \\", parser.next().getString());
+        assertEquals("\\{}", parser.next().getString());
+        assertEquals(0, ((MessageIndex) parser.getCurrentMessageElement()).getIndex());
+        assertEquals(" three \\\\", parser.next().getString());
+        assertEquals("\\{}", parser.next().getString());
+        assertEquals(1, ((MessageIndex) parser.getCurrentMessageElement()).getIndex());
+        assertNull(parser.next());
 
         parser = new MessageParser("one \\{} two \\\\{} three \\\\\\{}", true);
 
-        Assert.assertEquals("one {} two \\", parser.next().getString());
-        Assert.assertEquals("\\{}", parser.next().getString());
-        Assert.assertEquals(0, ((MessageIndex) parser.getCurrentMessageElement()).getIndex());
-        Assert.assertEquals(" three \\\\", parser.next().getString());
-        Assert.assertEquals("\\{}", parser.next().getString());
-        Assert.assertEquals(1, ((MessageIndex) parser.getCurrentMessageElement()).getIndex());
-        Assert.assertNull(parser.next());
+        assertEquals("one {} two \\", parser.next().getString());
+        assertEquals("\\{}", parser.next().getString());
+        assertEquals(0, ((MessageIndex) parser.getCurrentMessageElement()).getIndex());
+        assertEquals(" three \\\\", parser.next().getString());
+        assertEquals("\\{}", parser.next().getString());
+        assertEquals(1, ((MessageIndex) parser.getCurrentMessageElement()).getIndex());
+        assertNull(parser.next());
     }
 
     @Test
-    public void testLogWithIndices()
+    public void logWithIndices()
     {
         MessageParser parser;
 
         parser = new MessageParser("one {1} zero {0} two {}", false);
 
-        Assert.assertEquals("one {1} zero {0} two ", parser.next().getString());
-        Assert.assertEquals("{}", parser.next().getString());
-        Assert.assertEquals(0, ((MessageIndex) parser.getCurrentMessageElement()).getIndex());
-        Assert.assertNull(parser.next());
+        assertEquals("one {1} zero {0} two ", parser.next().getString());
+        assertEquals("{}", parser.next().getString());
+        assertEquals(0, ((MessageIndex) parser.getCurrentMessageElement()).getIndex());
+        assertNull(parser.next());
 
         parser = new MessageParser("one {1} zero {0} two {}", true);
 
-        Assert.assertEquals("one ", parser.next().getString());
-        Assert.assertEquals("{1}", parser.next().getString());
-        Assert.assertEquals(1, ((MessageIndex) parser.getCurrentMessageElement()).getIndex());
-        Assert.assertEquals(" zero ", parser.next().getString());
-        Assert.assertEquals("{0}", parser.next().getString());
-        Assert.assertEquals(0, ((MessageIndex) parser.getCurrentMessageElement()).getIndex());
-        Assert.assertEquals(" two ", parser.next().getString());
-        Assert.assertEquals("{}", parser.next().getString());
-        Assert.assertEquals(2, ((MessageIndex) parser.getCurrentMessageElement()).getIndex());
-        Assert.assertNull(parser.next());
+        assertEquals("one ", parser.next().getString());
+        assertEquals("{1}", parser.next().getString());
+        assertEquals(1, ((MessageIndex) parser.getCurrentMessageElement()).getIndex());
+        assertEquals(" zero ", parser.next().getString());
+        assertEquals("{0}", parser.next().getString());
+        assertEquals(0, ((MessageIndex) parser.getCurrentMessageElement()).getIndex());
+        assertEquals(" two ", parser.next().getString());
+        assertEquals("{}", parser.next().getString());
+        assertEquals(2, ((MessageIndex) parser.getCurrentMessageElement()).getIndex());
+        assertNull(parser.next());
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/marker/TranslationMarkerTest.java b/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/marker/TranslationMarkerTest.java
index c4da1af..0a0ee9c 100644
--- a/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/marker/TranslationMarkerTest.java
+++ b/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/marker/TranslationMarkerTest.java
@@ -19,12 +19,15 @@
  */
 package org.xwiki.logging.marker;
 
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.slf4j.Marker;
 import org.slf4j.MarkerFactory;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
 /**
  * Test {@link TranslationMarker}.
  *
@@ -34,7 +37,7 @@
 {
     private TranslationMarker marker;
 
-    @Before
+    @BeforeEach
     public void setUp()
     {
         this.marker = new TranslationMarker("translation.key");
@@ -43,57 +46,58 @@ public void setUp()
     @Test
     public void getTranslationKey()
     {
-        Assert.assertEquals("translation.key", this.marker.getTranslationKey());
+        assertEquals("translation.key", this.marker.getTranslationKey());
     }
 
     @Test
     public void getName()
     {
-        Assert.assertEquals(TranslationMarker.NAME, this.marker.getName());
+        assertEquals(TranslationMarker.NAME, this.marker.getName());
     }
 
     @Test
     public void add()
     {
         this.marker.add(MarkerFactory.getMarker("marker"));
+        assertTrue(this.marker.hasChildren());
     }
 
     @Test
     public void remove()
     {
-        Assert.assertFalse(this.marker.remove(null));
+        assertFalse(this.marker.remove(null));
     }
 
     @Test
     public void hasChildren()
     {
-        Assert.assertFalse(this.marker.hasChildren());
+        assertFalse(this.marker.hasChildren());
     }
 
     @Test
     public void hasReferences()
     {
-        Assert.assertFalse(this.marker.hasReferences());
+        assertFalse(this.marker.hasReferences());
     }
 
     @Test
     public void iterator()
     {
-        Assert.assertFalse(this.marker.iterator().hasNext());
+        assertFalse(this.marker.iterator().hasNext());
     }
 
     @Test
     public void containsString()
     {
-        Assert.assertFalse(this.marker.contains("name"));
-        Assert.assertTrue(this.marker.contains(this.marker.getName()));
+        assertFalse(this.marker.contains("name"));
+        assertTrue(this.marker.contains(this.marker.getName()));
     }
 
     @Test
     public void containsMarker()
     {
-        Assert.assertFalse(this.marker.contains(MarkerFactory.getMarker("name")));
-        Assert.assertTrue(this.marker.contains(this.marker));
+        assertFalse(this.marker.contains(MarkerFactory.getMarker("name")));
+        assertTrue(this.marker.contains(this.marker));
     }
 
     @Test
@@ -103,9 +107,9 @@ public void testHashCode()
         Marker otherTMarker = new TranslationMarker("translation.otherkey");
         Marker otherMarker = MarkerFactory.getMarker("name");
 
-        Assert.assertEquals(equalsTMarker.hashCode(), this.marker.hashCode());
-        Assert.assertFalse(this.marker.hashCode() == otherTMarker.hashCode());
-        Assert.assertFalse(this.marker.hashCode() == otherMarker.hashCode());
+        assertEquals(equalsTMarker.hashCode(), this.marker.hashCode());
+        assertFalse(this.marker.hashCode() == otherTMarker.hashCode());
+        assertFalse(this.marker.hashCode() == otherMarker.hashCode());
     }
 
     @Test
@@ -115,8 +119,8 @@ public void testEquals()
         Marker otherTMarker = new TranslationMarker("translation.otherkey");
         Marker otherMarker = MarkerFactory.getMarker("name");
 
-        Assert.assertEquals(equalsTMarker, this.marker);
-        Assert.assertFalse(this.marker.equals(otherTMarker));
-        Assert.assertFalse(this.marker.equals(otherMarker));
+        assertEquals(equalsTMarker, this.marker);
+        assertFalse(this.marker.equals(otherTMarker));
+        assertFalse(this.marker.equals(otherMarker));
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/test/Utils.java b/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/test/Utils.java
index be487f0..070f685 100644
--- a/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/test/Utils.java
+++ b/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-api/src/test/java/org/xwiki/logging/test/Utils.java
@@ -22,12 +22,15 @@
 import java.util.Arrays;
 import java.util.Iterator;
 
-import org.junit.Assert;
 import org.slf4j.MarkerFactory;
 import org.xwiki.logging.LogLevel;
 import org.xwiki.logging.Logger;
 import org.xwiki.logging.event.LogEvent;
 
+import static org.junit.jupiter.api.Assertions.assertArrayEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
+
 public class Utils
 {
     public static void populateLogger(Logger logger)
@@ -116,122 +119,122 @@ private static int validateLogger(int index, LogLevel level, Iterator<LogEvent>
         LogEvent event;
 
         event = logs.next();
-        Assert.assertArrayEquals(new Object[] {}, event.getArgumentArray());
-        Assert.assertEquals(level.toString(), event.getFormattedMessage());
-        Assert.assertEquals(level, event.getLevel());
-        Assert.assertEquals(level.toString(), event.getMessage());
-        Assert.assertEquals(Arrays.asList(level.toString()), event.getMessageElements());
-        Assert.assertNull(event.getThrowable());
-        Assert.assertEquals(LogEvent.MARKER_BEGIN, event.getMarker());
+        assertArrayEquals(new Object[] {}, event.getArgumentArray());
+        assertEquals(level.toString(), event.getFormattedMessage());
+        assertEquals(level, event.getLevel());
+        assertEquals(level.toString(), event.getMessage());
+        assertEquals(Arrays.asList(level.toString()), event.getMessageElements());
+        assertNull(event.getThrowable());
+        assertEquals(LogEvent.MARKER_BEGIN, event.getMarker());
 
         event = logs.next();
-        Assert.assertArrayEquals(new Object[] {}, event.getArgumentArray());
-        Assert.assertEquals("msg" + index, event.getFormattedMessage());
-        Assert.assertEquals(level, event.getLevel());
-        Assert.assertEquals("msg" + index, event.getMessage());
-        Assert.assertEquals(Arrays.asList("msg" + index), event.getMessageElements());
-        Assert.assertNull(event.getThrowable());
-        Assert.assertNull(event.getMarker());
+        assertArrayEquals(new Object[] {}, event.getArgumentArray());
+        assertEquals("msg" + index, event.getFormattedMessage());
+        assertEquals(level, event.getLevel());
+        assertEquals("msg" + index, event.getMessage());
+        assertEquals(Arrays.asList("msg" + index), event.getMessageElements());
+        assertNull(event.getThrowable());
+        assertNull(event.getMarker());
         ++index;
 
         event = logs.next();
-        Assert.assertArrayEquals(new Object[] { index }, event.getArgumentArray());
-        Assert.assertEquals("msg" + index, event.getFormattedMessage());
-        Assert.assertEquals(level, event.getLevel());
-        Assert.assertEquals("msg{}", event.getMessage());
-        Assert.assertEquals(Arrays.asList("msg", ""), event.getMessageElements());
-        Assert.assertNull(event.getThrowable());
-        Assert.assertNull(event.getMarker());
+        assertArrayEquals(new Object[] { index }, event.getArgumentArray());
+        assertEquals("msg" + index, event.getFormattedMessage());
+        assertEquals(level, event.getLevel());
+        assertEquals("msg{}", event.getMessage());
+        assertEquals(Arrays.asList("msg", ""), event.getMessageElements());
+        assertNull(event.getThrowable());
+        assertNull(event.getMarker());
         ++index;
 
         event = logs.next();
-        Assert.assertArrayEquals(new Object[] { "msg", index }, event.getArgumentArray());
-        Assert.assertEquals("msg" + index, event.getFormattedMessage());
-        Assert.assertEquals(level, event.getLevel());
-        Assert.assertEquals("{}{}", event.getMessage());
-        Assert.assertEquals(Arrays.asList("", "", ""), event.getMessageElements());
-        Assert.assertNull(event.getThrowable());
-        Assert.assertNull(event.getMarker());
+        assertArrayEquals(new Object[] { "msg", index }, event.getArgumentArray());
+        assertEquals("msg" + index, event.getFormattedMessage());
+        assertEquals(level, event.getLevel());
+        assertEquals("{}{}", event.getMessage());
+        assertEquals(Arrays.asList("", "", ""), event.getMessageElements());
+        assertNull(event.getThrowable());
+        assertNull(event.getMarker());
         ++index;
 
         event = logs.next();
-        Assert.assertArrayEquals(new Object[] { "m", "s", "g", index }, event.getArgumentArray());
-        Assert.assertEquals("msg" + index, event.getFormattedMessage());
-        Assert.assertEquals(level, event.getLevel());
-        Assert.assertEquals("{}{}{}{}", event.getMessage());
-        Assert.assertEquals(Arrays.asList("", "", "", "", ""), event.getMessageElements());
-        Assert.assertNull(event.getThrowable());
-        Assert.assertNull(event.getMarker());
+        assertArrayEquals(new Object[] { "m", "s", "g", index }, event.getArgumentArray());
+        assertEquals("msg" + index, event.getFormattedMessage());
+        assertEquals(level, event.getLevel());
+        assertEquals("{}{}{}{}", event.getMessage());
+        assertEquals(Arrays.asList("", "", "", "", ""), event.getMessageElements());
+        assertNull(event.getThrowable());
+        assertNull(event.getMarker());
         ++index;
 
         event = logs.next();
-        Assert.assertArrayEquals(new Object[] {}, event.getArgumentArray());
-        Assert.assertEquals("msg" + index, event.getFormattedMessage());
-        Assert.assertEquals(level, event.getLevel());
-        Assert.assertEquals("msg" + index, event.getMessage());
-        Assert.assertEquals(Arrays.asList("msg" + index), event.getMessageElements());
-        Assert.assertEquals("msg" + index, event.getThrowable().getMessage());
-        Assert.assertNull(event.getMarker());
+        assertArrayEquals(new Object[] {}, event.getArgumentArray());
+        assertEquals("msg" + index, event.getFormattedMessage());
+        assertEquals(level, event.getLevel());
+        assertEquals("msg" + index, event.getMessage());
+        assertEquals(Arrays.asList("msg" + index), event.getMessageElements());
+        assertEquals("msg" + index, event.getThrowable().getMessage());
+        assertNull(event.getMarker());
         ++index;
 
         event = logs.next();
-        Assert.assertArrayEquals(new Object[] {}, event.getArgumentArray());
-        Assert.assertEquals("msg" + index, event.getFormattedMessage());
-        Assert.assertEquals(level, event.getLevel());
-        Assert.assertEquals("msg" + index, event.getMessage());
-        Assert.assertEquals(Arrays.asList("msg" + index), event.getMessageElements());
-        Assert.assertNull(event.getThrowable());
-        Assert.assertEquals(MarkerFactory.getMarker("marker" + index), event.getMarker());
+        assertArrayEquals(new Object[] {}, event.getArgumentArray());
+        assertEquals("msg" + index, event.getFormattedMessage());
+        assertEquals(level, event.getLevel());
+        assertEquals("msg" + index, event.getMessage());
+        assertEquals(Arrays.asList("msg" + index), event.getMessageElements());
+        assertNull(event.getThrowable());
+        assertEquals(MarkerFactory.getMarker("marker" + index), event.getMarker());
         ++index;
 
         event = logs.next();
-        Assert.assertArrayEquals(new Object[] { index }, event.getArgumentArray());
-        Assert.assertEquals("msg" + index, event.getFormattedMessage());
-        Assert.assertEquals(level, event.getLevel());
-        Assert.assertEquals("msg{}", event.getMessage());
-        Assert.assertEquals(Arrays.asList("msg", ""), event.getMessageElements());
-        Assert.assertNull(event.getThrowable());
-        Assert.assertEquals(MarkerFactory.getMarker("marker" + index), event.getMarker());
+        assertArrayEquals(new Object[] { index }, event.getArgumentArray());
+        assertEquals("msg" + index, event.getFormattedMessage());
+        assertEquals(level, event.getLevel());
+        assertEquals("msg{}", event.getMessage());
+        assertEquals(Arrays.asList("msg", ""), event.getMessageElements());
+        assertNull(event.getThrowable());
+        assertEquals(MarkerFactory.getMarker("marker" + index), event.getMarker());
         ++index;
 
         event = logs.next();
-        Assert.assertArrayEquals(new Object[] { "msg", index }, event.getArgumentArray());
-        Assert.assertEquals("msg" + index, event.getFormattedMessage());
-        Assert.assertEquals(level, event.getLevel());
-        Assert.assertEquals("{}{}", event.getMessage());
-        Assert.assertEquals(Arrays.asList("", "", ""), event.getMessageElements());
-        Assert.assertNull(event.getThrowable());
-        Assert.assertEquals(MarkerFactory.getMarker("marker" + index), event.getMarker());
+        assertArrayEquals(new Object[] { "msg", index }, event.getArgumentArray());
+        assertEquals("msg" + index, event.getFormattedMessage());
+        assertEquals(level, event.getLevel());
+        assertEquals("{}{}", event.getMessage());
+        assertEquals(Arrays.asList("", "", ""), event.getMessageElements());
+        assertNull(event.getThrowable());
+        assertEquals(MarkerFactory.getMarker("marker" + index), event.getMarker());
         ++index;
 
         event = logs.next();
-        Assert.assertArrayEquals(new Object[] { "m", "s", "g", index }, event.getArgumentArray());
-        Assert.assertEquals("msg" + index, event.getFormattedMessage());
-        Assert.assertEquals(level, event.getLevel());
-        Assert.assertEquals("{}{}{}{}", event.getMessage());
-        Assert.assertEquals(Arrays.asList("", "", "", "", ""), event.getMessageElements());
-        Assert.assertNull(event.getThrowable());
-        Assert.assertEquals(MarkerFactory.getMarker("marker" + index), event.getMarker());
+        assertArrayEquals(new Object[] { "m", "s", "g", index }, event.getArgumentArray());
+        assertEquals("msg" + index, event.getFormattedMessage());
+        assertEquals(level, event.getLevel());
+        assertEquals("{}{}{}{}", event.getMessage());
+        assertEquals(Arrays.asList("", "", "", "", ""), event.getMessageElements());
+        assertNull(event.getThrowable());
+        assertEquals(MarkerFactory.getMarker("marker" + index), event.getMarker());
         ++index;
 
         event = logs.next();
-        Assert.assertArrayEquals(new Object[] {}, event.getArgumentArray());
-        Assert.assertEquals("msg" + index, event.getFormattedMessage());
-        Assert.assertEquals(level, event.getLevel());
-        Assert.assertEquals("msg" + index, event.getMessage());
-        Assert.assertEquals(Arrays.asList("msg" + index), event.getMessageElements());
-        Assert.assertEquals("msg" + index, event.getThrowable().getMessage());
-        Assert.assertEquals(MarkerFactory.getMarker("marker" + index), event.getMarker());
+        assertArrayEquals(new Object[] {}, event.getArgumentArray());
+        assertEquals("msg" + index, event.getFormattedMessage());
+        assertEquals(level, event.getLevel());
+        assertEquals("msg" + index, event.getMessage());
+        assertEquals(Arrays.asList("msg" + index), event.getMessageElements());
+        assertEquals("msg" + index, event.getThrowable().getMessage());
+        assertEquals(MarkerFactory.getMarker("marker" + index), event.getMarker());
         ++index;
 
         event = logs.next();
-        Assert.assertArrayEquals(new Object[] {}, event.getArgumentArray());
-        Assert.assertEquals(level.toString(), event.getFormattedMessage());
-        Assert.assertEquals(level, event.getLevel());
-        Assert.assertEquals(level.toString(), event.getMessage());
-        Assert.assertEquals(Arrays.asList(level.toString()), event.getMessageElements());
-        Assert.assertNull(event.getThrowable());
-        Assert.assertEquals(LogEvent.MARKER_END, event.getMarker());
+        assertArrayEquals(new Object[] {}, event.getArgumentArray());
+        assertEquals(level.toString(), event.getFormattedMessage());
+        assertEquals(level, event.getLevel());
+        assertEquals(level.toString(), event.getMessage());
+        assertEquals(Arrays.asList(level.toString()), event.getMessageElements());
+        assertNull(event.getThrowable());
+        assertEquals(LogEvent.MARKER_END, event.getMarker());
 
         return index;
     }
diff --git a/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-logback/pom.xml b/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-logback/pom.xml
index 949746d..c492cfb 100644
--- a/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-logback/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-logging/xwiki-commons-logging-logback/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-logging</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-logging-logback</artifactId>
   <name>XWiki Commons - Logging - Logback</name>
@@ -33,6 +33,7 @@
   <description>XWiki Commons - Logging - Logback</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.93</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>83</xwiki.pitest.mutationThreshold>
   </properties>
   <dependencies>
     <dependency>
diff --git a/xwiki-commons-core/xwiki-commons-management/pom.xml b/xwiki-commons-core/xwiki-commons-management/pom.xml
index 281d481..9b0caab 100644
--- a/xwiki-commons-core/xwiki-commons-management/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-management/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-core</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-management</artifactId>
   <name>XWiki Commons - Management</name>
diff --git a/xwiki-commons-core/xwiki-commons-observation/pom.xml b/xwiki-commons-core/xwiki-commons-observation/pom.xml
index 701b4a7..16e7b8d 100644
--- a/xwiki-commons-core/xwiki-commons-observation/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-observation/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-core</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-observation</artifactId>
   <name>XWiki Commons - Observation - Parent POM</name>
diff --git a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/build.gradle b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/build.gradle
index 269e331..0820244 100644
--- a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/build.gradle
+++ b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/build.gradle
@@ -21,6 +21,7 @@
 // WARNING: NOT WORKING, WORK IN PROGRESS. USE THE MAVEN BUILD WHICH IS THE XWIKI OFFICIAL BUILD TOOL.
 
 dependencies {
-    compile project(':xwiki-component-api')
-    testCompile project(':xwiki-test-simple')
+    api project(':xwiki-component-api')
+    implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"
+    testImplementation project(':xwiki-test-simple')
 }
\ No newline at end of file
diff --git a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/pom.xml b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/pom.xml
index ea84dd2..0024afc 100644
--- a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-observation</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-observation-api</artifactId>
   <name>XWiki Commons - Observation - API</name>
@@ -33,6 +33,7 @@
   <description>XWiki Commons - Observation - API</description>
   <properties>
     <xwiki.jacoco.instructionRatio>1.00</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>100</xwiki.pitest.mutationThreshold>
   </properties>
   <dependencies>
     <dependency>
diff --git a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/EventListenerTest.java b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/EventListenerTest.java
index e0a5990..81b3787 100644
--- a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/EventListenerTest.java
+++ b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/EventListenerTest.java
@@ -22,11 +22,17 @@
 import java.util.Arrays;
 import java.util.List;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.xwiki.observation.event.ActionExecutionEvent;
 import org.xwiki.observation.event.Event;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+/**
+ * Unit tests for {@link AbstractEventListener}.
+ *
+ * @version $Id$
+ */
 public class EventListenerTest
 {
     static class TestEventListener extends AbstractEventListener
@@ -47,28 +53,26 @@ public void onEvent(Event event, Object source, Object data)
         }
     }
 
-    // Tests
-
     @Test
-    public void testAbstractEventListenerArray()
+    public void constructorWithTwoEvents()
     {
         TestEventListener listener =
             new TestEventListener("name", new ActionExecutionEvent("action1"), new ActionExecutionEvent("action2"));
 
-        Assert.assertEquals("name", listener.getName());
-        Assert.assertEquals(Arrays.asList(new ActionExecutionEvent("action1"), new ActionExecutionEvent("action2")),
+        assertEquals("name", listener.getName());
+        assertEquals(Arrays.asList(new ActionExecutionEvent("action1"), new ActionExecutionEvent("action2")),
             listener.getEvents());
     }
 
     @Test
-    public void testAbstractEventListenerList()
+    public void constructorWithList()
     {
         TestEventListener listener =
             new TestEventListener("name", Arrays.asList(new ActionExecutionEvent("action1"), new ActionExecutionEvent(
                 "action2")));
 
-        Assert.assertEquals("name", listener.getName());
-        Assert.assertEquals(Arrays.asList(new ActionExecutionEvent("action1"), new ActionExecutionEvent("action2")),
+        assertEquals("name", listener.getName());
+        assertEquals(Arrays.asList(new ActionExecutionEvent("action1"), new ActionExecutionEvent("action2")),
             listener.getEvents());
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/WrappedThreadEventListenerTest.java b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/WrappedThreadEventListenerTest.java
index 681628c..a9c46e3 100644
--- a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/WrappedThreadEventListenerTest.java
+++ b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/WrappedThreadEventListenerTest.java
@@ -19,16 +19,19 @@
  */
 package org.xwiki.observation;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 import org.xwiki.observation.event.AllEvent;
 
+/**
+ * Unit tests for {@link WrappedThreadEventListener}.
+ *
+ * @version $Id$
+ */
 public class WrappedThreadEventListenerTest
 {
     private EventListener listenermock = Mockito.mock(EventListener.class);
 
-    // Tests
-
     @Test
     public void testWrapp()
     {
diff --git a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/event/ActionExecutionEventTest.java b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/event/ActionExecutionEventTest.java
index acc6736..82d9325 100644
--- a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/event/ActionExecutionEventTest.java
+++ b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/event/ActionExecutionEventTest.java
@@ -19,40 +19,46 @@
  */
 package org.xwiki.observation.event;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+/**
+ * Unit tests for {@link ActionExecutionEvent}.
+ *
+ * @version $Id$
+ */
 public class ActionExecutionEventTest
 {
-    // Tests
-
     @Test
     public void testActionExecutionEventString()
     {
         ActionExecutionEvent event = new ActionExecutionEvent("action");
 
-        Assert.assertEquals("action", event.getActionName());
+        assertEquals("action", event.getActionName());
 
         // matches
 
-        Assert.assertTrue(event.matches(event));
-        Assert.assertTrue(event.matches(new ActionExecutionEvent("action")));
+        assertTrue(event.matches(event));
+        assertTrue(event.matches(new ActionExecutionEvent("action")));
 
-        Assert.assertFalse(event.matches(new ActionExecutionEvent("action2")));
-        Assert.assertFalse(event.matches(AllEvent.ALLEVENT));
+        assertFalse(event.matches(new ActionExecutionEvent("action2")));
+        assertFalse(event.matches(AllEvent.ALLEVENT));
 
         // equals
 
-        Assert.assertEquals(event, event);
-        Assert.assertEquals(event, new ActionExecutionEvent("action"));
+        assertEquals(event, event);
+        assertEquals(event, new ActionExecutionEvent("action"));
 
-        Assert.assertFalse(event.equals(new ActionExecutionEvent("action2")));
-        Assert.assertFalse(event.equals(AllEvent.ALLEVENT));
+        assertFalse(event.equals(new ActionExecutionEvent("action2")));
+        assertFalse(event.equals(AllEvent.ALLEVENT));
 
         // hashcode
 
-        Assert.assertEquals(event.hashCode(), new ActionExecutionEvent("action").hashCode());
-
-        Assert.assertNotEquals(event.hashCode(), new ActionExecutionEvent("action2").hashCode());
+        assertEquals(event.hashCode(), new ActionExecutionEvent("action").hashCode());
+        assertNotEquals(event.hashCode(), new ActionExecutionEvent("action2").hashCode());
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/event/AllEventTest.java b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/event/AllEventTest.java
index 43cf14b..9bd3aaa 100644
--- a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/event/AllEventTest.java
+++ b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/event/AllEventTest.java
@@ -19,15 +19,21 @@
  */
 package org.xwiki.observation.event;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+/**
+ * Unit tests for {@link AllEvent}.
+ *
+ * @version $Id$
+ */
 public class AllEventTest
 {
     @Test
-    public void testAllEvent()
+    public void allEventMatching()
     {
-        Assert.assertTrue(AllEvent.ALLEVENT.matches(AllEvent.ALLEVENT));
-        Assert.assertTrue(AllEvent.ALLEVENT.matches(null));
+        assertTrue(AllEvent.ALLEVENT.matches(AllEvent.ALLEVENT));
+        assertTrue(AllEvent.ALLEVENT.matches(null));
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/event/ApplicationStartedEventTest.java b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/event/ApplicationStartedEventTest.java
index 3856c28..fa3b49b 100644
--- a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/event/ApplicationStartedEventTest.java
+++ b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/event/ApplicationStartedEventTest.java
@@ -19,18 +19,24 @@
  */
 package org.xwiki.observation.event;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+/**
+ * Unit tests for {@link ApplicationStartedEvent}.
+ *
+ * @version $Id$
+ */
 public class ApplicationStartedEventTest
 {
     @Test
-    public void testApplicationStartedEvent()
+    public void applicationStartedEventMatching()
     {
         ApplicationStartedEvent event = new ApplicationStartedEvent();
 
-        Assert.assertTrue(event.matches(event));
-
-        Assert.assertFalse(event.matches(AllEvent.ALLEVENT));
+        assertTrue(event.matches(event));
+        assertFalse(event.matches(AllEvent.ALLEVENT));
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/event/ApplicationStoppedEventTest.java b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/event/ApplicationStoppedEventTest.java
index 07aa5e7..37de7bf 100644
--- a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/event/ApplicationStoppedEventTest.java
+++ b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/event/ApplicationStoppedEventTest.java
@@ -19,18 +19,23 @@
  */
 package org.xwiki.observation.event;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-public class ApplicationStoppedEventTest
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+/**
+ * Unit tests for {@link ApplicationStoppedEvent}.
+ *
+ * @version $Id$
+ */public class ApplicationStoppedEventTest
 {
     @Test
     public void testApplicationStoppedEvent()
     {
         ApplicationStoppedEvent event = new ApplicationStoppedEvent();
 
-        Assert.assertTrue(event.matches(event));
-
-        Assert.assertFalse(event.matches(AllEvent.ALLEVENT));
+        assertTrue(event.matches(event));
+        assertFalse(event.matches(AllEvent.ALLEVENT));
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/event/CancelableEventTest.java b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/event/CancelableEventTest.java
index 6bc470e..7023096 100644
--- a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/event/CancelableEventTest.java
+++ b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/event/CancelableEventTest.java
@@ -19,18 +19,27 @@
  */
 package org.xwiki.observation.event;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.xwiki.observation.event.filter.EventFilter;
 import org.xwiki.observation.event.filter.FixedNameEventFilter;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+/**
+ * Unit tests for {@link AbstractCancelableEvent}.
+ *
+ * @version $Id$
+ */
 public class CancelableEventTest
 {
     static class TestCancelableEvent extends AbstractCancelableEvent
     {
         public TestCancelableEvent()
         {
-
         }
 
         public TestCancelableEvent(String name)
@@ -46,132 +55,129 @@ public TestCancelableEvent(EventFilter eventFilter)
 
     static class TestCancelableEvent2 extends AbstractCancelableEvent
     {
-
     }
 
-    // Tests
-
     @Test
-    public void testAbstractCancelableEvent()
+    public void matchesEqualsHashcodeWhenDefaultConstructor()
     {
         TestCancelableEvent event = new TestCancelableEvent();
 
         // matches
 
-        Assert.assertTrue(event.matches(event));
-        Assert.assertTrue(event.matches(new TestCancelableEvent("name")));
-        Assert.assertTrue(event.matches(new TestCancelableEvent(new FixedNameEventFilter("name2"))));
+        assertTrue(event.matches(event));
+        assertTrue(event.matches(new TestCancelableEvent("name")));
+        assertTrue(event.matches(new TestCancelableEvent(new FixedNameEventFilter("name2"))));
 
-        Assert.assertFalse(event.matches(new TestCancelableEvent2()));
+        assertFalse(event.matches(new TestCancelableEvent2()));
 
         // equals
 
-        Assert.assertEquals(event, event);
-        Assert.assertEquals(event, new TestCancelableEvent());
+        assertEquals(event, event);
+        assertEquals(event, new TestCancelableEvent());
 
-        Assert.assertFalse(event.equals(new TestCancelableEvent("name")));
-        Assert.assertFalse(event.equals(new TestCancelableEvent(new FixedNameEventFilter("name"))));
-        Assert.assertFalse(event.equals(new TestCancelableEvent2()));
+        assertFalse(event.equals(new TestCancelableEvent("name")));
+        assertFalse(event.equals(new TestCancelableEvent(new FixedNameEventFilter("name"))));
+        assertFalse(event.equals(new TestCancelableEvent2()));
 
         // hashcode
 
-        Assert.assertEquals(event.hashCode(), new TestCancelableEvent().hashCode());
-        Assert.assertFalse(event.equals(new TestCancelableEvent2()));
+        assertEquals(event.hashCode(), new TestCancelableEvent().hashCode());
+        assertFalse(event.equals(new TestCancelableEvent2()));
 
-        Assert.assertNotEquals(event.hashCode(), new TestCancelableEvent("name").hashCode());
-        Assert.assertNotEquals(event.hashCode(), new TestCancelableEvent(new FixedNameEventFilter("name")).hashCode());
+        assertNotEquals(event.hashCode(), new TestCancelableEvent("name").hashCode());
+        assertNotEquals(event.hashCode(), new TestCancelableEvent(new FixedNameEventFilter("name")).hashCode());
     }
 
     @Test
-    public void testAbstractCancelableEventEventFilter()
+    public void matchesEqualsHashcodeWhenFixedNameEvenFilterConstructor()
     {
         TestCancelableEvent event = new TestCancelableEvent(new FixedNameEventFilter("name"));
 
         // matches
 
-        Assert.assertTrue(event.matches(event));
-        Assert.assertTrue(event.matches(new TestCancelableEvent("name")));
-        Assert.assertTrue(event.matches(new TestCancelableEvent(new FixedNameEventFilter("name"))));
+        assertTrue(event.matches(event));
+        assertTrue(event.matches(new TestCancelableEvent("name")));
+        assertTrue(event.matches(new TestCancelableEvent(new FixedNameEventFilter("name"))));
 
-        Assert.assertFalse(event.matches(new TestCancelableEvent("name2")));
-        Assert.assertFalse(event.matches(new TestCancelableEvent(new FixedNameEventFilter("name2"))));
-        Assert.assertFalse(event.matches(new TestCancelableEvent2()));
+        assertFalse(event.matches(new TestCancelableEvent("name2")));
+        assertFalse(event.matches(new TestCancelableEvent(new FixedNameEventFilter("name2"))));
+        assertFalse(event.matches(new TestCancelableEvent2()));
 
         // equals
 
-        Assert.assertEquals(event, event);
-        Assert.assertEquals(event, new TestCancelableEvent("name"));
-        Assert.assertEquals(event, new TestCancelableEvent(new FixedNameEventFilter("name")));
+        assertEquals(event, event);
+        assertEquals(event, new TestCancelableEvent("name"));
+        assertEquals(event, new TestCancelableEvent(new FixedNameEventFilter("name")));
 
-        Assert.assertFalse(event.equals(null));
-        Assert.assertFalse(event.equals(new TestCancelableEvent("name2")));
-        Assert.assertFalse(event.equals(new TestCancelableEvent(new FixedNameEventFilter("name2"))));
-        Assert.assertFalse(event.equals(new TestCancelableEvent2()));
+        assertFalse(event.equals(null));
+        assertFalse(event.equals(new TestCancelableEvent("name2")));
+        assertFalse(event.equals(new TestCancelableEvent(new FixedNameEventFilter("name2"))));
+        assertFalse(event.equals(new TestCancelableEvent2()));
 
         // hashcode
 
-        Assert.assertEquals(event.hashCode(), new TestCancelableEvent("name").hashCode());
-        Assert.assertEquals(event.hashCode(), new TestCancelableEvent(new FixedNameEventFilter("name")).hashCode());
+        assertEquals(event.hashCode(), new TestCancelableEvent("name").hashCode());
+        assertEquals(event.hashCode(), new TestCancelableEvent(new FixedNameEventFilter("name")).hashCode());
 
-        Assert.assertNotEquals(event.hashCode(), new TestCancelableEvent("name2").hashCode());
-        Assert.assertNotEquals(event.hashCode(), new TestCancelableEvent(new FixedNameEventFilter("name2")).hashCode());
+        assertNotEquals(event.hashCode(), new TestCancelableEvent("name2").hashCode());
+        assertNotEquals(event.hashCode(), new TestCancelableEvent(new FixedNameEventFilter("name2")).hashCode());
     }
 
     @Test
-    public void testAbstractCancelableEventString()
+    public void matchesEqualsHashcodeWhenStringConstructor()
     {
         TestCancelableEvent event = new TestCancelableEvent("name");
 
         // matches
 
-        Assert.assertTrue(event.matches(event));
-        Assert.assertTrue(event.matches(new TestCancelableEvent("name")));
-        Assert.assertTrue(event.matches(new TestCancelableEvent(new FixedNameEventFilter("name"))));
+        assertTrue(event.matches(event));
+        assertTrue(event.matches(new TestCancelableEvent("name")));
+        assertTrue(event.matches(new TestCancelableEvent(new FixedNameEventFilter("name"))));
 
-        Assert.assertFalse(event.matches(new TestCancelableEvent("name2")));
-        Assert.assertFalse(event.matches(new TestCancelableEvent(new FixedNameEventFilter("name2"))));
-        Assert.assertFalse(event.matches(new TestCancelableEvent2()));
+        assertFalse(event.matches(new TestCancelableEvent("name2")));
+        assertFalse(event.matches(new TestCancelableEvent(new FixedNameEventFilter("name2"))));
+        assertFalse(event.matches(new TestCancelableEvent2()));
 
         // equals
 
-        Assert.assertEquals(event, event);
-        Assert.assertEquals(event, new TestCancelableEvent("name"));
-        Assert.assertEquals(event, new TestCancelableEvent(new FixedNameEventFilter("name")));
+        assertEquals(event, event);
+        assertEquals(event, new TestCancelableEvent("name"));
+        assertEquals(event, new TestCancelableEvent(new FixedNameEventFilter("name")));
 
-        Assert.assertFalse(event.equals(null));
-        Assert.assertFalse(event.equals(new TestCancelableEvent("name2")));
-        Assert.assertFalse(event.equals(new TestCancelableEvent(new FixedNameEventFilter("name2"))));
-        Assert.assertFalse(event.equals(new TestCancelableEvent2()));
+        assertFalse(event.equals(null));
+        assertFalse(event.equals(new TestCancelableEvent("name2")));
+        assertFalse(event.equals(new TestCancelableEvent(new FixedNameEventFilter("name2"))));
+        assertFalse(event.equals(new TestCancelableEvent2()));
 
         // hashcode
 
-        Assert.assertEquals(event.hashCode(), new TestCancelableEvent("name").hashCode());
-        Assert.assertEquals(event.hashCode(), new TestCancelableEvent(new FixedNameEventFilter("name")).hashCode());
+        assertEquals(event.hashCode(), new TestCancelableEvent("name").hashCode());
+        assertEquals(event.hashCode(), new TestCancelableEvent(new FixedNameEventFilter("name")).hashCode());
 
-        Assert.assertNotEquals(event.hashCode(), new TestCancelableEvent("name2").hashCode());
-        Assert.assertNotEquals(event.hashCode(), new TestCancelableEvent(new FixedNameEventFilter("name2")).hashCode());
+        assertNotEquals(event.hashCode(), new TestCancelableEvent("name2").hashCode());
+        assertNotEquals(event.hashCode(), new TestCancelableEvent(new FixedNameEventFilter("name2")).hashCode());
     }
 
     @Test
-    public void testCancel()
+    public void cancel()
     {
         CancelableEvent event = new TestCancelableEvent();
-        Assert.assertFalse(event.isCanceled());
-        Assert.assertNull(event.getReason());
+        assertFalse(event.isCanceled());
+        assertNull(event.getReason());
         event.cancel();
-        Assert.assertTrue(event.isCanceled());
-        Assert.assertNull(event.getReason());
+        assertTrue(event.isCanceled());
+        assertNull(event.getReason());
     }
 
     @Test
-    public void testCancelWithReason()
+    public void cancelWithReason()
     {
         String reason = "Tralala";
         CancelableEvent event = new TestCancelableEvent();
-        Assert.assertFalse(event.isCanceled());
-        Assert.assertNull(event.getReason());
+        assertFalse(event.isCanceled());
+        assertNull(event.getReason());
         event.cancel(reason);
-        Assert.assertTrue(event.isCanceled());
-        Assert.assertEquals(reason, event.getReason());
+        assertTrue(event.isCanceled());
+        assertEquals(reason, event.getReason());
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/filter/AlwaysMatchingEventFilterTest.java b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/filter/AlwaysMatchingEventFilterTest.java
index 83e93e6..8ba3d69 100644
--- a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/filter/AlwaysMatchingEventFilterTest.java
+++ b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/filter/AlwaysMatchingEventFilterTest.java
@@ -19,11 +19,19 @@
  */
 package org.xwiki.observation.filter;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.xwiki.observation.event.filter.AlwaysMatchingEventFilter;
 import org.xwiki.observation.event.filter.FixedNameEventFilter;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+/**
+ * Unit tests for {@link AlwaysMatchingEventFilter}.
+ *
+ * @version $Id$
+ */
 public class AlwaysMatchingEventFilterTest
 {
     AlwaysMatchingEventFilter filter = AlwaysMatchingEventFilter.INSTANCE;
@@ -31,29 +39,29 @@
     @Test
     public void testGetFilter()
     {
-        Assert.assertEquals(".*", this.filter.getFilter());
+        assertEquals(".*", this.filter.getFilter());
     }
 
     @Test
     public void testEquals()
     {
-        Assert.assertFalse(this.filter.equals(null));
-        Assert.assertFalse(this.filter.equals(new FixedNameEventFilter("filter")));
+        assertFalse(this.filter.equals(null));
+        assertFalse(this.filter.equals(new FixedNameEventFilter("filter")));
 
-        Assert.assertEquals(this.filter, this.filter);
+        assertEquals(this.filter, this.filter);
     }
 
     @Test
     public void testMatches()
     {
-        Assert.assertTrue(this.filter.matches(null));
-        Assert.assertTrue(this.filter.matches(new FixedNameEventFilter("filter")));
-        Assert.assertTrue(this.filter.matches(this.filter));
+        assertTrue(this.filter.matches(null));
+        assertTrue(this.filter.matches(new FixedNameEventFilter("filter")));
+        assertTrue(this.filter.matches(this.filter));
     }
 
     @Test
     public void testHashcode()
     {
-        Assert.assertEquals(0, this.filter.hashCode());
+        assertEquals(0, this.filter.hashCode());
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/filter/FixedNameEventFilterTest.java b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/filter/FixedNameEventFilterTest.java
index 98867b9..c4ef076 100644
--- a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/filter/FixedNameEventFilterTest.java
+++ b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/filter/FixedNameEventFilterTest.java
@@ -19,11 +19,18 @@
  */
 package org.xwiki.observation.filter;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.xwiki.observation.event.filter.AlwaysMatchingEventFilter;
 import org.xwiki.observation.event.filter.FixedNameEventFilter;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+
+/**
+ * Unit tests for {@link FixedNameEventFilter}.
+ *
+ * @version $Id$
+ */
 public class FixedNameEventFilterTest
 {
     @Test
@@ -31,11 +38,11 @@ public void testFixedNameEventFilterTest()
     {
         FixedNameEventFilter filter = new FixedNameEventFilter("filter");
 
-        Assert.assertFalse(filter.equals(null));
-        Assert.assertFalse(filter.equals(AlwaysMatchingEventFilter.INSTANCE));
-        Assert.assertFalse(filter.equals(new FixedNameEventFilter("filter2")));
+        assertFalse(filter.equals(null));
+        assertFalse(filter.equals(AlwaysMatchingEventFilter.INSTANCE));
+        assertFalse(filter.equals(new FixedNameEventFilter("filter2")));
 
-        Assert.assertEquals(filter, filter);
-        Assert.assertEquals(filter, new FixedNameEventFilter("filter"));
+        assertEquals(filter, filter);
+        assertEquals(filter, new FixedNameEventFilter("filter"));
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/filter/RegexEventFilterTest.java b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/filter/RegexEventFilterTest.java
index cdfa987..36c041e 100644
--- a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/filter/RegexEventFilterTest.java
+++ b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-api/src/test/java/org/xwiki/observation/filter/RegexEventFilterTest.java
@@ -19,11 +19,19 @@
  */
 package org.xwiki.observation.filter;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.xwiki.observation.event.filter.FixedNameEventFilter;
 import org.xwiki.observation.event.filter.RegexEventFilter;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+/**
+ * Unit tests for {@link RegexEventFilter}.
+ *
+ * @version $Id$
+ */
 public class RegexEventFilterTest
 {
     @Test
@@ -31,9 +39,9 @@ public void testRegexEventFilter()
     {
         RegexEventFilter regex = new RegexEventFilter("a.*");
 
-        Assert.assertEquals("a.*", regex.getFilter());
+        assertEquals("a.*", regex.getFilter());
 
-        Assert.assertTrue(regex.matches(new FixedNameEventFilter("aa")));
-        Assert.assertFalse(regex.matches(new FixedNameEventFilter("bb")));
+        assertTrue(regex.matches(new FixedNameEventFilter("aa")));
+        assertFalse(regex.matches(new FixedNameEventFilter("bb")));
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-local/pom.xml b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-local/pom.xml
index 2650284..f5cc010 100644
--- a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-local/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-local/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-observation</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-observation-local</artifactId>
   <name>XWiki Commons - Observation - Local</name>
@@ -33,6 +33,7 @@
   <description>XWiki Commons - Observation - Local</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.88</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>0</xwiki.pitest.mutationThreshold>
   </properties>
   <dependencies>
     <dependency>
diff --git a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-local/src/main/java/org/xwiki/observation/internal/DefaultObservationManager.java b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-local/src/main/java/org/xwiki/observation/internal/DefaultObservationManager.java
index 2910f53..97fc9d2 100644
--- a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-local/src/main/java/org/xwiki/observation/internal/DefaultObservationManager.java
+++ b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-local/src/main/java/org/xwiki/observation/internal/DefaultObservationManager.java
@@ -183,7 +183,7 @@ public void addListener(EventListener eventListener)
             removeListener(eventListener.getName());
 
             this.logger.warn(
-                "The [{}] listener is overwritting a previously "
+                "The [{}] listener is overwriting a previously "
                     + "registered listener [{}] since they both are registered under the same id [{}]. "
                     + "In the future consider removing a Listener first if you really want to register it again.",
                 new Object[] { eventListener.getClass().getName(), previousListener.getClass().getName(),
diff --git a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-local/src/test/java/org/xwiki/observation/ObservationContextTest.java b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-local/src/test/java/org/xwiki/observation/ObservationContextTest.java
index 99ae393..9cbc6c3 100644
--- a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-local/src/test/java/org/xwiki/observation/ObservationContextTest.java
+++ b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-local/src/test/java/org/xwiki/observation/ObservationContextTest.java
@@ -19,9 +19,7 @@
  */
 package org.xwiki.observation;
 
-import org.junit.Assert;
-import org.junit.Rule;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.xwiki.context.Execution;
 import org.xwiki.context.ExecutionContext;
 import org.xwiki.observation.event.BeginEvent;
@@ -30,8 +28,12 @@
 import org.xwiki.observation.internal.DefaultObservationContext;
 import org.xwiki.observation.internal.DefaultObservationManager;
 import org.xwiki.observation.internal.ObservationContextListener;
-import org.xwiki.test.mockito.MockitoComponentMockingRule;
+import org.xwiki.test.junit5.mockito.ComponentTest;
+import org.xwiki.test.junit5.mockito.InjectMockComponents;
+import org.xwiki.test.mockito.MockitoComponentManager;
 
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -41,27 +43,27 @@
  *
  * @version $Id$
  */
+@ComponentTest
 public class ObservationContextTest
 {
-    @Rule
-    public final MockitoComponentMockingRule<ObservationContext> mocker =
-        new MockitoComponentMockingRule<ObservationContext>(DefaultObservationContext.class);
+    @InjectMockComponents
+    private DefaultObservationContext observationContext;
 
     @Test
-    public void test() throws Exception
+    public void test(MockitoComponentManager componentManager) throws Exception
     {
-        this.mocker.registerComponent(ObservationContextListener.class);
-        this.mocker.registerComponent(DefaultObservationManager.class);
+        componentManager.registerComponent(ObservationContextListener.class);
+        componentManager.registerComponent(DefaultObservationManager.class);
 
-        ObservationManager manager = this.mocker.getInstance(ObservationManager.class);
-        Execution execution = this.mocker.getInstance(Execution.class);
+        ObservationManager manager = componentManager.getInstance(ObservationManager.class);
+        Execution execution = componentManager.getInstance(Execution.class);
 
         when(execution.getContext()).thenReturn(new ExecutionContext());
 
-        final BeginEvent beginEvent1 = mock(BeginEvent.class, "begin1");
-        final BeginEvent beginEvent2 = mock(BeginEvent.class, "begin2");
-        final EndEvent endEvent1 = mock(EndEvent.class, "end1");
-        final EndEvent endEvent2 = mock(EndEvent.class, "end2");
+        BeginEvent beginEvent1 = mock(BeginEvent.class, "begin1");
+        BeginEvent beginEvent2 = mock(BeginEvent.class, "begin2");
+        EndEvent endEvent1 = mock(EndEvent.class, "end1");
+        EndEvent endEvent2 = mock(EndEvent.class, "end2");
 
         when(beginEvent1.matches(any(Event.class))).thenReturn(false);
         when(beginEvent1.matches(beginEvent1)).thenReturn(true);
@@ -75,26 +77,26 @@ public void test() throws Exception
         when(endEvent2.matches(any(Event.class))).thenReturn(false);
         when(endEvent2.matches(endEvent2)).thenReturn(true);
 
-        Assert.assertFalse(this.mocker.getComponentUnderTest().isIn(beginEvent1));
-        Assert.assertFalse(this.mocker.getComponentUnderTest().isIn(beginEvent2));
+        assertFalse(this.observationContext.isIn(beginEvent1));
+        assertFalse(this.observationContext.isIn(beginEvent2));
 
         manager.notify(beginEvent1, null);
 
-        Assert.assertTrue(this.mocker.getComponentUnderTest().isIn(beginEvent1));
+        assertTrue(this.observationContext.isIn(beginEvent1));
 
         manager.notify(beginEvent2, null);
 
-        Assert.assertTrue(this.mocker.getComponentUnderTest().isIn(beginEvent1));
-        Assert.assertTrue(this.mocker.getComponentUnderTest().isIn(beginEvent2));
+        assertTrue(this.observationContext.isIn(beginEvent1));
+        assertTrue(this.observationContext.isIn(beginEvent2));
 
         manager.notify(endEvent2, null);
 
-        Assert.assertTrue(this.mocker.getComponentUnderTest().isIn(beginEvent1));
-        Assert.assertFalse(this.mocker.getComponentUnderTest().isIn(beginEvent2));
+        assertTrue(this.observationContext.isIn(beginEvent1));
+        assertFalse(this.observationContext.isIn(beginEvent2));
 
         manager.notify(endEvent1, null);
 
-        Assert.assertFalse(this.mocker.getComponentUnderTest().isIn(beginEvent1));
-        Assert.assertFalse(this.mocker.getComponentUnderTest().isIn(beginEvent2));
+        assertFalse(this.observationContext.isIn(beginEvent1));
+        assertFalse(this.observationContext.isIn(beginEvent2));
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-local/src/test/java/org/xwiki/observation/ObservationManagerEventListenerTest.java b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-local/src/test/java/org/xwiki/observation/ObservationManagerEventListenerTest.java
index 3d8b5e7..d0b2edc 100644
--- a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-local/src/test/java/org/xwiki/observation/ObservationManagerEventListenerTest.java
+++ b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-local/src/test/java/org/xwiki/observation/ObservationManagerEventListenerTest.java
@@ -21,18 +21,20 @@
 
 import java.util.Arrays;
 
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.xwiki.component.descriptor.DefaultComponentDescriptor;
 import org.xwiki.component.internal.StackingComponentEventManager;
-import org.xwiki.component.manager.ComponentLookupException;
+import org.xwiki.component.manager.ComponentManager;
+import org.xwiki.component.manager.ComponentRepositoryException;
 import org.xwiki.observation.event.Event;
 import org.xwiki.observation.internal.DefaultObservationManager;
-import org.xwiki.observation.test.TestEventListener;
-import org.xwiki.test.mockito.MockitoComponentMockingRule;
+import org.xwiki.test.junit5.mockito.ComponentTest;
+import org.xwiki.test.junit5.mockito.InjectComponentManager;
+import org.xwiki.test.junit5.mockito.InjectMockComponents;
 
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertSame;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -41,13 +43,14 @@
  *
  * @version $Id$
  */
+@ComponentTest
 public class ObservationManagerEventListenerTest
 {
-    @Rule
-    public final MockitoComponentMockingRule<ObservationManager> mocker =
-        new MockitoComponentMockingRule<ObservationManager>(DefaultObservationManager.class);
+    @InjectMockComponents
+    private DefaultObservationManager manager;
 
-    private ObservationManager manager;
+    @InjectComponentManager
+    private ComponentManager componentManager;
 
     private EventListener eventListenerMock;
 
@@ -55,19 +58,18 @@
 
     private DefaultComponentDescriptor<EventListener> componentDescriptor;
 
-    @Before
-    public void setUp() throws Exception
+    @BeforeEach
+    public void setUp()
     {
-        this.manager = this.mocker.getComponentUnderTest();
         StackingComponentEventManager componentEventManager = new StackingComponentEventManager();
         componentEventManager.shouldStack(false);
         componentEventManager.setObservationManager(this.manager);
-        this.mocker.setComponentEventManager(componentEventManager);
+        this.componentManager.setComponentEventManager(componentEventManager);
 
         this.eventListenerMock = mock(EventListener.class);
         this.eventMock = mock(Event.class);
 
-        this.componentDescriptor = new DefaultComponentDescriptor<EventListener>();
+        this.componentDescriptor = new DefaultComponentDescriptor<>();
         this.componentDescriptor.setImplementation(this.eventListenerMock.getClass());
         this.componentDescriptor.setRoleType(EventListener.class);
         this.componentDescriptor.setRoleHint("mylistener");
@@ -78,19 +80,20 @@ public void setUp() throws Exception
     }
 
     @Test
-    public void newListenerComponent() throws Exception
+    public void newListenerComponent() throws ComponentRepositoryException
     {
-        this.mocker.registerComponent(this.componentDescriptor, this.eventListenerMock);
+        this.componentManager.registerComponent(this.componentDescriptor, this.eventListenerMock);
 
-        Assert.assertSame(this.eventListenerMock, this.manager.getListener("mylistener"));
+        assertSame(this.eventListenerMock, this.manager.getListener("mylistener"));
     }
 
     @Test
     public void removedListenerComponent() throws Exception
     {
-        this.mocker.registerComponent(this.componentDescriptor, this.eventListenerMock);
-        this.mocker.unregisterComponent(this.componentDescriptor.getRoleType(), this.componentDescriptor.getRoleHint());
+        this.componentManager.registerComponent(this.componentDescriptor, this.eventListenerMock);
+        this.componentManager.unregisterComponent(this.componentDescriptor.getRoleType(),
+            this.componentDescriptor.getRoleHint());
 
-        Assert.assertNull(this.manager.getListener("mylistener"));
+        assertNull(this.manager.getListener("mylistener"));
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-local/src/test/java/org/xwiki/observation/ObservationManagerTest.java b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-local/src/test/java/org/xwiki/observation/ObservationManagerTest.java
index 5050e20..b9825ae 100644
--- a/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-local/src/test/java/org/xwiki/observation/ObservationManagerTest.java
+++ b/xwiki-commons-core/xwiki-commons-observation/xwiki-commons-observation-local/src/test/java/org/xwiki/observation/ObservationManagerTest.java
@@ -22,20 +22,20 @@
 import java.util.Arrays;
 import java.util.Collections;
 
-import org.junit.Assert;
-import org.junit.Rule;
-import org.junit.Test;
-import org.mockito.Mockito;
-import org.slf4j.Logger;
-import org.xwiki.component.manager.ComponentLookupException;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.RegisterExtension;
 import org.xwiki.observation.event.ActionExecutionEvent;
 import org.xwiki.observation.event.AllEvent;
 import org.xwiki.observation.event.Event;
 import org.xwiki.observation.internal.DefaultObservationManager;
-import org.xwiki.test.mockito.MockitoComponentMockingRule;
+import org.xwiki.test.LogLevel;
+import org.xwiki.test.junit5.LogCaptureExtension;
+import org.xwiki.test.junit5.mockito.ComponentTest;
+import org.xwiki.test.junit5.mockito.InjectMockComponents;
 
+import static org.junit.jupiter.api.Assertions.assertSame;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.ArgumentMatchers.contains;
 import static org.mockito.ArgumentMatchers.same;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
@@ -47,50 +47,53 @@
  *
  * @version $Id$
  */
+@ComponentTest
 public class ObservationManagerTest
 {
-    @Rule
-    public final MockitoComponentMockingRule<ObservationManager> mocker =
-        new MockitoComponentMockingRule<ObservationManager>(DefaultObservationManager.class);
+    @InjectMockComponents
+    private DefaultObservationManager manager;
+
+    @RegisterExtension
+    LogCaptureExtension logCapture = new LogCaptureExtension(LogLevel.WARN);
 
     @Test
-    public void testNotifyWhenMatching() throws ComponentLookupException
+    public void notifyWhenMatching()
     {
-        final EventListener listener = mock(EventListener.class);
-        final Event event = mock(Event.class);
+        EventListener listener = mock(EventListener.class);
+        Event event = mock(Event.class);
 
         when(listener.getName()).thenReturn("mylistener");
         when(listener.getEvents()).thenReturn(Arrays.asList(event));
         when(event.matches(event)).thenReturn(true);
 
-        this.mocker.getComponentUnderTest().addListener(listener);
-        Assert.assertSame(listener, this.mocker.getComponentUnderTest().getListener("mylistener"));
-        this.mocker.getComponentUnderTest().notify(event, "some source", "some data");
+        this.manager.addListener(listener);
+        assertSame(listener, this.manager.getListener("mylistener"));
+        this.manager.notify(event, "some source", "some data");
         verify(listener).onEvent(event, "some source", "some data");
     }
 
     @Test
-    public void testRemoveListener() throws ComponentLookupException
+    public void removeListener()
     {
-        final EventListener listener = mock(EventListener.class);
-        final Event event = mock(Event.class);
+        EventListener listener = mock(EventListener.class);
+        Event event = mock(Event.class);
 
         when(listener.getName()).thenReturn("mylistener");
         when(listener.getEvents()).thenReturn(Arrays.asList(event));
 
-        this.mocker.getComponentUnderTest().addListener(listener);
-        this.mocker.getComponentUnderTest().removeListener("mylistener");
-        this.mocker.getComponentUnderTest().notify(event, null);
+        this.manager.addListener(listener);
+        this.manager.removeListener("mylistener");
+        this.manager.notify(event, null);
         verify(listener, never()).onEvent(any(Event.class), any(), any());
     }
 
     @Test
-    public void testAddEvent() throws Exception
+    public void addEvent()
     {
-        final EventListener listener = mock(EventListener.class);
-        final Event initialEvent = mock(Event.class, "initial");
-        final Event afterEvent = mock(Event.class, "after");
-        final Event notifyEvent = mock(Event.class, "notify");
+        EventListener listener = mock(EventListener.class);
+        Event initialEvent = mock(Event.class, "initial");
+        Event afterEvent = mock(Event.class, "after");
+        Event notifyEvent = mock(Event.class, "notify");
 
         when(listener.getName()).thenReturn("mylistener");
         when(listener.getEvents()).thenReturn(Arrays.asList(initialEvent));
@@ -100,37 +103,37 @@ public void testAddEvent() throws Exception
         when(initialEvent.matches(notifyEvent)).thenReturn(false);
         when(afterEvent.matches(notifyEvent)).thenReturn(true);
 
-        this.mocker.getComponentUnderTest().addListener(listener);
-        this.mocker.getComponentUnderTest().addEvent("mylistener", afterEvent);
-        this.mocker.getComponentUnderTest().notify(notifyEvent, null);
+        this.manager.addListener(listener);
+        this.manager.addEvent("mylistener", afterEvent);
+        this.manager.notify(notifyEvent, null);
         verify(listener).onEvent(notifyEvent, null, null);
     }
 
     @Test
-    public void testAddEventWithNoInitialEvent() throws Exception
+    public void addEventWithNoInitialEvent()
     {
-        final EventListener listener = mock(EventListener.class);
-        final Event afterEvent = mock(Event.class, "after");
-        final Event notifyEvent = mock(Event.class, "notify");
+        EventListener listener = mock(EventListener.class);
+        Event afterEvent = mock(Event.class, "after");
+        Event notifyEvent = mock(Event.class, "notify");
 
         when(listener.getName()).thenReturn("mylistener");
         when(listener.getEvents()).thenReturn(Collections.<Event>emptyList());
 
         when(afterEvent.matches(notifyEvent)).thenReturn(true);
 
-        this.mocker.getComponentUnderTest().addListener(listener);
-        this.mocker.getComponentUnderTest().addEvent("mylistener", afterEvent);
-        this.mocker.getComponentUnderTest().notify(notifyEvent, null);
+        this.manager.addListener(listener);
+        this.manager.addEvent("mylistener", afterEvent);
+        this.manager.notify(notifyEvent, null);
         verify(listener).onEvent(notifyEvent, null, null);
     }
 
     @Test
-    public void testRemoveEvent() throws ComponentLookupException
+    public void removeEvent()
     {
-        final EventListener listener = mock(EventListener.class);
-        final Event initialEvent = mock(Event.class, "initial");
-        final Event afterEvent = mock(Event.class, "after");
-        final Event notifyEvent = mock(Event.class, "notify");
+        EventListener listener = mock(EventListener.class);
+        Event initialEvent = mock(Event.class, "initial");
+        Event afterEvent = mock(Event.class, "after");
+        Event notifyEvent = mock(Event.class, "notify");
 
         when(listener.getName()).thenReturn("mylistener");
         when(listener.getEvents()).thenReturn(Arrays.asList(initialEvent));
@@ -140,23 +143,25 @@ public void testRemoveEvent() throws ComponentLookupException
         // we still want the test to fail if that doesn't work).
         when(initialEvent.matches(same(notifyEvent))).thenReturn(false);
 
-        this.mocker.getComponentUnderTest().addListener(listener);
-        this.mocker.getComponentUnderTest().addEvent("mylistener", afterEvent);
-        this.mocker.getComponentUnderTest().removeEvent("mylistener", afterEvent);
-        this.mocker.getComponentUnderTest().notify(notifyEvent, null);
+        this.manager.addListener(listener);
+        this.manager.addEvent("mylistener", afterEvent);
+        this.manager.removeEvent("mylistener", afterEvent);
+        this.manager.notify(notifyEvent, null);
         // Ensure that the afterEvent is never called since we're adding it and removing it
         verify(afterEvent, never()).matches(same(notifyEvent));
         verify(listener, never()).onEvent(afterEvent, null, null);
     }
 
-    /** Verify that we can register two listeners on the same event and they'll both receive the event. */
+    /**
+     * Verify that we can register two listeners on the same event and they'll both receive the event.
+     */
     @Test
-    public void testRegisterSeveralListenersForSameEvent() throws ComponentLookupException
+    public void registerSeveralListenersForSameEvent()
     {
-        final EventListener listener1 = mock(EventListener.class, "listener1");
-        final EventListener listener2 = mock(EventListener.class, "listener2");
-        final Event event = mock(Event.class, "event");
-        final Event notifyEvent = mock(Event.class, "notify");
+        EventListener listener1 = mock(EventListener.class, "listener1");
+        EventListener listener2 = mock(EventListener.class, "listener2");
+        Event event = mock(Event.class, "event");
+        Event notifyEvent = mock(Event.class, "notify");
 
         when(listener1.getName()).thenReturn("listener 1");
         when(listener2.getName()).thenReturn("listener 2");
@@ -165,51 +170,55 @@ public void testRegisterSeveralListenersForSameEvent() throws ComponentLookupExc
 
         when(event.matches(notifyEvent)).thenReturn(true);
 
-        this.mocker.getComponentUnderTest().addListener(listener1);
-        this.mocker.getComponentUnderTest().addListener(listener2);
-        this.mocker.getComponentUnderTest().notify(notifyEvent, null);
+        this.manager.addListener(listener1);
+        this.manager.addListener(listener2);
+        this.manager.notify(notifyEvent, null);
         verify(listener1).onEvent(notifyEvent, null, null);
         verify(listener2).onEvent(notifyEvent, null, null);
     }
 
-    /** Verify that we can register a listener to receive any kind of event using AllEvent event type. */
+    /**
+     * Verify that we can register a listener to receive any kind of event using AllEvent event type.
+     */
     @Test
-    public void testRegisterListenerForAllEvents() throws ComponentLookupException
+    public void registerListenerForAllEvents()
     {
-        final EventListener listener = mock(EventListener.class);
-        final Event event = mock(Event.class);
+        EventListener listener = mock(EventListener.class);
+        Event event = mock(Event.class);
 
         when(listener.getName()).thenReturn("mylistener");
         when(listener.getEvents()).thenReturn(Arrays.asList(AllEvent.ALLEVENT));
 
-        this.mocker.getComponentUnderTest().addListener(listener);
-        Assert.assertSame(listener, this.mocker.getComponentUnderTest().getListener("mylistener"));
-        this.mocker.getComponentUnderTest().notify(event, "some source", "some data");
+        this.manager.addListener(listener);
+        assertSame(listener, this.manager.getListener("mylistener"));
+        this.manager.notify(event, "some source", "some data");
         verify(listener).onEvent(event, "some source", "some data");
     }
 
-    /** Verify that a warning is logged is we try to register a listener with the same name. */
+    /**
+     * Verify that a warning is logged is we try to register a listener with the same name.
+     */
     @Test
-    public void testRegisterSameListenerSeveralTimes() throws ComponentLookupException
+    public void registerSameListenerSeveralTimes()
     {
-        final EventListener listener = mock(EventListener.class);
+        EventListener listener = mock(EventListener.class);
 
         when(listener.getName()).thenReturn("mylistener");
         when(listener.getEvents()).thenReturn(Arrays.asList(AllEvent.ALLEVENT));
         // The check is performed here, we verify that a warning is correctly logged
 
-        this.mocker.getComponentUnderTest().addListener(listener);
+        this.manager.addListener(listener);
         // Will raise log warning on the next line
-        this.mocker.getComponentUnderTest().addListener(listener);
+        this.manager.addListener(listener);
 
-        final Logger logger = this.mocker.getMockedLogger();
-        verify(logger).warn(contains("listener is overwritting a previously registered listener"), any(), any(), any());
+        assertTrue(this.logCapture.getMessage(0).matches("The \\[.*\\] listener is overwriting a previously registered "
+            + "listener \\[.*\\] since they both are registered under the same id \\[mylistener\\]\\. In the future "
+            + "consider removing a Listener first if you really want to register it again\\."));
 
         // Verify that no log is logged if we remove the listener before re-registering it
-        this.mocker.getComponentUnderTest().removeListener("mylistener");
+        this.manager.removeListener("mylistener");
         // Next line will not log any warning
-        this.mocker.getComponentUnderTest().addListener(listener);
-        Mockito.verifyNoMoreInteractions(logger);
+        this.manager.addListener(listener);
     }
 
     /**
@@ -217,20 +226,18 @@ public void testRegisterSameListenerSeveralTimes() throws ComponentLookupExcepti
      * it will receive both events.
      */
     @Test
-    public void testRegisterListenerForTwoEventsOfSameType() throws ComponentLookupException
+    public void registerListenerForTwoEventsOfSameType()
     {
-        final EventListener listener = mock(EventListener.class);
-        @SuppressWarnings("deprecation")
-        final Event eventMatcher1 = new ActionExecutionEvent("action1");
-        @SuppressWarnings("deprecation")
-        final Event eventMatcher2 = new ActionExecutionEvent("action2");
+        EventListener listener = mock(EventListener.class);
+        Event eventMatcher1 = new ActionExecutionEvent("action1");
+        Event eventMatcher2 = new ActionExecutionEvent("action2");
 
         when(listener.getName()).thenReturn("mylistener");
         when(listener.getEvents()).thenReturn(Arrays.asList(eventMatcher1, eventMatcher2));
 
-        this.mocker.getComponentUnderTest().addListener(listener);
-        this.mocker.getComponentUnderTest().notify(eventMatcher1, "some source", "some data");
-        this.mocker.getComponentUnderTest().notify(eventMatcher2, "some source", "some data");
+        this.manager.addListener(listener);
+        this.manager.notify(eventMatcher1, "some source", "some data");
+        this.manager.notify(eventMatcher2, "some source", "some data");
         verify(listener).onEvent(eventMatcher1, "some source", "some data");
         verify(listener).onEvent(eventMatcher2, "some source", "some data");
     }
diff --git a/xwiki-commons-core/xwiki-commons-properties/pom.xml b/xwiki-commons-core/xwiki-commons-properties/pom.xml
index d501c22..c549dd3 100644
--- a/xwiki-commons-core/xwiki-commons-properties/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-properties/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-core</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-properties</artifactId>
   <name>XWiki Commons - Properties</name>
@@ -33,6 +33,7 @@
   <description>XWiki Commons - Properties</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.76</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>82</xwiki.pitest.mutationThreshold>
     <!-- There's a method that is supposed to return HashSet, that the type it's handling... -->
     <checkstyle.suppressions.location>${basedir}/src/main/checkstyle/checkstyle-suppressions.xml</checkstyle.suppressions.location>
   </properties>
@@ -43,6 +44,11 @@
       <version>${project.version}</version>
     </dependency>
     <dependency>
+      <groupId>org.xwiki.commons</groupId>
+      <artifactId>xwiki-commons-collection</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+    <dependency>
       <groupId>javax.validation</groupId>
       <artifactId>validation-api</artifactId>
     </dependency>
@@ -54,6 +60,7 @@
       <groupId>org.apache.commons</groupId>
       <artifactId>commons-lang3</artifactId>
     </dependency>
+
     <!-- Tests dependencies -->
     <dependency>
       <groupId>org.xwiki.commons</groupId>
@@ -64,7 +71,6 @@
     <dependency>
       <groupId>org.hibernate</groupId>
       <artifactId>hibernate-validator</artifactId>
-      <version>4.3.0.Final</version>
       <scope>test</scope>
     </dependency>
     <dependency>
diff --git a/xwiki-commons-core/xwiki-commons-properties/src/main/java/org/xwiki/properties/internal/DefaultBeanDescriptor.java b/xwiki-commons-core/xwiki-commons-properties/src/main/java/org/xwiki/properties/internal/DefaultBeanDescriptor.java
index c567265..937ca4a 100644
--- a/xwiki-commons-core/xwiki-commons-properties/src/main/java/org/xwiki/properties/internal/DefaultBeanDescriptor.java
+++ b/xwiki-commons-core/xwiki-commons-properties/src/main/java/org/xwiki/properties/internal/DefaultBeanDescriptor.java
@@ -25,6 +25,7 @@
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
+import java.lang.reflect.Type;
 import java.text.MessageFormat;
 import java.util.Collection;
 import java.util.LinkedHashMap;
@@ -138,7 +139,13 @@ protected void extractPropertyDescriptor(java.beans.PropertyDescriptor propertyD
                 desc.setId(propertyId != null ? propertyId.value() : propertyDescriptor.getName());
 
                 // set parameter type
-                desc.setPropertyType(readMethod.getGenericReturnType());
+                Type propertyType;
+                if (readMethod != null) {
+                    propertyType = readMethod.getGenericReturnType();
+                } else {
+                    propertyType = writeMethod.getGenericParameterTypes()[0];
+                }
+                desc.setPropertyType(propertyType);
 
                 // get parameter display name
                 PropertyName parameterName = extractPropertyAnnotation(writeMethod, readMethod, PropertyName.class);
@@ -158,7 +165,7 @@ protected void extractPropertyDescriptor(java.beans.PropertyDescriptor propertyD
 
                 desc.setMandatory(parameterMandatory != null);
 
-                if (defaultInstance != null) {
+                if (defaultInstance != null && readMethod != null) {
                     // get default value
                     try {
                         desc.setDefaultValue(readMethod.invoke(defaultInstance));
diff --git a/xwiki-commons-core/xwiki-commons-properties/src/main/java/org/xwiki/properties/internal/DefaultBeanManager.java b/xwiki-commons-core/xwiki-commons-properties/src/main/java/org/xwiki/properties/internal/DefaultBeanManager.java
index 3b930de..3a6fa88 100644
--- a/xwiki-commons-core/xwiki-commons-properties/src/main/java/org/xwiki/properties/internal/DefaultBeanManager.java
+++ b/xwiki-commons-core/xwiki-commons-properties/src/main/java/org/xwiki/properties/internal/DefaultBeanManager.java
@@ -22,7 +22,6 @@
 import java.lang.reflect.AccessibleObject;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
@@ -36,6 +35,7 @@
 import javax.validation.ValidatorFactory;
 
 import org.slf4j.Logger;
+import org.xwiki.collection.SoftCache;
 import org.xwiki.component.annotation.Component;
 import org.xwiki.properties.BeanDescriptor;
 import org.xwiki.properties.BeanManager;
@@ -62,10 +62,10 @@
 public class DefaultBeanManager implements BeanManager
 {
     /**
-     * Cache the already parsed classes.
+     * Cache the already parsed classes. We store weak reference since the classes might come from extensions later
+     * uninstalled/upgraded or from scripts.
      */
-    private Map<Class<?>, BeanDescriptor> beanDescriptorCache =
-        Collections.synchronizedMap(new HashMap<Class<?>, BeanDescriptor>());
+    private SoftCache<Class<?>, BeanDescriptor> beanDescriptorCache = new SoftCache<>();
 
     /**
      * The logger to use for logging.
@@ -220,14 +220,13 @@ public BeanDescriptor getBeanDescriptor(Class<?> beanClass)
         BeanDescriptor beanDescriptor = null;
 
         if (beanClass != null) {
-            // Since the bean descriptor are cached, lock based on the class to not generate twice the same bean
-            // descriptor.
-            synchronized (beanClass) {
-                beanDescriptor = this.beanDescriptorCache.get(beanClass);
-                if (beanDescriptor == null) {
-                    beanDescriptor = new DefaultBeanDescriptor(beanClass);
-                    this.beanDescriptorCache.put(beanClass, beanDescriptor);
-                }
+            // Get the bean descriptor from the cache
+            beanDescriptor = this.beanDescriptorCache.get(beanClass);
+
+            // Create a new one if none could be found
+            if (beanDescriptor == null) {
+                beanDescriptor = new DefaultBeanDescriptor(beanClass);
+                this.beanDescriptorCache.put(beanClass, beanDescriptor);
             }
         }
 
diff --git a/xwiki-commons-core/xwiki-commons-repository/pom.xml b/xwiki-commons-core/xwiki-commons-repository/pom.xml
index dfafabe..d2fc2eb 100644
--- a/xwiki-commons-core/xwiki-commons-repository/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-repository/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-core</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-repository</artifactId>
   <name>XWiki Commons - Repository</name>
diff --git a/xwiki-commons-core/xwiki-commons-repository/xwiki-commons-repository-api/pom.xml b/xwiki-commons-core/xwiki-commons-repository/xwiki-commons-repository-api/pom.xml
index 2c8abee..cab8b40 100644
--- a/xwiki-commons-core/xwiki-commons-repository/xwiki-commons-repository-api/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-repository/xwiki-commons-repository-api/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-repository</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-repository-api</artifactId>
   <name>XWiki Commons - Repository - API</name>
@@ -33,6 +33,7 @@
   <description>Contains commons stuff to use in a a client or a server implementation</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.76</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>76</xwiki.pitest.mutationThreshold>
     <!-- Old names of this module used for retro compatibility when resolving dependencies of old extensions -->
     <xwiki.extension.features>org.xwiki.platform:xwiki-platform-extension-repository-xwiki-api,org.xwiki.commons:xwiki-commons-extension-repository-xwiki-api</xwiki.extension.features>
   </properties>
diff --git a/xwiki-commons-core/xwiki-commons-repository/xwiki-commons-repository-model/pom.xml b/xwiki-commons-core/xwiki-commons-repository/xwiki-commons-repository-model/pom.xml
index 611b3d0..d5100bc 100644
--- a/xwiki-commons-core/xwiki-commons-repository/xwiki-commons-repository-model/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-repository/xwiki-commons-repository-model/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-repository</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-repository-model</artifactId>
   <name>XWiki Commons - Repository - Model</name>
diff --git a/xwiki-commons-core/xwiki-commons-script/pom.xml b/xwiki-commons-core/xwiki-commons-script/pom.xml
index e10d1fd..1def0db 100644
--- a/xwiki-commons-core/xwiki-commons-script/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-script/pom.xml
@@ -25,13 +25,14 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-core</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-script</artifactId>
   <name>XWiki Commons - Script</name>
   <description>XWiki Commons - Script</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.27</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>7</xwiki.pitest.mutationThreshold>
   </properties>
   <dependencies>
     <dependency>
diff --git a/xwiki-commons-core/xwiki-commons-script/src/main/java/org/xwiki/script/ScriptContextManager.java b/xwiki-commons-core/xwiki-commons-script/src/main/java/org/xwiki/script/ScriptContextManager.java
index 4cf9427..f3faf54 100644
--- a/xwiki-commons-core/xwiki-commons-script/src/main/java/org/xwiki/script/ScriptContextManager.java
+++ b/xwiki-commons-core/xwiki-commons-script/src/main/java/org/xwiki/script/ScriptContextManager.java
@@ -42,11 +42,12 @@
 
     /**
      * @return the current {@link ScriptContext} instance without any modification. This is mostly used when the only
-     *         need to to set values in the script context. In doubt always use {@link #getScriptContext()}.
+     *         need is to modify the script context. In doubt always use {@link #getScriptContext()}.
      * @see #getScriptContext()
      * @since 8.3M1
      */
-    default ScriptContext getCurrentScriptContext() {
+    default ScriptContext getCurrentScriptContext()
+    {
         return getScriptContext();
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-stability/pom.xml b/xwiki-commons-core/xwiki-commons-stability/pom.xml
index 1acc896..3323dbf 100644
--- a/xwiki-commons-core/xwiki-commons-stability/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-stability/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-core</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-stability</artifactId>
   <name>XWiki Commons - Stability</name>
diff --git a/xwiki-commons-core/xwiki-commons-stability/src/main/java/org/xwiki/stability/Unstable.java b/xwiki-commons-core/xwiki-commons-stability/src/main/java/org/xwiki/stability/Unstable.java
index da91121..e1495ac 100644
--- a/xwiki-commons-core/xwiki-commons-stability/src/main/java/org/xwiki/stability/Unstable.java
+++ b/xwiki-commons-core/xwiki-commons-stability/src/main/java/org/xwiki/stability/Unstable.java
@@ -24,6 +24,8 @@
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
+import static java.lang.annotation.ElementType.CONSTRUCTOR;
+import static java.lang.annotation.ElementType.FIELD;
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.ElementType.TYPE;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -37,7 +39,7 @@
  */
 @Documented
 @Retention(RUNTIME)
-@Target({ TYPE, METHOD })
+@Target({ TYPE, METHOD, FIELD, CONSTRUCTOR })
 @Inherited
 public @interface Unstable
 {
diff --git a/xwiki-commons-core/xwiki-commons-text/build.gradle b/xwiki-commons-core/xwiki-commons-text/build.gradle
index aeaf0c8..64e22aa 100644
--- a/xwiki-commons-core/xwiki-commons-text/build.gradle
+++ b/xwiki-commons-core/xwiki-commons-text/build.gradle
@@ -21,5 +21,5 @@
 // WARNING: NOT WORKING, WORK IN PROGRESS. USE THE MAVEN BUILD WHICH IS THE XWIKI OFFICIAL BUILD TOOL.
 
 dependencies {
-    compile "org.apache.commons:commons-lang3:${commonsLang3Version}"
+    implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"
 }
\ No newline at end of file
diff --git a/xwiki-commons-core/xwiki-commons-text/pom.xml b/xwiki-commons-core/xwiki-commons-text/pom.xml
index be41f68..2bc6278 100644
--- a/xwiki-commons-core/xwiki-commons-text/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-text/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-core</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-text</artifactId>
   <name>XWiki Commons - Text</name>
@@ -33,6 +33,7 @@
   <description>Offers text-related APIs</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.94</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>100</xwiki.pitest.mutationThreshold>
     <!-- Name to display by the Extension Manager -->
     <xwiki.extension.name>Text API</xwiki.extension.name>
   </properties>
@@ -41,6 +42,11 @@
       <groupId>org.apache.commons</groupId>
       <artifactId>commons-lang3</artifactId>
     </dependency>
+    <dependency>
+      <groupId>org.xwiki.commons</groupId>
+      <artifactId>xwiki-commons-stability</artifactId>
+      <version>${project.version}</version>
+    </dependency>
     <!-- Testing dependencies -->
     <dependency>
       <groupId>org.xwiki.commons</groupId>
diff --git a/xwiki-commons-core/xwiki-commons-text/src/main/java/org/xwiki/text/StringUtils.java b/xwiki-commons-core/xwiki-commons-text/src/main/java/org/xwiki/text/StringUtils.java
index 064362b..cca841a 100644
--- a/xwiki-commons-core/xwiki-commons-text/src/main/java/org/xwiki/text/StringUtils.java
+++ b/xwiki-commons-core/xwiki-commons-text/src/main/java/org/xwiki/text/StringUtils.java
@@ -19,11 +19,13 @@
  */
 package org.xwiki.text;
 
+import org.xwiki.stability.Unstable;
+
 /**
  * Extends {@link org.apache.commons.lang3.StringUtils} with some more useful tools. Note that the reason we're
  * extending Commons Lang instead of creating a separate class is because we're using this class as a Velocity tool
  * and we want to offer a single binding to users.
- * 
+ *
  * @version $Id$
  * @since 6.2
  */
@@ -32,7 +34,7 @@
     /**
      * An attempt to make doubling a character (usually for escaping purposes) as fast as it can be. A lot faster than
      * the usual <code>mystring.replace("a", "aa")</code> for example.
-     * 
+     *
      * @param str the string to modify
      * @param c the character to double
      * @return the modified string
@@ -63,4 +65,22 @@ public static String doubleChar(final String str, final char c)
 
         return buf.toString();
     }
+
+    /**
+     * Removes all non alpha numerical characters from the passed text. First tries to convert diacritics to their
+     * alpha numeric representation.
+     *
+     * @param text the text to convert
+     * @return the alpha numeric equivalent
+     * @since 10.6RC1
+     */
+    @Unstable
+    public static String toAlphaNumeric(String text)
+    {
+        if (isEmpty(text)) {
+            return text;
+        }
+
+        return stripAccents(text).replaceAll("[^a-zA-Z0-9]", "");
+    }
 }
diff --git a/xwiki-commons-core/xwiki-commons-text/src/test/java/org/xwiki/text/StringUtilsTest.java b/xwiki-commons-core/xwiki-commons-text/src/test/java/org/xwiki/text/StringUtilsTest.java
index 3537d72..6b93043 100644
--- a/xwiki-commons-core/xwiki-commons-text/src/test/java/org/xwiki/text/StringUtilsTest.java
+++ b/xwiki-commons-core/xwiki-commons-text/src/test/java/org/xwiki/text/StringUtilsTest.java
@@ -23,10 +23,11 @@
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 
 /**
  * Validate {@link StringUtils}.
- * 
+ *
  * @version $Id$
  */
 class StringUtilsTest
@@ -35,7 +36,7 @@
     @DisplayName("Doubling of characters")
     void doubleChar()
     {
-        assertEquals(null, StringUtils.doubleChar(null, 'a'));
+        assertNull(StringUtils.doubleChar(null, 'a'));
         assertEquals("", StringUtils.doubleChar("", 'a'));
         assertEquals("b", StringUtils.doubleChar("b", 'a'));
         assertEquals("aa", StringUtils.doubleChar("a", 'a'));
@@ -43,4 +44,23 @@ void doubleChar()
         assertEquals("baabaa", StringUtils.doubleChar("baba", 'a'));
         assertEquals("aabaab", StringUtils.doubleChar("abab", 'a'));
     }
+
+    @Test
+    @DisplayName("Alphanumeric conversion")
+    void toAlphaNumeric()
+    {
+        assertNull(StringUtils.toAlphaNumeric(null));
+        assertEquals("", StringUtils.toAlphaNumeric(""));
+        assertEquals("abc123", StringUtils.toAlphaNumeric("abc123"));
+        assertEquals("MainWebHome", StringUtils.toAlphaNumeric("Main.WebHome"));
+        assertEquals(
+            "TheQuickBrownFoxjumpsoverthelazydog",
+            StringUtils.toAlphaNumeric("The Quick Brown Fox jumps over the lazy dog")
+        );
+        assertEquals(
+            "DesNoelouunzephyrhaimevetdeglaconswurmiensjedinedexquisrotisdebufaukiralaydagemurctera",
+            StringUtils.toAlphaNumeric("Dès Noël où un zéphyr haï me vêt de glaçons würmiens je dîne d’exquis " +
+                "rôtis de bœuf au kir à l’aÿ d’âge mûr & cætera !")
+        );
+    }
 }
diff --git a/xwiki-commons-core/xwiki-commons-velocity/pom.xml b/xwiki-commons-core/xwiki-commons-velocity/pom.xml
index 1088c4a..835d2cd 100644
--- a/xwiki-commons-core/xwiki-commons-velocity/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-velocity/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-core</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-velocity</artifactId>
   <name>XWiki Commons - Velocity</name>
@@ -33,6 +33,7 @@
   <description>APIs to evaluate content with Velocity</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.70</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>68</xwiki.pitest.mutationThreshold>
     <!-- TODO: Remove once the tests have been fixed to not output anything to the console! -->
     <xwiki.surefire.captureconsole.skip>true</xwiki.surefire.captureconsole.skip>
     <!-- Name to display by the Extension Manager -->
@@ -100,6 +101,10 @@
       <artifactId>commons-collections4</artifactId>
     </dependency>
     <dependency>
+      <groupId>org.apache.commons</groupId>
+      <artifactId>commons-text</artifactId>
+    </dependency>
+    <dependency>
       <groupId>commons-codec</groupId>
       <artifactId>commons-codec</artifactId>
     </dependency>
@@ -120,7 +125,7 @@
     </dependency>
     <dependency>
       <!-- Used by JSONTool -->
-      <groupId>org.json</groupId>
+      <groupId>com.tdunning</groupId>
       <artifactId>json</artifactId>
     </dependency>
     <!-- Used by URLTool -->
diff --git a/xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/AbstractChainableUberspector.java b/xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/AbstractChainableUberspector.java
deleted file mode 100644
index 0a41406..0000000
--- a/xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/AbstractChainableUberspector.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- * See the NOTICE file distributed with this work for additional
- * information regarding copyright ownership.
- *
- * This is free software; you can redistribute it and/or modify it
- * under the terms of the GNU Lesser General Public License as
- * published by the Free Software Foundation; either version 2.1 of
- * the License, or (at your option) any later version.
- *
- * This software is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this software; if not, write to the Free
- * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
- * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
- */
-package org.xwiki.velocity.introspection;
-
-/**
- * Default implementation of a {@link ChainableUberspector chainable uberspector} that forwards all calls to the wrapped
- * uberspector (when that is possible). It should be used as the base class for all chainable uberspectors.
- *
- * @version $Id$
- * @since 1.5M1
- * @see ChainableUberspector
- * @deprecated since 8.0M1; this is now part of the official Velocity library, use
- *             {@link org.apache.velocity.util.introspection.AbstractChainableUberspector} instead
- */
-@Deprecated
-public abstract class AbstractChainableUberspector
-    extends org.apache.velocity.util.introspection.AbstractChainableUberspector implements ChainableUberspector
-{
-    @Override
-    public void init()
-    {
-        // This method is kept because the version in Velocity 1.7 doesn't catch exceptions
-        if (this.inner != null) {
-            try {
-                this.inner.init();
-            } catch (Exception e) {
-                this.log.error(e.getMessage(), e);
-            }
-        }
-    }
-}
diff --git a/xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/ChainableUberspector.java b/xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/ChainableUberspector.java
deleted file mode 100644
index 8be3f16..0000000
--- a/xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/ChainableUberspector.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- * See the NOTICE file distributed with this work for additional
- * information regarding copyright ownership.
- *
- * This is free software; you can redistribute it and/or modify it
- * under the terms of the GNU Lesser General Public License as
- * published by the Free Software Foundation; either version 2.1 of
- * the License, or (at your option) any later version.
- *
- * This software is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this software; if not, write to the Free
- * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
- * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
- */
-package org.xwiki.velocity.introspection;
-
-/**
- * Interface that marks uberspectors as chainable, meaning that multiple uberspectors can be combined in a chain (using
- * the Decorator pattern).
- *
- * @version $Id$
- * @since 1.5M1
- * @deprecated since 8.0M1; this is now part of the official Velocity library, use
- *             {@link org.apache.velocity.util.introspection.ChainableUberspector} instead
- */
-@Deprecated
-public interface ChainableUberspector extends org.apache.velocity.util.introspection.ChainableUberspector
-{
-    // Everything is part of the super interface
-}
diff --git a/xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/ChainingUberspector.java b/xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/ChainingUberspector.java
deleted file mode 100644
index 275615d..0000000
--- a/xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/ChainingUberspector.java
+++ /dev/null
@@ -1,177 +0,0 @@
-/*
- * See the NOTICE file distributed with this work for additional
- * information regarding copyright ownership.
- *
- * This is free software; you can redistribute it and/or modify it
- * under the terms of the GNU Lesser General Public License as
- * published by the Free Software Foundation; either version 2.1 of
- * the License, or (at your option) any later version.
- *
- * This software is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this software; if not, write to the Free
- * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
- * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
- */
-package org.xwiki.velocity.introspection;
-
-import org.apache.commons.lang3.StringUtils;
-import org.apache.velocity.runtime.RuntimeServices;
-import org.apache.velocity.util.ClassUtils;
-import org.apache.velocity.util.RuntimeServicesAware;
-import org.apache.velocity.util.introspection.Uberspect;
-import org.apache.velocity.util.introspection.UberspectLoggable;
-
-/**
- * <p>
- * Since the current version of the Velocity engine (1.5) does not allow more than one uberspector, this class is a
- * workaround. It manually constructs a <strong>chain of uberspectors</strong>, loading the classes in the order
- * defined in the <code>"runtime.introspector.uberspect.chainClasses"</code> property, and after that simply
- * forwarding all calls to the top of the chain. Note that the calls will be made from the rightmost class to the
- * leftmost one. Along the chain, each uberspectors can forward the call to the rest of the chain, build its own result,
- * and/or process in any way the resulting value. This allows uberspectors to enhance the list of returned methods,
- * block out methods returned by other uberspectors, or take various actions on the returned method (for example add or
- * remove parameters before searching the method, log executed method names, or catch exceptions when executing those
- * methods).
- * </p>
- * <p>
- * This is not actually part of the chain, but is more of a handle that allows the calls intended for only one
- * uberspector to reach the chain. It duplicates some of the code from the velocity runtime initialization code, hoping
- * that a future version of the engine will support chaining natively.
- * </p>
- * <p>
- * The chain is defined using the configuration parameter <code>runtime.introspector.uberspect.chainClasses</code>.
- * This property should contain a list of canonical class names. Any wrong entry in the list will be ignored. If this
- * property is not defined or contains only wrong classnames, then by default a <code>SecureUberspector</code> is used
- * as the only entry in the chain. The first (leftmost) uberspector does not have to be chainable (as it will not need
- * to forward calls). If a uberspector in the middle of the chain is not chainable, then it will break the chain at that
- * point (all previos uberspectors will be discarded from the chain).
- * </p>
- *
- * @since 1.5M1
- * @see ChainableUberspector
- * @version $Id$
- * @deprecated since 8.0M1; Velocity supports the same functionality natively since 1.6; just move the configuration
- *             from {@code runtime.introspector.uberspect.chainClasses} to {@code runtime.introspector.uberspect}
- */
-@Deprecated
-public class ChainingUberspector extends AbstractChainableUberspector implements Uberspect, RuntimeServicesAware,
-    UberspectLoggable
-{
-    /** The key of the parameter that allows defining the list of chained uberspectors. */
-    public static final String UBERSPECT_CHAIN_CLASSNAMES = "runtime.introspector.uberspect.chainClasses";
-
-    /** The runtime is needed for accessing the configuration. */
-    private RuntimeServices runtime;
-
-    @Override
-    public void setRuntimeServices(RuntimeServices rs)
-    {
-        this.runtime = rs;
-    }
-
-    /**
-     * {@inheritDoc}
-     * <p>
-     * This implementation initializes the uberspector chain.
-     * </p>
-     *
-     * @see org.apache.velocity.util.introspection.Uberspect#init()
-     */
-    @Override
-    public void init()
-    {
-        this.log.debug("Initializing the chaining uberspector.");
-        // Create the chain
-        // TODO Since we're in Plexus already, should we use components?
-        String[] chainClassnames = this.runtime.getConfiguration().getStringArray(UBERSPECT_CHAIN_CLASSNAMES);
-        for (String classname : chainClassnames) {
-            initializeUberspector(classname);
-        }
-        // If the chain is empty, use a SecureUberspector
-        if (this.inner == null) {
-            this.log.error("No chained uberspectors defined! "
-                + "This uberspector is just a placeholder that relies on a real uberspector "
-                + "to actually allow method calls. Using SecureUberspect instead as a fallback.");
-            initializeUberspector(SecureUberspector.class.getCanonicalName());
-        }
-        // Initialize all the uberspectors in the chain
-        try {
-            this.inner.init();
-        } catch (Exception e) {
-            this.log.warn(e.getMessage());
-        }
-    }
-
-    /**
-     * Instantiates an uberspector class and adds it to the chain. Also set the log and runtime services, if the class
-     * implements the proper interfaces. The {@link Uberspect#init()} method is not called.
-     *
-     * @param classname The name of the uberspector class to add to the chain.
-     */
-    protected void initializeUberspector(String classname)
-    {
-        // Avoids direct recursive calls
-        if (!StringUtils.isEmpty(classname) && !classname.equals(this.getClass().getCanonicalName())) {
-            Uberspect u = instantiateUberspector(classname);
-            if (u == null) {
-                return;
-            }
-
-            // Set the log and runtime services, if applicable
-            if (u instanceof UberspectLoggable) {
-                ((UberspectLoggable) u).setLog(this.log);
-            }
-            if (u instanceof RuntimeServicesAware) {
-                ((RuntimeServicesAware) u).setRuntimeServices(this.runtime);
-            }
-
-            // Link it in the chain
-            if (u instanceof ChainableUberspector) {
-                ((ChainableUberspector) u).wrap(this.inner);
-            } else if (u instanceof org.apache.velocity.util.introspection.ChainableUberspector) {
-                ((org.apache.velocity.util.introspection.ChainableUberspector) u).wrap(this.inner);
-            }
-            this.inner = u;
-        }
-    }
-
-    /**
-     * Tries to create an uberspector instance using reflection.
-     *
-     * @param classname The name of the uberspector class to instantiate.
-     * @return An instance of the specified Uberspector. If the class cannot be instantiated using the default
-     *         constructor, or does not implement {@link Uberspect}, <code>null</code> is returned.
-     */
-    protected Uberspect instantiateUberspector(String classname)
-    {
-        Object o = null;
-        try {
-            o = ClassUtils.getNewInstance(classname);
-        } catch (ClassNotFoundException cnfe) {
-            this.log.warn(String.format("The specified uberspector [%s]"
-                + " does not exist or is not accessible to the current classloader.", classname));
-        } catch (IllegalAccessException e) {
-            this.log.warn(String.format("The specified uberspector [%s] does not have a public default constructor.",
-                classname));
-        } catch (InstantiationException e) {
-            this.log.warn(String.format("The specified uberspector [%s] cannot be instantiated.", classname));
-        } catch (ExceptionInInitializerError e) {
-            this.log.warn(String.format("Exception while instantiating the Uberspector [%s]: %s", classname, e
-                .getMessage()));
-        }
-
-        if (!(o instanceof Uberspect)) {
-            if (o != null) {
-                this.log.warn("The specified class for Uberspect [" + classname + "] does not implement "
-                    + Uberspect.class.getName());
-            }
-            return null;
-        }
-        return (Uberspect) o;
-    }
-}
diff --git a/xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/DeprecatedCheckUberspector.java b/xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/DeprecatedCheckUberspector.java
index 5ed2d8b..7836007 100644
--- a/xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/DeprecatedCheckUberspector.java
+++ b/xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/DeprecatedCheckUberspector.java
@@ -38,7 +38,6 @@
  *
  * @since 1.5M1
  * @version $Id$
- * @see ChainableUberspector
  */
 public class DeprecatedCheckUberspector extends AbstractChainableUberspector implements Uberspect, UberspectLoggable
 {
diff --git a/xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/LinkingUberspector.java b/xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/LinkingUberspector.java
deleted file mode 100644
index a3aaea2..0000000
--- a/xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/LinkingUberspector.java
+++ /dev/null
@@ -1,233 +0,0 @@
-/*
- * See the NOTICE file distributed with this work for additional
- * information regarding copyright ownership.
- *
- * This is free software; you can redistribute it and/or modify it
- * under the terms of the GNU Lesser General Public License as
- * published by the Free Software Foundation; either version 2.1 of
- * the License, or (at your option) any later version.
- *
- * This software is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this software; if not, write to the Free
- * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
- * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
- */
-package org.xwiki.velocity.introspection;
-
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-
-import org.apache.commons.lang3.StringUtils;
-import org.apache.velocity.runtime.RuntimeServices;
-import org.apache.velocity.util.ClassUtils;
-import org.apache.velocity.util.RuntimeServicesAware;
-import org.apache.velocity.util.introspection.Info;
-import org.apache.velocity.util.introspection.Uberspect;
-import org.apache.velocity.util.introspection.UberspectImpl;
-import org.apache.velocity.util.introspection.UberspectLoggable;
-import org.apache.velocity.util.introspection.VelMethod;
-import org.apache.velocity.util.introspection.VelPropertyGet;
-import org.apache.velocity.util.introspection.VelPropertySet;
-
-/**
- * <p>
- * Since the current version of the Velocity engine (1.5) does not allow more than one uberspector, this class is a
- * workaround. It manually constructs an <strong>array of uberspectors</strong>, loading the classes in the order
- * defined in the <code>"runtime.introspector.uberspect.arrayClasses"</code> property, and after that forwards calls to
- * each of the uberspectors, in order, until one of them returns something different than <code>null</code>. Note that
- * the calls will be made from the leftmost class to the rightmost one. This allows building and combining different
- * small uberspectors that perform a specialised search for methods, instead of bloating a single class with different
- * introspection tricks.
- * </p>
- * <p>
- * This is not actually part of the array, but is more of a handle that allows the calls intended for only one
- * uberspector to reach the array. It duplicates some of the code from the velocity runtime initialization code, hoping
- * that a future version of the engine will support this natively.
- * </p>
- * <p>
- * The array is defined using the configuration parameter <code>runtime.introspector.uberspect.arrayClasses</code>. This
- * property should contain a list of canonical class names. Any wrong entry in the list will be ignored. If this
- * property is not defined or contains only wrong classnames, then by default a <code>SecureUberspector</code> is used
- * as the only entry in the array.
- * </p>
- *
- * @since 1.5RC1
- * @see ChainingUberspector
- * @version $Id$
- * @deprecated since 8.0M1; chaining uberspectors is much more powerful, this class was never more than a proof of
- *             concept
- */
-@Deprecated
-public class LinkingUberspector extends UberspectImpl implements Uberspect, RuntimeServicesAware, UberspectLoggable
-{
-    /** The key of the parameter that allows defining the array of uberspectors. */
-    public static final String UBERSPECT_ARRAY_CLASSNAMES = "runtime.introspector.uberspect.arrayClasses";
-
-    /** The runtime is needed for accessing the configuration. */
-    private RuntimeServices runtime;
-
-    /** The array of uberspectors to use. */
-    private List<Uberspect> uberspectors;
-
-    @Override
-    public void setRuntimeServices(RuntimeServices rs)
-    {
-        this.runtime = rs;
-    }
-
-    /**
-     * {@inheritDoc}
-     * <p>
-     * This implementation initializes the array of uberspectors.
-     * </p>
-     *
-     * @see org.apache.velocity.util.introspection.Uberspect#init()
-     */
-    @Override
-    public void init()
-    {
-        this.log.debug("Initializing the linking uberspector.");
-        // Create the array
-        String[] arrayClassnames = this.runtime.getConfiguration().getStringArray(UBERSPECT_ARRAY_CLASSNAMES);
-        this.uberspectors = new ArrayList<Uberspect>(arrayClassnames.length);
-        for (String classname : arrayClassnames) {
-            initializeUberspector(classname);
-        }
-        // If the chain is empty, use a SecureUberspector
-        if (this.uberspectors.isEmpty()) {
-            this.log.error("No uberspectors defined! "
-                + "This uberspector is just a placeholder that relies on at least one real uberspector "
-                + "to actually allow method calls. Using SecureUberspector instead as a fallback.");
-            initializeUberspector(SecureUberspector.class.getCanonicalName());
-        }
-    }
-
-    /**
-     * Instantiates and initializes an uberspector class and adds it to the array. Also set the log and runtime
-     * services, if the class implements the proper interfaces.
-     *
-     * @param classname The name of the uberspector class to add to the chain.
-     */
-    protected void initializeUberspector(String classname)
-    {
-        // Avoids direct recursive calls
-        if (!StringUtils.isEmpty(classname) && !classname.equals(this.getClass().getCanonicalName())) {
-            Uberspect u = instantiateUberspector(classname);
-            if (u == null) {
-                return;
-            }
-
-            // Set the log and runtime services, if applicable
-            if (u instanceof UberspectLoggable) {
-                ((UberspectLoggable) u).setLog(this.log);
-            }
-            if (u instanceof RuntimeServicesAware) {
-                ((RuntimeServicesAware) u).setRuntimeServices(this.runtime);
-            }
-
-            // Initialize the uberspector
-            try {
-                u.init();
-                // Add it to the array
-                this.uberspectors.add(u);
-            } catch (Exception e) {
-                this.log.warn(e.getMessage());
-                // If the initialization failed, don't add this uberspector to the chain.
-            }
-        }
-    }
-
-    /**
-     * Tries to create an uberspector instance using reflection.
-     *
-     * @param classname The name of the uberspector class to instantiate.
-     * @return An instance of the specified Uberspector. If the class cannot be instantiated using the default
-     *         constructor, or does not implement {@link Uberspect}, <code>null</code> is returned.
-     */
-    protected Uberspect instantiateUberspector(String classname)
-    {
-        Object o = null;
-        try {
-            o = ClassUtils.getNewInstance(classname);
-        } catch (ClassNotFoundException e) {
-            this.log.warn(String.format("The specified uberspector [%s]"
-                + " does not exist or is not accessible to the current classloader.", classname));
-        } catch (IllegalAccessException e) {
-            this.log.warn(String.format("The specified uberspector [%s] does not have a public default constructor.",
-                classname));
-        } catch (InstantiationException e) {
-            this.log.warn(String.format("The specified uberspector [%s] cannot be instantiated.", classname));
-        } catch (ExceptionInInitializerError e) {
-            this.log.warn(String.format("Exception while instantiating the Uberspector [%s]: %s", classname, e
-                .getMessage()));
-        }
-
-        if (!(o instanceof Uberspect)) {
-            if (o != null) {
-                this.log.warn("The specified class for Uberspect [" + classname + "] does not implement "
-                    + Uberspect.class.getName());
-            }
-            return null;
-        }
-        return (Uberspect) o;
-    }
-
-    @SuppressWarnings("unchecked")
-    @Override
-    public Iterator getIterator(Object obj, Info i) throws Exception
-    {
-        Iterator it;
-        for (Uberspect u : this.uberspectors) {
-            it = u.getIterator(obj, i);
-            if (it != null) {
-                return it;
-            }
-        }
-        return null;
-    }
-
-    @Override
-    public VelMethod getMethod(Object obj, String methodName, Object[] args, Info i) throws Exception
-    {
-        VelMethod method;
-        for (Uberspect u : this.uberspectors) {
-            method = u.getMethod(obj, methodName, args, i);
-            if (method != null) {
-                return method;
-            }
-        }
-        return null;
-    }
-
-    @Override
-    public VelPropertyGet getPropertyGet(Object obj, String identifier, Info i) throws Exception
-    {
-        VelPropertyGet getter;
-        for (Uberspect u : this.uberspectors) {
-            getter = u.getPropertyGet(obj, identifier, i);
-            if (getter != null) {
-                return getter;
-            }
-        }
-        return null;
-    }
-
-    @Override
-    public VelPropertySet getPropertySet(Object obj, String identifier, Object arg, Info i) throws Exception
-    {
-        VelPropertySet setter;
-        for (Uberspect u : this.uberspectors) {
-            setter = u.getPropertySet(obj, identifier, arg, i);
-            if (setter != null) {
-                return setter;
-            }
-        }
-        return null;
-    }
-}
diff --git a/xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/MethodArgumentsUberspector.java b/xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/MethodArgumentsUberspector.java
index a092672..ae4723b 100644
--- a/xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/MethodArgumentsUberspector.java
+++ b/xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/MethodArgumentsUberspector.java
@@ -49,7 +49,6 @@
  *
  * @since 4.1M2
  * @version $Id$
- * @see ChainableUberspector
  */
 public class MethodArgumentsUberspector extends AbstractChainableUberspector implements RuntimeServicesAware
 {
diff --git a/xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/tools/EscapeTool.java b/xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/tools/EscapeTool.java
index d6ce71c..e0bf699 100644
--- a/xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/tools/EscapeTool.java
+++ b/xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/tools/EscapeTool.java
@@ -28,7 +28,7 @@
 import org.apache.commons.codec.net.BCodec;
 import org.apache.commons.codec.net.QCodec;
 import org.apache.commons.codec.net.QuotedPrintableCodec;
-import org.apache.commons.lang3.StringEscapeUtils;
+import org.apache.commons.text.StringEscapeUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.xwiki.xml.XMLUtils;
diff --git a/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/internal/DefaultVelocityConfigurationTest.java b/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/internal/DefaultVelocityConfigurationTest.java
index 037821e..224aee7 100644
--- a/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/internal/DefaultVelocityConfigurationTest.java
+++ b/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/internal/DefaultVelocityConfigurationTest.java
@@ -23,17 +23,17 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.velocity.tools.generic.ListTool;
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+import org.xwiki.component.manager.ComponentManager;
 import org.xwiki.configuration.ConfigurationSource;
-import org.xwiki.test.mockito.MockitoComponentMockingRule;
-import org.xwiki.velocity.VelocityConfiguration;
+import org.xwiki.test.junit5.mockito.ComponentTest;
+import org.xwiki.test.junit5.mockito.InjectMockComponents;
 import org.xwiki.velocity.introspection.DeprecatedCheckUberspector;
 import org.xwiki.velocity.introspection.MethodArgumentsUberspector;
 import org.xwiki.velocity.introspection.SecureUberspector;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.mockito.Mockito.when;
 
 /**
@@ -42,42 +42,41 @@
  * @version $Id$
  * @since 2.4RC1
  */
+@ComponentTest
 public class DefaultVelocityConfigurationTest
 {
-    @Rule
-    public MockitoComponentMockingRule<VelocityConfiguration> mocker =
-        new MockitoComponentMockingRule<VelocityConfiguration>(DefaultVelocityConfiguration.class);
+    @InjectMockComponents
+    private DefaultVelocityConfiguration configuration;
 
-    @Before
-    public void configure() throws Exception
+    @BeforeEach
+    public void configure(ComponentManager componentManager) throws Exception
     {
-        ConfigurationSource source = this.mocker.getInstance(ConfigurationSource.class);
+        ConfigurationSource source = componentManager.getInstance(ConfigurationSource.class);
         when(source.getProperty("velocity.tools", Properties.class)).thenReturn(new Properties());
         when(source.getProperty("velocity.properties", Properties.class)).thenReturn(new Properties());
     }
 
     @Test
-    public void testDefaultToolsPresent() throws Exception
+    public void getToolsReturnsDefaultTools()
     {
         // Verify for example that the List tool is present.
-        assertEquals(ListTool.class.getName(), this.mocker.getComponentUnderTest().getTools().get("listtool"));
+        assertEquals(ListTool.class.getName(), this.configuration.getTools().get("listtool"));
     }
 
     @Test
-    public void testDefaultPropertiesPresent() throws Exception
+    public void getPropertiesReturnsDefaultProperties() throws Exception
     {
         // Verify that the secure uberspector is set by default
-        assertEquals(
-            StringUtils.join(new String[] { SecureUberspector.class.getName(),
-                DeprecatedCheckUberspector.class.getName(), MethodArgumentsUberspector.class.getName() }, ','),
-            this.mocker.getComponentUnderTest().getProperties().getProperty("runtime.introspector.uberspect"));
+        assertEquals(StringUtils.join(new String[] { SecureUberspector.class.getName(),
+            DeprecatedCheckUberspector.class.getName(), MethodArgumentsUberspector.class.getName() }, ','),
+            this.configuration.getProperties().getProperty("runtime.introspector.uberspect"));
 
         // Verify that null values are allowed by default
         assertEquals(Boolean.TRUE.toString(),
-            this.mocker.getComponentUnderTest().getProperties().getProperty("directive.set.null.allowed"));
+            this.configuration.getProperties().getProperty("directive.set.null.allowed"));
 
         // Verify that Macros are isolated by default
-        assertEquals(Boolean.TRUE.toString(), this.mocker.getComponentUnderTest().getProperties()
-            .getProperty("velocimacro.permissions.allow.inline.local.scope"));
+        assertEquals(Boolean.TRUE.toString(),
+            this.configuration.getProperties().getProperty("velocimacro.permissions.allow.inline.local.scope"));
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/internal/DefaultVelocityContextFactoryTest.java b/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/internal/DefaultVelocityContextFactoryTest.java
index 9ea3e6f..febcf56 100644
--- a/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/internal/DefaultVelocityContextFactoryTest.java
+++ b/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/internal/DefaultVelocityContextFactoryTest.java
@@ -24,17 +24,19 @@
 
 import org.apache.velocity.VelocityContext;
 import org.apache.velocity.tools.generic.ListTool;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.xwiki.component.manager.ComponentManager;
-import org.xwiki.test.annotation.AfterComponent;
-import org.xwiki.test.mockito.MockitoComponentMockingRule;
+import org.xwiki.test.annotation.BeforeComponent;
+import org.xwiki.test.junit5.mockito.ComponentTest;
+import org.xwiki.test.junit5.mockito.InjectMockComponents;
+import org.xwiki.test.junit5.mockito.MockComponent;
 import org.xwiki.velocity.VelocityConfiguration;
-import org.xwiki.velocity.VelocityContextFactory;
 import org.xwiki.velocity.VelocityContextInitializer;
 
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertNotSame;
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertSame;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
@@ -46,29 +48,24 @@
  *
  * @version $Id$
  */
+@ComponentTest
 public class DefaultVelocityContextFactoryTest
 {
-    @Rule
-    public MockitoComponentMockingRule<DefaultVelocityContextFactory> mocker =
-        new MockitoComponentMockingRule(DefaultVelocityContextFactory.class);
+    @MockComponent
+    private VelocityConfiguration configuration;
 
-    private VelocityContextFactory factory;
+    @MockComponent
+    private ComponentManager componentManager;
 
-    @Before
+    @InjectMockComponents
+    private DefaultVelocityContextFactory factory;
+
+    @BeforeComponent
     public void configure() throws Exception
     {
-        VelocityConfiguration configuration = this.mocker.getInstance(VelocityConfiguration.class);
         Properties properties = new Properties();
         properties.put("listtool", ListTool.class.getName());
-        when(configuration.getTools()).thenReturn(properties);
-
-        this.factory = this.mocker.getInstance(VelocityContextFactory.class);
-    }
-
-    @AfterComponent
-    public void overrideComponents() throws Exception
-    {
-        this.mocker.registerMockComponent(ComponentManager.class);
+        when(this.configuration.getTools()).thenReturn(properties);
     }
 
     /**
@@ -81,20 +78,19 @@ public void createDifferentContext() throws Exception
     {
         // We also verify that the VelocityContextInitializers are called.
         VelocityContextInitializer mockInitializer = mock(VelocityContextInitializer.class);
-        ComponentManager mockComponentManager = this.mocker.getInstance(ComponentManager.class);
-        when(mockComponentManager.getInstanceList(VelocityContextInitializer.class)).thenReturn(
-            Arrays.<Object>asList(mockInitializer));
+        when(this.componentManager.getInstanceList(VelocityContextInitializer.class)).thenReturn(
+            Arrays.asList(mockInitializer));
 
         VelocityContext context1 = this.factory.createContext();
         context1.put("param", "value");
         VelocityContext context2 = this.factory.createContext();
 
         verify(mockInitializer, times(2)).initialize(any(VelocityContext.class));
-        verify(mockComponentManager, times(2)).getInstanceList(VelocityContextInitializer.class);
+        verify(this.componentManager, times(2)).getInstanceList(VelocityContextInitializer.class);
 
-        Assert.assertNotSame(context1, context2);
-        Assert.assertNotNull(context1.get("listtool"));
-        Assert.assertSame(context2.get("listtool"), context1.get("listtool"));
-        Assert.assertNull(context2.get("param"));
+        assertNotSame(context1, context2);
+        assertNotNull(context1.get("listtool"));
+        assertSame(context2.get("listtool"), context1.get("listtool"));
+        assertNull(context2.get("param"));
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/internal/DefaultVelocityEngineTest.java b/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/internal/DefaultVelocityEngineTest.java
index 3aedcfa..266799c 100644
--- a/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/internal/DefaultVelocityEngineTest.java
+++ b/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/internal/DefaultVelocityEngineTest.java
@@ -33,6 +33,7 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.Future;
 
+import org.apache.commons.lang3.StringUtils;
 import org.apache.velocity.context.Context;
 import org.junit.Assert;
 import org.junit.Before;
@@ -41,7 +42,6 @@
 import org.xwiki.test.mockito.MockitoComponentMockingRule;
 import org.xwiki.velocity.VelocityConfiguration;
 import org.xwiki.velocity.XWikiVelocityException;
-import org.xwiki.velocity.introspection.ChainingUberspector;
 import org.xwiki.velocity.introspection.DeprecatedCheckUberspector;
 import org.xwiki.velocity.introspection.SecureUberspector;
 
@@ -60,9 +60,8 @@
     public void setUp() throws Exception
     {
         Properties properties = new Properties();
-        properties.put("runtime.introspector.uberspect", ChainingUberspector.class.getName());
-        properties.put("runtime.introspector.uberspect.chainClasses", SecureUberspector.class.getName() + ","
-            + DeprecatedCheckUberspector.class.getName());
+        properties.put("runtime.introspector.uberspect", StringUtils.join(
+            new String[] { SecureUberspector.class.getName(), DeprecatedCheckUberspector.class.getName() }, ','));
         properties.put("directive.set.null.allowed", Boolean.TRUE.toString());
         properties.put("velocimacro.permissions.allow.inline.local.scope", Boolean.TRUE.toString());
 
diff --git a/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/internal/util/VelocityParserTest.java b/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/internal/util/VelocityParserTest.java
index b3b93c6..624763e 100644
--- a/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/internal/util/VelocityParserTest.java
+++ b/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/internal/util/VelocityParserTest.java
@@ -87,4 +87,17 @@ public void getKeyWordDirective() throws InvalidVelocityException
         Assert.assertFalse(context.isInVelocityBlock());
         Assert.assertEquals(VelocityType.MACRO, context.getType());
     }
+
+    @Test
+    public void getDirective() throws InvalidVelocityException
+    {
+        VelocityParserContext context = new VelocityParserContext();
+        StringBuffer buffer = new StringBuffer();
+
+        int index = this.parser.getDirective("#if($a==1)true enough#elseno way!#end".toCharArray(), 0, buffer, context);
+
+        Assert.assertEquals("#if($a==1)".length(), index);
+        Assert.assertEquals("#if($a==1)", buffer.toString());
+        Assert.assertTrue(context.isInVelocityBlock());
+    }
 }
diff --git a/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/ChainingUberspectorTest.java b/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/ChainingUberspectorTest.java
deleted file mode 100644
index 171c94b..0000000
--- a/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/ChainingUberspectorTest.java
+++ /dev/null
@@ -1,293 +0,0 @@
-/*
- * See the NOTICE file distributed with this work for additional
- * information regarding copyright ownership.
- *
- * This is free software; you can redistribute it and/or modify it
- * under the terms of the GNU Lesser General Public License as
- * published by the Free Software Foundation; either version 2.1 of
- * the License, or (at your option) any later version.
- *
- * This software is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this software; if not, write to the Free
- * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
- * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
- */
-package org.xwiki.velocity.introspection;
-
-import java.io.StringReader;
-import java.io.StringWriter;
-import java.util.Date;
-import java.util.Properties;
-
-import org.apache.velocity.VelocityContext;
-import org.apache.velocity.runtime.RuntimeConstants;
-import org.apache.velocity.util.introspection.UberspectImpl;
-import org.jmock.Expectations;
-import org.jmock.States;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.slf4j.Logger;
-import org.xwiki.component.util.ReflectionUtils;
-import org.xwiki.test.ComponentManagerRule;
-import org.xwiki.test.annotation.ComponentList;
-import org.xwiki.test.jmock.JMockRule;
-import org.xwiki.velocity.VelocityEngine;
-import org.xwiki.velocity.internal.DefaultVelocityConfiguration;
-import org.xwiki.velocity.internal.DefaultVelocityContextFactory;
-import org.xwiki.velocity.internal.DefaultVelocityEngine;
-
-/**
- * Unit tests for {@link ChainingUberspector}.
- */
-@ComponentList({
-    DefaultVelocityEngine.class,
-    DefaultVelocityConfiguration.class,
-    DefaultVelocityContextFactory.class
-})
-public class ChainingUberspectorTest
-{
-    @Rule
-    public final ComponentManagerRule componentManager = new ComponentManagerRule();
-
-    @Rule
-    public final JMockRule mockery = new JMockRule();
-
-    private VelocityEngine engine;
-
-    private Logger mockLogger;
-
-    private States loggingVerification = this.mockery.states("loggingVerification");
-
-    @Before
-    public void setUp() throws Exception
-    {
-        // Register in-memory configuration sources for the test.
-        this.componentManager.registerMemoryConfigurationSource();
-
-        this.engine = this.componentManager.getInstance(VelocityEngine.class);
-
-        this.mockLogger = this.mockery.mock(Logger.class);
-        this.mockery.checking(new Expectations()
-        {
-            {
-                ignoring(ChainingUberspectorTest.this.mockLogger);
-                when(ChainingUberspectorTest.this.loggingVerification.isNot("on"));
-            }
-        });
-
-        ReflectionUtils.setFieldValue(this.engine, "logger", this.mockLogger);
-    }
-
-    /*
-     * Tests that the uberspectors in the chain are called, and without a real uberspector no methods are found.
-     */
-    @Test
-    public void testEmptyChain() throws Exception
-    {
-        Properties prop = new Properties();
-        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, ChainingUberspector.class
-                .getCanonicalName());
-        prop.setProperty(ChainingUberspector.UBERSPECT_CHAIN_CLASSNAMES, TestingUberspector.class
-                .getCanonicalName());
-        TestingUberspector.methodCalls = 0;
-        this.engine.initialize(prop);
-        StringWriter writer = new StringWriter();
-        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate",
-            new StringReader("#set($foo = 'hello')#set($bar = $foo.toString())$bar"));
-        Assert.assertEquals("$bar", writer.toString());
-        Assert.assertEquals(1, TestingUberspector.methodCalls);
-    }
-
-    /*
-     * Tests that using several uberspectors in the chain works, and methods are correctly found by the last uberspector
-     * in the chain.
-     */
-    @Test
-    public void testBasicChaining() throws Exception
-    {
-        Properties prop = new Properties();
-        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, ChainingUberspector.class
-            .getCanonicalName());
-        prop.setProperty(ChainingUberspector.UBERSPECT_CHAIN_CLASSNAMES, UberspectImpl.class
-            .getCanonicalName()
-            + "," + TestingUberspector.class.getCanonicalName());
-        TestingUberspector.methodCalls = 0;
-        TestingUberspector.getterCalls = 0;
-        this.engine.initialize(prop);
-        StringWriter writer = new StringWriter();
-        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate",
-            new StringReader("#set($foo = 'hello')#set($bar = $foo.toString())$bar"));
-        Assert.assertEquals("hello", writer.toString());
-        Assert.assertEquals(1, TestingUberspector.methodCalls);
-        Assert.assertEquals(0, TestingUberspector.getterCalls);
-    }
-
-    /*
-     * Tests that invalid uberspectors classnames are ignored.
-     */
-    @Test
-    public void testInvalidUberspectorsAreIgnored() throws Exception
-    {
-        Properties prop = new Properties();
-        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, ChainingUberspector.class
-            .getCanonicalName());
-        prop.setProperty(ChainingUberspector.UBERSPECT_CHAIN_CLASSNAMES, UberspectImpl.class
-            .getCanonicalName()
-            + ","
-            + AbstractChainableUberspector.class.getCanonicalName()
-            + ","
-            + InvalidUberspector.class.getCanonicalName()
-            + ","
-            + TestingUberspector.class.getCanonicalName() + "," + Date.class.getCanonicalName());
-        TestingUberspector.methodCalls = 0;
-        InvalidUberspector.methodCalls = 0;
-        this.engine.initialize(prop);
-        StringWriter writer = new StringWriter();
-        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate",
-            new StringReader("#set($foo = 'hello')#set($bar = $foo.toString())$bar"));
-        Assert.assertEquals("hello", writer.toString());
-        Assert.assertEquals(1, TestingUberspector.methodCalls);
-        Assert.assertEquals(0, InvalidUberspector.methodCalls);
-    }
-
-    /*
-     * Tests that a non-chainable entry in the chain does not forward calls.
-     */
-    @Test
-    public void testChainBreakingOnNonChainableEntry() throws Exception
-    {
-        Properties prop = new Properties();
-        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, ChainingUberspector.class
-            .getCanonicalName());
-        prop.setProperty(ChainingUberspector.UBERSPECT_CHAIN_CLASSNAMES, TestingUberspector.class
-            .getCanonicalName()
-            + "," + UberspectImpl.class.getCanonicalName());
-        TestingUberspector.methodCalls = 0;
-        this.engine.initialize(prop);
-        StringWriter writer = new StringWriter();
-        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate",
-            new StringReader("#set($foo = 'hello')#set($bar = $foo.toString())$bar"));
-        Assert.assertEquals("hello", writer.toString());
-        Assert.assertEquals(0, TestingUberspector.methodCalls);
-    }
-
-    /*
-     * Checks that the default (non-secure) uberspector works and allows calling restricted methods.
-     */
-    @Test
-    public void testDefaultUberspectorWorks() throws Exception
-    {
-        Properties prop = new Properties();
-        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, ChainingUberspector.class
-            .getCanonicalName());
-        prop.setProperty(ChainingUberspector.UBERSPECT_CHAIN_CLASSNAMES, UberspectImpl.class
-            .getCanonicalName());
-        this.engine.initialize(prop);
-        StringWriter writer = new StringWriter();
-        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate",
-            new StringReader("#set($foo = 'hello')"
-                + "#set($bar = $foo.getClass().getConstructors())$bar"));
-        Assert.assertTrue(writer.toString().startsWith("[Ljava.lang.reflect.Constructor"));
-    }
-
-    /*
-     * Checks that the secure uberspector works and does not allow calling restricted methods.
-     */
-    @Test
-    public void testSecureUberspectorWorks() throws Exception
-    {
-        Properties prop = new Properties();
-        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, ChainingUberspector.class
-            .getCanonicalName());
-        prop.setProperty(ChainingUberspector.UBERSPECT_CHAIN_CLASSNAMES, SecureUberspector.class
-            .getCanonicalName());
-        this.engine.initialize(prop);
-        StringWriter writer = new StringWriter();
-
-        this.loggingVerification.become("on");
-        this.mockery.checking(new Expectations()
-        {{
-            // Get rid of debug log
-            allowing(mockLogger).isDebugEnabled();
-            returnValue(false);
-
-            // Allow one warning for getConstructors since it's forbidden
-            oneOf(mockLogger).warn("Cannot retrieve method getConstructors from object of class java.lang.Class due to security restrictions.");
-        }});
-
-        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate",
-            new StringReader("#set($foo = 'hello')"
-                + "#set($bar = $foo.getClass().getConstructors())$foo $foo.class.name $bar"));
-        Assert.assertEquals("hello java.lang.String $bar", writer.toString());
-    }
-
-    /*
-     * Checks that when the chain property is not configured, by default the secure ubespector is used.
-     */
-    @Test
-    public void testSecureUberspectorEnabledByDefault() throws Exception
-    {
-        Properties prop = new Properties();
-        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, ChainingUberspector.class
-            .getCanonicalName());
-        prop.setProperty(ChainingUberspector.UBERSPECT_CHAIN_CLASSNAMES, "");
-        this.engine.initialize(prop);
-        StringWriter writer = new StringWriter();
-        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate",
-            new StringReader("#set($foo = 'hello')"
-                + "#set($bar = $foo.getClass().getConstructors())$foo $foo.class.name $bar"));
-        Assert.assertEquals("hello java.lang.String $bar", writer.toString());
-    }
-
-    /*
-     * Checks that the deprecated check uberspector works.
-     */
-    @SuppressWarnings("deprecation")
-    @Test
-    public void testDeprecatedUberspector() throws Exception
-    {
-        Properties prop = new Properties();
-        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, ChainingUberspector.class
-            .getCanonicalName());
-        prop.setProperty(ChainingUberspector.UBERSPECT_CHAIN_CLASSNAMES, UberspectImpl.class
-            .getCanonicalName()
-            + ","
-            + TestingUberspector.class.getCanonicalName()
-            + ","
-            + DeprecatedCheckUberspector.class.getCanonicalName());
-        TestingUberspector.methodCalls = 0;
-        TestingUberspector.getterCalls = 0;
-        this.engine.initialize(prop);
-        StringWriter writer = new StringWriter();
-        VelocityContext context = new org.apache.velocity.VelocityContext();
-        Date d = new Date();
-        context.put("date", d);
-        context.put("dobject", new DeprecatedObject());
-
-        final String threadIdPrefix = Thread.currentThread().getId() + ":";
-
-        // Define expectations on the Logger
-        this.loggingVerification.become("on");
-        this.mockery.checking(new Expectations()
-        {{
-            oneOf(mockLogger).warn("Deprecated usage of method [java.util.Date.getYear] in " + threadIdPrefix + "mytemplate@1,19");
-            oneOf(mockLogger).warn("Deprecated usage of getter [java.util.Date.getMonth] in " + threadIdPrefix + "mytemplate@1,40");
-            oneOf(mockLogger).warn("Deprecated usage of method [org.xwiki.velocity.introspection.DeprecatedObject.foo] in " + threadIdPrefix + "mytemplate@1,55");
-            oneOf(mockLogger).warn("Deprecated usage of method [org.xwiki.velocity.introspection.DeprecatedObject.size] in " + threadIdPrefix + "mytemplate@1,70");
-        }});
-
-        this.engine.evaluate(context, writer, "mytemplate",
-            new StringReader("#set($foo = $date.getYear())$foo $date.month $dobject.foo() $dobject.size()"));
-
-        Assert.assertEquals(d.getYear() + " " + d.getMonth() + " foo 0", writer.toString());
-        Assert.assertEquals(3, TestingUberspector.methodCalls);
-        Assert.assertEquals(1, TestingUberspector.getterCalls);
-    }
-}
diff --git a/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/DeprecatedObject.java b/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/DeprecatedObject.java
deleted file mode 100644
index 88f5b71..0000000
--- a/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/DeprecatedObject.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- * See the NOTICE file distributed with this work for additional
- * information regarding copyright ownership.
- *
- * This is free software; you can redistribute it and/or modify it
- * under the terms of the GNU Lesser General Public License as
- * published by the Free Software Foundation; either version 2.1 of
- * the License, or (at your option) any later version.
- *
- * This software is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this software; if not, write to the Free
- * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
- * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
- */
-package org.xwiki.velocity.introspection;
-
-import java.util.ArrayList;
-
-@Deprecated
-public class DeprecatedObject extends ArrayList<String>
-{
-    public String foo()
-    {
-        return "foo";
-    }
-}
diff --git a/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/InvalidUberspector.java b/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/InvalidUberspector.java
deleted file mode 100644
index dc3084a..0000000
--- a/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/InvalidUberspector.java
+++ /dev/null
@@ -1,40 +0,0 @@
-/*
- * See the NOTICE file distributed with this work for additional
- * information regarding copyright ownership.
- *
- * This is free software; you can redistribute it and/or modify it
- * under the terms of the GNU Lesser General Public License as
- * published by the Free Software Foundation; either version 2.1 of
- * the License, or (at your option) any later version.
- *
- * This software is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this software; if not, write to the Free
- * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
- * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
- */
-package org.xwiki.velocity.introspection;
-
-import org.apache.velocity.util.introspection.Info;
-import org.apache.velocity.util.introspection.VelMethod;
-
-public class InvalidUberspector extends AbstractChainableUberspector
-{
-    public static int methodCalls = 0;
-
-    private InvalidUberspector()
-    {
-        // This is private to ensure that it cannot be instatiated. Nothing to do here.
-    }
-
-    @Override
-    public VelMethod getMethod(Object obj, String methodName, Object[] args, Info i) throws Exception
-    {
-        ++methodCalls;
-        return super.getMethod(obj, methodName, args, i);
-    }
-}
diff --git a/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/LinkingUberspectorTest.java b/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/LinkingUberspectorTest.java
deleted file mode 100644
index a82fc93..0000000
--- a/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/LinkingUberspectorTest.java
+++ /dev/null
@@ -1,159 +0,0 @@
-/*
- * See the NOTICE file distributed with this work for additional
- * information regarding copyright ownership.
- *
- * This is free software; you can redistribute it and/or modify it
- * under the terms of the GNU Lesser General Public License as
- * published by the Free Software Foundation; either version 2.1 of
- * the License, or (at your option) any later version.
- *
- * This software is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this software; if not, write to the Free
- * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
- * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
- */
-package org.xwiki.velocity.introspection;
-
-import java.io.StringReader;
-import java.io.StringWriter;
-import java.util.Date;
-import java.util.Properties;
-
-import org.apache.velocity.runtime.RuntimeConstants;
-import org.apache.velocity.util.introspection.UberspectImpl;
-import org.junit.Assert;
-import org.junit.Test;
-import org.xwiki.test.jmock.AbstractComponentTestCase;
-import org.xwiki.velocity.VelocityEngine;
-
-/**
- * Unit tests for {@link LinkingUberspector}.
- *
- * @version $Id$
- */
-public class LinkingUberspectorTest extends AbstractComponentTestCase
-{
-    private VelocityEngine engine;
-
-    @Override
-    protected void registerComponents() throws Exception
-    {
-        this.engine = getComponentManager().getInstance(VelocityEngine.class);
-    }
-
-    /*
-     * Tests that the uberspectors in the list are called, and without a real uberspector no methods are found.
-     */
-    @Test
-    public void testEmptyArray() throws Exception
-    {
-        Properties prop = new Properties();
-        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, LinkingUberspector.class.getCanonicalName());
-        prop.setProperty(LinkingUberspector.UBERSPECT_ARRAY_CLASSNAMES, TestingUberspector.class.getCanonicalName());
-        TestingUberspector.methodCalls = 0;
-        this.engine.initialize(prop);
-        StringWriter writer = new StringWriter();
-        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate", new StringReader(
-            "#set($foo = 'hello')#set($bar = $foo.toString())$bar"));
-        Assert.assertEquals("$bar", writer.toString());
-        Assert.assertEquals(1, TestingUberspector.methodCalls);
-    }
-
-    /*
-     * Tests that using several uberspectors in the array works, methods are correctly found by a valid uberspector in
-     * the chain, and after a method is found no further calls are performed.
-     */
-    @Test
-    public void testBasicArray() throws Exception
-    {
-        Properties prop = new Properties();
-        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, LinkingUberspector.class.getCanonicalName());
-        prop.setProperty(LinkingUberspector.UBERSPECT_ARRAY_CLASSNAMES, TestingUberspector.class.getCanonicalName()
-            + "," + TestingUberspector.class.getCanonicalName() + "," + UberspectImpl.class.getCanonicalName() + ","
-            + TestingUberspector.class.getCanonicalName());
-        TestingUberspector.methodCalls = 0;
-        TestingUberspector.getterCalls = 0;
-        this.engine.initialize(prop);
-        StringWriter writer = new StringWriter();
-        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate", new StringReader(
-            "#set($foo = 'hello')#set($bar = $foo.toString())$bar"));
-        Assert.assertEquals("hello", writer.toString());
-        Assert.assertEquals(2, TestingUberspector.methodCalls);
-        Assert.assertEquals(0, TestingUberspector.getterCalls);
-    }
-
-    /*
-     * Tests that invalid uberspectors classnames are ignored.
-     */
-    @Test
-    public void testInvalidUberspectorsAreIgnored() throws Exception
-    {
-        Properties prop = new Properties();
-        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, LinkingUberspector.class.getCanonicalName());
-        prop.setProperty(LinkingUberspector.UBERSPECT_ARRAY_CLASSNAMES, Date.class.getCanonicalName() + ","
-            + AbstractChainableUberspector.class.getCanonicalName() + "," + InvalidUberspector.class.getCanonicalName()
-            + "," + TestingUberspector.class.getCanonicalName() + "," + UberspectImpl.class.getCanonicalName());
-        TestingUberspector.methodCalls = 0;
-        InvalidUberspector.methodCalls = 0;
-        this.engine.initialize(prop);
-        StringWriter writer = new StringWriter();
-        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate", new StringReader(
-            "#set($foo = 'hello')#set($bar = $foo.toString())$bar"));
-        Assert.assertEquals("hello", writer.toString());
-        Assert.assertEquals(1, TestingUberspector.methodCalls);
-        Assert.assertEquals(0, InvalidUberspector.methodCalls);
-    }
-
-    /*
-     * Checks that the default (non-secure) uberspector works and allows calling restricted methods.
-     */
-    @Test
-    public void testDefaultUberspectorWorks() throws Exception
-    {
-        Properties prop = new Properties();
-        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, LinkingUberspector.class.getCanonicalName());
-        prop.setProperty(LinkingUberspector.UBERSPECT_ARRAY_CLASSNAMES, UberspectImpl.class.getCanonicalName());
-        this.engine.initialize(prop);
-        StringWriter writer = new StringWriter();
-        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate", new StringReader(
-            "#set($foo = 'hello')" + "#set($bar = $foo.getClass().getConstructors())$bar"));
-        Assert.assertTrue(writer.toString().startsWith("[Ljava.lang.reflect.Constructor"));
-    }
-
-    /*
-     * Checks that the secure uberspector works and does not allow calling restricted methods.
-     */
-    @Test
-    public void testSecureUberspectorWorks() throws Exception
-    {
-        Properties prop = new Properties();
-        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, LinkingUberspector.class.getCanonicalName());
-        prop.setProperty(LinkingUberspector.UBERSPECT_ARRAY_CLASSNAMES, SecureUberspector.class.getCanonicalName());
-        this.engine.initialize(prop);
-        StringWriter writer = new StringWriter();
-        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate", new StringReader(
-            "#set($foo = 'hello')" + "#set($bar = $foo.getClass().getConstructors())$foo$bar"));
-        Assert.assertEquals("hello$bar", writer.toString());
-    }
-
-    /*
-     * Checks that when the array property is not configured, by default the secure ubespector is used.
-     */
-    @Test
-    public void testSecureUberspectorEnabledByDefault() throws Exception
-    {
-        Properties prop = new Properties();
-        prop.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, LinkingUberspector.class.getCanonicalName());
-        prop.setProperty(LinkingUberspector.UBERSPECT_ARRAY_CLASSNAMES, "");
-        this.engine.initialize(prop);
-        StringWriter writer = new StringWriter();
-        this.engine.evaluate(new org.apache.velocity.VelocityContext(), writer, "mytemplate", new StringReader(
-            "#set($foo = 'hello')" + "#set($bar = $foo.getClass().getConstructors())$foo$bar"));
-        Assert.assertEquals("hello$bar", writer.toString());
-    }
-}
diff --git a/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/TestingUberspector.java b/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/TestingUberspector.java
deleted file mode 100644
index d324083..0000000
--- a/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/TestingUberspector.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * See the NOTICE file distributed with this work for additional
- * information regarding copyright ownership.
- *
- * This is free software; you can redistribute it and/or modify it
- * under the terms of the GNU Lesser General Public License as
- * published by the Free Software Foundation; either version 2.1 of
- * the License, or (at your option) any later version.
- *
- * This software is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this software; if not, write to the Free
- * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
- * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
- */
-package org.xwiki.velocity.introspection;
-
-import org.apache.velocity.util.introspection.Info;
-import org.apache.velocity.util.introspection.VelMethod;
-import org.apache.velocity.util.introspection.VelPropertyGet;
-
-public class TestingUberspector extends AbstractChainableUberspector
-{
-    public static int methodCalls = 0;
-
-    public static int getterCalls = 0;
-
-    @Override
-    public VelMethod getMethod(Object obj, String methodName, Object[] args, Info i) throws Exception
-    {
-        ++methodCalls;
-        return super.getMethod(obj, methodName, args, i);
-    }
-
-    @Override
-    public VelPropertyGet getPropertyGet(Object obj, String identifier, Info i) throws Exception
-    {
-        ++getterCalls;
-        return super.getPropertyGet(obj, identifier, i);
-    }
-}
diff --git a/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/tools/CSSIdentifierSerializerTest.java b/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/tools/CSSIdentifierSerializerTest.java
index 1f89945..0bebf42 100644
--- a/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/tools/CSSIdentifierSerializerTest.java
+++ b/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/tools/CSSIdentifierSerializerTest.java
@@ -19,9 +19,12 @@
  */
 package org.xwiki.velocity.tools;
 
-import org.junit.Test;
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 
 /**
  * Unit tests for {@link CSSIdentifierSerializer}.
@@ -35,11 +38,14 @@
     /**
      * NOTE: This test was adapted from Mathias Bynens' tests for CSS.escape polyfill, available under the MIT license.
      * 
-     * @see https://drafts.csswg.org/cssom/#serialize-an-identifier
-     * @see https://github.com/mathiasbynens/CSS.escape/blob/master/tests/tests.js
+     * @see <a href="https://drafts.csswg.org/cssom/#serialize-an-identifier">
+     *       https://drafts.csswg.org/cssom/#serialize-an-identifier</a>
+     * @see <a href="https://github.com/mathiasbynens/CSS.escape/blob/master/tests/tests.js">
+     *       https://github.com/mathiasbynens/CSS.escape/blob/master/tests/tests.js</a>
      */
     @Test
-    public void css()
+    @DisplayName("Various CSS serialization tests")
+    public void serialize()
     {
         assertCssThrowsException("\u0000");
         assertCssThrowsException("a\u0000");
@@ -119,11 +125,9 @@ private void assertCss(String expected, String actual)
 
     private void assertCssThrowsException(String input)
     {
-        try {
+        Throwable exception = assertThrows(IllegalArgumentException.class, () -> {
             this.cssIdentifierSerializer.serialize(input);
-            fail("Should have thrown IllegalArgumentException!");
-        } catch (IllegalArgumentException e) {
-            assertEquals("Invalid character: the input contains U+0000.", e.getMessage());
-        }
+        });
+        assertEquals("Invalid character: the input contains U+0000.", exception.getMessage());
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/tools/URLToolTest.java b/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/tools/URLToolTest.java
index efa3993..ff59908 100644
--- a/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/tools/URLToolTest.java
+++ b/xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/tools/URLToolTest.java
@@ -24,9 +24,11 @@
 import java.util.Collections;
 import java.util.Map;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 /**
  * Unit tests for {@link URLTool}.
@@ -42,34 +44,34 @@
     public void testSimpleUrlParse()
     {
         Map<String, ?> query = tool.parseQuery("a=b%26c");
-        assertEquals("should have one parameter", Collections.singleton("a"), query.keySet());
-        assertEquals("should have one parameter value", Collections.singletonList("b&c"), query.get("a"));
+        assertEquals(Collections.singleton("a"), query.keySet(), "should have one parameter");
+        assertEquals(Collections.singletonList("b&c"), query.get("a"), "should have one parameter value");
     }
 
     @Test
     public void testUrlParseMultipleValues()
     {
         Map<String, ?> query = tool.parseQuery("a=b+c&a=b%3Dc&ab=a+%26+b");
-        assertEquals("should have two parameter", 2, query.size());
-        assertEquals("should have one parameter value for ab", Collections.singletonList("a & b"), query.get("ab"));
-        assertEquals("should have two parameter values for a", Arrays.asList(new String[] {"b c", "b=c"}),
-            query.get("a"));
+        assertEquals(2, query.size(), "should have two parameter");
+        assertEquals(Collections.singletonList("a & b"), query.get("ab"), "should have one parameter value for ab");
+        assertEquals(Arrays.asList(new String[] {"b c", "b=c"}), query.get("a"),
+            "should have two parameter values for a");
     }
 
     @Test
     public void testInvalidUrlParse()
     {
         Map<String, ?> query = tool.parseQuery("a=b ' onclick='foo");
-        assertEquals("should have one parameter", Collections.singleton("a"), query.keySet());
-        assertEquals("should have one parameter", Collections.singletonList("b ' onclick='foo"), query.get("a"));
+        assertEquals(Collections.singleton("a"), query.keySet(), "should have one parameter");
+        assertEquals(Collections.singletonList("b ' onclick='foo"), query.get("a"), "should have one parameter");
     }
 
     @Test
     public void testHandleNull()
     {
         Map<String, ?> query = tool.parseQuery(null);
-        assertNotNull("null query results in empty map", query);
-        assertTrue("null query results in empty map", query.isEmpty());
+        assertNotNull(query, "null query results in empty map");
+        assertTrue(query.isEmpty(), "null query results in empty map");
     }
 
     @Test
diff --git a/xwiki-commons-core/xwiki-commons-xml/pom.xml b/xwiki-commons-core/xwiki-commons-xml/pom.xml
index 68f9982..ba7bf61 100644
--- a/xwiki-commons-core/xwiki-commons-xml/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-xml/pom.xml
@@ -25,14 +25,15 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-core</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-xml</artifactId>
   <name>XWiki Commons - XML</name>
   <packaging>jar</packaging>
   <description>XWiki Commons - XML</description>
   <properties>
-    <xwiki.jacoco.instructionRatio>0.51</xwiki.jacoco.instructionRatio>
+    <xwiki.jacoco.instructionRatio>0.61</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>63</xwiki.pitest.mutationThreshold>
     <!-- There's a utility class with lots of features, allow it to have many dependencies;
          There's a SAX event listener, which requires complex code -->
     <checkstyle.suppressions.location>${basedir}/src/main/checkstyle/checkstyle-suppressions.xml</checkstyle.suppressions.location>
@@ -57,9 +58,13 @@
       <artifactId>commons-lang3</artifactId>
     </dependency>
     <dependency>
+      <groupId>org.apache.commons</groupId>
+      <artifactId>commons-text</artifactId>
+    </dependency>
+    <dependency>
       <groupId>net.sourceforge.htmlcleaner</groupId>
       <artifactId>htmlcleaner</artifactId>
-      <version>2.16</version>
+      <version>2.22</version>
     </dependency>
     <dependency>
       <groupId>xerces</groupId>
@@ -73,7 +78,6 @@
       <groupId>com.fasterxml.woodstox</groupId>
       <artifactId>woodstox-core</artifactId>
     </dependency>
-
     <!-- Testing dependencies -->
     <dependency>
       <groupId>org.xwiki.commons</groupId>
diff --git a/xwiki-commons-core/xwiki-commons-xml/src/main/java/org/htmlcleaner/XWikiDOMSerializer.java b/xwiki-commons-core/xwiki-commons-xml/src/main/java/org/htmlcleaner/XWikiDOMSerializer.java
index e3a07bb..166e739 100644
--- a/xwiki-commons-core/xwiki-commons-xml/src/main/java/org/htmlcleaner/XWikiDOMSerializer.java
+++ b/xwiki-commons-core/xwiki-commons-xml/src/main/java/org/htmlcleaner/XWikiDOMSerializer.java
@@ -28,8 +28,8 @@
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.ParserConfigurationException;
 
-import org.apache.commons.lang3.StringEscapeUtils;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.text.StringEscapeUtils;
 import org.w3c.dom.Comment;
 import org.w3c.dom.DOMImplementation;
 import org.w3c.dom.Document;
@@ -82,18 +82,11 @@
     private CleanerProperties props;
 
     /**
-     * Whether XML entities should be escaped or not.
-     */
-    private boolean escapeXml;
-
-    /**
      * @param props the HTML Cleaner properties set by the user to control the HTML cleaning.
-     * @param escapeXml if true then escape XML entities
      */
-    public XWikiDOMSerializer(CleanerProperties props, boolean escapeXml)
+    public XWikiDOMSerializer(CleanerProperties props)
     {
         this.props = props;
-        this.escapeXml = escapeXml;
     }
 
     /**
@@ -155,9 +148,7 @@ public Document createDOM(DocumentBuilder documentDocumentBuilder, TagNode rootN
             Map.Entry<String, String> entry = entryIterator.next();
             String attrName = entry.getKey();
             String attrValue = entry.getValue();
-            if (escapeXml) {
-                attrValue = Utils.escapeXml(attrValue, props, true);
-            }
+            attrValue = Utils.escapeXml(attrValue, props, true);
 
             document.getDocumentElement().setAttribute(attrName, attrValue);
 
@@ -189,7 +180,7 @@ private void flushContent(Document document, Element element, StringBuilder buff
             boolean specialCase = this.props.isUseCdataForScriptAndStyle() && isScriptOrStyle(element);
             String content = bufferedContent.toString();
 
-            if (this.escapeXml && !specialCase) {
+            if (!specialCase) {
                 content = Utils.escapeXml(content, this.props, true);
             } else if (specialCase) {
                 content = processCDATABlocks(content);
@@ -300,9 +291,7 @@ private void createSubnodes(Document document, Element element, List<? extends B
                     for (Map.Entry<String, String> entry : attributes.entrySet()) {
                         String attrName = entry.getKey();
                         String attrValue = entry.getValue();
-                        if (this.escapeXml) {
-                            attrValue = Utils.escapeXml(attrValue, this.props, true);
-                        }
+                        attrValue = Utils.escapeXml(attrValue, this.props, true);
                         subelement.setAttribute(attrName, attrValue);
                     }
 
diff --git a/xwiki-commons-core/xwiki-commons-xml/src/main/java/org/xwiki/xml/internal/html/DefaultHTMLCleaner.java b/xwiki-commons-core/xwiki-commons-xml/src/main/java/org/xwiki/xml/internal/html/DefaultHTMLCleaner.java
index bb10fc6..4d51a54 100644
--- a/xwiki-commons-core/xwiki-commons-xml/src/main/java/org/xwiki/xml/internal/html/DefaultHTMLCleaner.java
+++ b/xwiki-commons-core/xwiki-commons-xml/src/main/java/org/xwiki/xml/internal/html/DefaultHTMLCleaner.java
@@ -20,7 +20,6 @@
 package org.xwiki.xml.internal.html;
 
 import java.io.Reader;
-import java.io.StringReader;
 import java.util.Arrays;
 
 import javax.inject.Inject;
@@ -39,8 +38,6 @@
 import org.htmlcleaner.XWikiDOMSerializer;
 import org.w3c.dom.Document;
 import org.xwiki.component.annotation.Component;
-import org.xwiki.component.phase.Initializable;
-import org.xwiki.component.phase.InitializationException;
 import org.xwiki.context.Execution;
 import org.xwiki.context.ExecutionContext;
 import org.xwiki.xml.html.HTMLCleaner;
@@ -57,7 +54,7 @@
  */
 @Component
 @Singleton
-public class DefaultHTMLCleaner implements HTMLCleaner, Initializable
+public class DefaultHTMLCleaner implements HTMLCleaner
 {
     /**
      * {@link HTMLFilter} for filtering html lists.
@@ -106,23 +103,6 @@
     private Execution execution;
 
     @Override
-    public void initialize() throws InitializationException
-    {
-        // The clean method below is thread safe. However it seems that DOMOutputter.output() is not fully thread safe
-        // since it causes the following exception on the first time it's called from different threads:
-        //  Caused by: org.jdom.JDOMException: Reflection failed while creating new JAXP document:
-        //  duplicate class definition: org/apache/xerces/jaxp/DocumentBuilderFactoryImpl
-        //  at org.jdom.adapters.JAXPDOMAdapter.createDocument(JAXPDOMAdapter.java:191)
-        //  at org.jdom.adapters.AbstractDOMAdapter.createDocument(AbstractDOMAdapter.java:133)
-        //  at org.jdom.output.DOMOutputter.createDOMDocument(DOMOutputter.java:208)
-        //  at org.jdom.output.DOMOutputter.output(DOMOutputter.java:127)
-        // Since this only happens once, we call it first here at initialization time (since there's no thread
-        // contention at that time). Note: This email thread seems to say it's thread safe but that's not what we see
-        // here: http:osdir.com/ml/text.xml.xforms.chiba.devel/2006-09/msg00025.html
-        clean(new StringReader(""));
-    }
-
-    @Override
     public Document clean(Reader originalHtmlContent)
     {
         return clean(originalHtmlContent, getDefaultConfiguration());
@@ -175,7 +155,7 @@ public Document clean(Reader originalHtmlContent, HTMLCleanerConfiguration confi
             cleanedNode.setDocType(new DoctypeToken("html", "PUBLIC", "-//W3C//DTD XHTML 1.0 Strict//EN",
                 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"));
             result =
-                new XWikiDOMSerializer(cleanerProperties, false).createDOM(getAvailableDocumentBuilder(), cleanedNode);
+                new XWikiDOMSerializer(cleanerProperties).createDOM(getAvailableDocumentBuilder(), cleanedNode);
         } catch (ParserConfigurationException ex) {
             throw new RuntimeException("Error while serializing TagNode into w3c dom.", ex);
         }
@@ -232,7 +212,10 @@ private CleanerProperties getDefaultCleanerProperties(HTMLCleanerConfiguration c
 
         // Set Cleaner transformations
         defaultProperties.setCleanerTransformations(getDefaultCleanerTransformations(configuration));
-        
+
+        // Don't convert special HTML entities (i.e. &ocirc;, &permil;, &times;) with unicode characters they represent.
+        defaultProperties.setTranslateSpecialEntities(false);
+
         // By default, we are cleaning XHTML 1.0 code, not HTML 5.
         // Note: Tests are broken if we don't set the version 4, meaning that supporting HTML5 requires some work.
         // TODO: handle HTML5 correctly (see: https://jira.xwiki.org/browse/XCOMMONS-901)
diff --git a/xwiki-commons-core/xwiki-commons-xml/src/main/java/org/xwiki/xml/internal/html/filter/BodyFilter.java b/xwiki-commons-core/xwiki-commons-xml/src/main/java/org/xwiki/xml/internal/html/filter/BodyFilter.java
index ead3901..8d16caf 100644
--- a/xwiki-commons-core/xwiki-commons-xml/src/main/java/org/xwiki/xml/internal/html/filter/BodyFilter.java
+++ b/xwiki-commons-core/xwiki-commons-xml/src/main/java/org/xwiki/xml/internal/html/filter/BodyFilter.java
@@ -47,7 +47,14 @@
 public class BodyFilter extends AbstractHTMLFilter
 {
     /**
-     * List of valid children elements of the BODY element in XHTML.
+     * List of valid children elements of the BODY element in HTML4 (https://www.w3.org/TR/html4/sgml/dtd.html):
+     * <pre>{@code
+     * <!ELEMENT BODY O O (%block;|SCRIPT)+ +(INS|DEL) -- document body -->
+     * ...
+     * <!ENTITY % block
+     * "P | %heading; | %list; | %preformatted; | DL | DIV | NOSCRIPT |
+     * BLOCKQUOTE | FORM | HR | TABLE | FIELDSET | ADDRESS">
+     * }</pre>
      */
     private static final List<String> ALLOWED_BODY_TAGS = Arrays.asList(HTMLConstants.TAG_ADDRESS,
         HTMLConstants.TAG_BLOCKQUOTE, HTMLConstants.TAG_DEL, HTMLConstants.TAG_DIV, HTMLConstants.TAG_FIELDSET,
@@ -62,24 +69,20 @@ public void filter(Document document, Map<String, String> cleaningParameters)
         Node body = document.getElementsByTagName(HTMLConstants.TAG_BODY).item(0);
         Node currentNode = body.getFirstChild();
         Node markerNode = null;
-        boolean containsOnlySpaces = true;
+        boolean containsOnlySpacesSoFar = false;
         while (currentNode != null) {
             // Note: We ignore comment nodes since there's no need to wrap them.
             if (currentNode.getNodeType() != Node.COMMENT_NODE) {
                 if (!ALLOWED_BODY_TAGS.contains(currentNode.getNodeName())) {
 
                     // Ensure that we don't wrap elements that contain only spaces or newlines.
-                    containsOnlySpaces = containsOnlySpaces(currentNode);
+                    containsOnlySpacesSoFar = containsOnlySpacesSoFar(currentNode, markerNode, containsOnlySpacesSoFar);
 
                     if (markerNode == null) {
                         markerNode = currentNode;
-                    } else {
-                        // Do nothing, just go to the next node.
                     }
                 } else if (markerNode != null) {
-                    // surround all the nodes starting with the marker node with a paragraph unless there are only
-                    // whitespaces or newlines.
-                    if (!containsOnlySpaces) {
+                    if (!containsOnlySpacesSoFar) {
                         surroundWithParagraph(document, body, markerNode, currentNode);
                     }
                     markerNode = null;
@@ -90,11 +93,23 @@ public void filter(Document document, Map<String, String> cleaningParameters)
 
         // If the marker is still set it means we need to wrap all elements between the marker till
         // the end of the body siblings with a paragraph.
-        if (markerNode != null && !containsOnlySpaces) {
+        if (markerNode != null && !containsOnlySpacesSoFar) {
             surroundWithParagraph(document, body, markerNode, null);
         }
     }
 
+    private boolean containsOnlySpacesSoFar(Node currentNode, Node markerNode, boolean containsOnlySpacesSoFar)
+    {
+        boolean result = containsOnlySpacesSoFar;
+        boolean containsOnlySpaces = containsOnlySpaces(currentNode);
+        if (markerNode == null && !containsOnlySpacesSoFar && containsOnlySpaces) {
+            result = true;
+        } else if (containsOnlySpacesSoFar && !containsOnlySpaces) {
+            result = false;
+        }
+        return result;
+    }
+
     /**
      * @param currentNode the current node to check
      * @return false if the current node contains something other than whitespaces or newlines, true otherwise
diff --git a/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/XMLUtilsTest.java b/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/XMLUtilsTest.java
index f7a963b..6ec6a76 100644
--- a/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/XMLUtilsTest.java
+++ b/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/XMLUtilsTest.java
@@ -19,8 +19,9 @@
  */
 package org.xwiki.xml;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
 
 /**
  * Unit tests for {@link org.xwiki.xml.XMLUtils}.
@@ -31,167 +32,163 @@
 public class XMLUtilsTest
 {
     @Test
-    public void testEscapeXMLComment()
+    public void escapeXMLComment()
     {
-        Assert.assertEquals("-\\- ", XMLUtils.escapeXMLComment("-- "));
-        Assert.assertEquals("-\\", XMLUtils.escapeXMLComment("-"));
-        Assert.assertEquals("-\\-\\-\\", XMLUtils.escapeXMLComment("---"));
-        Assert.assertEquals("- ", XMLUtils.escapeXMLComment("- "));
+        assertEquals("-\\- ", XMLUtils.escapeXMLComment("-- "));
+        assertEquals("-\\", XMLUtils.escapeXMLComment("-"));
+        assertEquals("-\\-\\-\\", XMLUtils.escapeXMLComment("---"));
+        assertEquals("- ", XMLUtils.escapeXMLComment("- "));
     }
 
     @Test
-    public void testUnescapeXMLComment()
+    public void unescapeXMLComment()
     {
-        Assert.assertEquals("", XMLUtils.unescapeXMLComment("\\"));
-        Assert.assertEquals("\\", XMLUtils.unescapeXMLComment("\\\\"));
-        Assert.assertEquals("--", XMLUtils.unescapeXMLComment("\\-\\-"));
-        Assert.assertEquals("--", XMLUtils.unescapeXMLComment("\\-\\-\\"));
+        assertEquals("", XMLUtils.unescapeXMLComment("\\"));
+        assertEquals("\\", XMLUtils.unescapeXMLComment("\\\\"));
+        assertEquals("--", XMLUtils.unescapeXMLComment("\\-\\-"));
+        assertEquals("--", XMLUtils.unescapeXMLComment("\\-\\-\\"));
     }
 
     @Test
-    public void testEscape()
+    public void escape()
     {
         String escapedText = XMLUtils.escape("a < a' && a' < a\" => a < a\"");
 
-        Assert.assertFalse("Failed to escape <", escapedText.contains("<"));
-        Assert.assertFalse("Failed to escape >", escapedText.contains(">"));
-        Assert.assertFalse("Failed to escape '", escapedText.contains("'"));
-        Assert.assertFalse("Failed to escape \"", escapedText.contains("\""));
-        Assert.assertFalse("Failed to escape &", escapedText.contains("&&"));
+        assertFalse(escapedText.contains("<"), "Failed to escape <");
+        assertFalse(escapedText.contains(">"), "Failed to escape >");
+        assertFalse(escapedText.contains("'"), "Failed to escape '");
+        assertFalse(escapedText.contains("\""), "Failed to escape \"");
+        assertFalse(escapedText.contains("&&"), "Failed to escape &");
     }
 
     @Test
-    public void testEscapeApos()
+    public void escapeApos()
     {
-        Assert.assertFalse("' wrongly escaped to non-HTML &apos;", XMLUtils.escape("'").equals("&apos;"));
+        assertFalse(XMLUtils.escape("'").equals("&apos;"), "' wrongly escaped to non-HTML &apos;");
     }
 
     @Test
-    public void testEscapeEmptyString()
+    public void escapeEmptyString()
     {
-        Assert.assertEquals("\"\" should be \"\"", "", XMLUtils.escape(""));
+        assertEquals("", XMLUtils.escape(""), "\"\" should be \"\"");
     }
 
     @Test
-    public void testEscapeWithNull()
+    public void escapeWithNull()
     {
-        Assert.assertNull("null should be null", XMLUtils.escape(null));
+        assertNull(XMLUtils.escape(null), "null should be null");
     }
 
     @Test
-    public void testEscapeNonAscii()
+    public void escapeNonAscii()
     {
-        Assert.assertEquals("Non-ASCII characters were escaped", "\u0123", XMLUtils.escape("\u0123"));
+        assertEquals("\u0123", XMLUtils.escape("\u0123"), "Non-ASCII characters were escaped");
     }
 
     @Test
-    public void testEscapeAttributeValue()
+    public void escapeAttributeValue()
     {
+        String escapedText = XMLUtils.escapeAttributeValue("a < a' && a' < a\" => a < a\" {");
 
-        String escapedText = XMLUtils.escapeAttributeValue("a < a' && a' < a\" => a < a\"");
-
-        Assert.assertFalse("Failed to escape <", escapedText.contains("<"));
-        Assert.assertFalse("Failed to escape >", escapedText.contains(">"));
-        Assert.assertFalse("Failed to escape '", escapedText.contains("'"));
-        Assert.assertFalse("Failed to escape \"", escapedText.contains("\""));
-        Assert.assertFalse("Failed to escape &", escapedText.contains("&&"));
+        assertFalse(escapedText.contains("<"), "Failed to escape <");
+        assertFalse(escapedText.contains(">"), "Failed to escape >");
+        assertFalse(escapedText.contains("'"), "Failed to escape '");
+        assertFalse(escapedText.contains("\""), "Failed to escape \"");
+        assertFalse(escapedText.contains("&&"), "Failed to escape &");
+        assertFalse(escapedText.contains("{"), "Failed to escape {");
     }
 
     @Test
-    public void testEscapeAttributeValueApos()
+    public void escapeAttributeValueApos()
     {
-        Assert.assertFalse("' wrongly escaped to non-HTML &apos;", XMLUtils.escapeAttributeValue("'")
-            .equals("&apos;"));
+        assertFalse(XMLUtils.escapeAttributeValue("'").equals("&apos;"), "' wrongly escaped to non-HTML &apos;");
     }
 
     @Test
-    public void testEscapeFAttributeValueEmptyString()
+    public void escapeFAttributeValueEmptyString()
     {
-        Assert.assertEquals("\"\" should be \"\"", "", XMLUtils.escapeAttributeValue(""));
+        assertEquals("", XMLUtils.escapeAttributeValue(""), "\"\" should be \"\"");
     }
 
     @Test
-    public void testEscapeFAttributeValueWithNull()
+    public void escapeFAttributeValueWithNull()
     {
-        Assert.assertNull("null should be null", XMLUtils.escapeAttributeValue(null));
+        assertNull(XMLUtils.escapeAttributeValue(null), "null should be null");
     }
 
     @Test
-    public void testEscapeAttributeValueNonAscii()
+    public void escapeAttributeValueNonAscii()
     {
-        Assert.assertEquals("Non-ASCII characters were escaped", "\u0123", XMLUtils.escapeAttributeValue("\u0123"));
+        assertEquals("\u0123", XMLUtils.escapeAttributeValue("\u0123"), "Non-ASCII characters were escaped");
     }
 
     @Test
-    public void testEscapeElementContent()
+    public void escapeElementContent()
     {
-
         String escapedText = XMLUtils.escapeElementContent("a < a' && a' < a\" => a < a\"");
 
-        Assert.assertFalse("Failed to escape <", escapedText.contains("<"));
-        Assert.assertFalse("Failed to escape >", escapedText.contains(">"));
-        Assert.assertTrue("Wrongfully escaped '", escapedText.contains("'"));
-        Assert.assertTrue("Wrongfully escaped \"", escapedText.contains("\""));
-        Assert.assertFalse("Failed to escape &", escapedText.contains("&&"));
+        assertFalse(escapedText.contains("<"), "Failed to escape <");
+        assertFalse(escapedText.contains(">"), "Failed to escape >");
+        assertTrue(escapedText.contains("'"), "Wrongfully escaped '");
+        assertTrue(escapedText.contains("\""), "Wrongfully escaped \"");
+        assertFalse(escapedText.contains("&&"), "Failed to escape &");
     }
 
     @Test
-    public void testEscapeElementContentEmptyString()
+    public void escapeElementContentEmptyString()
     {
-        Assert.assertEquals("\"\" should be \"\"", "", XMLUtils.escapeElementContent(""));
+        assertEquals("", XMLUtils.escapeElementContent(""), "\"\" should be \"\"");
     }
 
     @Test
-    public void testEscapeElementContentWithNull()
+    public void escapeElementContentWithNull()
     {
-        Assert.assertNull("null should be null", XMLUtils.escapeElementContent(null));
+        assertNull(XMLUtils.escapeElementContent(null), "null should be null");
     }
 
     @Test
-    public void testEscapeElementContentNonAscii()
+    public void escapeElementContentNonAscii()
     {
-        Assert.assertEquals("Non-ASCII characters were escaped", "\u0123", XMLUtils.escapeElementContent("\u0123"));
+        assertEquals("\u0123", XMLUtils.escapeElementContent("\u0123"), "Non-ASCII characters were escaped");
     }
 
     @Test
-    public void testUnescape()
+    public void unescape()
     {
-        Assert.assertEquals("Failed to unescaped named entities", "&'\"<>",
-            XMLUtils.unescape("&amp;&apos;&quot;&lt;&gt;"));
-        Assert.assertEquals("Failed to unescaped decimal entities", "&'\"<>",
-            XMLUtils.unescape("&#38;&#39;&#34;&#60;&#62;"));
-        Assert.assertEquals("Failed to unescaped decimal entities with leading zeros", "&'\"<>",
-            XMLUtils.unescape("&#038;&#0039;&#00034;&#000060;&#0000062;"));
-        Assert.assertEquals("Failed to unescaped hexadecimal entities", "&'\"<<>>",
-            XMLUtils.unescape("&#x26;&#x27;&#x22;&#x3c;&#x3C;&#x3e;&#x3E;"));
-        Assert.assertEquals("Failed to unescaped hexadecimal entities with leading zeros", "&'\"<<>>",
-            XMLUtils.unescape("&#x026;&#x0027;&#x00022;&#x00003c;&#x0003C;&#x003e;&#x03E;"));
+        assertEquals("&'\"<>", XMLUtils.unescape("&amp;&apos;&quot;&lt;&gt;"), "Failed to unescaped named entities");
+        assertEquals("&'\"<>", XMLUtils.unescape("&#38;&#39;&#34;&#60;&#62;"), "Failed to unescaped decimal entities");
+        assertEquals("&'\"<>", XMLUtils.unescape("&#038;&#0039;&#00034;&#000060;&#0000062;"),
+            "Failed to unescaped decimal entities with leading zeros");
+        assertEquals("&'\"<<>>", XMLUtils.unescape("&#x26;&#x27;&#x22;&#x3c;&#x3C;&#x3e;&#x3E;"),
+            "Failed to unescaped hexadecimal entities");
+        assertEquals("&'\"<<>>", XMLUtils.unescape("&#x026;&#x0027;&#x00022;&#x00003c;&#x0003C;&#x003e;&#x03E;"),
+            "Failed to unescaped hexadecimal entities with leading zeros");
     }
 
     @Test
-    public void testUnescapeEmptyString()
+    public void unescapeEmptyString()
     {
-        Assert.assertEquals("\"\" should be \"\"", "", XMLUtils.unescape(""));
+        assertEquals("", XMLUtils.unescape(""), "\"\" should be \"\"");
     }
 
     @Test
-    public void testUnescapeWithNull()
+    public void unescapeWithNull()
     {
-        Assert.assertNull("null should be null", XMLUtils.unescape(null));
+        assertNull(XMLUtils.unescape(null), "null should be null");
     }
 
     @Test
-    public void testUnescapeOtherEscapes()
+    public void unescapeOtherEscapes()
     {
-        Assert.assertEquals("Extra named entities were unescaped", "&deg;", XMLUtils.unescape("&deg;"));
-        Assert.assertEquals("Extra decimal entities were unescaped", "&#65;", XMLUtils.unescape("&#65;"));
-        Assert.assertEquals("Extra hexadecimal entities were unescaped", "&#x5;", XMLUtils.unescape("&#x5;"));
+        assertEquals("&deg;", XMLUtils.unescape("&deg;"), "Extra named entities were unescaped");
+        assertEquals("&#65;", XMLUtils.unescape("&#65;"), "Extra decimal entities were unescaped");
+        assertEquals("&#x5;", XMLUtils.unescape("&#x5;"), "Extra hexadecimal entities were unescaped");
     }
 
     @Test
-    public void testGetDomDocument()
+    public void createDomDocument()
     {
         // Nothing much that we can test here...
-        Assert.assertNotNull(XMLUtils.createDOMDocument());
+        assertNotNull(XMLUtils.createDOMDocument());
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/html/HTMLUtilsTest.java b/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/html/HTMLUtilsTest.java
index b7bd3c8..e14b386 100644
--- a/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/html/HTMLUtilsTest.java
+++ b/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/html/HTMLUtilsTest.java
@@ -21,14 +21,13 @@
 
 import java.io.StringReader;
 
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.w3c.dom.Document;
+import org.xwiki.component.manager.ComponentManager;
 import org.xwiki.context.internal.DefaultExecution;
-import org.xwiki.test.ComponentManagerRule;
 import org.xwiki.test.annotation.ComponentList;
+import org.xwiki.test.junit5.mockito.ComponentTest;
 import org.xwiki.xml.internal.html.DefaultHTMLCleaner;
 import org.xwiki.xml.internal.html.DefaultHTMLCleanerTest;
 import org.xwiki.xml.internal.html.filter.AttributeFilter;
@@ -38,12 +37,15 @@
 import org.xwiki.xml.internal.html.filter.ListFilter;
 import org.xwiki.xml.internal.html.filter.ListItemFilter;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
 /**
  * Unit tests for {@link org.xwiki.xml.html.HTMLUtils}.
  * 
  * @version $Id$
  * @since 1.8.3
  */
+@ComponentTest
 @ComponentList({
     LinkFilter.class,
     ListFilter.class,
@@ -58,31 +60,28 @@
 {
     private HTMLCleaner cleaner;
 
-    @Rule
-    public final ComponentManagerRule componentManager = new ComponentManagerRule();
-
-    @Before
-    public void setUp() throws Exception
+    @BeforeEach
+    public void setUp(ComponentManager componentManager) throws Exception
     {
-        this.cleaner = this.componentManager.getInstance(HTMLCleaner.class);
+        this.cleaner = componentManager.getInstance(HTMLCleaner.class);
     }
 
     @Test
-    public void testStripHTMLEnvelope() throws Exception
+    public void stripHTMLEnvelope() throws Exception
     {
         Document document =
             this.cleaner.clean(new StringReader("<html><head><body><p>test1</p><p>test2</p></body></html>"));
         HTMLUtils.stripHTMLEnvelope(document);
-        Assert.assertEquals(DefaultHTMLCleanerTest.HEADER + "<html><p>test1</p><p>test2</p></html>\n",
+        assertEquals(DefaultHTMLCleanerTest.HEADER + "<html><p>test1</p><p>test2</p></html>\n",
             HTMLUtils.toString(document));
     }
 
     @Test
-    public void testStripTopLevelParagraph() throws Exception
+    public void stripTopLevelParagraph() throws Exception
     {
         Document document = this.cleaner.clean(new StringReader("<html><head /><body><p>test</p></body></html>"));
         HTMLUtils.stripFirstElementInside(document, "body", "p");
-        Assert.assertEquals(DefaultHTMLCleanerTest.HEADER + "<html><head></head><body>test</body></html>\n",
+        assertEquals(DefaultHTMLCleanerTest.HEADER + "<html><head></head><body>test</body></html>\n",
             HTMLUtils.toString(document));
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/internal/html/DefaultHTMLCleanerTest.java b/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/internal/html/DefaultHTMLCleanerTest.java
index 6bc5ef3..f65a010 100644
--- a/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/internal/html/DefaultHTMLCleanerTest.java
+++ b/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/internal/html/DefaultHTMLCleanerTest.java
@@ -26,14 +26,12 @@
 import java.util.List;
 import java.util.Map;
 
-import org.junit.Assert;
-import org.junit.Ignore;
-import org.junit.Rule;
-import org.junit.Test;
-import org.xwiki.component.manager.ComponentLookupException;
+import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
+import org.xwiki.component.manager.ComponentManager;
 import org.xwiki.test.annotation.ComponentList;
-import org.xwiki.test.mockito.MockitoComponentMockingRule;
-import org.xwiki.xml.html.HTMLCleaner;
+import org.xwiki.test.junit5.mockito.ComponentTest;
+import org.xwiki.test.junit5.mockito.InjectMockComponents;
 import org.xwiki.xml.html.HTMLCleanerConfiguration;
 import org.xwiki.xml.html.HTMLUtils;
 import org.xwiki.xml.html.filter.HTMLFilter;
@@ -45,14 +43,25 @@
 import org.xwiki.xml.internal.html.filter.ListItemFilter;
 import org.xwiki.xml.internal.html.filter.UniqueIdFilter;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
 /**
  * Unit tests for {@link org.xwiki.xml.internal.html.DefaultHTMLCleaner}.
  *
  * @version $Id$
  * @since 1.6M1
  */
-@ComponentList({ ListFilter.class, ListItemFilter.class, FontFilter.class, BodyFilter.class, AttributeFilter.class,
-UniqueIdFilter.class, DefaultHTMLCleaner.class, LinkFilter.class })
+@ComponentTest
+@ComponentList({
+    ListFilter.class,
+    ListItemFilter.class,
+    FontFilter.class,
+    BodyFilter.class,
+    AttributeFilter.class,
+    UniqueIdFilter.class,
+    DefaultHTMLCleaner.class,
+    LinkFilter.class
+})
 public class DefaultHTMLCleanerTest
 {
     public static final String HEADER = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
@@ -63,12 +72,11 @@
 
     private static final String FOOTER = "</body></html>\n";
 
-    @Rule
-    public final MockitoComponentMockingRule<HTMLCleaner> mocker = new MockitoComponentMockingRule<HTMLCleaner>(
-        DefaultHTMLCleaner.class);
+    @InjectMockComponents
+    private DefaultHTMLCleaner cleaner;
 
     @Test
-    public void elementExpansion() throws ComponentLookupException
+    public void elementExpansion()
     {
         assertHTML("<p><textarea></textarea></p>", "<textarea/>");
 
@@ -78,31 +86,27 @@ public void elementExpansion() throws ComponentLookupException
     }
 
     @Test
-    public void specialCharacters() throws ComponentLookupException
+    public void specialCharacters()
     {
-        // TODO: We still have a problem I think in that if there are characters such as "&" or quote in the source
-        // text they are not escaped. This is because we have use "false" in DefaultHTMLCleaner here:
-        // Document document = new JDomSerializer(this.cleanerProperties, false).createJDom(cleanedNode);
-        // See the problem described here: http://sourceforge.net/forum/forum.php?thread_id=2243880&forum_id=637246
         assertHTML("<p>&quot;&amp;**notbold**&lt;notag&gt;&nbsp;</p>",
             "<p>&quot;&amp;**notbold**&lt;notag&gt;&nbsp;</p>");
-        assertHTML("<p>\"&amp;</p>", "<p>\"&</p>");
+        assertHTML("<p>&quot;&amp;</p>", "<p>\"&</p>");
         assertHTML("<p><img src=\"http://host.com/a.gif?a=foo&amp;b=bar\" /></p>",
             "<img src=\"http://host.com/a.gif?a=foo&b=bar\" />");
-        assertHTML("<p>&#xA;</p>", "<p>&#xA;</p>");
+        assertHTML("<p>\n</p>", "<p>&#xA;</p>");
 
         // Verify that double quotes are escaped in attribute values
         assertHTML("<p value=\"script:&quot;&quot;\"></p>", "<p value='script:\"\"'");
     }
 
     @Test
-    public void closeUnbalancedTags() throws ComponentLookupException
+    public void closeUnbalancedTags()
     {
         assertHTML("<hr /><p>hello</p>", "<hr><p>hello");
     }
 
     @Test
-    public void conversionsFromHTML() throws ComponentLookupException
+    public void conversionsFromHTML()
     {
         assertHTML("<p>this <strong>is</strong> bold</p>", "this <b>is</b> bold");
         assertHTML("<p><em>italic</em></p>", "<i>italic</i>");
@@ -119,7 +123,7 @@ public void conversionsFromHTML() throws ComponentLookupException
     }
 
     @Test
-    public void convertImageAlignment() throws ComponentLookupException
+    public void convertImageAlignment()
     {
         assertHTML("<p><img style=\"float:left\" /></p>", "<img align=\"left\"/>");
         assertHTML("<p><img style=\"float:right\" /></p>", "<img align=\"right\"/>");
@@ -129,7 +133,7 @@ public void convertImageAlignment() throws ComponentLookupException
     }
 
     @Test
-    public void convertImplicitParagraphs() throws ComponentLookupException
+    public void convertImplicitParagraphs()
     {
         assertHTML("<p>word1</p><p>word2</p><p>word3</p><hr /><p>word4</p>", "word1<p>word2</p>word3<hr />word4");
 
@@ -149,7 +153,7 @@ public void convertImplicitParagraphs() throws ComponentLookupException
     }
 
     @Test
-    public void cleanNonXHTMLLists() throws ComponentLookupException
+    public void cleanNonXHTMLLists()
     {
         // Fixing invalid list item.
         assertHTML("<ul><li>item</li></ul>", "<li>item</li>");
@@ -179,12 +183,12 @@ public void cleanNonXHTMLLists() throws ComponentLookupException
      * Verify that scripts are not cleaned and that we can have a CDATA section inside. Also verify CDATA behaviors.
      */
     @Test
-    public void scriptAndCData() throws ComponentLookupException
+    public void scriptAndCData()
     {
         assertHTML("<script type=\"text/javascript\">//<![CDATA[\n\nalert(\"Hello World\")\n\n//]]></script>",
             "<script type=\"text/javascript\"><![CDATA[\nalert(\"Hello World\")\n]]></script>");
 
-        assertHTML("<script type=\"text/javascript\">//<![CDATA[\n//\nalert(\"Hello World\")\n\n//]]></script>",
+        assertHTML("<script type=\"text/javascript\">//<![CDATA[\n\nalert(\"Hello World\")\n\n//]]></script>",
             "<script type=\"text/javascript\">//<![CDATA[\nalert(\"Hello World\")\n//]]></script>");
 
         assertHTML("<script type=\"text/javascript\">//<![CDATA[\n\nalert(\"Hello World\")\n\n//]]></script>",
@@ -212,7 +216,7 @@ public void scriptAndCData() throws ComponentLookupException
      * Verify that inline style elements are not cleaned and that we can have a CDATA section inside.
      */
     @Test
-    public void styleAndCData() throws ComponentLookupException
+    public void styleAndCData()
     {
         assertHTMLWithHeadContent("<style type=\"text/css\">/*<![CDATA[*/\na { color: red; }\n/*]]>*/</style>",
             "<style type=\"text/css\"><![CDATA[\na { color: red; }\n]]></style>");
@@ -231,46 +235,42 @@ public void styleAndCData() throws ComponentLookupException
      * Verify that we can control what filters are used for cleaning.
      */
     @Test
-    public void explicitFilterList() throws ComponentLookupException
+    public void explicitFilterList()
     {
-        HTMLCleanerConfiguration configuration = this.mocker.getComponentUnderTest().getDefaultConfiguration();
-        configuration.setFilters(Collections.<HTMLFilter>emptyList());
-        String result =
-            HTMLUtils.toString(this.mocker.getComponentUnderTest().clean(new StringReader("something"), configuration));
+        HTMLCleanerConfiguration configuration = this.cleaner.getDefaultConfiguration();
+        configuration.setFilters(Collections.emptyList());
+        String result = HTMLUtils.toString(this.cleaner.clean(new StringReader("something"), configuration));
         // Note that if the default Body filter had been executed the result would have been:
         // <p>something</p>.
-        Assert.assertEquals(HEADER_FULL + "something" + FOOTER, result);
+        assertEquals(HEADER_FULL + "something" + FOOTER, result);
     }
 
     /**
      * Verify that the restricted parameter works.
      */
     @Test
-    public void restrictedHtml() throws ComponentLookupException
+    public void restrictedHtml()
     {
-        HTMLCleanerConfiguration configuration = this.mocker.getComponentUnderTest().getDefaultConfiguration();
-        Map<String, String> parameters = new HashMap<String, String>();
+        HTMLCleanerConfiguration configuration = this.cleaner.getDefaultConfiguration();
+        Map<String, String> parameters = new HashMap<>();
         parameters.putAll(configuration.getParameters());
         parameters.put("restricted", "true");
         configuration.setParameters(parameters);
 
-        String result =
-            HTMLUtils.toString(this.mocker.getComponentUnderTest().clean(
-                new StringReader("<script>alert(\"foo\")</script>"), configuration));
-        Assert.assertEquals(HEADER_FULL + "<pre>alert(\"foo\")</pre>" + FOOTER, result);
-
-        result =
-            HTMLUtils.toString(this.mocker.getComponentUnderTest().clean(
-                new StringReader("<style>p {color:white;}</style>"), configuration));
-        Assert.assertEquals(HEADER_FULL + "<pre>p {color:white;}</pre>" + FOOTER, result);
+        String result = HTMLUtils.toString(this.cleaner.clean(
+            new StringReader("<script>alert(\"foo\")</script>"), configuration));
+        assertEquals(HEADER_FULL + "<pre>alert(&quot;foo&quot;)</pre>" + FOOTER, result);
 
+        result = HTMLUtils.toString(this.cleaner.clean(
+            new StringReader("<style>p {color:white;}</style>"), configuration));
+        assertEquals(HEADER_FULL + "<pre>p {color:white;}</pre>" + FOOTER, result);
     }
 
     /**
      * Verify that passing a fully-formed XHTML header works fine.
      */
     @Test
-    public void fullXHTMLHeader() throws ComponentLookupException
+    public void fullXHTMLHeader()
     {
         assertHTML("<p>test</p>", HEADER_FULL + "<p>test</p>" + FOOTER);
     }
@@ -279,16 +279,16 @@ public void fullXHTMLHeader() throws ComponentLookupException
      * Test {@link UniqueIdFilter}.
      */
     @Test
-    public void duplicateIds() throws Exception
+    public void duplicateIds(ComponentManager componentManager) throws Exception
     {
         String actual = "<p id=\"x\">1</p><p id=\"xy\">2</p><p id=\"x\">3</p>";
         String expected = "<p id=\"x\">1</p><p id=\"xy\">2</p><p id=\"x0\">3</p>";
-        HTMLCleanerConfiguration config = this.mocker.getComponentUnderTest().getDefaultConfiguration();
-        List<HTMLFilter> filters = new ArrayList<HTMLFilter>(config.getFilters());
-        filters.add(this.mocker.<HTMLFilter>getInstance(HTMLFilter.class, "uniqueId"));
+        HTMLCleanerConfiguration config = this.cleaner.getDefaultConfiguration();
+        List<HTMLFilter> filters = new ArrayList<>(config.getFilters());
+        filters.add(componentManager.getInstance(HTMLFilter.class, "uniqueId"));
         config.setFilters(filters);
-        Assert.assertEquals(HEADER_FULL + expected + FOOTER,
-            HTMLUtils.toString(this.mocker.getComponentUnderTest().clean(new StringReader(actual), config)));
+        assertEquals(HEADER_FULL + expected + FOOTER,
+            HTMLUtils.toString(this.cleaner.clean(new StringReader(actual), config)));
     }
 
     /**
@@ -299,9 +299,9 @@ public void duplicateIds() throws Exception
     public void cleanSVGTags() throws Exception
     {
         String input =
-            "<p>before</p>\n" + "<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n"
+            "<p>before</p>\n" + "<p><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n"
                 + "<circle cx=\"100\" cy=\"50\" fill=\"red\" r=\"40\" stroke=\"black\" stroke-width=\"2\"></circle>\n"
-                + "</svg>\n" + "<p>after</p>\n";
+                + "</svg></p>\n" + "<p>after</p>\n";
         assertHTML(input, HEADER_FULL + input + FOOTER);
     }
 
@@ -311,8 +311,8 @@ public void cleanSVGTags() throws Exception
      * <a href="https://jira.xwiki.org/browse/XWIKI-9753">XWIKI-9753</a>).
      */
     @Test
-    @Ignore("See https://jira.xwiki.org/browse/XWIKI-9753")
-    public void cleanTitleWithNamespace() throws Exception
+    @Disabled("See https://jira.xwiki.org/browse/XWIKI-9753")
+    public void cleanTitleWithNamespace()
     {
         // Test with TITLE in HEAD
         String input =
@@ -327,8 +327,8 @@ public void cleanTitleWithNamespace() throws Exception
                 + "        <title>SVG Title Demo example</title>\n"
                 + "        <rect height=\"50\" style=\"fill:none; stroke:blue; stroke-width:1px\" width=\"200\" x=\"10\" "
                 + "y=\"10\"></rect>\n" + "      </g>\n" + "    </svg>\n" + "    <p>after</p>\n";
-        Assert.assertEquals(HEADER + input + FOOTER,
-            HTMLUtils.toString(this.mocker.getComponentUnderTest().clean(new StringReader(input))));
+        assertEquals(HEADER + input + FOOTER,
+            HTMLUtils.toString(this.cleaner.clean(new StringReader(input))));
     }
 
     /**
@@ -336,20 +336,19 @@ public void cleanTitleWithNamespace() throws Exception
      * {@link HTMLCleanerConfiguration#NAMESPACES_AWARE} is set to false.
      */
     @Test
-    @Ignore("See https://sourceforge.net/p/htmlcleaner/bugs/168/")
-    public void cleanHTMLTagWithNamespace() throws Exception
+    public void cleanHTMLTagWithNamespace()
     {
         String input = "<html xmlns=\"http://www.w3.org/1999/xhtml\"><head></head><body>";
 
         // Default
-        Assert.assertEquals(HEADER + input + FOOTER,
-            HTMLUtils.toString(this.mocker.getComponentUnderTest().clean(new StringReader(input))));
+        assertEquals(HEADER + input + FOOTER,
+            HTMLUtils.toString(this.cleaner.clean(new StringReader(input))));
 
         // Configured for namespace awareness being false
-        HTMLCleanerConfiguration config = this.mocker.getComponentUnderTest().getDefaultConfiguration();
+        HTMLCleanerConfiguration config = this.cleaner.getDefaultConfiguration();
         config.setParameters(Collections.singletonMap(HTMLCleanerConfiguration.NAMESPACES_AWARE, "false"));
-        Assert.assertEquals(HEADER + "<html><head></head><body>" + FOOTER,
-            HTMLUtils.toString(this.mocker.getComponentUnderTest().clean(new StringReader(input), config)));
+        assertEquals(HEADER + "<html><head></head><body>" + FOOTER,
+            HTMLUtils.toString(this.cleaner.clean(new StringReader(input), config)));
     }
 
     /**
@@ -357,27 +356,27 @@ public void cleanHTMLTagWithNamespace() throws Exception
      * href="https://jira.xwiki.org/browse/XWIKI-4007">XWIKI-4007</a>).
      */
     @Test
-    public void cleanEmptyDIV() throws Exception
+    public void cleanEmptyDIV()
     {
         String input = "<div id=\"y\"></div><div id=\"z\">something</div>";
         assertHTML(input, HEADER_FULL + input + FOOTER);
     }
 
     @Test
-    public void verifyLegendTagNotStripped() throws Exception
+    public void verifyLegendTagNotStripped()
     {
         String input = "<fieldset><legend>test</legend><div>content</div></fieldset>";
         assertHTML(input, HEADER_FULL + input + FOOTER);
     }
 
     @Test
-    public void verifySpanIsExpanded() throws Exception
+    public void verifySpanIsExpanded()
     {
         assertHTML("<p><span class=\"fa fa-icon\"></span></p>", "<span class=\"fa fa-icon\" />");
     }
 
     @Test
-    public void verifyExternalLinksAreSecure() throws Exception
+    public void verifyExternalLinksAreSecure()
     {
         assertHTML("<p><a href=\"relativeLink\" target=\"_blank\">label</a></p>",
                 "<a href=\"relativeLink\" target=\"_blank\">label</a>");
@@ -400,20 +399,53 @@ public void verifyExternalLinksAreSecure() throws Exception
     }
 
     @Test
-    public void verifyEntitiesAreNotBroken() throws Exception
+    public void verifyEntitiesAreNotBroken()
     {
         assertHTML("<p>&Eacute;</p>", "&Eacute;");
     }
 
-    private void assertHTML(String expected, String actual) throws ComponentLookupException
+    /**
+     * @see <a href="https://jira.xwiki.org/browse/XCOMMONS-1293">XCOMMONS-1293</a>
+     */
+    @Test
+    public void verifyIFRAMECleaning() throws Exception
+    {
+        // TODO: these 2 lines need to be changed to the following when https://jira.xwiki.org/browse/XCOMMONS-1292 is
+        // fixed:
+        //          assertHTML("<iframe src=\"whatever\"></iframe>", "<iframe src=\"whatever\"/>");
+        //          assertHTML("<iframe src=\"whatever\"></iframe>\r\n", "<iframe src=\"whatever\"/>\r\n");
+        assertHTML("<p><iframe src=\"whatever\"></iframe></p>", "<iframe src=\"whatever\"/>");
+        assertHTML("<p><iframe src=\"whatever\"></iframe>\r\n</p>", "<iframe src=\"whatever\"/>\r\n");
+        assertHTML("<p>\r\n<iframe src=\"whatever\"></iframe></p>", "\r\n<iframe src=\"whatever\"/>");
+        assertHTML("<p>\r\n<iframe src=\"whatever\"></iframe>\r\n</p>", "\r\n<iframe src=\"whatever\"/>\r\n");
+        assertHTML("<p><iframe src=\"whatever\"></iframe><iframe src=\"whatever\"></iframe></p>",
+            "<iframe src=\"whatever\"/><iframe src=\"whatever\"/>");
+        assertHTML("<p><iframe src=\"whatever\"></iframe>\r\n<iframe src=\"whatever\"></iframe></p>",
+            "<iframe src=\"whatever\"/>\r\n<iframe src=\"whatever\"/>");
+        assertHTML("<p>\r\n<iframe src=\"whatever\"></iframe>\r\n<iframe src=\"whatever\"></iframe>\r\n</p>",
+            "\r\n<iframe src=\"whatever\"/>\r\n<iframe src=\"whatever\"/>\r\n");
+    }
+
+    @Test
+    public void escapeHTMLCharsInAttributes() throws Exception
+    {
+        // Note: single quotes are not escaped since they're valid chars in attribute values that are surrounded by
+        // quotes. And HTMLCleaner will convert single quoted attributes into double-quoted ones.
+        assertHTML("<div foo=\"aaa&quot;bbb&amp;ccc&gt;ddd&lt;eee'fff\">content</div>",
+            "<div foo=\"aaa&quot;bbb&amp;ccc&gt;ddd&lt;eee&apos;fff\">content</div>");
+        assertHTML("<div foo=\"aaa&quot;bbb&amp;ccc&gt;ddd&lt;eee'fff\">content</div>",
+            "<div foo='aaa&quot;bbb&amp;ccc&gt;ddd&lt;eee&apos;fff'>content</div>");
+    }
+
+    private void assertHTML(String expected, String actual)
     {
-        Assert.assertEquals(HEADER_FULL + expected + FOOTER,
-            HTMLUtils.toString(this.mocker.getComponentUnderTest().clean(new StringReader(actual))));
+        assertEquals(HEADER_FULL + expected + FOOTER,
+            HTMLUtils.toString(this.cleaner.clean(new StringReader(actual))));
     }
 
-    private void assertHTMLWithHeadContent(String expected, String actual) throws ComponentLookupException
+    private void assertHTMLWithHeadContent(String expected, String actual)
     {
-        Assert.assertEquals(HEADER + "<html><head>" + expected + "</head><body>" + FOOTER,
-            HTMLUtils.toString(this.mocker.getComponentUnderTest().clean(new StringReader(actual))));
+        assertEquals(HEADER + "<html><head>" + expected + "</head><body>" + FOOTER,
+            HTMLUtils.toString(this.cleaner.clean(new StringReader(actual))));
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/stax/StAXUtilsTest.java b/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/stax/StAXUtilsTest.java
index 1db30d7..50d1d81 100644
--- a/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/stax/StAXUtilsTest.java
+++ b/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/stax/StAXUtilsTest.java
@@ -40,10 +40,12 @@
 import javax.xml.transform.stream.StreamResult;
 import javax.xml.transform.stream.StreamSource;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
 /**
  * Unit tests for {@link org.xwiki.xml.stax.StAXUtils}.
  *
@@ -56,25 +58,25 @@
     public void getXMLStreamReader() throws XMLStreamException
     {
         // TODO: add support for XMLEventReader
-        // Assert.assertNotNull(StAXUtils.getXMLStreamReader(new StAXSource(mockXMLEventReader())));
-        Assert.assertNotNull(StAXUtils.getXMLStreamReader(new StAXSource(mockXMLStreamReader())));
-        Assert.assertNotNull(StAXUtils.getXMLStreamReader(new StreamSource(new StringReader("<element/>"))));
+        // assertNotNull(StAXUtils.getXMLStreamReader(new StAXSource(mockXMLEventReader())));
+        assertNotNull(StAXUtils.getXMLStreamReader(new StAXSource(mockXMLStreamReader())));
+        assertNotNull(StAXUtils.getXMLStreamReader(new StreamSource(new StringReader("<element/>"))));
     }
 
     @Test
     public void getXMLEventReader() throws XMLStreamException
     {
-        Assert.assertNotNull(StAXUtils.getXMLEventReader(new StAXSource(mockXMLEventReader())));
-        Assert.assertNotNull(StAXUtils.getXMLEventReader(new StAXSource(mockXMLStreamReader())));
-        Assert.assertNotNull(StAXUtils.getXMLEventReader(new StreamSource(new StringReader("<element/>"))));
+        assertNotNull(StAXUtils.getXMLEventReader(new StAXSource(mockXMLEventReader())));
+        assertNotNull(StAXUtils.getXMLEventReader(new StAXSource(mockXMLStreamReader())));
+        assertNotNull(StAXUtils.getXMLEventReader(new StreamSource(new StringReader("<element/>"))));
     }
 
     @Test
     public void getXMLStreamWriter() throws XMLStreamException
     {
-        Assert.assertNotNull(StAXUtils.getXMLStreamWriter(new StAXResult(Mockito.mock(XMLEventWriter.class))));
-        Assert.assertNotNull(StAXUtils.getXMLStreamWriter(new StAXResult(Mockito.mock(XMLStreamWriter.class))));
-        Assert.assertNotNull(StAXUtils.getXMLStreamWriter(new StreamResult(new StringWriter())));
+        assertNotNull(StAXUtils.getXMLStreamWriter(new StAXResult(Mockito.mock(XMLEventWriter.class))));
+        assertNotNull(StAXUtils.getXMLStreamWriter(new StAXResult(Mockito.mock(XMLStreamWriter.class))));
+        assertNotNull(StAXUtils.getXMLStreamWriter(new StreamResult(new StringWriter())));
     }
 
     @Test
@@ -99,7 +101,7 @@ public void getXMLStreamWriterWithSAXREsult() throws TransformerConfigurationExc
         writer.writeCData("cdata");
         writer.writeEndElement();
 
-        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<element attribute=\"value\">"
+        assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<element attribute=\"value\">"
             + "characters" + "<![CDATA[cdata]]>" + "</element>", output.getBuffer().toString());
     }
 
diff --git a/xwiki-commons-pom/pom.xml b/xwiki-commons-pom/pom.xml
index 44dced5..ce698dc 100644
--- a/xwiki-commons-pom/pom.xml
+++ b/xwiki-commons-pom/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-pom</artifactId>
   <name>XWiki Commons - Root POM</name>
@@ -33,7 +33,7 @@
   <properties>
     <!-- By default legacy dependencies are forbidden -->
     <xwiki.enforcer.no-legacy-dependencies.skip>false</xwiki.enforcer.no-legacy-dependencies.skip>
-    <xwiki.spoon.skip>true</xwiki.spoon.skip>
+    <xwiki.spoon.skip>false</xwiki.spoon.skip>
   </properties>
   <build>
     <defaultGoal>install</defaultGoal>
@@ -67,13 +67,14 @@
       </plugin>
       <!-- We want to force packaging the license resources in the produced XWiki artifacts -->
       <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-remote-resources-plugin</artifactId>
+        <groupId>org.xwiki.commons</groupId>
+        <artifactId>xwiki-commons-tool-remote-resource-plugin</artifactId>
+        <version>10.9-SNAPSHOT</version>
         <dependencies>
           <dependency>
             <groupId>org.xwiki.commons</groupId>
             <artifactId>xwiki-commons-tool-license-resources</artifactId>
-            <version>9.10-SNAPSHOT</version>
+            <version>10.9-SNAPSHOT</version>
           </dependency>
         </dependencies>
         <executions>
@@ -83,6 +84,7 @@
               <goal>process</goal>
             </goals>
             <configuration>
+              <projectsData>LICENSES</projectsData>
               <resourceBundles>
                 <resourceBundle>org.xwiki.commons:xwiki-commons-tool-license-resources:${commons.version}</resourceBundle>
               </resourceBundles>
@@ -97,7 +99,7 @@
           <dependency>
             <groupId>org.xwiki.commons</groupId>
             <artifactId>xwiki-commons-tool-enforcer-dependencies</artifactId>
-            <version>9.10-SNAPSHOT</version>
+            <version>10.9-SNAPSHOT</version>
           </dependency>
         </dependencies>
         <executions>
@@ -140,7 +142,7 @@
           <dependency>
             <groupId>org.xwiki.commons</groupId>
             <artifactId>xwiki-commons-tool-verification-resources</artifactId>
-            <version>9.10-SNAPSHOT</version>
+            <version>10.9-SNAPSHOT</version>
           </dependency>
         </dependencies>
         <configuration>
@@ -152,35 +154,53 @@
         </configuration>
       </plugin>
       <!-- Execute Spoon plugin -->
-      <!-- TODO: Enable back when fixed
       <plugin>
         <groupId>fr.inria.gforge.spoon</groupId>
         <artifactId>spoon-maven-plugin</artifactId>
         <executions>
           <execution>
-            <phase>generate-sources</phase>
             <goals>
-              <goal>generate</goal>
+              <goal>check</goal>
             </goals>
           </execution>
         </executions>
         <configuration>
-          <skip>${xwiki.checkstyle.skip}</skip>
-        
+          <skip>${xwiki.spoon.skip}</skip>
+
+          <!-- Don't fail in case of missing sources -->
+          <skipSpoonErrors>true</skipSpoonErrors>
+
           <processors>
             <processor>org.xwiki.tool.spoon.ForbiddenInvocationProcessor</processor>
           </processors>
+          <processorProperties>
+            <processorProperty>
+              <name>org.xwiki.tool.spoon.ForbiddenInvocationProcessor</name>
+              <properties>
+                <property>
+                  <name>methods</name>
+                  <value>
+                    {
+                      <!-- Does not make any sense in the context of an application server and it can cause memory leaks -->
+                      "java.io.File": ["deleteOnExit"],
+                      <!-- The URL#equals implementation is insane (it actually try to access the host with HTTP URLs for example) -->
+                      "java.net.URL": ["equals"]
+                    }
+                  </value>
+                </property>
+              </properties>
+            </processorProperty>
+          </processorProperties>
         </configuration>
         <dependencies>
-          < ! - - Contains custom Spoon processors - - >
+          <!-- Contains custom Spoon processors -->
           <dependency>
             <groupId>org.xwiki.commons</groupId>
             <artifactId>xwiki-commons-tool-spoon</artifactId>
-            <version>9.9-SNAPSHOT</version>
+            <version>10.9-SNAPSHOT</version>
           </dependency>
         </dependencies>
       </plugin>
-       -->
     </plugins>
     <pluginManagement>
       <plugins>
@@ -193,7 +213,7 @@
             <dependency>
               <groupId>org.xwiki.commons</groupId>
               <artifactId>xwiki-commons-tool-verification-resources</artifactId>
-              <version>9.10-SNAPSHOT</version>
+              <version>10.9-SNAPSHOT</version>
             </dependency>
           </dependencies>
           <configuration>
@@ -261,6 +281,10 @@
               <!-- Since there's no comment syntax for Maven IT tests's goal.txt file we need to exclude it -->
               <exclude>**/it/**/goals.txt</exclude>
               <exclude>**/goal.txt</exclude>
+              <!-- Don't check DSpot-generated tests for license headers. DSpot does keep license headers but it
+                   modifies their styles, thus leading this plugin to think there's no license header.
+                   See https://github.com/STAMP-project/dspot/issues/538 -->
+              <exclude>src/test/dspot/**/*.*</exclude>
             </excludes>
           </configuration>
           <!-- Add a dependency since this is where the license-maven-plugin plugin will find the license.txt file -->
@@ -268,7 +292,7 @@
             <dependency>
               <groupId>org.xwiki.commons</groupId>
               <artifactId>xwiki-commons-tool-verification-resources</artifactId>
-              <version>9.10-SNAPSHOT</version>
+              <version>10.9-SNAPSHOT</version>
             </dependency>
           </dependencies>
           <executions>
@@ -282,7 +306,7 @@
         <plugin>
           <groupId>org.xwiki.commons</groupId>
           <artifactId>xwiki-commons-tool-xar-plugin</artifactId>
-          <version>9.10-SNAPSHOT</version>
+          <version>10.9-SNAPSHOT</version>
           <configuration>
             <!-- Add missing license headers by default -->
             <formatLicense>true</formatLicense>
diff --git a/xwiki-commons-tools/pom.xml b/xwiki-commons-tools/pom.xml
index 3b2d774..1bc4484 100644
--- a/xwiki-commons-tools/pom.xml
+++ b/xwiki-commons-tools/pom.xml
@@ -25,21 +25,15 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-tools</artifactId>
   <name>XWiki Commons - Tools - Parent POM</name>
   <packaging>pom</packaging>
   <description>XWiki Commons - Tools - Parent POM</description>
   <properties>
-    <!-- Skip checkstyle by default since it needs the right configuration which is in the
-         xwiki-commons-tool-verification-resources module (i.e. a children).
-         Note that we don't run the checkstyle plugin by default in the tools but we still need to disable it in case
-         someone runs "mvn checkstyle:check" from the command line. -->
-    <xwiki.checkstyle.skip>true</xwiki.checkstyle.skip>
     <!-- Don't run backward-compatibility checks in tools modules since we don't consider them public API -->
     <xwiki.revapi.skip>true</xwiki.revapi.skip>
-
     <!-- Set the version of Maven used at build time for Maven plugins dependencies -->
     <maven.dependencies.version>${maven.runtime.version}</maven.dependencies.version>
   </properties>
@@ -53,15 +47,60 @@
     <module>xwiki-commons-tool-verification-resources</module>
     <module>xwiki-commons-tool-xar</module>
     <module>xwiki-commons-tool-webjar-handlers</module>
+    <module>xwiki-commons-tool-remote-resource-plugin</module>
   </modules>
   <build>
     <pluginManagement>
       <plugins>
+        <!-- Note: We duplicate the configuration located in xwiki-commons-pom since commons tools use xwiki-commons
+             as their parent pom and not xwiki-commons-pom. This is to avoid a circular dependency since
+             xwiki-commons-pom uses the xwiki-commons-tool-validation-resources artifact.
+
+             It also means each tool module wanting to execute checkstyle will need to explicitly add it.
+        -->
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-checkstyle-plugin</artifactId>
+          <dependencies>
+            <dependency>
+              <groupId>org.xwiki.commons</groupId>
+              <artifactId>xwiki-commons-tool-verification-resources</artifactId>
+              <version>${project.version}</version>
+            </dependency>
+          </dependencies>
+          <configuration>
+            <propertyExpansion>
+              currentVersion=${project.version}
+            </propertyExpansion>
+            <!-- Used by the "blocker" execution id and the "default-cli" one
+                (i.e. when executing "mvn checkstyle:check") -->
+            <configLocation>checkstyle-blocker.xml</configLocation>
+          </configuration>
+          <executions>
+            <execution>
+              <id>default</id>
+              <goals>
+                <goal>check</goal>
+              </goals>
+              <configuration>
+                <configLocation>checkstyle.xml</configLocation>
+              </configuration>
+            </execution>
+            <execution>
+              <!-- Checks that should never be excluded from executing in maven projects -->
+              <id>blocker</id>
+              <goals>
+                <goal>check</goal>
+              </goals>
+            </execution>
+          </executions>
+        </plugin>
         <plugin>
           <!-- Exclude Tools from being Clovered since 1) we don't really care getting TPC for our tools and
                2) it's a bit involved to configure the various Maven poms using those plugins to have the Clover JAR
-               injected in the right places. -->
-          <groupId>com.atlassian.maven.plugins</groupId>
+               injected in the right places.
+               -->
+          <groupId>org.openclover</groupId>
           <artifactId>clover-maven-plugin</artifactId>
           <configuration>
             <skip>true</skip>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-enforcers/pom.xml b/xwiki-commons-tools/xwiki-commons-tool-enforcers/pom.xml
index f1e9f95..810274d 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-enforcers/pom.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-enforcers/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-tools</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-tool-enforcers</artifactId>
   <name>XWiki Commons - Tools - Enforcers</name>
@@ -63,6 +63,11 @@
           </execution>
         </executions>
       </plugin>
+      <plugin>
+        <!-- See commons-tools parent pom for why we need to explicitly configure checkstyle -->
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-checkstyle-plugin</artifactId>
+      </plugin>
     </plugins>
   </build>
   <modules>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-enforcers/xwiki-commons-tool-enforcer-dependencies/pom.xml b/xwiki-commons-tools/xwiki-commons-tool-enforcers/xwiki-commons-tool-enforcer-dependencies/pom.xml
index c747f0f..1e77e6b 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-enforcers/xwiki-commons-tool-enforcer-dependencies/pom.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-enforcers/xwiki-commons-tool-enforcer-dependencies/pom.xml
@@ -25,10 +25,19 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-tool-enforcers</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-tool-enforcer-dependencies</artifactId>
   <name>XWiki Commons - Tools - Banned Dependencies Enforcer</name>
   <packaging>jar</packaging>
   <description>XWiki Commons - Tools - Banned Dependencies Enforcer</description>
+  <build>
+    <plugins>
+      <plugin>
+        <!-- See commons-tools parent pom for why we need to explicitly configure checkstyle -->
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-checkstyle-plugin</artifactId>
+      </plugin>
+    </plugins>
+  </build>
 </project>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-enforcers/xwiki-commons-tool-enforcer-dependencies/src/main/java/org/xwiki/tool/enforcer/AbstractPomCheck.java b/xwiki-commons-tools/xwiki-commons-tool-enforcers/xwiki-commons-tool-enforcer-dependencies/src/main/java/org/xwiki/tool/enforcer/AbstractPomCheck.java
index 7fe5215..dedab85 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-enforcers/xwiki-commons-tool-enforcer-dependencies/src/main/java/org/xwiki/tool/enforcer/AbstractPomCheck.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-enforcers/xwiki-commons-tool-enforcer-dependencies/src/main/java/org/xwiki/tool/enforcer/AbstractPomCheck.java
@@ -47,7 +47,7 @@ protected MavenProject getMavenProject(EnforcerRuleHelper helper) throws Enforce
     {
         MavenProject project;
         try {
-            project = (MavenProject) helper.evaluate( "${project}" );
+            project = (MavenProject) helper.evaluate("${project}");
         } catch (ExpressionEvaluationException e) {
             throw new EnforcerRuleException("Failed to get Maven project", e);
         }
diff --git a/xwiki-commons-tools/xwiki-commons-tool-enforcers/xwiki-commons-tool-enforcer-dependencies/src/main/java/org/xwiki/tool/enforcer/ExternalExtensionCheck.java b/xwiki-commons-tools/xwiki-commons-tool-enforcers/xwiki-commons-tool-enforcer-dependencies/src/main/java/org/xwiki/tool/enforcer/ExternalExtensionCheck.java
index 2100f37..dd7a6f1 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-enforcers/xwiki-commons-tool-enforcer-dependencies/src/main/java/org/xwiki/tool/enforcer/ExternalExtensionCheck.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-enforcers/xwiki-commons-tool-enforcer-dependencies/src/main/java/org/xwiki/tool/enforcer/ExternalExtensionCheck.java
@@ -147,6 +147,9 @@ private void checkCoreArtifactId(Model model) throws EnforcerRuleException
             case ENTERPRISE_GROUP_ID:
                 checkArtifactId(groupId, artifactId, ENTERPRISE_ARTIFACT_ID_PREFIX);
                 break;
+            default:
+                // Unhandled groupId, don't do anything
+                break;
         }
     }
 
diff --git a/xwiki-commons-tools/xwiki-commons-tool-enforcers/xwiki-commons-tool-enforcer-dependencies/src/main/java/org/xwiki/tool/enforcer/ValidateDependencyVersion.java b/xwiki-commons-tools/xwiki-commons-tool-enforcers/xwiki-commons-tool-enforcer-dependencies/src/main/java/org/xwiki/tool/enforcer/ValidateDependencyVersion.java
index 036da14..2e553a2 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-enforcers/xwiki-commons-tool-enforcer-dependencies/src/main/java/org/xwiki/tool/enforcer/ValidateDependencyVersion.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-enforcers/xwiki-commons-tool-enforcer-dependencies/src/main/java/org/xwiki/tool/enforcer/ValidateDependencyVersion.java
@@ -37,16 +37,16 @@
  * ensure that it uses a variable (such as {@code ${commons.version}}) and not {@code ${project.version}}. To achieve
  * this you would use:
  *
- * <pre>{@code
- *   <rules>
- *     <validateDependencyVersion implementation="org.xwiki.tool.enforcer.ValidateDependencyVersion">
- *       <versionCheck>
- *         <groupIdPrefix>org.xwiki.commons</groupIdPrefix>
- *         <allowedVersionRegex>\$\{project.version\}|[^$].*</allowedVersionRegex>
- *       </versionCheck>
- *     </validateDependencyVersion>
- *   </rules>
- * }</pre>
+ * <pre><code>
+ *   &lt;rules&gt;
+ *     &lt;validateDependencyVersion implementation="org.xwiki.tool.enforcer.ValidateDependencyVersion"&gt;
+ *       &lt;versionCheck&gt;
+ *         &lt;groupIdPrefix&gt;org.xwiki.commons&lt;/groupIdPrefix&gt;
+ *         &lt;allowedVersionRegex&gt;\$\{project.version\}|[^$].*&lt;/allowedVersionRege&gt;
+ *       &lt;/versionCheck&gt;
+ *     &lt;/validateDependencyVersion&gt;
+ *   &lt;/rules&gt;
+ * </code></pre>
  *
  * @version $Id$
  * @since 4.5RC1
@@ -62,12 +62,12 @@
      * Add a new dependency version check. Called automatically by the Maven framework when the following construct
      * is defined in a pom.xml file:
      *
-     * <pre>{@code
-     *   <versionCheck>
-     *     <groupIdPrefix>org.xwiki.commons</groupIdPrefix>
-     *     <allowedVersionRegex>.*</allowedVersionRegex>
-     *   </versionCheck>
-     * }</pre>
+     * <pre><code>
+     *   &lt;versionCheck&gt;
+     *     &lt;groupIdPrefix&gt;org.xwiki.commons&lt;/groupIdPrefix&gt;
+     *     &lt;allowedVersionRegex&gt;.*&lt;/allowedVersionRegex&gt;
+     *   &lt;/versionCheck&gt;
+     * </code></pre>
      *
      * @param versionCheck the check to add
      */
diff --git a/xwiki-commons-tools/xwiki-commons-tool-enforcers/xwiki-commons-tool-enforcer-dependencies/src/main/java/org/xwiki/tool/enforcer/XWikiBannedDependencies.java b/xwiki-commons-tools/xwiki-commons-tool-enforcers/xwiki-commons-tool-enforcer-dependencies/src/main/java/org/xwiki/tool/enforcer/XWikiBannedDependencies.java
index 875e61e..14c9828 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-enforcers/xwiki-commons-tool-enforcer-dependencies/src/main/java/org/xwiki/tool/enforcer/XWikiBannedDependencies.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-enforcers/xwiki-commons-tool-enforcer-dependencies/src/main/java/org/xwiki/tool/enforcer/XWikiBannedDependencies.java
@@ -35,6 +35,8 @@
  */
 public class XWikiBannedDependencies extends BannedDependencies
 {
+    private static final String STAR = "*";
+
     @Override
     protected boolean compareDependency(String pattern, Artifact artifact) throws EnforcerRuleException
     {
@@ -54,36 +56,58 @@ private boolean compareDependency(String[] pattern, Artifact artifact) throws En
             result = artifact.getArtifactId().matches(pattern[1]);
         }
 
+        result = handleTwoPartsOrMore(result, pattern, artifact);
+
+        result = handleThreePartsOrMore(result, pattern, artifact);
+
+        result = handleFourPartsOrMore(result, pattern, artifact);
+
+        return result;
+    }
+
+    private boolean handleTwoPartsOrMore(boolean result, String[] pattern, Artifact artifact)
+        throws EnforcerRuleException
+    {
+        boolean newresult = result;
         if (result && pattern.length > 2) {
             // short circuit if the versions are exactly the same
-            if (pattern[2].equals("*") || artifact.getVersion().equals(pattern[2])) {
-                result = true;
+            if (STAR.equals(pattern[2]) || artifact.getVersion().equals(pattern[2])) {
+                newresult = true;
             } else {
                 try {
-                    result = AbstractVersionEnforcer.containsVersion(VersionRange.createFromVersionSpec(pattern[2]),
+                    newresult = AbstractVersionEnforcer.containsVersion(VersionRange.createFromVersionSpec(pattern[2]),
                         new DefaultArtifactVersion(artifact.getBaseVersion()));
                 } catch (InvalidVersionSpecificationException e) {
                     throw new EnforcerRuleException("Invalid Version Range: ", e);
                 }
             }
         }
+        return newresult;
+    }
 
+    private boolean handleThreePartsOrMore(boolean result, String[] pattern, Artifact artifact)
+    {
+        boolean newresult = result;
         if (result && pattern.length > 3) {
             String type = artifact.getType();
             if (type == null || type.equals("")) {
                 type = "jar";
             }
-            result = pattern[3].equals("*") || type.equals(pattern[3]);
+            newresult = STAR.equals(pattern[3]) || type.equals(pattern[3]);
         }
+        return newresult;
+    }
 
+    private boolean handleFourPartsOrMore(boolean result, String[] pattern, Artifact artifact)
+    {
+        boolean newresult = result;
         if (result && pattern.length > 4) {
             String scope = artifact.getScope();
             if (scope == null || scope.equals("")) {
                 scope = "compile";
             }
-            result = pattern[4].equals("*") || scope.equals(pattern[4]);
+            newresult = STAR.equals(pattern[4]) || scope.equals(pattern[4]);
         }
-
-        return result;
+        return newresult;
     }
 }
diff --git a/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/pom.xml b/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/pom.xml
index 03571b5..197be9c 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/pom.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-tools</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-tool-extension-plugin</artifactId>
   <name>XWiki Commons - Tools - Extension Plugin</name>
@@ -100,6 +100,26 @@
           <goalPrefix>extension</goalPrefix>
         </configuration>
       </plugin>
+      <plugin>
+        <!-- See commons-tools parent pom for why we need to explicitly configure checkstyle -->
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-checkstyle-plugin</artifactId>
+        <executions>
+          <execution>
+            <!-- Specify the "default" execution id so that the "blocker" one is always executed -->
+            <id>default</id>
+            <configuration>
+              <excludes>
+                **/ExtensionMojoHelper.java,
+                **/MavenBuildExtensionRepositor.java,
+                **/ExtensionMojoCoreExtensionRepository.java,
+                **/ExtensionArtifact.java,
+                **/MavenBuildExtensionRepository.java
+              </excludes>
+            </configuration>
+          </execution>
+        </executions>
+      </plugin>
     </plugins>
   </build>
   <profiles>
@@ -141,10 +161,10 @@
       <id>clover</id>
       <build>
         <plugins>
-          <!-- Override the skip done at the level of commons-tools since that's need when running with the clover
+          <!-- Override the skip done at the level of commons-tools since that's needed when running with the clover
                profile -->
           <plugin>
-            <groupId>com.atlassian.maven.plugins</groupId>
+            <groupId>org.openclover</groupId>
             <artifactId>clover-maven-plugin</artifactId>
             <configuration>
               <skip>false</skip>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/src/main/java/org/xwiki/tool/extension/RegisterMojo.java b/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/src/main/java/org/xwiki/tool/extension/RegisterMojo.java
index 8c83d34..8bdce1e 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/src/main/java/org/xwiki/tool/extension/RegisterMojo.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/src/main/java/org/xwiki/tool/extension/RegisterMojo.java
@@ -57,7 +57,8 @@ private void register() throws MojoExecutionException
 
         // Write descriptor
         try {
-            this.extensionHelper.serializeExtension(new File(directory, "extension.xed"), this.project.getModel());
+            this.extensionHelper.serializeExtension(new File(directory, "extension.xed"), this.project.getArtifact(),
+                this.project.getModel());
         } catch (Exception e) {
             throw new MojoExecutionException("Failed to write WAR descriptor", e);
         }
diff --git a/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/src/main/java/org/xwiki/tool/extension/WarMojo.java b/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/src/main/java/org/xwiki/tool/extension/WarMojo.java
index cc4cc1a..982ced7 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/src/main/java/org/xwiki/tool/extension/WarMojo.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/src/main/java/org/xwiki/tool/extension/WarMojo.java
@@ -34,7 +34,8 @@
  * @version $Id$
  * @since 8.4RC1
  */
-@Mojo(name = "war", defaultPhase = LifecyclePhase.GENERATE_RESOURCES, requiresDependencyResolution = ResolutionScope.RUNTIME, requiresProject = true, threadSafe = true)
+@Mojo(name = "war", defaultPhase = LifecyclePhase.GENERATE_RESOURCES,
+    requiresDependencyResolution = ResolutionScope.RUNTIME, requiresProject = true, threadSafe = true)
 public class WarMojo extends AbstractExtensionMojo
 {
     /**
@@ -61,7 +62,8 @@ private void registerWAR() throws MojoExecutionException
 
         // Write descriptor
         try {
-            this.extensionHelper.serializeExtension(new File(directory, "extension.xed"), this.project.getModel());
+            this.extensionHelper.serializeExtension(new File(directory, "extension.xed"), this.project.getArtifact(),
+                this.project.getModel());
         } catch (Exception e) {
             throw new MojoExecutionException("Failed to write WAR descriptor", e);
         }
diff --git a/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/src/main/java/org/xwiki/tool/extension/XIPMojo.java b/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/src/main/java/org/xwiki/tool/extension/XIPMojo.java
index 6095424..9a752c2 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/src/main/java/org/xwiki/tool/extension/XIPMojo.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/src/main/java/org/xwiki/tool/extension/XIPMojo.java
@@ -33,7 +33,8 @@
  * @version $Id$
  * @since 9.4RC1
  */
-@Mojo(name = "xip", defaultPhase = LifecyclePhase.GENERATE_RESOURCES, requiresDependencyResolution = ResolutionScope.COMPILE, requiresProject = true, threadSafe = true)
+@Mojo(name = "xip", defaultPhase = LifecyclePhase.GENERATE_RESOURCES,
+    requiresDependencyResolution = ResolutionScope.COMPILE, requiresProject = true, threadSafe = true)
 public class XIPMojo extends AbstractExtensionMojo
 {
     @Override
@@ -62,7 +63,8 @@ private void createPackage() throws MojoExecutionException
         archiver.setIncludeEmptyDirs(false);
         archiver.setCompress(true);
 
-        archiver.addFileSet(new DefaultFileSet(new File(this.extensionHelper.getPermanentDirectory(), "extension/repository")));
+        archiver.addFileSet(
+            new DefaultFileSet(new File(this.extensionHelper.getPermanentDirectory(), "extension/repository")));
 
         try {
             archiver.createArchive();
diff --git a/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/src/main/java/org/xwiki/tool/extension/internal/MavenBuildExtensionRepository.java b/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/src/main/java/org/xwiki/tool/extension/internal/MavenBuildExtensionRepository.java
index 80dc16d..c01e901 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/src/main/java/org/xwiki/tool/extension/internal/MavenBuildExtensionRepository.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/src/main/java/org/xwiki/tool/extension/internal/MavenBuildExtensionRepository.java
@@ -19,6 +19,9 @@
  */
 package org.xwiki.tool.extension.internal;
 
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
 import java.util.List;
 
 import org.apache.maven.RepositoryUtils;
@@ -26,8 +29,11 @@
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.execution.MavenSession;
 import org.codehaus.plexus.PlexusContainer;
+import org.eclipse.aether.RepositorySystem;
 import org.eclipse.aether.RepositorySystemSession;
 import org.eclipse.aether.repository.RemoteRepository;
+import org.eclipse.aether.resolution.ArtifactRequest;
+import org.eclipse.aether.resolution.ArtifactResult;
 import org.xwiki.component.manager.ComponentManager;
 import org.xwiki.extension.ExtensionId;
 import org.xwiki.extension.internal.ExtensionFactory;
@@ -77,6 +83,40 @@ protected XWikiRepositorySystemSession createRepositorySystemSession()
         return session;
     }
 
+    /**
+     * {@inheritDoc}
+     * <p>
+     * Override standard {@link #openStream(org.eclipse.aether.artifact.Artifact)} to reuse running Maven session which
+     * is much faster.
+     * 
+     * @see org.xwiki.extension.repository.aether.internal.AetherExtensionRepository#openStream(org.eclipse.aether.artifact.Artifact)
+     */
+    @Override
+    public InputStream openStream(org.eclipse.aether.artifact.Artifact artifact) throws IOException
+    {
+        XWikiRepositorySystemSession session = createRepositorySystemSession();
+
+        List<RemoteRepository> repositories = newResolutionRepositories(session);
+
+        // /////////////////////////////////////////////////////////////////////////////:
+
+        ArtifactRequest artifactRequest = new ArtifactRequest();
+        artifactRequest.setRepositories(repositories);
+        artifactRequest.setArtifact(artifact);
+
+        ArtifactResult artifactResult;
+        try {
+            RepositorySystem repositorySystem = getRepositorySystem();
+            artifactResult = repositorySystem.resolveArtifact(session, artifactRequest);
+        } catch (org.eclipse.aether.resolution.ArtifactResolutionException e) {
+            throw new IOException("Failed to resolve artifact", e);
+        }
+
+        File aetherFile = artifactResult.getArtifact().getFile();
+
+        return new AetherExtensionFileInputStream(aetherFile, false);
+    }
+
     @Override
     protected List<RemoteRepository> newResolutionRepositories(RepositorySystemSession session, boolean all)
     {
diff --git a/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/src/main/java/org/xwiki/tool/extension/util/AbstractExtensionMojo.java b/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/src/main/java/org/xwiki/tool/extension/util/AbstractExtensionMojo.java
index 147db38..56d948f 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/src/main/java/org/xwiki/tool/extension/util/AbstractExtensionMojo.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/src/main/java/org/xwiki/tool/extension/util/AbstractExtensionMojo.java
@@ -55,12 +55,6 @@
     @Component
     protected PlexusContainer container;
 
-    @Component
-    private RepositorySystem repositorySystem;
-
-    @Component
-    private ArtifactHandlerManager artifactHandlers;
-
     /**
      * The current Maven session being executed.
      */
@@ -85,26 +79,12 @@
     @Parameter
     protected boolean skip;
 
-    /**
-     * The extensions (and their dependencies) to resolve as core extensions.
-     * 
-     * @since 9.5RC1
-     */
-    @Parameter
-    private List<ExtensionArtifact> coreExtensions;
-
-    /**
-     * List of remote repositories to be used by the plugin to resolve dependencies.
-     */
-    @Parameter(property = "project.remoteArtifactRepositories")
-    private List<ArtifactRepository> remoteRepositories;
-
     @Parameter(defaultValue = "${project}", required = true, readonly = true)
     protected MavenProject project;
 
     /**
      * The permanent directory.
-     * 
+     *
      * @since 9.5RC1
      */
     @Parameter(defaultValue = "${project.build.directory}/data/")
@@ -115,6 +95,27 @@
 
     protected ExtensionMojoHelper extensionHelper;
 
+    @Component
+    private RepositorySystem repositorySystem;
+
+    @Component
+    private ArtifactHandlerManager artifactHandlers;
+
+    /**
+     * The extensions (and their dependencies) to resolve as core extensions.
+     * 
+     * @since 9.5RC1
+     */
+    @Parameter
+    private List<ExtensionArtifact> coreExtensions;
+
+    /**
+     * List of remote repositories to be used by the plugin to resolve dependencies.
+     */
+    @Parameter(property = "project.remoteArtifactRepositories")
+    private List<ArtifactRepository> remoteRepositories;
+
+
     @Override
     public void execute() throws MojoExecutionException, MojoFailureException
     {
diff --git a/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/src/main/java/org/xwiki/tool/extension/util/ExtensionMojoHelper.java b/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/src/main/java/org/xwiki/tool/extension/util/ExtensionMojoHelper.java
index 829bab1..0ecbb33 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/src/main/java/org/xwiki/tool/extension/util/ExtensionMojoHelper.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-extension-plugin/src/main/java/org/xwiki/tool/extension/util/ExtensionMojoHelper.java
@@ -51,6 +51,7 @@
 import org.xwiki.extension.job.plan.ExtensionPlan;
 import org.xwiki.extension.job.plan.ExtensionPlanAction;
 import org.xwiki.extension.job.plan.ExtensionPlanAction.Action;
+import org.xwiki.extension.maven.ArtifactModel;
 import org.xwiki.extension.repository.CoreExtensionRepository;
 import org.xwiki.extension.repository.ExtensionRepositoryManager;
 import org.xwiki.extension.repository.InstalledExtensionRepository;
@@ -85,7 +86,7 @@
     private ExtensionRepositoryManager repositories;
 
     @Inject
-    private Converter<Model> converter;
+    private Converter<ArtifactModel> extensionConverter;
 
     @Inject
     @Named(DependenciesJob.JOBTYPE)
@@ -281,28 +282,23 @@ public Extension getExtension(Artifact artifact) throws MojoExecutionException
     {
         MavenProject project = getMavenProject(artifact);
 
-        return getExtension(project);
+        return toExtension(toArtifactModel(artifact, project.getModel()));
     }
 
-    public Extension getExtension(MavenProject project)
+    public Extension toExtension(ArtifactModel model)
     {
-        Extension mavenExtension = toExtension(project.getModel());
+        Extension extension = this.extensionConverter.convert(Extension.class, model);
 
-        DefaultLocalExtension extension = new DefaultLocalExtension(null, mavenExtension);
-        extension.setFile(project.getArtifact().getFile());
+        MutableExtension mutableExtension;
 
-        return extension;
-    }
-
-    public Extension toExtension(Model model)
-    {
-        Extension extension = this.converter.convert(Extension.class, model);
-
-        // Apply overrides
         if (!(extension instanceof MutableExtension)) {
-            extension = new DefaultLocalExtension(null, extension);
+            mutableExtension = new DefaultLocalExtension(null, extension);
+        } else {
+            mutableExtension = (MutableExtension) extension;
         }
-        override((MutableExtension) extension);
+
+        // Apply overrides
+        override(mutableExtension);
 
         return extension;
     }
@@ -439,14 +435,29 @@ public void serializeExtension(File path, Artifact artifact)
         // Get MavenProject instance
         MavenProject mavenProject = getMavenProject(artifact);
 
-        serializeExtension(path, mavenProject.getModel());
+        serializeExtension(path, artifact, mavenProject.getModel());
     }
 
-    public void serializeExtension(File path, Model model)
+    public void serializeExtension(File path, Artifact artifact, Model model)
+        throws IOException, ParserConfigurationException, TransformerException
+    {
+        serializeExtension(path, toArtifactModel(artifact, model));
+    }
+
+    public ArtifactModel toArtifactModel(Artifact artifact, Model model)
+    {
+        ArtifactModel artifactModel = new ArtifactModel(model);
+        artifactModel.setClassifier(artifact.getClassifier());
+        artifactModel.setType(artifact.getType());
+
+        return artifactModel;
+    }
+
+    public void serializeExtension(File path, ArtifactModel artifactModel)
         throws IOException, ParserConfigurationException, TransformerException
     {
         // Get Extension instance
-        Extension mavenExtension = toExtension(model);
+        Extension mavenExtension = toExtension(artifactModel);
 
         if (!path.exists()) {
             // Save the Extension descriptor
@@ -481,7 +492,16 @@ public void serializeExtension(Artifact artifact, File directory) throws MojoExe
     {
         // Get path
         // WAR plugin use based version for the name of the actual file stored in the package
-        File path = new File(directory, artifact.getArtifactId() + '-' + artifact.getBaseVersion() + ".xed");
+        StringBuilder builder = new StringBuilder();
+        builder.append(artifact.getArtifactId());
+        builder.append('-');
+        builder.append(artifact.getBaseVersion());
+        if (artifact.getClassifier() != null) {
+            builder.append('-');
+            builder.append(artifact.getClassifier());
+        }
+        builder.append(".xed");
+        File path = new File(directory, builder.toString());
 
         try {
             serializeExtension(path, artifact);
diff --git a/xwiki-commons-tools/xwiki-commons-tool-license-resources/pom.xml b/xwiki-commons-tools/xwiki-commons-tool-license-resources/pom.xml
index f89c344..d4b812a 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-license-resources/pom.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-license-resources/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-tools</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-tool-license-resources</artifactId>
   <name>XWiki Commons - Tools - License Resources</name>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-remote-resource-plugin/pom.xml b/xwiki-commons-tools/xwiki-commons-tool-remote-resource-plugin/pom.xml
new file mode 100644
index 0000000..d4dd630
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-remote-resource-plugin/pom.xml
@@ -0,0 +1,57 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+-->
+
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <parent>
+    <groupId>org.xwiki.commons</groupId>
+    <artifactId>xwiki-commons-tools</artifactId>
+    <version>10.9-SNAPSHOT</version>
+  </parent>
+  <artifactId>xwiki-commons-tool-remote-resource-plugin</artifactId>
+  <name>XWiki Commons - Tools - Remote Resource Plugin</name>
+  <packaging>maven-plugin</packaging>
+  <description>
+    A more memory friendly alternative to standard Maven Remote Resource Plugin
+  </description>
+  <dependencies>
+    <!-- Extend Maven Remove Resource Plugin -->
+    <dependency>
+      <groupId>org.apache.maven.plugins</groupId>
+      <artifactId>maven-remote-resources-plugin</artifactId>
+      <version>1.5</version>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.maven.plugin-tools</groupId>
+      <artifactId>maven-plugin-annotations</artifactId>
+    </dependency>
+  </dependencies>
+  <build>
+    <plugins>
+      <plugin>
+        <!-- See commons-tools parent pom for why we need to explicitly configure checkstyle -->
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-checkstyle-plugin</artifactId>
+      </plugin>
+    </plugins>
+  </build>
+</project>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-remote-resource-plugin/src/main/java/org/xwiki/tool/resource/XWikiProcessRemoteResourcesMojo.java b/xwiki-commons-tools/xwiki-commons-tool-remote-resource-plugin/src/main/java/org/xwiki/tool/resource/XWikiProcessRemoteResourcesMojo.java
new file mode 100644
index 0000000..6a69965
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-remote-resource-plugin/src/main/java/org/xwiki/tool/resource/XWikiProcessRemoteResourcesMojo.java
@@ -0,0 +1,185 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.tool.resource;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
+
+import org.apache.maven.artifact.Artifact;
+import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.model.License;
+import org.apache.maven.model.Model;
+import org.apache.maven.model.Organization;
+import org.apache.maven.plugin.MojoExecutionException;
+import org.apache.maven.plugin.resources.remote.ProcessRemoteResourcesMojo;
+import org.apache.maven.plugins.annotations.Component;
+import org.apache.maven.plugins.annotations.LifecyclePhase;
+import org.apache.maven.plugins.annotations.Mojo;
+import org.apache.maven.plugins.annotations.Parameter;
+import org.apache.maven.plugins.annotations.ResolutionScope;
+import org.apache.maven.project.InvalidProjectModelException;
+import org.apache.maven.project.MavenProject;
+import org.apache.maven.project.MavenProjectBuilder;
+import org.apache.maven.project.ProjectBuildingException;
+
+/**
+ * Extends the Maven Remote Resources plugin to fix memory issue found in it,
+ * see <a href="https://jira.xwiki.org/browse/XCOMMONS-1421">XCOMMONS-1421</a>.
+ * <p>
+ * To be removed when <a href="https://issues.apache.org/jira/browse/MRRESOURCES-106">MRRESOURCES-106</a> is fixed
+ * on the Maven side.
+ *
+ * @version $Id$
+ * @since 9.11.5
+ * @since 10.5RC1
+ */
+@Mojo(name = "process", defaultPhase = LifecyclePhase.GENERATE_RESOURCES, threadSafe = true, requiresProject = true,
+    requiresDependencyResolution = ResolutionScope.RUNTIME)
+public class XWikiProcessRemoteResourcesMojo extends ProcessRemoteResourcesMojo
+{
+    /**
+     * Control what is injected in the "projects" Velocity binding.
+     * 
+     * @version $Id$
+     */
+    public enum ProjectData
+    {
+        /**
+         * "projects" is empty.
+         */
+        NONE,
+
+        /**
+         * "projects" only contains licenses.
+         */
+        LICENSES,
+
+        /**
+         * "projects" contains full MavenProject metadata (very expensive but standard Maven Resource plugin behavior).
+         */
+        FULL
+    }
+
+    @Parameter(defaultValue = "NONE")
+    protected ProjectData projectsData;
+
+    @Component
+    private MavenProject projectThis;
+
+    @Parameter(defaultValue = "${localRepository}", readonly = true, required = true)
+    private ArtifactRepository localRepositoryThis;
+
+    @Component(role = MavenProjectBuilder.class)
+    private MavenProjectBuilder mavenProjectBuilderThis;
+
+    @Override
+    protected List<MavenProject> getProjects() throws MojoExecutionException
+    {
+        switch (this.projectsData) {
+            case FULL:
+                return super.getProjects();
+
+            case LICENSES:
+                return getLicenses();
+
+            default:
+                break;
+        }
+
+        return Collections.emptyList();
+    }
+
+    private List<MavenProject> getLicenses() throws MojoExecutionException
+    {
+        Set<Artifact> artifacts = this.projectThis.getArtifacts();
+
+        List<MavenProject> licenses = new ArrayList<>(artifacts.size());
+
+        for (Artifact artifact : artifacts) {
+            try {
+                getLog().debug(String.format("Building project for [%s]", artifact));
+
+                MavenProject dependencyProject = null;
+                try {
+                    dependencyProject = this.mavenProjectBuilderThis.buildFromRepository(artifact,
+                        Collections.emptyList(), this.localRepositoryThis);
+                } catch (InvalidProjectModelException e) {
+                    getLog().warn(String.format("Invalid project model for artifact [%s:%s:%s]. It will be ignored by "
+                        + "the remote resources Mojo.", artifact.getGroupId(), artifact.getArtifactId(),
+                        artifact.getVersion()));
+                    continue;
+                }
+
+                // Extract license and a summary of the project metadata
+                Model miniModel = new Model();
+                MavenProject miniProject = new MavenProject(miniModel);
+                miniProject.setArtifact(dependencyProject.getArtifact());
+                miniProject.setGroupId(dependencyProject.getGroupId());
+                miniProject.setArtifactId(dependencyProject.getArtifactId());
+                miniProject.setVersion(dependencyProject.getVersion());
+                miniProject.setUrl(dependencyProject.getUrl());
+                for (License license : dependencyProject.getLicenses()) {
+                    // Get rid of XML source metadata
+                    miniProject.addLicense(cloneLicense(license));
+                }
+                // Get rid of XML source metadata
+                miniProject.setOrganization(cloneOrganization(dependencyProject.getOrganization()));
+
+                licenses.add(miniProject);
+            } catch (ProjectBuildingException e) {
+                throw new MojoExecutionException(e.getMessage(), e);
+            }
+        }
+
+        return licenses;
+    }
+
+    private static License cloneLicense(License src)
+    {
+        if (src == null) {
+            return null;
+        }
+
+        License result = new License();
+
+        result.setComments(src.getComments());
+        result.setDistribution(src.getDistribution());
+        result.setName(src.getName());
+        result.setUrl(src.getUrl());
+
+        return result;
+    }
+
+    private static Organization cloneOrganization(Organization src)
+    {
+        if (src == null) {
+            return null;
+        }
+
+        Organization result = new Organization();
+
+        result.setName(src.getName());
+        result.setUrl(src.getUrl());
+
+        return result;
+    }
+}
diff --git a/xwiki-commons-tools/xwiki-commons-tool-spoon/pom.xml b/xwiki-commons-tools/xwiki-commons-tool-spoon/pom.xml
index e6e8f75..46b5aa9 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-spoon/pom.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-spoon/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-tools</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-tool-spoon</artifactId>
   <name>XWiki Commons - Tools - Spoon Processor</name>
@@ -44,4 +44,13 @@
       <scope>provided</scope>
     </dependency>
   </dependencies>
+  <build>
+    <plugins>
+      <plugin>
+        <!-- See commons-tools parent pom for why we need to explicitly configure checkstyle -->
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-checkstyle-plugin</artifactId>
+      </plugin>
+    </plugins>
+  </build>
 </project>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-spoon/src/main/java/org/xwiki/tool/spoon/ForbiddenInvocationProcessor.java b/xwiki-commons-tools/xwiki-commons-tool-spoon/src/main/java/org/xwiki/tool/spoon/ForbiddenInvocationProcessor.java
index 1100f65..2d8c5c7 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-spoon/src/main/java/org/xwiki/tool/spoon/ForbiddenInvocationProcessor.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-spoon/src/main/java/org/xwiki/tool/spoon/ForbiddenInvocationProcessor.java
@@ -1,43 +1,62 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
 package org.xwiki.tool.spoon;
 
-import java.util.Collections;
-import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
-import java.util.Set;
 
 import org.apache.log4j.Level;
 
+import spoon.SpoonException;
 import spoon.processing.AbstractProcessor;
+import spoon.processing.Property;
 import spoon.reflect.code.CtExpression;
 import spoon.reflect.code.CtInvocation;
 
+/**
+ * Failed the build if some code is calling a forbidden method.
+ * 
+ * @version $Id$
+ * @since 9.9RC2
+ */
 public class ForbiddenInvocationProcessor extends AbstractProcessor<CtInvocation<?>>
 {
-    // FIXME: replace this by proper configuration when supported by the Spoon Maven plugin, see
-    // https://github.com/INRIA/spoon/issues/1537
-    private static final Map<String, Set<String>> METHODS = new HashMap<>();
-
-    static {
-        METHODS.put("java.io.File", Collections.singleton("deleteOnExit"));
-    }
+    @Property
+    private Map<String, List<String>> methods;
 
     @Override
     public void process(CtInvocation<?> element)
     {
         CtExpression<?> target = element.getTarget();
 
-        if (target != null) {
+        if (target != null && target.getType() != null) {
             String type = target.getType().getQualifiedName();
-            Set<String> methods = METHODS.get(type);
-            if (methods != null) {
+            List<String> methodList = this.methods.get(type);
+            if (methodList != null) {
                 String method = element.getExecutable().getSimpleName();
-                if (methods.contains(method)) {
-                    getFactory().getEnvironment().report(this, Level.ERROR, element,
-                        "Forbidden call to " + type + "#" + method);
+                if (methodList.contains(method)) {
+                    String message = String.format("Forbidden call to [%s#%s]", type, method);
+                    getFactory().getEnvironment().report(this, Level.ERROR, element, message);
 
                     // Forcing the build to stop
-                    // FIXME: Remove that when https://github.com/INRIA/spoon/issues/1534 is implemented
-                    throw new RuntimeException("Forbidden call to " + type + "#" + method);
+                    throw new SpoonException(message);
                 }
             }
         }
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/pom.xml b/xwiki-commons-tools/xwiki-commons-tool-test/pom.xml
index 8b83b7d..d92f2e6 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-test/pom.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-tools</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-tool-test</artifactId>
   <name>XWiki Commons - Tools - Test Framework - Parent POM</name>
@@ -39,46 +39,9 @@
   <build>
     <plugins>
       <plugin>
-        <!-- Note: We duplicate the configuration located in xwiki-commons-pom since commons tools use xwiki-commons
-             as their parent pom and not xwiki-commons-pom. This is to avoid a circular dependency since
-             xwiki-commons-pom uses the xwiki-commons-tool-validation-resources artifact. -->
+        <!-- See commons-tools parent pom for why we need to explicitly configure checkstyle -->
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-checkstyle-plugin</artifactId>
-        <dependencies>
-          <dependency>
-            <groupId>org.xwiki.commons</groupId>
-            <artifactId>xwiki-commons-tool-verification-resources</artifactId>
-            <version>${project.version}</version>
-          </dependency>
-        </dependencies>
-        <configuration>
-          <propertyExpansion>
-            currentVersion=${project.version}
-          </propertyExpansion>
-          <!-- Used by the "blocker" execution id and the "default-cli" one
-              (i.e. when executing "mvn checkstyle:check") -->
-          <configLocation>checkstyle-blocker.xml</configLocation>
-          <!-- Force execution since by default it's off for tools modules, see tools pom -->
-          <skip>false</skip>
-        </configuration>
-        <executions>
-          <execution>
-            <id>default</id>
-            <goals>
-              <goal>check</goal>
-            </goals>
-            <configuration>
-              <configLocation>checkstyle.xml</configLocation>
-            </configuration>
-          </execution>
-          <execution>
-            <!-- Checks that should never be excluded from executing in maven projects -->
-            <id>blocker</id>
-            <goals>
-              <goal>check</goal>
-            </goals>
-          </execution>
-        </executions>
       </plugin>
     </plugins>
   </build>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/pom.xml b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/pom.xml
index 94214fc..a4b1d17 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/pom.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-tool-test</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-tool-test-component</artifactId>
   <name>XWiki Commons - Tools - Test Framework - Component</name>
@@ -33,6 +33,7 @@
   <description>For testing XWiki Components</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.00</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>26</xwiki.pitest.mutationThreshold>
   </properties>
   <dependencies>
     <dependency>
@@ -100,4 +101,19 @@
       </plugin>
     </plugins>
   </build>
+  <profiles>
+    <profile>
+      <id>clover</id>
+      <dependencies>
+        <!-- Needed to execute the unit test in this module because MockitoComponentManagerExtension uses
+             ComponentAnnotationLoader which has been clovered and thus the clover jar needs to be in the test
+             classpath -->
+        <dependency>
+          <groupId>org.openclover</groupId>
+          <artifactId>clover</artifactId>
+          <version>${clover.version}</version>
+        </dependency>
+      </dependencies>
+    </profile>
+  </profiles>
 </project>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/checkstyle/checkstyle-suppressions.xml b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/checkstyle/checkstyle-suppressions.xml
index 1c6f765..881d9c8 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/checkstyle/checkstyle-suppressions.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/checkstyle/checkstyle-suppressions.xml
@@ -29,6 +29,6 @@
        Throwable is part of the JUnit method signature that we implement! -->
   <suppress checks="IllegalThrows" files="ComponentManagerRule.java" />
   <suppress checks="IllegalThrows" files="MockitoComponentMockingRule.java" />
-  <suppress checks="BooleanExpressionComplexity" files="MockitoComponentMockingRule.java" />
-  <suppress checks="CyclomaticComplexity" files="MockitoComponentMockingRule.java" />
+  <suppress checks="BooleanExpressionComplexity" files="MockitoComponentMocker.java" />
+  <suppress checks="CyclomaticComplexity" files="MockitoComponentMocker.java" />
 </suppressions>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/TestComponentManager.java b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/TestComponentManager.java
index ee3be07..2455c7a 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/TestComponentManager.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/TestComponentManager.java
@@ -20,7 +20,10 @@
 package org.xwiki.test;
 
 import java.lang.reflect.Method;
+import java.lang.reflect.Parameter;
 import java.lang.reflect.Type;
+import java.util.ArrayList;
+import java.util.List;
 
 import org.xwiki.component.embed.EmbeddableComponentManager;
 import org.xwiki.component.internal.StackingComponentEventManager;
@@ -113,9 +116,11 @@ public void registerComponentIfDontExist(Class<?> testClass) throws Exception
      * Also calls methods annotated with {@link BeforeComponent} and {@link AfterComponent}.
      *
      * @param testClassInstance the test instance on which the annotations are present
+     * @param parameterInstances the instances that will be passed as parameters to methods annotated with
+     *        {@code @BeforeComponent} and {@code @AfterComponent}
      * @throws Exception if an error happens during initialization
      */
-    public void initializeTest(Object testClassInstance) throws Exception
+    public void initializeTest(Object testClassInstance, Object... parameterInstances) throws Exception
     {
         Class<?> testClass = testClassInstance.getClass();
 
@@ -123,7 +128,7 @@ public void initializeTest(Object testClassInstance) throws Exception
         // opportunity for the test to register some components *before* we register the other components below.
         for (Method declaredMethod : testClass.getMethods()) {
             if (declaredMethod.isAnnotationPresent(BeforeComponent.class)) {
-                declaredMethod.invoke(testClassInstance);
+                invokeMethod(declaredMethod, testClassInstance, parameterInstances);
             }
         }
 
@@ -133,11 +138,38 @@ public void initializeTest(Object testClassInstance) throws Exception
         // opportunity to override or modify some components *after* they are actually used.
         for (Method declaredMethod : testClass.getMethods()) {
             if (declaredMethod.isAnnotationPresent(AfterComponent.class)) {
-                declaredMethod.invoke(testClassInstance);
+                invokeMethod(declaredMethod, testClassInstance, parameterInstances);
             }
         }
     }
 
+    private void invokeMethod(Method declaredMethod, Object testClassInstance, Object... parameterInstances)
+        throws Exception
+    {
+        // If parameters are of a type fund in parameterInstances, then call the method.
+        List<Object> validatedParameterInstances = new ArrayList<>();
+        boolean isSupported = true;
+        for (Parameter parameter : declaredMethod.getParameters()) {
+            // Is there a matching parameter instance for the parameter?
+            boolean hasMatchingParameterInstance = false;
+            for (Object object : parameterInstances) {
+                if (object.getClass().isAssignableFrom(parameter.getType())) {
+                    hasMatchingParameterInstance = true;
+                    validatedParameterInstances.add(object);
+                    break;
+                }
+            }
+            if (!hasMatchingParameterInstance) {
+                isSupported = false;
+                break;
+            }
+        }
+
+        if (isSupported) {
+            declaredMethod.invoke(testClassInstance, validatedParameterInstances.toArray());
+        }
+    }
+
     /**
      * Enabled notification of component descriptor registration/unregistration.
      * 
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/junit5/mockito/ComponentTest.java b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/junit5/mockito/ComponentTest.java
new file mode 100644
index 0000000..f10b39f
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/junit5/mockito/ComponentTest.java
@@ -0,0 +1,47 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.test.junit5.mockito;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Inherited;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import org.junit.jupiter.api.extension.ExtendWith;
+
+import static java.lang.annotation.ElementType.ANNOTATION_TYPE;
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.ElementType.TYPE;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+/**
+ * Marks a test as being a Component Test.
+ *
+ * @version $Id$
+ * @since 10.3RC1
+ */
+@Documented
+@Retention(RUNTIME)
+@Target({ TYPE, METHOD, ANNOTATION_TYPE })
+@ExtendWith(MockitoComponentManagerExtension.class)
+@Inherited
+public @interface ComponentTest
+{
+}
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/junit5/mockito/InjectComponentManager.java b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/junit5/mockito/InjectComponentManager.java
new file mode 100644
index 0000000..681c0cd
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/junit5/mockito/InjectComponentManager.java
@@ -0,0 +1,47 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.test.junit5.mockito;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Inherited;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+/**
+ * Marks a field as needed to be injected with components and mock components.
+ *
+ * @version $Id$
+ * @since 10.4RC1
+ */
+@Documented
+@Retention(RUNTIME)
+@Target({ FIELD })
+@Inherited
+public @interface InjectComponentManager
+{
+    /**
+     * @return the role to use for disambiguation when the component implementations implements several roles
+     */
+    // Note: Java doesn't accept null as default value so we have to use a specific class and filter it in the code.
+    Class<?> role() default InjectComponentManager.class;
+}
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/junit5/mockito/InjectMockComponents.java b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/junit5/mockito/InjectMockComponents.java
new file mode 100644
index 0000000..addd035
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/junit5/mockito/InjectMockComponents.java
@@ -0,0 +1,47 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.test.junit5.mockito;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Inherited;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+/**
+ * Marks a field as needed to be injected with components and mock components.
+ *
+ * @version $Id$
+ * @since 10.3RC1
+ */
+@Documented
+@Retention(RUNTIME)
+@Target({ FIELD })
+@Inherited
+public @interface InjectMockComponents
+{
+    /**
+     * @return the role to use for disambiguation when the component implementations implements several roles
+     */
+    // Note: Java doesn't accept null as default value so we have to use a specific class and filter it in the code.
+    Class<?> role() default InjectMockComponents.class;
+}
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/junit5/mockito/MockComponent.java b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/junit5/mockito/MockComponent.java
new file mode 100644
index 0000000..6fe5707
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/junit5/mockito/MockComponent.java
@@ -0,0 +1,43 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.test.junit5.mockito;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Inherited;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.ANNOTATION_TYPE;
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+/**
+ * Marks a field as being a Mock component.
+ *
+ * @version $Id$
+ * @since 10.3RC1
+ */
+@Documented
+@Retention(RUNTIME)
+@Target({ FIELD, ANNOTATION_TYPE })
+@Inherited
+public @interface MockComponent
+{
+}
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/junit5/mockito/MockitoComponentManagerExtension.java b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/junit5/mockito/MockitoComponentManagerExtension.java
new file mode 100644
index 0000000..d811ab5
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/junit5/mockito/MockitoComponentManagerExtension.java
@@ -0,0 +1,271 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.test.junit5.mockito;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.Parameter;
+import java.util.List;
+
+import javax.inject.Named;
+
+import org.junit.jupiter.api.extension.AfterEachCallback;
+import org.junit.jupiter.api.extension.ExtensionContext;
+import org.junit.jupiter.api.extension.ExtensionContext.Namespace;
+import org.junit.jupiter.api.extension.ParameterContext;
+import org.junit.jupiter.api.extension.ParameterResolutionException;
+import org.junit.jupiter.api.extension.ParameterResolver;
+import org.junit.jupiter.api.extension.TestInstancePostProcessor;
+import org.mockito.MockitoAnnotations;
+import org.xwiki.component.annotation.ComponentAnnotationLoader;
+import org.xwiki.component.descriptor.ComponentDescriptor;
+import org.xwiki.component.manager.ComponentManager;
+import org.xwiki.component.util.ReflectionUtils;
+import org.xwiki.test.mockito.MockitoComponentManager;
+import org.xwiki.test.mockito.MockitoComponentMocker;
+
+/**
+ * JUnit5 extension to help write unit tests for XWiki Components.
+ * <p>
+ * For example:
+ *
+ * <pre>
+ * {@code
+ * &#64;ComponentTest
+ * &#64;ComponentList({
+ *     Component3Impl.class
+ * })
+ * public class MyComponentTest
+ * {
+ *     &#64;Mock
+ *     private List<String> list;
+ *
+ *     &#64;MockComponent
+ *     private Component1Role component1;
+ *
+ *     &#64;InjectMocks
+ *     &#64;InjectMockComponents
+ *     private Component4Impl component4;
+ *
+ *     &#64;InjectComponentManager
+ *     private MockitoComponentManager componentManager;
+ *
+ *     &#64;BeforeEach
+ *     public void before(MockitoComponentManager componentManager)
+ *     {
+ *         ...
+ *     }
+ *
+ *     &#64;Test
+ *     public void test1(MockitoComponentManager componentManager)
+ *     {
+ *         ...
+ *     }
+ *
+ *     &#64;Test
+ *     public void test2(ComponentManager componentManager)
+ *     {
+ *         ...
+ *     }
+ * ...
+ * }
+ * }
+ * </pre>
+ *
+ * @version $Id$
+ * @since 10.3RC1
+ */
+public class MockitoComponentManagerExtension implements TestInstancePostProcessor, AfterEachCallback, ParameterResolver
+{
+    private static final Namespace NAMESPACE = Namespace.create(MockitoComponentManagerExtension.class);
+
+    private static final ComponentAnnotationLoader LOADER = new ComponentAnnotationLoader();
+
+    @Override
+    public void postProcessTestInstance(Object testInstance, ExtensionContext context) throws Exception
+    {
+        // Make sure tests don't leak one on another
+        removeComponentManager(context);
+
+        // We initialize the CM in 3 steps:
+        // - First we create an instance of it
+        // - Then we create mocks for all @MockComponent annotations
+        // - Then we initialize the CM.
+        // This allows the test to have methods annotated with @BeforeComponent which can configure mocks defined
+        // with @MockComponent annotations, so that when @InjectMockComponents component are injected, if they
+        // implement Initializable, the test can have prepared any component setup so that the call to initialize()
+        // will work fine.
+        MockitoComponentManager mcm = loadComponentManager(context);
+        boolean initializeCM = mcm == null;
+        if (initializeCM) {
+            mcm = new MockitoComponentManager();
+            saveComponentManager(context, mcm);
+        }
+
+        // Inject the Mockito Component Manager in all fields annotated with @InjectComponentManager
+        for (Field field : ReflectionUtils.getAllFields(testInstance.getClass())) {
+            if (field.isAnnotationPresent(InjectComponentManager.class)) {
+                ReflectionUtils.setFieldValue(testInstance, field.getName(), mcm);
+            }
+        }
+
+        // Register a mock component for all fields annotated with @MockComponent
+        for (Field field : ReflectionUtils.getAllFields(testInstance.getClass())) {
+            if (field.isAnnotationPresent(MockComponent.class)) {
+                // Get the hint from the @Named annotation (if any)
+                Named namedAnnotation = field.getAnnotation(Named.class);
+                Object mockComponent;
+                if (namedAnnotation != null) {
+                    mockComponent = mcm.registerMockComponent(field.getGenericType(), namedAnnotation.value());
+                } else {
+                    mockComponent = mcm.registerMockComponent(field.getGenericType());
+                }
+                ReflectionUtils.setFieldValue(testInstance, field.getName(), mockComponent);
+            }
+        }
+
+        if (initializeCM) {
+            initializeMockitoComponentManager(testInstance, mcm, context);
+        }
+
+        // Create & register a component instance of all fields annotated with @InjectMockComponents with all its
+        // @Inject-annotated fields injected with mocks or real implementations.
+        for (Field field : ReflectionUtils.getAllFields(testInstance.getClass())) {
+            InjectMockComponents annotation = field.getAnnotation(InjectMockComponents.class);
+            if (annotation != null) {
+                processInjectMockComponents(testInstance, field, annotation, mcm);
+            }
+        }
+
+        // Make sure this is executed last since if we want to combine it with @InjectMockComponents annotation, we
+        // need the field to be non-null when this line executes or otherwise Mockito will not inject anything...
+        // Also note that all fields annotated with @InjectMocks will have their fields replaced by all mocks found
+        // in the test class.
+        MockitoAnnotations.initMocks(testInstance);
+    }
+
+    protected void processInjectMockComponents(Object testInstance, Field field, InjectMockComponents annotation,
+        MockitoComponentManager mcm) throws Exception
+    {
+        // Must not be an instance
+        if (field.getType().isInterface()) {
+            throw new Exception(String.format("The type of the field [%s] annotated with @%s cannot be an interface.",
+                InjectMockComponents.class.getSimpleName(), field.getName()));
+        }
+
+        // Find Component descriptors
+        List<ComponentDescriptor> descriptors = LOADER.getComponentsDescriptors(field.getType());
+        ComponentDescriptor<?> descriptor = getDescriptor(annotation.role(), descriptors, field);
+        MockitoComponentMocker<?> mocker =
+            new MockitoComponentMocker<>(mcm, field.getType(), descriptor.getRoleType(), descriptor.getRoleHint());
+        mocker.mockComponent(testInstance);
+        Object component = mcm.getInstance(descriptor.getRoleType(), descriptor.getRoleHint());
+        ReflectionUtils.setFieldValue(testInstance, field.getName(), component);
+    }
+
+    /**
+     * To be overridden by extensions if they need to perform additional initializations.
+     *
+     * @param testInstance the test instance object
+     * @param mcm the already created (but not initialized) Mockito Component Manager
+     * @param context the extension context
+     * @throws Exception if the intialization fails
+     */
+    protected void initializeMockitoComponentManager(Object testInstance, MockitoComponentManager mcm,
+        ExtensionContext context) throws Exception
+    {
+        mcm.initializeTest(testInstance, mcm);
+    }
+
+    @Override
+    public void afterEach(ExtensionContext extensionContext) throws Exception
+    {
+        MockitoComponentManager mcm = loadComponentManager(extensionContext);
+        if (mcm != null) {
+            mcm.dispose();
+        }
+    }
+
+    @Override
+    public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext)
+        throws ParameterResolutionException
+    {
+        Parameter parameter = parameterContext.getParameter();
+        return ComponentManager.class.isAssignableFrom(parameter.getType());
+    }
+
+    @Override
+    public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext)
+        throws ParameterResolutionException
+    {
+        return loadComponentManager(extensionContext);
+    }
+
+    private ComponentDescriptor<?> getDescriptor(Class<?> role, List<ComponentDescriptor> descriptors, Field field)
+        throws Exception
+    {
+        if (role.equals(InjectMockComponents.class)) {
+            if (descriptors.size() > 1) {
+                // Force user to specify a role in case of several
+                throw new Exception(String.format(
+                    "The component under field [%s] is implementing several roles. "
+                        + "Please disambiguate by using the \"role\" parameter of the @%s annotation.",
+                    field.getName(), InjectMockComponents.class.getSimpleName()));
+            } else {
+                return descriptors.get(0);
+            }
+        } else {
+            for (ComponentDescriptor<?> descriptor : descriptors) {
+                Class<?> roleClass = ReflectionUtils.getTypeClass(descriptor.getRoleType());
+                if (roleClass.equals(role)) {
+                    return descriptor;
+                }
+            }
+            throw new Exception(String.format(
+                "The role type specified in the @%s annotation for field [%s] isn't " + "implemented by the component.",
+                field.getName(), InjectMockComponents.class.getSimpleName()));
+        }
+    }
+
+    protected MockitoComponentManager loadComponentManager(ExtensionContext context)
+    {
+        ExtensionContext.Store store = getStore(context);
+        Class<?> testClass = context.getRequiredTestClass();
+        return store.get(testClass, MockitoComponentManager.class);
+    }
+
+    private void removeComponentManager(ExtensionContext context)
+    {
+        ExtensionContext.Store store = getStore(context);
+        Class<?> testClass = context.getRequiredTestClass();
+        store.remove(testClass);
+    }
+
+    private void saveComponentManager(ExtensionContext context, MockitoComponentManager componentManager)
+    {
+        ExtensionContext.Store store = getStore(context);
+        Class<?> testClass = context.getRequiredTestClass();
+        store.put(testClass, componentManager);
+    }
+
+    private static ExtensionContext.Store getStore(ExtensionContext context)
+    {
+        return context.getRoot().getStore(NAMESPACE);
+    }
+}
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/mockito/MockitoComponentManager.java b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/mockito/MockitoComponentManager.java
index e4e1980..04ea9be 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/mockito/MockitoComponentManager.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/mockito/MockitoComponentManager.java
@@ -21,6 +21,7 @@
 
 import java.lang.reflect.Type;
 
+import org.xwiki.component.descriptor.ComponentDescriptor;
 import org.xwiki.component.util.ReflectionUtils;
 import org.xwiki.test.TestComponentManager;
 
@@ -45,6 +46,35 @@
      */
     public <T> T registerMockComponent(Type roleType, String roleHint) throws Exception
     {
+        return registerMockComponent(roleType, roleHint, true);
+    }
+
+    /**
+     * Registers a Mock component.
+     * <p>
+     * If <code>force</code> is false the method will do nothing if there is already a mock and will return it.
+     *
+     * @param roleType the type of the component role to register
+     * @param roleHint the role hint of the component to register
+     * @param force force registering a new mock even if there is already one
+     * @param <T> the mock
+     * @return the mock
+     * @throws Exception in case of an error during registration
+     * @since 10.2
+     */
+    public <T> T registerMockComponent(Type roleType, String roleHint, boolean force) throws Exception
+    {
+        // Check if the component is already mocked
+        if (!force) {
+            ComponentDescriptor<?> descriptor = getComponentDescriptor(roleType, roleHint);
+
+            if (descriptor != null && descriptor.getImplementation() == null) {
+                return getInstance(roleType, roleHint);
+            }
+        }
+
+        // Mock the component and register it
+        @SuppressWarnings("unchecked")
         T mock = (T) mock(ReflectionUtils.getTypeClass(roleType));
         registerComponent(roleType, roleHint, mock);
         return mock;
@@ -62,4 +92,20 @@
     {
         return registerMockComponent(roleType, null);
     }
+
+    /**
+     * Registers a Mock component (using the default role hint).
+     * <p>
+     * If <code>force</code> is false the method will do nothing if there is already a mock and will return it.
+     *
+     * @param roleType the type of the component role to register
+     * @param force force registering a new mock even if there is already one
+     * @param <T> the mock
+     * @return the mock
+     * @throws Exception in case of an error during registration
+     */
+    public <T> T registerMockComponent(Type roleType, boolean force) throws Exception
+    {
+        return registerMockComponent(roleType, null, force);
+    }
 }
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/mockito/MockitoComponentManagerRule.java b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/mockito/MockitoComponentManagerRule.java
index b3b9032..7206887 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/mockito/MockitoComponentManagerRule.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/mockito/MockitoComponentManagerRule.java
@@ -19,13 +19,9 @@
  */
 package org.xwiki.test.mockito;
 
-import java.lang.reflect.Type;
-
-import org.xwiki.component.descriptor.ComponentDescriptor;
-import org.xwiki.component.util.ReflectionUtils;
-import org.xwiki.test.ComponentManagerRule;
-
-import static org.mockito.Mockito.mock;
+import org.junit.rules.MethodRule;
+import org.junit.runners.model.FrameworkMethod;
+import org.junit.runners.model.Statement;
 
 /**
  * JUnit {@link org.junit.rules.MethodRule} to make it extra simple to register Mock Components using Mockito.
@@ -33,79 +29,51 @@
  * @version $Id$
  * @since 4.3.1
  */
-public class MockitoComponentManagerRule extends ComponentManagerRule
+public class MockitoComponentManagerRule extends MockitoComponentManager implements MethodRule
 {
-    /**
-     * Registers a Mock component.
-     *
-     * @param roleType the type of the component role to register
-     * @param roleHint the role hint of the component to register
-     * @param <T> the mock
-     * @return the mock
-     * @throws Exception in case of an error during registration
-     */
-    public <T> T registerMockComponent(Type roleType, String roleHint) throws Exception
+    @Override
+    public Statement apply(final Statement base, final FrameworkMethod method, final Object target)
     {
-        return registerMockComponent(roleType, roleHint, true);
-    }
-
-    /**
-     * Registers a Mock component.
-     * <p>
-     * If <code>force</code> is false the method will do nothing if there is already a mock and will return it.
-     *
-     * @param roleType the type of the component role to register
-     * @param roleHint the role hint of the component to register
-     * @param force force registering a new mock even if there is already one
-     * @param <T> the mock
-     * @return the mock
-     * @throws Exception in case of an error during registration
-     * @since 7.2RC1
-     */
-    public <T> T registerMockComponent(Type roleType, String roleHint, boolean force) throws Exception
-    {
-        // Check if the component is already mocked
-        if (!force) {
-            ComponentDescriptor<?> descriptor = getComponentDescriptor(roleType, roleHint);
-
-            if (descriptor != null && descriptor.getImplementation() == null) {
-                return getInstance(roleType, roleHint);
+        return new Statement()
+        {
+            @Override
+            public void evaluate() throws Throwable
+            {
+                before(base, method, target);
+                try {
+                    base.evaluate();
+                } finally {
+                    after(base, method, target);
+                }
             }
-        }
-
-        // Mock the component and register it
-        @SuppressWarnings("unchecked")
-        T mock = (T) mock(ReflectionUtils.getTypeClass(roleType));
-        registerComponent(roleType, roleHint, mock);
-        return mock;
+        };
     }
 
     /**
-     * Registers a Mock component (using the default role hint).
+     * Called before the test.
      *
-     * @param roleType the type of the component role to register
-     * @param <T> the mock
-     * @return the mock
-     * @throws Exception in case of an error during registration
+     * @param base The {@link Statement} to be modified
+     * @param method The method to be run
+     * @param target The object on with the method will be run.
+     * @throws Throwable if anything goes wrong
+     * @since 5.1M1
      */
-    public <T> T registerMockComponent(Type roleType) throws Exception
+    protected void before(final Statement base, final FrameworkMethod method, final Object target) throws Throwable
     {
-        return registerMockComponent(roleType, null);
+        initializeTest(target);
     }
 
     /**
-     * Registers a Mock component (using the default role hint).
-     * <p>
-     * If <code>force</code> is false the method will do nothing if there is already a mock and will return it.
+     * Called after the test.
      *
-     * @param roleType the type of the component role to register
-     * @param force force registering a new mock even if there is already one
-     * @param <T> the mock
-     * @return the mock
-     * @throws Exception in case of an error during registration
+     * @param base The {@link Statement} to be modified
+     * @param method The method to be run
+     * @param target The object on with the method will be run.
+     * @throws Throwable if anything goes wrong
+     * @since 5.1M1
      */
-    public <T> T registerMockComponent(Type roleType, boolean force) throws Exception
+    protected void after(final Statement base, final FrameworkMethod method, final Object target) throws Throwable
     {
-        return registerMockComponent(roleType, null, force);
+        shutdownTest();
     }
 }
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/mockito/MockitoComponentMocker.java b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/mockito/MockitoComponentMocker.java
new file mode 100644
index 0000000..29a1edc
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/mockito/MockitoComponentMocker.java
@@ -0,0 +1,272 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.test.mockito;
+
+import java.lang.reflect.Type;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import javax.inject.Provider;
+
+import org.slf4j.Logger;
+import org.xwiki.component.annotation.ComponentAnnotationLoader;
+import org.xwiki.component.annotation.ComponentDescriptorFactory;
+import org.xwiki.component.annotation.Role;
+import org.xwiki.component.descriptor.ComponentDependency;
+import org.xwiki.component.descriptor.ComponentDescriptor;
+import org.xwiki.component.descriptor.DefaultComponentDescriptor;
+import org.xwiki.component.internal.RoleHint;
+import org.xwiki.component.util.ReflectionUtils;
+
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+/**
+ * See javadoc for {@link MockitoComponentMockingRule}.
+ *
+ * @param <T> the component role type that we're mocking
+ * @version $Id$
+ * @since 10.3RC1
+ */
+public class MockitoComponentMocker<T>
+{
+    /**
+     * Used to create Component Descriptors based on annotations.
+     */
+    private ComponentDescriptorFactory factory = new ComponentDescriptorFactory();
+
+    /**
+     * Used to discover and register components using annotations.
+     */
+    private ComponentAnnotationLoader loader = new ComponentAnnotationLoader();
+
+    private MockitoComponentManager componentManager;
+
+    /**
+     * The class of the component implementation to mock.
+     */
+    private Class<?> componentImplementationClass;
+
+    /**
+     * The role Type if the component implementation implements several roles.
+     */
+    private Type componentRoleType;
+
+    /**
+     * The role Hint if the component implementation implements several roles.
+     */
+    private String componentRoleHint;
+
+    /**
+     * The list of component Roles that shouldn't be mocked.
+     */
+    private List<Class<?>> excludedComponentRoleDependencies = new ArrayList<Class<?>>();
+
+    /**
+     * @param componentManager the mockito component manager in which to register mock components
+     * @param componentImplementationClass the component implementation for which we wish to have its injection mocked
+     */
+    public MockitoComponentMocker(MockitoComponentManager componentManager,
+        Class<? extends T> componentImplementationClass)
+    {
+        this(componentManager, componentImplementationClass, (Type) null);
+    }
+
+    /**
+     * @param componentManager the mockito component manager in which to register mock components
+     * @param componentImplementationClass the component implementation for which we wish to have its injection mocked
+     * @param componentRoleType the role type of the component implementation (when it has several), for disambiguation
+     */
+    public MockitoComponentMocker(MockitoComponentManager componentManager,
+        Class<? extends T> componentImplementationClass, Type componentRoleType)
+    {
+        this(componentManager, componentImplementationClass, componentRoleType, null);
+    }
+
+    /**
+     * @param componentManager the mockito component manager in which to register mock components
+     * @param componentImplementationClass the component implementation for which we wish to have its injection mocked
+     * @param componentRoleType the role type of the component implementation (when it has several), for disambiguation
+     * @param componentRoleHint the role hint of the component implementation (when it has several), for disambiguation
+     */
+    public MockitoComponentMocker(MockitoComponentManager componentManager, Class<?> componentImplementationClass,
+        Type componentRoleType, String componentRoleHint)
+    {
+        this(componentManager, componentImplementationClass, componentRoleType, componentRoleHint,
+            Collections.emptyList());
+    }
+
+    /**
+     * @param componentManager the mockito component manager in which to register mock components
+     * @param componentImplementationClass the component implementation for which we wish to have its injection mocked
+     * @param componentRoleType the role type of the component implementation (when it has several), for disambiguation
+     * @param componentRoleHint the role hint of the component implementation (when it has several), for disambiguation
+     * @param excludedComponentRoleDependencies list of component dependency role classes that we don't want mocked
+     */
+    public MockitoComponentMocker(MockitoComponentManager componentManager, Class<?> componentImplementationClass,
+        Type componentRoleType, String componentRoleHint, List<? extends Class<?>> excludedComponentRoleDependencies)
+    {
+        this.componentManager = componentManager;
+        this.componentImplementationClass = componentImplementationClass;
+        this.componentRoleType = componentRoleType;
+        this.componentRoleHint = componentRoleHint;
+        this.excludedComponentRoleDependencies.addAll(excludedComponentRoleDependencies);
+    }
+
+    /**
+     * @param componentManager the mockito component manager in which to register mock components
+     * @param componentImplementationClass the component implementation for which we wish to have its injection mocked
+     * @param excludedComponentRoleDependencies list of component dependency role classes that we don't want mocked
+     */
+    public MockitoComponentMocker(MockitoComponentManager componentManager,
+        Class<? extends T> componentImplementationClass, List<? extends Class<?>> excludedComponentRoleDependencies)
+    {
+        this(componentManager, componentImplementationClass, null, null, excludedComponentRoleDependencies);
+    }
+
+    /**
+     * Mock the injected components for the specified component implementation.
+     *
+     * @param testInstance the test instance
+     * @return the mocked component role/hint or null if invalid
+     * @throws Exception in case of an error while mocking
+     */
+    public RoleHint<T> mockComponent(final Object testInstance) throws Exception
+    {
+        // Handle component fields
+        for (ComponentDescriptor<T> descriptor : this.factory
+            .createComponentDescriptors(this.componentImplementationClass, findComponentRoleType())) {
+            // Only use the descriptor for the specified hint
+            if ((this.componentRoleHint != null && this.componentRoleHint.equals(descriptor.getRoleHint()))
+                || this.componentRoleHint == null) {
+                registerMockDependencies(descriptor);
+                this.componentManager.registerComponent(descriptor);
+                return new RoleHint<T>(descriptor.getRoleType(), descriptor.getRoleHint());
+            }
+        }
+        return null;
+    }
+
+    /**
+     * @return the list of component dependency role classes that we don't want mocked
+     */
+    public List<Class<?>> getExcludedComponentRoleDependencies()
+    {
+        return this.excludedComponentRoleDependencies;
+    }
+
+    /**
+     * @return the component implementation for which we wish to have its injection mocked
+     */
+    public Class<?> getComponentImplementationClass()
+    {
+        return this.componentImplementationClass;
+    }
+
+    /**
+     * @return the Component role type extracted from the the component implementation class
+     */
+    private Type findComponentRoleType()
+    {
+        Type type;
+
+        Set<Type> componentRoleTypes = this.loader.findComponentRoleTypes(this.componentImplementationClass);
+        if (this.componentRoleType != null) {
+            if (!componentRoleTypes.contains(this.componentRoleType)) {
+                throw new RuntimeException(
+                    "Specified Component Role ([" + this.componentRoleType + "]) not found in component");
+            } else {
+                type = this.componentRoleType;
+            }
+        } else {
+            if (componentRoleTypes.isEmpty()) {
+                throw new RuntimeException(
+                    String.format("Couldn't find roles for component [%s]", this.componentRoleType));
+            } else if (componentRoleTypes.size() > 1) {
+                throw new RuntimeException("Components with several roles must explicitly specify which role to use.");
+            } else {
+                type = componentRoleTypes.iterator().next();
+            }
+        }
+        return type;
+    }
+
+    /**
+     * Create mocks of injected dependencies and registers them against the Component Manager.
+     *
+     * @param descriptor the descriptor of the component under test
+     * @throws Exception if an error happened during registration
+     */
+    private void registerMockDependencies(ComponentDescriptor<T> descriptor) throws Exception
+    {
+        Collection<ComponentDependency<?>> dependencyDescriptors = descriptor.getComponentDependencies();
+        for (ComponentDependency<?> dependencyDescriptor : dependencyDescriptors) {
+            Class<?> roleTypeClass = ReflectionUtils.getTypeClass(dependencyDescriptor.getRoleType());
+            // Only register a mock if it isn't:
+            // - Already registered
+            // - An explicit exception specified by the user
+            // - A logger
+            // - A collection of components, we want to keep them as Java collections. Those collections are later
+            // filled by the component manager with available components. Developers can register mocked components
+            // in an override of #setupDependencies().
+            // TODO: Handle multiple roles/hints.
+            if (!this.excludedComponentRoleDependencies.contains(roleTypeClass) && Logger.class != roleTypeClass
+                && !roleTypeClass.isAssignableFrom(List.class) && !roleTypeClass.isAssignableFrom(Map.class)
+                && !this.componentManager.hasComponent(dependencyDescriptor.getRoleType(),
+                    dependencyDescriptor.getRoleHint()))
+            {
+                DefaultComponentDescriptor cd = new DefaultComponentDescriptor<>();
+
+                cd.setRoleType(dependencyDescriptor.getRoleType());
+                cd.setRoleHint(dependencyDescriptor.getRoleHint());
+
+                Object dependencyMock = mock(roleTypeClass, dependencyDescriptor.getName());
+
+                if (Provider.class == roleTypeClass) {
+                    Type providedType = ReflectionUtils.getLastTypeGenericArgument(dependencyDescriptor.getRoleType());
+                    Class providedClass = ReflectionUtils.getTypeClass(providedType);
+
+                    // If the target is registered or if a list or a map are asked don't mock anything
+                    if (this.componentManager.hasComponent(providedType, dependencyDescriptor.getRoleHint())
+                        || providedClass.isAssignableFrom(List.class) || providedClass.isAssignableFrom(Map.class)) {
+                        continue;
+                    }
+
+                    if (providedClass.getAnnotation(Role.class) != null) {
+                        // If the dependency is a Provider for a @Role mock the @Role instead of the Provider
+                        cd.setRoleType(providedType);
+                        dependencyMock = mock(providedClass, dependencyDescriptor.getName());
+                    } else {
+                        // If the dependency is a Provider not targeting a @Role register a mock Provider which provide
+                        // a mock
+                        Provider provider = (Provider) dependencyMock;
+                        when(provider.get()).thenReturn(mock(providedClass, providedType.toString()));
+                    }
+                }
+
+                this.componentManager.registerComponent(cd, dependencyMock);
+            }
+        }
+    }
+}
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/mockito/MockitoComponentMockingRule.java b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/mockito/MockitoComponentMockingRule.java
index b71a6c6..24f6bd4 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/mockito/MockitoComponentMockingRule.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/main/java/org/xwiki/test/mockito/MockitoComponentMockingRule.java
@@ -20,29 +20,15 @@
 package org.xwiki.test.mockito;
 
 import java.lang.reflect.Type;
-import java.util.ArrayList;
-import java.util.Collection;
 import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-import javax.inject.Provider;
 
 import org.junit.runners.model.FrameworkMethod;
 import org.junit.runners.model.Statement;
 import org.slf4j.Logger;
-import org.xwiki.component.annotation.ComponentAnnotationLoader;
-import org.xwiki.component.annotation.ComponentDescriptorFactory;
-import org.xwiki.component.annotation.Role;
-import org.xwiki.component.descriptor.ComponentDependency;
-import org.xwiki.component.descriptor.ComponentDescriptor;
-import org.xwiki.component.descriptor.DefaultComponentDescriptor;
 import org.xwiki.component.internal.RoleHint;
 import org.xwiki.component.manager.ComponentLookupException;
-import org.xwiki.component.util.ReflectionUtils;
 
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 /**
  * Unit tests for Components should extend this class instead of using {@link MockitoComponentManagerRule} or
@@ -114,16 +100,6 @@
 public class MockitoComponentMockingRule<T> extends MockitoComponentManagerRule
 {
     /**
-     * Used to discover and register components using annotations.
-     */
-    private ComponentAnnotationLoader loader = new ComponentAnnotationLoader();
-
-    /**
-     * Used to create Component Descriptors based on annotations.
-     */
-    private ComponentDescriptorFactory factory = new ComponentDescriptorFactory();
-
-    /**
      * The mocked logger if any.
      */
     private Logger mockLogger;
@@ -133,32 +109,14 @@
      */
     private RoleHint<T> mockedComponentHint;
 
-    /**
-     * The class of the component implementation to mock.
-     */
-    private Class<?> componentImplementationClass;
-
-    /**
-     * The list of component Roles that shouldn't be mocked.
-     */
-    private List<Class<?>> excludedComponentRoleDependencies = new ArrayList<Class<?>>();
-
-    /**
-     * The role Type if the component implementation implements several roles.
-     */
-    private Type componentRoleType;
-
-    /**
-     * The role Hint if the component implementation implements several roles.
-     */
-    private String componentRoleHint;
+    private MockitoComponentMocker<T> mocker;
 
     /**
      * @param componentImplementationClass the component implementation for which we wish to have its injection mocked
      */
     public MockitoComponentMockingRule(Class<? extends T> componentImplementationClass)
     {
-        this.componentImplementationClass = componentImplementationClass;
+        this.mocker = new MockitoComponentMocker<T>(this, componentImplementationClass);
     }
 
     /**
@@ -168,8 +126,8 @@ public MockitoComponentMockingRule(Class<? extends T> componentImplementationCla
     public MockitoComponentMockingRule(Class<? extends T> componentImplementationClass,
         List<? extends Class<?>> excludedComponentRoleDependencies)
     {
-        this(componentImplementationClass);
-        this.excludedComponentRoleDependencies.addAll(excludedComponentRoleDependencies);
+        this.mocker =
+            new MockitoComponentMocker<T>(this, componentImplementationClass, excludedComponentRoleDependencies);
     }
 
     /**
@@ -181,9 +139,8 @@ public MockitoComponentMockingRule(Class<? extends T> componentImplementationCla
     public MockitoComponentMockingRule(Class<? extends T> componentImplementationClass, Type componentRoleType,
         String componentRoleHint, List<? extends Class<?>> excludedComponentRoleDependencies)
     {
-        this(componentImplementationClass, excludedComponentRoleDependencies);
-        this.componentRoleType = componentRoleType;
-        this.componentRoleHint = componentRoleHint;
+        this.mocker = new MockitoComponentMocker<T>(this, componentImplementationClass, componentRoleType,
+            componentRoleHint, excludedComponentRoleDependencies);
     }
 
     /**
@@ -205,9 +162,8 @@ public MockitoComponentMockingRule(Class<? extends T> componentImplementationCla
     public MockitoComponentMockingRule(Class<? extends T> componentImplementationClass, Type componentRoleType,
         String componentRoleHint)
     {
-        this(componentImplementationClass);
-        this.componentRoleType = componentRoleType;
-        this.componentRoleHint = componentRoleHint;
+        this.mocker = new MockitoComponentMocker<T>(this, componentImplementationClass, componentRoleType,
+            componentRoleHint);
     }
 
     /**
@@ -251,32 +207,9 @@ protected void before(final Statement base, final FrameworkMethod method, final
     {
         super.before(base, method, target);
 
-        mockComponent(target);
-    }
-
-    /**
-     * Mock the injected components for the specified component implementation.
-     *
-     * @param testInstance the test instance
-     * @throws Exception in case of an error while mocking
-     */
-    private void mockComponent(final Object testInstance) throws Exception
-    {
-        // Handle component fields
-        for (ComponentDescriptor<T> descriptor : this.factory
-            .createComponentDescriptors(this.componentImplementationClass, findComponentRoleType())) {
-            // Only use the descriptor for the specified hint
-            if ((this.componentRoleHint != null && this.componentRoleHint.equals(descriptor.getRoleHint()))
-                || this.componentRoleHint == null) {
-                registerMockDependencies(descriptor);
-                registerComponent(descriptor);
-
-                // Save the mocked component information so that the test can get an instance of this component
-                // easily by calling getComponentUnderTest(...)
-                this.mockedComponentHint = new RoleHint<T>(descriptor.getRoleType(), descriptor.getRoleHint());
-                break;
-            }
-        }
+        // Save the mocked component information so that the test can get an instance of this component
+        // easily by calling getComponentUnderTest(...)
+        this.mockedComponentHint = this.mocker.mockComponent(target);
     }
 
     /**
@@ -291,8 +224,8 @@ protected Object createLogger(Class<?> instanceClass)
     {
         Object logger;
 
-        if (!this.excludedComponentRoleDependencies.contains(Logger.class)
-            && this.componentImplementationClass == instanceClass) {
+        if (!this.mocker.getExcludedComponentRoleDependencies().contains(Logger.class)
+            && this.mocker.getComponentImplementationClass() == instanceClass) {
             logger = mock(Logger.class, instanceClass.getName());
             this.mockLogger = (Logger) logger;
         } else {
@@ -302,90 +235,6 @@ protected Object createLogger(Class<?> instanceClass)
     }
 
     /**
-     * Create mocks of injected dependencies and registers them against the Component Manager.
-     *
-     * @param descriptor the descriptor of the component under test
-     * @throws Exception if an error happened during registration
-     */
-    private void registerMockDependencies(ComponentDescriptor<T> descriptor) throws Exception
-    {
-        Collection<ComponentDependency<?>> dependencyDescriptors = descriptor.getComponentDependencies();
-        for (ComponentDependency<?> dependencyDescriptor : dependencyDescriptors) {
-            Class<?> roleTypeClass = ReflectionUtils.getTypeClass(dependencyDescriptor.getRoleType());
-            // Only register a mock if it isn't:
-            // - Already registered
-            // - An explicit exception specified by the user
-            // - A logger
-            // - A collection of components, we want to keep them as Java collections. Those collections are later
-            // filled by the component manager with available components. Developers can register mocked components
-            // in an override of #setupDependencies().
-            // TODO: Handle multiple roles/hints.
-            if (!this.excludedComponentRoleDependencies.contains(roleTypeClass) && Logger.class != roleTypeClass
-                && !roleTypeClass.isAssignableFrom(List.class) && !roleTypeClass.isAssignableFrom(Map.class)
-                && !hasComponent(dependencyDescriptor.getRoleType(), dependencyDescriptor.getRoleHint())) {
-                DefaultComponentDescriptor cd = new DefaultComponentDescriptor<>();
-
-                cd.setRoleType(dependencyDescriptor.getRoleType());
-                cd.setRoleHint(dependencyDescriptor.getRoleHint());
-
-                Object dependencyMock = mock(roleTypeClass, dependencyDescriptor.getName());
-
-                if (Provider.class == roleTypeClass) {
-                    Type providedType = ReflectionUtils.getLastTypeGenericArgument(dependencyDescriptor.getRoleType());
-                    Class providedClass = ReflectionUtils.getTypeClass(providedType);
-
-                    // If the target is registered or if a list or a map are asked don't mock anything
-                    if (hasComponent(providedType, dependencyDescriptor.getRoleHint())
-                        || providedClass.isAssignableFrom(List.class) || providedClass.isAssignableFrom(Map.class)) {
-                        continue;
-                    }
-
-                    if (providedClass.getAnnotation(Role.class) != null) {
-                        // If the dependency is a Provider for a @Role mock the @Role instead of the Provider
-                        cd.setRoleType(providedType);
-                        dependencyMock = mock(providedClass, dependencyDescriptor.getName());
-                    } else {
-                        // If the dependency is a Provider not targeting a @Role register a mock Provider which provide
-                        // a mock
-                        Provider provider = (Provider) dependencyMock;
-                        when(provider.get()).thenReturn(mock(providedClass, providedType.toString()));
-                    }
-                }
-
-                registerComponent(cd, dependencyMock);
-            }
-        }
-    }
-
-    /**
-     * @return the Component role type extracted from the the component implementation class
-     */
-    private Type findComponentRoleType()
-    {
-        Type type;
-
-        Set<Type> componentRoleTypes = this.loader.findComponentRoleTypes(this.componentImplementationClass);
-        if (this.componentRoleType != null) {
-            if (!componentRoleTypes.contains(this.componentRoleType)) {
-                throw new RuntimeException(
-                    "Specified Component Role ([" + this.componentRoleType + "]) not found in component");
-            } else {
-                type = this.componentRoleType;
-            }
-        } else {
-            if (componentRoleTypes.isEmpty()) {
-                throw new RuntimeException(
-                    String.format("Couldn't find roles for component [%s]", this.componentRoleType));
-            } else if (componentRoleTypes.size() > 1) {
-                throw new RuntimeException("Components with several roles must explicitly specify which role to use.");
-            } else {
-                type = componentRoleTypes.iterator().next();
-            }
-        }
-        return type;
-    }
-
-    /**
      * @return the component which is having its injections being mocked by the {@link MockitoComponentMockingRule} rule
      * @throws ComponentLookupException if the component under test has not been properly registered
      */
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/test/java/org/xwiki/test/junit5/mockito/Component1Role.java b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/test/java/org/xwiki/test/junit5/mockito/Component1Role.java
new file mode 100644
index 0000000..b84d32e
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/test/java/org/xwiki/test/junit5/mockito/Component1Role.java
@@ -0,0 +1,30 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.test.junit5.mockito;
+
+import java.util.List;
+
+import org.xwiki.component.annotation.Role;
+
+@Role
+public interface Component1Role<T>
+{
+    int size(List<T> list);
+}
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/test/java/org/xwiki/test/junit5/mockito/Component2Role.java b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/test/java/org/xwiki/test/junit5/mockito/Component2Role.java
new file mode 100644
index 0000000..716666c
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/test/java/org/xwiki/test/junit5/mockito/Component2Role.java
@@ -0,0 +1,28 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.test.junit5.mockito;
+
+import org.xwiki.component.annotation.Role;
+
+@Role
+public interface Component2Role
+{
+    void whatever2();
+}
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/test/java/org/xwiki/test/junit5/mockito/Component3Impl.java b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/test/java/org/xwiki/test/junit5/mockito/Component3Impl.java
new file mode 100644
index 0000000..501ae99
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/test/java/org/xwiki/test/junit5/mockito/Component3Impl.java
@@ -0,0 +1,35 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.test.junit5.mockito;
+
+import javax.inject.Singleton;
+
+import org.xwiki.component.annotation.Component;
+
+@Component
+@Singleton
+public class Component3Impl implements Component3Role
+{
+    @Override
+    public void whatever3()
+    {
+        // Whatever
+    }
+}
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/test/java/org/xwiki/test/junit5/mockito/Component3Role.java b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/test/java/org/xwiki/test/junit5/mockito/Component3Role.java
new file mode 100644
index 0000000..862c418
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/test/java/org/xwiki/test/junit5/mockito/Component3Role.java
@@ -0,0 +1,28 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.test.junit5.mockito;
+
+import org.xwiki.component.annotation.Role;
+
+@Role
+public interface Component3Role
+{
+    void whatever3();
+}
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/test/java/org/xwiki/test/junit5/mockito/Component4Impl.java b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/test/java/org/xwiki/test/junit5/mockito/Component4Impl.java
new file mode 100644
index 0000000..cd9bb97
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/test/java/org/xwiki/test/junit5/mockito/Component4Impl.java
@@ -0,0 +1,67 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.test.junit5.mockito;
+
+import java.util.List;
+
+import javax.inject.Inject;
+import javax.inject.Singleton;
+
+import org.xwiki.component.annotation.Component;
+
+@Component
+@Singleton
+public class Component4Impl implements Component4Role
+{
+    private List<String> list;
+
+    @Inject
+    private Component1Role<String> component1;
+
+    @Inject
+    private Component2Role component2;
+
+    @Inject
+    private Component3Role component3;
+
+    @Override
+    public int size()
+    {
+        return this.component1.size(this.list);
+    }
+
+    @Override
+    public Component1Role<String> getRole1()
+    {
+        return this.component1;
+    }
+
+    @Override
+    public Component2Role getRole2()
+    {
+        return this.component2;
+    }
+
+    @Override
+    public Component3Role getRole3()
+    {
+        return this.component3;
+    }
+}
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/test/java/org/xwiki/test/junit5/mockito/Component4Role.java b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/test/java/org/xwiki/test/junit5/mockito/Component4Role.java
new file mode 100644
index 0000000..30238ce
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/test/java/org/xwiki/test/junit5/mockito/Component4Role.java
@@ -0,0 +1,34 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.test.junit5.mockito;
+
+import org.xwiki.component.annotation.Role;
+
+@Role
+public interface Component4Role
+{
+    int size();
+
+    Component1Role<String> getRole1();
+
+    Component2Role getRole2();
+
+    Component3Role getRole3();
+}
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/test/java/org/xwiki/test/junit5/mockito/Component5Impl.java b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/test/java/org/xwiki/test/junit5/mockito/Component5Impl.java
new file mode 100644
index 0000000..2b41cae
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/test/java/org/xwiki/test/junit5/mockito/Component5Impl.java
@@ -0,0 +1,41 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.test.junit5.mockito;
+
+import javax.inject.Singleton;
+
+import org.xwiki.component.annotation.Component;
+
+@Component
+@Singleton
+public class Component5Impl implements Component2Role, Component3Role
+{
+    @Override
+    public void whatever2()
+    {
+        // Empty
+    }
+
+    @Override
+    public void whatever3()
+    {
+        // Empty
+    }
+}
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/test/java/org/xwiki/test/junit5/mockito/MockitoComponentManagerExtensionTest.java b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/test/java/org/xwiki/test/junit5/mockito/MockitoComponentManagerExtensionTest.java
new file mode 100644
index 0000000..5b17600
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-component/src/test/java/org/xwiki/test/junit5/mockito/MockitoComponentManagerExtensionTest.java
@@ -0,0 +1,171 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.test.junit5.mockito;
+
+import java.util.List;
+
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.MockingDetails;
+import org.mockito.Mockito;
+import org.xwiki.component.manager.ComponentManager;
+import org.xwiki.component.util.DefaultParameterizedType;
+import org.xwiki.test.annotation.BeforeComponent;
+import org.xwiki.test.annotation.ComponentList;
+import org.xwiki.test.mockito.MockitoComponentManager;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertSame;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+/**
+ * Unit tests for {@link MockitoComponentManagerExtension}.
+ *
+ * @version $Id$
+ * @since 10.3RC1
+ */
+@ComponentTest
+@ComponentList({
+    Component3Impl.class
+})
+public class MockitoComponentManagerExtensionTest
+{
+    @Mock
+    private List<String> list;
+
+    @MockComponent
+    private Component1Role<String> component1;
+
+    @InjectMocks
+    @InjectMockComponents
+    private Component4Impl component4;
+
+    @InjectMockComponents(role = Component2Role.class)
+    private Component5Impl component5Role1;
+
+    @InjectMockComponents(role = Component3Role.class)
+    private Component5Impl component5Role2;
+
+    @InjectComponentManager
+    private MockitoComponentManager componentManager;
+
+    @BeforeComponent
+    public void beforeComponent(MockitoComponentManager componentManager) throws Exception
+    {
+        // Verify that we can pass a MockitoComponentManager in parameter
+        componentManager.registerComponent(Component2Role.class, mock(Component2Role.class, "beforeComponent"));
+
+        // Verify also that any fields annotated with @InjectComponentManager have been injected at this stage
+        assertNotNull(this.componentManager);
+    }
+
+    @BeforeEach
+    public void before(MockitoComponentManager componentManager)
+    {
+        // Verify that we can get a Mockito CM injected
+        assertNotNull(componentManager);
+    }
+
+    @Test
+    public void testMockitoCMAsParameter(MockitoComponentManager componentManager)
+    {
+        // Verify that we can get a Mockito CM injected
+        assertNotNull(componentManager);
+        assertTrue(componentManager instanceof MockitoComponentManager);
+    }
+
+    @Test
+    public void testComponentMangerAsParameter(ComponentManager componentManager)
+    {
+        // Verify that we can get a Mockito CM injected when the type is ComponentManager
+        assertNotNull(componentManager);
+        assertTrue(componentManager instanceof MockitoComponentManager);
+    }
+
+    @Test
+    public void testVariousScenarios() throws Exception
+    {
+        // Verify that a standard mock has been created for the list by Mockito (i.e. for a non-component class)
+        assertNotNull(this.list);
+        when(this.list.size()).thenReturn(2);
+
+        // Verify that a mock component has been created for component1.
+        assertNotNull(this.component1);
+        when(this.component1.size(this.list)).thenReturn(3);
+
+        // Verify that component4 has been injected mocks for its @Inject-annotated fields.
+        assertNotNull(this.component4.getRole2());
+
+        // Verify that the list field has been mocked in component4 thanks to Mockito's @InjectMock annotation
+        assertEquals(3, this.component4.size());
+
+        // Verify that component2 inside component4 is the mock we defined in the @BeforeComponent above (this verifies
+        // that @BeforeComponent are executed before @InjectMockComponents)
+        MockingDetails details = Mockito.mockingDetails(this.component4.getRole2());
+        assertEquals("beforeComponent", details.getMockCreationSettings().getMockName().toString());
+
+        // Verify that component3 is not a mock (i.e. it's the real component impl since it's listed in the
+        // @ComponentList annotation.
+        assertNotNull(this.component4.getRole3());
+        details = Mockito.mockingDetails(this.component4.getRole3());
+        assertFalse(details.isMock());
+
+        // Verify that we also support components that implement several roles
+        assertNotNull(this.component5Role1);
+        assertNotNull(this.component5Role2);
+
+        // Verify that the mock created for:
+        //   @MockComponent
+        //   private Component1Role<String> component1;
+        // Is of the correct generic type. This verifies generics are taken into account.
+        assertEquals(0, this.componentManager.getInstanceList(Component1Role.class).size());
+        assertEquals(1, this.componentManager.getInstanceList(
+            new DefaultParameterizedType(null, Component1Role.class, String.class)).size());
+        assertSame(this.component1, this.component4.getRole1());
+    }
+
+    @Test
+    public void testInjectCM()
+    {
+        assertNotNull(this.componentManager);
+    }
+
+    @Test
+    public void testCMDoesntLeak1(MockitoComponentManager componentManager) throws Exception
+    {
+        // Note: the name of the test is set so that testCMDoesntLeak1() executes before testCMDoesntLeak2(), thus
+        // ensuring that the CM defined in testCMDoesntLeak1() doesn't leak on testCMDoesntLeak2().
+        componentManager.registerMockComponent(Component1Role.class, "testCMDoesntLeak");
+    }
+
+    @Test
+    public void testCMDoesntLeak2(MockitoComponentManager componentManager) throws Exception
+    {
+        // See comment in testCMDoesntLeak1()
+        assertNull(componentManager.getInstanceMap(Component1Role.class).get("testCMDoesntLeak"));
+    }
+}
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-simple/build.gradle b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-simple/build.gradle
index dc96e07..f56e322 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-simple/build.gradle
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-simple/build.gradle
@@ -21,7 +21,8 @@
 // WARNING: NOT WORKING, WORK IN PROGRESS. USE THE MAVEN BUILD WHICH IS THE XWIKI OFFICIAL BUILD TOOL.
 
 dependencies {
-    compile "junit:junit:${junitVersion}"
+    compile "junit:junit:${junit4Version}"
+    compile "org.junit.jupiter:junit-jupiter-api:${junit5Version}"
     compile "org.slf4j:slf4j-api:${slf4jVersion}"
     compile 'ch.qos.logback:logback-classic:1.2.3'
     compile 'commons-io:commons-io:2.5'
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-simple/pom.xml b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-simple/pom.xml
index 2c338eb..50b33d4 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-simple/pom.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-simple/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-tool-test</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-tool-test-simple</artifactId>
   <name>XWiki Commons - Tools - Test Framework - Simple</name>
@@ -33,6 +33,7 @@
   <description>For tests not requiring notion of Components</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.00</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>12</xwiki.pitest.mutationThreshold>
     <!-- Allow throwing 'Throwable', since throwing Throwable is part of the JUnit method signature that we implement! -->
     <checkstyle.suppressions.location>${basedir}/src/main/checkstyle/checkstyle-suppressions.xml</checkstyle.suppressions.location>
   </properties>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-simple/src/main/java/org/xwiki/test/AllLogRule.java b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-simple/src/main/java/org/xwiki/test/AllLogRule.java
index d6efa86..99cdd91 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-simple/src/main/java/org/xwiki/test/AllLogRule.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-simple/src/main/java/org/xwiki/test/AllLogRule.java
@@ -147,7 +147,13 @@ public Statement apply(Statement statement, Description description)
         return new LogStatement(statement);
     }
 
-    private ILoggingEvent getLogEvent(int position)
+    /**
+     * @param position the message number in the list of captured logs
+     * @return the logging event corresponding to the message, allowing to get information such as the level, the
+     *         marker, the formatted string, etc
+     * @since 10.4RC1
+     */
+    public ILoggingEvent getLogEvent(int position)
     {
         List<ILoggingEvent> list = this.listAppender.list;
         if (list.size() <= position) {
@@ -186,6 +192,29 @@ public int size()
         return listAppender.list.size();
     }
 
+    /**
+     * Voluntarily ignore all messages to signify they should not need to be asserted.
+     *
+     * @since 10.4RC1
+     */
+    public void ignoreAllMessages()
+    {
+        for (int i = 0; i < size(); i++) {
+            getLogEvent(i);
+        }
+    }
+
+    /**
+     * Voluntarily ignore a message to signify it should not need to be asserted.
+     *
+     * @param position the message number in the list of captured logs
+     * @since 10.4RC1
+     */
+    public void ignoreMessage(int position)
+    {
+        getLogEvent(position);
+    }
+
     private void initializeLoggers()
     {
         // Reinitialize completely Logback
@@ -205,5 +234,17 @@ private void uninitializeLogger(boolean verify) throws Exception
         context.reset();
         ContextInitializer initializer = new ContextInitializer(context);
         initializer.autoConfig();
+
+        // Verify that all appender list messages have been asserted.
+        if (this.listAppender.list.size() != this.assertedMessages.size()) {
+            StringBuilder builder = new StringBuilder();
+            for (int i = 0; i < this.listAppender.list.size(); i++) {
+                // Has the message been asserted already?
+                if (!this.assertedMessages.contains(i)) {
+                    builder.append(getMessage(i)).append('\n');
+                }
+            }
+            throw new AssertionError(String.format("Following messages must be asserted: [%s]", builder.toString()));
+        }
     }
 }
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-simple/src/main/java/org/xwiki/test/junit5/LogCaptureExtension.java b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-simple/src/main/java/org/xwiki/test/junit5/LogCaptureExtension.java
new file mode 100644
index 0000000..cecaa3f
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-simple/src/main/java/org/xwiki/test/junit5/LogCaptureExtension.java
@@ -0,0 +1,195 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.test.junit5;
+
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import org.junit.jupiter.api.extension.AfterEachCallback;
+import org.junit.jupiter.api.extension.BeforeEachCallback;
+import org.junit.jupiter.api.extension.ExtensionContext;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Marker;
+import org.xwiki.test.LogLevel;
+
+import ch.qos.logback.classic.Logger;
+import ch.qos.logback.classic.LoggerContext;
+import ch.qos.logback.classic.spi.ILoggingEvent;
+import ch.qos.logback.classic.util.ContextInitializer;
+import ch.qos.logback.core.read.ListAppender;
+
+/**
+ * Captures any logging done by code being tested in order for the logging to not leak in the console and to be able
+ * to assert the content of the logging statements.
+ * <p>
+ * Usage:
+ * <ul>
+ *   <li>Must be used with {@code @RegisterExtension} and using a non private variable</li>
+ * </ul>
+ * Example:
+ * <pre>
+ * {@code
+ * &#64;RegisterExtension
+ * LogCaptureExtension logCapture = new LogCaptureExtension(LogLevel.INFO);
+ * }
+ * </pre>
+ *
+ * @version $Id$
+ * @since 10.4RC1
+ */
+public class LogCaptureExtension implements BeforeEachCallback, AfterEachCallback
+{
+    /**
+     * The log output is captured in a Logback ListAppender.
+     */
+    private final ListAppender<ILoggingEvent> listAppender = new ListAppender<>();
+
+    private final Set<Integer> assertedMessages = new HashSet<>();
+
+    private LogLevel level;
+
+    /**
+     * @param level the logging level from which to start capturing logs (for example if {@link LogLevel#INFO} then
+     *              INFO, WARN, ERROR, etc are captured too).
+     */
+    public LogCaptureExtension(LogLevel level)
+    {
+        this.level = level;
+    }
+
+    /**
+     * Captures all logs from severity {@link LogLevel#INFO} and higher (WARN, ERROR, etc).
+     */
+    public LogCaptureExtension()
+    {
+        this.level = LogLevel.INFO;
+    }
+
+    @Override
+    public void beforeEach(ExtensionContext extensionContext) throws Exception
+    {
+        initializeLoggers();
+        this.listAppender.start();
+
+    }
+
+    @Override
+    public void afterEach(ExtensionContext extensionContext) throws Exception
+    {
+        this.listAppender.stop();
+        uninitializeLogger();
+    }
+
+    /**
+     * @param position the message number in the list of captured logs
+     * @return the logging event corresponding to the message, allowing to get information such as the level, the
+     *         marker, the formatted string, etc
+     */
+    public ILoggingEvent getLogEvent(int position)
+    {
+        List<ILoggingEvent> list = this.listAppender.list;
+        if (list.size() <= position) {
+            throw new RuntimeException(String.format("There are only %s messages in the captured logs", list.size()));
+        }
+
+        this.assertedMessages.add(position);
+
+        return list.get(position);
+    }
+
+    /**
+     * @param position the message number in the list of captured logs
+     * @return the message at the specified position
+     */
+    public String getMessage(int position)
+    {
+        return getLogEvent(position).getFormattedMessage();
+    }
+
+    /**
+     * @param position the message number in the list of captured logs
+     * @return the marker at the specified position
+     */
+    public Marker getMarker(int position)
+    {
+        return getLogEvent(position).getMarker();
+    }
+
+    /**
+     * @return the number of log messages that have been captured
+     */
+    public int size()
+    {
+        return listAppender.list.size();
+    }
+
+    /**
+     * Voluntarily ignore all messages to signify they should not need to be asserted.
+     */
+    public void ignoreAllMessages()
+    {
+        for (int i = 0; i < size(); i++) {
+            getLogEvent(i);
+        }
+    }
+
+    /**
+     * Voluntarily ignore a message to signify it should not need to be asserted.
+     *
+     * @param position the message number in the list of captured logs
+     */
+    public void ignoreMessage(int position)
+    {
+        getLogEvent(position);
+    }
+    private void initializeLoggers()
+    {
+        // Reinitialize completely Logback
+        LoggerContext context = (LoggerContext) LoggerFactory.getILoggerFactory();
+        context.reset();
+
+        // Configure the root logger to use our list appender and to log at the level asked.
+        Logger logger = (Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);
+        logger.addAppender(this.listAppender);
+        logger.setLevel(this.level.getLevel());
+    }
+
+    private void uninitializeLogger() throws Exception
+    {
+        // Reinitialize Logback (by reading its config from the logback-test.xml file in the classpath)
+        LoggerContext context = (LoggerContext) LoggerFactory.getILoggerFactory();
+        context.reset();
+        ContextInitializer initializer = new ContextInitializer(context);
+        initializer.autoConfig();
+
+        // Verify that all appender list messages have been asserted.
+        if (this.listAppender.list.size() != this.assertedMessages.size()) {
+            StringBuilder builder = new StringBuilder();
+            for (int i = 0; i < this.listAppender.list.size(); i++) {
+                // Has the message been asserted already?
+                if (!this.assertedMessages.contains(i)) {
+                    builder.append(getMessage(i)).append('\n');
+                }
+            }
+            throw new AssertionError(String.format("Following messages must be asserted: [%s]", builder.toString()));
+        }
+    }
+}
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-simple/src/test/java/org/xwiki/test/junit5/LogCaptureExtensionDebugLevelTest.java b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-simple/src/test/java/org/xwiki/test/junit5/LogCaptureExtensionDebugLevelTest.java
new file mode 100644
index 0000000..a6e67c5
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-simple/src/test/java/org/xwiki/test/junit5/LogCaptureExtensionDebugLevelTest.java
@@ -0,0 +1,50 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.test.junit5;
+
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.RegisterExtension;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.xwiki.test.LogLevel;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+/**
+ * Test {@link LogCaptureExtension} on a statically created SLF4J Logger.
+ *
+ * @version $Id$
+ * @since 8.1M2
+ */
+public class LogCaptureExtensionDebugLevelTest
+{
+    public static final Logger LOGGER = LoggerFactory.getLogger(LogCaptureExtensionDebugLevelTest.class);
+
+    @RegisterExtension
+    LogCaptureExtension logCapture = new LogCaptureExtension(LogLevel.DEBUG);
+
+    @Test
+    public void staticLogger()
+    {
+        LOGGER.debug("test1");
+        LOGGER.trace("test2");
+        assertEquals("test1", logCapture.getMessage(0));
+    }
+}
diff --git a/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-simple/src/test/java/org/xwiki/test/junit5/LogCaptureExtensionStaticTest.java b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-simple/src/test/java/org/xwiki/test/junit5/LogCaptureExtensionStaticTest.java
new file mode 100644
index 0000000..546df61
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-test/xwiki-commons-tool-test-simple/src/test/java/org/xwiki/test/junit5/LogCaptureExtensionStaticTest.java
@@ -0,0 +1,48 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.test.junit5;
+
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.RegisterExtension;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+/**
+ * Test {@link LogCaptureExtension} on a statically created SLF4J Logger.
+ *
+ * @version $Id$
+ * @since 8.1M2
+ */
+public class LogCaptureExtensionStaticTest
+{
+    public static final Logger LOGGER = LoggerFactory.getLogger(LogCaptureExtensionStaticTest.class);
+
+    @RegisterExtension
+    LogCaptureExtension logCapture = new LogCaptureExtension();
+
+    @Test
+    public void staticLogger()
+    {
+        LOGGER.info("test");
+        assertEquals("test", logCapture.getMessage(0));
+    }
+}
diff --git a/xwiki-commons-tools/xwiki-commons-tool-verification-resources/pom.xml b/xwiki-commons-tools/xwiki-commons-tool-verification-resources/pom.xml
index db35e88..784c863 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-verification-resources/pom.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-verification-resources/pom.xml
@@ -25,14 +25,16 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-tools</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-tool-verification-resources</artifactId>
   <name>XWiki Commons - Tools - Verification Resources</name>
   <packaging>jar</packaging>
   <description>XWiki Commons - Tools - Verification Resources (Checkstyle files, etc)</description>
   <properties>
+    <xwiki.checkstyle.skip>true</xwiki.checkstyle.skip>
     <xwiki.jacoco.instructionRatio>0.33</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>39</xwiki.pitest.mutationThreshold>
   </properties>
   <dependencies>
     <dependency>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-verification-resources/src/main/java/org/xwiki/tool/checkstyle/UnstableAnnotationCheck.java b/xwiki-commons-tools/xwiki-commons-tool-verification-resources/src/main/java/org/xwiki/tool/checkstyle/UnstableAnnotationCheck.java
index ba48593..ba7b608 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-verification-resources/src/main/java/org/xwiki/tool/checkstyle/UnstableAnnotationCheck.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-verification-resources/src/main/java/org/xwiki/tool/checkstyle/UnstableAnnotationCheck.java
@@ -32,7 +32,7 @@
 import com.puppycrawl.tools.checkstyle.api.FullIdent;
 import com.puppycrawl.tools.checkstyle.api.TextBlock;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
-import com.puppycrawl.tools.checkstyle.utils.AnnotationUtility;
+import com.puppycrawl.tools.checkstyle.utils.AnnotationUtil;
 
 /**
  * Verify if Unstable annotations should be removed.
@@ -101,27 +101,33 @@ public void visitToken(DetailAST ast)
                 break;
         }
 
-        if (AnnotationUtility.containsAnnotation(ast)) {
-            DetailAST holder = AnnotationUtility.getAnnotationHolder(ast);
+        if (AnnotationUtil.containsAnnotation(ast)) {
+            DetailAST holder = AnnotationUtil.getAnnotationHolder(ast);
             for (DetailAST annotation : findAllTokens(holder, TokenTypes.ANNOTATION)) {
-                String annotationName = annotation.findFirstToken(TokenTypes.IDENT).getText();
-                if (annotationName.equals("Unstable")) {
-                    FileContents contents = getFileContents();
-                    String annotatedElementName = ast.findFirstToken(TokenTypes.IDENT).getText();
-                    // Get the Javadoc before the annotation in order to locate a @Since annotation and to extract
-                    // the XWiki version mentioned there.
-                    List<String> sinceVersions = Collections.emptyList();
-                    TextBlock cmt = contents.getJavadocBefore(ast.getLineNo());
-                    if (cmt != null) {
-                        sinceVersions = extractSinceVersionsFromJavadoc(cmt.getText(), annotation, annotatedElementName);
+                DetailAST detail = annotation.findFirstToken(TokenTypes.IDENT);
+                if (detail != null) {
+                    String annotationName = detail.getText();
+                    if (annotationName.equals("Unstable")) {
+                        FileContents contents = getFileContents();
+                        String annotatedElementName = ast.findFirstToken(TokenTypes.IDENT).getText();
+                        // Get the Javadoc before the annotation in order to locate a @Since annotation and to extract
+                        // the XWiki version mentioned there.
+                        List<String> sinceVersions = Collections.emptyList();
+                        TextBlock cmt = contents.getJavadocBefore(ast.getLineNo());
+                        if (cmt != null) {
+                            sinceVersions =
+                                extractSinceVersionsFromJavadoc(cmt.getText(), annotation, annotatedElementName);
+                        }
+                        if (sinceVersions.isEmpty()) {
+                            log(annotation.getLineNo(), annotation.getColumnNo(),
+                                String.format(
+                                    "There is an @Unstable "
+                                        + "annotation for [%s] but the @since javadoc tag is missing, you must add it!",
+                                    computeElementName(annotatedElementName)));
+                            return;
+                        }
+                        checkSinceVersions(sinceVersions, annotation, annotatedElementName);
                     }
-                    if (sinceVersions.isEmpty()) {
-                        log(annotation.getLineNo(), annotation.getColumnNo(), String.format("There is an @Unstable "
-                            + "annotation for [%s] but the @since javadoc tag is missing, you must add it!",
-                            computeElementName(annotatedElementName)));
-                        return;
-                    }
-                    checkSinceVersions(sinceVersions, annotation, annotatedElementName);
                 }
             }
         }
diff --git a/xwiki-commons-tools/xwiki-commons-tool-verification-resources/src/main/resources/checkstyle.xml b/xwiki-commons-tools/xwiki-commons-tool-verification-resources/src/main/resources/checkstyle.xml
index d4323e1..03f2629 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-verification-resources/src/main/resources/checkstyle.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-verification-resources/src/main/resources/checkstyle.xml
@@ -100,8 +100,8 @@
         ArrayIndexOutOfBoundsException, Exception, RuntimeException, IllegalArgumentException, IllegalStateException, IndexOutOfBoundsException, NullPointerException, Throwable, SecurityException, UnsupportedOperationException,
         List, ArrayList, Deque, Queue, LinkedList, Set, HashSet, SortedSet, TreeSet, Map, HashMap, SortedMap, TreeMap, Collections, Collection, Arrays,
         ConcurrentHashMap, ConcurrentLinkedDeque, ConcurrentLinkedQueue, DelayQueue, FutureTask, LinkedBlockinDeque, LinkedBlockinQueue, Phaser, PriorityBlockingQueue, RejectedExecutionException, SynchronousQueue,
-        Logger, LoggerFactory, StringUtils, IOUtils,
-        Inject, Named, Component, Role, Singleton, Unstable, Override, Deprecated, SafeVarargs, SuppressWarnings"/>
+        Logger, LoggerFactory, StringUtils, FieldUtils, IOUtils,
+        Inject, Named, Component, Role, Singleton, InstantiationStrategy, ComponentInstantiationStrategy, Unstable, Override, Deprecated, SafeVarargs, SuppressWarnings"/>
     </module>
 
     <module name="ClassTypeParameterName"/>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-verification-resources/src/test/java/org/xwiki/tool/checkstyle/UnstableAnnotationCheckTest.java b/xwiki-commons-tools/xwiki-commons-tool-verification-resources/src/test/java/org/xwiki/tool/checkstyle/UnstableAnnotationCheckTest.java
index 2a74166..dd4a833 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-verification-resources/src/test/java/org/xwiki/tool/checkstyle/UnstableAnnotationCheckTest.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-verification-resources/src/test/java/org/xwiki/tool/checkstyle/UnstableAnnotationCheckTest.java
@@ -24,7 +24,7 @@
 
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
-import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;
 
 /**
  * Unit tests for {@link UnstableAnnotationCheck}.
@@ -69,7 +69,7 @@ public void checkWithNoSinceJavadocTagAtMethodLevel() throws Exception
     @Test
     public void checkWithUnstableOkAtClassLevel() throws Exception
     {
-        final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
+        final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;
 
         verify(this.checkConfig, getPath("TestClassWithUnstableOkAtClassLevel.java"), expected);
     }
@@ -77,7 +77,7 @@ public void checkWithUnstableOkAtClassLevel() throws Exception
     @Test
     public void checkWithUnstableOkAtMethodLevel() throws Exception
     {
-        final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
+        final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;
 
         verify(this.checkConfig, getPath("TestClassWithUnstableOkAtMethodLevel.java"), expected);
     }
@@ -109,7 +109,7 @@ public void checkWithUnstableAnnotationShouldBeRemovedMultipleSince() throws Exc
     @Test
     public void checkWithUnstableAnnotationShouldNotBeRemovedMultipleSince() throws Exception
     {
-        final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
+        final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;
 
         verify(this.checkConfig, getPath("TestClassWithUnstableAnnotationShouldNotBeRemovedMultipleSince.java"),
             expected);
@@ -131,7 +131,7 @@ public void checkWithUnstableAnnotationShouldBeRemovedAtMethodLevel() throws Exc
     @Test
     public void checkPackageWithUnstable() throws Exception
     {
-        final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
+        final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;
 
         verify(this.checkConfig, getPath("TestPackageWithUnstable.java"), expected);
     }
@@ -139,7 +139,7 @@ public void checkPackageWithUnstable() throws Exception
     @Test
     public void checkPackageWithOtherAnnotation() throws Exception
     {
-        final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
+        final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;
 
         verify(this.checkConfig, getPath("TestPackageWithOtherAnnotation.java"), expected);
     }
diff --git a/xwiki-commons-tools/xwiki-commons-tool-webjar-handlers/pom.xml b/xwiki-commons-tools/xwiki-commons-tool-webjar-handlers/pom.xml
index 8052727..b5df433 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-webjar-handlers/pom.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-webjar-handlers/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-tools</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-tool-webjar-handlers</artifactId>
   <name>XWiki Commons - Tools - WEBJAR XAR Handlers</name>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/pom.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/pom.xml
index c841c85..7bce8a5 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/pom.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-tools</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-tool-xar</artifactId>
   <name>XWiki Commons - Tools - XAR Tools</name>
@@ -51,6 +51,11 @@
           </execution>
         </executions>
       </plugin>
+      <plugin>
+        <!-- See commons-tools parent pom for why we need to explicitly configure checkstyle -->
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-checkstyle-plugin</artifactId>
+      </plugin>
     </plugins>
   </build>
   <profiles>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-handlers/pom.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-handlers/pom.xml
index 2020f56..6cd9010 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-handlers/pom.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-handlers/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-tool-xar</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-tool-xar-handlers</artifactId>
   <name>XWiki Commons - Tools - XAR Tools - XAR Handlers</name>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/pom.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/pom.xml
index 4cb1704..538aa9c 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/pom.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-tool-xar</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-tool-xar-integration-tests</artifactId>
   <name>XWiki Commons - Tools - XAR Tools - Functional Tests</name>
@@ -47,7 +47,7 @@
     <dependency>
       <groupId>org.apache.maven.shared</groupId>
       <artifactId>maven-verifier</artifactId>
-      <version>1.4</version>
+      <version>1.6</version>
       <scope>test</scope>
     </dependency>
   </dependencies>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/java/org/xwiki/tool/xar/FormatMojoTest.java b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/java/org/xwiki/tool/xar/FormatMojoTest.java
index f7d4e1c..b8aa2d5 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/java/org/xwiki/tool/xar/FormatMojoTest.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/java/org/xwiki/tool/xar/FormatMojoTest.java
@@ -26,7 +26,8 @@
 import org.codehaus.plexus.util.FileUtils;
 import org.junit.Test;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 
 /**
  * Integration tests for the Format Mojo.
@@ -64,6 +65,11 @@ public void formatWhenNoStyle() throws Exception
         expected = FileUtils.fileRead(new File(verifier.getBasedir(), "ExpectedNoStylePage3.fr.xml"));
         assertEquals(expected, content);
 
+        // Test with document dates present
+        content = FileUtils.fileRead(new File(verifier.getBasedir(), "src/main/resources/NoStyle/Page4.xml"));
+        expected = FileUtils.fileRead(new File(verifier.getBasedir(), "ExpectedNoStylePage4.xml"));
+        assertEquals(expected, content);
+
         // Test that technical pages are set as hidden
         content = FileUtils.fileRead(new File(verifier.getBasedir(), "src/main/resources/NoStyle/Translations.xml"));
         expected = FileUtils.fileRead(new File(verifier.getBasedir(), "ExpectedNoStyleTranslations.xml"));
@@ -83,7 +89,7 @@ public void formatWhenPrettyPrinting() throws Exception
     {
         Verifier verifier = createVerifier("/format");
         verifier.addCliOption("-Dincludes=**/Pretty/*.xml");
-
+        verifier.addCliOption("-DformatLicense=true");
         verifier.executeGoal("xar:format");
         verifier.verifyErrorFreeLog();
 
@@ -95,5 +101,15 @@ public void formatWhenPrettyPrinting() throws Exception
         content = FileUtils.fileRead(new File(verifier.getBasedir(), "src/main/resources/Pretty/Page2.xml"));
         expected = FileUtils.fileRead(new File(verifier.getBasedir(), "ExpectedPrettyPage2.xml"));
         assertEquals(expected, content);
+
+        // Test with document dates present
+        content = FileUtils.fileRead(new File(verifier.getBasedir(), "src/main/resources/Pretty/Page3.xml"));
+        expected = FileUtils.fileRead(new File(verifier.getBasedir(), "ExpectedPrettyPage3.xml"));
+        assertEquals(expected, content);
+
+        // Verify the right version of XML is set for XAR 1.3
+        content = FileUtils.fileRead(new File(verifier.getBasedir(), "src/main/resources/Pretty/Page4.xml"));
+        expected = FileUtils.fileRead(new File(verifier.getBasedir(), "ExpectedPrettyPage4.xml"));
+        assertEquals(expected, content);
     }
 }
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/java/org/xwiki/tool/xar/VerifyMojoTest.java b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/java/org/xwiki/tool/xar/VerifyMojoTest.java
index f64f5f4..5394012 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/java/org/xwiki/tool/xar/VerifyMojoTest.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/java/org/xwiki/tool/xar/VerifyMojoTest.java
@@ -24,11 +24,12 @@
 import org.hamcrest.CoreMatchers;
 import org.junit.Test;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.fail;
 
 /**
  * Integration tests for the Verify Mojo.
- * 
+ *
  * @version $Id$
  * @since 4.0M2
  */
@@ -42,11 +43,13 @@ public void executeWithWrongAuthor() throws Exception
     }
 
     @Test
-    public void executeWithWrongAttachmentAuthors() throws Exception
+    public void executeWithWrongAttachmentAuthorsAndMimetypes() throws Exception
     {
-        verifyExecution("/wrongAttachmentAuthors", "Verifying [Space/WebHome.xml]... errors",
-            "- Attachment author must [xwiki:XWiki.Admin] but was []",
-            "- Attachment author must [xwiki:XWiki.Admin] but was [wrong author]");
+        verifyExecution("/wrongAttachmentAuthorsAndMimetypes", "Verifying [Space/WebHome.xml]... errors",
+            "- Attachment author must be [xwiki:XWiki.Admin] but was []",
+            "- Attachment author must be [xwiki:XWiki.Admin] but was [wrong author]",
+            "- Missing mimetype for attachment [applications.png]",
+            "- Missing mimetype for attachment [configuration.png]");
     }
 
     @Test
@@ -111,7 +114,7 @@ public void executeWithWronPageTitle() throws Exception
     {
         verifyExecution("/wrongPageTitle", "Verifying [Space/WebPreferences.xml]... errors",
             "- [WebPreferences.xml] ([Space.WebPreferences]) page must have a title matching regex "
-            + "[\\$services\\.localization\\.render\\('admin.preferences.title'\\)]",
+                + "[\\$services\\.localization\\.render\\('admin.preferences.title'\\)]",
             "There are errors in the XAR XML files!");
     }
 
@@ -127,11 +130,13 @@ public void executeWithMissingLicenseHeader() throws Exception
     @Test
     public void executeContentAndTechnicalPages() throws Exception
     {
+        // @formatter:off
         verifyExecution("/contentAndTechnical",
             "Verifying [Main/EditTranslations.xml]... errors",
             "- Technical documents must be hidden",
             "Verifying [Main/Translations.xml]... errors",
             "- Default Language should have been [en] but was []");
+        // @formatter:on
     }
 
     @Test
@@ -158,6 +163,18 @@ public void executeWithWrongSyntaxForTranslations() throws Exception
             "There are errors in the XAR XML files!");
     }
 
+    @Test
+    public void executeWithWrongVisibilityForTranslations() throws Exception
+    {
+        verifyExecution("/wrongVisibilityForTranslations", "Verifying [Space/UserTranslations.xml]... errors",
+            "- [UserTranslations.xml] ([Space.UserTranslations]) page contains a translation using a wrong "
+                + "visibility [USER]. Consider using a [WIKI] visibility.",
+            "Verifying [Space/GlobalTranslations.xml]... errors",
+            "- [GlobalTranslations.xml] ([Space.GlobalTranslations]) page contains a translation using a wrong "
+                + "visibility [GLOBAL]. Consider using a [WIKI] visibility.",
+            "There are errors in the XAR XML files!");
+    }
+
     private void verifyExecution(Verifier verifier, String... messages) throws Exception
     {
         try {
@@ -175,4 +192,39 @@ private void verifyExecution(String testDirectory, String... messages) throws Ex
     {
         verifyExecution(createVerifier(testDirectory), messages);
     }
+
+    @Test
+    public void executeWithDatesPresent() throws Exception
+    {
+        // @formatter:off
+        verifyExecution("/datesPresent",
+            "Verifying [Space/WebHome.xml]... errors",
+            "- 'date' field is present",
+            "- 'contentUpdateDate' field is present",
+            "- 'creationDate' field is present",
+            "Verifying [Space/Test.xml]... errors",
+            "- 'date' field is present",
+            "- 'contentUpdateDate' field is present",
+            "- 'creationDate' field is present",
+            "There are errors in the XAR XML files!");
+        // @formatter:on
+    }
+
+    @Test
+    public void executeWithSkippedDatesCheck() throws Exception
+    {
+        Verifier verifier = createVerifier("/datesPresent");
+        verifier.addCliOption("-Dxar.dates.skip=true");
+        verifier.executeGoal("install");
+        verifier.verifyErrorFreeLog();
+    }
+
+    @Test
+    public void executeWithSkippedDatesCheckDocument() throws Exception
+    {
+        Verifier verifier = createVerifier("/datesPresent");
+        verifier.addCliOption("-Dxar.dates.skip.documentList=Space.WebHome,Space.Test");
+        verifier.executeGoal("install");
+        verifier.verifyErrorFreeLog();
+    }
 }
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/java/org/xwiki/tool/xar/XARMojoTest.java b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/java/org/xwiki/tool/xar/XARMojoTest.java
index 331caa7..f8ba4c9 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/java/org/xwiki/tool/xar/XARMojoTest.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/java/org/xwiki/tool/xar/XARMojoTest.java
@@ -24,6 +24,7 @@
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Enumeration;
+import java.util.Map;
 
 import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
 import org.apache.commons.compress.archivers.zip.ZipFile;
@@ -38,7 +39,6 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
 /**
@@ -191,6 +191,33 @@ public void transformXML() throws Exception
     }
 
     @Test
+    public void entities() throws Exception
+    {
+        Verifier verifier = createVerifier("/entries");
+        verifier.executeGoals(Arrays.asList("clean", "package"));
+        verifier.verifyErrorFreeLog();
+
+        File tempDir = new File(verifier.getBasedir(), "target/temp");
+        tempDir.mkdirs();
+
+        // Extract the generated XAR so that we verify its content easily
+        File xarFile = new File(verifier.getBasedir(), "target/xwiki-commons-tool-xar-plugin-test-1.0.xar");
+        ZipUnArchiver unarchiver = new ZipUnArchiver(xarFile);
+        unarchiver.enableLogging(new ConsoleLogger(Logger.LEVEL_ERROR, "xar"));
+        unarchiver.setDestDirectory(tempDir);
+        unarchiver.extract();
+
+        File classesDir = new File(verifier.getBasedir(), "target/classes");
+        Map<String, XAREntry> entries = XARMojo.getXarEntriesMapFromXML(new File(classesDir, "package.xml"));
+
+        assertEquals("The newly created xar archive doesn't contain the required documents", 3, entries.size());
+
+        assertEquals("Not the right type", "home", entries.get("Type.home").getType());
+        assertEquals("Not the right type", "configuration", entries.get("Type.configuration").getType());
+        assertEquals("Not the right type", "custom", entries.get("Type.custom").getType());
+    }
+
+    @Test
     public void invalidXml() throws Exception
     {
         Verifier verifier = createVerifier("/invalidXml");
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/allOk/src/main/resources/Main/WebHome.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/allOk/src/main/resources/Main/WebHome.xml
index 6e18969..711f3df 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/allOk/src/main/resources/Main/WebHome.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/allOk/src/main/resources/Main/WebHome.xml
@@ -11,9 +11,6 @@
 <author>xwiki:XWiki.Admin</author>
 <customClass></customClass>
 <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
-<creationDate>1320655345000</creationDate>
-<date>1320656877000</date>
-<contentUpdateDate>1320656877000</contentUpdateDate>
 <version>1.1</version>
 <title></title>
 <template></template>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/allOk/src/main/resources/Space/WebHome.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/allOk/src/main/resources/Space/WebHome.xml
index 2d435aa..f943198 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/allOk/src/main/resources/Space/WebHome.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/allOk/src/main/resources/Space/WebHome.xml
@@ -11,9 +11,6 @@
 <author>xwiki:XWiki.Admin</author>
 <customClass></customClass>
 <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
-<creationDate>1320655345000</creationDate>
-<date>1320656877000</date>
-<contentUpdateDate>1320656877000</contentUpdateDate>
 <version>1.1</version>
 <title></title>
 <template></template>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/datesPresent/pom.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/datesPresent/pom.xml
new file mode 100644
index 0000000..61a13f0
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/datesPresent/pom.xml
@@ -0,0 +1,46 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+-->
+
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>org.xwiki.commons</groupId>
+  <artifactId>xwiki-commons-tool-xar-plugin-test</artifactId>
+  <version>1.0</version>
+  <name>Test for XAR Plugin</name>
+  <packaging>pom</packaging>
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.xwiki.commons</groupId>
+        <artifactId>xwiki-commons-tool-xar-plugin</artifactId>
+        <version>@project.version@</version>
+        <executions>
+          <execution>
+            <goals>
+              <goal>verify</goal>
+            </goals>
+          </execution>
+        </executions>
+      </plugin>
+    </plugins>
+  </build>
+</project>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/datesPresent/src/main/resources/Space/Test.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/datesPresent/src/main/resources/Space/Test.xml
new file mode 100644
index 0000000..353f7f5
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/datesPresent/src/main/resources/Space/Test.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<xwikidoc>
+<web>Space</web>
+<name>Test</name>
+<language></language>
+<defaultLanguage></defaultLanguage>
+<translation>0</translation>
+<parent>Main.WebHome</parent>
+<creator>xwiki:XWiki.Admin</creator>
+<author>xwiki:XWiki.Admin</author>
+<customClass></customClass>
+<contentAuthor>xwiki:XWiki.Admin</contentAuthor>
+<creationDate>1320655345000</creationDate>
+<date>1320656877000</date>
+<contentUpdateDate>1320656877000</contentUpdateDate>
+<version>1.1</version>
+<title></title>
+<template></template>
+<defaultTemplate></defaultTemplate>
+<validationScript></validationScript>
+<comment></comment>
+<minorEdit>false</minorEdit>
+<syntaxId>xwiki/2.0</syntaxId>
+<hidden>false</hidden>
+<content></content>
+</xwikidoc>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/datesPresent/src/main/resources/Space/WebHome.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/datesPresent/src/main/resources/Space/WebHome.xml
new file mode 100644
index 0000000..2d435aa
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/datesPresent/src/main/resources/Space/WebHome.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<xwikidoc>
+<web>Space</web>
+<name>WebHome</name>
+<language></language>
+<defaultLanguage></defaultLanguage>
+<translation>0</translation>
+<parent>Main.WebHome</parent>
+<creator>xwiki:XWiki.Admin</creator>
+<author>xwiki:XWiki.Admin</author>
+<customClass></customClass>
+<contentAuthor>xwiki:XWiki.Admin</contentAuthor>
+<creationDate>1320655345000</creationDate>
+<date>1320656877000</date>
+<contentUpdateDate>1320656877000</contentUpdateDate>
+<version>1.1</version>
+<title></title>
+<template></template>
+<defaultTemplate></defaultTemplate>
+<validationScript></validationScript>
+<comment></comment>
+<minorEdit>false</minorEdit>
+<syntaxId>xwiki/2.0</syntaxId>
+<hidden>false</hidden>
+<content></content>
+</xwikidoc>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/entries/pom.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/entries/pom.xml
new file mode 100644
index 0000000..cd783d7
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/entries/pom.xml
@@ -0,0 +1,62 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+-->
+
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>org.xwiki.commons</groupId>
+  <artifactId>xwiki-commons-tool-xar-plugin-test</artifactId>
+  <version>1.0</version>
+  <name>Test for XAR Plugin</name>
+  <packaging>xar</packaging>
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.xwiki.commons</groupId>
+        <artifactId>xwiki-commons-tool-xar-plugin</artifactId>
+        <version>@project.version@</version>
+        <configuration>
+          <entries>
+            <entry>
+              <document>Type.home</document>
+              <type>home</type>
+            </entry>
+            <entry>
+              <document>Type.configuration</document>
+              <type>configuration</type>
+            </entry>
+            <entry>
+              <document>Type.custom</document>
+              <type>custom</type>
+            </entry>
+          </entries>
+        </configuration>
+      </plugin>
+    </plugins>
+    <extensions>
+      <extension>
+        <groupId>org.xwiki.commons</groupId>
+        <artifactId>xwiki-commons-tool-xar-handlers</artifactId>
+        <version>@project.version@</version>
+      </extension>
+    </extensions>
+  </build>
+</project>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/entries/src/main/resources/Type/configuration.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/entries/src/main/resources/Type/configuration.xml
new file mode 100644
index 0000000..28d8b83
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/entries/src/main/resources/Type/configuration.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<xwikidoc>
+<web>Type</web>
+<name>configuration</name>
+<language></language>
+<defaultLanguage></defaultLanguage>
+<translation>0</translation>
+<parent></parent>
+<creator>xwiki:XWiki.Admin</creator>
+<author>xwiki:XWiki.Admin</author>
+<customClass></customClass>
+<contentAuthor>xwiki:XWiki.Admin</contentAuthor>
+<creationDate>1320655345000</creationDate>
+<date>1320656877000</date>
+<contentUpdateDate>1320656877000</contentUpdateDate>
+<version>1.1</version>
+<title></title>
+<template></template>
+<defaultTemplate></defaultTemplate>
+<validationScript></validationScript>
+<comment></comment>
+<minorEdit>false</minorEdit>
+<syntaxId>xwiki/2.0</syntaxId>
+<hidden>false</hidden>
+<content></content>
+</xwikidoc>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/entries/src/main/resources/Type/custom.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/entries/src/main/resources/Type/custom.xml
new file mode 100644
index 0000000..c9ec2f0
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/entries/src/main/resources/Type/custom.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<xwikidoc>
+<web>Type</web>
+<name>custom</name>
+<language></language>
+<defaultLanguage></defaultLanguage>
+<translation>0</translation>
+<parent></parent>
+<creator>xwiki:XWiki.Admin</creator>
+<author>xwiki:XWiki.Admin</author>
+<customClass></customClass>
+<contentAuthor>xwiki:XWiki.Admin</contentAuthor>
+<creationDate>1320655345000</creationDate>
+<date>1320656877000</date>
+<contentUpdateDate>1320656877000</contentUpdateDate>
+<version>1.1</version>
+<title></title>
+<template></template>
+<defaultTemplate></defaultTemplate>
+<validationScript></validationScript>
+<comment></comment>
+<minorEdit>false</minorEdit>
+<syntaxId>xwiki/2.0</syntaxId>
+<hidden>false</hidden>
+<content></content>
+</xwikidoc>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/entries/src/main/resources/Type/home.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/entries/src/main/resources/Type/home.xml
new file mode 100644
index 0000000..1eaf37a
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/entries/src/main/resources/Type/home.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<xwikidoc>
+<web>Type</web>
+<name>home</name>
+<language></language>
+<defaultLanguage></defaultLanguage>
+<translation>0</translation>
+<parent></parent>
+<creator>xwiki:XWiki.Admin</creator>
+<author>xwiki:XWiki.Admin</author>
+<customClass></customClass>
+<contentAuthor>xwiki:XWiki.Admin</contentAuthor>
+<creationDate>1320655345000</creationDate>
+<date>1320656877000</date>
+<contentUpdateDate>1320656877000</contentUpdateDate>
+<version>1.1</version>
+<title></title>
+<template></template>
+<defaultTemplate></defaultTemplate>
+<validationScript></validationScript>
+<comment></comment>
+<minorEdit>false</minorEdit>
+<syntaxId>xwiki/2.0</syntaxId>
+<hidden>false</hidden>
+<content></content>
+</xwikidoc>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedNoStylePage1.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedNoStylePage1.xml
index 32e2b90..63600a9 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedNoStylePage1.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedNoStylePage1.xml
@@ -36,9 +36,6 @@
 <author>xwiki:XWiki.Admin</author>
 <customClass/>
 <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
-<creationDate>1320655345000</creationDate>
-<date>1320656877000</date>
-<contentUpdateDate>1320656877000</contentUpdateDate>
 <version>1.1</version>
 <title/>
 <template/>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedNoStylePage2.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedNoStylePage2.xml
index 3e258be..545e4c1 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedNoStylePage2.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedNoStylePage2.xml
@@ -29,9 +29,6 @@
 <author>xwiki:XWiki.Admin</author>
 <customClass/>
 <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
-<creationDate>1320655345000</creationDate>
-<date>1320656877000</date>
-<contentUpdateDate>1320656877000</contentUpdateDate>
 <version>1.1</version>
 <title/>
 <template/>
@@ -46,8 +43,8 @@
 <!-- Also verify that attachment authors are modified when not correct -->
 <attachment>
 <filename>applications.png</filename>
+<mimetype>image/png</mimetype>
 <author>xwiki:XWiki.Admin</author>
-<date>1296854749000</date>
 <version>1.1</version>
 <comment/>
 <content></content>
@@ -55,8 +52,8 @@
 </attachment>
 <attachment>
 <filename>configuration.png</filename>
+<mimetype>image/png</mimetype>
 <author>xwiki:XWiki.Admin</author>
-<date>1299688703000</date>
 <version>1.1</version>
 <comment/>
 <content></content>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedNoStylePage3.fr.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedNoStylePage3.fr.xml
index a504e16..75d06e5 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedNoStylePage3.fr.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedNoStylePage3.fr.xml
@@ -29,9 +29,6 @@
 <author>xwiki:XWiki.Admin</author>
 <customClass/>
 <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
-<creationDate>1320655345000</creationDate>
-<date>1320656877000</date>
-<contentUpdateDate>1320656877000</contentUpdateDate>
 <version>1.1</version>
 <title/>
 <template/>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedNoStylePage3.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedNoStylePage3.xml
index a504e16..75d06e5 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedNoStylePage3.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedNoStylePage3.xml
@@ -29,9 +29,6 @@
 <author>xwiki:XWiki.Admin</author>
 <customClass/>
 <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
-<creationDate>1320655345000</creationDate>
-<date>1320656877000</date>
-<contentUpdateDate>1320656877000</contentUpdateDate>
 <version>1.1</version>
 <title/>
 <template/>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedNoStylePage4.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedNoStylePage4.xml
new file mode 100644
index 0000000..d5c56f1
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedNoStylePage4.xml
@@ -0,0 +1,68 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+-->
+<xwikidoc>
+  <!-- Verify that it works when already indented -->
+  <web>NoStyle</web>
+  <tag1>
+    <tag2>whatever</tag2>
+    <content>line 1
+line2
+    </content>
+  </tag1>
+<name>Page1</name>
+<language/>
+<defaultLanguage/>
+<translation>0</translation>
+<parent>Main.WebHome</parent>
+<creator>xwiki:XWiki.Admin</creator>
+<author>xwiki:XWiki.Admin</author>
+<customClass/>
+<contentAuthor>xwiki:XWiki.Admin</contentAuthor>
+<!-- The following 3 dates should be removed. -->
+
+
+
+<version>1.1</version>
+<title/>
+<template/>
+<defaultTemplate/>
+<validationScript/>
+<comment/>
+<minorEdit>false</minorEdit>
+<syntaxId>xwiki/2.0</syntaxId>
+<hidden>false</hidden>
+<content>line 1
+line 2
+  line with unicode chars: Вики функционирует
+line 3
+</content>
+<!-- Also verify that attachment dates are detected, when present -->
+<attachment>
+<filename>applications.png</filename>
+<mimetype>image/png</mimetype>
+<author>xwiki:XWiki.Admin</author>
+
+<version>1.1</version>
+<comment/>
+<content></content>
+<filesize>7358</filesize>
+</attachment>
+</xwikidoc>
\ No newline at end of file
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedNoStyleTranslations.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedNoStyleTranslations.xml
index c943243..fd69063 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedNoStyleTranslations.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedNoStyleTranslations.xml
@@ -29,9 +29,6 @@
 <author>xwiki:XWiki.Admin</author>
 <customClass/>
 <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
-<creationDate>1320655345000</creationDate>
-<date>1320656877000</date>
-<contentUpdateDate>1320656877000</contentUpdateDate>
 <version>1.1</version>
 <title/>
 <template/>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedPrettyPage1.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedPrettyPage1.xml
index 0efbbfe..fe306e0 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedPrettyPage1.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedPrettyPage1.xml
@@ -1,5 +1,25 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
+<!--
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+-->
+
 <xwikidoc>
   <!-- Verify that it works when already indented -->
   <web>Pretty</web>
@@ -18,9 +38,6 @@
   <author>xwiki:XWiki.Admin</author>
   <customClass/>
   <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
-  <creationDate>1320655345000</creationDate>
-  <date>1320656877000</date>
-  <contentUpdateDate>1320656877000</contentUpdateDate>
   <version>1.1</version>
   <title/>
   <template/>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedPrettyPage2.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedPrettyPage2.xml
index 73cac68..788b18d 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedPrettyPage2.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedPrettyPage2.xml
@@ -31,9 +31,6 @@
   <author>xwiki:XWiki.Admin</author>
   <customClass/>
   <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
-  <creationDate>1320655345000</creationDate>
-  <date>1320656877000</date>
-  <contentUpdateDate>1320656877000</contentUpdateDate>
   <version>1.1</version>
   <title/>
   <template/>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedPrettyPage3.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedPrettyPage3.xml
new file mode 100644
index 0000000..2cded1a
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedPrettyPage3.xml
@@ -0,0 +1,66 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+-->
+
+<xwikidoc>
+  <!-- Verify that it works when already indented -->
+  <web>Pretty</web>
+  <tag1>
+    <tag2>whatever</tag2>
+    <content>line 1
+line2
+    </content>
+  </tag1>
+  <name>Page1</name>
+  <language/>
+  <defaultLanguage/>
+  <translation>0</translation>
+  <parent>Main.WebHome</parent>
+  <creator>xwiki:XWiki.Admin</creator>
+  <author>xwiki:XWiki.Admin</author>
+  <customClass/>
+  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
+  <!-- The following 3 dates should be removed. -->
+  <version>1.1</version>
+  <title/>
+  <template/>
+  <defaultTemplate/>
+  <validationScript/>
+  <comment/>
+  <minorEdit>false</minorEdit>
+  <syntaxId>xwiki/2.0</syntaxId>
+  <hidden>false</hidden>
+  <content>line 1
+line 2
+  line with unicode chars: Вики функционирует
+line 3
+</content>
+  <!-- Also verify that attachment dates are detected, when present -->
+  <attachment>
+    <filename>applications.png</filename>
+    <mimetype>image/png</mimetype>
+    <author>xwiki:XWiki.Admin</author>
+    <version>1.1</version>
+    <comment/>
+    <content></content>
+    <filesize>7358</filesize>
+  </attachment>
+</xwikidoc>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedPrettyPage4.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedPrettyPage4.xml
new file mode 100644
index 0000000..1dc85db
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/ExpectedPrettyPage4.xml
@@ -0,0 +1,55 @@
+<?xml version="1.1" encoding="UTF-8"?>
+
+<!--
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+-->
+
+<xwikidoc version="1.3">
+  <!-- Verify that it works when already indented -->
+  <web>Pretty</web>
+  <tag1>
+    <tag2>whatever</tag2>
+    <content>line 1
+line2
+    </content>
+  </tag1>
+  <name>Page1</name>
+  <language/>
+  <defaultLanguage/>
+  <translation>0</translation>
+  <parent>Main.WebHome</parent>
+  <creator>xwiki:XWiki.Admin</creator>
+  <author>xwiki:XWiki.Admin</author>
+  <customClass/>
+  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
+  <version>1.1</version>
+  <title/>
+  <template/>
+  <defaultTemplate/>
+  <validationScript/>
+  <comment/>
+  <minorEdit>false</minorEdit>
+  <syntaxId>xwiki/2.0</syntaxId>
+  <hidden>false</hidden>
+  <content>line 1
+line 2
+  line with unicode chars: Вики функционирует
+line 3
+</content>
+</xwikidoc>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/NoStyle/Page1.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/NoStyle/Page1.xml
index 9700245..86ac222 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/NoStyle/Page1.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/NoStyle/Page1.xml
@@ -18,9 +18,6 @@
 <author></author>
 <customClass></customClass>
 <contentAuthor></contentAuthor>
-<creationDate>1320655345000</creationDate>
-<date>1320656877000</date>
-<contentUpdateDate>1320656877000</contentUpdateDate>
 <version></version>
 <title></title>
 <template></template>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/NoStyle/Page2.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/NoStyle/Page2.xml
index 143904a..50867f5 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/NoStyle/Page2.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/NoStyle/Page2.xml
@@ -30,9 +30,6 @@
 <author></author>
 <customClass></customClass>
 <contentAuthor></contentAuthor>
-<creationDate>1320655345000</creationDate>
-<date>1320656877000</date>
-<contentUpdateDate>1320656877000</contentUpdateDate>
 <version></version>
 <title></title>
 <template></template>
@@ -47,8 +44,8 @@
 <!-- Also verify that attachment authors are modified when not correct -->
 <attachment>
 <filename>applications.png</filename>
+<mimetype>image/png</mimetype>
 <author></author>
-<date>1296854749000</date>
 <version>1.1</version>
 <comment/>
 <content></content>
@@ -56,8 +53,8 @@
 </attachment>
 <attachment>
 <filename>configuration.png</filename>
+<mimetype>image/png</mimetype>
 <author>wrong author</author>
-<date>1299688703000</date>
 <version>1.1</version>
 <comment/>
 <content></content>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/NoStyle/Page3.fr.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/NoStyle/Page3.fr.xml
index 778cc13..c258c6c 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/NoStyle/Page3.fr.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/NoStyle/Page3.fr.xml
@@ -30,9 +30,6 @@
 <author></author>
 <customClass></customClass>
 <contentAuthor></contentAuthor>
-<creationDate>1320655345000</creationDate>
-<date>1320656877000</date>
-<contentUpdateDate>1320656877000</contentUpdateDate>
 <version></version>
 <title></title>
 <template></template>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/NoStyle/Page3.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/NoStyle/Page3.xml
index 778cc13..c258c6c 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/NoStyle/Page3.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/NoStyle/Page3.xml
@@ -30,9 +30,6 @@
 <author></author>
 <customClass></customClass>
 <contentAuthor></contentAuthor>
-<creationDate>1320655345000</creationDate>
-<date>1320656877000</date>
-<contentUpdateDate>1320656877000</contentUpdateDate>
 <version></version>
 <title></title>
 <template></template>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/NoStyle/Page4.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/NoStyle/Page4.xml
new file mode 100644
index 0000000..72c5b56
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/NoStyle/Page4.xml
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<xwikidoc>
+  <!-- Verify that it works when already indented -->
+  <web>NoStyle</web>
+  <tag1>
+    <tag2>whatever</tag2>
+    <content>line 1
+line2
+    </content>
+  </tag1>
+<name>Page1</name>
+<language></language>
+<defaultLanguage>en</defaultLanguage>
+<translation>0</translation>
+<parent>Main.WebHome</parent>
+<creator></creator>
+<author></author>
+<customClass></customClass>
+<contentAuthor></contentAuthor>
+<!-- The following 3 dates should be removed. -->
+<creationDate>1320655345000</creationDate>
+<date>1320656877000</date>
+<contentUpdateDate>1320656877000</contentUpdateDate>
+<version></version>
+<title></title>
+<template></template>
+<defaultTemplate></defaultTemplate>
+<validationScript></validationScript>
+<comment>comment</comment>
+<minorEdit>true</minorEdit>
+<syntaxId>xwiki/2.0</syntaxId>
+<hidden>false</hidden>
+<content>line 1
+line 2
+  line with unicode chars: Вики функционирует
+line 3
+</content>
+<!-- Also verify that attachment dates are detected, when present -->
+<attachment>
+<filename>applications.png</filename>
+<mimetype>image/png</mimetype>
+<author>xwiki:XWiki.Admin</author>
+<date>1296854749000</date>
+<version>1.1</version>
+<comment/>
+<content></content>
+<filesize>7358</filesize>
+</attachment>
+</xwikidoc>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/NoStyle/Translations.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/NoStyle/Translations.xml
index 6ddf60e..4507415 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/NoStyle/Translations.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/NoStyle/Translations.xml
@@ -30,9 +30,6 @@
 <author></author>
 <customClass></customClass>
 <contentAuthor></contentAuthor>
-<creationDate>1320655345000</creationDate>
-<date>1320656877000</date>
-<contentUpdateDate>1320656877000</contentUpdateDate>
 <version></version>
 <title></title>
 <template></template>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/Pretty/Page1.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/Pretty/Page1.xml
index 2fa598a..5be5849 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/Pretty/Page1.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/Pretty/Page1.xml
@@ -18,9 +18,6 @@
 <author></author>
 <customClass></customClass>
 <contentAuthor></contentAuthor>
-<creationDate>1320655345000</creationDate>
-<date>1320656877000</date>
-<contentUpdateDate>1320656877000</contentUpdateDate>
 <version></version>
 <title></title>
 <template></template>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/Pretty/Page2.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/Pretty/Page2.xml
index 6169c32..4751943 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/Pretty/Page2.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/Pretty/Page2.xml
@@ -30,9 +30,6 @@
 <author></author>
 <customClass></customClass>
 <contentAuthor></contentAuthor>
-<creationDate>1320655345000</creationDate>
-<date>1320656877000</date>
-<contentUpdateDate>1320656877000</contentUpdateDate>
 <version></version>
 <title></title>
 <template></template>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/Pretty/Page3.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/Pretty/Page3.xml
new file mode 100644
index 0000000..d3dbfa5
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/Pretty/Page3.xml
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<xwikidoc>
+  <!-- Verify that it works when already indented -->
+  <web>Pretty</web>
+  <tag1>
+    <tag2>whatever</tag2>
+    <content>line 1
+line2
+    </content>
+  </tag1>
+<name>Page1</name>
+<language></language>
+<defaultLanguage>en</defaultLanguage>
+<translation>0</translation>
+<parent>Main.WebHome</parent>
+<creator></creator>
+<author></author>
+<customClass></customClass>
+<contentAuthor></contentAuthor>
+<!-- The following 3 dates should be removed. -->
+<creationDate>1320655345000</creationDate>
+<date>1320656877000</date>
+<contentUpdateDate>1320656877000</contentUpdateDate>
+<version></version>
+<title></title>
+<template></template>
+<defaultTemplate></defaultTemplate>
+<validationScript></validationScript>
+<comment>comment</comment>
+<minorEdit>true</minorEdit>
+<syntaxId>xwiki/2.0</syntaxId>
+<hidden>false</hidden>
+<content>line 1
+line 2
+  line with unicode chars: Вики функционирует
+line 3
+</content>
+<!-- Also verify that attachment dates are detected, when present -->
+<attachment>
+<filename>applications.png</filename>
+<mimetype>image/png</mimetype>
+<author>xwiki:XWiki.Admin</author>
+<date>1296854749000</date>
+<version>1.1</version>
+<comment/>
+<content></content>
+<filesize>7358</filesize>
+</attachment>
+</xwikidoc>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/Pretty/Page4.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/Pretty/Page4.xml
new file mode 100644
index 0000000..30c0512
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/format/src/main/resources/Pretty/Page4.xml
@@ -0,0 +1,38 @@
+<?xml version="1.1" encoding="UTF-8"?>
+
+<xwikidoc version="1.3">
+  <!-- Verify that it works when already indented -->
+  <web>Pretty</web>
+  <tag1>
+    <tag2>whatever</tag2>
+    <content>line 1
+line2
+    </content>
+  </tag1>
+<name>Page1</name>
+<language></language>
+<defaultLanguage>en</defaultLanguage>
+<translation>0</translation>
+<parent>Main.WebHome</parent>
+<creator></creator>
+<author></author>
+<customClass></customClass>
+<contentAuthor></contentAuthor>
+<creationDate>1320655345000</creationDate>
+<date>1320656877000</date>
+<contentUpdateDate>1320656877000</contentUpdateDate>
+<version></version>
+<title></title>
+<template></template>
+<defaultTemplate></defaultTemplate>
+<validationScript></validationScript>
+<comment>comment</comment>
+<minorEdit>true</minorEdit>
+<syntaxId>xwiki/2.0</syntaxId>
+<hidden>false</hidden>
+<content>line 1
+line 2
+  line with unicode chars: Вики функционирует
+line 3
+</content>
+</xwikidoc>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/missingLicense/src/main/resources/Space/WebHome.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/missingLicense/src/main/resources/Space/WebHome.xml
index 2d435aa..f943198 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/missingLicense/src/main/resources/Space/WebHome.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/missingLicense/src/main/resources/Space/WebHome.xml
@@ -11,9 +11,6 @@
 <author>xwiki:XWiki.Admin</author>
 <customClass></customClass>
 <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
-<creationDate>1320655345000</creationDate>
-<date>1320656877000</date>
-<contentUpdateDate>1320656877000</contentUpdateDate>
 <version>1.1</version>
 <title></title>
 <template></template>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/nestedSpaces/src/main/resources/1/2/page.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/nestedSpaces/src/main/resources/1/2/page.xml
index 1c8d527..ab08fd1 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/nestedSpaces/src/main/resources/1/2/page.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/nestedSpaces/src/main/resources/1/2/page.xml
@@ -8,12 +8,9 @@
   <translation>0</translation>
   <parent>Main.WebHome</parent>
   <creator>xwiki:XWiki.Admin</creator>
-  <creationDate>1297952360000</creationDate>
   <author>xwiki:XWiki.Admin</author>
   <customClass/>
   <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
-  <date>1297952371000</date>
-  <contentUpdateDate>1297952371000</contentUpdateDate>
   <version>1.1</version>
   <title/>
   <defaultTemplate/>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/wrongAttachmentAuthors/pom.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/wrongAttachmentAuthors/pom.xml
deleted file mode 100644
index 61a13f0..0000000
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/wrongAttachmentAuthors/pom.xml
+++ /dev/null
@@ -1,46 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<!--
- * See the NOTICE file distributed with this work for additional
- * information regarding copyright ownership.
- *
- * This is free software; you can redistribute it and/or modify it
- * under the terms of the GNU Lesser General Public License as
- * published by the Free Software Foundation; either version 2.1 of
- * the License, or (at your option) any later version.
- *
- * This software is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this software; if not, write to the Free
- * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
- * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
--->
-
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <groupId>org.xwiki.commons</groupId>
-  <artifactId>xwiki-commons-tool-xar-plugin-test</artifactId>
-  <version>1.0</version>
-  <name>Test for XAR Plugin</name>
-  <packaging>pom</packaging>
-  <build>
-    <plugins>
-      <plugin>
-        <groupId>org.xwiki.commons</groupId>
-        <artifactId>xwiki-commons-tool-xar-plugin</artifactId>
-        <version>@project.version@</version>
-        <executions>
-          <execution>
-            <goals>
-              <goal>verify</goal>
-            </goals>
-          </execution>
-        </executions>
-      </plugin>
-    </plugins>
-  </build>
-</project>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/wrongAttachmentAuthors/src/main/resources/Space/WebHome.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/wrongAttachmentAuthors/src/main/resources/Space/WebHome.xml
deleted file mode 100644
index d3a807b..0000000
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/wrongAttachmentAuthors/src/main/resources/Space/WebHome.xml
+++ /dev/null
@@ -1,45 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<xwikidoc>
-<web>Space</web>
-<name>WebHome</name>
-<language></language>
-<defaultLanguage></defaultLanguage>
-<translation>0</translation>
-<parent>Main.WebHome</parent>
-<creator>xwiki:XWiki.Admin</creator>
-<author>xwiki:XWiki.Admin</author>
-<customClass></customClass>
-<contentAuthor>xwiki:XWiki.Admin</contentAuthor>
-<creationDate>1320655345000</creationDate>
-<date>1320656877000</date>
-<contentUpdateDate>1320656877000</contentUpdateDate>
-<version>1.1</version>
-<title></title>
-<template></template>
-<defaultTemplate></defaultTemplate>
-<validationScript></validationScript>
-<comment></comment>
-<minorEdit>false</minorEdit>
-<syntaxId>xwiki/2.0</syntaxId>
-<hidden>false</hidden>
-<content></content>
-<attachment>
-<filename>applications.png</filename>
-<author></author>
-<date>1296854749000</date>
-<version>1.1</version>
-<comment/>
-<content></content>
-<filesize>7358</filesize>
-</attachment>
-<attachment>
-<filename>configuration.png</filename>
-<author>wrong author</author>
-<date>1299688703000</date>
-<version>1.1</version>
-<comment/>
-<content></content>
-<filesize>9805</filesize>
-</attachment>
-</xwikidoc>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/wrongAttachmentAuthorsAndMimetypes/pom.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/wrongAttachmentAuthorsAndMimetypes/pom.xml
new file mode 100644
index 0000000..61a13f0
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/wrongAttachmentAuthorsAndMimetypes/pom.xml
@@ -0,0 +1,46 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+-->
+
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>org.xwiki.commons</groupId>
+  <artifactId>xwiki-commons-tool-xar-plugin-test</artifactId>
+  <version>1.0</version>
+  <name>Test for XAR Plugin</name>
+  <packaging>pom</packaging>
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.xwiki.commons</groupId>
+        <artifactId>xwiki-commons-tool-xar-plugin</artifactId>
+        <version>@project.version@</version>
+        <executions>
+          <execution>
+            <goals>
+              <goal>verify</goal>
+            </goals>
+          </execution>
+        </executions>
+      </plugin>
+    </plugins>
+  </build>
+</project>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/wrongAttachmentAuthorsAndMimetypes/src/main/resources/Space/WebHome.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/wrongAttachmentAuthorsAndMimetypes/src/main/resources/Space/WebHome.xml
new file mode 100644
index 0000000..d3a807b
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/wrongAttachmentAuthorsAndMimetypes/src/main/resources/Space/WebHome.xml
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<xwikidoc>
+<web>Space</web>
+<name>WebHome</name>
+<language></language>
+<defaultLanguage></defaultLanguage>
+<translation>0</translation>
+<parent>Main.WebHome</parent>
+<creator>xwiki:XWiki.Admin</creator>
+<author>xwiki:XWiki.Admin</author>
+<customClass></customClass>
+<contentAuthor>xwiki:XWiki.Admin</contentAuthor>
+<creationDate>1320655345000</creationDate>
+<date>1320656877000</date>
+<contentUpdateDate>1320656877000</contentUpdateDate>
+<version>1.1</version>
+<title></title>
+<template></template>
+<defaultTemplate></defaultTemplate>
+<validationScript></validationScript>
+<comment></comment>
+<minorEdit>false</minorEdit>
+<syntaxId>xwiki/2.0</syntaxId>
+<hidden>false</hidden>
+<content></content>
+<attachment>
+<filename>applications.png</filename>
+<author></author>
+<date>1296854749000</date>
+<version>1.1</version>
+<comment/>
+<content>iVBORw0KGgoAAAANSUhEUgAAAH0AAABVCAYAAABkf+t+AAAchUlEQVR4Xu2da5BlV3men7X25exz6+5zunumu0eauzVCEiPBJEYIRJEyd8tACqNcCIgkRSUhmPyIkrKdYEsQsEmCoVImGFGUAnJhbEy4IyA2sYpIYLAkRmg00kgjjeam6Zm+3845+7JWdq9adar3rj46dJ+e7hHMq/q091l795yzz3O+b33rW/vi8kuny2pD//M//yKdVCqV+Pa37+VTn/oUv6i6447f5+DBg4RhCIAQgl6ktc6s2+XK9QAoIygLREkIUZdS1tJlzXGc/nR9WxRFP6hUKn/14IMPcuedHyRJkp4+iz0mXC5rQ2GCDrSmBCyDrKTWL6y5rjvkOO6g48jBdL3P87x6uhxIrd/3/Wpqy22VdFlA4xx78thHZ2dn/+rLX/7fBvgGe/plRVFkPCmOY6xKQBEoCyGWbSC1ZQ+sO44zmFptebkMLAVVW4aXLpfh9aVWSdeXrZCa9FwP13Nxl5eug+M4SCmRQpol1gMRILR5SaI0jx55dODDH/4IR44cAbikoAsunjQ9SAgh6/W6AQeUxsbGKtVqtR+opcv6vn37ahZi/dprrx1I9x2QUg6k0Gqe5y97XNkA9NxleCKFRrokBWwshZeaRCAQUiKEMGaE9X5tIwFmmWlXSpGkZoRpa6tYLHH48CM1C1xs5PflrjGs5UELY93ha2sAaq3sAG9wsF4SQhrvGx4erqSAakKIerEY9O/f/yv1FExtGd6OHVf0Dw4O1pZfl8uV2ujoaMn3vbLv+eUUdCEoBqRADTwLznhfFEYGgpDW+9qygLSFlYOnEoVhSJw73DxHDdCpPb8gjFvs3r1r+RjRWsvu4NHW2uu9QDfAPc/LQ7RLRHevxLPv5aWwSq7rmj5vYGCgvG3b8KAQcjks9u/du3cgCILlfq6Wtvdv3769lsKqp6D6RkZGS4WCX1z2vlR+mlxaeNbjpINMl1YWHCZk58FZI4pCwjDrjXlwOtuYp4busq0TWCHARAZAW69fub8QsPydaK1doCt0u11ZDsqa7gC9e7LSaDS44YYbGBoaYmJiQqSe1ieECIAq0Nff35fyq9WlFH1SOv07doz1L3tZCmS5vX9sbLRu+jq/0Ldt27ZiKY1dnu8VlxcpQDzb3xl41uybgw2ZKbzMZwrDKLXQAiTnhd3BQZ5CB3YZ6TVu6+zJcRIThSHNVojveVQq5fYxoA1wwjCsp9oLxICkczeWzMzMzCZJEgPWIAO+A/QdSqkdQE1Kafq2FMByZjmYLusp6MG77757IAxbAymo4bR/9LSmCBRd13FTrYjGGiltfyeEBbESnrYgNEpps4zjOLWo3a51G/DGd/8a9Dr/rc5g1/CjMdATojgxHq5M1InafT1AFEfLjrb33nu/fb8Ft2oE8VxPnDl7ZuK229799unp6XHAyYX4ztBTaP/2qquu+p00pNqw2fa85W2ZceuxY09w1VUH+MWTDfXr2d49CuQXNvGzXYvSeaAmEU01tGr0sA2O6yId6SVJ0g8sAC0gsaawXrgqdCHEZBqLGR7eRicppWg2m+ZX2U3WW9cnrdG9Q+oOo/vnzUPrDrzHH0NurWt+4MMyj0RrXQXKGBECESCet0+P4/hCIxVQ7AxRG/Ba9wB8M2Dn97uEvLt7Mqi7wc632OyeEhBY2C4gu2bvSqmpVqs13xm6MKG+4PtIKboM63qA3eu++QSuB5jrhq0B1u/ZGqArbJ09Dq19wF8BXBjrAn02DMNF8kKztNTk3Pg4S80Gk1PT+I7o6NnzSxeQ0kMA2kJyHA+BWD0ikB/85SVYjYDWGiFASJHfB73qKFKsgJV9M037NWJNYT7XYwq7QYMWwr7Pim2029CZY7Yrbb46j8C2ChzZ/i5pvxfaAu4+tMtDn0mhL+RBCiE4dvw4n/zMZ5FS0mg2eduvv2HVYv7CwgKBP8C6JDZ1nxesGq15XFmwsEF3PirRFTowH0XR7GphOigU8Gz1Sill4K+2n9aKi6vLUskiWhTIuHoPtfelMAynWUXFYtEMDWgXQNhSXZbOrur1Q1+MomhGKY2UIuPFxaCAI6UpoGy1LuNWq3BfP/RGCnVaqQQpXVbKFmkuBeiXpa1hV9fo6vnijIrjZDoFi+tmoUtpoBvv33pdhq57dPUMXaWSqdW82bWe3lWay2oPJ8XFYp53dYB1ezop8MnVoDuONOC7Obre/C/2koWnlMqdVEF+iLvO99f0xD0PXSk1GUYhQGZqU7Y9XXeskPUOYOO/2LwMALs9SRKklMbWBK+7Ou+/9u8pM0TOFGQ2aMiG1no2iqLsL1JrG95lvmy4FX1871+s3e66bg/wtu4Ytf0vg6JHT58LW6EC5Aq8BrjveaA1gq3UZelVonyvnj4XRWELKGY9Q5oCjXqBZu/RhQvM3HsvOgwZfPvbcfr7X8DUdRZ4L0M2q4addCnmk4kgCMz6Cy19bxw7xiOHDlG86Uaqe/YxftddvPjHP+aFq/yQrbfwbkux0SIwRE5FC110+QVeaopTL2+5gtPjz1Crleg7dYp4agq3Xn/BEu99yJZVMwxbC3mYAOVS6fnnpYXgUlT1Fa9g5LVvYOmh+2k+9BAjBw9mgC+0JphZPEVe/aUxqsF2rJhvjjO7dJax2kGkcLaOeX6KudfsXQihoiiay8BsT7oEz3tCw1YiV40GJ26/nXIKtPiiF+FUKpSuvx7hOETj47ROnED7LvX6CJWXvpSVOnrmu9z3xCdyFUiPczNP8IG3PGbAJyrkQ1+7JgV+LWemHkHphCvqL0EKyUt33crNB967idRXga17g04KfUZrZYFnLmK8ZHtwWSwy/Y1vEM1Mcf6ezyOUYvGnh9FJAkGBRl8A2/qp/8O38Nwdf8D8Aw+YbToMSQ4fxr3DpXpTghUzDZ9f2f4ayoUhABzps3PwEHON+7l6NGG47xALrSUGKy/nyfH7NhW6Nrax4Z0wjKaU0ojcmR+lYrHddinKGx7m9OEfogIPo2t25A+UU3/5p/T/5htYvDCNVoKFk6cYe91rKUx+HyFoa6FZ4R+/7I5MGH/Pq7/CR75+HYl+jon5BwG4MBdQcA9sRfE9P3Lv2dMnkiTJFy+olEqYmbYo6jL9syUywzDn3MTzF1PimLlHD2OFKBYQQQFvDoSkrdGBG5hZOs2O2kGsKLhlhHBSa++LwqHs923NVbP5+TXRg6crZWfaXC8DMggCzJx6x5MQxaYiv/D5z9M4epTaW95C8aqraD3zDO6AixasTUIjm9kq3nVXvoqv/N3tDJSuaIP/3qN/iO8+h+eKFQAcAq+PTVY+vPfep6fAp5IkRggyV1wUgoLxdN3hjNJNTN5NoeXMx/879de/gZP/4XbmH34Y6mWcbufnNSPExDxMpuY66KEqekeMCLKf/7nZu3nl1bfxFz9+L/ONCzSjWSrFebYPqMx+WkkKbmVrPF1ny7ICsX5PTxIzvYrIzd0WPN+UYhe1zjHffM3/6EeE0+cZ/5uvAeBcdwXdBSoFPvWunTjveDOHf/IFXv+FMfTiIs5OnQmPi62TqX2IncM7WGjOoPUiUpIXsdYZT59aeNZk9kPVvZvSp2fGTr14ulJqJgqjTHaulMb3PXzPR2XKgFsiE85FGCEn54kvzCPLPs5wH7Lk00nJ9CLnX7TA9FuPUokXuf5l7+Dr7l3sfHAK9UaBKzV5NaIzOA4dVSuPMbHwNM1ojq8+9B95avw+XFlgpP8a3vXKey7OeF5vdPZu6+9hFIEQK9vwfD81z6xvcQnW1M8XfvITVLPJyPveZ9ZP/efbcXcP0UlOZYjmjZMIAYvhydT+kD0HgNQcNOvRruERzk27fODLO9nWH7FnRLFr8K387NkZnrnwQ/Zte+VFn3Cx5HuGPhNFUe7SA40rJUGh0AG6RmuxadyF77P7E5/AyhRknnn/+6nQOblQ1X6iQGSy9PmGoOhrXId16YnxT5qM/ob9CQIAwcnpr1EtvpkLc09eHOhaZ4BrNsrTUwGFlUCl4xAEBdB69aqcYMskHAe3vx+pFLIDQf+G6/F++mPCNwouzKY2Ixjtv5kTT/+Msf3TlAPN+pQQJ+C7rCjZnqVUqG1G/t579m61FEXRIlBoA0UjpWxPuoC+pMqwADIIcLXGkayqvj0jjH0a/ubFEg7t4z1X/xHz/+aDNI4l/O1vQ/VVrEsnzkmicCeef5LdI4rJOcFzUyc4MPrai4ZbrxLne4beajXngbomIzPpsjK6aC4tOULgdgjvS1//Ivs/dCcD3/ouzXue5fzU26gMFqlefxB36ger9gpxAuPTgpkFgRSwraYZ7NNYMT0v2F55M++++Qvcc/+7+fHjXzaZ+7941Z+YYs5Fop4P7+heoQthrnSZ15q8KJVLaPQlWZGL5+bwx2pI0WmHCP2Nu9m2fYxWQ+BeOQrA+LlzxHWBEPkKBDx8zOHX5JW8uH6IRF/g/81NcmLpKHtGFQCVwvUEcjsA73zF/zK26cUZxUZ4utBhGM1prXJAoRQEnaf0ldhyz/cEFnpncf4sxcDFinh+HgbJl2+ZmHF46azHa56bA/4v/ivfyb7mN/mD8nU0Wj+jFIDvDKBUkrnfTe78tk0ozvSevduqXDSj8vc3s9e05T27vVmypVILC3jOEEopwkbUPpZC2ceKsBmh4qxrtM6ehVEXkRunjw3czLT8Yfu49PGvwugA1WAbkXrU7O+6koXFBezNGoxZ4Egp13byZvfTo3M8LG70hiRyRFE0rbVCIFAWuIWePx0XzdbrzEQESvHY/cehVCHZfRWuA24c0nfuJDv2D3PmqQtMF4bR1X4AAhekgIWDDRIxx8y8wHM1RR8cB8bqg5zd/3KennuIvU0Hr3Sekzd8lOM/+ue87BqNABAxYdyg1WoRx3Ebmr25IBb8qsDtaWhY2HnonSJGBrilvlGeHs8kSYLjuJmhWdFOumgNxi6R2fXPPeLx/d97mqnaTmKlGanC9JLkyQnBfX95DdHSArMDO/kntz1Cf6Dx5fI2WAjhxpFvcdP0X7PPeYrJufNMzB83FTYhvsJgAgOqD7cP4ivexDmt6a+0ePqsYKEpcOWj1ArXsbS0RBRFKKUMbM/z8uerYyEbcxynHQ1slCBJkgx0e06+2de25bL3NvVeErl8/T0LXWtlijOOIzuEnK3jvq1PcnSgj117HwNgAZg8OcpH/QdoHjtG9Z2vI7nne7zu5Le495qXMbZznAO74cqyTzB/M43jDd47+z9AJxg5RaIwQjeLxNqBvW/GOXkPB1vzaPEKmo1JrohbOMBYawL9/ddx6ro/Ji5sN9BTgOZHYD3aGGAg2h9FG7zpjsKQOI7Nuo0U7f2A9r7kvLu9Cr17egp9OrX2hwaN0ppCwbfer/PA0WxdIlfxQSUym4iN1zl013vYf8025Mmn2f87t/NbT3+Jz529hdErzyOE5tRiyFATdjWeYakxhJEbQNIALTCSED/5PfTeW3GjWQ41plEtB0QNK/zoJyzpPoT19hQgFvhKLzcgC4UCgAGs7f3j0u5hZaQwFgSBWeYjhUWN3sjaO2CmV1NDCGxFDjvp4mNCl/0h2G1bXpzpDyBJHFbqV3cIwj3XsPDcT2k1IqZOfIHKBz8Gj5GRih365By0PalFZkrNtiXHv0dCXiAkiHrNdCtCx51u0W281Xr7ym7UwA7DMHP5VA52Ptnb+OKMDTnTcRyBJnPnRt/zjKG13XZpjNPLvs57Om+6rsX7Xv8lPn7uY+zy5im97q28f+IfsG3sQmZMHieSfjEHDuuSKPcRu1EbmlV++NZeWu/O9OU2qrZvCW73w0YM05ZJCi2Unk+MzE+6tFphbvLCTK+aEN/h5rmbwvzuhyRffESyow/+06sT9tU1i6FAOoqVeqD5LO96/U7+6PGP8J1jUHooYWB4grGd53MjFePpOH6I4zRRyidOivy8kqUKkWzlQee904C1IDsO01LLdA8WOPbHkPF6DSscT28I9OkoCjP3udIKHOlQLBQz52ltGm8L/BMPN/j7e5vs9uq86fMuf3ZrzDefkAzU51mps0shf7H0FAzBoSE6KowFA84MeuxaTtZ+nYdPNqjN/Igb3Z/xc8krIpIGVhQbz1BZ+CmxW2O69uo8+IzXrwCb8fB88pePFFqzUTcays+0RS0hCNpQ7QcoBIV2n45mUydcPvt3Dgye57GwwYw7zb+8cTe/+SWBWzvH0PYp1qMXjyp+MPdfELuq/O4PhqlWfbyKw8C5b/KFwX9NN2knwF86h1RLlJaOc+DxfwU7XoMQARPP3MeJPb+/6tjbZvJtAzLDNM/zTNJn70mfG9NresHusrqWojBcRBPoFWHIcV2CYgGtMsA3bax+YkYwNha1PfmrHGPkanrS1bvmOXXmALf9dUJ1eBJ/+xQ3jfTx3Qdu4Yi6mmu9x3k+qdYFCtfcxg0PvxF0QkSF+MwjuAduZWjqG4yHZwiLOzNhPIVokmJrBmwunGcs/8QIYOOzdyEw06taM5hrt/X3rSnMbK9omrMtgmDJjjI8Zufq9PdN4boR69GfPjYPwJW7MYoX4P88Nc9I3w6Oz+7h2uAJnk86nGLpyXtB1jLxLn7qS/ij11JqHicq7WpDk1Ia0EEQmApn6s0ZT7aAO5dxNRcnvINohFG4qNH5OjvFoIjVpvfrtxxQfPboNrZvO8WFiTHUwhW85UWKbzy+h6GdD64bvFKSRqNMuTyPFadmNWOFcXAFXaWXTCKpEWjhYIVuXEBXy9i+2IC0YdtAT828TttXzfRXlwB0FrneEOiYa9ra/Ud7gSnFhmET0JueyP32qxJOzGzn3mOj3LRT8ZnbQobLMFZ1+PRjI4xsP8ValSQOx49ez6H+0xydGWZs9AQTE6OMzB7l7+35Kd0FfjhD7NRx1BJSzRP6A0gVoqcfZ3HP1e3Ciu2rsWHdvM56dHdp8mfN9DbLlr/SZVorlYOqKZYM9DzzTanHFT343Nti8uoraANvNc3PDzAxOcLCQh++HzI4eI6h1KyYnR7lt/r+mDuv/R7/7on3cM+RW3ht9T7+6647wOkOQmiFUJoj1/+ZWd/9zJ3Upr8PSJ7d87tEsooEAzhfgrVj9UzBZs2XK29gIkccxWZ6Ffvh2pMuhYAFKcnnkCBAb83tu2aaGsdJyCuMCsyPX8XHbp7k5WOneXZGc9fhAe4/U2THjmcAONDfT39rBjX3OB8f/ffGAJy4idtYQCYttJDEfpW4UCEv4ZRIWjFaeKnB0/s+gh9eIHb7ULKAzGXsduiGff7MmuferWdnHR02yNPtnLp0HLCIldJm0kVKCVnsWwXc2JlZ8LyQvBozY/yzA5PctG0CFSp2FBI+cGiGN33zWqLojPmbkieIlJfxaqESnGaTE7t/j8XqS/DiGUbPfobK4t8SlutkFPQjZ8+xUqE/3E7arAGwYj4jE/It/LWFd73BiZz9gBfiJMZ3ZBuq0pqgGOA4EvJncAiArQF/albgey3yevXuAifOa6xXGRNAyVUo5VgwiqYqZMqwXhQxvv0dTNd+DYDYH+LE/g9z8CevgqrOXhMgQtxk0YR2LWQGdq7PzlfgMvv8vNJKb2wZNn9NWxzFFPzCiiK/IjDjSs+05ft00GyFnpySLLoDJpwX/CaOE1MoNNg9MsVXT+zj6NQ4BwYaBsAPx/uZpMHedDuA5ybMqgEQtGHK6lUmPK8MvYVwAqEjcLKAdDwLQR0nmTVVODu2xo6/ja2UTeaM2WRubYlcbl33nMjl59STBIRAZx/KZ0xZ4Fvu6kLwP38j5MHTdR6fgONTkrkmPDnjcuejgl/dvsCV1agNYDIqEYYFnnjiepSSHI4C/mnfdkzfLV2QEj32SkYO383kyNuR0jHgdj7534ir/SA0IokR2i6TBKp7KYZnaATDBrIdkrWhrlCXwkt3CciF943r0239PcqO0xXmQDzXJTOcY0vyODv3DzsHIHAVN+6MabTM891ohgmuSBCJBrdIsYjxrluuhqCUgNSUnZgBf5766VMsNa6gLzqBGy2hZ+7CkQWKMkQENTPJ1Nr1VopHHsVbeI6kUCdx+4i8YcJgiIny1ejqHizo/Bg8c3qUtXWfPKl0PryD7iW85+vvcRwhMsy1DV1e7n5mWyeNYHwBTi8mKBmDThBSIQKN0pJwMWBn4FKtCuOFjYbH2IAgKLaQImGx4TIz+Fpm8VFOg0SVceJJkmKVctFDliv4noM3dJDmSz5KrAKUilDxUmoNiJt4jqTPa6EqJXzfgM8MzXq5VWjnv7UI9AYmcvbq1VzSpJD2mjallAW+tdgdCUUXKoHGD2LQyjqCRMUSx/W5YtChFJjEiR2Bw6lFSeQKhKPN33oU6QsHcFUVqTSiWMapDuDUr8T1Cgae4+1HLJ5BNiMIYzQ+TuIgiiM4FQe3WkdU+jITJNY2+Hhll+nUHj09SgXC04DOjDedfGmArcrjXAn1kqCBg+e7SKFR2rRD7FEqelTLLr6DkdKC4bJgERffkzjaxSO1ZDS1Fko4iKAAhTI6CJCub8DhDSFru8BdREQxUsWgEkDjFnyc6jCiUMjB3nip1WbZekrk8le6ROGCRtfy5Tf7mnwepzeJeqJAinayTaWgqUYS33dMm7bQPQMVlmIJtr0RQamgCeyzYEkc/KKHo2o4xEQEuL6H62o0TdACARAtoL0qsuQhtYNWEWgQOkYELsINwPbfm3cPQQ0bGd5B2AsZdS3DPAN7c8uwWkMrAaUNdDxpw7u3DF4QeA5StB8thpeaI0ArTZgIEq1J7I9EGEAgHAGyiKP6aVAgTC2RgJvgqiVQJk+ApIVwypiMUCkEWE9X4CQIrwQWuNkfQDhsvHS+H+8Ven5OPVqysNvA806+Wem71hArrGk8KQx4FAZsvw+OK3EBDWYbgBAa6YDWmNBfsB5vPdJsU9In1jUi7eO6AjSEKsaRDoLEgEf4+VQZbIhHJiAkoCGJoDVlwBMMghNseDEqn8ihNw56EkbRrH0T8kTzXq+1NuPTZjRz0Z7AKAUUXfJPYCRYNq+HJzC65jUlwvYTGJGQIAEJjtftCYw2IkSgAa8PLQQoBWppg5/A6FvgPY7TO8+0hRNKq/z0Krr9IodPgFQBKFC6jZ0oVlitHiV0hysys61r2LdbW/5vdadbe+R20bn3EBgU1tmwXYulkmcGdGnTqzhWrs1zB7Lejt1J5G8whl6PpxPH8axSCoE5OGMCEIgO8HJfS2eoFw82gO7S1glsZzgZ6RXHL1YWI7VAoO2qaEMVgP0fepW2/DVsFrbdLDKe3SmRE4gEUBnw3aB3nlPXSNfBkQKhBIlr7iZpChAIkCbGirWBhWwo6wqry77raOsOu3ubJufVGrR1ew0I2647ey66i7c/L3AwHPxCwQMia3EX+BZ65/r74uLSIlJKbL9tHqJ7bvycmp2bbaTbm+nrVhRGChC6WzaXB77mu1R19u7u+4Je8/tkAHffV5D1ZCvdw4kQ+Vwnf8996ThMTEzMAAtA04JPALVWTzegwzD85gMPPDDruu75I0cem/zOd74zt7i4OHf69OlmHMcqNZFCFyl8D/AACQg2U5elrHc3LHQLHrUuTwfuS8EuG5/+9J/w7LMnsRJAABTt0gfcLQN+WYkFHwLNfIhfK3QzDDt8+PBK4NKatm+igNaWe/llb0+sRUDSi6ebyYOzZ5/L9zJqxT8eXTLAL4O3hu4JugWfhW6X1hTAlkK/LL0qmw5ye32TSwr2Zek1VeRuvfUf0Um33PIbfPKTn/wFeZbyZbn88uoydCEEvxy6rP8P5jXQOKZmuTMAAAAASUVORK5CYII=</content>
+<filesize>7358</filesize>
+</attachment>
+<attachment>
+<filename>configuration.png</filename>
+<author>wrong author</author>
+<date>1299688703000</date>
+<version>1.1</version>
+<comment/>
+<content>iVBORw0KGgoAAAANSUhEUgAAAH0AAABVCAYAAABkf+t+AAAmFElEQVR4XuxdB5QcxZn+qyfszmwOCrvKmVUWSRmBhIIRKCCECYcJxjYgm3u23jOGs5/NPUzwg3eHAXMY25KRTLaNsEAEgUBYEgpIKOeM8uak3Z2Zrvv/v7a3rrund2ZHc8/3fLQouru6Okx99ee/av3w9fb/rrSBLqX8GoB/8iKE0KBb5fXXX/O8IRwOw7vvroDnn3/+nxaAX/zi5zB8+HBoaWnRnZT6pglJH/NeH8tM3GWBgCwBIoygFBqGUYD7Ap/Pl4fHnSORyGfZ2dkrv/jiC3j44X+HWCx2wd/yNXtPO5h8lomHYQAgILOx5FnF7/cX+3z+Ip/PKMLj3EAgUIj7fCx5wWAwBwvVZeM+AyT49u3f90RNTc3KP//5LwR4etn71wUAqYo7NhqNWlUEXIioEQGjko+FKLAQKbEISwHtCTAEqoDAwz2Bl4slG4+pZGAxAv4A+AN+8NPe7wO8D/A5YAiD92BxFdwJqU5jpoQdO3fk//KXj8LOnTvp6v8p0MX/JmFdoBwzCgsLGTgCsbS0NDsnJycPAApwX9ivX7+CVhALhwwZko9t8/E8H0ErCASCRHFZCkA/gScINNwDAkyFwMNigKB/hsEiQYsFpn7a8V4C7231pmkiuKbV3vZrQ6EwbN26raAVcJGu/vKnwNacQAvHsTd4GkAzhUEVKCoqDCOGTH2dOnXKRoBI/hWGQpl5/fsPKERgCgi8bt265xUVFRXQeVZWdkFJSUk4GAxkBQPBLAQ6IzOUCQgogWcBx9QXaYkwCMJQ1Ke3VoA0C7eBZ8ZMUBhGbfe4cNRH7nr3DlqizdC7dy/6jfQeIwngpSr6ODXQNeDcSXqzPVwkQZV0s5/2CFYYO5tlXn5+flbnzp2KEExii3l9+/bNz8zMJDlXgPV5Xbp0KUCwChGo3K5dS8IZGcEQUR9uQVIuFXitFGf4wMC9tVnAIct2AKdLJNKCipuNGl3A2ce6GzWZ4JoXsEJQEYykVFRva0/XqU8QcMIpGdBFK0FJ2utjB+jJKivnz5+HkSNHQnFxMZSXlwuktFwhBGmfOVhy8/JyEb8C1D5FrmH48rp1K80jKkNAqD6vtLSkUMm6jNzOnTuHwsi7AsFAiHYIIASUvGPwrNLW44plKvD0NyFYEda0FYA2pSop4NwoeGBnr0z+WgJKjsaiEMHvb2pugSASVHZ2lv52yYDT7yvErS81Z+C9xVisurq6BvuI2lkFNPDeoHfD0daN5B3JNSoIAGmWRcQ2EeiiRYsW5be0NOcjUJ1QPgakZEUnhOzRj5secCABwVfyTrEnrtfgMVC8N01Je1KgsES4Xl9nENMu/hmYVJ/lDWzyg4ZBj0EkGmMKN6Uk+Q27du3ia8OGDoX8gnwitL4rVry7xroxHgdBJVGcOHmi/Pbb75hfVVV1BgB8DhbvDTqCtmDgwIEPIku1ZJ5FdXTNZrfu27cXBg4c9M9okKn/UriekAu4d62KnxrY7yxfDgvuuxfy8vPh8OHD8Morr8INN8wz0HdQjK1AeowoFmkCAkhMpKDWY2nGEmstpkWF8UAnUCuQF0OnTp29AOBR2dTUxOZNwo2pNWVjGGTqIHmDkfB7U32GvGCR8P0FC+DZ556DB3/yAHQrLYWbb76JgX/gxz8GqcSc656K2iZYvGwtnKiWIWyTw1aK2lqwEEiiPZlO7PXcedyIXXuDKBl4KdMMePrBdrf7x1O3u49MCWfPnQPUcyArOxsWIPCPPf4E/GDBvdCnTx/rPmb/hgPzAydq4NtProKNv70V7v/VX4x+sx/71ZdLv38ng62wNRJp7wRmZXNzc5036IJZfUYwCIYhEiiAKYOdelsvzTt1MFMHW1/2vk9KWP3ZZ7Bu3ToYN24sTJw4kZW5CRMmgBA2k5H622nxtQFOLtrJAw1/U6TrsC8BghpwEFQSgV6D2mJDvA5obGyC02fOQGPTeaiorIKgzwa6U/FKM9jeIAnb/6R+Joh/AGUnDzjz30iEAb/3nu+A4QvCE0/8in3/l19+GUhpsrzvVFwAZ8+ehc6tIleCReXVvD948CAcP34cfvluAxxb+eR93qadN+jVCHq9A0h++T58+HMv/p5t3/Mo0+fNnOGkbm5XX18PVZUVdtci+6v0qeAD4XEuLBAt2Gz1ItGeARH0H+jb9EncOsc1vQnb+/X40vVebaTQx/ZNtw0gx0QvIOOUmRGA+79/n82HUFNVCd/57j3w6KOPwcKFCwEDL0AW2c5DZ+HuJz+Btc/dCOMWvM4YPDCne/2drxyocb4qGedMHSpoNfGoNTMjAwLKe0WDg0GN166iogKqquvASY/u12vQdWm/892PE14tuMKzlUjdyezib7Ld5iBtTMhd+vYbAEv/9DJMueoKKBsyjAnAchrUVldxeejBn8Cjjz0O182aA40yBD96YRNseOEWuPx7L8OT94yFccO6w+bNm2Op+t4bkdKr4jVELwr4EHSQ7cpK1uy7lnSnFso+d4LpDY5H0dSVNDbJtfcGMgV9xHbaQXE2Y2YO7N21Hd56+522utGjR8OUKZOhrqYaarE88MCP4bXXXoPn1gbh78/cwIC/uHAS9O+W57TERUdBb0BKrzZNVhxsVBzKzACfYegIlHfx+ALp5nHe7d2UqdskaJscdCLJazIFO9+bsHUUDUCDT17O4iuugvFYmPIaGuDUyRPM1h966EGorCiHNRu3w8vbsuCT/5gJE37wpgK8NM+pJohUAi7nEdQq04wh6PZLlpMGr6cnKCfj97y0gcKN7JUegAjdlneJoUl//E8mANwOkHfLMLql+/UfAPPzb2Xge46aCc+/cwDeeGg8fOeJFbBwsgG5/mbQ5pzJR4kA93LOmNForIqAtVyqOnjBoCejmSdlwys3lDelSWdbgCTa69GRzm3Txg3w/G+egUpUUDEBgl3FGMmD+xbcj4rY0PhhrgTA6y92w19Z1wwzf/AHS5uC4pP7kMLnwB2PfwBzRmXBDbOmwiOPPAL33PM9wOAUCBEkuFOPpyOVV8ajZr+i9A6wuFQ3J7EKPYpEovZCj7o0Yr9nzy44h2ZTTm4OJz1EY344euQIfLFpQxvoiQ1Pb2J0A74I5k8bBCMG98XgViX859L1cOUP34KF15ZAab4fTp86CT//+c8xfephuO222yAcCmsAUqB0Yt8VcUDnwImfKb1jbNObj7fWC08qd98v2wdeM07hlhX6/g5tjY2NcOjQQWS5YaIq5nQ+E6k9HIUTJ76CSLSFooOJwPbuHw/AvzV7AmzZsg1y8gthyqhc+GjLcdizeT98E8GuOHeGiwX8XXfdBfJCQDdNs6Il0mIHB+uNNkqXXhqpPWPEocR5QsUGtUeQ3oZW8sBJp80gPZWGhGB9+snHcACDSyEE3O/j7mIZmhUOw4ED++H991bAtOkzKDgV736O16PIJOtHV3oCvhjuvn4EzJs2GpNQ34Ndx6thHHrpYq1EeMP8mwhkBruy/KwN+LFjx/pSZu9SyhrU4O1OF9wr9m7YZa1u40JN2AdNkvzcDZ4GPjXg3L45dVaO/u6PP1rJDpIJE64ADBv/zxgEbP1yC7o3N6H9u4l9EpmhEO2tgc0EQGGKv7z5OuzduwdGjboYRmIpKCiwsOVB8be3l0FdXS1cf/0NMGTY8PiA1yLg9y+GB789AaaNGwYvvfk+7N53GKbOnIWi5QBEWpq4XTAjgwcYA++g+McffzwbvXm91q5dezQVSq9taW4x2U2kMSHAOdAPMrG8Tp7SRTtJDK7qVMF3wC7Zrfn7F1+A9evXMWte//k6mHL11dCrZ284cvQwbETF7eCBA2Q6MdihcJgVWw06b0ztjQj8xg3r4cstm6F79+4I/iVQhCbY4UOHcNBsRNPrJOcPnEUX9t3f/R6MGDnSBsChk7Vw60OvwsP3XQXXTRoOzyz+Gxw+frIN8JNH98OavSa88dj1hAFzjLlz57YBf/LEcbjzzjtg0aLFgHGTRxH0CalQei2ypGZn0EUI9UIzKe3dgYhMROIa/+TpPXGSlm6mG1RVVRLgDGw4nEUgssw+/odj1KHkXGJKx6wewMwf2hPgzOmEA/SYECTnmeqJOx45coQLbpw3ZxiCI2e0nT59Cn734m/hnnsXwGB2vfJ3M+A//JfRMPvKEfDKslUM+MTJU2yAL/q36VBbVwcQbWRnTRbqF1dPmdIG/LPPPgu1tbUWAEYqiZHnVdBFgy4le9csRaZjzgkp2/O66ZZatnsDnzKl623FihWwGdk2+bEFkK5icFqSNE3AjCDw+X3IRoNWijLv+Vidx8svsLgkDw4pVbhU1WkCEOEwOVyI+gl0m2euV+8enO589sRhF+BP3z8WZKSBXgQ1zRLqamvAZ6jM29GjL4dnniFTshIw4TO2YcOGX6ekyClXLL0Fil2uWAV6O9hILBp4PE8MjiZz73ZcYeoLFyDjS0u62sDUKcv2fuDruo2TtfO5Ckhptq/yDDhm6ugSSfXkxuYoGkjT9rkrV62FitpRMGn6dbB1pwb8Nz+6AnJC6j2mKRQGreJGCKAwLIqkXqxH7N6zpwGp/stU896bcMTXu8BUMqz9UKQQTqmuiVxr6glRcwty6fo/eFJ++9Q/6corYRNS+tYtW3gQc1MGzZE3gHWGD4uhQBeaMPTAJ04hhLo/EGAKJ2+mfhhYSSes9F2J78acN5vZu+SRG+G2n6pI2RZis431CvAHZkBu2A8F2UHbDJp6HDiYCs7dYA1eJYJ8kpxrKYFON6J8qo0XV8b8ck9zze1n1xAJHWpK0UMT736ZjJKni9Du5FmzZsGO7dsRLNFKyYamTqZ8ICcMX1dUjhWCAdYKL4A6x/tZucUChoSY6f6iKMr7MFLozGuvbR00Gpt+pTkI/HwE/o22ureeugkKsgIAwp4jwJsZheysbFuHZ2RQXMTX5pVNBXSgoIuUpgZcT2JM0hnj9i5Lq07qYEuHKF5fS4Gz64axmAm9e/WBwoICzgsIBAwGWG9AYOsZK61KWVNzI2vhUurBg+FmluMmgW6aDJLfEHbWzvXcdwQ+Ub3rs/qW5MDa398FMrFnh/wBpIPYlFi/j0VMKr53XVCmV5omK282+USjVdclngkj48TQ9JUE8j2egs/3e4crZHKRWjh15hSo+AJTObcXduCpE/ld9fUN0IwKXlFhEXTGLGFM/eZc+4rycjiDZpgEICWKxYGaSOEATPAAYatgx44d0LtP33g40L1xYwkinmOR6qVwcD19f6qUXo6j2hV0yQ6HVaTNMxOWX+7tk0kqEuZ9UWq61kfxPHk2ndDd6IP33yf7mgHUCizfaZ3zRISqqmp02hTDnKlzYTg6VnJz87hPYmYMbfhGNs9WrvwQJxfuAJzQQWzWNuHCog8BSsn7HP0B4ydMtBw4GrKEgGs9V9q6SFp1+uZUKd00rUhbwMauyWTjmLpnEqKGQOOWAvDJK2gaXBvw3lG/E199Bbt27lSUiQPbYBmrKR1PWRk7d+4ce9luufVWjKh14+sKHCqCqbsrWgJlZWXwHrpi3162DLKxDqddtT1HczxJSiEFbZDat2EC5BU2wDW4NuC9qNd+RepyQZSOgFdSLpb6cE02GZkZKrzqkUQohKb1ZKhZI5YQZW8UhdB3JDEANm3aiBRcpagSJFOtIUlTtwa8ZLt36NBhmJ/2XaJKnlVqxqIW6ErMKBHAkbe518/ja2/99a+AU5CojzTfM00qfE8zioUN69fzYMq2uEzcnvGO0jgIXb9HfVfqlB6LqfCq0JjyQUYgyK7YBmn/ILcY02xHJC23E7fzQlefeyvu0ViMpwytW7OGIROKylxOlgZ0vWaFs+Cmm25Clp1HGavczq2UslLI9rNPCLjmmmtg757dsB/dt3m5uRap65mugrVsnme+dMkSmDz5KujatSuKjFxbP0kne5ceNOMWeRdE6ZwVS9N2FR6aAoLBAIIeBFO2k+abFLeRcfl0h11u0hbhcUfspESWegapawPFv3kqVm1NLXMsUJgo29owLbnLodSpU6ehl6w3RCJRDbSX6CAugLWhrDBMmzED9j79NA8wnTiqgWczEChytwq+QI7TBUFHZw3743E6mStIZEqvnuU2zqpUQdf+dxzhTicDRaSwBLxcsXabUnYgjJ2kGS+lnmFjUzI9UlC2ffklLHvrLcp8Yf0kCz1YIRUt03IX9OIA1qzYSy+7lFh6Ypez1CCQcjugf38OttRUV7OSKNtktmbZ/kCAzDfmKFu3bqWCHGIP/PRnP3MwLOkRxdas3CHYLxj0atTgHVhJ8BsG2aYeoBMg+kOcUXHpbWEnQdSSATly+AjgDE7utGHDR0BvpEYMiXrK+q0IOlF3RmYms1GfSvlyKFE6ARR/M4FFqVDtAy7j032Y7i0tpYgaH7ONrpsruz9m0jfQ4GMiqkb9oryiQveWNdfAmzZcfSwhXZSOG+luGlCVSJFJrFHK+F45YZ26dWq3valrLQo+duwYxp7rYNCgQTYHBFEhLrYDH374ASxfvpwjXp/jzJDZc+ciK57Kbd3AANUTVdH92s9uL9rskTxVmgIxHHTxVqSkp4Btbm6iYI3N/areoyQ08xdD8LGg/jQFOVuwEAxaz3DgmrwGnzroXBqR0hsYdAtQkMQWraALn7vdsG6TQzghdlGwiWHH0wQiRcDYLLxh/nwoG1xm+QQ4bLgd3aYbN24kSmTQD+FU3gYcIAE7m3fN/xIArFjF1AQNDbYCxYYdh0hxrB87chQuKruow3m0uCgAT/ZgC8c0nU4XK7uIZbsUEmIixtYDf4cGPPF0LNq72HsaQMdRW4f7Qg2SThyQsh3Fhv/pcKkEdk96dtvRY0fg5T+9wpPwms6fZ1v3r2j6bNm8mTlLY2MDdmYNnEWFrLmpmYINPHe+vqGBV2uqra9j1h1vGzFyBGavHKC5XiQeGFArQiVtU60EgsNUyU6b/ZjxMqhsUEcTpwlw9tJZETcQNi+ilv/RKHnoOAiDa+PAiBEjGHBPdd1uOcRl7/JCQReCZ7rUxXk/JQi26zTgIpPMnOG0pXLKUuG2PXv2ZCqpRwresHEDyWDKBiFMOMiQl5fHLNtyCZ86dRr2oBk2HDuNOIRzu+iiizBN+B7YvXs3An8MVn+6mrRz5hbCEitM9ab1vcxZtm/bBpMmTUIHTHZHKImCOCyGQpkhpmBF0faASVNzMx9ffPEo/L4yGDBwAGfcqH6zc86E4SYdYkkHpQuJ/vdaKU0XfYZ157quSVM46xNOcMC1aaBnr55w7OgxAo5A5YGV1ZzFFKEmQmq2SNQtQNB8btJ6yQfOVHPJpZcSmK6QZqfOnQDXu2F/+fjx42HxosW8ykMoHFK0rrRhK+7N79+1ayesXfN3mD5jetIew71798Lq1av5mUIIm7dNHRPgTaxj3HH77UTdrD9IpaSSEkmNNMDeef0u7V2mQ3tXXrlItele34y0Tidl68tG/ER+ZT+7VVIrjaiyooIBt1aJktLkBAHlCSPTiQroUCeW7JxsBnL7ju1wBln/6TOnAdeE4w48ceIEWhmZOBAuUdq9coPy9Tlz58BTTz1F7SwZb1vrDU1B5gZvvvEGml+FcCkOJifA7t9wBv60dClq7WchLz+Pv5dFm0aLZfv5xvPsxBkzdkyr4qiibia318DJREJFOlm7TIsiRyOvSspWp4V+oLZzPTxy7nfrj1IKlCZ4kn8ffrCSAhssqxUIgAD5+Tpr3CAQIPL7ByESjVKdlRLMx7g+DtnF+JwP4dPAJ0pktCpTmMpNnay1dRA8NbhP7z5sKShXrAZcbZIHXAW6Yl94/gU4N6+cFgwg0RKvj1jBfPXV12D/vv3sguUwreXPByU+tDkYhrFjxqAIifLA0GDJ5NJHNVPXx5JLuig9Wk3U4PP5baZZSAVd6JCL2w8v7Z/mcJ7RM01psqb7t+XLWSPPy8sHw0o8NNiMIaWN5rpTe647V36OAa6rreWFeJRFCdSWzgkAUozIv02+BF5A4eOPPkY/90jogbqCBaov4IOJkyZikuLviJXbWSSbh+qoIL8A5XMt/HHxYsya/RzTm0dhHL4X2fxEoUTdJMN5Rajamhpy2ZKpp7kGmLbZOfR7LkOnT2m3EojJaJsWLhywJlbipNbeNeqpK3Ju/7sddClN6lCsM7zNCRk3q5kVpF2795BSRbKMWeGqj1chtWVy0ELo7ydliNKPuV1xcQlr57W1daSFM+s9h8pfSWkJm2sx5WDhYz8W0s7ZhSwlio1KCoHaNGLiEpdfdhmy7zdJSeRYgiZyK8rGFfRdxJIR3J2we9ceGiTkwmVK5cWWohFOYOBBaxjKH4B7BYwG0pQqjWrSlZNs62UKRzxNJEhO8WbvvF0wpRPoVVi0zAP2IXPoUFG/dAOu1Ranc40WHMTE/7dhw4ZNxMqZMoUQzDYNlXiIRRCoZI7xOmpXTb4KWXFv8lwRQGwSfbHpC3jnnXdY8evevRsDLURM58wZAhqQrRcgq509Zxb6tAc41SLWH3r06EGsmYAkQFzLIrDWbarfG8SCg4U18ob6euJIpH/wADBYdFhIcF/xde4vS54r9y5bI+rYEfSPA7iIFzp2xFFlGn3vli2pIm1WsF5aQRe1vpxyOnDRbkZvvZ3t5X0o94RgLkJaLMlUfpahkvuIgjiFafTll8P18+YiO+9M1EOFPYG4KiWxWHacLHlpCeoEZ1mhU7Kf5TJROVPvjOnTYfas2WTTMzvWHyhZeaxCme33EQisRHm6WhlA9uj5sWgWK4TBx6yn6OU+ec+OGa5Xx1YmzicYaBl0UX8CP0Hw0Fkn4+lNaXTO6EhbFXeWBNsCQtihXLhSOvtLeubInTp1qi2OTWvVqbxyoVeVBMGKXd++fTCB8Bro0rmTpd261v8YNmwI3HzLzfDrp3/N4BWThq68bMR22ZybOHECZIaQQmMRKzPTkq0Y935LafihEKi8AZuZ5V4/xjBsDieNjFD/hC42r5peP4ZB34RcauTnw0kx9J63kWCBIg/FLS3aOwddmptbHN40Dq8Sy/NePJeKPZ7O+8FDymD69Gmwdt06ktm8BGbQnwkgmO2RYkYAs9xjuzraojvQLvGYzXYt6QLde3SHA/sPkL5gKYDkUWPRQSs9R63EB72hXrEblUeen6ao0BDu/nOxLgHCKyDEFG2zUBhgK2Yg1T+uq2+oh/fe/wCG4qDFzJvEqaFuvd7Ws3SkCU+mBfQqnN5kc/JKUwEUygjZAZHgkDFufXQQxov79e2H2vQoWLJkCSlYZEtbCiJRKN9Uhl4q7kKzfWs1NyebHTvHj39FILPcBxB0zPJfmXYxss9tbNAQqo2mbMaNfQJKnCmlEFyheg2DV9RLGGz1UNiU3svJGLyxaIwxlxk4YCB57NwYebP2BNPcZXrYu460RZppNpMGlWUTKTBaptuTEL0UOco8ZeVn7NjLOWVpO2rEVvQLQBDozPYDQT91UKKMWSsVmKmcQVLLeONgyCExQR2PbTiEaQNq6NAhvPzmH196SXEHfwDqm86TbOfUKAkSRUYVUSbfy84iK0XKBbiwBi0NNCo8/62s7CJ2tx46eIiew9/ahO8YP34czJ8/j/rCBatIcsa/vkHXp8P3riNtNKdNQqYFqjU1JzOUoShRessfPcNFb6YCpi2NWFkH3Gnq2YZB1MnP9o7H6rXQK8or8Dn8PLb9DdMgnYFnpb634j2MuQ/hxMVwOGRRNmv71103k+9f/MeXoDHWyHrErNmzYOiQIfxNX2Ic/pNPV5PoYFGSk53DVOzeOJyKgDYz1xkzZgzJa0qk5O9at+5zCgXTIOTVIO+++9vkoKE+8NDUEwAubXelX3sXQoVXpYQie732v3sspKUFjXBppTTiSS9gKreSL1GZozoyyXhWaVFRfqIMKwb24KGDzKpZasYkgMHhVLbrP/r4Y/KHI2cZDVOnTWFrgdlsLMrZK7NmXUcKHwNyxRUT2V2rYg0CTcFSqqP7aXEAym5hf4KS1RolpF6m7G996zZa5ZGfpxQ3kz2I3/jGdLjkkov5d/Xs2YMtkEik2TVnXiaTVqYza9PP3nUR59GN2SBBOv3sJJO8lsa0eepEnIEaCGRYphpTg2LvKjgS4WUz13NaU9cuXbw4HZt2a9esg5MnT7Gdz2ASt4gJBr2gsICdKjt37mIZO3nKZJDS5j5ltj5hwngaxSxO8LfS3lpUiTJfELBLYADqIi/8129pOU89w0eSSRvjHLpvfnM+zJgxncC2/vAPg265iYuLiyh3nuppVqwtSUJ6yXEd+HX51bUe53iOTA975zltbQkTekeuWASsCXSljbG7KF3YYs7lpHwxlft8YWumJ8lnptDVqz9DF20VzL9xHrk2uV5oC4Lbr/v8c1i16lN6B3kIGSzVRuJ3RRlAZUsDZZyypiwJUAEaeLYOTLa3Y2bUllBB4MeiEQY/KysEEyaOhzVr1nIbQ81dY7ZeWlpKFM5gqt9hOnwdFjcTlgjzVNoEF32sTUQnmjo9RZ9yXTrYu1BBF9N0gRoKM+h2zLWU8XItsp2+YsX7sG3bdpKtlj/AmiTIilM5yukNGzbSu1HTpzy4XmyeNZ1vpgwbvHcHfPbZGqTyk0zlMQIchLXGHS/1wSxfAi86MBITKfw+AyJm1ElO7Afw2lTI02Q7v0f3bmSmciqXNQedzNn+/fuRvsBtvDYFtqPSG2xvsekmdH0tfYocs1EVXlVOBx10QflWT3ZuPB1U2kapbWHc9es3wcqPVkELdlhJSVebU4Q6WLllcxC4erald+3aTS5b8sETxbN9f/jwUdLMKcGBAQAJZB6RqOBB1atXL2LbdI0H0ZgxozUVa8A7kplL7BnZ+I2wbNnbFuj87GnTpmpHevLdr4nE9Uon+tIzMdNF6ABponSOqSuWZlGvaTJLtSblJ0ggFG2sp6GxiSNl7EjB6tq6WsuOJV+4xQKJYkkbJ7lPUTaOdFm5dNYfsSsgx04wYJuHhlE7NrnuuusONMsGWwMK2xukLScAI3EA+9prv8FRMiX3BVE4fQcpZs62HQZcOg9kcioeyLQrcuwjP0deraDP0E4GKcnbRZ2ph5jNQyndJpcQHLQYPHgwUu8eOH7sKyvMSkAS2yZ5bstclVISiMSqLXmJe2ktC6LdmxykOU+DhKlRAS4ZHPUbNJdKsfB3BoN+DNJ0d8zubUr12W58k6dyRejpd8PqOW2kKWcEM7TblcyRYBDBClCdU6Z7/UkhtsEHYcTrFnSMoNxme79TcTGz6uXL30FnzQ6KsBE7Z6pWgEX1Uh8g8J2G/ktPrKjpPx82deoUzGubiG05WJTmPxLJAFNJ6+qyMqGxLuNg7p7xJtOkyOmYeiymZLr9j/JxMSU4QBbegQLFEpESy8AfCBJabQGKPn1648zP91FB+ztq95Usr9mNGgPaWwOw9d1+lt9q0LGZR214elBmZqAd5UzC/5HNLbuFJ9hJsvc0ynTlf4/Y9UYTVHhVKTQeCwRJT81IhT+bbCO7qCgP5s2bw7J96dKXieWzmcXmVIx92ZyxUlNdQ/Y429ihkEqiVGw/BrW1NdTW693u49RLKs/Spliyt3tfjMveZZrsdPa/E+UIG+YsV5Ui5ZjI6KFWJJxaGjNN8rnT0los23nCnzKpeCUIKSWJGPJukabO4B86dJhWzCCgOavm7Nlz3u9OP7V3DHBNFPo85WdKO3uXVNKnyOnZqw6701Bz2ui6xs/ukkuJcFooaNHSzCadz2D5jcpfGbtMe/Xq0eY7b0DZ//57H5IJxd8yZMhgTCkeTvewpyz5TaQVXG8N3Q22cIEvO/Rsdzg1jZQeYf4uApqKrJixz+Ua0BUyhYVgWWyw+3Xv3v0kqykdCtn+XE6aMM0os3a2kcMBuPa6GWjrd+HUqssuvRQHhfUnRJSF4Q2piEcxSX6vTApk4eJ4bqBlqoNMaiXW4aNLD+g80yXSUi9BFjjdb9a5lx6n4tQdA76sbBAsXPivsGfPfvLKMQUPGNAfqZcjcrYOyc3NgqunXsVpTFaqdCTarAHwAoc/zD2BQLTb9dJz2rU3yG6w5QVyFCk9fk862TuAUBMZCXSNuRtstxs2lYXiWPvu1q0L2sMU5RqH55RjL+M6V9jOJ/85u2EDEFNROxI//93eGezEDQMBNIYstKce2zP9HXqFL1sJ/oPDXnvZ+x7gDloBrYIgKwJLsvF0akYay449stV2V2pmNYoztuRVnsaxNc447i/K90gVapoxM/CH7lTYMnBgQ/7wHo+pdy8Em4HbTu5i5+pA6hhpHfr+VUs5UQiyLTY9+IEKC4IGTdGrgX8ToAnCvWAXG0IWbLkp2MCVM5GDPwe9b7uuBvA82AdOnZuc8Np9+JJ7hDIuaMYcGXp5cuPABuH9K9QJdiH3UcaSTPZyM9lVDDx/nR6PtLWVBk1U7Qvf2I//6OirFS8Y+iAnMErY1a6NrQltBZvXD0S3F3MTcPpQpqSAarAA4NNiPoKNCIeG8i+fPw20oUbKSzAGadB5/3utKSUW0I8OyQzCAwYSg/q3YFNRsIXAhuE4MJSb44gqzJOiIn96ZJ8JC4M24AASw6Zq37P9iZxhQuelM/hk6BxTh2Kv3H/PM65V0ZcmmySlCKHEuKgiWN/ONhGW0DbDJsOWbdwHewAoK7ce2SEyCQPB22PAUQwHPOpjgsWOdBODX8oRpr5pXhoT9KD3tgl54qfBul7Vr1i/xvu3ru00xfZt+vLkJP1953t3yiQrpx8GLLdVDEhJPQ2BlBc6bs59E/ququoJi8+oawJPXp/m6QZ027YX8/m8Rs/+iXvOHmaz2appmtVyuVzj0K9RFUJXCH+CBCZ8lPM/lFE0efergc7gdZqns3xHsL+1OD8/K66vb+yV0wfUj3Q9QC23BnyUnsC3BD0wxIvQOYn8YrGwge+RAnWiUd+27uWjt/ekHV1zPd3EtM12Y0uAQHfcyU4AH8GzggxdBh/Y7cP5jbYKfRTwrvI6Pb+T3YE9SvL56Scnp8GGx8ffiul0Kna0+zJKaW+P+j9klF9ny/mOLqopdAAAAABJRU5ErkJggg==</content>
+<filesize>9805</filesize>
+</attachment>
+</xwikidoc>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/wrongVisibilityForTranslations/pom.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/wrongVisibilityForTranslations/pom.xml
new file mode 100644
index 0000000..61a13f0
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/wrongVisibilityForTranslations/pom.xml
@@ -0,0 +1,46 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+-->
+
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>org.xwiki.commons</groupId>
+  <artifactId>xwiki-commons-tool-xar-plugin-test</artifactId>
+  <version>1.0</version>
+  <name>Test for XAR Plugin</name>
+  <packaging>pom</packaging>
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.xwiki.commons</groupId>
+        <artifactId>xwiki-commons-tool-xar-plugin</artifactId>
+        <version>@project.version@</version>
+        <executions>
+          <execution>
+            <goals>
+              <goal>verify</goal>
+            </goals>
+          </execution>
+        </executions>
+      </plugin>
+    </plugins>
+  </build>
+</project>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/wrongVisibilityForTranslations/src/main/resources/Space/GlobalTranslations.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/wrongVisibilityForTranslations/src/main/resources/Space/GlobalTranslations.xml
new file mode 100644
index 0000000..9fc49ec
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/wrongVisibilityForTranslations/src/main/resources/Space/GlobalTranslations.xml
@@ -0,0 +1,103 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+-->
+
+<xwikidoc version="1.1">
+  <web>Space</web>
+  <name>GlobalTranslations</name>
+  <language/>
+  <defaultLanguage/>
+  <translation>0</translation>
+  <creator>xwiki:XWiki.Admin</creator>
+  <creationDate>1397735293000</creationDate>
+  <parent>XWiki.WatchListClass</parent>
+  <author>xwiki:XWiki.Admin</author>
+  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
+  <date>1397735757000</date>
+  <contentUpdateDate>1397735757000</contentUpdateDate>
+  <version>1.1</version>
+  <title>GlobalTranslations</title>
+  <comment/>
+  <minorEdit>false</minorEdit>
+  <syntaxId>plain/1.0</syntaxId>
+  <hidden>true</hidden>
+  <content>### Macro "watchlist"
+    rendering.macro.watchlist.name=Watch List
+    rendering.macro.watchlist.description=Show the content of your current watchlist.
+
+    ### XWiki.WatchListClass
+    XWiki.WatchListClass_interval_realtime=Realtime
+    XWiki.WatchListClass_interval_Scheduler.WatchListHourlyNotifier=Hourly
+    XWiki.WatchListClass_interval_Scheduler.WatchListDailyNotifier=Daily
+    XWiki.WatchListClass_interval_Scheduler.WatchListWeeklyNotifier=Weekly
+
+    ### Notification Icons
+    watchlist.notifications.icons.on=ON
+    watchlist.notifications.icons.on=OFF
+    watchlist.notifications.icons.tooltip.page=Watch this page
+    watchlist.notifications.icons.tooltip.pageAndChildren=Watch this page and children
+    watchlist.notifications.icons.tooltip.space=Watch the parent page and its children
+    watchlist.notifications.icons.tooltip.wiki=Watch this wiki
+    watchlist.notifications.changeStatusError=Failed to change the status of the WatchList.
+
+    ### Watchlist livetable (in the macro)
+    watchlist.table.scope.wiki=All pages of the wiki
+    watchlist.table.scope.pageandchildren=Page + Children
+    watchlist.table.scope.pageonly=Page Only
+    watchlist.table.location=Location
+    watchlist.table.scope=Scope
+  </content>
+  <object>
+    <name>Space.GlobalTranslations</name>
+    <number>0</number>
+    <className>XWiki.TranslationDocumentClass</className>
+    <guid>ea33221b-7130-4a96-98aa-504729dfb9a7</guid>
+    <class>
+      <name>XWiki.TranslationDocumentClass</name>
+      <customClass/>
+      <customMapping/>
+      <defaultViewSheet/>
+      <defaultEditSheet/>
+      <defaultWeb/>
+      <nameField/>
+      <validationScript/>
+      <scope>
+        <cache>0</cache>
+        <disabled>0</disabled>
+        <displayType>select</displayType>
+        <multiSelect>0</multiSelect>
+        <name>scope</name>
+        <number>1</number>
+        <prettyName>Scope</prettyName>
+        <relationalStorage>0</relationalStorage>
+        <separator> </separator>
+        <separators> ,|</separators>
+        <size>1</size>
+        <unmodifiable>0</unmodifiable>
+        <values>GLOBAL|WIKI|USER|ON_DEMAND</values>
+        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
+      </scope>
+    </class>
+    <property>
+      <scope>GLOBAL</scope>
+    </property>
+  </object>
+</xwikidoc>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/wrongVisibilityForTranslations/src/main/resources/Space/UserTranslations.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/wrongVisibilityForTranslations/src/main/resources/Space/UserTranslations.xml
new file mode 100644
index 0000000..753cf27
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-integration-tests/src/test/resources/wrongVisibilityForTranslations/src/main/resources/Space/UserTranslations.xml
@@ -0,0 +1,103 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+-->
+
+<xwikidoc version="1.1">
+  <web>Space</web>
+  <name>UserTranslations</name>
+  <language/>
+  <defaultLanguage/>
+  <translation>0</translation>
+  <creator>xwiki:XWiki.Admin</creator>
+  <creationDate>1397735293000</creationDate>
+  <parent>XWiki.WatchListClass</parent>
+  <author>xwiki:XWiki.Admin</author>
+  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
+  <date>1397735757000</date>
+  <contentUpdateDate>1397735757000</contentUpdateDate>
+  <version>1.1</version>
+  <title>UserTranslations</title>
+  <comment/>
+  <minorEdit>false</minorEdit>
+  <syntaxId>plain/1.0</syntaxId>
+  <hidden>true</hidden>
+  <content>### Macro "watchlist"
+    rendering.macro.watchlist.name=Watch List
+    rendering.macro.watchlist.description=Show the content of your current watchlist.
+
+    ### XWiki.WatchListClass
+    XWiki.WatchListClass_interval_realtime=Realtime
+    XWiki.WatchListClass_interval_Scheduler.WatchListHourlyNotifier=Hourly
+    XWiki.WatchListClass_interval_Scheduler.WatchListDailyNotifier=Daily
+    XWiki.WatchListClass_interval_Scheduler.WatchListWeeklyNotifier=Weekly
+
+    ### Notification Icons
+    watchlist.notifications.icons.on=ON
+    watchlist.notifications.icons.on=OFF
+    watchlist.notifications.icons.tooltip.page=Watch this page
+    watchlist.notifications.icons.tooltip.pageAndChildren=Watch this page and children
+    watchlist.notifications.icons.tooltip.space=Watch the parent page and its children
+    watchlist.notifications.icons.tooltip.wiki=Watch this wiki
+    watchlist.notifications.changeStatusError=Failed to change the status of the WatchList.
+
+    ### Watchlist livetable (in the macro)
+    watchlist.table.scope.wiki=All pages of the wiki
+    watchlist.table.scope.pageandchildren=Page + Children
+    watchlist.table.scope.pageonly=Page Only
+    watchlist.table.location=Location
+    watchlist.table.scope=Scope
+  </content>
+  <object>
+    <name>Space.UserTranslations</name>
+    <number>0</number>
+    <className>XWiki.TranslationDocumentClass</className>
+    <guid>ea33221b-7130-4a96-98aa-504729dfb9a7</guid>
+    <class>
+      <name>XWiki.TranslationDocumentClass</name>
+      <customClass/>
+      <customMapping/>
+      <defaultViewSheet/>
+      <defaultEditSheet/>
+      <defaultWeb/>
+      <nameField/>
+      <validationScript/>
+      <scope>
+        <cache>0</cache>
+        <disabled>0</disabled>
+        <displayType>select</displayType>
+        <multiSelect>0</multiSelect>
+        <name>scope</name>
+        <number>1</number>
+        <prettyName>Scope</prettyName>
+        <relationalStorage>0</relationalStorage>
+        <separator> </separator>
+        <separators> ,|</separators>
+        <size>1</size>
+        <unmodifiable>0</unmodifiable>
+        <values>GLOBAL|WIKI|USER|ON_DEMAND</values>
+        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
+      </scope>
+    </class>
+    <property>
+      <scope>USER</scope>
+    </property>
+  </object>
+</xwikidoc>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/pom.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/pom.xml
index 8025ed8..0c69916 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/pom.xml
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/pom.xml
@@ -25,7 +25,7 @@
   <parent>
     <groupId>org.xwiki.commons</groupId>
     <artifactId>xwiki-commons-tool-xar</artifactId>
-    <version>9.10-SNAPSHOT</version>
+    <version>10.9-SNAPSHOT</version>
   </parent>
   <artifactId>xwiki-commons-tool-xar-plugin</artifactId>
   <name>XWiki Commons - Tools - XAR Tools - XAR Plugin</name>
@@ -33,6 +33,7 @@
   <description>XWiki Commons - Tools - XAR Tools - XAR Plugin</description>
   <properties>
     <xwiki.jacoco.instructionRatio>0.01</xwiki.jacoco.instructionRatio>
+    <xwiki.pitest.mutationThreshold>0</xwiki.pitest.mutationThreshold>
   </properties>
   <dependencies>
     <dependency>
@@ -47,7 +48,6 @@
     <dependency>
       <artifactId>jaxen</artifactId>
       <groupId>jaxen</groupId>
-      <version>1.1.6</version>
       <scope>runtime</scope>
     </dependency>
     <!-- This dependency is drawn by XOM which draws it from Jaxen. However, Jaxen 1.1.4 draws XOM 1.0 which draws
@@ -101,6 +101,11 @@
       <artifactId>mojo-executor</artifactId>
       <version>2.2.0</version>
     </dependency>
+    <!-- Ensure that the Xerces version from the JDK is not used (since it's older and buggy). -->
+    <dependency>
+      <groupId>xerces</groupId>
+      <artifactId>xercesImpl</artifactId>
+    </dependency>
     <!-- Test dependencies -->
     <dependency>
       <groupId>junit</groupId>
@@ -124,35 +129,15 @@
           <goalPrefix>xar</goalPrefix>
         </configuration>
       </plugin>
+      <!-- Exclude some classes from checkstyle till we fix the violations -->
       <plugin>
-        <!-- Note: We duplicate the configuration located in xwiki-commons-pom since commons tools use xwiki-commons
-             as their parent pom and not xwiki-commons-pom. This is to avoid a circular dependency since
-             xwiki-commons-pom uses the xwiki-commons-tool-validation-resources artifact. -->
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-checkstyle-plugin</artifactId>
-        <dependencies>
-          <dependency>
-            <groupId>org.xwiki.commons</groupId>
-            <artifactId>xwiki-commons-tool-verification-resources</artifactId>
-            <version>${project.version}</version>
-          </dependency>
-        </dependencies>
-        <configuration>
-          <!-- Used by the "blocker" execution id and the "default-cli" one
-              (i.e. when executing "mvn checkstyle:check") -->
-          <configLocation>checkstyle-blocker.xml</configLocation>
-          <propertyExpansion>
-            currentVersion=${project.version}
-          </propertyExpansion>
-        </configuration>
         <executions>
           <execution>
+            <!-- Specify the "default" execution id so that the "blocker" one is always executed -->
             <id>default</id>
-            <goals>
-              <goal>check</goal>
-            </goals>
             <configuration>
-              <configLocation>checkstyle.xml</configLocation>
               <excludes>
                 **/AbstractXARMojo.java,
                 **/UnXARMojo.java,
@@ -162,13 +147,6 @@
               </excludes>
             </configuration>
           </execution>
-          <execution>
-            <!-- Checks that should never be excluded from executing in maven projects -->
-            <id>blocker</id>
-            <goals>
-              <goal>check</goal>
-            </goals>
-          </execution>
         </executions>
       </plugin>
     </plugins>
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/AbstractVerifyMojo.java b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/AbstractVerifyMojo.java
index 624633c..597e317 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/AbstractVerifyMojo.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/AbstractVerifyMojo.java
@@ -28,6 +28,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;
+import java.util.Set;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -106,6 +107,22 @@
     protected Properties titles;
 
     /**
+     * Disables the check for the existence of the date fields.
+     *
+     * @since 10.8RC1
+     */
+    @Parameter(property = "xar.dates.skip", defaultValue = "false")
+    protected boolean skipDates;
+
+    /**
+     * Disables the check for the existence of the date fields.
+     *
+     * @since 10.8RC1
+     */
+    @Parameter(property = "xar.dates.skip.documentList")
+    protected Set<String> skipDatesDocumentList;
+
+    /**
      * Explicitly define a list of pages (it's a regex) that should be considered as content pages (rather than
      * technical pages). Note that content pages must have a non empty default language specified and note that if a
      * page is not in this list and it doesn't have any translation then it's considered by default to be a technical
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/AbstractXARMojo.java b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/AbstractXARMojo.java
index 543cfa3..a48453b 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/AbstractXARMojo.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/AbstractXARMojo.java
@@ -20,7 +20,9 @@
 package org.xwiki.tool.xar;
 
 import java.io.File;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
 
 import org.apache.maven.artifact.Artifact;
@@ -151,6 +153,14 @@
     private ArtifactRepository local;
 
     /**
+     * @since 10.3
+     */
+    @Parameter(property = "entries", readonly = true, required = false)
+    private List<XAREntry> entries;
+
+    private Map<String, XAREntry> entryMap;
+
+    /**
      * @return the includes
      */
     protected String[] getIncludes()
@@ -175,6 +185,22 @@
     }
 
     /**
+     * @return the map containing all the XAR entries
+     */
+    protected Map<String, XAREntry> getEntryMap()
+    {
+        if (this.entryMap == null) {
+            this.entryMap = new HashMap<>();
+
+            for (XAREntry entry : this.entries) {
+                this.entryMap.put(entry.getDocument(), entry);
+            }
+        }
+
+        return this.entryMap;
+    }
+
+    /**
      * Unpacks the XAR file (exclude the package.xml file if it exists).
      * 
      * @param file the file to be unpacked.
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/FormatMojo.java b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/FormatMojo.java
index 83b5e1c..5f3edcc 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/FormatMojo.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/FormatMojo.java
@@ -21,7 +21,9 @@
 
 import java.io.File;
 import java.io.FileOutputStream;
+import java.io.IOException;
 import java.util.Collection;
+import java.util.List;
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.maven.plugin.MojoExecutionException;
@@ -29,23 +31,27 @@
 import org.apache.maven.plugins.annotations.Mojo;
 import org.apache.maven.plugins.annotations.Parameter;
 import org.dom4j.Document;
+import org.dom4j.DocumentException;
 import org.dom4j.Element;
 import org.dom4j.Node;
 import org.dom4j.io.OutputFormat;
 import org.dom4j.io.SAXReader;
-import org.dom4j.io.XMLWriter;
+import org.eclipse.aether.util.version.GenericVersionScheme;
+import org.eclipse.aether.version.InvalidVersionSpecificationException;
+import org.eclipse.aether.version.Version;
+import org.eclipse.aether.version.VersionScheme;
+import org.xwiki.tool.xar.internal.XWikiDocument;
 
 /**
  * Pretty prints and set valid authors and version to XAR XML files.
  *
  * @version $Id$
  */
-@Mojo(
-    name = "format",
-    threadSafe = true
-)
+@Mojo(name = "format", threadSafe = true)
 public class FormatMojo extends AbstractVerifyMojo
 {
+    private static final VersionScheme VERSIONSCHEME = new GenericVersionScheme();
+
     /**
      * If false then don't pretty print the XML.
      */
@@ -57,6 +63,13 @@ public void execute() throws MojoExecutionException, MojoFailureException
     {
         // Only format XAR modules or when forced
         if (getProject().getPackaging().equals("xar") || this.force) {
+            // Note: it's important that we run the license addition before we formatting below since the pretty print
+            // would add a new line between the XML declaration and the license for example. Otherwise we'd get the
+            // new line added only on the second run of this mojo!
+            if (this.formatLicense) {
+                getLog().info("Adding missing XAR XML license headers...");
+                executeLicenseGoal("format");
+            }
             getLog().info("Formatting XAR XML files...");
             initializePatterns();
             Collection<File> xmlFiles = getXARXMLFiles();
@@ -67,22 +80,19 @@ public void execute() throws MojoExecutionException, MojoFailureException
                     throw new MojoExecutionException(String.format("Failed to format file [%s]", file), e);
                 }
             }
-            if (this.formatLicense) {
-                getLog().info("Adding missing XAR XML license headers...");
-                executeLicenseGoal("format");
-            }
         } else {
             getLog().info("Not a XAR module, skipping reformatting...");
         }
     }
 
-    private void format(File file, String defaultLanguage) throws Exception
+    private void format(File file, String defaultLanguage)
+        throws InvalidVersionSpecificationException, IOException, DocumentException
     {
         SAXReader reader = new SAXReader();
         Document domdoc = reader.read(file);
         format(file.getName(), domdoc, defaultLanguage);
 
-        XMLWriter writer;
+        XWikiXMLWriter writer;
         if (this.pretty) {
             OutputFormat format = new OutputFormat("  ", true, "UTF-8");
             format.setExpandEmptyElements(false);
@@ -90,6 +100,7 @@ private void format(File file, String defaultLanguage) throws Exception
         } else {
             writer = new XWikiXMLWriter(new FileOutputStream(file));
         }
+        writer.setVersion(getXMLVersion(domdoc));
         writer.write(domdoc);
         writer.close();
 
@@ -97,7 +108,22 @@ private void format(File file, String defaultLanguage) throws Exception
         getLog().info(String.format("  Formatting [%s/%s]... ok", parentName, file.getName()));
     }
 
-    private void format(String fileName, Document domdoc, String defaultLanguage) throws Exception
+    private String getXMLVersion(Document domdoc) throws InvalidVersionSpecificationException
+    {
+        String versionString = domdoc.getRootElement().attributeValue("version");
+        if (versionString != null) {
+            Version version13 = VERSIONSCHEME.parseVersion("1.3");
+            Version version = VERSIONSCHEME.parseVersion(versionString);
+
+            if (version.compareTo(version13) >= 0) {
+                return "1.1";
+            }
+        }
+
+        return "1.0";
+    }
+
+    private void format(String fileName, Document domdoc, String defaultLanguage)
     {
         Node node = domdoc.selectSingleNode("xwikidoc/author");
         if (node != null) {
@@ -146,12 +172,40 @@ private void format(String fileName, Document domdoc, String defaultLanguage) th
         if (isTechnicalPage(fileName)) {
             element.setText("true");
         }
+
+        // Remove date fields
+        String documentName = "";
+        try {
+            documentName = XWikiDocument.readDocumentReference(domdoc);
+        } catch (DocumentException e) {
+            getLog().error("Failed to get the document reference", e);
+        }
+        if (!this.skipDates && !this.skipDatesDocumentList.contains(documentName)) {
+            removeNodes("xwikidoc/creationDate", domdoc);
+            removeNodes("xwikidoc/date", domdoc);
+            removeNodes("xwikidoc/contentUpdateDate", domdoc);
+            removeNodes("xwikidoc//attachment/date", domdoc);
+        }
     }
 
     private void removeContent(Element element)
     {
         if (element.hasContent()) {
-            ((Node) element.content().get(0)).detach();
+            element.content().get(0).detach();
+        }
+    }
+
+    /**
+     * Remove the nodes found with the xpath expression.
+     *
+     * @param xpathExpression the xpath expression of the nodes
+     * @param domdoc The DOM document
+     */
+    private void removeNodes(String xpathExpression, Document domdoc)
+    {
+        List<Node> nodes = domdoc.selectNodes(xpathExpression);
+        for (Node node : nodes) {
+            node.detach();
         }
     }
 }
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/VerifyMojo.java b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/VerifyMojo.java
index 83b55db..eb16eaf 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/VerifyMojo.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/VerifyMojo.java
@@ -23,6 +23,7 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
+import java.util.Map;
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.maven.plugin.MojoExecutionException;
@@ -45,6 +46,10 @@
  *   <li>ensure that the default language is set properly</li>
  *   <li>ensure titles follow any defined rules (when defined by the user)</li>
  *   <li>ensure that Translations pages are using the plain/1.0 syntax</li>
+ *   <li>ensure that Translations pages don't have a GLOBAL or USER visibility (USER makes no sense and GLOBAL would
+ *       require Programming Rights, which is an issue in farm-based use cases)</li>
+ *   <li>ensure that attachments have a mimetype set. If the mimetype is missing then the attachment won't be
+ *       filterable in the attachment view in Page Index.</li>
  * </ul>
  *
  * @version $Id$
@@ -66,6 +71,14 @@
     @Parameter(property = "xar.verify.skip", defaultValue = "false")
     private boolean skip;
 
+    /**
+     * Disables the translations visibility check.
+     *
+     * @since 4.3M1
+     */
+    @Parameter(property = "xar.verify.translationVisibility.skip", defaultValue = "false")
+    private boolean translationVisibilitySkip;
+
     @Override
     public void execute() throws MojoExecutionException, MojoFailureException
     {
@@ -103,7 +116,7 @@ public void execute() throws MojoExecutionException, MojoFailureException
                     AUTHOR, xdoc.getContentAuthor()));
             verifyAuthor(errors, xdoc.getCreator(), String.format("Creator must be [%s] but was [%s]",
                 AUTHOR, xdoc.getCreator()));
-            verifyAttachmentAuthors(errors, xdoc.getAttachmentAuthors());
+            verifyAttachmentAuthors(errors, xdoc.getAttachmentData());
 
             // Verification 3: Check for orphans, except for Main.WebHome since it's the topmost document
             if (StringUtils.isEmpty(xdoc.getParent()) && !xdoc.getReference().equals("Main.WebHome")) {
@@ -149,6 +162,25 @@ public void execute() throws MojoExecutionException, MojoFailureException
                     xdoc.getReference(), SYNTAX_PLAIN));
             }
 
+            // Verification 11: Verify that Translations documents don't use GLOBAL or USER visibility
+            if (!translationVisibilitySkip && xdoc.containsTranslations()) {
+                for (String visibility : xdoc.getTranslationVisibilities()) {
+                    if (visibility.equals("USER") || visibility.equals("GLOBAL")) {
+                        errors.add(String.format("[%s] ([%s]) page contains a translation using a wrong visibility "
+                            + "[%s]. Consider using a [WIKI] visibility.", file.getName(), xdoc.getReference(),
+                            visibility));
+                    }
+                }
+            }
+
+            // Verification 12: Verify that  attachments have a mimetype set.
+            verifyAttachmentMimetypes(errors, xdoc.getAttachmentData());
+
+            // Verification 13: Verify that date fields are not set.
+            if (!skipDates) {
+                verifyDateFields(errors, xdoc);
+            }
+
             // Display errors
             if (errors.isEmpty()) {
                 getLog().info(String.format("  Verifying [%s/%s]... ok", parentName, file.getName()));
@@ -172,17 +204,49 @@ public void execute() throws MojoExecutionException, MojoFailureException
         }
     }
 
+    private void verifyDateFields(List<String> errors, XWikiDocument xdoc)
+    {
+        if (!skipDatesDocumentList.contains(xdoc.getReference())) {
+            if (xdoc.isDatePresent()) {
+                errors.add("'date' field is present");
+            }
+
+            if (xdoc.isContentUpdateDatePresent()) {
+                errors.add("'contentUpdateDate' field is present");
+            }
+
+            if (xdoc.isCreationeDatePresent()) {
+                errors.add("'creationDate' field is present");
+            }
+
+            if (xdoc.isAttachmentDatePresent()) {
+                errors.add("'attachment/date' field is present");
+            }
+        }
+    }
+
     private void verifyAuthor(List<String> errors, String author, String message)
     {
-        if (!author.equals(AUTHOR)) {
+        if (!AUTHOR.equals(author)) {
             errors.add(message);
         }
     }
 
-    private void verifyAttachmentAuthors(List<String> errors, List<String> authors)
+    private void verifyAttachmentAuthors(List<String> errors, List<Map<String, String>> attachmentData)
+    {
+        for (Map<String, String> data : attachmentData) {
+            String author = data.get("author");
+            verifyAuthor(errors, author, String.format("Attachment author must be [%s] but was [%s]", AUTHOR, author));
+        }
+    }
+
+    private void verifyAttachmentMimetypes(List<String> errors, List<Map<String, String>> attachmentData)
     {
-        for (String author : authors) {
-            verifyAuthor(errors, author, String.format("Attachment author must [%s] but was [%s]", AUTHOR, author));
+        for (Map<String, String> data : attachmentData) {
+            String mimetype = data.get("mimetype");
+            if (mimetype == null) {
+                errors.add(String.format("Missing mimetype for attachment [%s]", data.get("filename")));
+            }
         }
     }
 }
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/XAREntry.java b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/XAREntry.java
new file mode 100644
index 0000000..ba8b01c
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/XAREntry.java
@@ -0,0 +1,65 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.tool.xar;
+
+/**
+ * Properties to apply to a XAR entry.
+ * 
+ * @version $Id$
+ * @since 10.3
+ */
+public class XAREntry
+{
+    private String document;
+
+    private String type;
+
+    /**
+     * @return the document name
+     */
+    public String getDocument()
+    {
+        return document;
+    }
+
+    /**
+     * @param document the document name
+     */
+    public void setDocument(String document)
+    {
+        this.document = document;
+    }
+
+    /**
+     * @return the document type
+     */
+    public String getType()
+    {
+        return type;
+    }
+
+    /**
+     * @param type the document type
+     */
+    public void setType(String type)
+    {
+        this.type = type;
+    }
+}
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/XARMojo.java b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/XARMojo.java
index a961ffe..fc5e6c8 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/XARMojo.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/XARMojo.java
@@ -26,8 +26,10 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.util.Collection;
+import java.util.LinkedHashMap;
 import java.util.LinkedList;
 import java.util.List;
+import java.util.Map;
 import java.util.Queue;
 import java.util.Set;
 
@@ -244,7 +246,7 @@ private void unpackTransformedXARs() throws MojoExecutionException
                         if ("xar".equals(artifact.getType())) {
                             String id = String.format("%s:%s", artifact.getGroupId(), artifact.getArtifactId());
                             if (id.equals(transformation.getArtifact())) {
-                                unpackXARToOutputDirectory(artifact, new String[] {transformation.getFile()},
+                                unpackXARToOutputDirectory(artifact, new String[] { transformation.getFile() },
                                     new String[] {});
                             }
                         }
@@ -376,26 +378,45 @@ private void addFileElements(Collection<ArchiveEntry> files, Element filesElemen
                 element.setText(reference);
                 element.addAttribute("language", xdoc.getLocale());
                 element.addAttribute("defaultAction", "0");
+
+                // Add configured properties
+                XAREntry cfgEntry = getEntryMap().get(reference);
+                if (cfgEntry != null) {
+                    // Entry type
+                    if (cfgEntry.getType() != null) {
+                        element.addAttribute("type", cfgEntry.getType());
+                    }
+                }
+
                 filesElement.add(element);
             }
         }
     }
 
     /**
-     * Gets the list of document names from a 'package.xml'-like document.
+     * Gets the list of entry from a 'package.xml'-like document.
      * 
      * @param file the XML document to parse
-     * @return the list of document names contained in the XML document
+     * @return the Map of entries contained in the XML document (ordered in the same order as the file)
      * @throws Exception if the XML document is invalid or it contains no document list or it doesn't exist
+     * @since 10.3
      */
-    protected static Collection<String> getDocumentNamesFromXML(File file) throws Exception
+    protected static Map<String, XAREntry> getXarEntriesMapFromXML(File file) throws Exception
     {
         try (FileInputStream stream = new FileInputStream(file)) {
-            return getDocumentNamesFromXML(stream);
+            return getXarEntriesMapFromXML(stream);
         }
     }
 
-    public static Collection<String> getDocumentNamesFromXML(InputStream stream) throws Exception
+    /**
+     * Gets the list of entry from a 'package.xml'-like document.
+     * 
+     * @param stream the XML document to parse
+     * @return the Map of entries contained in the XML document (ordered in the same order as the file)
+     * @throws Exception if the XML document is invalid or it contains no document list or it doesn't exist
+     * @since 10.3
+     */
+    public static Map<String, XAREntry> getXarEntriesMapFromXML(InputStream stream) throws Exception
     {
         SAXReader reader = new SAXReader();
         Document domdoc;
@@ -407,13 +428,17 @@ private void addFileElements(Collection<ArchiveEntry> files, Element filesElemen
             throw new Exception("The supplied document contains no document list ");
         }
 
-        Collection<String> result = new LinkedList<>();
+        Map<String, XAREntry> result = new LinkedHashMap<>();
         Collection elements = filesElement.elements(FILE_TAG);
         for (Object item : elements) {
             if (item instanceof Element) {
                 Element currentElement = (Element) item;
-                String documentName = currentElement.getText();
-                result.add(documentName);
+
+                XAREntry entry = new XAREntry();
+                entry.setDocument(currentElement.getText());
+                entry.setType(currentElement.attributeValue("type"));
+
+                result.put(entry.getDocument(), entry);
             }
         }
 
@@ -421,6 +446,23 @@ private void addFileElements(Collection<ArchiveEntry> files, Element filesElemen
     }
 
     /**
+     * Gets the list of document names from a 'package.xml'-like document.
+     * 
+     * @param file the XML document to parse
+     * @return the list of document names contained in the XML document
+     * @throws Exception if the XML document is invalid or it contains no document list or it doesn't exist
+     */
+    protected static Collection<String> getDocumentNamesFromXML(File file) throws Exception
+    {
+        return getXarEntriesMapFromXML(file).keySet();
+    }
+
+    public static Collection<String> getDocumentNamesFromXML(InputStream stream) throws Exception
+    {
+        return getXarEntriesMapFromXML(stream).keySet();
+    }
+
+    /**
      * Adds the files from a specific directory to an archive. It also builds a package.xml file based on that content
      * which is also added to the archive.
      * 
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/XWikiXMLWriter.java b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/XWikiXMLWriter.java
index 0202717..fee1948 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/XWikiXMLWriter.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/XWikiXMLWriter.java
@@ -40,6 +40,8 @@
      */
     private boolean useFormat;
 
+    private String version;
+
     /**
      * @param output the stream where to write the XML
      * @throws UnsupportedEncodingException in case encoding issue
@@ -60,6 +62,16 @@ public XWikiXMLWriter(OutputStream output, OutputFormat format) throws Unsupport
         this.useFormat = true;
     }
 
+    /**
+     * @param xmlVersion the XML version to set in the declaration
+     * @since 9.11.1
+     * @since 10.0
+     */
+    public void setVersion(String xmlVersion)
+    {
+        this.version = xmlVersion;
+    }
+
     @Override
     protected void writeComment(String text) throws IOException
     {
@@ -75,7 +87,7 @@ protected void writeComment(String text) throws IOException
     protected void writeNodeText(Node node) throws IOException
     {
         if (this.useFormat && node.getText().trim().length() == 0) {
-          // Check if parent node contains non text nodes
+            // Check if parent node contains non text nodes
             boolean containsNonTextNode = false;
             for (Object object : node.getParent().content()) {
                 Node objectNode = (Node) object;
@@ -99,13 +111,34 @@ protected void writePrintln() throws IOException
     {
         // We need to reimplement this method because of a bug (bad logic) in the original writePrintln() which checks
         // the last output char to decide whether to print a NL or not:
-        //  ...3</a></b> --> ...3</a>\n</b>
+        // ...3</a></b> --> ...3</a>\n</b>
         // but
-        //  ...3\n</a></b> --> ...3\n</a></b>
+        // ...3\n</a></b> --> ...3\n</a></b>
         // and
-        //  ...3\n</a>\n</b> --> ...3\n</a></b>
+        // ...3\n</a>\n</b> --> ...3\n</a></b>
         if (this.useFormat) {
             this.writer.write(getOutputFormat().getLineSeparator());
         }
     }
+
+    @Override
+    protected void writeDeclaration() throws IOException
+    {
+        String encoding = getOutputFormat().getEncoding();
+
+        // Only print of declaration is not suppressed
+        if (!getOutputFormat().isSuppressDeclaration()) {
+            this.writer.write(String.format("<?xml version=\"%s\"", this.version));
+
+            if (!getOutputFormat().isOmitEncoding()) {
+                this.writer.write(String.format(" encoding=\"%s\"", encoding));
+            }
+
+            this.writer.write("?>");
+
+            if (getOutputFormat().isNewLineAfterDeclaration()) {
+                println();
+            }
+        }
+    }
 }
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/internal/XWikiDocument.java b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/internal/XWikiDocument.java
index aa9d91c..a27bf8c 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/internal/XWikiDocument.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/internal/XWikiDocument.java
@@ -22,11 +22,14 @@
 import java.io.File;
 import java.io.StringReader;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 import org.dom4j.Document;
 import org.dom4j.DocumentException;
 import org.dom4j.Element;
+import org.dom4j.Node;
 import org.dom4j.io.SAXReader;
 
 /**
@@ -38,6 +41,10 @@
 {
     private static final String AUTHOR_TAG = "author";
 
+    private static final String MIMETYPE_TAG = "mimetype";
+
+    private static final String FILENAME_TAG = "filename";
+
     /**
      * @see #getReference()
      * @since 7.2M1
@@ -71,10 +78,10 @@
     private String contentAuthor;
 
     /**
-     * @see #getAttachmentAuthors()
-     * @since 7.0RC1
+     * @see #getAttachmentData()
+     * @since 10.6RC1
      */
-    private List<String> attachmentAuthors;
+    private List<Map<String, String>> attachmentData;
 
     /**
      * @see #getVersion()
@@ -122,6 +129,31 @@
     private boolean containsTranslations;
 
     /**
+     * @see #getTranslationVisibilities()
+     */
+    private List<String> translationVisibilities = new ArrayList<>();
+
+    /**
+     * @see #datePresent()
+     */
+    private boolean datePresent;
+
+    /**
+     * @see #contentUpdateDatePresent()
+     */
+    private boolean contentUpdateDatePresent;
+
+    /**
+     * @see #creationDatePresent()
+     */
+    private boolean creationDatePresent;
+
+    /**
+     * @see #isAttachmentDatePresent()
+     */
+    private boolean attachmentDatePresent;
+
+    /**
      * Parse XML file to extract document information.
      *
      * @param file the xml file
@@ -158,20 +190,7 @@ public void fromXML(Document domdoc) throws DocumentException
 
         Element rootElement = domdoc.getRootElement();
 
-        this.reference = rootElement.attributeValue("reference");
-        if (this.reference == null) {
-            String name = readElement(rootElement, "name");
-            String space = readElement(rootElement, "web");
-
-            // If the reference, name and space don't exist we consider that we're not reading an XML that corresponds
-            // to a wiki page.
-            if (name == null && space == null) {
-                throw new DocumentException(String.format("Content doesn't point to valid wiki page XML",
-                    domdoc.getName()));
-            }
-
-            this.reference = space == null ? name : escapeSpaceOrPageName(space) + '.' + escapeSpaceOrPageName(name);
-        }
+        this.reference = readDocumentReference(domdoc);
 
         this.locale = rootElement.attributeValue("locale");
         if (this.locale == null) {
@@ -187,15 +206,66 @@ public void fromXML(Document domdoc) throws DocumentException
         this.parent = readElement(rootElement, "parent");
         this.comment = readElement(rootElement, "comment");
         this.minorEdit = readElement(rootElement, "minorEdit");
-        this.attachmentAuthors = readAttachmentAuthors(rootElement);
+        this.attachmentData = readAttachmentData(rootElement);
         this.isHidden = Boolean.parseBoolean(readElement(rootElement, "hidden"));
         this.title = readElement(rootElement, "title");
         this.syntaxId = readElement(rootElement, "syntaxId");
 
+        this.datePresent = isElementPresent(rootElement, "date");
+        this.contentUpdateDatePresent = isElementPresent(rootElement, "contentUpdateDate");
+        this.creationDatePresent = isElementPresent(rootElement, "creationDate");
+        this.attachmentDatePresent = rootElement.selectSingleNode("//attachment/date") != null;
+
         // Does this document contain a XWiki.TranslationDocumentClass xobject?
         if (rootElement.selectNodes("//object/className[text() = 'XWiki.TranslationDocumentClass']").size() > 0) {
             this.containsTranslations = true;
+            // Record the visibility
+            for (Node node : rootElement.selectNodes(
+                "//object/className[text() = 'XWiki.TranslationDocumentClass']/../property/scope"))
+            {
+                this.translationVisibilities.add(node.getStringValue());
+            }
+        }
+    }
+
+    /**
+     * @param domdoc the DOM document containing and XML wiki page
+     * @return the reference of the wiki page
+     * @throws DocumentException if it is not a valid XML wiki page
+     * @since 10.8RC1
+     */
+    public static String readDocumentReference(Document domdoc) throws DocumentException
+    {
+        Element rootElement = domdoc.getRootElement();
+
+        String result = rootElement.attributeValue("reference");
+        if (result == null) {
+            String name = readElement(rootElement, "name");
+            String space = readElement(rootElement, "web");
+
+            // If the reference, name and space don't exist we consider that we're not reading an XML that corresponds
+            // to a wiki page.
+            if (name == null && space == null) {
+                throw new DocumentException(
+                    String.format("Content doesn't point to valid wiki page XML", domdoc.getName()));
+            }
+
+            result = space == null ? name : escapeSpaceOrPageName(space) + '.' + escapeSpaceOrPageName(name);
         }
+
+        return result;
+    }
+
+    /**
+     * @param rootElement the root XML element under which to find the element
+     * @param elementName the name of the element to read
+     * @return {@code true} if the element is present; {@code false} otherwise
+     * @since 10.8RC1
+     */
+    public static boolean isElementPresent(Element rootElement, String elementName)
+    {
+        Element element = rootElement.element(elementName);
+        return element != null;
     }
 
     /**
@@ -204,8 +274,9 @@ public void fromXML(Document domdoc) throws DocumentException
      * @param rootElement the root XML element under which to find the element
      * @param elementName the name of the element to read
      * @return null or the element value as a String
+     * @since 10.8RC1
      */
-    private String readElement(Element rootElement, String elementName)
+    public static String readElement(Element rootElement, String elementName)
     {
         String result = null;
         Element element = rootElement.element(elementName);
@@ -215,13 +286,31 @@ private String readElement(Element rootElement, String elementName)
         return result;
     }
 
-    private List<String> readAttachmentAuthors(Element rootElement)
+    /**
+     * @param rootElement the root element of the XML document
+     * @return the list of data for each attachment
+     * @since 10.8RC1
+     */
+    public static List<Map<String, String>> readAttachmentData(Element rootElement)
     {
-        List<String> authors = new ArrayList<>();
+        List<Map<String, String>> data = new ArrayList<>();
         for (Object attachmentNode : rootElement.elements("attachment")) {
-            authors.add(readElement((Element) attachmentNode, AUTHOR_TAG));
+            Map<String, String> map = new HashMap<>();
+            String authorValue = readElement((Element) attachmentNode, AUTHOR_TAG);
+            if (authorValue != null) {
+                map.put(AUTHOR_TAG, authorValue);
+            }
+            String mimetypeValue = readElement((Element) attachmentNode, MIMETYPE_TAG);
+            if (mimetypeValue != null) {
+                map.put(MIMETYPE_TAG, mimetypeValue);
+            }
+            String filenameValue = readElement((Element) attachmentNode, FILENAME_TAG);
+            if (filenameValue != null) {
+                map.put(FILENAME_TAG, filenameValue);
+            }
+            data.add(map);
         }
-        return authors;
+        return data;
     }
 
     /**
@@ -333,12 +422,12 @@ public String getMinorEdit()
     }
 
     /**
-     * @return the attachment authors and an empty list if there's no attachment
-     * @since 7.0RC1
+     * @return the attachment data (authors, mimetypes, etc) and an empty list if there's no attachment
+     * @since 10.6RC1
      */
-    public List<String> getAttachmentAuthors()
+    public List<Map<String, String>> getAttachmentData()
     {
-        return this.attachmentAuthors;
+        return this.attachmentData;
     }
 
     /**
@@ -376,6 +465,16 @@ public boolean containsTranslations()
     }
 
     /**
+     * @return the list of Translation xobject visibilities (WIKI, USER, GLOBAL, etc) and an empty list if no
+     *         translation exist on this page
+     * @since 10.1RC1
+     */
+    public List<String> getTranslationVisibilities()
+    {
+        return this.translationVisibilities;
+    }
+
+    /**
      * @return the document's syntax id
      * @since 8.1M1
      */
@@ -387,8 +486,9 @@ public String getSyntaxId()
     /**
      * @param name the name to escape
      * @return the escaped name
+     * @since 10.8RC1
      */
-    private String escapeSpaceOrPageName(String name)
+    public static String escapeSpaceOrPageName(String name)
     {
         return name != null ? name.replaceAll("[\\\\\\.]", "\\\\$0") : null;
     }
@@ -410,4 +510,40 @@ public static String getReference(File file)
 
         return doc.getReference();
     }
+
+    /**
+     * @return {@code true} if the date field is present; false otherwise
+     * @since 10.8RC1
+     */
+    public boolean isDatePresent()
+    {
+        return datePresent;
+    }
+
+    /**
+     * @return {@code true} if the contentUpdateDate field is present; false otherwise
+     * @since 10.8RC1
+     */
+    public boolean isContentUpdateDatePresent()
+    {
+        return contentUpdateDatePresent;
+    }
+
+    /**
+     * @return {@code true} if the creationDate field is present; false otherwise
+     * @since 10.8RC1
+     */
+    public boolean isCreationeDatePresent()
+    {
+        return creationDatePresent;
+    }
+
+    /**
+     * @return {@code true} if the date field is present for an attachment; false otherwise
+     * @since 10.8RC1
+     */
+    public boolean isAttachmentDatePresent()
+    {
+        return attachmentDatePresent;
+    }
 }
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/test/java/org/xwiki/tool/xar/FormatMojoTest.java b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/test/java/org/xwiki/tool/xar/FormatMojoTest.java
index c24d18c..ffb6de9 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/test/java/org/xwiki/tool/xar/FormatMojoTest.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/test/java/org/xwiki/tool/xar/FormatMojoTest.java
@@ -19,11 +19,17 @@
  */
 package org.xwiki.tool.xar;
 
+import java.io.ByteArrayOutputStream;
 import java.io.File;
+import java.io.InputStream;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 
+import org.apache.commons.io.IOUtils;
+import org.dom4j.Document;
+import org.dom4j.io.OutputFormat;
+import org.dom4j.io.SAXReader;
 import org.junit.*;
 
 import static org.junit.Assert.assertEquals;
@@ -73,4 +79,29 @@ public void defaultLanguageForDocumentWhenNoTranslation()
 
         assertEquals("", mojo.guessDefaultLanguage(file, files));
     }
+
+    /**
+     * Reproduces issue raised in <a href="https://jira.xwiki.org/browse/XCOMMONS-1373">XCOMMONS-1373</a>.
+     */
+    @Test
+    public void formatSpecialContentFailingWithXercesFromJDK8() throws Exception
+    {
+        SAXReader reader = new SAXReader();
+        InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream("XWikiSyntaxLinks.it.xml");
+        String expectedContent = IOUtils.toString(is, "UTF-8");
+
+        is = Thread.currentThread().getContextClassLoader().getResourceAsStream("XWikiSyntaxLinks.it.xml");
+        Document domdoc = reader.read(is);
+
+        XWikiXMLWriter writer;
+        OutputFormat format = new OutputFormat("  ", true, "UTF-8");
+        format.setExpandEmptyElements(false);
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        writer = new XWikiXMLWriter(baos, format);
+        writer.setVersion("1.1");
+        writer.write(domdoc);
+        writer.close();
+
+        assertEquals(expectedContent, baos.toString());
+    }
 }
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/test/resources/XWikiSyntaxLinks.it.xml b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/test/resources/XWikiSyntaxLinks.it.xml
new file mode 100644
index 0000000..85f0e3b
--- /dev/null
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/test/resources/XWikiSyntaxLinks.it.xml
@@ -0,0 +1,117 @@
+<?xml version="1.1" encoding="UTF-8"?>
+
+<!--
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+-->
+
+<xwikidoc version="1.3" reference="XWiki.XWikiSyntaxLinks" locale="it">
+  <web>XWiki</web>
+  <name>XWikiSyntaxLinks</name>
+  <language>it</language>
+  <defaultLanguage>en</defaultLanguage>
+  <translation>1</translation>
+  <creator>xwiki:XWiki.Admin</creator>
+  <creationDate>1300895617000</creationDate>
+  <parent>XWiki.XWikiSyntax</parent>
+  <author>xwiki:XWiki.Admin</author>
+  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
+  <date>1454940903000</date>
+  <contentUpdateDate>1454940903000</contentUpdateDate>
+  <version>1.1</version>
+  <title>XWikiSyntaxLinks</title>
+  <comment/>
+  <minorEdit>false</minorEdit>
+  <syntaxId>xwiki/2.1</syntaxId>
+  <hidden>true</hidden>
+  <content>= Editing =
+
+== Collegamenti - Links ==
+
+{{comment}}please do not translate the sub headlines{{/comment}}
+=== 1.0 Links ===
+
+|=(% style="width:20%" %)Caratteristica|=Sintassi XWiki 1.0|=(% style="width:20%" %)Risultato
+|Link ad una pagina nello Spazio corrente|{{{[WebHome]}}}|[[Web Home&gt;&gt;WebHome]]
+|Link con etichetta|{{{[etichetta&gt;WebHome]}}}|[[etichetta&gt;&gt;WebHome]]
+|Link con sintassi XWiki nell'etichetta|{{{&lt;a href="$xwiki.getURL("WebHome")"&gt;&lt;strong&gt;etichetta in grassetto&lt;/strong&gt;&lt;/a&gt;}}}|[[**etichetta in grassetto**&gt;&gt;WebHome]]
+|Link ad una pagina di uno spazio specificato|{{{[[Main.WebHome]]}}}|[[Web Home&gt;&gt;Main.WebHome]]
+|Link ad un subwiki|{{{[subwiki:Main.WebHome]}}}|[[Web Home&gt;&gt;xwiki:Main.WebHome]]
+|Link che si apre in una nuova pagina|{{{[etichetta&gt;WebHome&gt;_blank]}}}|[[etichetta&gt;&gt;WebHome||rel="__blank"]]
+|Link ad un URL direttamente nel testo|{{{Questo è un URL: http://xwiki.org}}}|Questo è un URL: http://xwiki.org
+|Link ad un URL|{{{[http://xwiki.org]}}}|[[http://xwiki.org]]
+|Link ad un URL con etichetta|{{{[XWiki&gt;http://xwiki.org]}}}|[[XWiki&gt;&gt;http://xwiki.org]]
+|Link ad un indirizzo email|{{{[john@smith.net&gt;mailto:john@smith.net]}}}|[[john@smith.net&gt;&gt;mailto:john@smith.net]]
+|Link ad un'immagine|{{{&lt;a href="$xwiki.getURL("Space1.Page1")"&gt;{image:img.png|document=Space2.Page2}&lt;/a&gt;}}}|[[image:XWiki.XWikiSyntaxLinks@img.png&gt;&gt;Main.WebHome]]
+|Link ad un'immagine con parametri|{{{&lt;a href="$xwiki.getURL("Space1.Page1")"&gt;{image:img.png|document=Space2.Page2|width=26|height=26}&lt;/a&gt;}}}|[[[[image:XWiki.XWikiSyntaxLinks@img.png||width="26" height="26"]]&gt;&gt;Main.WebHome]]
+|Link ad un allegato nella pagina corrente|(((
+{{info}}Vedere [[Attach Macro&gt;&gt;http://extensions.xwiki.org/xwiki/bin/view/Extension/Attach+Macro+%28Radeox%29]] per ulteriori dettagli{{/info}}
+{{{{attach:text|file=img.png}}}}
+)))|[[text&gt;&gt;attach:XWiki.XWikiSyntaxLinks@img.png]]
+|Link ad un allegato in una pagina diversa|(((
+{{info}}Vedere [[Attach Macro&gt;&gt;http://extensions.xwiki.org/xwiki/bin/view/Extension/Attach+Macro+%28Radeox%29]] per ulteriori dettagli{{/info}}
+{{{{attach:text|document=Space.Page|file=img.png}}}}
+)))|[[text&gt;&gt;attach:XWiki.XWikiSyntaxLinks@img.png]]
+|Link ad una Ancora in una pagina|{{{[label&gt;Space.Page#anchor]}}}|[[label&gt;&gt;XWiki.XWikiSyntax||anchor=HLinks]]
+|Link ad un Titolo in una pagina|(((
+{{{[label&gt;Space.Page#HMyheading]}}}
+)))|[[label&gt;&gt;XWiki.XWikiSyntax||anchor=HMyheading]]
+
+{{info}}Quando s'inserisce un Titolo, si crea un'ancora di nome "H" seguita dal testo dell'intestazione di sole lettere. Per esempio, per Titolo "My heading", l'ancora generata sarà "HMyheading".{{/info}}
+
+
+{{velocity}}$subHeading Specifiche dei link con la Sintassi XWiki 1.0 $subHeading{{/velocity}}
+
+{{info}}
+Le parti tra ##( )## sono richieste, le parti tra ##[ ]## sono opzionali e si deve aggiungere uno dei due caratteri in ##{ }## se si usano parti opzionali.
+{{/info}}
+
+Il formato completo di un link è **##[etichetta {&gt; o |}] (risorsa) [@interWikiAlias] [{&gt; o |} obbiettivo]##**
+
+* **##etichetta##**: Una stringa opzionale che viene mostrata all'utente come nome del link quando è renderizzata. Esempio: ##Pagina personale##
+* **##risorsa##**: Il riferimento completo al link usando la seguente sintassi: **##(riferimento) [?Stringaquery] [#ancora]##**
+** **##riferimento##**: Il riferimento del link. Esso può essere indifferentemente
+*** **un URI** nella forma **##protocollo:percorso##** (esempi: ##http:~/~/xwiki.org##, ##mailto~:john@smith.com##), o
+*** **una pagina wiki ** riferimento nella forma **##~[~[NomeWiki:] spazio.] (pagina)##**. Esempi: ##WebHome##, ##Main.WebHome##, ##mywiki:Main.WebHome##
+**** **##NomeWiki##**: Stringa opzionale che contiene il nome di un subwiki (animal) di una 'farm' di wiki. Il link punterà ad una pagina all'interno di quel subwiki. Esempio: ##miowiki##
+**** **##spazio##**: Nome opzionale dello Spazio del wiki. Se non si specifica uno spazio viene usato lo spazio corrente. Esempio: ##Main##
+**** **##pagina##**: Stringa obbligatoria che contiene il nome della pagina del wiki da collegare. Esempio: ##WebHome##
+** **##Stringaquery##**: Stringa opzionale di query per specificare dei parametri che saranno usati nel rendering dell'URL. Esempio: ##mydata1=5&amp;mydata2=Hello##
+** **##ancora##**: Nome opzionale di un'ancora che punta ad un'altra ancora definita nel link in oggetto. Notare che in XWiki le ancore sono create automaticamente per i titoli. Esempio: ##HTableOfContents##
+* **##interWikiAlias##**: Un alias opzionale [[Inter Wiki&gt;&gt;http://en.wikipedia.org/wiki/InterWiki]] come definito nella InterWiki Map (vedere la  [[Admin Guide&gt;&gt;http://platform.xwiki.org/xwiki/bin/view/AdminGuide/]]).Questo vale solo per i nomi delle pagine wiki. Esempio: ##wikipedia##
+* **##obbiettivo##**: Stringa opzionale che corrisponde all'atttributo HTML ##target## per un elemento link HTML ##A## . Questo elemento viene usato quando si fa il render del link. Di default apre il link nella pagina corrente. Esempi: ##_self##, ##_blank##
+
+=== 2.0 Links ===
+
+|=(% style="width:20%" %)Caratteristica|=Sintassi XWiki 2.0|=(% style="width:20%" %)Risultato
+|Link ad una pagina nello Spazio corrente|{{{[[WebHome]]}}}|[[WebHome]]
+|Link con etichetta|(((
+{{{[[etichetta&gt;&gt;WebHome]]}}}
+{{info}}La sintassi XWiki è supportata anche all'interno delle etichette{{/info}}
+)))|[[etichetta&gt;&gt;WebHome]]
+|Link con sintassi XWiki nell'etichetta|{{{[[**etichetta in grassetto**&gt;&gt;WebHome]]}}}|[[**etichetta in grassetto**&gt;&gt;WebHome]]
+|Link ad una pagina di uno spazio specificato|{{{[[Main.WebHome]]}}}|[[Main.WebHome]]
+|Link ad un subwiki|{{{[[subwiki:Main.WebHome]]}}}|[[xwiki:Main.WebHome]]
+|Link che si apre in una nuova pagina|{{{[[etichetta&gt;&gt;WebHome||rel="__blank"]]}}}|[[etichetta&gt;&gt;WebHome||rel="__blank"]]
+|Link ad un URL direttamente nel testo|{{{Questo è un URL: http://xwiki.org}}}|Questo è un URL: http://xwiki.org
+|Link ad un URL|{{{[[http://xwiki.org]]}}}|[[http://xwiki.org]]
+|Link ad un URL con etichetta|{{{[[XWiki&gt;&gt;http://xwiki.org]]}}}|[[XWiki&gt;&gt;http://xwiki.org]]
+|Link ad un indirizzo email|{{{[[john@smith.net&gt;&gt;mailto:john@smith.net]]}}}|[[john@smith.net&gt;&gt;mailto:john@smith.net]]
+|Link ad un'immagine|{{{[[image:Space2.Page2@img.png&gt;&gt;Space1.Page1]]}}}|[[image:XWiki.XWikiSyntaxLinks@img.png&gt;&gt;Main.WebHome]]
+|Link ad un'immagine con parametri|{{{[[[[image:Space2.Page2@img.png||width="26" height="26"]]&gt;&gt;Space1.Page1]]}}}|[[[[image:XWiki.XWikiSyntaxLinks@img.png||width="26" height="26"]]&gt;&gt;Main.WebHome]]</content>
+</xwikidoc>
