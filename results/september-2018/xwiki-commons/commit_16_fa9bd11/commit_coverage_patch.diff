diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/version/internal/DefaultVersionConstraint.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/version/internal/DefaultVersionConstraint.java
index 4d0058c..33668ba 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/version/internal/DefaultVersionConstraint.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/version/internal/DefaultVersionConstraint.java
@@ -252,50 +252,24 @@ public VersionConstraint merge(VersionConstraint versionConstraint) throws Incom
         } else {
             VersionConstraint mergedConstraint = mergeVersions(versionConstraint);
 
-            return mergedConstraint == null ? mergeRanges(versionConstraint.getRanges()) : mergedConstraint;
+            return mergedConstraint == null ? mergeRanges(versionConstraint) : mergedConstraint;
         }
     }
 
     /**
      * @param versionConstraint the version constraint to merge
      * @return the version constraint with the upper version or null if both are ranges based
-     * @throws IncompatibleVersionConstraintException version constraints are incompatible
      */
     private VersionConstraint mergeVersions(VersionConstraint versionConstraint)
-        throws IncompatibleVersionConstraintException
     {
-        if (getVersion() != null) {
-            return mergeVersions(this, versionConstraint);
-        } else if (versionConstraint.getVersion() != null) {
-            return mergeVersions(versionConstraint, this);
+        if (getVersion() != null && versionConstraint.getVersion() != null) {
+            return getVersion().compareTo(versionConstraint.getVersion()) >= 0 ? this : versionConstraint;
         }
 
         return null;
     }
 
     /**
-     * @param versionConstraintWithVersion the version constraint based on version
-     * @param versionConstraint the version constraint for which we don't know yet if it's based on version or ranges
-     * @return the merged version constraint
-     * @throws IncompatibleVersionConstraintException version constraints are incompatible
-     */
-    private VersionConstraint mergeVersions(VersionConstraint versionConstraintWithVersion,
-        VersionConstraint versionConstraint) throws IncompatibleVersionConstraintException
-    {
-        if (versionConstraint.getVersion() != null) {
-            return versionConstraintWithVersion.getVersion().compareTo(versionConstraint.getVersion()) >= 0
-                ? versionConstraintWithVersion : versionConstraint;
-        } else {
-            if (!versionConstraint.containsVersion(versionConstraintWithVersion.getVersion())) {
-                throw new IncompatibleVersionConstraintException("Version [" + versionConstraintWithVersion.getVersion()
-                    + "] is not part of version constraint [" + versionConstraint + "]");
-            }
-
-            return versionConstraintWithVersion;
-        }
-    }
-
-    /**
      * Create a new {@link DefaultVersionConstraint} instance which is the combination of the provided version ranges
      * and this version ranges.
      *
@@ -304,32 +278,52 @@ private VersionConstraint mergeVersions(VersionConstraint versionConstraintWithV
      * @throws IncompatibleVersionConstraintException the provided version and version ranges are not compatible with
      *             this version constraint
      */
-    // TODO: some optimizations to do like removing unnecessary ranges and avoid validating twice the same ranges
-    private DefaultVersionConstraint mergeRanges(Collection<VersionRangeCollection> otherRanges)
+    private DefaultVersionConstraint mergeRanges(VersionConstraint otherConstraint)
         throws IncompatibleVersionConstraintException
     {
+        Collection<VersionRangeCollection> resolvedRanges = resolveRanges(this);
+        Collection<VersionRangeCollection> otherResolvedRanges = resolveRanges(otherConstraint);
+
+        return mergeRanges(resolvedRanges, otherResolvedRanges);
+    }
+
+    private DefaultVersionConstraint mergeRanges(Collection<VersionRangeCollection> ranges1,
+        Collection<VersionRangeCollection> ranges2) throws IncompatibleVersionConstraintException
+    {
         // Validate
-        validateCompatibility(otherRanges);
 
-        Collection<VersionRangeCollection> newRanges = new ArrayList<>(getRangesInternal().size() + otherRanges.size());
-        newRanges.addAll(getRangesInternal());
-        newRanges.addAll(otherRanges);
+        validateCompatibility(ranges1, ranges2);
+
+        // Merge
+
+        Collection<VersionRangeCollection> newRanges = new ArrayList<>(ranges1.size() + ranges2.size());
+        newRanges.addAll(ranges1);
+        newRanges.addAll(ranges2);
 
         return new DefaultVersionConstraint(newRanges, null);
     }
 
-    /**
-     * @param otherRanges the ranges to validate with this ranges
-     * @throws IncompatibleVersionConstraintException the provided ranges is not compatible with this ranges
-     */
-    private void validateCompatibility(Collection<VersionRangeCollection> otherRanges)
-        throws IncompatibleVersionConstraintException
+    private Collection<VersionRangeCollection> resolveRanges(VersionConstraint constraint)
     {
-        for (VersionRange otherRange : otherRanges) {
-            for (VersionRange range : getRangesInternal()) {
-                if (!range.isCompatible(otherRange)) {
+        Collection<VersionRangeCollection> resolvedRanges = constraint.getRanges();
+
+        // If no range is provided convert the recommended version into a range
+        if (constraint.getVersion() != null) {
+            resolvedRanges = Collections.singleton(new DefaultVersionRangeCollection(
+                Collections.singleton(new DefaultVersionRange(constraint.getVersion(), true, null, true))));
+        }
+
+        return resolvedRanges;
+    }
+
+    private void validateCompatibility(Collection<VersionRangeCollection> ranges1,
+        Collection<VersionRangeCollection> ranges2) throws IncompatibleVersionConstraintException
+    {
+        for (VersionRange range2 : ranges2) {
+            for (VersionRange range1 : ranges1) {
+                if (!range1.isCompatible(range2)) {
                     throw new IncompatibleVersionConstraintException(
-                        "Ranges [" + range + "] and [" + otherRange + "] are incompatibles");
+                        "Ranges [" + range1 + "] and [" + range2 + "] are incompatibles");
                 }
             }
         }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/version/internal/DefaultVersionConstraintTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/version/internal/DefaultVersionConstraintTest.java
index ccaa232..b719728 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/version/internal/DefaultVersionConstraintTest.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/version/internal/DefaultVersionConstraintTest.java
@@ -31,12 +31,14 @@
     @Test
     public void testMerge() throws IncompatibleVersionConstraintException
     {
-        Assert.assertEquals("2.0", new DefaultVersionConstraint("1.0").merge(new DefaultVersionConstraint("2.0"))
-            .getValue());
+        Assert.assertEquals("2.0",
+            new DefaultVersionConstraint("1.0").merge(new DefaultVersionConstraint("2.0")).getValue());
         Assert.assertEquals("{[1.0,2.0]},{[2.0]}",
             new DefaultVersionConstraint("[1.0,2.0]").merge(new DefaultVersionConstraint("[2.0]")).getValue());
-        Assert.assertEquals("2.0", new DefaultVersionConstraint("[1.0,2.0]").merge(new DefaultVersionConstraint("2.0"))
-            .getValue());
+        Assert.assertEquals("{[1.0,2.0]},{[2.0,]}",
+            new DefaultVersionConstraint("[1.0,2.0]").merge(new DefaultVersionConstraint("2.0")).getValue());
+        Assert.assertEquals("{[1.0,]},{[2.0]}",
+            new DefaultVersionConstraint("1.0").merge(new DefaultVersionConstraint("[2.0]")).getValue());
 
         // Invalid
 
@@ -48,7 +50,7 @@ public void testMerge() throws IncompatibleVersionConstraintException
         }
 
         try {
-            new DefaultVersionConstraint("1.0").merge(new DefaultVersionConstraint("[2.0]")).getValue();
+            new DefaultVersionConstraint("[1.0]").merge(new DefaultVersionConstraint("2.0")).getValue();
             Assert.fail("Should have failed");
         } catch (IncompatibleVersionConstraintException expected) {
             // expected
@@ -59,13 +61,14 @@ public void testMerge() throws IncompatibleVersionConstraintException
     public void testParse() throws InvalidVersionRangeException
     {
         Assert.assertEquals("1.0", new DefaultVersionConstraint("1.0").getVersion().getValue());
-        Assert.assertEquals(Arrays.asList(new DefaultVersionRangeCollection("[1.0]")), new DefaultVersionConstraint(
-            "[1.0]").getRanges());
-        Assert.assertEquals(Arrays.asList(new DefaultVersionRangeCollection("[1.0]")), new DefaultVersionConstraint(
-            "{[1.0]}").getRanges());
-        Assert.assertEquals(Arrays.asList(new DefaultVersionRangeCollection("[1.0]"),
-            new DefaultVersionRangeCollection("[1.0,2.0],[1.0]")), new DefaultVersionConstraint(
-            "{[1.0]},{[1.0,2.0],[1.0]}").getRanges());
+        Assert.assertEquals(Arrays.asList(new DefaultVersionRangeCollection("[1.0]")),
+            new DefaultVersionConstraint("[1.0]").getRanges());
+        Assert.assertEquals(Arrays.asList(new DefaultVersionRangeCollection("[1.0]")),
+            new DefaultVersionConstraint("{[1.0]}").getRanges());
+        Assert.assertEquals(
+            Arrays.asList(new DefaultVersionRangeCollection("[1.0]"),
+                new DefaultVersionRangeCollection("[1.0,2.0],[1.0]")),
+            new DefaultVersionConstraint("{[1.0]},{[1.0,2.0],[1.0]}").getRanges());
 
         // Invalid goes to version
 
