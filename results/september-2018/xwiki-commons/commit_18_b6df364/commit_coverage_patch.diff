diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/AbstractExtensionDependency.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/AbstractExtensionDependency.java
index 96e8c1c..b557228 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/AbstractExtensionDependency.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/AbstractExtensionDependency.java
@@ -55,9 +55,14 @@
     protected List<ExtensionRepositoryDescriptor> repositories;
 
     /**
+     * @see #isOptional()
+     */
+    protected boolean optional;
+
+    /**
      * @see #getProperties()
      */
-    protected Map<String, Object> properties = new HashMap<String, Object>();
+    protected Map<String, Object> properties = new HashMap<>();
 
     /**
      * Create new instance by cloning the provided one.
@@ -79,7 +84,7 @@ public AbstractExtensionDependency(ExtensionDependency dependency)
     public AbstractExtensionDependency(ExtensionDependency dependency, VersionConstraint versionConstraint)
     {
         this(dependency.getId(), versionConstraint != null ? versionConstraint : dependency.getVersionConstraint(),
-            dependency.getProperties());
+            dependency.isOptional(), dependency.getProperties());
     }
 
     /**
@@ -88,7 +93,18 @@ public AbstractExtensionDependency(ExtensionDependency dependency, VersionConstr
      */
     public AbstractExtensionDependency(String id, VersionConstraint versionConstraint)
     {
-        this(id, versionConstraint, null);
+        this(id, versionConstraint, false);
+    }
+
+    /**
+     * @param id the id (or feature) of the extension dependency
+     * @param versionConstraint the version constraint of the extension dependency
+     * @param optional true if the dependency is optional
+     * @since 9.6RC1
+     */
+    public AbstractExtensionDependency(String id, VersionConstraint versionConstraint, boolean optional)
+    {
+        this(id, versionConstraint, optional, null);
     }
 
     /**
@@ -105,6 +121,23 @@ public AbstractExtensionDependency(String id, VersionConstraint versionConstrain
         }
     }
 
+    /**
+     * @param id the id (or feature) of the extension dependency
+     * @param versionConstraint the version constraint of the extension dependency
+     * @param optional true if the dependency is optional
+     * @param properties the custom properties of the extension dependency
+     */
+    public AbstractExtensionDependency(String id, VersionConstraint versionConstraint, boolean optional,
+        Map<String, Object> properties)
+    {
+        this.id = id;
+        this.versionConstraint = versionConstraint;
+        this.optional = optional;
+        if (properties != null) {
+            this.properties.putAll(properties);
+        }
+    }
+
     @Override
     public String getId()
     {
@@ -157,14 +190,19 @@ public void setRepositories(Collection<? extends ExtensionRepositoryDescriptor>
      */
     public void addRepository(ExtensionRepositoryDescriptor repository)
     {
-        List<ExtensionRepositoryDescriptor> newrepositories =
-            new ArrayList<ExtensionRepositoryDescriptor>(getRepositories());
+        List<ExtensionRepositoryDescriptor> newrepositories = new ArrayList<>(getRepositories());
         newrepositories.add(repository);
 
         this.repositories = Collections.unmodifiableList(newrepositories);
     }
 
     @Override
+    public boolean isOptional()
+    {
+        return this.optional;
+    }
+
+    @Override
     public boolean isCompatible(Extension extension)
     {
         if (isCompatible(extension.getId())) {
@@ -252,6 +290,8 @@ public int hashCode()
 
         builder.append(getId());
         builder.append(getVersionConstraint());
+        builder.append(isOptional());
+        builder.append(getRepositories());
         builder.append(getProperties());
 
         return builder.toHashCode();
@@ -273,7 +313,9 @@ public boolean equals(Object obj)
 
             builder.append(getId(), otherDependency.getId());
             builder.append(getVersionConstraint(), otherDependency.getVersionConstraint());
+            builder.append(isOptional(), otherDependency.isOptional());
             builder.append(getRepositories(), otherDependency.getRepositories());
+            builder.append(getProperties(), otherDependency.getProperties());
 
             equals = builder.isEquals();
         } else {
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/DefaultExtensionDependency.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/DefaultExtensionDependency.java
index 39a9798..92fd9f9 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/DefaultExtensionDependency.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/DefaultExtensionDependency.java
@@ -43,6 +43,17 @@ public DefaultExtensionDependency(String id, VersionConstraint versionConstraint
     /**
      * @param id the id of the extension dependency
      * @param versionConstraint the version constraint of the extension dependency
+     * @param optional true if the dependency is optional
+     * @since 9.6RC1
+     */
+    public DefaultExtensionDependency(String id, VersionConstraint versionConstraint, boolean optional)
+    {
+        super(id, versionConstraint, optional);
+    }
+
+    /**
+     * @param id the id of the extension dependency
+     * @param versionConstraint the version constraint of the extension dependency
      * @param properties the custom properties of the extension dependency
      */
     public DefaultExtensionDependency(String id, VersionConstraint versionConstraint, Map<String, Object> properties)
@@ -51,6 +62,19 @@ public DefaultExtensionDependency(String id, VersionConstraint versionConstraint
     }
 
     /**
+     * @param id the id of the extension dependency
+     * @param versionConstraint the version constraint of the extension dependency
+     * @param optional true if the dependency is optional
+     * @param properties the custom properties of the extension dependency
+     * @since 9.6RC1
+     */
+    public DefaultExtensionDependency(String id, VersionConstraint versionConstraint, boolean optional,
+        Map<String, Object> properties)
+    {
+        super(id, versionConstraint, optional, properties);
+    }
+
+    /**
      * Create new instance by cloning the provided one.
      *
      * @param dependency the extension dependency to copy
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/ExtensionDependency.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/ExtensionDependency.java
index eff8f02..12e3783 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/ExtensionDependency.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/ExtensionDependency.java
@@ -109,4 +109,14 @@ default boolean isCompatible(ExtensionId extensionId)
     {
         return getId().equals(extensionId.getId()) && getVersionConstraint().isCompatible(extensionId.getVersion());
     }
+
+    /**
+     * @return true if the dependency is not mandatory, usually meaning it will be installed (if valid) by default but
+     *         can be uninstalled without uninstalling backward dependency
+     * @since 9.6RC1
+     */
+    default boolean isOptional()
+    {
+        return false;
+    }
 }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/handler/internal/DefaultExtensionInitializer.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/handler/internal/DefaultExtensionInitializer.java
index 6a1e6ed..288ccf9 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/handler/internal/DefaultExtensionInitializer.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/handler/internal/DefaultExtensionInitializer.java
@@ -29,6 +29,7 @@
 import javax.inject.Inject;
 import javax.inject.Singleton;
 
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.slf4j.Logger;
 import org.xwiki.component.annotation.Component;
 import org.xwiki.component.phase.Initializable;
@@ -178,15 +179,21 @@ private void initializeExtensionInNamespace(InstalledExtension installedExtensio
                         this.installedExtensionRepository.getInstalledExtension(dependency.getId(), namespace);
 
                     if (dependencyExtension == installedExtension) {
-                        throw new ExtensionException(String.format("Extension [] has itself as dependency ([])."
-                            + " It usually mean an extension is installed along with one of it's features.",
+                        throw new ExtensionException(String.format(
+                            "Extension [] has itself as dependency ([])."
+                                + " It usually mean an extension is installed along with one of it's features.",
                             installedExtension, dependency));
                     }
 
                     try {
                         initializeExtensionInNamespace(dependencyExtension, namespace, initializedExtensions);
                     } catch (Exception e) {
-                        throw new ExtensionException("Failed to initialize dependency [" + dependency + "]", e);
+                        if (dependency.isOptional()) {
+                            this.logger.warn("Failed to initialize dependency [{}]: ", dependency,
+                                ExceptionUtils.getRootCauseMessage(e));
+                        } else {
+                            throw new ExtensionException("Failed to initialize dependency [" + dependency + "]", e);
+                        }
                     }
                 }
             }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/ExtensionFactory.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/ExtensionFactory.java
index b31871a..7b319dc 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/ExtensionFactory.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/ExtensionFactory.java
@@ -78,13 +78,15 @@ public ExtensionDependency getExtensionDependency(ExtensionDependency dependency
      * 
      * @param id the id of the extension dependency
      * @param versionConstraint the version constraint of the extension dependency
+     * @param optional true if the dependency is optional
      * @param properties the custom properties of the extension dependency
      * @return unique instance of {@link ExtensionDependency} equals to the passed one
+     * @since 9.6RC1
      */
-    public ExtensionDependency getExtensionDependency(String id, VersionConstraint versionConstraint,
+    public ExtensionDependency getExtensionDependency(String id, VersionConstraint versionConstraint, boolean optional,
         Map<String, Object> properties)
     {
-        return getExtensionDependency(new DefaultExtensionDependency(id, versionConstraint, properties));
+        return getExtensionDependency(new DefaultExtensionDependency(id, versionConstraint, optional, properties));
     }
 
     /**
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/job/internal/AbstractExtensionPlanJob.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/job/internal/AbstractExtensionPlanJob.java
index 93c5085..29e4966 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/job/internal/AbstractExtensionPlanJob.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/job/internal/AbstractExtensionPlanJob.java
@@ -231,7 +231,7 @@ protected void uninstallExtension(InstalledExtension installedExtension, String
             }
         }
 
-        List<ExtensionPlanNode> children = new ArrayList<ExtensionPlanNode>();
+        List<ExtensionPlanNode> children = new ArrayList<>();
 
         // Uninstall backward dependencies
         if (withBackWard) {
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/job/internal/AbstractInstallPlanJob.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/job/internal/AbstractInstallPlanJob.java
index c342919..611ab4a 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/job/internal/AbstractInstallPlanJob.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/job/internal/AbstractInstallPlanJob.java
@@ -32,6 +32,7 @@
 
 import javax.inject.Inject;
 
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.xwiki.component.manager.ComponentLookupException;
 import org.xwiki.component.namespace.NamespaceNotAllowedException;
 import org.xwiki.component.namespace.NamespaceValidator;
@@ -76,7 +77,7 @@
 
         public VersionConstraint versionConstraint;
 
-        public final List<ModifableExtensionPlanNode> duplicates = new ArrayList<ModifableExtensionPlanNode>();
+        public final List<ModifableExtensionPlanNode> duplicates = new ArrayList<>();
 
         // helpers
 
@@ -265,11 +266,7 @@ private void addExtensionNode(ModifableExtensionPlanNode node)
     protected void installExtension(ExtensionId extensionId, String namespace, DefaultExtensionPlanTree parentBranch)
         throws InstallException
     {
-        try {
-            installExtension(extensionId, false, namespace, parentBranch);
-        } catch (ResolveException e) {
-            throw new InstallException("An unexpected exception has been raised", e);
-        }
+        installExtension(extensionId, false, namespace, parentBranch);
     }
 
     /**
@@ -280,10 +277,9 @@ protected void installExtension(ExtensionId extensionId, String namespace, Defau
      * @param namespace the namespace where to install the extension
      * @param parentBranch the children of the parent {@link DefaultExtensionPlanNode}
      * @throws InstallException error when trying to install provided extension
-     * @throws ResolveException unexpected exception has been raised
      */
     protected void installExtension(ExtensionId extensionId, boolean dependency, String namespace,
-        DefaultExtensionPlanTree parentBranch) throws InstallException, ResolveException
+        DefaultExtensionPlanTree parentBranch) throws InstallException
     {
         if (getRequest().isVerbose()) {
             if (namespace != null) {
@@ -498,8 +494,60 @@ private void installExtensionDependency(ExtensionDependency extensionDependency,
         List<ModifableExtensionPlanNode> parentBranch, Map<String, ExtensionDependency> managedDependencies)
         throws InstallException, IncompatibleVersionConstraintException, ResolveException
     {
-        // Make sure the version have a version constraint
+        if (extensionDependency.isOptional()) {
+            installOptionalExtensionDependency(extensionDependency, namespace, parentBranch, managedDependencies);
+        } else {
+            installMandatoryExtensionDependency(extensionDependency, namespace, parentBranch, managedDependencies);
+        }
+    }
+
+    /**
+     * Install provided extension dependency.
+     *
+     * @param extensionDependency the extension dependency to install
+     * @param namespace the namespace where to install the extension
+     * @param parentBranch the children of the parent {@link DefaultExtensionPlanNode}
+     * @param managedDependencies the managed dependencies
+     * @throws InstallException error when trying to install provided extension
+     * @throws ResolveException
+     * @throws IncompatibleVersionConstraintException
+     */
+    private void installOptionalExtensionDependency(ExtensionDependency extensionDependency, String namespace,
+        List<ModifableExtensionPlanNode> parentBranch, Map<String, ExtensionDependency> managedDependencies)
+    {
+        // Save current plan
+        List<ModifableExtensionPlanNode> dependencyBranch = new ArrayList<>(parentBranch);
+
+        try {
+            installMandatoryExtensionDependency(extensionDependency, namespace, dependencyBranch, managedDependencies);
+
+            parentBranch.addAll(dependencyBranch);
+        } catch (Exception e) {
+            if (getRequest().isVerbose()) {
+                this.logger.warn("Failed to install optional dependency [{}]", extensionDependency,
+                    ExceptionUtils.getRootCauseMessage(e));
+            }
+        }
+    }
+
+    /**
+     * Install provided extension dependency.
+     *
+     * @param extensionDependency the extension dependency to install
+     * @param namespace the namespace where to install the extension
+     * @param parentBranch the children of the parent {@link DefaultExtensionPlanNode}
+     * @param managedDependencies the managed dependencies
+     * @throws InstallException error when trying to install provided extension
+     * @throws ResolveException
+     * @throws IncompatibleVersionConstraintException
+     */
+    private void installMandatoryExtensionDependency(ExtensionDependency extensionDependency, String namespace,
+        List<ModifableExtensionPlanNode> parentBranch, Map<String, ExtensionDependency> managedDependencies)
+        throws InstallException, IncompatibleVersionConstraintException, ResolveException
+    {
+        // Make sure the dependency have a version constraint
         if (extensionDependency.getVersionConstraint() == null) {
+            // TODO: install the last version instead of failing ?
             throw new InstallException("Dependency [" + extensionDependency + "] does not have any version constraint");
         }
 
@@ -525,7 +573,7 @@ private void installExtensionDependency(ExtensionDependency extensionDependency,
         // upgrade/downgrade/replace it)
         if (namespace != null && getRequest().isRootModificationsAllowed()
             && hasIncompatileRootDependency(extensionDependency)) {
-            installExtensionDependency(extensionDependency, null, parentBranch, managedDependencies);
+            installMandatoryExtensionDependency(extensionDependency, null, parentBranch, managedDependencies);
 
             return;
         }
@@ -896,7 +944,7 @@ private ModifableExtensionPlanNode installExtension(Extension sourceExtension, E
 
                 try {
                     children = new ArrayList<>();
-                    for (ExtensionDependency extensionDependency : rewrittenExtension.getDependencies()) {
+                    for (ExtensionDependency extensionDependency : dependencies) {
                         this.progressManager.startStep(this);
 
                         // Replace with managed dependency if any
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/DefaultExtensionSerializer.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/DefaultExtensionSerializer.java
index a3e7e8e..60f489b 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/DefaultExtensionSerializer.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/DefaultExtensionSerializer.java
@@ -124,6 +124,8 @@
 
     private static final String ELEMENT_DDEPENDENCY = "dependency";
 
+    private static final String ELEMENT_DDOPTIONAL = "optional";
+
     private static final String ELEMENT_EXTENSIONFEATURES = "extensionfeatures";
 
     private static final String ELEMENT_EFFEATURE = "feature";
@@ -452,10 +454,13 @@ private void loadExtensionDescriptor(MutableExtension extension, Element extensi
                 if (dependency.getNodeName().equals(ELEMENT_DDEPENDENCY)) {
                     Node dependencyIdNode = getNode(dependency, ELEMENT_ID);
                     Node dependencyVersionNode = getNode(dependency, ELEMENT_VERSION);
+                    Node dependencyOptionalNode = getNode(dependency, ELEMENT_DDOPTIONAL);
 
                     dependencies.add(this.factory.getExtensionDependency(dependencyIdNode.getTextContent(),
                         dependencyVersionNode != null
                             ? this.factory.getVersionConstraint(dependencyVersionNode.getTextContent()) : null,
+                        dependencyOptionalNode != null ? Boolean.valueOf(dependencyOptionalNode.getTextContent())
+                            : false,
                         parseProperties((Element) dependency)));
                 }
             }
@@ -776,6 +781,7 @@ private void addDependencies(Document document, Element parentElement, String fi
 
                 addElement(document, dependencyElement, ELEMENT_ID, dependency.getId());
                 addElement(document, dependencyElement, ELEMENT_VERSION, dependency.getVersionConstraint().getValue());
+                addElement(document, dependencyElement, ELEMENT_DDOPTIONAL, dependency.isOptional());
                 addProperties(document, dependencyElement, dependency.getProperties());
             }
         }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/installed/DefaultInstalledExtensionRepository.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/installed/DefaultInstalledExtensionRepository.java
index be4334f..5e93b92 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/installed/DefaultInstalledExtensionRepository.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/installed/DefaultInstalledExtensionRepository.java
@@ -372,9 +372,11 @@ private DefaultInstalledExtension validateExtension(LocalExtension localExtensio
 
                 validateDependency(dependency, namespace, ExtensionUtils.append(managedDependencies, localExtension));
             } catch (InvalidExtensionException e) {
-                // Continue to make sure all extension are validated in the right order
-                if (dependencyException == null) {
-                    dependencyException = e;
+                if (!dependency.isOptional()) {
+                    // Continue to make sure all extensions are validated in the right order
+                    if (dependencyException == null) {
+                        dependencyException = e;
+                    }
                 }
             }
         }
@@ -594,7 +596,7 @@ private void updateMissingBackwardDependencies(DefaultInstalledExtension install
     {
         // Add the extension as backward dependency
         for (ExtensionDependency dependency : installedExtension.getDependencies()) {
-            if (!this.coreExtensionRepository.exists(dependency.getId())) {
+            if (!dependency.isOptional() && !this.coreExtensionRepository.exists(dependency.getId())) {
                 // Get the extension for the dependency feature for the provided namespace
                 DefaultInstalledExtension dependencyLocalExtension =
                     (DefaultInstalledExtension) getInstalledExtension(dependency.getId(), namespace);
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/TestResources.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/TestResources.java
index 9c8584a..9061732 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/TestResources.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/TestResources.java
@@ -73,6 +73,9 @@
     public static final ExtensionId REMOTE_WITHRMISSINGDEPENDENCY_ID =
         new ExtensionId("rwithmissingdependency", "version");
 
+    public static final ExtensionId REMOTE_WITHRMISSINGOPTIONALDEPENDENCY_ID =
+        new ExtensionId("rwithmissingoptionaldependency", "version");
+
     public static final ExtensionId REMOTE_MISSINGDEPENDENCY_ID = new ExtensionId("missingdependency", "version");
 
     public static final ExtensionId REMOTE_UPGRADE10_ID = new ExtensionId("upgrade", "1.0");
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/job/internal/InstallPlanJobTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/job/internal/InstallPlanJobTest.java
index d3ff42e..815dabc 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/job/internal/InstallPlanJobTest.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/job/internal/InstallPlanJobTest.java
@@ -643,6 +643,23 @@ public void testInstallWithManagedDependency() throws Throwable
         Assert.assertEquals(0, node.getChildren().size());
     }
 
+    @Test
+    public void testInstallWithInvalidOptionalDependency() throws Throwable
+    {
+        ExtensionPlan plan = installPlan(TestResources.REMOTE_WITHRMISSINGOPTIONALDEPENDENCY_ID, "namespace");
+
+        Assert.assertEquals(1, plan.getTree().size());
+
+        ExtensionPlanNode node = plan.getTree().iterator().next();
+        ExtensionPlanAction action = node.getAction();
+
+        Assert.assertEquals(TestResources.REMOTE_WITHRMISSINGOPTIONALDEPENDENCY_ID, action.getExtension().getId());
+        Assert.assertEquals(Action.INSTALL, action.getAction());
+        Assert.assertEquals(0, action.getPreviousExtensions().size());
+        Assert.assertEquals("namespace", action.getNamespace());
+        Assert.assertEquals(0, node.getChildren().size());
+    }
+
     // Failures
 
     @Test(expected = InstallException.class)
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/job/internal/UninstallJobTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/job/internal/UninstallJobTest.java
index 7646c89..9df9131 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/job/internal/UninstallJobTest.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/job/internal/UninstallJobTest.java
@@ -21,12 +21,14 @@
 
 import org.junit.Assert;
 import org.junit.Test;
-import org.xwiki.extension.ResolveException;
 import org.xwiki.extension.TestResources;
+import org.xwiki.extension.UninstallException;
 import org.xwiki.extension.handler.ExtensionHandler;
 import org.xwiki.extension.test.AbstractExtensionHandlerTest;
 import org.xwiki.extension.test.TestExtensionHandler;
 
+import static org.junit.Assert.fail;
+
 public class UninstallJobTest extends AbstractExtensionHandlerTest
 {
     private TestResources resources;
@@ -54,12 +56,12 @@ public void testUninstall() throws Throwable
         uninstall(TestResources.INSTALLED_ID, null);
 
         Assert.assertFalse(this.handler.getExtensions().get(null).contains(this.resources.installed));
-        Assert.assertNull(this.installedExtensionRepository.getInstalledExtension(TestResources.INSTALLED_ID.getId(),
-            null));
+        Assert.assertNull(
+            this.installedExtensionRepository.getInstalledExtension(TestResources.INSTALLED_ID.getId(), null));
 
         Assert.assertTrue(this.handler.getExtensions().get(null).contains(this.resources.installedDependency));
-        Assert.assertNotNull(this.installedExtensionRepository.getInstalledExtension(
-            TestResources.INSTALLED_DEPENDENCY_ID.getId(), null));
+        Assert.assertNotNull(this.installedExtensionRepository
+            .getInstalledExtension(TestResources.INSTALLED_DEPENDENCY_ID.getId(), null));
     }
 
     @Test
@@ -68,12 +70,12 @@ public void testUninstallWithBackwarDepencency() throws Throwable
         uninstall(TestResources.INSTALLED_DEPENDENCY_ID, null);
 
         Assert.assertFalse(this.handler.getExtensions().get(null).contains(this.resources.installed));
-        Assert.assertNull(this.installedExtensionRepository.getInstalledExtension(TestResources.INSTALLED_ID.getId(),
-            null));
+        Assert.assertNull(
+            this.installedExtensionRepository.getInstalledExtension(TestResources.INSTALLED_ID.getId(), null));
 
         Assert.assertFalse(this.handler.getExtensions().get(null).contains(this.resources.installedDependency));
-        Assert.assertNull(this.installedExtensionRepository.getInstalledExtension(
-            TestResources.INSTALLED_DEPENDENCY_ID.getId(), null));
+        Assert.assertNull(this.installedExtensionRepository
+            .getInstalledExtension(TestResources.INSTALLED_DEPENDENCY_ID.getId(), null));
     }
 
     @Test
@@ -83,7 +85,9 @@ public void testUninstallTwice() throws Throwable
 
         try {
             uninstall(TestResources.INSTALLED_ID, null);
-        } catch (ResolveException expected) {
+
+            fail("Should have failed to uninstall the extension twice");
+        } catch (UninstallException expected) {
             // expected
         }
     }
@@ -102,12 +106,12 @@ public void testUninstallFromNamespace() throws Throwable
         uninstall(TestResources.INSTALLED_ID, "namespace1");
 
         Assert.assertFalse(this.handler.getExtensions().get("namespace1").contains(this.resources.installed));
-        Assert.assertNull(this.installedExtensionRepository.getInstalledExtension(TestResources.INSTALLED_ID.getId(),
-            "namespace1"));
+        Assert.assertNull(
+            this.installedExtensionRepository.getInstalledExtension(TestResources.INSTALLED_ID.getId(), "namespace1"));
 
         Assert.assertTrue(this.handler.getExtensions().get("namespace2").contains(this.resources.installed));
-        Assert.assertNotNull(this.installedExtensionRepository.getInstalledExtension(
-            TestResources.INSTALLED_ID.getId(), "namespace2"));
+        Assert.assertNotNull(
+            this.installedExtensionRepository.getInstalledExtension(TestResources.INSTALLED_ID.getId(), "namespace2"));
     }
 
     @Test
@@ -124,18 +128,18 @@ public void testUninstallFromNamespaceWithBackwarDepencency() throws Throwable
         uninstall(TestResources.INSTALLED_DEPENDENCY_ID, "namespace1");
 
         Assert.assertFalse(this.handler.getExtensions().get("namespace1").contains(this.resources.installed));
-        Assert.assertNull(this.installedExtensionRepository.getInstalledExtension(TestResources.INSTALLED_ID.getId(),
-            "namespace1"));
+        Assert.assertNull(
+            this.installedExtensionRepository.getInstalledExtension(TestResources.INSTALLED_ID.getId(), "namespace1"));
         Assert.assertFalse(this.handler.getExtensions().get("namespace1").contains(this.resources.installedDependency));
-        Assert.assertNull(this.installedExtensionRepository.getInstalledExtension(
-            TestResources.INSTALLED_DEPENDENCY_ID.getId(), "namespace1"));
+        Assert.assertNull(this.installedExtensionRepository
+            .getInstalledExtension(TestResources.INSTALLED_DEPENDENCY_ID.getId(), "namespace1"));
 
         Assert.assertTrue(this.handler.getExtensions().get("namespace2").contains(this.resources.installed));
-        Assert.assertNotNull(this.installedExtensionRepository.getInstalledExtension(
-            TestResources.INSTALLED_ID.getId(), "namespace2"));
+        Assert.assertNotNull(
+            this.installedExtensionRepository.getInstalledExtension(TestResources.INSTALLED_ID.getId(), "namespace2"));
         Assert.assertTrue(this.handler.getExtensions().get("namespace2").contains(this.resources.installed));
-        Assert.assertNotNull(this.installedExtensionRepository.getInstalledExtension(
-            TestResources.INSTALLED_ID.getId(), "namespace2"));
+        Assert.assertNotNull(
+            this.installedExtensionRepository.getInstalledExtension(TestResources.INSTALLED_ID.getId(), "namespace2"));
     }
 
     @Test
@@ -152,11 +156,11 @@ public void testUninstallFromAllNamespaces() throws Throwable
         uninstall(TestResources.INSTALLED_ID, null);
 
         Assert.assertFalse(this.handler.getExtensions().get("namespace1").contains(this.resources.installed));
-        Assert.assertNull(this.installedExtensionRepository.getInstalledExtension(TestResources.INSTALLED_ID.getId(),
-            "namespace1"));
+        Assert.assertNull(
+            this.installedExtensionRepository.getInstalledExtension(TestResources.INSTALLED_ID.getId(), "namespace1"));
 
         Assert.assertFalse(this.handler.getExtensions().get("namespace2").contains(this.resources.installed));
-        Assert.assertNull(this.installedExtensionRepository.getInstalledExtension(TestResources.INSTALLED_ID.getId(),
-            "namespace2"));
+        Assert.assertNull(
+            this.installedExtensionRepository.getInstalledExtension(TestResources.INSTALLED_ID.getId(), "namespace2"));
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/AbstractExtensionHandlerTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/AbstractExtensionHandlerTest.java
index 362eac5..ec5e0b0 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/AbstractExtensionHandlerTest.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/AbstractExtensionHandlerTest.java
@@ -84,6 +84,10 @@ protected Job executeJob(String jobId, Request request, LogLevel failFrom) throw
 
         installJob.join();
 
+        if (installJob.getStatus().getError() != null) {
+            throw installJob.getStatus().getError();
+        }
+
         List<LogEvent> errors = installJob.getStatus().getLog().getLogsFrom(failFrom);
         if (!errors.isEmpty()) {
             throw errors.get(0).getThrowable() != null ? errors.get(0).getThrowable()
@@ -240,6 +244,7 @@ protected InstallRequest createInstallRequest(ExtensionId extensionId, String[]
             }
         }
         installRequest.setRootModificationsAllowed(rootModifications);
+        installRequest.setVerbose(false);
 
         return installRequest;
     }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/resources/repository/remote/rwithmissingoptionaldependency-version.test b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/resources/repository/remote/rwithmissingoptionaldependency-version.test
new file mode 100644
index 0000000..e69de29
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/resources/repository/remote/rwithmissingoptionaldependency-version.xed b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/resources/repository/remote/rwithmissingoptionaldependency-version.xed
new file mode 100644
index 0000000..17d8a2f
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/resources/repository/remote/rwithmissingoptionaldependency-version.xed
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<extension>
+  <id>rwithmissingoptionaldependency</id>
+  <version>version</version>
+  <type>test</type>
+  <dependencies>
+    <dependency>
+      <id>doesnotexist</id>
+      <version>version</version>
+      <optional>true</optional>
+    </dependency>
+  </dependencies>
+</extension>
\ No newline at end of file
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/DefaultMavenExtensionDependency.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/DefaultMavenExtensionDependency.java
index c59a7c2..38f41bf 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/DefaultMavenExtensionDependency.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/DefaultMavenExtensionDependency.java
@@ -68,15 +68,12 @@ public DefaultMavenExtensionDependency(ExtensionDependency dependency)
      */
     public DefaultMavenExtensionDependency(String extensionId, VersionConstraint constraint, Dependency mavenDependency)
     {
-        super(extensionId, constraint);
+        super(extensionId, constraint, mavenDependency.isOptional());
 
-        if (mavenDependency != null) {
-            // custom properties lost when saving
-            putProperty(PKEY_MAVEN_DEPENDENCY, mavenDependency);
-            // custom properties to remember
-            putProperty(PKEY_MAVEN_DEPENDENCY_SCOPE, mavenDependency.getScope());
-            putProperty(PKEY_MAVEN_DEPENDENCY_OPTIONAL, mavenDependency.isOptional());
-        }
+        // custom properties lost when saving
+        putProperty(PKEY_MAVEN_DEPENDENCY, mavenDependency);
+        // custom properties to remember
+        putProperty(PKEY_MAVEN_DEPENDENCY_SCOPE, mavenDependency.getScope());
     }
 
     /**
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/converter/ModelConverter.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/converter/ModelConverter.java
index 2c8162f..f06759e 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/converter/ModelConverter.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-maven/src/main/java/org/xwiki/extension/maven/internal/converter/ModelConverter.java
@@ -191,8 +191,8 @@ private MavenExtension convertToExtension(Model model)
 
         // dependencies
         for (Dependency mavenDependency : model.getDependencies()) {
-            if (!mavenDependency.isOptional() && (mavenDependency.getScope() == null
-                || mavenDependency.getScope().equals("compile") || mavenDependency.getScope().equals("runtime"))) {
+            if (mavenDependency.getScope() == null || mavenDependency.getScope().equals("compile")
+                || mavenDependency.getScope().equals("runtime")) {
                 ExtensionDependency extensionDependency = toExtensionDependency(mavenDependency, model, repositories);
 
                 extension.addDependency(extensionDependency);
diff --git a/xwiki-commons-core/xwiki-commons-repository/xwiki-commons-repository-model/src/main/resources/xwiki.rest.extension.model.xsd b/xwiki-commons-core/xwiki-commons-repository/xwiki-commons-repository-model/src/main/resources/xwiki.rest.extension.model.xsd
index 26a3079..70a940d 100644
--- a/xwiki-commons-core/xwiki-commons-repository/xwiki-commons-repository-model/src/main/resources/xwiki.rest.extension.model.xsd
+++ b/xwiki-commons-core/xwiki-commons-repository/xwiki-commons-repository-model/src/main/resources/xwiki.rest.extension.model.xsd
@@ -49,7 +49,10 @@
       <element name="constraint" type="string" maxOccurs="1"
         minOccurs="1">
       </element>
-      <element name="repositories" type="extension:ExtensionRepository" minOccurs="0" maxOccurs="unbounded"></element>
+      <element name="optional" type="boolean"></element>
+      <element name="repositories" type="extension:ExtensionRepository"
+        minOccurs="0" maxOccurs="unbounded">
+      </element>
     </sequence>
   </complexType>
 
