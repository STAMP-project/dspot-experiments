diff --git a/pom.xml b/pom.xml
index 68dce39..a40aaa9 100644
--- a/pom.xml
+++ b/pom.xml
@@ -144,6 +144,10 @@
     <maven-enforcer.version>1.4.1</maven-enforcer.version>
     <!-- The version of Maven used by enforcer plugin -->
     <maven.maven-enforcer.version>2.2.1</maven.maven-enforcer.version>
+
+    <!-- The recommended version of known extensions to use -->
+    <xwiki.extension.recommendedVersion.commons>org.xwiki.commons:.*/${commons.version}</xwiki.extension.recommendedVersion.commons>
+    <xwiki.extension.recommendedVersion>${xwiki.extension.recommendedVersion.commons}</xwiki.extension.recommendedVersion>
   </properties>
   <prerequisites>
     <!-- Custom lifecycle configuration (used by webjar handler for example) require 3.3.9 -->
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/pom.xml b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/pom.xml
index f2ffee8..6ceb656 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/pom.xml
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/pom.xml
@@ -154,7 +154,9 @@
                 **/DefaultVersion.java,
                 **/AbstractInstallPlanJob.java,
                 **/UnmodifiableUtils.java,
-                **/AbstractExtension.java
+                **/AbstractExtension.java,
+                **/DefaultExtensionManagerConfiguration.java,
+                **/ExtensionUtils.java
               </excludes>
             </configuration>
           </execution>
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/ExtensionManagerConfiguration.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/ExtensionManagerConfiguration.java
index 32c5949..78f61fe 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/ExtensionManagerConfiguration.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/ExtensionManagerConfiguration.java
@@ -25,6 +25,7 @@
 import org.xwiki.component.annotation.Role;
 import org.xwiki.extension.repository.ExtensionRepositoryDescriptor;
 import org.xwiki.extension.repository.ExtensionRepositoryId;
+import org.xwiki.extension.version.VersionConstraint;
 
 /**
  * Provide some general extension manager configuration.
@@ -67,4 +68,15 @@ default boolean resolveCoreExtensions()
     {
         return true;
     }
+
+    /**
+     * @param id the identifier of the extension
+     * @param defaultVersion the version of the extension
+     * @return the recommended version or null if there is no specifically recommended version
+     * @since 9.6
+     */
+    default VersionConstraint getRecomendedVersionConstraint(String id, VersionConstraint defaultVersion)
+    {
+        return null;
+    }
 }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/DefaultExtensionManagerConfiguration.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/DefaultExtensionManagerConfiguration.java
index 39d7aeb..da9d6f0 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/DefaultExtensionManagerConfiguration.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/DefaultExtensionManagerConfiguration.java
@@ -41,10 +41,16 @@
 import org.xwiki.component.annotation.Component;
 import org.xwiki.configuration.ConfigurationSource;
 import org.xwiki.environment.Environment;
+import org.xwiki.extension.CoreExtension;
+import org.xwiki.extension.ExtensionId;
 import org.xwiki.extension.ExtensionManagerConfiguration;
+import org.xwiki.extension.repository.CoreExtensionRepository;
 import org.xwiki.extension.repository.DefaultExtensionRepositoryDescriptor;
 import org.xwiki.extension.repository.ExtensionRepositoryDescriptor;
 import org.xwiki.extension.repository.ExtensionRepositoryId;
+import org.xwiki.extension.version.Version;
+import org.xwiki.extension.version.VersionConstraint;
+import org.xwiki.properties.ConverterManager;
 
 /**
  * Default implementation of {@link ExtensionManagerConfiguration}.
@@ -102,6 +108,12 @@
     @Inject
     private ExtensionFactory extensionFactory;
 
+    @Inject
+    private Provider<CoreExtensionRepository> coreExtensionRepository;
+
+    @Inject
+    private ConverterManager converter;
+
     // Cache
 
     /**
@@ -109,6 +121,31 @@
      */
     private File localRepository;
 
+    private List<RecommendedVersion> recommendedVersions;
+
+    private static class RecommendedVersion
+    {
+        private Pattern idPattern;
+
+        private VersionConstraint versionConstraint;
+
+        RecommendedVersion(Pattern idPattern, VersionConstraint version)
+        {
+            this.idPattern = idPattern;
+            this.versionConstraint = version;
+        }
+
+        boolean matches(String id)
+        {
+            return this.idPattern.matcher(id).matches();
+        }
+
+        public VersionConstraint getVersionConstraint()
+        {
+            return this.versionConstraint;
+        }
+    }
+
     /**
      * @return extension manage home folder
      */
@@ -144,8 +181,7 @@ public File getLocalRepository()
         if (repositoryStrings.isEmpty()) {
             repositories = null;
         } else {
-            Map<String, ExtensionRepositoryDescriptor> repositoriesMap =
-                new LinkedHashMap<>();
+            Map<String, ExtensionRepositoryDescriptor> repositoriesMap = new LinkedHashMap<>();
             for (String repositoryString : repositoryStrings) {
                 if (StringUtils.isNotBlank(repositoryString)) {
                     try {
@@ -243,4 +279,44 @@ public boolean resolveCoreExtensions()
     {
         return this.configuration.get().getProperty(CK_CORE_PREFIX + "resolve", true);
     }
+
+    @Override
+    public VersionConstraint getRecomendedVersionConstraint(String id, VersionConstraint defaultVersion)
+    {
+        if (this.recommendedVersions == null) {
+            CoreExtensionRepository repository = this.coreExtensionRepository.get();
+
+            CoreExtension environmentExtension = repository.getEnvironmentExtension();
+
+            if (environmentExtension != null) {
+                String listString = environmentExtension.getProperty("xwiki.extension.recommendedVersion");
+                List<String> list = ExtensionUtils.importPropertyStringList(listString, true);
+                List<ExtensionId> extensions = this.converter.convert(ExtensionId.TYPE_LIST, list);
+
+                List<RecommendedVersion> versions = new ArrayList<>(extensions.size());
+                for (ExtensionId extensionId : extensions) {
+                    versions.add(new RecommendedVersion(Pattern.compile(extensionId.getId()),
+                        this.extensionFactory.getVersionConstraint(extensionId.getVersion().getValue())));
+                }
+
+                this.recommendedVersions = versions;
+            } else {
+                this.recommendedVersions = Collections.emptyList();
+            }
+
+        }
+
+        // Searching matching recommended version
+        for (RecommendedVersion version : this.recommendedVersions) {
+            if (version.matches(id)) {
+                if (!version.getVersionConstraint().equals(defaultVersion)) {
+                    return version.getVersionConstraint();
+                }
+
+                break;
+            }
+        }
+
+        return null;
+    }
 }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/ExtensionUtils.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/ExtensionUtils.java
index d9a77f1..33ff1b8 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/ExtensionUtils.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/ExtensionUtils.java
@@ -33,11 +33,14 @@
 import org.xwiki.extension.CoreExtension;
 import org.xwiki.extension.Extension;
 import org.xwiki.extension.ExtensionDependency;
+import org.xwiki.extension.ExtensionManagerConfiguration;
 import org.xwiki.extension.InstalledExtension;
 import org.xwiki.extension.LocalExtension;
 import org.xwiki.extension.MutableExtension;
 import org.xwiki.extension.RemoteExtension;
 import org.xwiki.extension.rating.RatingExtension;
+import org.xwiki.extension.version.IncompatibleVersionConstraintException;
+import org.xwiki.extension.version.VersionConstraint;
 import org.xwiki.extension.wrap.WrappingCoreExtension;
 import org.xwiki.extension.wrap.WrappingExtension;
 import org.xwiki.extension.wrap.WrappingInstalledExtension;
@@ -61,6 +64,33 @@ private ExtensionUtils()
 
     /**
      * @param dependency the initial dependency
+     * @param configuration the configuration
+     * @param factory the factory
+     * @return the modified {@link ExtensionDependency} or null if it does not match any recommended dependency
+     * @since 9.6
+     */
+    public static ExtensionDependency getRecommendedDependency(ExtensionDependency dependency,
+        ExtensionManagerConfiguration configuration, ExtensionFactory factory)
+    {
+        VersionConstraint recommendedVersionConstraint =
+            configuration.getRecomendedVersionConstraint(dependency.getId(), dependency.getVersionConstraint());
+
+        if (recommendedVersionConstraint != null) {
+            try {
+                recommendedVersionConstraint = dependency.getVersionConstraint().merge(recommendedVersionConstraint);
+
+                return factory.getExtensionDependency(dependency.getId(), recommendedVersionConstraint,
+                    dependency.isOptional(), dependency.getProperties());
+            } catch (IncompatibleVersionConstraintException e) {
+                // Not compatible, don't use the recommended version
+            }
+        }
+
+        return null;
+    }
+
+    /**
+     * @param dependency the initial dependency
      * @param managedDependencies the managed dependencies
      * @param extension the extension with the passed dependency
      * @return the actual dependency to resolve
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/converter/ExtensionIdConverter.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/converter/ExtensionIdConverter.java
index f6bbcfa..22be262 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/converter/ExtensionIdConverter.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/converter/ExtensionIdConverter.java
@@ -24,11 +24,13 @@
 import java.util.Collection;
 import java.util.List;
 
+import javax.inject.Inject;
 import javax.inject.Singleton;
 
 import org.apache.commons.lang3.StringUtils;
 import org.xwiki.component.annotation.Component;
 import org.xwiki.extension.ExtensionId;
+import org.xwiki.extension.internal.ExtensionFactory;
 import org.xwiki.extension.version.Version;
 import org.xwiki.extension.version.internal.DefaultVersion;
 import org.xwiki.properties.converter.AbstractConverter;
@@ -43,6 +45,9 @@
 @Singleton
 public class ExtensionIdConverter extends AbstractConverter<ExtensionId>
 {
+    @Inject
+    private ExtensionFactory factory;
+
     private static int countBackslashes(String str, int index)
     {
         for (int i = index - 1; i >= 0; --i) {
@@ -62,10 +67,24 @@ private static int countBackslashes(String str, int index)
      */
     public static List<ExtensionId> toExtensionIdList(Collection<?> values, Version defaultVersion)
     {
+        return toExtensionIdList(values, defaultVersion, null);
+    }
+
+    /**
+     * @param values the values to convert
+     * @param defaultVersion the default version to set in the {@link ExtensionId} if none can be extracted from the
+     *            passed <code>value</code>
+     * @param factory the factory used to create the {@link Version} instance
+     * @return the list of {@link ExtensionId}s created from the passed value
+     * @since 9.6
+     */
+    public static List<ExtensionId> toExtensionIdList(Collection<?> values, Version defaultVersion,
+        ExtensionFactory factory)
+    {
         List<ExtensionId> list = new ArrayList<>(values.size());
 
         for (Object value : values) {
-            list.add(toExtensionId(value, defaultVersion));
+            list.add(toExtensionId(value, defaultVersion, factory));
         }
 
         return list;
@@ -79,20 +98,33 @@ private static int countBackslashes(String str, int index)
      */
     public static ExtensionId toExtensionId(Object value, Version defaultVersion)
     {
+        return toExtensionId(value, defaultVersion, null);
+    }
+
+    /**
+     * @param value the value to convert
+     * @param defaultVersion the default version to set in the {@link ExtensionId} if none can be extracted from the
+     *            passed <code>value</code>
+     * @param factory the factory used to create the {@link Version} instance
+     * @return the {@link ExtensionId} created from the passed value
+     * @since 9.6
+     */
+    public static ExtensionId toExtensionId(Object value, Version defaultVersion, ExtensionFactory factory)
+    {
         if (value != null) {
             String valueString = value.toString();
-            return toExtensionId(valueString, valueString.length() - 1, defaultVersion);
+            return toExtensionId(valueString, valueString.length() - 1, defaultVersion, factory);
         }
 
         return null;
     }
 
-    private static ExtensionId toExtensionId(String value, int end, Version defaultVersion)
+    private static ExtensionId toExtensionId(String value, int end, Version defaultVersion, ExtensionFactory factory)
     {
         String valueString = value;
 
         int index = valueString.lastIndexOf('/');
-        String id = valueString;
+        String id;
         Version version;
         if (index > 0 && index < end) {
             int backslashes = countBackslashes(valueString, index);
@@ -106,12 +138,13 @@ private static ExtensionId toExtensionId(String value, int end, Version defaultV
                 index -= backslashes - (backslashes / 2);
 
                 if (backslashes % 2 == 1) {
-                    return toExtensionId(valueString, index - backslashes - 1, defaultVersion);
+                    return toExtensionId(valueString, index - backslashes - 1, defaultVersion, factory);
                 }
             }
 
             id = valueString.substring(0, index);
-            version = new DefaultVersion(valueString.substring(index + 1));
+            String versionString = valueString.substring(index + 1);
+            version = factory != null ? factory.getVersion(versionString) : new DefaultVersion(versionString);
         } else {
             id = valueString;
             version = defaultVersion;
@@ -156,7 +189,7 @@ public static String toString(ExtensionId value)
     @Override
     protected ExtensionId convertToType(Type targetType, Object value)
     {
-        return toExtensionId(value, null);
+        return toExtensionId(value, null, this.factory);
     }
 
     @Override
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/job/internal/AbstractInstallPlanJob.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/job/internal/AbstractInstallPlanJob.java
index 611ab4a..ed44b23 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/job/internal/AbstractInstallPlanJob.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/job/internal/AbstractInstallPlanJob.java
@@ -41,11 +41,13 @@
 import org.xwiki.extension.Extension;
 import org.xwiki.extension.ExtensionDependency;
 import org.xwiki.extension.ExtensionId;
+import org.xwiki.extension.ExtensionManagerConfiguration;
 import org.xwiki.extension.InstallException;
 import org.xwiki.extension.InstalledExtension;
 import org.xwiki.extension.ResolveException;
 import org.xwiki.extension.UninstallException;
 import org.xwiki.extension.handler.ExtensionHandler;
+import org.xwiki.extension.internal.ExtensionFactory;
 import org.xwiki.extension.internal.ExtensionUtils;
 import org.xwiki.extension.job.ExtensionRequest;
 import org.xwiki.extension.job.plan.ExtensionPlanAction;
@@ -137,6 +139,12 @@ public void setChildren(Collection<? extends ExtensionPlanNode> children)
     @Inject
     protected NamespaceValidator namespaceResolver;
 
+    @Inject
+    protected ExtensionManagerConfiguration configuration;
+
+    @Inject
+    protected ExtensionFactory factory;
+
     /**
      * Used to make sure dependencies are compatible between each other in the whole plan.
      * <p>
@@ -512,7 +520,7 @@ private void installExtensionDependency(ExtensionDependency extensionDependency,
      * @throws ResolveException
      * @throws IncompatibleVersionConstraintException
      */
-    private void installOptionalExtensionDependency(ExtensionDependency extensionDependency, String namespace,
+    private boolean installOptionalExtensionDependency(ExtensionDependency extensionDependency, String namespace,
         List<ModifableExtensionPlanNode> parentBranch, Map<String, ExtensionDependency> managedDependencies)
     {
         // Save current plan
@@ -522,12 +530,16 @@ private void installOptionalExtensionDependency(ExtensionDependency extensionDep
             installMandatoryExtensionDependency(extensionDependency, namespace, dependencyBranch, managedDependencies);
 
             parentBranch.addAll(dependencyBranch);
+
+            return true;
         } catch (Exception e) {
             if (getRequest().isVerbose()) {
                 this.logger.warn("Failed to install optional dependency [{}]", extensionDependency,
                     ExceptionUtils.getRootCauseMessage(e));
             }
         }
+
+        return false;
     }
 
     /**
@@ -951,8 +963,20 @@ private ModifableExtensionPlanNode installExtension(Extension sourceExtension, E
                         extensionDependency =
                             ExtensionUtils.getDependency(extensionDependency, managedDependencies, rewrittenExtension);
 
-                        installExtensionDependency(extensionDependency, namespace, children,
-                            ExtensionUtils.append(managedDependencies, rewrittenExtension));
+                        // Try installing recommended version (if any)
+                        boolean valid = false;
+                        ExtensionDependency recommendedDependency = ExtensionUtils
+                            .getRecommendedDependency(extensionDependency, this.configuration, this.factory);
+                        if (recommendedDependency != null) {
+                            valid = installOptionalExtensionDependency(recommendedDependency, namespace, children,
+                                ExtensionUtils.append(managedDependencies, rewrittenExtension));
+                        }
+
+                        // If recommended version is invalid, try the one provided by the extension
+                        if (!valid) {
+                            installExtensionDependency(extensionDependency, namespace, children,
+                                ExtensionUtils.append(managedDependencies, rewrittenExtension));
+                        }
 
                         this.progressManager.endStep(this);
                     }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/version/VersionConstraint.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/version/VersionConstraint.java
index 29e8f72..c1ee6ec 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/version/VersionConstraint.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/version/VersionConstraint.java
@@ -61,7 +61,7 @@
     boolean containsVersion(Version version);
 
     /**
-     * Indicate of the provided {@link Version} is compatible with this version.
+     * Indicate if the provided {@link Version} is compatible with this version.
      * <p>
      * The difference with {@link #containsVersion(Version)} is that this method is trying to determine if this version
      * should work with this constraint while {@link #containsVersion(Version)} indicate if that's the ideal version for
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/internal/DefaultExtensionManagerConfigurationTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/internal/DefaultExtensionManagerConfigurationTest.java
index 7687849..7bd0eb1 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/internal/DefaultExtensionManagerConfigurationTest.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/internal/DefaultExtensionManagerConfigurationTest.java
@@ -29,35 +29,30 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
+import org.slf4j.Logger;
 import org.xwiki.configuration.internal.MemoryConfigurationSource;
-import org.xwiki.environment.Environment;
 import org.xwiki.extension.ExtensionManagerConfiguration;
 import org.xwiki.extension.repository.DefaultExtensionRepositoryDescriptor;
 import org.xwiki.extension.repository.ExtensionRepositoryDescriptor;
-import org.xwiki.test.LogRule;
+import org.xwiki.test.AllLogRule;
 import org.xwiki.test.annotation.BeforeComponent;
 import org.xwiki.test.annotation.ComponentList;
-import org.xwiki.test.mockito.MockitoComponentManagerRule;
+import org.xwiki.test.mockito.MockitoComponentMockingRule;
 
 /**
  * Unit test for {@link DefaultExtensionManagerConfiguration}.
  *
  * @version $Id$
  */
-@ComponentList({ DefaultExtensionManagerConfiguration.class, ExtensionFactory.class })
+@ComponentList({ ExtensionFactory.class })
 public class DefaultExtensionManagerConfigurationTest
 {
     @Rule
-    public final MockitoComponentManagerRule componentManager = new MockitoComponentManagerRule();
+    public final MockitoComponentMockingRule<ExtensionManagerConfiguration> componentManager =
+        new MockitoComponentMockingRule<>(DefaultExtensionManagerConfiguration.class, Arrays.asList(Logger.class));
 
     @Rule
-    public final LogRule logCapture = new LogRule()
-    {
-        {
-            record(LogLevel.WARN);
-            recordLoggingForType(DefaultExtensionManagerConfiguration.class);
-        }
-    };
+    public AllLogRule log = new AllLogRule();
 
     private ExtensionManagerConfiguration configuration;
 
@@ -66,9 +61,6 @@
     @BeforeComponent
     public void registerComponents() throws Exception
     {
-        // Register a Mocked Environment since we need to provide one.
-        this.componentManager.registerMockComponent(Environment.class);
-
         // Register some in-memory Configuration Source for the test
         this.source = this.componentManager.registerMemoryConfigurationSource();
     }
@@ -76,7 +68,7 @@ public void registerComponents() throws Exception
     @Before
     public void setUp() throws Exception
     {
-        this.configuration = this.componentManager.getInstance(ExtensionManagerConfiguration.class);
+        this.configuration = this.componentManager.getComponentUnderTest();
     }
 
     @Test
@@ -89,17 +81,17 @@ public void testGetRepositoriesWithInvalid() throws Exception
         Assert.assertEquals(
             Arrays.asList(new DefaultExtensionRepositoryDescriptor("id", "type", new URI("http://url"))),
             new ArrayList<ExtensionRepositoryDescriptor>(this.configuration.getExtensionRepositoryDescriptors()));
-        Assert.assertEquals(1, this.logCapture.size());
+        Assert.assertEquals(1, this.log.size());
         Assert.assertEquals("Ignoring invalid repository configuration [invalid]. Root cause "
             + "[ExtensionManagerConfigurationException: Invalid repository configuration format for [invalid]. Should "
-            + "have been matching [([^:]+):([^:]+):(.+)].]", this.logCapture.getMessage(0));
+            + "have been matching [([^:]+):([^:]+):(.+)].]", this.log.getMessage(0));
     }
 
     @Test
     public void testGetExtensionRepositoryDescriptorsEmpty()
     {
         Assert.assertNull(this.configuration.getExtensionRepositoryDescriptors());
-        Assert.assertEquals(0, this.logCapture.size());
+        Assert.assertEquals(0, this.log.size());
     }
 
     @Test
@@ -120,6 +112,6 @@ public void testGetExtensionRepositoryDescriptorsWithProperties() throws URISynt
         Assert.assertEquals(new URI("http://url"), descriptor.getURI());
         Assert.assertEquals("value", descriptor.getProperty("property"));
         Assert.assertEquals("other value", descriptor.getProperty("property.with.dots"));
-        Assert.assertEquals(0, this.logCapture.size());
+        Assert.assertEquals(0, this.log.size());
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/job/internal/InstallPlanJobTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/job/internal/InstallPlanJobTest.java
index 815dabc..979385b 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/job/internal/InstallPlanJobTest.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/job/internal/InstallPlanJobTest.java
@@ -644,6 +644,66 @@ public void testInstallWithManagedDependency() throws Throwable
     }
 
     @Test
+    public void testInstallWithRecommendedManagedDependency() throws Throwable
+    {
+        // Change the version of the dependency trough recommended version
+        this.coreRepository.getConfigurableEnvironmentExtension().putProperty("xwiki.extension.recommendedVersion",
+            "upgrade/2.0");
+
+        ExtensionPlan plan = installPlan(TestResources.REMOTE_WITH_MANAGED_DEPENDENY_ID, "namespace");
+
+        Assert.assertEquals(1, plan.getTree().size());
+
+        ExtensionPlanNode node = plan.getTree().iterator().next();
+        ExtensionPlanAction action = node.getAction();
+
+        Assert.assertEquals(TestResources.REMOTE_WITH_MANAGED_DEPENDENY_ID, action.getExtension().getId());
+        Assert.assertEquals(Action.INSTALL, action.getAction());
+        Assert.assertEquals(0, action.getPreviousExtensions().size());
+        Assert.assertEquals("namespace", action.getNamespace());
+        Assert.assertEquals(1, node.getChildren().size());
+
+        node = node.getChildren().iterator().next();
+        action = node.getAction();
+
+        Assert.assertEquals(TestResources.REMOTE_UPGRADE20_ID, action.getExtension().getId());
+        Assert.assertEquals(Action.INSTALL, action.getAction());
+        Assert.assertEquals(0, action.getPreviousExtensions().size());
+        Assert.assertEquals("namespace", action.getNamespace());
+        Assert.assertEquals(0, node.getChildren().size());
+    }
+
+    @Test
+    public void testInstallWithInvalidRecommendedManagedDependency() throws Throwable
+    {
+        // Change the version of the dependency trough recommended version
+        this.coreRepository.getConfigurableEnvironmentExtension().putProperty("xwiki.extension.recommendedVersion",
+            "upgrade/10.0");
+
+        ExtensionPlan plan = installPlan(TestResources.REMOTE_WITH_MANAGED_DEPENDENY_ID, "namespace");
+
+        Assert.assertEquals(1, plan.getTree().size());
+
+        ExtensionPlanNode node = plan.getTree().iterator().next();
+        ExtensionPlanAction action = node.getAction();
+
+        Assert.assertEquals(TestResources.REMOTE_WITH_MANAGED_DEPENDENY_ID, action.getExtension().getId());
+        Assert.assertEquals(Action.INSTALL, action.getAction());
+        Assert.assertEquals(0, action.getPreviousExtensions().size());
+        Assert.assertEquals("namespace", action.getNamespace());
+        Assert.assertEquals(1, node.getChildren().size());
+
+        node = node.getChildren().iterator().next();
+        action = node.getAction();
+
+        Assert.assertEquals(TestResources.REMOTE_UPGRADE10_ID, action.getExtension().getId());
+        Assert.assertEquals(Action.INSTALL, action.getAction());
+        Assert.assertEquals(0, action.getPreviousExtensions().size());
+        Assert.assertEquals("namespace", action.getNamespace());
+        Assert.assertEquals(0, node.getChildren().size());
+    }
+
+    @Test
     public void testInstallWithInvalidOptionalDependency() throws Throwable
     {
         ExtensionPlan plan = installPlan(TestResources.REMOTE_WITHRMISSINGOPTIONALDEPENDENCY_ID, "namespace");
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/AbstractExtensionHandlerTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/AbstractExtensionHandlerTest.java
index ec5e0b0..81e0f0f 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/AbstractExtensionHandlerTest.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/AbstractExtensionHandlerTest.java
@@ -25,6 +25,7 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.xwiki.cache.CacheManager;
+import org.xwiki.configuration.internal.MemoryConfigurationSource;
 import org.xwiki.extension.ExtensionId;
 import org.xwiki.extension.InstalledExtension;
 import org.xwiki.extension.LocalExtension;
@@ -57,6 +58,8 @@
 
     protected JobExecutor jobExecutor;
 
+    protected MemoryConfigurationSource memoryConfigurationSource;
+
     @Before
     public void setUp() throws Exception
     {
@@ -65,6 +68,8 @@ public void setUp() throws Exception
         this.installedExtensionRepository = this.mocker.getInstance(InstalledExtensionRepository.class);
 
         this.mocker.registerMockComponent(CacheManager.class);
+
+        this.memoryConfigurationSource = this.mocker.registerMemoryConfigurationSource();
     }
 
     protected ExtensionPlanNode getNode(ExtensionId id, Collection<ExtensionPlanNode> nodes)
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/ConfigurableDefaultCoreExtensionRepository.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/ConfigurableDefaultCoreExtensionRepository.java
index 2dd0fa5..51dd6c5 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/ConfigurableDefaultCoreExtensionRepository.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/test/ConfigurableDefaultCoreExtensionRepository.java
@@ -24,6 +24,7 @@
 import javax.inject.Singleton;
 
 import org.xwiki.component.annotation.Component;
+import org.xwiki.extension.CoreExtension;
 import org.xwiki.extension.ExtensionId;
 import org.xwiki.extension.repository.internal.core.DefaultCoreExtension;
 import org.xwiki.extension.repository.internal.core.DefaultCoreExtensionRepository;
@@ -33,6 +34,32 @@
 @Singleton
 public class ConfigurableDefaultCoreExtensionRepository extends DefaultCoreExtensionRepository
 {
+    public class ConfigurableEnvironmentExtension extends DefaultCoreExtension
+    {
+        public ConfigurableEnvironmentExtension(DefaultCoreExtensionRepository repository)
+        {
+            super(repository, null, new ExtensionId("environment", "version"), "type");
+        }
+    }
+
+    private ConfigurableEnvironmentExtension environmentExtension;
+
+    public ConfigurableDefaultCoreExtensionRepository()
+    {
+        this.environmentExtension = new ConfigurableEnvironmentExtension(this);
+    }
+
+    @Override
+    public CoreExtension getEnvironmentExtension()
+    {
+        return getConfigurableEnvironmentExtension();
+    }
+
+    public ConfigurableEnvironmentExtension getConfigurableEnvironmentExtension()
+    {
+        return this.environmentExtension;
+    }
+
     @Override
     public void addExtension(DefaultCoreExtension extension)
     {
