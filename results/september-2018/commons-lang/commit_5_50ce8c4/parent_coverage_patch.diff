diff --git a/src/main/java/org/apache/commons/lang3/JavaVersion.java b/src/main/java/org/apache/commons/lang3/JavaVersion.java
index 148c99e..60258f6 100644
--- a/src/main/java/org/apache/commons/lang3/JavaVersion.java
+++ b/src/main/java/org/apache/commons/lang3/JavaVersion.java
@@ -95,13 +95,6 @@
     JAVA_10(10.0f, "10"),
 
     /**
-     * Java 11
-     *
-     * @since 3.8
-     */
-    JAVA_11(11.0f, "11"),
-
-    /**
      * The most recent java version. Mainly introduced to avoid to break when a new version of Java is used.
      */
     JAVA_RECENT(maxVersion(), Float.toString(maxVersion()));
@@ -187,8 +180,6 @@ static JavaVersion get(final String nom) {
             return JAVA_9;
         } else if ("10".equals(nom)) {
             return JAVA_10;
-        } else if ("11".equals(nom)) {
-            return JAVA_11;
         }
         if (nom == null) {
             return null;
diff --git a/src/main/java/org/apache/commons/lang3/SystemUtils.java b/src/main/java/org/apache/commons/lang3/SystemUtils.java
index f91628a..a6d9c2e 100644
--- a/src/main/java/org/apache/commons/lang3/SystemUtils.java
+++ b/src/main/java/org/apache/commons/lang3/SystemUtils.java
@@ -985,18 +985,6 @@
      */
     public static final boolean IS_JAVA_10 = getJavaVersionMatches("10");
 
-    /**
-     * <p>
-     * Is {@code true} if this is Java version 11 (also 11.x versions).
-     * </p>
-     * <p>
-     * The field will return {@code false} if {@link #JAVA_VERSION} is {@code null}.
-     * </p>
-     *
-     * @since 3.8
-     */
-    public static final boolean IS_JAVA_11 = getJavaVersionMatches("11");
-
     // Operating system checks
     // -----------------------------------------------------------------------
     // These MUST be declared after those above as they depend on the
diff --git a/src/test/java/org/apache/commons/lang3/JavaVersionTest.java b/src/test/java/org/apache/commons/lang3/JavaVersionTest.java
index 7a6cbe2..ad28565 100644
--- a/src/test/java/org/apache/commons/lang3/JavaVersionTest.java
+++ b/src/test/java/org/apache/commons/lang3/JavaVersionTest.java
@@ -56,11 +56,10 @@ public void testGetJavaVersion() {
         assertEquals("1.8 failed", JAVA_1_8, get("1.8"));
         assertEquals("9 failed", JAVA_9, get("9"));
         assertEquals("10 failed", JAVA_10, get("10"));
-        assertEquals("11 failed", JavaVersion.JAVA_11, get("11"));
         assertEquals("1.10 failed", JAVA_RECENT, get("1.10"));
         // assertNull("2.10 unexpectedly worked", get("2.10"));
         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5"));
-        assertEquals("Unhandled", JAVA_RECENT, get("12")); // LANG-1384
+        assertEquals("Unhandled", JAVA_RECENT, get("11")); // LANG-1384
     }
 
     @Test
diff --git a/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java b/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java
index 8e5610c..b97cb81 100644
--- a/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java
@@ -29,7 +29,6 @@
 import static org.apache.commons.lang3.JavaVersion.JAVA_1_8;
 import static org.apache.commons.lang3.JavaVersion.JAVA_9;
 import static org.apache.commons.lang3.JavaVersion.JAVA_10;
-import static org.apache.commons.lang3.JavaVersion.JAVA_11;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
@@ -409,7 +408,6 @@ public void testIsJavaVersionAtLeast() throws Exception {
             assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_1_8));
             assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_9));
             assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_10));
-            assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_11));
         } else if (SystemUtils.IS_JAVA_1_8) {
             assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_1));
             assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_2));
@@ -421,7 +419,6 @@ public void testIsJavaVersionAtLeast() throws Exception {
             assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_8));
             assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_9));
             assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_10));
-            assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_11));
         } else if (SystemUtils.IS_JAVA_9) {
             assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_1));
             assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_2));
@@ -433,7 +430,6 @@ public void testIsJavaVersionAtLeast() throws Exception {
             assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_8));
             assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_9));
             assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_10));
-            assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_11));
         } else if (SystemUtils.IS_JAVA_10) {
             assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_1));
             assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_2));
@@ -445,19 +441,6 @@ public void testIsJavaVersionAtLeast() throws Exception {
             assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_8));
             assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_9));
             assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_10));
-            assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_11));
-        } else if (SystemUtils.IS_JAVA_11) {
-            assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_1));
-            assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_2));
-            assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_3));
-            assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_4));
-            assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_5));
-            assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_6));
-            assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_7));
-            assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_8));
-            assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_9));
-            assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_10));
-            assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_11));
         }
     }
 
