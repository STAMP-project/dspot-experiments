diff --git a/src/main/java/org/apache/commons/io/FilenameUtils.java b/src/main/java/org/apache/commons/io/FilenameUtils.java
index 2035622..8dd9cf2 100644
--- a/src/main/java/org/apache/commons/io/FilenameUtils.java
+++ b/src/main/java/org/apache/commons/io/FilenameUtils.java
@@ -351,19 +351,19 @@ public class FilenameUtils {
             return null;
         }
 
-        failIfNullBytePresent(filename);
+        String cleanFileName = filterNullBytes(filename);
 
-        int size = filename.length();
+        int size = cleanFileName.length();
         if (size == 0) {
-            return filename;
+            return cleanFileName;
         }
-        final int prefix = getPrefixLength(filename);
+        final int prefix = getPrefixLength(cleanFileName);
         if (prefix < 0) {
             return null;
         }
 
         final char[] array = new char[size + 2];  // +1 for possible extra slash, +2 for arraycopy
-        filename.getChars(0, filename.length(), array, 0);
+        cleanFileName.getChars(0, cleanFileName.length(), array, 0);
 
         // fix separators throughout
         final char otherSeparator = separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;
@@ -768,12 +768,9 @@ public class FilenameUtils {
             return null;
         }
         if (len > filename.length()) {
-            failIfNullBytePresent(filename + UNIX_SEPARATOR);
-            return filename + UNIX_SEPARATOR;
+            return filterNullBytes(filename + UNIX_SEPARATOR);  // we know this only happens for unix
         }
-        String path = filename.substring(0, len);
-        failIfNullBytePresent(path);
-        return path;
+        return filterNullBytes(filename.substring(0, len));
     }
 
     /**
@@ -851,9 +848,7 @@ public class FilenameUtils {
         if (prefix >= filename.length() || index < 0 || prefix >= endIndex) {
             return "";
         }
-        String path = filename.substring(prefix, endIndex);
-        failIfNullBytePresent(path);
-        return path;
+        return filterNullBytes(filename.substring(prefix, endIndex));
     }
 
     /**
@@ -970,9 +965,9 @@ public class FilenameUtils {
         if (filename == null) {
             return null;
         }
-        failIfNullBytePresent(filename);
-        final int index = indexOfLastSeparator(filename);
-        return filename.substring(index + 1);
+        String cleanFileName = filterNullBytes(filename);
+        final int index = indexOfLastSeparator(cleanFileName);
+        return cleanFileName.substring(index + 1);
     }
 
     /**
@@ -992,6 +987,18 @@ public class FilenameUtils {
     }
 
     /**
+     * Filters the supplied path for null byte characters. Can be used for normalizations to avoid poison byte attacks.
+     *
+     * This mimicks behaviour of 1.7u40+. Once minimum java requirement is above this version, this code can be removed.
+     *
+     * @param path the path
+     * @return the supplied string without any embedded null characters
+     */
+    private static String filterNullBytes(String path) {
+        return path.contains("\u0000") ? path.replace("\u0000", "") : path;
+    }
+
+    /**
      * Gets the base name, minus the full path and extension, from a full filename.
      * <p>
      * This method will handle a file in either Unix or Windows format.
@@ -1065,13 +1072,13 @@ public class FilenameUtils {
         if (filename == null) {
             return null;
         }
-        failIfNullBytePresent(filename);
+        String cleanFileName = filterNullBytes(filename);
 
-        final int index = indexOfExtension(filename);
+        final int index = indexOfExtension(cleanFileName);
         if (index == NOT_FOUND) {
-            return filename;
+            return cleanFileName;
         } else {
-            return filename.substring(0, index);
+            return cleanFileName.substring(0, index);
         }
     }
 
diff --git a/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java b/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java
index 06fed64..552129f 100644
--- a/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java
+++ b/src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java
@@ -216,18 +216,8 @@ public class FilenameUtilsTestCase extends FileBasedTestCase {
         assertEquals(null, FilenameUtils.normalize("//server/../a"));
         assertEquals(null, FilenameUtils.normalize("//server/.."));
         assertEquals(SEP + SEP + "server" + SEP + "", FilenameUtils.normalize("//server/"));
-    }
-
-    public void testNormalize_with_nullbytes() throws Exception {
-        try {
-            assertEquals("a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("a\\b/c\u0000.txt"));
-        } catch (IllegalArgumentException ignore) {
-        }
-
-        try {
-            assertEquals("a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\u0000a\\b/c.txt"));
-        } catch (IllegalArgumentException ignore) {
-        }
+        assertEquals("a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("a\\b/c\u0000.txt"));
+        assertEquals("a" + SEP + "b" + SEP + "c.txt", FilenameUtils.normalize("\u0000a\\b/c.txt"));
     }
 
     public void testNormalizeUnixWin() throws Exception {
@@ -575,14 +565,7 @@ public class FilenameUtilsTestCase extends FileBasedTestCase {
         assertEquals("\\", FilenameUtils.getPrefix("\\a\\b\\c.txt"));
         assertEquals("~\\", FilenameUtils.getPrefix("~\\a\\b\\c.txt"));
         assertEquals("~user\\", FilenameUtils.getPrefix("~user\\a\\b\\c.txt"));
-    }
-
-    public void testGetPrefix_with_nullbyte() {
-        try {
-            assertEquals("~user\\", FilenameUtils.getPrefix("~u\u0000ser\\a\\b\\c.txt"));
-        } catch (IllegalArgumentException ignore) {
-
-        }
+        assertEquals("~user\\", FilenameUtils.getPrefix("~u\u0000ser\\a\\b\\c.txt"));
     }
 
     public void testGetPath() {
@@ -619,18 +602,9 @@ public class FilenameUtilsTestCase extends FileBasedTestCase {
         assertEquals("a/b/", FilenameUtils.getPath("//server/a/b/c.txt"));
         assertEquals("a/b/", FilenameUtils.getPath("~/a/b/c.txt"));
         assertEquals("a/b/", FilenameUtils.getPath("~user/a/b/c.txt"));
+        assertEquals("a/b/", FilenameUtils.getPath("~user/a/\u0000b/c.txt"));
     }
 
-    public void testGetPath_with_nullbyte() {
-        try {
-            assertEquals("a/b/", FilenameUtils.getPath("~user/a/\u0000b/c.txt"));
-        } catch (IllegalArgumentException ignore) {
-
-        }
-        ;
-    }
-
-
     public void testGetPathNoEndSeparator() {
         assertEquals(null, FilenameUtils.getPath(null));
         assertEquals("", FilenameUtils.getPath("noseperator.inthispath"));
@@ -665,14 +639,7 @@ public class FilenameUtilsTestCase extends FileBasedTestCase {
         assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("//server/a/b/c.txt"));
         assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("~/a/b/c.txt"));
         assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("~user/a/b/c.txt"));
-    }
-
-    public void testGetPathNoEndSeparator_with_null_byte() {
-        try {
-            assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("~user/a\u0000/b/c.txt"));
-        } catch (IllegalArgumentException ignore) {
-
-        }
+        assertEquals("a/b", FilenameUtils.getPathNoEndSeparator("~user/a\u0000/b/c.txt"));
     }
 
     public void testGetFullPath() {
@@ -768,14 +735,7 @@ public class FilenameUtilsTestCase extends FileBasedTestCase {
         assertEquals("c", FilenameUtils.getName("a/b/c"));
         assertEquals("", FilenameUtils.getName("a/b/c/"));
         assertEquals("c", FilenameUtils.getName("a\\b\\c"));
-    }
-
-    public void testInjectionFailure() {
-        try {
-            assertEquals("c", FilenameUtils.getName("a\\b\\\u0000c"));
-        } catch (IllegalArgumentException ignore) {
-
-        }
+        assertEquals("c", FilenameUtils.getName("a\\b\\\u0000c"));
     }
 
     public void testGetBaseName() {
@@ -786,14 +746,7 @@ public class FilenameUtilsTestCase extends FileBasedTestCase {
         assertEquals("", FilenameUtils.getBaseName("a/b/c/"));
         assertEquals("c", FilenameUtils.getBaseName("a\\b\\c"));
         assertEquals("file.txt", FilenameUtils.getBaseName("file.txt.bak"));
-    }
-
-    public void testGetBaseName_with_nullByte() {
-        try {
-            assertEquals("file.txt", FilenameUtils.getBaseName("fil\u0000e.txt.bak"));
-        } catch (IllegalArgumentException ignore) {
-
-        }
+        assertEquals("file.txt", FilenameUtils.getBaseName("fil\u0000e.txt.bak"));
     }
 
     public void testGetExtension() {
