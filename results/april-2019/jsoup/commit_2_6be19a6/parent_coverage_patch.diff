diff --git a/CHANGES b/CHANGES
index ffa0141..6f2e2aa 100644
--- a/CHANGES
+++ b/CHANGES
@@ -14,9 +14,6 @@ jsoup changelog
     HTML parser. Previously that only happened when the XML parser was specified.
     <https://github.com/jhy/jsoup/issues/1009>
 
-  * Improvement: if the document's input character does not support encoding, flip it to one that does.
-    <https://github.com/jhy/jsoup/issues/1007>
-
 *** Release 1.11.3 [2018-Apr-15]
   * Improvement: CDATA sections are now treated as whitespace preserving (regardless of the containing element), and are
     round-tripped into output HTML.
diff --git a/src/main/java/org/jsoup/helper/DataUtil.java b/src/main/java/org/jsoup/helper/DataUtil.java
index f4012fc..0e8e819 100644
--- a/src/main/java/org/jsoup/helper/DataUtil.java
+++ b/src/main/java/org/jsoup/helper/DataUtil.java
@@ -166,12 +166,7 @@ public final class DataUtil {
                 // io exception when parsing (not seen before because reading the stream as we go)
                 throw e.ioException();
             }
-            Charset charset = Charset.forName(charsetName);
-            doc.outputSettings().charset(charset);
-            if (!charset.canEncode()) {
-                // some charsets can read but not encode; switch to an encodable charset and update the meta el
-                doc.charset(Charset.forName(defaultCharset));
-            }
+            doc.outputSettings().charset(charsetName);
         }
         input.close();
         return doc;
diff --git a/src/test/java/org/jsoup/parser/HtmlParserTest.java b/src/test/java/org/jsoup/parser/HtmlParserTest.java
index 108083b..f583ed6 100644
--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java
+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java
@@ -18,7 +18,6 @@ import org.jsoup.select.Elements;
 import org.junit.Ignore;
 import org.junit.Test;
 
-import java.io.ByteArrayInputStream;
 import java.io.File;
 import java.io.IOException;
 import java.util.List;
@@ -1195,17 +1194,4 @@ public class HtmlParserTest {
 
       assertEquals("A Certain Kind of Test", doc.head().select("title").text());
   }
-
-    @Test public void fallbackToUtfIfCantEncode() throws IOException {
-        // that charset can't be encoded, so make sure we flip to utf
-
-        String in = "<html><meta charset=\"ISO-2022-CN\"/>One</html>";
-        Document doc = Jsoup.parse(new ByteArrayInputStream(in.getBytes()), null, "");
-
-        assertEquals("UTF-8", doc.charset().name());
-        assertEquals("One", doc.text());
-
-        String html = doc.outerHtml();
-        assertEquals("<html><head><meta charset=\"UTF-8\"></head><body>One</body></html>", TextUtil.stripNewlines(html));
-    }
 }
