diff --git a/CHANGES b/CHANGES
index d969c24..edf0e86 100644
--- a/CHANGES
+++ b/CHANGES
@@ -22,9 +22,6 @@ jsoup changelog
     many pages.
     <https://github.com/jhy/jsoup/issues/797>
 
-  * Improvement: added Element.nextElementSiblings() and Element.previousElementSiblings()
-    https://github.com/jhy/jsoup/pull/1054
-
   * Bugfix: when converting a Jsoup document to a W3C DOM, if an element is namespaced but not in a defined namespace,
     set it to the global namespace.
     <https://github.com/jhy/jsoup/issues/848>
diff --git a/src/main/java/org/jsoup/nodes/Element.java b/src/main/java/org/jsoup/nodes/Element.java
index b4dcbf2..dc8ec1c 100644
--- a/src/main/java/org/jsoup/nodes/Element.java
+++ b/src/main/java/org/jsoup/nodes/Element.java
@@ -688,12 +688,23 @@ public class Element extends Node {
     }
 
     /**
-     * Get each of the sibling elements that come after this element.
+     * Get all the siblings after this element.
      *
-     * @return each of the element siblings after this element, or an empty list if there are no next sibling elements
+     * @return  all the siblings after this element, or empty list if there is no siblings after this
      */
-    public Elements nextElementSiblings() {
-        return nextElementSiblings(true);
+    public List<Element> nextElementSiblings() {
+        if (parentNode == null) {
+            return Collections.emptyList();
+        }
+
+        List<Element> siblings = parent().childElementsList();
+        int index = indexInList(this, siblings);
+        Validate.notNull(index);
+
+        if (siblings.size() > index + 1) {
+            return siblings.subList(index + 1, siblings.size());
+        }
+        return Collections.emptyList();
     }
 
     /**
@@ -713,20 +724,23 @@ public class Element extends Node {
     }
 
     /**
-     * Get each of the element siblings before this element.
+     * Get all the element siblings before this element.
      *
-     * @return the previous element siblings, or an empty list if there are none.
+     * @return all the previous element siblings, or empty list if no previous siblings
      */
-    public Elements previousElementSiblings() {
-        return nextElementSiblings(false);
-    }
+    public List<Element> previousElementSiblings() {
+        if (parentNode == null) {
+            return Collections.emptyList();
+        }
 
-    private Elements nextElementSiblings(boolean next) {
-        Elements els = new Elements();
-        if (parentNode == null)
-            return  els;
-        els.add(this);
-        return next ?  els.nextAll() : els.prevAll();
+        List<Element> siblings = parent().childElementsList();
+        int index = indexInList(this, siblings);
+        Validate.notNull(index);
+
+        if (index > 0 && index < siblings.size()) {
+            return siblings.subList(0, index);
+        }
+        return Collections.emptyList();
     }
 
     /**
diff --git a/src/main/java/org/jsoup/select/Elements.java b/src/main/java/org/jsoup/select/Elements.java
index fe865b8..fcf1ee0 100644
--- a/src/main/java/org/jsoup/select/Elements.java
+++ b/src/main/java/org/jsoup/select/Elements.java
@@ -510,7 +510,7 @@ public class Elements extends ArrayList<Element> {
     }
 
     /**
-     * Get each of the following element siblings of each element in this list.
+     * Get all of the following element siblings of each element in this list.
      * @return all following element siblings.
      */
     public Elements nextAll() {
@@ -518,7 +518,7 @@ public class Elements extends ArrayList<Element> {
     }
 
     /**
-     * Get each of the following element siblings of each element in this list, that match the query.
+     * Get all of the following element siblings of each element in this list, filtered by the query.
      * @param query CSS query to match siblings against
      * @return all following element siblings.
      */
@@ -544,7 +544,7 @@ public class Elements extends ArrayList<Element> {
     }
 
     /**
-     * Get each of the previous element siblings of each element in this list.
+     * Get all of the previous element siblings of each element in this list.
      * @return all previous element siblings.
      */
     public Elements prevAll() {
@@ -552,7 +552,7 @@ public class Elements extends ArrayList<Element> {
     }
 
     /**
-     * Get each of the previous element siblings of each element in this list, that match the query.
+     * Get all of the previous element siblings of each element in this list, filtered by the query.
      * @param query CSS query to match siblings against
      * @return all previous element siblings.
      */
diff --git a/src/test/java/org/jsoup/nodes/ElementTest.java b/src/test/java/org/jsoup/nodes/ElementTest.java
index 9219624..c985eaa 100644
--- a/src/test/java/org/jsoup/nodes/ElementTest.java
+++ b/src/test/java/org/jsoup/nodes/ElementTest.java
@@ -1325,13 +1325,13 @@ public class ElementTest {
             "<li id='a'>a</li>" +
             "<li id='b'>b</li>" +
             "<li id='c'>c</li>" +
-            "</ul> Not An Element but a node" +
+            "</ul>" +
             "<div id='div'>" +
             "<li id='d'>d</li>" +
             "</div>");
 
         Element element = doc.getElementById("a");
-        Elements elementSiblings = element.nextElementSiblings();
+        List<Element> elementSiblings = element.nextElementSiblings();
         assertNotNull(elementSiblings);
         assertEquals(2, elementSiblings.size());
         assertEquals("b", elementSiblings.get(0).id());
@@ -1355,7 +1355,11 @@ public class ElementTest {
 
         Element div = doc.getElementById("div");
         List<Element> elementSiblings4 = div.nextElementSiblings();
-        assertEquals(0, elementSiblings4.size());
+        try {
+            Element elementSibling = elementSiblings4.get(0);
+            fail("This element should has no next siblings");
+        } catch (IndexOutOfBoundsException e) {
+        }
     }
 
     @Test
@@ -1370,7 +1374,7 @@ public class ElementTest {
             "</div>");
 
         Element element = doc.getElementById("b");
-        Elements elementSiblings = element.previousElementSiblings();
+        List<Element> elementSiblings = element.previousElementSiblings();
         assertNotNull(elementSiblings);
         assertEquals(1, elementSiblings.size());
         assertEquals("a", elementSiblings.get(0).id());
@@ -1388,6 +1392,10 @@ public class ElementTest {
 
         Element ul = doc.getElementById("ul");
         List<Element> elementSiblings3 = ul.previousElementSiblings();
-        assertEquals(0, elementSiblings3.size());
+        try {
+            Element element3 = elementSiblings3.get(0);
+            fail("This element should has no previous siblings");
+        } catch (IndexOutOfBoundsException e) {
+        }
     }
 }
