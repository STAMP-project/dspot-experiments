package com.github.mustachejava;


public class AmplConcurrencyTest {
    static java.util.Random r = new java.security.SecureRandom();

    private static class TestObject {
        final int a;

        final int b;

        final int c;

        int aa() throws java.lang.InterruptedException {
            java.lang.Thread.sleep(com.github.mustachejava.AmplConcurrencyTest.r.nextInt(10));
            return a;
        }

        int bb() throws java.lang.InterruptedException {
            java.lang.Thread.sleep(com.github.mustachejava.AmplConcurrencyTest.r.nextInt(10));
            return b;
        }

        int cc() throws java.lang.InterruptedException {
            java.lang.Thread.sleep(com.github.mustachejava.AmplConcurrencyTest.r.nextInt(10));
            return c;
        }

        java.util.concurrent.Callable<java.lang.Integer> calla() throws java.lang.InterruptedException {
            return () -> {
                java.lang.Thread.sleep(com.github.mustachejava.AmplConcurrencyTest.r.nextInt(10));
                return a;
            };
        }

        java.util.concurrent.Callable<java.lang.Integer> callb() throws java.lang.InterruptedException {
            return () -> {
                java.lang.Thread.sleep(com.github.mustachejava.AmplConcurrencyTest.r.nextInt(10));
                return b;
            };
        }

        java.util.concurrent.Callable<java.lang.Integer> callc() throws java.lang.InterruptedException {
            return () -> {
                java.lang.Thread.sleep(com.github.mustachejava.AmplConcurrencyTest.r.nextInt(10));
                return c;
            };
        }

        private TestObject(int a, int b, int c) {
            this.a = a;
            this.b = b;
            this.c = c;
        }
    }

    static java.lang.String render(com.github.mustachejava.AmplConcurrencyTest.TestObject to) {
        return ((((to.a) + ":") + (to.b)) + ":") + (to.c);
    }

    private java.util.concurrent.atomic.AtomicInteger render(com.github.mustachejava.Mustache test, java.util.concurrent.ExecutorService es) throws java.lang.InterruptedException {
        final java.util.concurrent.atomic.AtomicInteger total = new java.util.concurrent.atomic.AtomicInteger();
        final java.util.concurrent.Semaphore semaphore = new java.util.concurrent.Semaphore(100);
        for (int i = 0; i < 100000; i++) {
            semaphore.acquire();
            es.submit(() -> {
                try {
                    com.github.mustachejava.AmplConcurrencyTest.TestObject testObject = new com.github.mustachejava.AmplConcurrencyTest.TestObject(com.github.mustachejava.AmplConcurrencyTest.r.nextInt(), com.github.mustachejava.AmplConcurrencyTest.r.nextInt(), com.github.mustachejava.AmplConcurrencyTest.r.nextInt());
                    java.io.StringWriter sw = new java.io.StringWriter();
                    test.execute(sw, testObject).close();
                    if (!(com.github.mustachejava.AmplConcurrencyTest.render(testObject).equals(sw.toString()))) {
                        total.incrementAndGet();
                    }
                } catch (java.io.IOException e) {
                    e.printStackTrace();
                    java.lang.System.exit(1);
                } finally {
                    semaphore.release();
                }
            });
        }
        semaphore.acquire(100);
        return total;
    }

    public void testSimple_literalMutationString314656_failAssert0_add316641_failAssert0_literalMutationNumber321979_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    c.compile(" imple.html");
                    com.github.mustachejava.Mustache m = c.compile(" imple.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 9999;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimple_literalMutationString314656 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimple_literalMutationString314656_failAssert0_add316641 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimple_literalMutationString314656_failAssert0_add316641_failAssert0_literalMutationNumber321979 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template  imple.html not found", expected.getMessage());
        }
    }

    public void testSimple_literalMutationString314656_failAssert0_add316641_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                c.compile(" imple.html");
                com.github.mustachejava.Mustache m = c.compile(" imple.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimple_literalMutationString314656 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimple_literalMutationString314656_failAssert0_add316641 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template  imple.html not found", expected.getMessage());
        }
    }

    public void testSimple_add314684_literalMutationString315418_failAssert0_literalMutationString322298_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.DefaultMustacheFactory o_testSimple_add314684__1 = createMustacheFactory();
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("V>U<x?%M_V");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.Writer o_testSimple_add314684__8 = m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                java.lang.String o_testSimple_add314684__15 = com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimple_add314684_literalMutationString315418 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimple_add314684_literalMutationString315418_failAssert0_literalMutationString322298 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template V>U<x?%M_V not found", expected.getMessage());
        }
    }

    public void testSimple_literalMutationNumber314669_literalMutationString315387_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache m = c.compile("vsn;$=X:9^&");
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer o_testSimple_literalMutationNumber314669__7 = m.execute(sw, new java.lang.Object() {
                java.lang.String name = "Chris";

                int value = 5000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            java.lang.String o_testSimple_literalMutationNumber314669__15 = com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSimple_literalMutationNumber314669_literalMutationString315387 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template vsn;$=X:9^& not found", expected.getMessage());
        }
    }

    public void testSimple_literalMutationString314656_failAssert0_add316641_failAssert0_add324472_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    c.compile(" imple.html");
                    com.github.mustachejava.Mustache m = c.compile(" imple.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testSimple_literalMutationString314656 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimple_literalMutationString314656_failAssert0_add316641 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimple_literalMutationString314656_failAssert0_add316641_failAssert0_add324472 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template  imple.html not found", expected.getMessage());
        }
    }

    public void testSimple_literalMutationString314656_failAssert0null316836_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile(" imple.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testSimple_literalMutationString314656 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimple_literalMutationString314656_failAssert0null316836 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template  imple.html not found", expected.getMessage());
        }
    }

    public void testSimple_literalMutationString314657_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache m = c.compile("}1<[TtL_igC");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, new java.lang.Object() {
                java.lang.String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSimple_literalMutationString314657 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template }1<[TtL_igC not found", expected.getMessage());
        }
    }

    public void testSimple_literalMutationString314656_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache m = c.compile(" imple.html");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, new java.lang.Object() {
                java.lang.String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSimple_literalMutationString314656 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template  imple.html not found", expected.getMessage());
        }
    }

    public void testSimple_literalMutationString314653() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        com.github.mustachejava.MustacheFactory c = createMustacheFactory();
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        com.github.mustachejava.Mustache m = c.compile("");
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        java.io.StringWriter sw = new java.io.StringWriter();
        java.io.Writer o_testSimple_literalMutationString314653__7 = m.execute(sw, new java.lang.Object() {
            java.lang.String name = "Chris";

            int value = 10000;

            int taxed_value() {
                return ((int) ((this.value) - ((this.value) * 0.4)));
            }

            boolean in_ca = true;
        });
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testSimple_literalMutationString314653__7)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testSimple_literalMutationString314653__7)).toString());
        java.lang.String o_testSimple_literalMutationString314653__14 = com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
        junit.framework.TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", o_testSimple_literalMutationString314653__14);
        sw.toString();
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testSimple_literalMutationString314653__7)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testSimple_literalMutationString314653__7)).toString());
        junit.framework.TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", o_testSimple_literalMutationString314653__14);
    }

    public void testSimple_literalMutationNumber314672_add316391_literalMutationString318039_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache m = c.compile("z|sh}$r!{$i");
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer o_testSimple_literalMutationNumber314672__7 = m.execute(sw, new java.lang.Object() {
                java.lang.String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * -0.6)));
                }

                boolean in_ca = true;
            });
            ((java.io.StringWriter) (o_testSimple_literalMutationNumber314672__7)).getBuffer().toString();
            java.lang.String o_testSimple_literalMutationNumber314672__15 = com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSimple_literalMutationNumber314672_add316391_literalMutationString318039 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template z|sh}$r!{$i not found", expected.getMessage());
        }
    }

    public void testSimple_literalMutationString314658_failAssert0_literalMutationString315826_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("=G^0,8$H f");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimple_literalMutationString314658 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimple_literalMutationString314658_failAssert0_literalMutationString315826 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template =G^0,8$H f not found", expected.getMessage());
        }
    }

    public void testSimple_literalMutationString314658_failAssert0_literalMutationString315826_failAssert0null325308_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("=G^0,8$H f");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(null, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimple_literalMutationString314658 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimple_literalMutationString314658_failAssert0_literalMutationString315826 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimple_literalMutationString314658_failAssert0_literalMutationString315826_failAssert0null325308 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template =G^0,8$H f not found", expected.getMessage());
        }
    }

    public void testSimple_literalMutationString314656_failAssert0_literalMutationNumber315933_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile(" imple.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 9999;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimple_literalMutationString314656 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimple_literalMutationString314656_failAssert0_literalMutationNumber315933 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template  imple.html not found", expected.getMessage());
        }
    }

    public void testSimple_literalMutationString314658_failAssert0_literalMutationString315826_failAssert0_literalMutationNumber322893_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("=G^0,8$H f");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.2)));
                        }

                        boolean in_ca = true;
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimple_literalMutationString314658 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimple_literalMutationString314658_failAssert0_literalMutationString315826 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimple_literalMutationString314658_failAssert0_literalMutationString315826_failAssert0_literalMutationNumber322893 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template =G^0,8$H f not found", expected.getMessage());
        }
    }

    public void testSimple_literalMutationString314657_failAssert0_add316638_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("}1<[TtL_igC");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testSimple_literalMutationString314657 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimple_literalMutationString314657_failAssert0_add316638 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template }1<[TtL_igC not found", expected.getMessage());
        }
    }

    public void testSimple_literalMutationString314681_failAssert0_literalMutationString315954_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("s}imple.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "siQmple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimple_literalMutationString314681 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testSimple_literalMutationString314681_failAssert0_literalMutationString315954 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template s}imple.html not found", expected.getMessage());
        }
    }

    public void testSimple_literalMutationString314658_failAssert0_literalMutationString315826_failAssert0_add324655_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    createMustacheFactory();
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("=G^0,8$H f");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimple_literalMutationString314658 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimple_literalMutationString314658_failAssert0_literalMutationString315826 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimple_literalMutationString314658_failAssert0_literalMutationString315826_failAssert0_add324655 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template =G^0,8$H f not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString116939_failAssert0_add124166_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.KOREAN));
                    com.github.mustachejava.Mustache m = c.compile(";NsY-t*=b`8");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple_ko.txt");
                    sw.toString();
                }
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.JAPANESE));
                    com.github.mustachejava.Mustache m = c.compile("simple.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                }
                junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116939 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116939_failAssert0_add124166 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;NsY-t*=b`8 not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString116939_failAssert0null124903_failAssert0_literalMutationNumber133108_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    {
                        com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.KOREAN));
                        com.github.mustachejava.Mustache m = c.compile(";NsY-t*=b`8");
                        java.io.StringWriter sw = new java.io.StringWriter();
                        m.execute(null, new java.lang.Object() {
                            java.lang.String name = "Chris";

                            int value = 10000;

                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.8)));
                            }

                            boolean in_ca = true;
                        });
                        com.github.mustachejava.TestUtil.getContents(this.root, "simple_ko.txt");
                        sw.toString();
                    }
                    {
                        com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.JAPANESE));
                        com.github.mustachejava.Mustache m = c.compile("simple.html");
                        java.io.StringWriter sw = new java.io.StringWriter();
                        m.execute(sw, new java.lang.Object() {
                            java.lang.String name = "Chris";

                            int value = 10000;

                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.4)));
                            }

                            boolean in_ca = true;
                        });
                        com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                        sw.toString();
                    }
                    junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116939 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116939_failAssert0null124903 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116939_failAssert0null124903_failAssert0_literalMutationNumber133108 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;NsY-t*=b`8 not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationNumber116987_remove124317_literalMutationString129250_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.KOREAN));
                com.github.mustachejava.Mustache m = c.compile("$K,]exRc{3-");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.Writer o_testSimpleI18N_literalMutationNumber116987__9 = m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                java.lang.String o_testSimpleI18N_literalMutationNumber116987__16 = com.github.mustachejava.TestUtil.getContents(this.root, "simple_ko.txt");
            }
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.JAPANESE));
                com.github.mustachejava.Mustache m = c.compile("simple.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.Writer o_testSimpleI18N_literalMutationNumber116987__26 = m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.0)));
                    }

                    boolean in_ca = true;
                });
                java.lang.String o_testSimpleI18N_literalMutationNumber116987__34 = com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationNumber116987_remove124317_literalMutationString129250 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template $K,]exRc{3- not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString116944_remove124411_literalMutationString128117_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.KOREAN));
                com.github.mustachejava.Mustache m = c.compile("simple.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.Writer o_testSimpleI18N_literalMutationString116944__9 = m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "ChBis";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                java.lang.String o_testSimpleI18N_literalMutationString116944__16 = com.github.mustachejava.TestUtil.getContents(this.root, "simple_ko.txt");
                sw.toString();
            }
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.JAPANESE));
                com.github.mustachejava.Mustache m = c.compile("$^*40TEuUz>");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.Writer o_testSimpleI18N_literalMutationString116944__26 = m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                java.lang.String o_testSimpleI18N_literalMutationString116944__33 = com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116944_remove124411_literalMutationString128117 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template $^*40TEuUz> not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString116939_failAssert0null124903_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.KOREAN));
                    com.github.mustachejava.Mustache m = c.compile(";NsY-t*=b`8");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(null, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple_ko.txt");
                    sw.toString();
                }
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.JAPANESE));
                    com.github.mustachejava.Mustache m = c.compile("simple.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                }
                junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116939 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116939_failAssert0null124903 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;NsY-t*=b`8 not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_add116999_literalMutationString119436_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.KOREAN));
                com.github.mustachejava.Mustache m = c.compile("simple.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.Writer o_testSimpleI18N_add116999__9 = m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                java.io.Writer o_testSimpleI18N_add116999__16 = m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                java.lang.String o_testSimpleI18N_add116999__23 = com.github.mustachejava.TestUtil.getContents(this.root, "simple_ko.txt");
                sw.toString();
            }
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.JAPANESE));
                com.github.mustachejava.Mustache m = c.compile("<UjO+IaZLZV");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.Writer o_testSimpleI18N_add116999__33 = m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                java.lang.String o_testSimpleI18N_add116999__40 = com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
            }
            junit.framework.TestCase.fail("testSimpleI18N_add116999_literalMutationString119436 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template <UjO+IaZLZV not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString116939_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.KOREAN));
                com.github.mustachejava.Mustache m = c.compile(";NsY-t*=b`8");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple_ko.txt");
                sw.toString();
            }
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.JAPANESE));
                com.github.mustachejava.Mustache m = c.compile("simple.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116939 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;NsY-t*=b`8 not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString116939_failAssert0_add124166_failAssert0_add139729_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    {
                        com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.KOREAN));
                        com.github.mustachejava.Mustache m = c.compile(";NsY-t*=b`8");
                        java.io.StringWriter sw = new java.io.StringWriter();
                        m.execute(sw, new java.lang.Object() {
                            java.lang.String name = "Chris";

                            int value = 10000;

                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.4)));
                            }

                            boolean in_ca = true;
                        });
                        m.execute(sw, new java.lang.Object() {
                            java.lang.String name = "Chris";

                            int value = 10000;

                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.4)));
                            }

                            boolean in_ca = true;
                        });
                        com.github.mustachejava.TestUtil.getContents(this.root, "simple_ko.txt");
                        sw.toString();
                    }
                    {
                        com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.JAPANESE));
                        com.github.mustachejava.Mustache m = c.compile("simple.html");
                        java.io.StringWriter sw = new java.io.StringWriter();
                        m.execute(sw, new java.lang.Object() {
                            java.lang.String name = "Chris";

                            int value = 10000;

                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.4)));
                            }

                            boolean in_ca = true;
                        });
                        com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                        sw.toString();
                        sw.toString();
                    }
                    junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116939 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116939_failAssert0_add124166 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116939_failAssert0_add124166_failAssert0_add139729 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;NsY-t*=b`8 not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString116939_failAssert0_add124166_failAssert0_literalMutationNumber135678_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    {
                        com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.KOREAN));
                        com.github.mustachejava.Mustache m = c.compile(";NsY-t*=b`8");
                        java.io.StringWriter sw = new java.io.StringWriter();
                        m.execute(sw, new java.lang.Object() {
                            java.lang.String name = "Chris";

                            int value = 10000;

                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.4)));
                            }

                            boolean in_ca = true;
                        });
                        m.execute(sw, new java.lang.Object() {
                            java.lang.String name = "Chris";

                            int value = 10000;

                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.4)));
                            }

                            boolean in_ca = true;
                        });
                        com.github.mustachejava.TestUtil.getContents(this.root, "simple_ko.txt");
                        sw.toString();
                    }
                    {
                        com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.JAPANESE));
                        com.github.mustachejava.Mustache m = c.compile("simple.html");
                        java.io.StringWriter sw = new java.io.StringWriter();
                        m.execute(sw, new java.lang.Object() {
                            java.lang.String name = "Chris";

                            int value = 20000;

                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.4)));
                            }

                            boolean in_ca = true;
                        });
                        com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                        sw.toString();
                    }
                    junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116939 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116939_failAssert0_add124166 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116939_failAssert0_add124166_failAssert0_literalMutationNumber135678 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;NsY-t*=b`8 not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString116939_failAssert0null124903_failAssert0null140943_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    {
                        com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.KOREAN));
                        com.github.mustachejava.Mustache m = c.compile(";NsY-t*=b`8");
                        java.io.StringWriter sw = new java.io.StringWriter();
                        m.execute(null, new java.lang.Object() {
                            java.lang.String name = "Chris";

                            int value = 10000;

                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.4)));
                            }

                            boolean in_ca = true;
                        });
                        com.github.mustachejava.TestUtil.getContents(this.root, null);
                        sw.toString();
                    }
                    {
                        com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.JAPANESE));
                        com.github.mustachejava.Mustache m = c.compile("simple.html");
                        java.io.StringWriter sw = new java.io.StringWriter();
                        m.execute(sw, new java.lang.Object() {
                            java.lang.String name = "Chris";

                            int value = 10000;

                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.4)));
                            }

                            boolean in_ca = true;
                        });
                        com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                        sw.toString();
                    }
                    junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116939 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116939_failAssert0null124903 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116939_failAssert0null124903_failAssert0null140943 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;NsY-t*=b`8 not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString116969() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        {
            com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.KOREAN));
            junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
            junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
            com.github.mustachejava.Mustache m = c.compile("simple.html");
            junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
            junit.framework.TestCase.assertEquals("simple.html", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer o_testSimpleI18N_literalMutationString116969__9 = m.execute(sw, new java.lang.Object() {
                java.lang.String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            junit.framework.TestCase.assertEquals("\uc548\ub155\ud558\uc138\uc694 Chris\n\u00a0\u00a0 \ub2f9\uc2e0\uc740 10000\ub2ec\ub7ec\ub97c \uc6d0\ud588\ub2e4!\n\n\uc74c, 6000\ub2ec\ub7ec, \uc138\uae08 \ud6c4.\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testSimpleI18N_literalMutationString116969__9)).getBuffer())).toString());
            junit.framework.TestCase.assertEquals("\uc548\ub155\ud558\uc138\uc694 Chris\n\u00a0\u00a0 \ub2f9\uc2e0\uc740 10000\ub2ec\ub7ec\ub97c \uc6d0\ud588\ub2e4!\n\n\uc74c, 6000\ub2ec\ub7ec, \uc138\uae08 \ud6c4.\n", ((java.io.StringWriter) (o_testSimpleI18N_literalMutationString116969__9)).toString());
            java.lang.String o_testSimpleI18N_literalMutationString116969__16 = com.github.mustachejava.TestUtil.getContents(this.root, "simple_ko.txt");
            junit.framework.TestCase.assertEquals("\uc548\ub155\ud558\uc138\uc694 Chris\n\u00a0\u00a0 \ub2f9\uc2e0\uc740 10000\ub2ec\ub7ec\ub97c \uc6d0\ud588\ub2e4!\n\n\uc74c, 6000\ub2ec\ub7ec, \uc138\uae08 \ud6c4.\n", o_testSimpleI18N_literalMutationString116969__16);
            sw.toString();
            junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
            junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
            junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
            junit.framework.TestCase.assertEquals("simple.html", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
            junit.framework.TestCase.assertEquals("\uc548\ub155\ud558\uc138\uc694 Chris\n\u00a0\u00a0 \ub2f9\uc2e0\uc740 10000\ub2ec\ub7ec\ub97c \uc6d0\ud588\ub2e4!\n\n\uc74c, 6000\ub2ec\ub7ec, \uc138\uae08 \ud6c4.\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testSimpleI18N_literalMutationString116969__9)).getBuffer())).toString());
            junit.framework.TestCase.assertEquals("\uc548\ub155\ud558\uc138\uc694 Chris\n\u00a0\u00a0 \ub2f9\uc2e0\uc740 10000\ub2ec\ub7ec\ub97c \uc6d0\ud588\ub2e4!\n\n\uc74c, 6000\ub2ec\ub7ec, \uc138\uae08 \ud6c4.\n", ((java.io.StringWriter) (o_testSimpleI18N_literalMutationString116969__9)).toString());
            junit.framework.TestCase.assertEquals("\uc548\ub155\ud558\uc138\uc694 Chris\n\u00a0\u00a0 \ub2f9\uc2e0\uc740 10000\ub2ec\ub7ec\ub97c \uc6d0\ud588\ub2e4!\n\n\uc74c, 6000\ub2ec\ub7ec, \uc138\uae08 \ud6c4.\n", o_testSimpleI18N_literalMutationString116969__16);
        }
        {
            com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.JAPANESE));
            junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
            junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
            com.github.mustachejava.Mustache m = c.compile("");
            junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
            junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer o_testSimpleI18N_literalMutationString116969__26 = m.execute(sw, new java.lang.Object() {
                java.lang.String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testSimpleI18N_literalMutationString116969__26)).getBuffer())).toString());
            junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testSimpleI18N_literalMutationString116969__26)).toString());
            java.lang.String o_testSimpleI18N_literalMutationString116969__33 = com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            junit.framework.TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", o_testSimpleI18N_literalMutationString116969__33);
            sw.toString();
            junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
            junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
            junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
            junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
            junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testSimpleI18N_literalMutationString116969__26)).getBuffer())).toString());
            junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testSimpleI18N_literalMutationString116969__26)).toString());
            junit.framework.TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", o_testSimpleI18N_literalMutationString116969__33);
        }
    }

    public void testSimpleI18N_literalMutationString116939_failAssert0null124903_failAssert0_add139339_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    {
                        com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.KOREAN));
                        com.github.mustachejava.Mustache m = c.compile(";NsY-t*=b`8");
                        java.io.StringWriter sw = new java.io.StringWriter();
                        m.execute(null, new java.lang.Object() {
                            java.lang.String name = "Chris";

                            int value = 10000;

                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.4)));
                            }

                            boolean in_ca = true;
                        });
                        com.github.mustachejava.TestUtil.getContents(this.root, "simple_ko.txt");
                        sw.toString();
                    }
                    {
                        com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.JAPANESE));
                        com.github.mustachejava.Mustache m = c.compile("simple.html");
                        java.io.StringWriter sw = new java.io.StringWriter();
                        m.execute(sw, new java.lang.Object() {
                            java.lang.String name = "Chris";

                            int value = 10000;

                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.4)));
                            }

                            boolean in_ca = true;
                        });
                        com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                        sw.toString();
                        sw.toString();
                    }
                    junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116939 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116939_failAssert0null124903 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116939_failAssert0null124903_failAssert0_add139339 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;NsY-t*=b`8 not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString116968_failAssert0_add124068_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.KOREAN));
                    com.github.mustachejava.Mustache m = c.compile("simple.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple_ko.txt");
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple_ko.txt");
                    sw.toString();
                }
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.JAPANESE));
                    com.github.mustachejava.Mustache m = c.compile("q74r[Nq8Kk(");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                }
                junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116968 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116968_failAssert0_add124068 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template q74r[Nq8Kk( not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString116943_literalMutationString117293_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.KOREAN));
                com.github.mustachejava.Mustache m = c.compile("ubi`ibDl%H<");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.Writer o_testSimpleI18N_literalMutationString116943__9 = m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "page1.txt";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                java.lang.String o_testSimpleI18N_literalMutationString116943__16 = com.github.mustachejava.TestUtil.getContents(this.root, "simple_ko.txt");
                sw.toString();
            }
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.JAPANESE));
                com.github.mustachejava.Mustache m = c.compile("simple.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.Writer o_testSimpleI18N_literalMutationString116943__26 = m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                java.lang.String o_testSimpleI18N_literalMutationString116943__33 = com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116943_literalMutationString117293 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ubi`ibDl%H< not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString116968_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.KOREAN));
                com.github.mustachejava.Mustache m = c.compile("simple.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple_ko.txt");
                sw.toString();
            }
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.JAPANESE));
                com.github.mustachejava.Mustache m = c.compile("q74r[Nq8Kk(");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116968 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template q74r[Nq8Kk( not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString116996_failAssert0_literalMutationString120680_failAssert0_literalMutationString130570_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    {
                        com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.KOREAN));
                        com.github.mustachejava.Mustache m = c.compile("simple.html");
                        java.io.StringWriter sw = new java.io.StringWriter();
                        m.execute(sw, new java.lang.Object() {
                            java.lang.String name = "Chris";

                            int value = 10000;

                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.4)));
                            }

                            boolean in_ca = true;
                        });
                        com.github.mustachejava.TestUtil.getContents(this.root, "simple_ko.txt");
                        sw.toString();
                    }
                    {
                        com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.JAPANESE));
                        com.github.mustachejava.Mustache m = c.compile("A|6c}jF7qyB");
                        java.io.StringWriter sw = new java.io.StringWriter();
                        m.execute(sw, new java.lang.Object() {
                            java.lang.String name = "page1.txt";

                            int value = 10000;

                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.4)));
                            }

                            boolean in_ca = true;
                        });
                        com.github.mustachejava.TestUtil.getContents(this.root, "_4]C?OAL{]");
                        sw.toString();
                    }
                    junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116996 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116996_failAssert0_literalMutationString120680 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116996_failAssert0_literalMutationString120680_failAssert0_literalMutationString130570 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template A|6c}jF7qyB not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString116968_failAssert0_literalMutationNumber120627_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.KOREAN));
                    com.github.mustachejava.Mustache m = c.compile("simple.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple_ko.txt");
                    sw.toString();
                }
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.JAPANESE));
                    com.github.mustachejava.Mustache m = c.compile("q74r[Nq8Kk(");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 5000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                }
                junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116968 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116968_failAssert0_literalMutationNumber120627 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template q74r[Nq8Kk( not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString116939_failAssert0_literalMutationString121317_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.KOREAN));
                    com.github.mustachejava.Mustache m = c.compile(";NsY-t*=b`8");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple_ko.txt");
                    sw.toString();
                }
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.JAPANESE));
                    com.github.mustachejava.Mustache m = c.compile("simple.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.&xt");
                    sw.toString();
                }
                junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116939 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116939_failAssert0_literalMutationString121317 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;NsY-t*=b`8 not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString116968_failAssert0_add124068_failAssert0_add139742_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    {
                        com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.KOREAN));
                        com.github.mustachejava.Mustache m = c.compile("simple.html");
                        java.io.StringWriter sw = new java.io.StringWriter();
                        m.execute(sw, new java.lang.Object() {
                            java.lang.String name = "Chris";

                            int value = 10000;

                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.4)));
                            }

                            boolean in_ca = true;
                        });
                        m.execute(sw, new java.lang.Object() {
                            java.lang.String name = "Chris";

                            int value = 10000;

                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.4)));
                            }

                            boolean in_ca = true;
                        });
                        com.github.mustachejava.TestUtil.getContents(this.root, "simple_ko.txt");
                        com.github.mustachejava.TestUtil.getContents(this.root, "simple_ko.txt");
                        sw.toString();
                    }
                    {
                        com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.JAPANESE));
                        com.github.mustachejava.Mustache m = c.compile("q74r[Nq8Kk(");
                        java.io.StringWriter sw = new java.io.StringWriter();
                        m.execute(sw, new java.lang.Object() {
                            java.lang.String name = "Chris";

                            int value = 10000;

                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.4)));
                            }

                            boolean in_ca = true;
                        });
                        com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                        sw.toString();
                    }
                    junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116968 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116968_failAssert0_add124068 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationString116968_failAssert0_add124068_failAssert0_add139742 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template q74r[Nq8Kk( not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString116936() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        {
            com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.KOREAN));
            junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
            junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
            com.github.mustachejava.Mustache m = c.compile("");
            junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
            junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer o_testSimpleI18N_literalMutationString116936__9 = m.execute(sw, new java.lang.Object() {
                java.lang.String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testSimpleI18N_literalMutationString116936__9)).getBuffer())).toString());
            junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testSimpleI18N_literalMutationString116936__9)).toString());
            java.lang.String o_testSimpleI18N_literalMutationString116936__16 = com.github.mustachejava.TestUtil.getContents(this.root, "simple_ko.txt");
            junit.framework.TestCase.assertEquals("\uc548\ub155\ud558\uc138\uc694 Chris\n\u00a0\u00a0 \ub2f9\uc2e0\uc740 10000\ub2ec\ub7ec\ub97c \uc6d0\ud588\ub2e4!\n\n\uc74c, 6000\ub2ec\ub7ec, \uc138\uae08 \ud6c4.\n", o_testSimpleI18N_literalMutationString116936__16);
            sw.toString();
            junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
            junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
            junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
            junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
            junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testSimpleI18N_literalMutationString116936__9)).getBuffer())).toString());
            junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testSimpleI18N_literalMutationString116936__9)).toString());
            junit.framework.TestCase.assertEquals("\uc548\ub155\ud558\uc138\uc694 Chris\n\u00a0\u00a0 \ub2f9\uc2e0\uc740 10000\ub2ec\ub7ec\ub97c \uc6d0\ud588\ub2e4!\n\n\uc74c, 6000\ub2ec\ub7ec, \uc138\uae08 \ud6c4.\n", o_testSimpleI18N_literalMutationString116936__16);
        }
        {
            com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(new com.github.mustachejava.AmplInterpreterTest.LocalizedMustacheResolver(this.root, java.util.Locale.JAPANESE));
            junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
            junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
            com.github.mustachejava.Mustache m = c.compile("simple.html");
            junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
            junit.framework.TestCase.assertEquals("simple.html", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer o_testSimpleI18N_literalMutationString116936__26 = m.execute(sw, new java.lang.Object() {
                java.lang.String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            junit.framework.TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testSimpleI18N_literalMutationString116936__26)).getBuffer())).toString());
            junit.framework.TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", ((java.io.StringWriter) (o_testSimpleI18N_literalMutationString116936__26)).toString());
            java.lang.String o_testSimpleI18N_literalMutationString116936__33 = com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            junit.framework.TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", o_testSimpleI18N_literalMutationString116936__33);
            sw.toString();
            junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
            junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
            junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
            junit.framework.TestCase.assertEquals("simple.html", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
            junit.framework.TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testSimpleI18N_literalMutationString116936__26)).getBuffer())).toString());
            junit.framework.TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", ((java.io.StringWriter) (o_testSimpleI18N_literalMutationString116936__26)).toString());
            junit.framework.TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", o_testSimpleI18N_literalMutationString116936__33);
        }
    }

    public void testSimpleFiltered_literalMutationString392404_failAssert0null394062_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public java.lang.String filterText(java.lang.String appended, boolean startOfLine) {
                        if (startOfLine) {
                            appended = appended.replaceAll("^[\t ]+", "");
                        }
                        return appended.replaceAll(null, " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                    }
                };
                com.github.mustachejava.Mustache m = c.compile("8_$aLZ!G$8^%t%x:n#y");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simplefiltered.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString392404 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString392404_failAssert0null394062 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 8_$aLZ!G$8^%t%x:n#y not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString392404_failAssert0_add393888_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public java.lang.String filterText(java.lang.String appended, boolean startOfLine) {
                        if (startOfLine) {
                            appended = appended.replaceAll("^[\t ]+", "");
                        }
                        return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                    }
                };
                com.github.mustachejava.Mustache m = c.compile("8_$aLZ!G$8^%t%x:n#y");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simplefiltered.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString392404 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString392404_failAssert0_add393888 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 8_$aLZ!G$8^%t%x:n#y not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString392404_failAssert0_add393884_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public java.lang.String filterText(java.lang.String appended, boolean startOfLine) {
                        if (startOfLine) {
                            appended = appended.replaceAll("^[\t ]+", "");
                        }
                        return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                    }
                };
                c.compile("8_$aLZ!G$8^%t%x:n#y");
                com.github.mustachejava.Mustache m = c.compile("8_$aLZ!G$8^%t%x:n#y");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simplefiltered.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString392404 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString392404_failAssert0_add393884 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 8_$aLZ!G$8^%t%x:n#y not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString392404_failAssert0_add393886_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public java.lang.String filterText(java.lang.String appended, boolean startOfLine) {
                        if (startOfLine) {
                            appended = appended.replaceAll("^[\t ]+", "");
                        }
                        return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                    }
                };
                com.github.mustachejava.Mustache m = c.compile("8_$aLZ!G$8^%t%x:n#y");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simplefiltered.txt");
                com.github.mustachejava.TestUtil.getContents(this.root, "simplefiltered.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString392404 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString392404_failAssert0_add393886 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 8_$aLZ!G$8^%t%x:n#y not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString392404_failAssert0_literalMutationString392971_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public java.lang.String filterText(java.lang.String appended, boolean startOfLine) {
                        if (startOfLine) {
                            appended = appended.replaceAll("^[\t ]+", "");
                        }
                        return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*\n[\n\t]*", "\n");
                    }
                };
                com.github.mustachejava.Mustache m = c.compile("8_$aLZ!G$8^%t%x:n#y");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simplefiltered.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString392404 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString392404_failAssert0_literalMutationString392971 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 8_$aLZ!G$8^%t%x:n#y not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString392404_failAssert0null394067_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public java.lang.String filterText(java.lang.String appended, boolean startOfLine) {
                        if (startOfLine) {
                            appended = appended.replaceAll("^[\t ]+", "");
                        }
                        return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                    }
                };
                com.github.mustachejava.Mustache m = c.compile("8_$aLZ!G$8^%t%x:n#y");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(null, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simplefiltered.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString392404 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString392404_failAssert0null394067 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 8_$aLZ!G$8^%t%x:n#y not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString392427_failAssert0null394012_failAssert0_literalMutationString398222_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public java.lang.String filterText(java.lang.String appended, boolean startOfLine) {
                            if (startOfLine) {
                                appended = appended.replaceAll("^[\t ]+", "");
                            }
                            return appended.replaceAll(null, " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile("S7-!{rt+p=H7;yTlj&^");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "page1.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString392427 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString392427_failAssert0null394012 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString392427_failAssert0null394012_failAssert0_literalMutationString398222 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template S7-!{rt+p=H7;yTlj&^ not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString392404_failAssert0_literalMutationString392969_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public java.lang.String filterText(java.lang.String appended, boolean startOfLine) {
                        if (startOfLine) {
                            appended = appended.replaceAll("^[\t ]+", "");
                        }
                        return appended.replaceAll("[ \t]+", "t").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                    }
                };
                com.github.mustachejava.Mustache m = c.compile("8_$aLZ!G$8^%t%x:n#y");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simplefiltered.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString392404 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString392404_failAssert0_literalMutationString392969 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 8_$aLZ!G$8^%t%x:n#y not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString392404_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                @java.lang.Override
                public java.lang.String filterText(java.lang.String appended, boolean startOfLine) {
                    if (startOfLine) {
                        appended = appended.replaceAll("^[\t ]+", "");
                    }
                    return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                }
            };
            com.github.mustachejava.Mustache m = c.compile("8_$aLZ!G$8^%t%x:n#y");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, new java.lang.Object() {
                java.lang.String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            com.github.mustachejava.TestUtil.getContents(this.root, "simplefiltered.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString392404 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 8_$aLZ!G$8^%t%x:n#y not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString392404_failAssert0_literalMutationNumber392994_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public java.lang.String filterText(java.lang.String appended, boolean startOfLine) {
                        if (startOfLine) {
                            appended = appended.replaceAll("^[\t ]+", "");
                        }
                        return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                    }
                };
                com.github.mustachejava.Mustache m = c.compile("8_$aLZ!G$8^%t%x:n#y");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 9999;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simplefiltered.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString392404 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString392404_failAssert0_literalMutationNumber392994 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 8_$aLZ!G$8^%t%x:n#y not found", expected.getMessage());
        }
    }

    public void testSimpleFilterednull392445_failAssert0_literalMutationString393749_failAssert0_literalMutationString396188_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public java.lang.String filterText(java.lang.String appended, boolean startOfLine) {
                            if (startOfLine) {
                                appended = appended.replaceAll("^[\t ]+", "");
                            }
                            return appended.replaceAll(null, " ").replaceAll("[ \n\t]*\n[ \n\t]*", "");
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile("=F9)qNui .@GrcGJCv?");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simplefiltered.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleFilterednull392445 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testSimpleFilterednull392445_failAssert0_literalMutationString393749 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testSimpleFilterednull392445_failAssert0_literalMutationString393749_failAssert0_literalMutationString396188 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template =F9)qNui .@GrcGJCv? not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325773_failAssert0_literalMutationString325984_failAssert0_add329888_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("F{^#G4Gehjv7Vz", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursionutxt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecurision_literalMutationString325773 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecurision_literalMutationString325773_failAssert0_literalMutationString325984 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325773_failAssert0_literalMutationString325984_failAssert0_add329888 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template F{^#G4Gehjv7Vz not found", expected.getMessage());
        }
    }

    public void testRecurision_remove325786_add326117_literalMutationString326787_failAssert0() throws java.io.IOException {
        try {
            java.io.StringWriter sw = execute("=[XFD)B;CH01}|", new java.lang.Object() {
                java.lang.Object value = new java.lang.Object() {
                    boolean value = false;
                };
            });
            java.lang.String o_testRecurision_remove325786__10 = com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
            sw.toString();
            sw.toString();
            junit.framework.TestCase.fail("testRecurision_remove325786_add326117_literalMutationString326787 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template =[XFD)B;CH01}| not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325773_failAssert0_literalMutationString325981_failAssert0_literalMutationString327413_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("#$FE7Ju^,]#ZLJ", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursixn.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecurision_literalMutationString325773 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecurision_literalMutationString325773_failAssert0_literalMutationString325981 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325773_failAssert0_literalMutationString325981_failAssert0_literalMutationString327413 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template #$FE7Ju^,]#ZLJ not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325770_literalMutationString325836_add329233() throws java.io.IOException {
        java.io.StringWriter o_testRecurision_literalMutationString325770_literalMutationString325836_add329233__1 = execute("", new java.lang.Object() {
            java.lang.Object value = new java.lang.Object() {
                boolean value = false;
            };
        });
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testRecurision_literalMutationString325770_literalMutationString325836_add329233__1)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testRecurision_literalMutationString325770_literalMutationString325836_add329233__1)).toString());
        java.io.StringWriter sw = execute("", new java.lang.Object() {
            java.lang.Object value = new java.lang.Object() {
                boolean value = false;
            };
        });
        java.lang.String o_testRecurision_literalMutationString325770__11 = com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
        junit.framework.TestCase.assertEquals("Test\n  Test\n\n", o_testRecurision_literalMutationString325770__11);
        sw.toString();
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testRecurision_literalMutationString325770_literalMutationString325836_add329233__1)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testRecurision_literalMutationString325770_literalMutationString325836_add329233__1)).toString());
        junit.framework.TestCase.assertEquals("Test\n  Test\n\n", o_testRecurision_literalMutationString325770__11);
    }

    public void testRecurision_literalMutationString325774_failAssert0_literalMutationString326031_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("rX2[HQpepT*Ok*}", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationString325774 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325774_failAssert0_literalMutationString326031 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template rX2[HQpepT*Ok*} not found", expected.getMessage());
        }
    }

    public void testRecurisionnull325789_failAssert0_literalMutationString326088_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("-|VWNFe4]4ryQs", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testRecurisionnull325789 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testRecurisionnull325789_failAssert0_literalMutationString326088 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template -|VWNFe4]4ryQs not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325773_failAssert0_add326135_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("F{^#G4Gehjv7Vz", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationString325773 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325773_failAssert0_add326135 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template F{^#G4Gehjv7Vz not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325774_failAssert0_literalMutationString326031_failAssert0_add329463_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("rX2[HQpepT*Ok*}", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecurision_literalMutationString325774 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecurision_literalMutationString325774_failAssert0_literalMutationString326031 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325774_failAssert0_literalMutationString326031_failAssert0_add329463 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template rX2[HQpepT*Ok*} not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325773_failAssert0_add326137_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("F{^#G4Gehjv7Vz", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationString325773 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325773_failAssert0_add326137 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template F{^#G4Gehjv7Vz not found", expected.getMessage());
        }
    }

    public void testRecurisionnull325789_failAssert0_literalMutationString326088_failAssert0_literalMutationBoolean329009_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("-|VWNFe4]4ryQs", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = true;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRecurisionnull325789 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testRecurisionnull325789_failAssert0_literalMutationString326088 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurisionnull325789_failAssert0_literalMutationString326088_failAssert0_literalMutationBoolean329009 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template -|VWNFe4]4ryQs not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325773_failAssert0_literalMutationString325981_failAssert0_add329445_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("#$FE7Ju^,]#ZLJ", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecurision_literalMutationString325773 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecurision_literalMutationString325773_failAssert0_literalMutationString325981 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325773_failAssert0_literalMutationString325981_failAssert0_add329445 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template #$FE7Ju^,]#ZLJ not found", expected.getMessage());
        }
    }

    public void testRecurision_remove325786_add326116_literalMutationString326801_failAssert0() throws java.io.IOException {
        try {
            java.io.StringWriter sw = execute("xDsZkJ2:4O|m,X", new java.lang.Object() {
                java.lang.Object value = new java.lang.Object() {
                    boolean value = false;
                };
            });
            java.lang.String o_testRecurision_remove325786_add326116__10 = com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
            java.lang.String o_testRecurision_remove325786__10 = com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRecurision_remove325786_add326116_literalMutationString326801 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template xDsZkJ2:4O|m,X not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325773_failAssert0() throws java.io.IOException {
        try {
            java.io.StringWriter sw = execute("F{^#G4Gehjv7Vz", new java.lang.Object() {
                java.lang.Object value = new java.lang.Object() {
                    boolean value = false;
                };
            });
            com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRecurision_literalMutationString325773 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template F{^#G4Gehjv7Vz not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationBoolean325776_failAssert0_literalMutationString326006_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("[IU<YIbk=rt@]L", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = true;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationBoolean325776 should have thrown MustacheException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationBoolean325776_failAssert0_literalMutationString326006 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [IU<YIbk=rt@]L not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationBoolean325776_failAssert0_literalMutationString326003_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("recur^ion.html", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = true;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationBoolean325776 should have thrown MustacheException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationBoolean325776_failAssert0_literalMutationString326003 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template recur^ion.html not found", expected.getMessage());
        }
    }

    public void testRecurision_add325785_literalMutationString325870_failAssert0() throws java.io.IOException {
        try {
            java.io.StringWriter sw = execute("recursi^on.html", new java.lang.Object() {
                java.lang.Object value = new java.lang.Object() {
                    boolean value = false;
                };
            });
            sw.toString();
            java.lang.String o_testRecurision_add325785__12 = com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRecurision_add325785_literalMutationString325870 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template recursi^on.html not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325773_failAssert0_add326134_failAssert0() throws java.io.IOException {
        try {
            {
                execute("F{^#G4Gehjv7Vz", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                java.io.StringWriter sw = execute("F{^#G4Gehjv7Vz", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationString325773 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325773_failAssert0_add326134 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template F{^#G4Gehjv7Vz not found", expected.getMessage());
        }
    }

    public void testRecurision_add325785_remove326184_literalMutationString326943_failAssert0() throws java.io.IOException {
        try {
            java.io.StringWriter sw = execute("VH=}G#$Fa^P|g-", new java.lang.Object() {
                java.lang.Object value = new java.lang.Object() {
                    boolean value = false;
                };
            });
            java.lang.String o_testRecurision_add325785__12 = com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRecurision_add325785_remove326184_literalMutationString326943 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template VH=}G#$Fa^P|g- not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325773_failAssert0_literalMutationString325978_failAssert0_literalMutationString328941_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("!&)b{!xQ4[Dh/", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecurision_literalMutationString325773 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecurision_literalMutationString325773_failAssert0_literalMutationString325978 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325773_failAssert0_literalMutationString325978_failAssert0_literalMutationString328941 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template !&)b{!xQ4[Dh/ not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325773_failAssert0_literalMutationBoolean325982_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("F{^#G4Gehjv7Vz", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = true;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationString325773 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325773_failAssert0_literalMutationBoolean325982 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template F{^#G4Gehjv7Vz not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325773_failAssert0_literalMutationString325984_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("F{^#G4Gehjv7Vz", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursionutxt");
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationString325773 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325773_failAssert0_literalMutationString325984 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template F{^#G4Gehjv7Vz not found", expected.getMessage());
        }
    }

    public void testRecurisionnull325789_failAssert0_literalMutationString326088_failAssert0_add330044_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("-|VWNFe4]4ryQs", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRecurisionnull325789 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testRecurisionnull325789_failAssert0_literalMutationString326088 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurisionnull325789_failAssert0_literalMutationString326088_failAssert0_add330044 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template -|VWNFe4]4ryQs not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325773_failAssert0_literalMutationString325981_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("#$FE7Ju^,]#ZLJ", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationString325773 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325773_failAssert0_literalMutationString325981 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template #$FE7Ju^,]#ZLJ not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325773_failAssert0_literalMutationString325978_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("F{^#G4ehjv7Vz", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationString325773 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325773_failAssert0_literalMutationString325978 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template F{^#G4ehjv7Vz not found", expected.getMessage());
        }
    }

    public void testRecurision_remove325786_literalMutationString325912_failAssert0() throws java.io.IOException {
        try {
            java.io.StringWriter sw = execute("^GJ5u(wE2cCarI", new java.lang.Object() {
                java.lang.Object value = new java.lang.Object() {
                    boolean value = false;
                };
            });
            java.lang.String o_testRecurision_remove325786__10 = com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRecurision_remove325786_literalMutationString325912 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ^GJ5u(wE2cCarI not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325777_failAssert0_literalMutationString326020_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("]}es(aea<SuzH4", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "OCAJvO!Pn)@5)");
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationString325777 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325777_failAssert0_literalMutationString326020 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ]}es(aea<SuzH4 not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325772_failAssert0_literalMutationString325954_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("tACj[j$g+0f6<", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationString325772 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325772_failAssert0_literalMutationString325954 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template tACj[j$g+0f6< not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325771_failAssert0_literalMutationString325965_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("[P/6p0Gl_", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationString325771 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325771_failAssert0_literalMutationString325965 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [P/6p0Gl_ not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325775_failAssert0_literalMutationString326001_failAssert0_literalMutationString327783_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("pVub|jU4K8 #Dt", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recurion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecurision_literalMutationString325775 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecurision_literalMutationString325775_failAssert0_literalMutationString326001 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325775_failAssert0_literalMutationString326001_failAssert0_literalMutationString327783 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template pVub|jU4K8 #Dt not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325773_failAssert0_literalMutationString325984_failAssert0_literalMutationString328529_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("F{^#G4Gnhjv7Vz", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursionutxt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecurision_literalMutationString325773 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecurision_literalMutationString325773_failAssert0_literalMutationString325984 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325773_failAssert0_literalMutationString325984_failAssert0_literalMutationString328529 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template F{^#G4Gnhjv7Vz not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325779_failAssert0_literalMutationString325941_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute(":cTVFOA 7A#/?k", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursionutxt");
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationString325779 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325779_failAssert0_literalMutationString325941 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :cTVFOA 7A#/?k not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325774_failAssert0_literalMutationString326031_failAssert0_literalMutationString327477_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("rX2[HQpepT*Ok*}", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecurision_literalMutationString325774 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecurision_literalMutationString325774_failAssert0_literalMutationString326031 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325774_failAssert0_literalMutationString326031_failAssert0_literalMutationString327477 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template rX2[HQpepT*Ok*} not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325773_failAssert0null326216_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("F{^#G4Gehjv7Vz", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationString325773 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325773_failAssert0null326216 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template F{^#G4Gehjv7Vz not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325773_failAssert0_literalMutationString325978_failAssert0null330615_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("F{^#G4ehjv7Vz", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRecurision_literalMutationString325773 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecurision_literalMutationString325773_failAssert0_literalMutationString325978 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325773_failAssert0_literalMutationString325978_failAssert0null330615 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template F{^#G4ehjv7Vz not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325770_add326091() throws java.io.IOException {
        java.io.StringWriter o_testRecurision_literalMutationString325770_add326091__1 = execute("", new java.lang.Object() {
            java.lang.Object value = new java.lang.Object() {
                boolean value = false;
            };
        });
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testRecurision_literalMutationString325770_add326091__1)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testRecurision_literalMutationString325770_add326091__1)).toString());
        java.io.StringWriter sw = execute("", new java.lang.Object() {
            java.lang.Object value = new java.lang.Object() {
                boolean value = false;
            };
        });
        java.lang.String o_testRecurision_literalMutationString325770__11 = com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
        junit.framework.TestCase.assertEquals("Test\n  Test\n\n", o_testRecurision_literalMutationString325770__11);
        sw.toString();
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testRecurision_literalMutationString325770_add326091__1)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testRecurision_literalMutationString325770_add326091__1)).toString());
        junit.framework.TestCase.assertEquals("Test\n  Test\n\n", o_testRecurision_literalMutationString325770__11);
    }

    public void testRecurision_literalMutationString325774_failAssert0null326224_failAssert0_literalMutationString327917_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("&&*Ad{culMCQ&>b", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRecurision_literalMutationString325774 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecurision_literalMutationString325774_failAssert0null326224 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325774_failAssert0null326224_failAssert0_literalMutationString327917 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template &&*Ad{culMCQ&>b not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325773_failAssert0_literalMutationString325978_failAssert0_add330020_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("F{^#G4ehjv7Vz", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecurision_literalMutationString325773 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecurision_literalMutationString325773_failAssert0_literalMutationString325978 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325773_failAssert0_literalMutationString325978_failAssert0_add330020 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template F{^#G4ehjv7Vz not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325773_failAssert0_add326136_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("F{^#G4Gehjv7Vz", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationString325773 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325773_failAssert0_add326136 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template F{^#G4Gehjv7Vz not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325774_failAssert0_literalMutationString326031_failAssert0null330385_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("rX2[HQpepT*Ok*}", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRecurision_literalMutationString325774 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecurision_literalMutationString325774_failAssert0_literalMutationString326031 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325774_failAssert0_literalMutationString326031_failAssert0null330385 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template rX2[HQpepT*Ok*} not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString325782_failAssert0_literalMutationString326059_failAssert0_literalMutationString328540_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("!QG(aq{3iv^k}V", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecurision_literalMutationString325782 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testRecurision_literalMutationString325782_failAssert0_literalMutationString326059 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString325782_failAssert0_literalMutationString326059_failAssert0_literalMutationString328540 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template !QG(aq{3iv^k}V not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0_add504806_failAssert0_literalMutationString507792_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    java.io.StringWriter sw = execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "page1.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504806 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504806_failAssert0_literalMutationString507792 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:zWK]4s*E;a4hDit_?&<IqTQOK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0_add504806_failAssert0_add508760_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    java.io.StringWriter sw = execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504806 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504806_failAssert0_add508760 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:zWK]4s*E;a4hDit_?&<IqTQOK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0_add504806_failAssert0_add508761_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    java.io.StringWriter sw = execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504806 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504806_failAssert0_add508761 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:zWK]4s*E;a4hDit_?&<IqTQOK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504426_failAssert0null504868_failAssert0_literalMutationString506476_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("M|OU!Zw[ZZ35CTfmvQR0L<K1@|b4N[", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504426 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504426_failAssert0null504868 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504426_failAssert0null504868_failAssert0_literalMutationString506476 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template M|OU!Zw[ZZ35CTfmvQR0L<K1@|b4N[ not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationBoolean504595_failAssert0_add508113_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("recursi^on_with_inheritance.html", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = true;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationBoolean504595 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationBoolean504595_failAssert0_add508113 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template recursi^on_with_inheritance.html not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0_add504806_failAssert0_literalMutationString507781_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    execute("u0a,Zh*1}N*?(V<_F]n,Jev0R@>Papg", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    java.io.StringWriter sw = execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504806 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504806_failAssert0_literalMutationString507781 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template u0a,Zh*1}N*?(V<_F]n,Jev0R@>Papg not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0_literalMutationString504701_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recurVion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_literalMutationString504701 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:zWK]4s*E;a4hDit_?&<IqTQOK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504427_failAssert0() throws java.io.IOException {
        try {
            java.io.StringWriter sw = execute("recursi^on_with_inheritance.html", new java.lang.Object() {
                java.lang.Object value = new java.lang.Object() {
                    boolean value = false;
                };
            });
            com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template recursi^on_with_inheritance.html not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0() throws java.io.IOException {
        try {
            java.io.StringWriter sw = execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                java.lang.Object value = new java.lang.Object() {
                    boolean value = false;
                };
            });
            com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:zWK]4s*E;a4hDit_?&<IqTQOK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504433_failAssert0_literalMutationString504706_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("!iWq3//qR^}#3wl,hA($a5?#B]K>Atf", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recurOsion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504433 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504433_failAssert0_literalMutationString504706 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template !iWq3//qR^}#3wl,hA($a5?#B]K>Atf not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504426_failAssert0_add504789_failAssert0_literalMutationString506746_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("h3<?R)`S@#CE)c9URM$ J9.^en>(%O", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504426 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504426_failAssert0_add504789 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504426_failAssert0_add504789_failAssert0_literalMutationString506746 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template h3<?R)`S@#CE)c9URM$ J9.^en>(%O not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0_add504807_failAssert0_add508439_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504807 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504807_failAssert0_add508439 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:zWK]4s*E;a4hDit_?&<IqTQOK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationString504594_failAssert0_add508108_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    execute("recursi^onW_with_inheritance.html", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    java.io.StringWriter sw = execute("recursi^onW_with_inheritance.html", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationString504594 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationString504594_failAssert0_add508108 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template recursi^onW_with_inheritance.html not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationBoolean504595_failAssert0_literalMutationString506033_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("recursi^on_with_inheritance.html", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = true;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recurion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationBoolean504595 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationBoolean504595_failAssert0_literalMutationString506033 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template recursi^on_with_inheritance.html not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0_add504808_failAssert0null509267_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504808 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504808_failAssert0null509267 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:zWK]4s*E;a4hDit_?&<IqTQOK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504427_failAssert0_add504777_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("recursi^on_with_inheritance.html", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0_add504777 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template recursi^on_with_inheritance.html not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0_add504806_failAssert0() throws java.io.IOException {
        try {
            {
                execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                java.io.StringWriter sw = execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504806 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:zWK]4s*E;a4hDit_?&<IqTQOK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0_add504808_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504808 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:zWK]4s*E;a4hDit_?&<IqTQOK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0_add504809_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504809 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:zWK]4s*E;a4hDit_?&<IqTQOK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationString504594_failAssert0_literalMutationString506020_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("recursi^onW_with_inheritance.html", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursiou.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationString504594 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationString504594_failAssert0_literalMutationString506020 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template recursi^onW_with_inheritance.html not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_remove504438_add504765_literalMutationString505502_failAssert0() throws java.io.IOException {
        try {
            java.io.StringWriter sw = execute("UT!$wv@,E}uhqh-P`LO#O$ev?_V7%[]", new java.lang.Object() {
                java.lang.Object value = new java.lang.Object() {
                    boolean value = false;
                };
            });
            java.lang.String o_testRecursionWithInheritance_remove504438_add504765__10 = com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
            java.lang.String o_testRecursionWithInheritance_remove504438__10 = com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRecursionWithInheritance_remove504438_add504765_literalMutationString505502 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template UT!$wv@,E}uhqh-P`LO#O$ev?_V7%[] not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0_add504807_failAssert0_literalMutationString506822_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    com.github.mustachejava.TestUtil.getContents(this.root, "recurion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504807 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504807_failAssert0_literalMutationString506822 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:zWK]4s*E;a4hDit_?&<IqTQOK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationString504597_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("recursi^on_with_inheritance.html", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationString504597 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template recursi^on_with_inheritance.html not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0_add504808_failAssert0_add508644_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    sw.toString();
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504808 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504808_failAssert0_add508644 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:zWK]4s*E;a4hDit_?&<IqTQOK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0_add504808_failAssert0_add508643_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504808 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504808_failAssert0_add508643 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:zWK]4s*E;a4hDit_?&<IqTQOK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationString504594_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("recursi^onW_with_inheritance.html", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationString504594 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template recursi^onW_with_inheritance.html not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationBoolean504595_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("recursi^on_with_inheritance.html", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = true;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationBoolean504595 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template recursi^on_with_inheritance.html not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0_add504807_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504807 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:zWK]4s*E;a4hDit_?&<IqTQOK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504424_failAssert0_literalMutationString504642_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute(">;2h.H4 f", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504424 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504424_failAssert0_literalMutationString504642 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template >;2h.H4 f not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504432_failAssert0null504876_failAssert0_literalMutationString506701_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("!(/h>eJI?MYab7-U7M|it&s_u]mSZH;", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504432 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504432_failAssert0null504876 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504432_failAssert0null504876_failAssert0_literalMutationString506701 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template !(/h>eJI?MYab7-U7M|it&s_u]mSZH; not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0_add504809_failAssert0_literalMutationString506825_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQK", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504809 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504809_failAssert0_literalMutationString506825 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:zWK]4s*E;a4hDit_?&<IqTQK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0_add504806_failAssert0null509323_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    java.io.StringWriter sw = execute(null, new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504806 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504806_failAssert0null509323 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:zWK]4s*E;a4hDit_?&<IqTQOK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504427_failAssert0_add504774_failAssert0() throws java.io.IOException {
        try {
            {
                execute("recursi^on_with_inheritance.html", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                java.io.StringWriter sw = execute("recursi^on_with_inheritance.html", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0_add504774 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template recursi^on_with_inheritance.html not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0_literalMutationString504694_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute(":K:*;:WK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_literalMutationString504694 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:WK]4s*E;a4hDit_?&<IqTQOK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504427_failAssert0_add504776_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("recursi^on_with_inheritance.html", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0_add504776 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template recursi^on_with_inheritance.html not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0_add504809_failAssert0_add508446_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504809 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504809_failAssert0_add508446 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:zWK]4s*E;a4hDit_?&<IqTQOK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0_add504809_failAssert0null509172_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504809 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504809_failAssert0null509172 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:zWK]4s*E;a4hDit_?&<IqTQOK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504422_add504743() throws java.io.IOException {
        java.io.StringWriter o_testRecursionWithInheritance_literalMutationString504422_add504743__1 = execute("", new java.lang.Object() {
            java.lang.Object value = new java.lang.Object() {
                boolean value = false;
            };
        });
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testRecursionWithInheritance_literalMutationString504422_add504743__1)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testRecursionWithInheritance_literalMutationString504422_add504743__1)).toString());
        java.io.StringWriter sw = execute("", new java.lang.Object() {
            java.lang.Object value = new java.lang.Object() {
                boolean value = false;
            };
        });
        java.lang.String o_testRecursionWithInheritance_literalMutationString504422__11 = com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
        junit.framework.TestCase.assertEquals("Test\n  Test\n\n", o_testRecursionWithInheritance_literalMutationString504422__11);
        sw.toString();
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testRecursionWithInheritance_literalMutationString504422_add504743__1)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testRecursionWithInheritance_literalMutationString504422_add504743__1)).toString());
        junit.framework.TestCase.assertEquals("Test\n  Test\n\n", o_testRecursionWithInheritance_literalMutationString504422__11);
    }

    public void testRecursionWithInheritance_literalMutationString504430_failAssert0_literalMutationString504607_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("*6rtb2IcRryv7[z %a|Z5peiv`[w3fd", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504430 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504430_failAssert0_literalMutationString504607 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template *6rtb2IcRryv7[z %a|Z5peiv`[w3fd not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationBoolean504595_failAssert0null509048_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("recursi^on_with_inheritance.html", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = true;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationBoolean504595 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationBoolean504595_failAssert0null509048 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template recursi^on_with_inheritance.html not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_add504436_literalMutationString504516_failAssert0() throws java.io.IOException {
        try {
            java.io.StringWriter sw = execute("63|(jLW^7pB-6A[e?.[f6F5yZ(}K&h,", new java.lang.Object() {
                java.lang.Object value = new java.lang.Object() {
                    boolean value = false;
                };
            });
            java.lang.String o_testRecursionWithInheritance_add504436__11 = com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
            java.lang.String o_testRecursionWithInheritance_add504436__12 = com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRecursionWithInheritance_add504436_literalMutationString504516 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 63|(jLW^7pB-6A[e?.[f6F5yZ(}K&h, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationString504597_failAssert0_literalMutationString507598_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("recursi^on_with_inheritanc.html", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationString504597 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationString504597_failAssert0_literalMutationString507598 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template recursi^on_with_inheritanc.html not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationString504594_failAssert0null509046_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("recursi^onW_with_inheritance.html", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationString504594 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationString504594_failAssert0null509046 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template recursi^onW_with_inheritance.html not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0_add504808_failAssert0_literalMutationString507428_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute(":K:*;:zWK]4s*E;a44Dit_?&<IqTQOK", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504808 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504808_failAssert0_literalMutationString507428 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:zWK]4s*E;a44Dit_?&<IqTQOK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0null504878_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0null504878 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:zWK]4s*E;a4hDit_?&<IqTQOK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504427_failAssert0null504862_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("recursi^on_with_inheritance.html", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0null504862 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template recursi^on_with_inheritance.html not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationString504601_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("recursi^on_with_inheritance.html", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "A&Z/hFF&sld|n");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationString504601 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template recursi^on_with_inheritance.html not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0_literalMutationString504697_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_literalMutationString504697 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:zWK]4s*E;a4hDit_?&<IqTQOK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504429_failAssert0_literalMutationString504580_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute(")C0f#OMW[QXu0Z:v ^Y,+;8tx^^0raA", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion2txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504429 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504429_failAssert0_literalMutationString504580 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template )C0f#OMW[QXu0Z:v ^Y,+;8tx^^0raA not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0_add504809_failAssert0_literalMutationString506834_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursiontxt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504809 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504809_failAssert0_literalMutationString506834 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:zWK]4s*E;a4hDit_?&<IqTQOK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0_add504806_failAssert0null509324_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    java.io.StringWriter sw = execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504806 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504806_failAssert0null509324 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:zWK]4s*E;a4hDit_?&<IqTQOK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationString504597_failAssert0_add508702_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("recursi^on_with_inheritance.html", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationString504597 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0_literalMutationString504597_failAssert0_add508702 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template recursi^on_with_inheritance.html not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504425_failAssert0_add504809_failAssert0_add508443_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    java.io.StringWriter sw = execute(":K:*;:zWK]4s*E;a4hDit_?&<IqTQOK", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504809 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504425_failAssert0_add504809_failAssert0_add508443 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :K:*;:zWK]4s*E;a4hDit_?&<IqTQOK not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504430_failAssert0null504864_failAssert0_literalMutationString506660_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("F+O*a@Uw%20G_t8F!Jdt@|UyMseNE1f", new java.lang.Object() {
                        java.lang.Object value = new java.lang.Object() {
                            boolean value = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504430 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504430_failAssert0null504864 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504430_failAssert0null504864_failAssert0_literalMutationString506660 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template F+O*a@Uw%20G_t8F!Jdt@|UyMseNE1f not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString504427_failAssert0_add504775_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("recursi^on_with_inheritance.html", new java.lang.Object() {
                    java.lang.Object value = new java.lang.Object() {
                        boolean value = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                com.github.mustachejava.TestUtil.getContents(this.root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString504427_failAssert0_add504775 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template recursi^on_with_inheritance.html not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString309219_add309542_add312905() throws java.io.IOException {
        java.io.StringWriter o_testPartialRecursionWithInheritance_literalMutationString309219_add309542_add312905__1 = execute("", new java.lang.Object() {
            java.lang.Object test = new java.lang.Object() {
                boolean test = false;
            };
        });
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testPartialRecursionWithInheritance_literalMutationString309219_add309542_add312905__1)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testPartialRecursionWithInheritance_literalMutationString309219_add309542_add312905__1)).toString());
        java.io.StringWriter sw = execute("", new java.lang.Object() {
            java.lang.Object test = new java.lang.Object() {
                boolean test = false;
            };
        });
        java.lang.String o_testPartialRecursionWithInheritance_literalMutationString309219__11 = com.github.mustachejava.TestUtil.getContents(this.root, "recursive_partial_inheritance.txt");
        junit.framework.TestCase.assertEquals("TEST\n  TEST\n\n\n", o_testPartialRecursionWithInheritance_literalMutationString309219__11);
        sw.toString();
        sw.toString();
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testPartialRecursionWithInheritance_literalMutationString309219_add309542_add312905__1)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testPartialRecursionWithInheritance_literalMutationString309219_add309542_add312905__1)).toString());
        junit.framework.TestCase.assertEquals("TEST\n  TEST\n\n\n", o_testPartialRecursionWithInheritance_literalMutationString309219__11);
    }

    public void testPartialRecursionWithInheritance_add309234_remove309632_literalMutationString310697_failAssert0() throws java.io.IOException {
        try {
            java.io.StringWriter sw = execute("!uWT}.!.bwGMYkA8{tQ>jKo$bbPsJ#ug-U", new java.lang.Object() {
                java.lang.Object test = new java.lang.Object() {
                    boolean test = false;
                };
            });
            sw.toString();
            java.lang.String o_testPartialRecursionWithInheritance_add309234__12 = com.github.mustachejava.TestUtil.getContents(this.root, "recursive_partial_inheritance.txt");
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_add309234_remove309632_literalMutationString310697 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template !uWT}.!.bwGMYkA8{tQ>jKo$bbPsJ#ug-U not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString309223_failAssert0null309667_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("-!ep55/Wr.O7CVu=vs]PB/X0({yZ<VO5!f", new java.lang.Object() {
                    java.lang.Object test = new java.lang.Object() {
                        boolean test = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309223 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309223_failAssert0null309667 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template -!ep55/Wr.O7CVu=vs]PB/X0({yZ<VO5!f not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString309223_failAssert0() throws java.io.IOException {
        try {
            java.io.StringWriter sw = execute("-!ep55/Wr.O7CVu=vs]PB/X0({yZ<VO5!f", new java.lang.Object() {
                java.lang.Object test = new java.lang.Object() {
                    boolean test = false;
                };
            });
            com.github.mustachejava.TestUtil.getContents(this.root, "recursive_partial_inheritance.txt");
            sw.toString();
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309223 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template -!ep55/Wr.O7CVu=vs]PB/X0({yZ<VO5!f not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString309223_failAssert0_add309589_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("-!ep55/Wr.O7CVu=vs]PB/X0({yZ<VO5!f", new java.lang.Object() {
                    java.lang.Object test = new java.lang.Object() {
                        boolean test = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursive_partial_inheritance.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309223 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309223_failAssert0_add309589 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template -!ep55/Wr.O7CVu=vs]PB/X0({yZ<VO5!f not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString309223_failAssert0_add309587_failAssert0() throws java.io.IOException {
        try {
            {
                execute("-!ep55/Wr.O7CVu=vs]PB/X0({yZ<VO5!f", new java.lang.Object() {
                    java.lang.Object test = new java.lang.Object() {
                        boolean test = false;
                    };
                });
                java.io.StringWriter sw = execute("-!ep55/Wr.O7CVu=vs]PB/X0({yZ<VO5!f", new java.lang.Object() {
                    java.lang.Object test = new java.lang.Object() {
                        boolean test = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursive_partial_inheritance.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309223 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309223_failAssert0_add309587 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template -!ep55/Wr.O7CVu=vs]PB/X0({yZ<VO5!f not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString309223_failAssert0_add309590_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("-!ep55/Wr.O7CVu=vs]PB/X0({yZ<VO5!f", new java.lang.Object() {
                    java.lang.Object test = new java.lang.Object() {
                        boolean test = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursive_partial_inheritance.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309223 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309223_failAssert0_add309590 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template -!ep55/Wr.O7CVu=vs]PB/X0({yZ<VO5!f not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString309227_failAssert0_literalMutationString309432_failAssert0_literalMutationString312563_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("_OBz)XA1TB&0{:J`ucz.$n#&GYDX!gZ:x&", new java.lang.Object() {
                        java.lang.Object test = new java.lang.Object() {
                            boolean test = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "");
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309227 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309227_failAssert0_literalMutationString309432 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309227_failAssert0_literalMutationString309432_failAssert0_literalMutationString312563 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template _OBz)XA1TB&0{:J`ucz.$n#&GYDX!gZ:x& not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString309223_failAssert0_literalMutationString309442_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("-!ep55/Wr.O7CVu=vs]PB/^0({yZ<VO5!f", new java.lang.Object() {
                    java.lang.Object test = new java.lang.Object() {
                        boolean test = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursive_partial_inheritance.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309223 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309223_failAssert0_literalMutationString309442 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template -!ep55/Wr.O7CVu=vs]PB/^0({yZ<VO5!f not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString309219_add309541_literalMutationString310289_failAssert0() throws java.io.IOException {
        try {
            java.io.StringWriter sw = execute("#", new java.lang.Object() {
                java.lang.Object test = new java.lang.Object() {
                    boolean test = false;
                };
            });
            java.lang.String o_testPartialRecursionWithInheritance_literalMutationString309219_add309541__11 = com.github.mustachejava.TestUtil.getContents(this.root, "recursive_partial_inheritance.txt");
            java.lang.String o_testPartialRecursionWithInheritance_literalMutationString309219__11 = com.github.mustachejava.TestUtil.getContents(this.root, "recursive_partial_inheritance.txt");
            sw.toString();
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309219_add309541_literalMutationString310289 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template # not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString309219_add309540() throws java.io.IOException {
        java.io.StringWriter o_testPartialRecursionWithInheritance_literalMutationString309219_add309540__1 = execute("", new java.lang.Object() {
            java.lang.Object test = new java.lang.Object() {
                boolean test = false;
            };
        });
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testPartialRecursionWithInheritance_literalMutationString309219_add309540__1)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testPartialRecursionWithInheritance_literalMutationString309219_add309540__1)).toString());
        java.io.StringWriter sw = execute("", new java.lang.Object() {
            java.lang.Object test = new java.lang.Object() {
                boolean test = false;
            };
        });
        java.lang.String o_testPartialRecursionWithInheritance_literalMutationString309219__11 = com.github.mustachejava.TestUtil.getContents(this.root, "recursive_partial_inheritance.txt");
        junit.framework.TestCase.assertEquals("TEST\n  TEST\n\n\n", o_testPartialRecursionWithInheritance_literalMutationString309219__11);
        sw.toString();
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testPartialRecursionWithInheritance_literalMutationString309219_add309540__1)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testPartialRecursionWithInheritance_literalMutationString309219_add309540__1)).toString());
        junit.framework.TestCase.assertEquals("TEST\n  TEST\n\n\n", o_testPartialRecursionWithInheritance_literalMutationString309219__11);
    }

    public void testPartialRecursionWithInheritance_literalMutationString309223_failAssert0_literalMutationString309447_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("-!ep55/Wr.O7CVu=vs]PB/X0({yZ<VO5!f", new java.lang.Object() {
                    java.lang.Object test = new java.lang.Object() {
                        boolean test = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, ")AX6}p*G, :N(8MDi@Y=qm^M&sycOtY W");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309223 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309223_failAssert0_literalMutationString309447 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template -!ep55/Wr.O7CVu=vs]PB/X0({yZ<VO5!f not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString309223_failAssert0_literalMutationString309443_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("-!ep55/Wr.O7C]Vu=vs]PB/X0({yZ<VO5!f", new java.lang.Object() {
                    java.lang.Object test = new java.lang.Object() {
                        boolean test = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursive_partial_inheritance.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309223 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309223_failAssert0_literalMutationString309443 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template -!ep55/Wr.O7C]Vu=vs]PB/X0({yZ<VO5!f not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString309222_failAssert0_literalMutationString309492_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("0!fLhF|}VDje(;&6pv=fTa:p{`!7Kljwc<", new java.lang.Object() {
                    java.lang.Object test = new java.lang.Object() {
                        boolean test = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursive_partial_inheritance.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309222 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309222_failAssert0_literalMutationString309492 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 0!fLhF|}VDje(;&6pv=fTa:p{`!7Kljwc< not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritancenull309238_failAssert0_literalMutationString309537_failAssert0_literalMutationString311309_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("PQc.F.|Qe", new java.lang.Object() {
                        java.lang.Object test = new java.lang.Object() {
                            boolean test = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialRecursionWithInheritancenull309238 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testPartialRecursionWithInheritancenull309238_failAssert0_literalMutationString309537 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritancenull309238_failAssert0_literalMutationString309537_failAssert0_literalMutationString311309 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template PQc.F.|Qe not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString309228_failAssert0null309671_failAssert0_literalMutationString311588_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("recursive_par^ial_inheritance.html", new java.lang.Object() {
                        java.lang.Object test = new java.lang.Object() {
                            boolean test = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309228 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309228_failAssert0null309671 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309228_failAssert0null309671_failAssert0_literalMutationString311588 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template recursive_par^ial_inheritance.html not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString309226_failAssert0_literalMutationString309478_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("Lgz]F*yQfcY?p`NzReR1#DG/_qq#<M!y?a", new java.lang.Object() {
                    java.lang.Object test = new java.lang.Object() {
                        boolean test = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309226 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309226_failAssert0_literalMutationString309478 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template Lgz]F*yQfcY?p`NzReR1#DG/_qq#<M!y?a not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString309221_failAssert0_literalMutationString309403_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("}={e%|oor", new java.lang.Object() {
                    java.lang.Object test = new java.lang.Object() {
                        boolean test = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursive_partial_inheritance.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309221 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309221_failAssert0_literalMutationString309403 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template }={e%|oor not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString309229_failAssert0_add309582_failAssert0_literalMutationString311934_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("recursive_partial[_inheritance.html", new java.lang.Object() {
                        java.lang.Object test = new java.lang.Object() {
                            boolean test = false;
                        };
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "recursiveh_partial_inheritance.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309229 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309229_failAssert0_add309582 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309229_failAssert0_add309582_failAssert0_literalMutationString311934 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template recursive_partial[_inheritance.html not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString309231_failAssert0_literalMutationString309386_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("veD*]P]n/ooC*qcR68i8chc_[/|8(T^LDW", new java.lang.Object() {
                    java.lang.Object test = new java.lang.Object() {
                        boolean test = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "0>AQ)XHZ#XY<u+vtMQg@XlkaKp{qCxzBX");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309231 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309231_failAssert0_literalMutationString309386 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template veD*]P]n/ooC*qcR68i8chc_[/|8(T^LDW not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString309223_failAssert0_add309588_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("-!ep55/Wr.O7CVu=vs]PB/X0({yZ<VO5!f", new java.lang.Object() {
                    java.lang.Object test = new java.lang.Object() {
                        boolean test = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "recursive_partial_inheritance.txt");
                com.github.mustachejava.TestUtil.getContents(this.root, "recursive_partial_inheritance.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309223 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309223_failAssert0_add309588 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template -!ep55/Wr.O7CVu=vs]PB/X0({yZ<VO5!f not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString309226_failAssert0_literalMutationString309482_failAssert0() throws java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("recursive_p`rtial_inheritance.html", new java.lang.Object() {
                    java.lang.Object test = new java.lang.Object() {
                        boolean test = false;
                    };
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309226 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString309226_failAssert0_literalMutationString309482 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template recursive_p`rtial_inheritance.html not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_remove309236_literalMutationString309362_failAssert0() throws java.io.IOException {
        try {
            java.io.StringWriter sw = execute("W.<Nx!xgpj2^Fa9vDj!qOMy:BDyaiUh?dn", new java.lang.Object() {
                java.lang.Object test = new java.lang.Object() {
                    boolean test = false;
                };
            });
            java.lang.String o_testPartialRecursionWithInheritance_remove309236__10 = com.github.mustachejava.TestUtil.getContents(this.root, "recursive_partial_inheritance.txt");
            sw.toString();
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_remove309236_literalMutationString309362 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template W.<Nx!xgpj2^Fa9vDj!qOMy:BDyaiUh?dn not found", expected.getMessage());
        }
    }

    public void testSimplePragma_literalMutationString354334_failAssert0null356487_failAssert0_add364112_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("j!DipsVliR%mJ+l*1");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(null, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    m.execute(null, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimplePragma_literalMutationString354334 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimplePragma_literalMutationString354334_failAssert0null356487 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimplePragma_literalMutationString354334_failAssert0null356487_failAssert0_add364112 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template j!DipsVliR%mJ+l*1 not found", expected.getMessage());
        }
    }

    public void testSimplePragma_literalMutationString354334_failAssert0_add356270_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("j!DipsVliR%mJ+l*1");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimplePragma_literalMutationString354334 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimplePragma_literalMutationString354334_failAssert0_add356270 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template j!DipsVliR%mJ+l*1 not found", expected.getMessage());
        }
    }

    public void testSimplePragma_literalMutationString354334_failAssert0null356487_failAssert0_literalMutationString360648_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("j!Dip,sVliR%mJ+l*1");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(null, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimplePragma_literalMutationString354334 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimplePragma_literalMutationString354334_failAssert0null356487 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimplePragma_literalMutationString354334_failAssert0null356487_failAssert0_literalMutationString360648 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template j!Dip,sVliR%mJ+l*1 not found", expected.getMessage());
        }
    }

    public void testSimplePragma_literalMutationString354334_failAssert0null356487_failAssert0null365069_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("j!DipsVliR%mJ+l*1");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(null, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testSimplePragma_literalMutationString354334 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimplePragma_literalMutationString354334_failAssert0null356487 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimplePragma_literalMutationString354334_failAssert0null356487_failAssert0null365069 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template j!DipsVliR%mJ+l*1 not found", expected.getMessage());
        }
    }

    public void testSimplePragma_literalMutationString354354_failAssert0_literalMutationString355568_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile(")di}0F}VTCh/{kQ>m");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "");
                sw.toString();
                junit.framework.TestCase.fail("testSimplePragma_literalMutationString354354 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testSimplePragma_literalMutationString354354_failAssert0_literalMutationString355568 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template )di}0F}VTCh/{kQ>m not found", expected.getMessage());
        }
    }

    public void testSimplePragma_literalMutationString354334_failAssert0_literalMutationString355359_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("j!DipsVliR%mJ+l*1");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = ";(2x8";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimplePragma_literalMutationString354334 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimplePragma_literalMutationString354334_failAssert0_literalMutationString355359 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template j!DipsVliR%mJ+l*1 not found", expected.getMessage());
        }
    }

    public void testSimplePragma_literalMutationString354334_failAssert0_literalMutationNumber355362_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("j!DipsVliR%mJ+l*1");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 0;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimplePragma_literalMutationString354334 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimplePragma_literalMutationString354334_failAssert0_literalMutationNumber355362 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template j!DipsVliR%mJ+l*1 not found", expected.getMessage());
        }
    }

    public void testSimplePragma_literalMutationString354329() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        com.github.mustachejava.MustacheFactory c = createMustacheFactory();
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        com.github.mustachejava.Mustache m = c.compile("");
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        java.io.StringWriter sw = new java.io.StringWriter();
        java.io.Writer o_testSimplePragma_literalMutationString354329__7 = m.execute(sw, new java.lang.Object() {
            java.lang.String name = "Chris";

            int value = 10000;

            int taxed_value() {
                return ((int) ((this.value) - ((this.value) * 0.4)));
            }

            boolean in_ca = true;
        });
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testSimplePragma_literalMutationString354329__7)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testSimplePragma_literalMutationString354329__7)).toString());
        java.lang.String o_testSimplePragma_literalMutationString354329__14 = com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
        junit.framework.TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", o_testSimplePragma_literalMutationString354329__14);
        sw.toString();
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testSimplePragma_literalMutationString354329__7)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testSimplePragma_literalMutationString354329__7)).toString());
        junit.framework.TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", o_testSimplePragma_literalMutationString354329__14);
    }

    public void testSimplePragma_literalMutationString354340_literalMutationString354966_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache m = c.compile("#9[sGW Nkn0n<Bj]/");
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer o_testSimplePragma_literalMutationString354340__7 = m.execute(sw, new java.lang.Object() {
                java.lang.String name = "ChIis";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            java.lang.String o_testSimplePragma_literalMutationString354340__14 = com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSimplePragma_literalMutationString354340_literalMutationString354966 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template #9[sGW Nkn0n<Bj]/ not found", expected.getMessage());
        }
    }

    public void testSimplePragma_literalMutationNumber354350null356411_failAssert0_literalMutationString361458_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("simplepra:ma.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.Writer o_testSimplePragma_literalMutationNumber354350__7 = m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.0)));
                    }

                    boolean in_ca = true;
                });
                java.lang.String o_testSimplePragma_literalMutationNumber354350__15 = com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testSimplePragma_literalMutationNumber354350null356411 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testSimplePragma_literalMutationNumber354350null356411_failAssert0_literalMutationString361458 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template simplepra:ma.html not found", expected.getMessage());
        }
    }

    public void testSimplePragma_literalMutationString354334_failAssert0null356487_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("j!DipsVliR%mJ+l*1");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(null, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimplePragma_literalMutationString354334 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimplePragma_literalMutationString354334_failAssert0null356487 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template j!DipsVliR%mJ+l*1 not found", expected.getMessage());
        }
    }

    public void testSimplePragma_literalMutationString354355_failAssert0_literalMutationString355539_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("sim`lepragma.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "siple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimplePragma_literalMutationString354355 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testSimplePragma_literalMutationString354355_failAssert0_literalMutationString355539 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template sim`lepragma.html not found", expected.getMessage());
        }
    }

    public void testSimplePragma_literalMutationString354334_failAssert0_add356271_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("j!DipsVliR%mJ+l*1");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimplePragma_literalMutationString354334 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimplePragma_literalMutationString354334_failAssert0_add356271 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template j!DipsVliR%mJ+l*1 not found", expected.getMessage());
        }
    }

    public void testSimplePragma_literalMutationString354334_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache m = c.compile("j!DipsVliR%mJ+l*1");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, new java.lang.Object() {
                java.lang.String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSimplePragma_literalMutationString354334 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template j!DipsVliR%mJ+l*1 not found", expected.getMessage());
        }
    }

    public void testMultipleWrappers_remove437004_literalMutationString438827_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache m = c.compile("OHF]:GMQ>[a");
            java.io.StringWriter sw = new java.io.StringWriter();
            java.lang.String o_testMultipleWrappers_remove437004__7 = com.github.mustachejava.TestUtil.getContents(this.root, "simplerewrap.txt");
            sw.toString();
            junit.framework.TestCase.fail("testMultipleWrappers_remove437004_literalMutationString438827 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template OHF]:GMQ>[a not found", expected.getMessage());
        }
    }

    public void testMultipleWrappers_literalMutationString436960_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache m = c.compile(";[9iT16!Mh&");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, new java.lang.Object() {
                java.lang.String name = "Chris";

                int value = 10000;

                java.lang.Object o = new java.lang.Object() {
                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    java.lang.String fred = "test";
                };

                java.lang.Object in_ca = java.util.Arrays.asList(this.o, new java.lang.Object() {
                    int taxed_value = ((int) ((this.value) - ((this.value) * 0.2)));
                }, this.o);
            });
            com.github.mustachejava.TestUtil.getContents(this.root, "simplerewrap.txt");
            sw.toString();
            junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;[9iT16!Mh& not found", expected.getMessage());
        }
    }

    public void testMultipleWrappers_literalMutationString436960_failAssert0_literalMutationString439068_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile(";[9iT16!Mh&");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    java.lang.Object o = new java.lang.Object() {
                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        java.lang.String fred = "";
                    };

                    java.lang.Object in_ca = java.util.Arrays.asList(this.o, new java.lang.Object() {
                        int taxed_value = ((int) ((this.value) - ((this.value) * 0.2)));
                    }, this.o);
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simplerewrap.txt");
                sw.toString();
                junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960_failAssert0_literalMutationString439068 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;[9iT16!Mh& not found", expected.getMessage());
        }
    }

    public void testMultipleWrappers_literalMutationString436960_failAssert0_literalMutationString439068_failAssert0_add449887_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile(";[9iT16!Mh&");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        java.lang.Object o = new java.lang.Object() {
                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.4)));
                            }

                            java.lang.String fred = "";
                        };

                        java.lang.Object in_ca = java.util.Arrays.asList(this.o, new java.lang.Object() {
                            int taxed_value = ((int) ((this.value) - ((this.value) * 0.2)));
                        }, this.o);
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simplerewrap.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960_failAssert0_literalMutationString439068 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960_failAssert0_literalMutationString439068_failAssert0_add449887 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;[9iT16!Mh& not found", expected.getMessage());
        }
    }

    public void testMultipleWrappers_literalMutationString436961_failAssert0_literalMutationString439130_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("simple.h%Fml");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    java.lang.Object o = new java.lang.Object() {
                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        java.lang.String fred = "test";
                    };

                    java.lang.Object in_ca = java.util.Arrays.asList(this.o, new java.lang.Object() {
                        int taxed_value = ((int) ((this.value) - ((this.value) * 0.2)));
                    }, this.o);
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simplerewrap.txt");
                sw.toString();
                junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436961 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436961_failAssert0_literalMutationString439130 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template simple.h%Fml not found", expected.getMessage());
        }
    }

    public void testMultipleWrappers_literalMutationString436960_failAssert0_literalMutationString439068_failAssert0_literalMutationString445872_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile(";[9iT16[!Mh&");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        java.lang.Object o = new java.lang.Object() {
                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.4)));
                            }

                            java.lang.String fred = "";
                        };

                        java.lang.Object in_ca = java.util.Arrays.asList(this.o, new java.lang.Object() {
                            int taxed_value = ((int) ((this.value) - ((this.value) * 0.2)));
                        }, this.o);
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simplerewrap.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960_failAssert0_literalMutationString439068 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960_failAssert0_literalMutationString439068_failAssert0_literalMutationString445872 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;[9iT16[!Mh& not found", expected.getMessage());
        }
    }

    public void testMultipleWrappers_literalMutationString436960_failAssert0_literalMutationString439068_failAssert0_literalMutationString445871_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile(";[iT16!Mh&");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        java.lang.Object o = new java.lang.Object() {
                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.4)));
                            }

                            java.lang.String fred = "";
                        };

                        java.lang.Object in_ca = java.util.Arrays.asList(this.o, new java.lang.Object() {
                            int taxed_value = ((int) ((this.value) - ((this.value) * 0.2)));
                        }, this.o);
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simplerewrap.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960_failAssert0_literalMutationString439068 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960_failAssert0_literalMutationString439068_failAssert0_literalMutationString445871 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;[iT16!Mh& not found", expected.getMessage());
        }
    }

    public void testMultipleWrappers_literalMutationString436960_failAssert0_literalMutationString439068_failAssert0null451039_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile(";[9iT16!Mh&");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(null, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        java.lang.Object o = new java.lang.Object() {
                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.4)));
                            }

                            java.lang.String fred = "";
                        };

                        java.lang.Object in_ca = java.util.Arrays.asList(this.o, new java.lang.Object() {
                            int taxed_value = ((int) ((this.value) - ((this.value) * 0.2)));
                        }, this.o);
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simplerewrap.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960_failAssert0_literalMutationString439068 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960_failAssert0_literalMutationString439068_failAssert0null451039 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;[9iT16!Mh& not found", expected.getMessage());
        }
    }

    public void testMultipleWrappers_literalMutationString436958_failAssert0_literalMutationString438841_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("(qg]Qpt_K|9");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    java.lang.Object o = new java.lang.Object() {
                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        java.lang.String fred = "test";
                    };

                    java.lang.Object in_ca = java.util.Arrays.asList(this.o, new java.lang.Object() {
                        int taxed_value = ((int) ((this.value) - ((this.value) * 0.2)));
                    }, this.o);
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simplerewrap.txt");
                sw.toString();
                junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436958 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436958_failAssert0_literalMutationString438841 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template (qg]Qpt_K|9 not found", expected.getMessage());
        }
    }

    public void testMultipleWrappers_literalMutationString436960_failAssert0_literalMutationString439068_failAssert0null451040_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile(";[9iT16!Mh&");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        java.lang.Object o = new java.lang.Object() {
                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.4)));
                            }

                            java.lang.String fred = "";
                        };

                        java.lang.Object in_ca = java.util.Arrays.asList(this.o, new java.lang.Object() {
                            int taxed_value = ((int) ((this.value) - ((this.value) * 0.2)));
                        }, this.o);
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960_failAssert0_literalMutationString439068 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960_failAssert0_literalMutationString439068_failAssert0null451040 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;[9iT16!Mh& not found", expected.getMessage());
        }
    }

    public void testMultipleWrappers_literalMutationString436960_failAssert0null440616_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile(";[9iT16!Mh&");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(null, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    java.lang.Object o = new java.lang.Object() {
                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        java.lang.String fred = "test";
                    };

                    java.lang.Object in_ca = java.util.Arrays.asList(this.o, new java.lang.Object() {
                        int taxed_value = ((int) ((this.value) - ((this.value) * 0.2)));
                    }, this.o);
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simplerewrap.txt");
                sw.toString();
                junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960_failAssert0null440616 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;[9iT16!Mh& not found", expected.getMessage());
        }
    }

    public void testMultipleWrappers_literalMutationString436960_failAssert0_add440257_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                createMustacheFactory();
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile(";[9iT16!Mh&");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    java.lang.Object o = new java.lang.Object() {
                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        java.lang.String fred = "test";
                    };

                    java.lang.Object in_ca = java.util.Arrays.asList(this.o, new java.lang.Object() {
                        int taxed_value = ((int) ((this.value) - ((this.value) * 0.2)));
                    }, this.o);
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simplerewrap.txt");
                sw.toString();
                junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960_failAssert0_add440257 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;[9iT16!Mh& not found", expected.getMessage());
        }
    }

    public void testMultipleWrappers_literalMutationString436956() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        com.github.mustachejava.MustacheFactory c = createMustacheFactory();
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        com.github.mustachejava.Mustache m = c.compile("");
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        java.io.StringWriter sw = new java.io.StringWriter();
        java.io.Writer o_testMultipleWrappers_literalMutationString436956__7 = m.execute(sw, new java.lang.Object() {
            java.lang.String name = "Chris";

            int value = 10000;

            java.lang.Object o = new java.lang.Object() {
                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                java.lang.String fred = "test";
            };

            java.lang.Object in_ca = java.util.Arrays.asList(this.o, new java.lang.Object() {
                int taxed_value = ((int) ((this.value) - ((this.value) * 0.2)));
            }, this.o);
        });
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testMultipleWrappers_literalMutationString436956__7)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testMultipleWrappers_literalMutationString436956__7)).toString());
        java.lang.String o_testMultipleWrappers_literalMutationString436956__23 = com.github.mustachejava.TestUtil.getContents(this.root, "simplerewrap.txt");
        junit.framework.TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.test\nWell, $8000,  after taxes.\nWell, $6000,  after taxes.test\n", o_testMultipleWrappers_literalMutationString436956__23);
        sw.toString();
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testMultipleWrappers_literalMutationString436956__7)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testMultipleWrappers_literalMutationString436956__7)).toString());
        junit.framework.TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.test\nWell, $8000,  after taxes.\nWell, $6000,  after taxes.test\n", o_testMultipleWrappers_literalMutationString436956__23);
    }

    public void testMultipleWrappers_literalMutationString436960_failAssert0_literalMutationString439068_failAssert0_add449882_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    createMustacheFactory();
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile(";[9iT16!Mh&");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        java.lang.Object o = new java.lang.Object() {
                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.4)));
                            }

                            java.lang.String fred = "";
                        };

                        java.lang.Object in_ca = java.util.Arrays.asList(this.o, new java.lang.Object() {
                            int taxed_value = ((int) ((this.value) - ((this.value) * 0.2)));
                        }, this.o);
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simplerewrap.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960_failAssert0_literalMutationString439068 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436960_failAssert0_literalMutationString439068_failAssert0_add449882 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;[9iT16!Mh& not found", expected.getMessage());
        }
    }

    public void testMultipleWrappers_literalMutationString436958_failAssert0_literalMutationString438841_failAssert0_literalMutationString445032_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("(qg]Qpt_K|9");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        java.lang.Object o = new java.lang.Object() {
                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.4)));
                            }

                            java.lang.String fred = "PEMa";
                        };

                        java.lang.Object in_ca = java.util.Arrays.asList(this.o, new java.lang.Object() {
                            int taxed_value = ((int) ((this.value) - ((this.value) * 0.2)));
                        }, this.o);
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simplerewrap.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436958 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436958_failAssert0_literalMutationString438841 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436958_failAssert0_literalMutationString438841_failAssert0_literalMutationString445032 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template (qg]Qpt_K|9 not found", expected.getMessage());
        }
    }

    public void testMultipleWrappers_literalMutationString436958_failAssert0_literalMutationString438841_failAssert0_add449733_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("(qg]Qpt_K|9");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        java.lang.Object o = new java.lang.Object() {
                            int taxed_value() {
                                return ((int) ((this.value) - ((this.value) * 0.4)));
                            }

                            java.lang.String fred = "test";
                        };

                        java.lang.Object in_ca = java.util.Arrays.asList(this.o, new java.lang.Object() {
                            int taxed_value = ((int) ((this.value) - ((this.value) * 0.2)));
                        }, this.o);
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simplerewrap.txt");
                    com.github.mustachejava.TestUtil.getContents(this.root, "simplerewrap.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436958 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436958_failAssert0_literalMutationString438841 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString436958_failAssert0_literalMutationString438841_failAssert0_add449733 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template (qg]Qpt_K|9 not found", expected.getMessage());
        }
    }

    public void testNestedLatches_literalMutationString20575_failAssert0_add24506_failAssert0() throws java.io.IOException {
        try {
            {
                com.github.mustachejava.DefaultMustacheFactory c = createMustacheFactory();
                c.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
                com.github.mustachejava.Mustache m = c.compile("lI[UHNI)_Oyg(b1i");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.Writer execute = m.execute(sw, new java.lang.Object() {
                    java.util.concurrent.Callable<java.lang.Object> nest = () -> {
                        java.lang.Thread.sleep(300);
                        return "How";
                    };

                    java.util.concurrent.Callable<java.lang.Object> nested = () -> {
                        java.lang.Thread.sleep(200);
                        return "are";
                    };

                    java.util.concurrent.Callable<java.lang.Object> nestest = () -> {
                        java.lang.Thread.sleep(100);
                        return "you?";
                    };
                });
                execute.close();
                execute.close();
                sw.toString();
                junit.framework.TestCase.fail("testNestedLatches_literalMutationString20575 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testNestedLatches_literalMutationString20575_failAssert0_add24506 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template lI[UHNI)_Oyg(b1i not found", expected.getMessage());
        }
    }

    public void testNestedLatches_literalMutationString20575_failAssert0_literalMutationString23115_failAssert0() throws java.io.IOException {
        try {
            {
                com.github.mustachejava.DefaultMustacheFactory c = createMustacheFactory();
                c.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
                com.github.mustachejava.Mustache m = c.compile("lI[UHNI)_Oyg(b1i");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.Writer execute = m.execute(sw, new java.lang.Object() {
                    java.util.concurrent.Callable<java.lang.Object> nest = () -> {
                        java.lang.Thread.sleep(300);
                        return "How";
                    };

                    java.util.concurrent.Callable<java.lang.Object> nested = () -> {
                        java.lang.Thread.sleep(200);
                        return "";
                    };

                    java.util.concurrent.Callable<java.lang.Object> nestest = () -> {
                        java.lang.Thread.sleep(100);
                        return "you?";
                    };
                });
                execute.close();
                sw.toString();
                junit.framework.TestCase.fail("testNestedLatches_literalMutationString20575 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testNestedLatches_literalMutationString20575_failAssert0_literalMutationString23115 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template lI[UHNI)_Oyg(b1i not found", expected.getMessage());
        }
    }

    public void testNestedLatches_literalMutationString20575_failAssert0_add24506_failAssert0_literalMutationString33421_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.DefaultMustacheFactory c = createMustacheFactory();
                    c.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
                    com.github.mustachejava.Mustache m = c.compile("lI[UHNI)_Oyg(1i");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    java.io.Writer execute = m.execute(sw, new java.lang.Object() {
                        java.util.concurrent.Callable<java.lang.Object> nest = () -> {
                            java.lang.Thread.sleep(300);
                            return "How";
                        };

                        java.util.concurrent.Callable<java.lang.Object> nested = () -> {
                            java.lang.Thread.sleep(200);
                            return "are";
                        };

                        java.util.concurrent.Callable<java.lang.Object> nestest = () -> {
                            java.lang.Thread.sleep(100);
                            return "you?";
                        };
                    });
                    execute.close();
                    execute.close();
                    sw.toString();
                    junit.framework.TestCase.fail("testNestedLatches_literalMutationString20575 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testNestedLatches_literalMutationString20575_failAssert0_add24506 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testNestedLatches_literalMutationString20575_failAssert0_add24506_failAssert0_literalMutationString33421 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template lI[UHNI)_Oyg(1i not found", expected.getMessage());
        }
    }

    public void testNestedLatches_literalMutationString20574_failAssert0_literalMutationString23220_failAssert0() throws java.io.IOException {
        try {
            {
                com.github.mustachejava.DefaultMustacheFactory c = createMustacheFactory();
                c.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
                com.github.mustachejava.Mustache m = c.compile(" does not exist");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.Writer execute = m.execute(sw, new java.lang.Object() {
                    java.util.concurrent.Callable<java.lang.Object> nest = () -> {
                        java.lang.Thread.sleep(300);
                        return "How";
                    };

                    java.util.concurrent.Callable<java.lang.Object> nested = () -> {
                        java.lang.Thread.sleep(200);
                        return "are";
                    };

                    java.util.concurrent.Callable<java.lang.Object> nestest = () -> {
                        java.lang.Thread.sleep(100);
                        return "you?";
                    };
                });
                execute.close();
                sw.toString();
                junit.framework.TestCase.fail("testNestedLatches_literalMutationString20574 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testNestedLatches_literalMutationString20574_failAssert0_literalMutationString23220 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testNestedLatches_literalMutationString20575_failAssert0_add24506_failAssert0_add37050_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.DefaultMustacheFactory c = createMustacheFactory();
                    c.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
                    c.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
                    com.github.mustachejava.Mustache m = c.compile("lI[UHNI)_Oyg(b1i");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    java.io.Writer execute = m.execute(sw, new java.lang.Object() {
                        java.util.concurrent.Callable<java.lang.Object> nest = () -> {
                            java.lang.Thread.sleep(300);
                            return "How";
                        };

                        java.util.concurrent.Callable<java.lang.Object> nested = () -> {
                            java.lang.Thread.sleep(200);
                            return "are";
                        };

                        java.util.concurrent.Callable<java.lang.Object> nestest = () -> {
                            java.lang.Thread.sleep(100);
                            return "you?";
                        };
                    });
                    execute.close();
                    execute.close();
                    sw.toString();
                    junit.framework.TestCase.fail("testNestedLatches_literalMutationString20575 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testNestedLatches_literalMutationString20575_failAssert0_add24506 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testNestedLatches_literalMutationString20575_failAssert0_add24506_failAssert0_add37050 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template lI[UHNI)_Oyg(b1i not found", expected.getMessage());
        }
    }

    public void testNestedLatches_literalMutationNumber20602_literalMutationString20852_failAssert0() throws java.io.IOException {
        try {
            com.github.mustachejava.DefaultMustacheFactory c = createMustacheFactory();
            c.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
            com.github.mustachejava.Mustache m = c.compile("mp#&G]!v61N_#?5W");
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer execute = m.execute(sw, new java.lang.Object() {
                java.util.concurrent.Callable<java.lang.Object> nest = () -> {
                    java.lang.Thread.sleep(300);
                    return "How";
                };

                java.util.concurrent.Callable<java.lang.Object> nested = () -> {
                    java.lang.Thread.sleep(200);
                    return "are";
                };

                java.util.concurrent.Callable<java.lang.Object> nestest = () -> {
                    java.lang.Thread.sleep(0);
                    return "you?";
                };
            });
            execute.close();
            sw.toString();
            junit.framework.TestCase.fail("testNestedLatches_literalMutationNumber20602_literalMutationString20852 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template mp#&G]!v61N_#?5W not found", expected.getMessage());
        }
    }

    public void testNestedLatches_add20617_literalMutationString22635_failAssert0() throws java.io.IOException {
        try {
            com.github.mustachejava.DefaultMustacheFactory c = createMustacheFactory();
            c.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
            com.github.mustachejava.Mustache o_testNestedLatches_add20617__5 = c.compile(";*2V:66tvI(5O@z/");
            com.github.mustachejava.Mustache m = c.compile("latchedtest.html");
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer execute = m.execute(sw, new java.lang.Object() {
                java.util.concurrent.Callable<java.lang.Object> nest = () -> {
                    java.lang.Thread.sleep(300);
                    return "How";
                };

                java.util.concurrent.Callable<java.lang.Object> nested = () -> {
                    java.lang.Thread.sleep(200);
                    return "are";
                };

                java.util.concurrent.Callable<java.lang.Object> nestest = () -> {
                    java.lang.Thread.sleep(100);
                    return "you?";
                };
            });
            execute.close();
            sw.toString();
            junit.framework.TestCase.fail("testNestedLatches_add20617_literalMutationString22635 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;*2V:66tvI(5O@z/ not found", expected.getMessage());
        }
    }

    public void testNestedLatches_literalMutationString20577_failAssert0() throws java.io.IOException {
        try {
            com.github.mustachejava.DefaultMustacheFactory c = createMustacheFactory();
            c.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
            com.github.mustachejava.Mustache m = c.compile("latc[hedtest.html");
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer execute = m.execute(sw, new java.lang.Object() {
                java.util.concurrent.Callable<java.lang.Object> nest = () -> {
                    java.lang.Thread.sleep(300);
                    return "How";
                };

                java.util.concurrent.Callable<java.lang.Object> nested = () -> {
                    java.lang.Thread.sleep(200);
                    return "are";
                };

                java.util.concurrent.Callable<java.lang.Object> nestest = () -> {
                    java.lang.Thread.sleep(100);
                    return "you?";
                };
            });
            execute.close();
            sw.toString();
            junit.framework.TestCase.fail("testNestedLatches_literalMutationString20577 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template latc[hedtest.html not found", expected.getMessage());
        }
    }

    public void testNestedLatches_literalMutationString20575_failAssert0() throws java.io.IOException {
        try {
            com.github.mustachejava.DefaultMustacheFactory c = createMustacheFactory();
            c.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
            com.github.mustachejava.Mustache m = c.compile("lI[UHNI)_Oyg(b1i");
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer execute = m.execute(sw, new java.lang.Object() {
                java.util.concurrent.Callable<java.lang.Object> nest = () -> {
                    java.lang.Thread.sleep(300);
                    return "How";
                };

                java.util.concurrent.Callable<java.lang.Object> nested = () -> {
                    java.lang.Thread.sleep(200);
                    return "are";
                };

                java.util.concurrent.Callable<java.lang.Object> nestest = () -> {
                    java.lang.Thread.sleep(100);
                    return "you?";
                };
            });
            execute.close();
            sw.toString();
            junit.framework.TestCase.fail("testNestedLatches_literalMutationString20575 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template lI[UHNI)_Oyg(b1i not found", expected.getMessage());
        }
    }

    public void testNestedLatches_literalMutationNumber20583_remove24787_literalMutationString30193_failAssert0() throws java.io.IOException {
        try {
            com.github.mustachejava.DefaultMustacheFactory c = createMustacheFactory();
            c.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
            com.github.mustachejava.Mustache m = c.compile("la|chedtest.html");
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer execute = m.execute(sw, new java.lang.Object() {
                java.util.concurrent.Callable<java.lang.Object> nest = () -> {
                    java.lang.Thread.sleep(600);
                    return "How";
                };

                java.util.concurrent.Callable<java.lang.Object> nested = () -> {
                    java.lang.Thread.sleep(200);
                    return "are";
                };

                java.util.concurrent.Callable<java.lang.Object> nestest = () -> {
                    java.lang.Thread.sleep(100);
                    return "you?";
                };
            });
            execute.close();
            junit.framework.TestCase.fail("testNestedLatches_literalMutationNumber20583_remove24787_literalMutationString30193 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template la|chedtest.html not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_literalMutationString141747_failAssert0null142562_failAssert0_literalMutationString146022_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.lang.Object object = new java.lang.Object() {
                        java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                    };
                    java.io.StringWriter sw = execute("isempty{.html", object);
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString141747 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString141747_failAssert0null142562 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString141747_failAssert0null142562_failAssert0_literalMutationString146022 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template isempty{.html not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_literalMutationString141746_failAssert0_literalMutationString142117_failAssert0() throws java.io.IOException {
        try {
            {
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList("");
                };
                java.io.StringWriter sw = execute("s;e*{hd+hb [", object);
                com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString141746 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString141746_failAssert0_literalMutationString142117 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template s;e*{hd+hb [ not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_literalMutationString141749_failAssert0_literalMutationString142145_failAssert0() throws java.io.IOException {
        try {
            {
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                };
                java.io.StringWriter sw = execute("`]<jk8D2/j|<", object);
                com.github.mustachejava.TestUtil.getContents(this.root, "page1.txt");
                sw.toString();
                junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString141749 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString141749_failAssert0_literalMutationString142145 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template `]<jk8D2/j|< not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_literalMutationString141739null142481_failAssert0_literalMutationString145988_failAssert0() throws java.io.IOException {
        try {
            {
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList("zB,A");
                };
                java.io.StringWriter sw = execute("}{;9eLT0N[`3", object);
                java.lang.String o_testIsNotEmpty_literalMutationString141739__9 = com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString141739null142481 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString141739null142481_failAssert0_literalMutationString145988 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template }{;9eLT0N[`3 not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_literalMutationString141746_failAssert0_add142396_failAssert0() throws java.io.IOException {
        try {
            {
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                };
                java.io.StringWriter sw = execute("s;e*{hd+hb [", object);
                com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString141746 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString141746_failAssert0_add142396 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template s;e*{hd+hb [ not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_literalMutationString141740_literalMutationString141858_failAssert0() throws java.io.IOException {
        try {
            java.lang.Object object = new java.lang.Object() {
                java.util.List<java.lang.String> people = java.util.Collections.singletonList("Te5st");
            };
            java.io.StringWriter sw = execute("[/]ujby3A An", object);
            java.lang.String o_testIsNotEmpty_literalMutationString141740__9 = com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
            sw.toString();
            junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString141740_literalMutationString141858 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [/]ujby3A An not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_literalMutationString141746_failAssert0_literalMutationString142130_failAssert0() throws java.io.IOException {
        try {
            {
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                };
                java.io.StringWriter sw = execute("s;e*{hd+hb [", object);
                com.github.mustachejava.TestUtil.getContents(this.root, "i?empty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString141746 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString141746_failAssert0_literalMutationString142130 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template s;e*{hd+hb [ not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_literalMutationString141746_failAssert0null142545_failAssert0() throws java.io.IOException {
        try {
            {
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                };
                java.io.StringWriter sw = execute("s;e*{hd+hb [", null);
                com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString141746 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString141746_failAssert0null142545 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template s;e*{hd+hb [ not found", expected.getMessage());
        }
    }

    public void testIsNotEmptynull141760_failAssert0_literalMutationString142310_failAssert0() throws java.io.IOException {
        try {
            {
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                };
                java.io.StringWriter sw = execute("isempty.ht[ml", null);
                com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testIsNotEmptynull141760 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testIsNotEmptynull141760_failAssert0_literalMutationString142310 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template isempty.ht[ml not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_literalMutationString141746_failAssert0() throws java.io.IOException {
        try {
            java.lang.Object object = new java.lang.Object() {
                java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
            };
            java.io.StringWriter sw = execute("s;e*{hd+hb [", object);
            com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
            sw.toString();
            junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString141746 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template s;e*{hd+hb [ not found", expected.getMessage());
        }
    }

    public void testIsNotEmptynull141758_literalMutationString141954_failAssert0() throws java.io.IOException {
        try {
            java.lang.Object object = new java.lang.Object() {
                java.util.List<java.lang.String> people = java.util.Collections.singletonList(null);
            };
            java.io.StringWriter sw = execute("isempty{html", object);
            java.lang.String o_testIsNotEmptynull141758__9 = com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
            sw.toString();
            junit.framework.TestCase.fail("testIsNotEmptynull141758_literalMutationString141954 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template isempty{html not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_literalMutationString141746_failAssert0_add142394_failAssert0() throws java.io.IOException {
        try {
            {
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                };
                java.io.StringWriter sw = execute("s;e*{hd+hb [", object);
                com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
                com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString141746 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString141746_failAssert0_add142394 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template s;e*{hd+hb [ not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_literalMutationString141750_failAssert0_literalMutationString142233_failAssert0_literalMutationString144892_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.lang.Object object = new java.lang.Object() {
                        java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                    };
                    java.io.StringWriter sw = execute("koV%D4F ]l?sQ", object);
                    com.github.mustachejava.TestUtil.getContents(this.root, "i0sempty.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString141750 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString141750_failAssert0_literalMutationString142233 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString141750_failAssert0_literalMutationString142233_failAssert0_literalMutationString144892 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template koV%D4F ]l?sQ not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_literalMutationString141744_failAssert0_literalMutationString142248_failAssert0() throws java.io.IOException {
        try {
            {
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                };
                java.io.StringWriter sw = execute(" does not exist", object);
                com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString141744 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString141744_failAssert0_literalMutationString142248 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_add141753_literalMutationString142049_failAssert0() throws java.io.IOException {
        try {
            java.util.List<java.lang.String> o_testIsNotEmpty_add141753__1 = java.util.Collections.singletonList("Test");
            java.lang.Object object = new java.lang.Object() {
                java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
            };
            java.io.StringWriter sw = execute("s#6Ok?PjgG<?", object);
            java.lang.String o_testIsNotEmpty_add141753__10 = com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
            sw.toString();
            junit.framework.TestCase.fail("testIsNotEmpty_add141753_literalMutationString142049 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template s#6Ok?PjgG<? not found", expected.getMessage());
        }
    }

    public void testImmutableList_add239848_literalMutationString240187_failAssert0_add245229_failAssert0() throws java.io.IOException {
        try {
            {
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                };
                java.io.StringWriter sw = execute("f9CL4${*JoF{", java.util.Collections.singletonList(object));
                sw.toString();
                sw.toString();
                java.lang.String o_testImmutableList_add239848__11 = com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testImmutableList_add239848_literalMutationString240187 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_add239848_literalMutationString240187_failAssert0_add245229 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template f9CL4${*JoF{ not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239838_failAssert0_literalMutationString240217_failAssert0_literalMutationString244583_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.lang.Object object = new java.lang.Object() {
                        java.util.List<java.lang.String> people = java.util.Collections.singletonList("Tst");
                    };
                    java.io.StringWriter sw = execute("z(&[J6/&p)HO", java.util.Collections.singletonList(object));
                    com.github.mustachejava.TestUtil.getContents(this.root, "isempty.4xt");
                    sw.toString();
                    junit.framework.TestCase.fail("testImmutableList_literalMutationString239838 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testImmutableList_literalMutationString239838_failAssert0_literalMutationString240217 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239838_failAssert0_literalMutationString240217_failAssert0_literalMutationString244583 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template z(&[J6/&p)HO not found", expected.getMessage());
        }
    }

    public void testImmutableList_add239848_literalMutationString240187_failAssert0() throws java.io.IOException {
        try {
            java.lang.Object object = new java.lang.Object() {
                java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
            };
            java.io.StringWriter sw = execute("f9CL4${*JoF{", java.util.Collections.singletonList(object));
            sw.toString();
            java.lang.String o_testImmutableList_add239848__11 = com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
            sw.toString();
            junit.framework.TestCase.fail("testImmutableList_add239848_literalMutationString240187 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template f9CL4${*JoF{ not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239832_failAssert0_add240565_failAssert0() throws java.io.IOException {
        try {
            {
                java.util.Collections.singletonList("Test");
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                };
                java.io.StringWriter sw = execute(";%-6X(=RDt}X", java.util.Collections.singletonList(object));
                com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testImmutableList_literalMutationString239832 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239832_failAssert0_add240565 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;%-6X(=RDt}X not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239832_failAssert0null240726_failAssert0() throws java.io.IOException {
        try {
            {
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                };
                java.io.StringWriter sw = execute(";%-6X(=RDt}X", java.util.Collections.singletonList(null));
                com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testImmutableList_literalMutationString239832 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239832_failAssert0null240726 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;%-6X(=RDt}X not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239836_failAssert0_add240537_failAssert0() throws java.io.IOException {
        try {
            {
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                };
                java.util.Collections.singletonList(object);
                java.io.StringWriter sw = execute("isem`pty.html", java.util.Collections.singletonList(object));
                com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testImmutableList_literalMutationString239836 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239836_failAssert0_add240537 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template isem`pty.html not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239832_failAssert0() throws java.io.IOException {
        try {
            java.lang.Object object = new java.lang.Object() {
                java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
            };
            java.io.StringWriter sw = execute(";%-6X(=RDt}X", java.util.Collections.singletonList(object));
            com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
            sw.toString();
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239832 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;%-6X(=RDt}X not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239836_failAssert0() throws java.io.IOException {
        try {
            java.lang.Object object = new java.lang.Object() {
                java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
            };
            java.io.StringWriter sw = execute("isem`pty.html", java.util.Collections.singletonList(object));
            com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
            sw.toString();
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239836 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template isem`pty.html not found", expected.getMessage());
        }
    }

    public void testImmutableListnull239853_failAssert0_literalMutationString240430_failAssert0() throws java.io.IOException {
        try {
            {
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                };
                java.io.StringWriter sw = execute("&w0gR8Q20}*5", java.util.Collections.singletonList(object));
                com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testImmutableListnull239853 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testImmutableListnull239853_failAssert0_literalMutationString240430 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template &w0gR8Q20}*5 not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239836_failAssert0null240704_failAssert0() throws java.io.IOException {
        try {
            {
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList(null);
                };
                java.io.StringWriter sw = execute("isem`pty.html", java.util.Collections.singletonList(object));
                com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testImmutableList_literalMutationString239836 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239836_failAssert0null240704 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template isem`pty.html not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239843_failAssert0null240731_failAssert0_literalMutationString243428_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.lang.Object object = new java.lang.Object() {
                        java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                    };
                    java.io.StringWriter sw = execute("as@IX{@W0zA`", java.util.Collections.singletonList(object));
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testImmutableList_literalMutationString239843 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testImmutableList_literalMutationString239843_failAssert0null240731 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239843_failAssert0null240731_failAssert0_literalMutationString243428 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template as@IX{@W0zA` not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239832_failAssert0_add240570_failAssert0() throws java.io.IOException {
        try {
            {
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                };
                java.io.StringWriter sw = execute(";%-6X(=RDt}X", java.util.Collections.singletonList(object));
                com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testImmutableList_literalMutationString239832 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239832_failAssert0_add240570 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;%-6X(=RDt}X not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239828_literalMutationString239954_failAssert0() throws java.io.IOException {
        try {
            java.lang.Object object = new java.lang.Object() {
                java.util.List<java.lang.String> people = java.util.Collections.singletonList("Tst");
            };
            java.io.StringWriter sw = execute("isempty.h`tml", java.util.Collections.singletonList(object));
            java.lang.String o_testImmutableList_literalMutationString239828__10 = com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
            sw.toString();
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239828_literalMutationString239954 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template isempty.h`tml not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239832_failAssert0null240727_failAssert0() throws java.io.IOException {
        try {
            {
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                };
                java.io.StringWriter sw = execute(";%-6X(=RDt}X", java.util.Collections.singletonList(object));
                com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testImmutableList_literalMutationString239832 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239832_failAssert0null240727 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;%-6X(=RDt}X not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239838_failAssert0null240696_failAssert0_literalMutationString243187_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.lang.Object object = new java.lang.Object() {
                        java.util.List<java.lang.String> people = java.util.Collections.singletonList(null);
                    };
                    java.io.StringWriter sw = execute("$i.Mh!|+5N([", java.util.Collections.singletonList(object));
                    com.github.mustachejava.TestUtil.getContents(this.root, "isempty.4xt");
                    sw.toString();
                    junit.framework.TestCase.fail("testImmutableList_literalMutationString239838 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testImmutableList_literalMutationString239838_failAssert0null240696 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239838_failAssert0null240696_failAssert0_literalMutationString243187 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template $i.Mh!|+5N([ not found", expected.getMessage());
        }
    }

    public void testImmutableList_add239844_literalMutationString240164_failAssert0() throws java.io.IOException {
        try {
            java.util.List<java.lang.String> o_testImmutableList_add239844__1 = java.util.Collections.singletonList("Test");
            java.lang.Object object = new java.lang.Object() {
                java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
            };
            java.io.StringWriter sw = execute("Pvl#a&2]r$ O", java.util.Collections.singletonList(object));
            java.lang.String o_testImmutableList_add239844__11 = com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
            sw.toString();
            junit.framework.TestCase.fail("testImmutableList_add239844_literalMutationString240164 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template Pvl#a&2]r$ O not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239832_failAssert0_add240565_failAssert0null246638_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.util.Collections.singletonList(null);
                    java.lang.Object object = new java.lang.Object() {
                        java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                    };
                    java.io.StringWriter sw = execute(";%-6X(=RDt}X", java.util.Collections.singletonList(object));
                    com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testImmutableList_literalMutationString239832 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testImmutableList_literalMutationString239832_failAssert0_add240565 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239832_failAssert0_add240565_failAssert0null246638 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;%-6X(=RDt}X not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239832_failAssert0_literalMutationString240338_failAssert0() throws java.io.IOException {
        try {
            {
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList("Tet");
                };
                java.io.StringWriter sw = execute(";%-6X(=RDt}X", java.util.Collections.singletonList(object));
                com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testImmutableList_literalMutationString239832 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239832_failAssert0_literalMutationString240338 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;%-6X(=RDt}X not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239832_failAssert0_literalMutationString240338_failAssert0_literalMutationString243089_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.lang.Object object = new java.lang.Object() {
                        java.util.List<java.lang.String> people = java.util.Collections.singletonList("Tet");
                    };
                    java.io.StringWriter sw = execute(";%-6X(=RDt}X", java.util.Collections.singletonList(object));
                    com.github.mustachejava.TestUtil.getContents(this.root, "page1.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testImmutableList_literalMutationString239832 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testImmutableList_literalMutationString239832_failAssert0_literalMutationString240338 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239832_failAssert0_literalMutationString240338_failAssert0_literalMutationString243089 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;%-6X(=RDt}X not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239836_failAssert0_literalMutationString240266_failAssert0() throws java.io.IOException {
        try {
            {
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                };
                java.io.StringWriter sw = execute("isem`pty.html", java.util.Collections.singletonList(object));
                com.github.mustachejava.TestUtil.getContents(this.root, "isempty.tt");
                sw.toString();
                junit.framework.TestCase.fail("testImmutableList_literalMutationString239836 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239836_failAssert0_literalMutationString240266 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template isem`pty.html not found", expected.getMessage());
        }
    }

    public void testImmutableList_add239846null240666_literalMutationString242108_failAssert0() throws java.io.IOException {
        try {
            java.lang.Object object = new java.lang.Object() {
                java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
            };
            java.util.List<java.lang.Object> o_testImmutableList_add239846__7 = java.util.Collections.singletonList(null);
            java.io.StringWriter sw = execute("9kdh^@FQP4{.", java.util.Collections.singletonList(object));
            java.lang.String o_testImmutableList_add239846__11 = com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
            sw.toString();
            junit.framework.TestCase.fail("testImmutableList_add239846null240666_literalMutationString242108 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 9kdh^@FQP4{. not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239832_failAssert0_literalMutationString240348_failAssert0() throws java.io.IOException {
        try {
            {
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                };
                java.io.StringWriter sw = execute(";%-6X(=RDt}X", java.util.Collections.singletonList(object));
                com.github.mustachejava.TestUtil.getContents(this.root, "");
                sw.toString();
                junit.framework.TestCase.fail("testImmutableList_literalMutationString239832 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239832_failAssert0_literalMutationString240348 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;%-6X(=RDt}X not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239836_failAssert0_add240539_failAssert0() throws java.io.IOException {
        try {
            {
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                };
                java.io.StringWriter sw = execute("isem`pty.html", java.util.Collections.singletonList(object));
                com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testImmutableList_literalMutationString239836 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239836_failAssert0_add240539 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template isem`pty.html not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239831_literalMutationString240005_failAssert0() throws java.io.IOException {
        try {
            java.lang.Object object = new java.lang.Object() {
                java.util.List<java.lang.String> people = java.util.Collections.singletonList(")est");
            };
            java.io.StringWriter sw = execute("is}mpty.html", java.util.Collections.singletonList(object));
            java.lang.String o_testImmutableList_literalMutationString239831__10 = com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
            sw.toString();
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239831_literalMutationString240005 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template is}mpty.html not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239830_literalMutationString239932_failAssert0() throws java.io.IOException {
        try {
            java.lang.Object object = new java.lang.Object() {
                java.util.List<java.lang.String> people = java.util.Collections.singletonList("T_est");
            };
            java.io.StringWriter sw = execute("%APo(]+AU_4q", java.util.Collections.singletonList(object));
            java.lang.String o_testImmutableList_literalMutationString239830__10 = com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
            sw.toString();
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239830_literalMutationString239932 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template %APo(]+AU_4q not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239832_failAssert0_add240565_failAssert0_add245549_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.util.Collections.singletonList("Test");
                    java.lang.Object object = new java.lang.Object() {
                        java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                    };
                    java.io.StringWriter sw = execute(";%-6X(=RDt}X", java.util.Collections.singletonList(object));
                    com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testImmutableList_literalMutationString239832 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testImmutableList_literalMutationString239832_failAssert0_add240565 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239832_failAssert0_add240565_failAssert0_add245549 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;%-6X(=RDt}X not found", expected.getMessage());
        }
    }

    public void testImmutableList_add239848_literalMutationString240187_failAssert0null246455_failAssert0() throws java.io.IOException {
        try {
            {
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                };
                java.io.StringWriter sw = execute("f9CL4${*JoF{", java.util.Collections.singletonList(object));
                sw.toString();
                java.lang.String o_testImmutableList_add239848__11 = com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testImmutableList_add239848_literalMutationString240187 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_add239848_literalMutationString240187_failAssert0null246455 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template f9CL4${*JoF{ not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239836_failAssert0null240706_failAssert0() throws java.io.IOException {
        try {
            {
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                };
                java.io.StringWriter sw = execute("isem`pty.html", java.util.Collections.singletonList(null));
                com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testImmutableList_literalMutationString239836 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239836_failAssert0null240706 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template isem`pty.html not found", expected.getMessage());
        }
    }

    public void testImmutableList_add239848_literalMutationString240187_failAssert0_literalMutationString242882_failAssert0() throws java.io.IOException {
        try {
            {
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                };
                java.io.StringWriter sw = execute("f9CL4${*JoF{", java.util.Collections.singletonList(object));
                sw.toString();
                java.lang.String o_testImmutableList_add239848__11 = com.github.mustachejava.TestUtil.getContents(this.root, "isemcty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testImmutableList_add239848_literalMutationString240187 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_add239848_literalMutationString240187_failAssert0_literalMutationString242882 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template f9CL4${*JoF{ not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239832_failAssert0_literalMutationString240338_failAssert0_add245299_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.lang.Object object = new java.lang.Object() {
                        java.util.List<java.lang.String> people = java.util.Collections.singletonList("Tet");
                    };
                    java.util.Collections.singletonList(object);
                    java.io.StringWriter sw = execute(";%-6X(=RDt}X", java.util.Collections.singletonList(object));
                    com.github.mustachejava.TestUtil.getContents(this.root, "isempty.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testImmutableList_literalMutationString239832 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testImmutableList_literalMutationString239832_failAssert0_literalMutationString240338 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239832_failAssert0_literalMutationString240338_failAssert0_add245299 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;%-6X(=RDt}X not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239843_failAssert0_literalMutationString240363_failAssert0() throws java.io.IOException {
        try {
            {
                java.lang.Object object = new java.lang.Object() {
                    java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                };
                java.io.StringWriter sw = execute("j3dcKY,7u2>g", java.util.Collections.singletonList(object));
                com.github.mustachejava.TestUtil.getContents(this.root, "iempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testImmutableList_literalMutationString239843 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239843_failAssert0_literalMutationString240363 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template j3dcKY,7u2>g not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString239832_failAssert0_add240565_failAssert0_literalMutationString243676_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    java.util.Collections.singletonList("Test");
                    java.lang.Object object = new java.lang.Object() {
                        java.util.List<java.lang.String> people = java.util.Collections.singletonList("Test");
                    };
                    java.io.StringWriter sw = execute(";%-6X(=RDt}X", java.util.Collections.singletonList(object));
                    com.github.mustachejava.TestUtil.getContents(this.root, "");
                    sw.toString();
                    junit.framework.TestCase.fail("testImmutableList_literalMutationString239832 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testImmutableList_literalMutationString239832_failAssert0_add240565 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString239832_failAssert0_add240565_failAssert0_literalMutationString243676 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ;%-6X(=RDt}X not found", expected.getMessage());
        }
    }

    public void testSecurity_literalMutationString379610() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        com.github.mustachejava.MustacheFactory c = createMustacheFactory();
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        com.github.mustachejava.Mustache m = c.compile("");
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        java.io.StringWriter sw = new java.io.StringWriter();
        java.io.Writer o_testSecurity_literalMutationString379610__7 = m.execute(sw, new java.lang.Object() {
            java.lang.String name = "Chris";

            int value = 10000;

            int taxed_value() {
                return ((int) ((this.value) - ((this.value) * 0.4)));
            }

            boolean in_ca = true;

            private java.lang.String test = "Test";
        });
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testSecurity_literalMutationString379610__7)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testSecurity_literalMutationString379610__7)).toString());
        java.lang.String o_testSecurity_literalMutationString379610__15 = com.github.mustachejava.TestUtil.getContents(this.root, "security.txt");
        junit.framework.TestCase.assertEquals("", o_testSecurity_literalMutationString379610__15);
        sw.toString();
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testSecurity_literalMutationString379610__7)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testSecurity_literalMutationString379610__7)).toString());
        junit.framework.TestCase.assertEquals("", o_testSecurity_literalMutationString379610__15);
    }

    public void testSecurity_literalMutationString379614_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache m = c.compile("se<urity.html");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, new java.lang.Object() {
                java.lang.String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;

                private java.lang.String test = "Test";
            });
            com.github.mustachejava.TestUtil.getContents(this.root, "security.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSecurity_literalMutationString379614 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template se<urity.html not found", expected.getMessage());
        }
    }

    public void testSecurity_literalMutationString379614_failAssert0null382420_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("se<urity.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;

                    private java.lang.String test = "Test";
                });
                com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testSecurity_literalMutationString379614 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSecurity_literalMutationString379614_failAssert0null382420 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template se<urity.html not found", expected.getMessage());
        }
    }

    public void testSecurity_literalMutationString379614_failAssert0_add382179_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                c.compile("se<urity.html");
                com.github.mustachejava.Mustache m = c.compile("se<urity.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;

                    private java.lang.String test = "Test";
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "security.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSecurity_literalMutationString379614 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSecurity_literalMutationString379614_failAssert0_add382179 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template se<urity.html not found", expected.getMessage());
        }
    }

    public void testSecurity_literalMutationString379614_failAssert0_literalMutationNumber381168_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("se<urity.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 9999;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;

                    private java.lang.String test = "Test";
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "security.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSecurity_literalMutationString379614 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSecurity_literalMutationString379614_failAssert0_literalMutationNumber381168 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template se<urity.html not found", expected.getMessage());
        }
    }

    public void testSecurity_literalMutationString379613_failAssert0_literalMutationNumber381286_failAssert0_literalMutationString387297_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("seurity[html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.2)));
                        }

                        boolean in_ca = true;

                        private java.lang.String test = "Test";
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "security.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSecurity_literalMutationString379613 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSecurity_literalMutationString379613_failAssert0_literalMutationNumber381286 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSecurity_literalMutationString379613_failAssert0_literalMutationNumber381286_failAssert0_literalMutationString387297 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template seurity[html not found", expected.getMessage());
        }
    }

    public void testSecurity_add379648_add382047_literalMutationString384723_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache o_testSecurity_add379648__3 = c.compile("(!uYT5zgQO&[s");
            com.github.mustachejava.Mustache m = c.compile("security.html");
            m.getName();
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer o_testSecurity_add379648__8 = m.execute(sw, new java.lang.Object() {
                java.lang.String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;

                private java.lang.String test = "Test";
            });
            java.lang.String o_testSecurity_add379648__16 = com.github.mustachejava.TestUtil.getContents(this.root, "security.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSecurity_add379648_add382047_literalMutationString384723 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template (!uYT5zgQO&[s not found", expected.getMessage());
        }
    }

    public void testSecurity_literalMutationString379615_failAssert0_literalMutationString381042_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("JT;V7>1a*z2HI");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;

                    private java.lang.String test = "Test";
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "security.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSecurity_literalMutationString379615 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSecurity_literalMutationString379615_failAssert0_literalMutationString381042 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template JT;V7>1a*z2HI not found", expected.getMessage());
        }
    }

    public void testSecurity_literalMutationString379646_failAssert0_literalMutationString381194_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("lHt y&>:J#RqB");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;

                    private java.lang.String test = "Test";
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "security#.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSecurity_literalMutationString379646 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testSecurity_literalMutationString379646_failAssert0_literalMutationString381194 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template lHt y&>:J#RqB not found", expected.getMessage());
        }
    }

    public void testProperties_literalMutationString416951_failAssert0_literalMutationString417990_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile(",>[Zdv]^uvI");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String getName() {
                        return "Chris";
                    }

                    int getValue() {
                        return 10000;
                    }

                    int taxed_value() {
                        return ((int) ((this.getValue()) - ((this.getValue()) * 0.4)));
                    }

                    boolean isIn_ca() {
                        return true;
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "");
                sw.toString();
                junit.framework.TestCase.fail("testProperties_literalMutationString416951 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testProperties_literalMutationString416951_failAssert0_literalMutationString417990 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ,>[Zdv]^uvI not found", expected.getMessage());
        }
    }

    public void testProperties_add416958_literalMutationString417732_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache o_testProperties_add416958__3 = c.compile("simple.html");
            com.github.mustachejava.Mustache m = c.compile("simpl{.html");
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer o_testProperties_add416958__8 = m.execute(sw, new java.lang.Object() {
                java.lang.String getName() {
                    return "Chris";
                }

                int getValue() {
                    return 10000;
                }

                int taxed_value() {
                    return ((int) ((this.getValue()) - ((this.getValue()) * 0.4)));
                }

                boolean isIn_ca() {
                    return true;
                }
            });
            java.lang.String o_testProperties_add416958__23 = com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testProperties_add416958_literalMutationString417732 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template simpl{.html not found", expected.getMessage());
        }
    }

    public void testProperties_literalMutationNumber416940null419237_failAssert0_literalMutationString423789_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("urD>(KX7{Ak");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.Writer o_testProperties_literalMutationNumber416940__7 = m.execute(sw, new java.lang.Object() {
                    java.lang.String getName() {
                        return "Chris";
                    }

                    int getValue() {
                        return 10001;
                    }

                    int taxed_value() {
                        return ((int) ((this.getValue()) - ((this.getValue()) * 0.4)));
                    }

                    boolean isIn_ca() {
                        return true;
                    }
                });
                java.lang.String o_testProperties_literalMutationNumber416940__23 = com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testProperties_literalMutationNumber416940null419237 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testProperties_literalMutationNumber416940null419237_failAssert0_literalMutationString423789 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template urD>(KX7{Ak not found", expected.getMessage());
        }
    }

    public void testProperties_literalMutationString416927() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        com.github.mustachejava.MustacheFactory c = createMustacheFactory();
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        com.github.mustachejava.Mustache m = c.compile("");
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        java.io.StringWriter sw = new java.io.StringWriter();
        java.io.Writer o_testProperties_literalMutationString416927__7 = m.execute(sw, new java.lang.Object() {
            java.lang.String getName() {
                return "Chris";
            }

            int getValue() {
                return 10000;
            }

            int taxed_value() {
                return ((int) ((this.getValue()) - ((this.getValue()) * 0.4)));
            }

            boolean isIn_ca() {
                return true;
            }
        });
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testProperties_literalMutationString416927__7)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testProperties_literalMutationString416927__7)).toString());
        java.lang.String o_testProperties_literalMutationString416927__22 = com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
        junit.framework.TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", o_testProperties_literalMutationString416927__22);
        sw.toString();
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testProperties_literalMutationString416927__7)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testProperties_literalMutationString416927__7)).toString());
        junit.framework.TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", o_testProperties_literalMutationString416927__22);
    }

    public void testProperties_literalMutationNumber416947_literalMutationString417240_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache m = c.compile("](gU|eLXzcC");
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer o_testProperties_literalMutationNumber416947__7 = m.execute(sw, new java.lang.Object() {
                java.lang.String getName() {
                    return "Chris";
                }

                int getValue() {
                    return 10000;
                }

                int taxed_value() {
                    return ((int) ((this.getValue()) - ((this.getValue()) * 0.0)));
                }

                boolean isIn_ca() {
                    return true;
                }
            });
            java.lang.String o_testProperties_literalMutationNumber416947__23 = com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testProperties_literalMutationNumber416947_literalMutationString417240 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ](gU|eLXzcC not found", expected.getMessage());
        }
    }

    public void testProperties_remove416964_literalMutationString417978_failAssert0_literalMutationString424799_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("simple.9h<tml");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.lang.String o_testProperties_remove416964__7 = com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testProperties_remove416964_literalMutationString417978 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testProperties_remove416964_literalMutationString417978_failAssert0_literalMutationString424799 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template simple.9h<tml not found", expected.getMessage());
        }
    }

    public void testPropertiesnull416968_failAssert0_literalMutationString418383_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("s3#^6aC-b-C");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    java.lang.String getName() {
                        return "Chris";
                    }

                    int getValue() {
                        return 10000;
                    }

                    int taxed_value() {
                        return ((int) ((this.getValue()) - ((this.getValue()) * 0.4)));
                    }

                    boolean isIn_ca() {
                        return true;
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testPropertiesnull416968 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testPropertiesnull416968_failAssert0_literalMutationString418383 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template s3#^6aC-b-C not found", expected.getMessage());
        }
    }

    public void testProperties_literalMutationString416956_failAssert0_add419078_failAssert0_literalMutationString425254_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("}GoT79,aWxH");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        java.lang.String getName() {
                            return "Chris";
                        }

                        int getValue() {
                            return 10000;
                        }

                        int taxed_value() {
                            this.getValue();
                            return ((int) ((this.getValue()) - ((this.getValue()) * 0.4)));
                        }

                        boolean isIn_ca() {
                            return true;
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "sSimple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testProperties_literalMutationString416956 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testProperties_literalMutationString416956_failAssert0_add419078 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testProperties_literalMutationString416956_failAssert0_add419078_failAssert0_literalMutationString425254 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template }GoT79,aWxH not found", expected.getMessage());
        }
    }

    public void testProperties_literalMutationString416927_remove419148_add426401() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        com.github.mustachejava.MustacheFactory c = createMustacheFactory();
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        com.github.mustachejava.Mustache m = c.compile("");
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        java.io.StringWriter sw = new java.io.StringWriter();
        java.io.Writer o_testProperties_literalMutationString416927_remove419148_add426401__7 = m.execute(sw, new java.lang.Object() {
            java.lang.String getName() {
                return "Chris";
            }

            int getValue() {
                return 10000;
            }

            int taxed_value() {
                return ((int) ((this.getValue()) - ((this.getValue()) * 0.4)));
            }

            boolean isIn_ca() {
                return true;
            }
        });
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testProperties_literalMutationString416927_remove419148_add426401__7)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testProperties_literalMutationString416927_remove419148_add426401__7)).toString());
        java.io.Writer o_testProperties_literalMutationString416927__7 = m.execute(sw, new java.lang.Object() {
            java.lang.String getName() {
                return "Chris";
            }

            int getValue() {
                return 10000;
            }

            int taxed_value() {
                return ((int) ((this.getValue()) - ((this.getValue()) * 0.4)));
            }

            boolean isIn_ca() {
                return true;
            }
        });
        java.lang.String o_testProperties_literalMutationString416927__22 = com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
        junit.framework.TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", o_testProperties_literalMutationString416927__22);
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\nbox.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testProperties_literalMutationString416927_remove419148_add426401__7)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\nbox.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testProperties_literalMutationString416927_remove419148_add426401__7)).toString());
    }

    public void testSimpleWithMap_literalMutationString94840_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            java.io.StringWriter sw = execute("43QMe<Q(sSi", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                {
                    put("name", "Chris");
                    put("value", 10000);
                    put("taxed_value", 6000);
                    put("in_ca", true);
                }
            });
            com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 43QMe<Q(sSi not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94840_failAssert0null100683_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                java.io.StringWriter sw = execute("43QMe<Q(sSi", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", null);
                        put("in_ca", true);
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0null100683 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 43QMe<Q(sSi not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94840_failAssert0_literalMutationString99063_failAssert0null115825_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("43QMe<Q(sSi", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("page1.txt", true);
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0_literalMutationString99063 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0_literalMutationString99063_failAssert0null115825 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 43QMe<Q(sSi not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94840_failAssert0_add99803_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                java.io.StringWriter sw = execute("43QMe<Q(sSi", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0_add99803 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 43QMe<Q(sSi not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94853_literalMutationString97206_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            java.io.StringWriter sw = execute("e&:c</dr7 +", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                {
                    java.lang.Object o_testSimpleWithMap_literalMutationString94853__8 = put("name", "Chrs");
                    java.lang.Object o_testSimpleWithMap_literalMutationString94853__9 = put("value", 10000);
                    java.lang.Object o_testSimpleWithMap_literalMutationString94853__10 = put("taxed_value", 6000);
                    java.lang.Object o_testSimpleWithMap_literalMutationString94853__11 = put("in_ca", true);
                }
            });
            java.lang.String o_testSimpleWithMap_literalMutationString94853__12 = com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94853_literalMutationString97206 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template e&:c</dr7 + not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94840_failAssert0null100678_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                java.io.StringWriter sw = execute("43QMe<Q(sSi", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put(null, "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0null100678 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 43QMe<Q(sSi not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94840_failAssert0_literalMutationString99063_failAssert0_add113605_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("43QMe<Q(sSi", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("taxed_value", 6000);
                            put("page1.txt", true);
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0_literalMutationString99063 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0_literalMutationString99063_failAssert0_add113605 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 43QMe<Q(sSi not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94888_failAssert0_literalMutationString98859_failAssert0_literalMutationString109619_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("Fcoa|jLt|nm", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("i_ca", true);
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "page1.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94888 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94888_failAssert0_literalMutationString98859 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94888_failAssert0_literalMutationString98859_failAssert0_literalMutationString109619 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template Fcoa|jLt|nm not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94853_literalMutationString97206_failAssert0_literalMutationString110597_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                java.io.StringWriter sw = execute("e&:c</dr7 +", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        java.lang.Object o_testSimpleWithMap_literalMutationString94853__8 = put("name", "Chrs");
                        java.lang.Object o_testSimpleWithMap_literalMutationString94853__9 = put("value", 10000);
                        java.lang.Object o_testSimpleWithMap_literalMutationString94853__10 = put("taxed_value", 6000);
                        java.lang.Object o_testSimpleWithMap_literalMutationString94853__11 = put("in_ca", true);
                    }
                });
                java.lang.String o_testSimpleWithMap_literalMutationString94853__12 = com.github.mustachejava.TestUtil.getContents(this.root, "simpli.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94853_literalMutationString97206 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94853_literalMutationString97206_failAssert0_literalMutationString110597 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template e&:c</dr7 + not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_add94891_literalMutationNumber98043_literalMutationString101670_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            java.io.StringWriter o_testSimpleWithMap_add94891__1 = execute("simple.html", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                {
                    java.lang.Object o_testSimpleWithMap_add94891_literalMutationNumber98043__8 = put("name", "Chris");
                    java.lang.Object o_testSimpleWithMap_add94891_literalMutationNumber98043__9 = put("value", 10000);
                    java.lang.Object o_testSimpleWithMap_add94891_literalMutationNumber98043__10 = put("taxed_value", 6000);
                    java.lang.Object o_testSimpleWithMap_add94891_literalMutationNumber98043__11 = put("in_ca", true);
                }
            });
            java.io.StringWriter sw = execute("|D*!e?>6c!*", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                {
                    java.lang.Object o_testSimpleWithMap_add94891__18 = put("name", "Chris");
                    java.lang.Object o_testSimpleWithMap_add94891__19 = put("value", 20000);
                    java.lang.Object o_testSimpleWithMap_add94891__20 = put("taxed_value", 6000);
                    java.lang.Object o_testSimpleWithMap_add94891__21 = put("in_ca", true);
                }
            });
            java.lang.String o_testSimpleWithMap_add94891__22 = com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSimpleWithMap_add94891_literalMutationNumber98043_literalMutationString101670 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template |D*!e?>6c!* not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94840_failAssert0_add99803_failAssert0_add113938_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("43QMe<Q(sSi", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0_add99803 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0_add99803_failAssert0_add113938 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 43QMe<Q(sSi not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94870_literalMutationString97153_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            java.io.StringWriter sw = execute("*G|k>1V+OE`", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                {
                    java.lang.Object o_testSimpleWithMap_literalMutationString94870__8 = put("name", "Chris");
                    java.lang.Object o_testSimpleWithMap_literalMutationString94870__9 = put("value", 10000);
                    java.lang.Object o_testSimpleWithMap_literalMutationString94870__10 = put("taMed_value", 6000);
                    java.lang.Object o_testSimpleWithMap_literalMutationString94870__11 = put("in_ca", true);
                }
            });
            java.lang.String o_testSimpleWithMap_literalMutationString94870__12 = com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94870_literalMutationString97153 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template *G|k>1V+OE` not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94840_failAssert0null100683_failAssert0_add114049_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("43QMe<Q(sSi", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", null);
                            put("in_ca", true);
                            put("in_ca", true);
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0null100683 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0null100683_failAssert0_add114049 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 43QMe<Q(sSi not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94840_failAssert0null100683_failAssert0_add114047_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("43QMe<Q(sSi", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("value", 10000);
                            put("taxed_value", null);
                            put("in_ca", true);
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0null100683 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0null100683_failAssert0_add114047 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 43QMe<Q(sSi not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94840_failAssert0_literalMutationString99063_failAssert0_literalMutationString109388_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("43QMe<Q(sSi", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_Balue", 6000);
                            put("page1.txt", true);
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0_literalMutationString99063 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0_literalMutationString99063_failAssert0_literalMutationString109388 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 43QMe<Q(sSi not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94840_failAssert0_literalMutationString99063_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                java.io.StringWriter sw = execute("43QMe<Q(sSi", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("page1.txt", true);
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0_literalMutationString99063 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 43QMe<Q(sSi not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94888_failAssert0_literalMutationString98859_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                java.io.StringWriter sw = execute("Fcoa|jLt|nm", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "page1.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94888 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94888_failAssert0_literalMutationString98859 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template Fcoa|jLt|nm not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94840_failAssert0null100683_failAssert0null116356_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("43QMe<Q(sSi", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put(null, "Chris");
                            put("value", 10000);
                            put("taxed_value", null);
                            put("in_ca", true);
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0null100683 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0null100683_failAssert0null116356 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 43QMe<Q(sSi not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94888_failAssert0_literalMutationString98859_failAssert0_add113641_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("Fcoa|jLt|nm", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "page1.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94888 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94888_failAssert0_literalMutationString98859 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94888_failAssert0_literalMutationString98859_failAssert0_add113641 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template Fcoa|jLt|nm not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94853_literalMutationString97206_failAssert0null116043_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                java.io.StringWriter sw = execute("e&:c</dr7 +", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        java.lang.Object o_testSimpleWithMap_literalMutationString94853__8 = put("name", "Chrs");
                        java.lang.Object o_testSimpleWithMap_literalMutationString94853__9 = put("value", 10000);
                        java.lang.Object o_testSimpleWithMap_literalMutationString94853__10 = put("taxed_value", 6000);
                        java.lang.Object o_testSimpleWithMap_literalMutationString94853__11 = put("in_ca", null);
                    }
                });
                java.lang.String o_testSimpleWithMap_literalMutationString94853__12 = com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94853_literalMutationString97206 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94853_literalMutationString97206_failAssert0null116043 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template e&:c</dr7 + not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94840_failAssert0_add99803_failAssert0null116225_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("43QMe<Q(sSi", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", null);
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0_add99803 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0_add99803_failAssert0null116225 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 43QMe<Q(sSi not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94888_failAssert0_literalMutationString98859_failAssert0null115862_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("Fcoa|jLt|nm", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", null);
                            put("in_ca", true);
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "page1.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94888 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94888_failAssert0_literalMutationString98859 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94888_failAssert0_literalMutationString98859_failAssert0null115862 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template Fcoa|jLt|nm not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94840_failAssert0_literalMutationString99051_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                java.io.StringWriter sw = execute("43QMe<Q(sSi", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxeA_value", 6000);
                        put("in_ca", true);
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0_literalMutationString99051 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 43QMe<Q(sSi not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94840_failAssert0_add99797_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                java.io.StringWriter sw = execute("43QMe<Q(sSi", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0_add99797 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 43QMe<Q(sSi not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94840_failAssert0_add99803_failAssert0_literalMutationString111561_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("43QMe<Q(sSi", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("page1.txt", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0_add99803 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0_add99803_failAssert0_literalMutationString111561 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 43QMe<Q(sSi not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94840_failAssert0null100683_failAssert0_literalMutationString112328_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("43QMe<Q(sSi", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_va>lue", null);
                            put("in_ca", true);
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0null100683 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0null100683_failAssert0_literalMutationString112328 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 43QMe<Q(sSi not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94840_failAssert0null100683_failAssert0null116360_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("43QMe<Q(sSi", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put(null, null);
                            put("in_ca", true);
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0null100683 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0null100683_failAssert0null116360 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 43QMe<Q(sSi not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94853_literalMutationString97206_failAssert0_add113783_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                java.io.StringWriter sw = execute("e&:c</dr7 +", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        java.lang.Object o_testSimpleWithMap_literalMutationString94853__8 = put("name", "Chrs");
                        java.lang.Object o_testSimpleWithMap_literalMutationString94853__9 = put("value", 10000);
                        java.lang.Object o_testSimpleWithMap_literalMutationString94853__10 = put("taxed_value", 6000);
                        put("in_ca", true);
                        java.lang.Object o_testSimpleWithMap_literalMutationString94853__11 = put("in_ca", true);
                    }
                });
                java.lang.String o_testSimpleWithMap_literalMutationString94853__12 = com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94853_literalMutationString97206 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94853_literalMutationString97206_failAssert0_add113783 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template e&:c</dr7 + not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString94840_failAssert0null100683_failAssert0_literalMutationString112339_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException, java.lang.InterruptedException, java.util.concurrent.ExecutionException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("43QMe<Q(sSi", new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", null);
                            put("in_ca", true);
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0null100683 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString94840_failAssert0null100683_failAssert0_literalMutationString112339 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 43QMe<Q(sSi not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331097_failAssert0_add331361_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("eG5arfBLOTNzXMtb]`*ML*+mB#b6mL");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                m.execute(sw, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_add331361 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template eG5arfBLOTNzXMtb]`*ML*+mB#b6mL not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331097_failAssert0_add331362_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("eG5arfBLOTNzXMtb]`*ML*+mB#b6mL");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_add331362 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template eG5arfBLOTNzXMtb]`*ML*+mB#b6mL not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331097_failAssert0_add331360_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                c.compile("eG5arfBLOTNzXMtb]`*ML*+mB#b6mL");
                com.github.mustachejava.Mustache m = c.compile("eG5arfBLOTNzXMtb]`*ML*+mB#b6mL");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_add331360 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template eG5arfBLOTNzXMtb]`*ML*+mB#b6mL not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove331103_literalMutationString331182_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache m = c.compile("pj2;H@!:?Jf^5X/TOX%I];H[c}lE[N");
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer o_testPartialWithTF_remove331103__7 = m.execute(sw, new java.lang.Object() {
                public com.github.mustachejava.TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_remove331103_literalMutationString331182 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template pj2;H@!:?Jf^5X/TOX%I];H[c}lE[N not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331093_failAssert0null331426_failAssert0_literalMutationString332458_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("40{TU%`j#");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(null, new java.lang.Object() {
                        public com.github.mustachejava.TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331093 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331093_failAssert0null331426 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331093_failAssert0null331426_failAssert0_literalMutationString332458 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 40{TU%`j# not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove331103_add331358_literalMutationString332094_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache m = c.compile(",[!Z^*EBIM4^57!1EJ2[fIlj#Uo26Q");
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer o_testPartialWithTF_remove331103__7 = m.execute(sw, new java.lang.Object() {
                public com.github.mustachejava.TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            o_testPartialWithTF_remove331103__7.toString();
            junit.framework.TestCase.fail("testPartialWithTF_remove331103_add331358_literalMutationString332094 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ,[!Z^*EBIM4^57!1EJ2[fIlj#Uo26Q not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add331098_literalMutationString331157_failAssert0null334564_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.DefaultMustacheFactory o_testPartialWithTF_add331098__1 = createMustacheFactory();
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile(".L&,?kk?iCw`ph#HzajVcB cVax<cg");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.Writer o_testPartialWithTF_add331098__8 = m.execute(null, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_add331098_literalMutationString331157 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_add331098_literalMutationString331157_failAssert0null334564 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template .L&,?kk?iCw`ph#HzajVcB cVax<cg not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331097_failAssert0_add331360_failAssert0_add333987_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    c.compile("eG5arfBLOTNzXMtb]`*ML*+mB#b6mL");
                    com.github.mustachejava.Mustache m = c.compile("eG5arfBLOTNzXMtb]`*ML*+mB#b6mL");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        public com.github.mustachejava.TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_add331360 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_add331360_failAssert0_add333987 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template eG5arfBLOTNzXMtb]`*ML*+mB#b6mL not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add331100_literalMutationString331166_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache m = c.compile("gP#5@:QvqbkDtb_.4#-(3Fe=E;OK_d");
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer o_testPartialWithTF_add331100__7 = m.execute(sw, new java.lang.Object() {
                public com.github.mustachejava.TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            java.io.Writer o_testPartialWithTF_add331100__14 = m.execute(sw, new java.lang.Object() {
                public com.github.mustachejava.TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_add331100_literalMutationString331166 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template gP#5@:QvqbkDtb_.4#-(3Fe=E;OK_d not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331097_failAssert0_add331359_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                createMustacheFactory();
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("eG5arfBLOTNzXMtb]`*ML*+mB#b6mL");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_add331359 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template eG5arfBLOTNzXMtb]`*ML*+mB#b6mL not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331094_failAssert0_literalMutationString331207_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("x<}7vU}w7q/+W]#kb*!1>XfqIL6W]");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331094 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331094_failAssert0_literalMutationString331207 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template x<}7vU}w7q/+W]#kb*!1>XfqIL6W] not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove331103_literalMutationString331184_failAssert0_literalMutationString332244_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("partialintemplatefunct>on)html");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.Writer o_testPartialWithTF_remove331103__7 = m.execute(sw, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_remove331103_literalMutationString331184 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_remove331103_literalMutationString331184_failAssert0_literalMutationString332244 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template partialintemplatefunct>on)html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331095_failAssert0_literalMutationString331203_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("=ljyY8J/_5EpyxNb`L#3(c;1i@m6J(");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331095 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331095_failAssert0_literalMutationString331203 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template =ljyY8J/_5EpyxNb`L#3(c;1i@m6J( not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove331103_add331350_literalMutationString332105_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache m = c.compile("/t*6uAQRV{oe*;`oGDl]=55uVnfU9;");
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer o_testPartialWithTF_remove331103__7 = m.execute(sw, new java.lang.Object() {
                public com.github.mustachejava.TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            o_testPartialWithTF_remove331103__7.toString();
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_remove331103_add331350_literalMutationString332105 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template /t*6uAQRV{oe*;`oGDl]=55uVnfU9; not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331097_failAssert0_add331361_failAssert0_add334262_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("eG5arfBLOTNzXMtb]`*ML*+mB#b6mL");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        public com.github.mustachejava.TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    m.execute(sw, new java.lang.Object() {
                        public com.github.mustachejava.TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    m.execute(sw, new java.lang.Object() {
                        public com.github.mustachejava.TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_add331361 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_add331361_failAssert0_add334262 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template eG5arfBLOTNzXMtb]`*ML*+mB#b6mL not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove331102_literalMutationString331177_failAssert0_literalMutationString332315_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("pa]e1.txt");
                java.io.StringWriter sw = new java.io.StringWriter();
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_remove331102_literalMutationString331177 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_remove331102_literalMutationString331177_failAssert0_literalMutationString332315 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template pa]e1.txt not found", expected.getMessage());
        }
    }

    public void testPartialWithTFnull331105_failAssert0_literalMutationString331220_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("`;v:!*Ul{`AjWMjBb`/F?TrinDV 72");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(null, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTFnull331105 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testPartialWithTFnull331105_failAssert0_literalMutationString331220 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template `;v:!*Ul{`AjWMjBb`/F?TrinDV 72 not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331092() throws com.github.mustachejava.MustacheException, java.io.IOException {
        com.github.mustachejava.MustacheFactory c = createMustacheFactory();
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        com.github.mustachejava.Mustache m = c.compile("");
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        java.io.StringWriter sw = new java.io.StringWriter();
        java.io.Writer o_testPartialWithTF_literalMutationString331092__7 = m.execute(sw, new java.lang.Object() {
            public com.github.mustachejava.TemplateFunction i() {
                return ( s) -> s;
            }
        });
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testPartialWithTF_literalMutationString331092__7)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testPartialWithTF_literalMutationString331092__7)).toString());
        sw.toString();
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testPartialWithTF_literalMutationString331092__7)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testPartialWithTF_literalMutationString331092__7)).toString());
    }

    public void testPartialWithTF_add331098_literalMutationString331157_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.DefaultMustacheFactory o_testPartialWithTF_add331098__1 = createMustacheFactory();
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache m = c.compile(".L&,?kk?iCw`ph#HzajVcB cVax<cg");
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer o_testPartialWithTF_add331098__8 = m.execute(sw, new java.lang.Object() {
                public com.github.mustachejava.TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_add331098_literalMutationString331157 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template .L&,?kk?iCw`ph#HzajVcB cVax<cg not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331097_failAssert0_add331361_failAssert0_literalMutationString332819_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("eG5arfBLOTN^zXMtb]`*ML*+mB#b6mL");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        public com.github.mustachejava.TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    m.execute(sw, new java.lang.Object() {
                        public com.github.mustachejava.TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_add331361 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_add331361_failAssert0_literalMutationString332819 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template eG5arfBLOTN^zXMtb]`*ML*+mB#b6mL not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331092_add331227_add333134() throws com.github.mustachejava.MustacheException, java.io.IOException {
        com.github.mustachejava.MustacheFactory c = createMustacheFactory();
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        com.github.mustachejava.Mustache m = c.compile("");
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        m.getName();
        java.io.StringWriter sw = new java.io.StringWriter();
        java.io.Writer o_testPartialWithTF_literalMutationString331092_add331227_add333134__8 = m.execute(sw, new java.lang.Object() {
            public com.github.mustachejava.TemplateFunction i() {
                return ( s) -> s;
            }
        });
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testPartialWithTF_literalMutationString331092_add331227_add333134__8)).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testPartialWithTF_literalMutationString331092_add331227_add333134__8)).getBuffer())).toString());
        java.io.Writer o_testPartialWithTF_literalMutationString331092__7 = m.execute(sw, new java.lang.Object() {
            public com.github.mustachejava.TemplateFunction i() {
                return ( s) -> s;
            }
        });
        sw.toString();
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\nbox.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testPartialWithTF_literalMutationString331092_add331227_add333134__8)).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\nbox.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testPartialWithTF_literalMutationString331092_add331227_add333134__8)).getBuffer())).toString());
    }

    public void testPartialWithTF_remove331103_add331347_literalMutationString331926_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache m = c.compile("%Nl]z,6kaB6pOS.&Ji}ntdS-Fks P5");
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer o_testPartialWithTF_remove331103_add331347__7 = m.execute(sw, new java.lang.Object() {
                public com.github.mustachejava.TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            java.io.Writer o_testPartialWithTF_remove331103__7 = m.execute(sw, new java.lang.Object() {
                public com.github.mustachejava.TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_remove331103_add331347_literalMutationString331926 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template %Nl]z,6kaB6pOS.&Ji}ntdS-Fks P5 not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331096_failAssert0_literalMutationString331212_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("p]artialintemplatefuncti@on.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331096 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331096_failAssert0_literalMutationString331212 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template p]artialintemplatefuncti@on.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331094_failAssert0_add331378_failAssert0_literalMutationString332525_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("+W[5,287mH(3.i!7p(GhK1 3*V7?;");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        public com.github.mustachejava.TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331094 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331094_failAssert0_add331378 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331094_failAssert0_add331378_failAssert0_literalMutationString332525 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template +W[5,287mH(3.i!7p(GhK1 3*V7?; not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove331102_literalMutationString331175_failAssert0_literalMutationString332743_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("wk3xC4&gQ.ZCp}6KIWX9,j5F)BAR_8");
                java.io.StringWriter sw = new java.io.StringWriter();
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_remove331102_literalMutationString331175 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_remove331102_literalMutationString331175_failAssert0_literalMutationString332743 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template wk3xC4&gQ.ZCp}6KIWX9,j5F)BAR_8 not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331095_failAssert0_add331373_failAssert0_literalMutationString332570_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("partiaGintemplatefunctio n.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        public com.github.mustachejava.TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331095 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331095_failAssert0_add331373 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331095_failAssert0_add331373_failAssert0_literalMutationString332570 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template partiaGintemplatefunctio n.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add331099_literalMutationString331153_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache o_testPartialWithTF_add331099__3 = c.compile("partialintemplatefunction.html");
            com.github.mustachejava.Mustache m = c.compile("t:j9+v7@3jB[b8/)_;B3#DGyvN`bz1");
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer o_testPartialWithTF_add331099__8 = m.execute(sw, new java.lang.Object() {
                public com.github.mustachejava.TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_add331099_literalMutationString331153 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
        }
    }

    public void testPartialWithTF_literalMutationString331097_failAssert0_literalMutationString331186_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("eG5arfBLOTNzXMtb]J*ML*+mB#b6mL");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_literalMutationString331186 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template eG5arfBLOTNzXMtb]J*ML*+mB#b6mL not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331097_failAssert0_literalMutationString331187_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("eG5arfBLOTNzXMtb]`*L*+mB#b6mL");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_literalMutationString331187 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template eG5arfBLOTNzXMtb]`*L*+mB#b6mL not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove331103_literalMutationString331182_failAssert0null334716_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("pj2;H@!:?Jf^5X/TOX%I];H[c}lE[N");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.Writer o_testPartialWithTF_remove331103__7 = m.execute(null, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_remove331103_literalMutationString331182 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_remove331103_literalMutationString331182_failAssert0null334716 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template pj2;H@!:?Jf^5X/TOX%I];H[c}lE[N not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331097_failAssert0_add331360_failAssert0null334656_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    c.compile("eG5arfBLOTNzXMtb]`*ML*+mB#b6mL");
                    com.github.mustachejava.Mustache m = c.compile(null);
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        public com.github.mustachejava.TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_add331360 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_add331360_failAssert0null334656 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template eG5arfBLOTNzXMtb]`*ML*+mB#b6mL not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331095_failAssert0_literalMutationString331198_failAssert0_literalMutationString332778_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("%+.0yGj/]{yc]uQ]a(P1&MK<(MKw-");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        public com.github.mustachejava.TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331095 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331095_failAssert0_literalMutationString331198 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331095_failAssert0_literalMutationString331198_failAssert0_literalMutationString332778 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template %+.0yGj/]{yc]uQ]a(P1&MK<(MKw- not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add331098_literalMutationString331157_failAssert0_add333655_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.DefaultMustacheFactory o_testPartialWithTF_add331098__1 = createMustacheFactory();
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile(".L&,?kk?iCw`ph#HzajVcB cVax<cg");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                java.io.Writer o_testPartialWithTF_add331098__8 = m.execute(sw, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_add331098_literalMutationString331157 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_add331098_literalMutationString331157_failAssert0_add333655 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template .L&,?kk?iCw`ph#HzajVcB cVax<cg not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331097_failAssert0_add331363_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("eG5arfBLOTNzXMtb]`*ML*+mB#b6mL");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_add331363 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template eG5arfBLOTNzXMtb]`*ML*+mB#b6mL not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add331099_literalMutationString331146_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache o_testPartialWithTF_add331099__3 = c.compile("h)oj5;S? H&HA#}c71b]*>b:) Y4[D");
            com.github.mustachejava.Mustache m = c.compile("partialintemplatefunction.html");
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer o_testPartialWithTF_add331099__8 = m.execute(sw, new java.lang.Object() {
                public com.github.mustachejava.TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_add331099_literalMutationString331146 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template h)oj5;S? H&HA#}c71b]*>b:) Y4[D not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331097_failAssert0_add331362_failAssert0_literalMutationString332488_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("eG5arfBLOTNwzXMtb]`*ML*+mB#b6mL");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        public com.github.mustachejava.TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_add331362 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_add331362_failAssert0_literalMutationString332488 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template eG5arfBLOTNwzXMtb]`*ML*+mB#b6mL not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove331103_literalMutationString331182_failAssert0_add334124_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                createMustacheFactory();
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("pj2;H@!:?Jf^5X/TOX%I];H[c}lE[N");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.Writer o_testPartialWithTF_remove331103__7 = m.execute(sw, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_remove331103_literalMutationString331182 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_remove331103_literalMutationString331182_failAssert0_add334124 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template pj2;H@!:?Jf^5X/TOX%I];H[c}lE[N not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove331102_literalMutationString331175_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache m = c.compile("3v2o/^e%7OHV|J@W/R#0V`$fxSenwV");
            java.io.StringWriter sw = new java.io.StringWriter();
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_remove331102_literalMutationString331175 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 3v2o/^e%7OHV|J@W/R#0V`$fxSenwV not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add331101_literalMutationString331171_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache m = c.compile("&(pEw}y?;jzc?m6z(4lRge*9Nt*Ip>");
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer o_testPartialWithTF_add331101__7 = m.execute(sw, new java.lang.Object() {
                public com.github.mustachejava.TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_add331101_literalMutationString331171 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template &(pEw}y?;jzc?m6z(4lRge*9Nt*Ip> not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331097_failAssert0_add331362_failAssert0_add333979_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("eG5arfBLOTNzXMtb]`*ML*+mB#b6mL");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        public com.github.mustachejava.TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_add331362 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_add331362_failAssert0_add333979 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template eG5arfBLOTNzXMtb]`*ML*+mB#b6mL not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331097_failAssert0null331424_failAssert0_add333888_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    c.compile("eG5arfBLOTNzXMtb]`*ML*+mB#b6mL");
                    com.github.mustachejava.Mustache m = c.compile("eG5arfBLOTNzXMtb]`*ML*+mB#b6mL");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(null, new java.lang.Object() {
                        public com.github.mustachejava.TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0null331424 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0null331424_failAssert0_add333888 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template eG5arfBLOTNzXMtb]`*ML*+mB#b6mL not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove331102_literalMutationString331175_failAssert0_add334182_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("3v2o/^e%7OHV|J@W/R#0V`$fxSenwV");
                java.io.StringWriter sw = new java.io.StringWriter();
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_remove331102_literalMutationString331175 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_remove331102_literalMutationString331175_failAssert0_add334182 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 3v2o/^e%7OHV|J@W/R#0V`$fxSenwV not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331093_failAssert0_literalMutationString331197_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile(" does not exist");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331093 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331093_failAssert0_literalMutationString331197 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add331099_add331245_literalMutationString331911_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache o_testPartialWithTF_add331099__3 = c.compile("partialintemplatefunction.html");
            o_testPartialWithTF_add331099__3.getName();
            com.github.mustachejava.Mustache m = c.compile("part>alintemplatefunction.html");
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer o_testPartialWithTF_add331099__8 = m.execute(sw, new java.lang.Object() {
                public com.github.mustachejava.TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_add331099_add331245_literalMutationString331911 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template part>alintemplatefunction.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add331098_literalMutationString331157_failAssert0_add333656_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.DefaultMustacheFactory o_testPartialWithTF_add331098__1 = createMustacheFactory();
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile(".L&,?kk?iCw`ph#HzajVcB cVax<cg");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.Writer o_testPartialWithTF_add331098__8 = m.execute(sw, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_add331098_literalMutationString331157 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_add331098_literalMutationString331157_failAssert0_add333656 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template .L&,?kk?iCw`ph#HzajVcB cVax<cg not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331097_failAssert0_literalMutationString331190_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("n{4TM(3ExFr[OlVFt/NMQh#tWfBrKT");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_literalMutationString331190 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template n{4TM(3ExFr[OlVFt/NMQh#tWfBrKT not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331097_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache m = c.compile("eG5arfBLOTNzXMtb]`*ML*+mB#b6mL");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, new java.lang.Object() {
                public com.github.mustachejava.TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template eG5arfBLOTNzXMtb]`*ML*+mB#b6mL not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331097_failAssert0_add331360_failAssert0_literalMutationString332497_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    c.compile("eG5arfBLOTNzXxMtb]`*ML*+mB#b6mL");
                    com.github.mustachejava.Mustache m = c.compile("eG5arfBLOTNzXMtb]`*ML*+mB#b6mL");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        public com.github.mustachejava.TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_add331360 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_add331360_failAssert0_literalMutationString332497 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template eG5arfBLOTNzXxMtb]`*ML*+mB#b6mL not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331096_failAssert0_literalMutationString331214_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("eyX0{jAGv!{:s:suB|pRD]%wQ9cL5%O");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331096 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331096_failAssert0_literalMutationString331214 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template eyX0{jAGv!{:s:suB|pRD]%wQ9cL5%O not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331097_failAssert0null331424_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("eG5arfBLOTNzXMtb]`*ML*+mB#b6mL");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(null, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0null331424 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template eG5arfBLOTNzXMtb]`*ML*+mB#b6mL not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331094_failAssert0_add331376_failAssert0_literalMutationString332515_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("parialintemplat}efunction.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        public com.github.mustachejava.TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    m.execute(sw, new java.lang.Object() {
                        public com.github.mustachejava.TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331094 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331094_failAssert0_add331376 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331094_failAssert0_add331376_failAssert0_literalMutationString332515 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template parialintemplat}efunction.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove331103_literalMutationString331182_failAssert0_literalMutationString332677_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("pj2;H@!i:?Jf^5X/TOX%I];H[c}lE[N");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.Writer o_testPartialWithTF_remove331103__7 = m.execute(sw, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_remove331103_literalMutationString331182 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_remove331103_literalMutationString331182_failAssert0_literalMutationString332677 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template pj2;H@!i:?Jf^5X/TOX%I];H[c}lE[N not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331097_failAssert0_literalMutationString331191_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("eG5arfBLOTNzXVMtb]`*ML*+mB#b6mL");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_literalMutationString331191 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template eG5arfBLOTNzXVMtb]`*ML*+mB#b6mL not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add331098_literalMutationString331157_failAssert0_literalMutationString332217_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.DefaultMustacheFactory o_testPartialWithTF_add331098__1 = createMustacheFactory();
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile(".L&,?kk?iCw`ph#HzajVcB cVax<cg");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.Writer o_testPartialWithTF_add331098__8 = m.execute(sw, new java.lang.Object() {
                    public com.github.mustachejava.TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_add331098_literalMutationString331157 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_add331098_literalMutationString331157_failAssert0_literalMutationString332217 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template .L&,?kk?iCw`ph#HzajVcB cVax<cg not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString331097_failAssert0_add331361_failAssert0null334762_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("eG5arfBLOTNzXMtb]`*ML*+mB#b6mL");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.lang.Object() {
                        public com.github.mustachejava.TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    m.execute(null, new java.lang.Object() {
                        public com.github.mustachejava.TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_add331361 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString331097_failAssert0_add331361_failAssert0null334762 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template eG5arfBLOTNzXMtb]`*ML*+mB#b6mL not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString542417_failAssert0_literalMutationString542734_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter json = new java.io.StringWriter();
                com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                    }
                };
                com.github.mustachejava.Mustache m = c.compile("complex.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ComplexObject());
                jg.writeEndObject();
                jg.flush();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                sw = new java.io.StringWriter();
                m = createMustacheFactory().compile("com:plex.h3tml");
                m.execute(sw, o);
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString542417 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString542417_failAssert0_literalMutationString542734 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template com:plex.h3tml not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString555740_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            java.io.StringWriter json = new java.io.StringWriter();
            com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
            final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
            jg.writeStartObject();
            final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
            com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                @java.lang.Override
                public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                    return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                }
            };
            com.github.mustachejava.Mustache m = c.compile("complex.html");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, new com.github.mustachejava.ComplexObject());
            jg.writeEndObject();
            jg.flush();
            com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
            sw.toString();
            com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
            java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
            sw = new java.io.StringWriter();
            m = createMustacheFactory().compile("iXk@d#$&jQ>f");
            m.execute(sw, o);
            com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
            sw.toString();
            com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
            sw.toString();
            junit.framework.TestCase.fail("testComplex_literalMutationString555740 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
        }
    }

    public void testComplex_literalMutationString555744_failAssert0_literalMutationString555936_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter json = new java.io.StringWriter();
                com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                    }
                };
                com.github.mustachejava.Mustache m = c.compile("zAas[/ Bn[K(");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ComplexObject());
                jg.writeEndObject();
                jg.flush();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                sw = new java.io.StringWriter();
                m = createMustacheFactory().compile("complex.html");
                m.execute(sw, o);
                com.github.mustachejava.TestUtil.getContents(this.root, "page1.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString555744 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString555744_failAssert0_literalMutationString555936 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template zAas[/ Bn[K( not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString542416_failAssert0_add543649_failAssert0_add551201_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter json = new java.io.StringWriter();
                    com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                    final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile("complex.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new com.github.mustachejava.ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    jg.flush();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    json.toString();
                    com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                    sw = new java.io.StringWriter();
                    m = createMustacheFactory().compile("!zq^S<eYumHH");
                    m.execute(sw, o);
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString542416 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString542416_failAssert0_add543649 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString542416_failAssert0_add543649_failAssert0_add551201 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template !zq^S<eYumHH not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString542417_failAssert0_literalMutationString542734_failAssert0_literalMutationString547606_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter json = new java.io.StringWriter();
                    com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                    final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile("complex.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new com.github.mustachejava.ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                    sw = new java.io.StringWriter();
                    m = createMustacheFactory().compile("com:plej.h3tml");
                    m.execute(sw, o);
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString542417 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString542417_failAssert0_literalMutationString542734 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString542417_failAssert0_literalMutationString542734_failAssert0_literalMutationString547606 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template com:plej.h3tml not found", expected.getMessage());
        }
    }

    public void testComplexnull555773_failAssert0_literalMutationString556648_failAssert0_literalMutationString558620_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter json = new java.io.StringWriter();
                    com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                    final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile("5[1TJ!BlK),n");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(null, new com.github.mustachejava.ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    com.github.mustachejava.TestUtil.getContents(this.root, "comTlex.txt");
                    sw.toString();
                    com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                    sw = new java.io.StringWriter();
                    m = createMustacheFactory().compile("complex.html");
                    m.execute(sw, o);
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexnull555773 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testComplexnull555773_failAssert0_literalMutationString556648 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testComplexnull555773_failAssert0_literalMutationString556648_failAssert0_literalMutationString558620 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 5[1TJ!BlK),n not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString542417_failAssert0_literalMutationString542734_failAssert0null554463_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter json = new java.io.StringWriter();
                    com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                    final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile("complex.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new com.github.mustachejava.ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                    sw = new java.io.StringWriter();
                    m = createMustacheFactory().compile("com:plex.h3tml");
                    m.execute(null, o);
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString542417 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString542417_failAssert0_literalMutationString542734 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString542417_failAssert0_literalMutationString542734_failAssert0null554463 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template com:plex.h3tml not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString542417_failAssert0_literalMutationString542734_failAssert0null554465_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter json = new java.io.StringWriter();
                    com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                    final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile("complex.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new com.github.mustachejava.ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                    sw = new java.io.StringWriter();
                    m = createMustacheFactory().compile("com:plex.h3tml");
                    m.execute(sw, o);
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString542417 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString542417_failAssert0_literalMutationString542734 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString542417_failAssert0_literalMutationString542734_failAssert0null554465 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template com:plex.h3tml not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString542416_failAssert0_add543649_failAssert0_add551213_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter json = new java.io.StringWriter();
                    com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                    final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile("complex.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new com.github.mustachejava.ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    json.toString();
                    com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                    sw = new java.io.StringWriter();
                    m = createMustacheFactory().compile("!zq^S<eYumHH");
                    m.execute(sw, o);
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    sw.toString();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString542416 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString542416_failAssert0_add543649 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString542416_failAssert0_add543649_failAssert0_add551213 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template !zq^S<eYumHH not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString542416_failAssert0_add543649_failAssert0_literalMutationString546835_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter json = new java.io.StringWriter();
                    com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                    final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile("complex.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new com.github.mustachejava.ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    json.toString();
                    com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                    sw = new java.io.StringWriter();
                    m = createMustacheFactory().compile("!zq^S<eYumHH");
                    m.execute(sw, o);
                    com.github.mustachejava.TestUtil.getContents(this.root, "compmex.txt");
                    sw.toString();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString542416 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString542416_failAssert0_add543649 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString542416_failAssert0_add543649_failAssert0_literalMutationString546835 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template !zq^S<eYumHH not found", expected.getMessage());
        }
    }

    public void testComplexnull542454_failAssert0_literalMutationString543276_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter json = new java.io.StringWriter();
                com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                    }
                };
                com.github.mustachejava.Mustache m = c.compile("complex.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ComplexObject());
                jg.writeEndObject();
                jg.flush();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                sw = new java.io.StringWriter();
                m = createMustacheFactory().compile("comple x.html");
                m.execute(null, o);
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplexnull542454 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testComplexnull542454_failAssert0_literalMutationString543276 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template comple x.html not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString555744_failAssert0_literalMutationString555936_failAssert0null566659_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter json = new java.io.StringWriter();
                    com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                    final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile("zAas[/ Bn[K(");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new com.github.mustachejava.ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                    sw = new java.io.StringWriter();
                    m = createMustacheFactory().compile(null);
                    m.execute(sw, o);
                    com.github.mustachejava.TestUtil.getContents(this.root, "page1.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString555744 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString555744_failAssert0_literalMutationString555936 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString555744_failAssert0_literalMutationString555936_failAssert0null566659 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template zAas[/ Bn[K( not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString555740_failAssert0_literalMutationString556287_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter json = new java.io.StringWriter();
                com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                    }
                };
                com.github.mustachejava.Mustache m = c.compile("complex.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ComplexObject());
                jg.writeEndObject();
                jg.flush();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                sw = new java.io.StringWriter();
                m = createMustacheFactory().compile("iXk@d#$}&jQ>f");
                m.execute(sw, o);
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString555740 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString555740_failAssert0_literalMutationString556287 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
        }
    }

    public void testComplex_literalMutationString542416_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            java.io.StringWriter json = new java.io.StringWriter();
            com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
            final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
            jg.writeStartObject();
            final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
            com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                @java.lang.Override
                public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                    return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                }
            };
            com.github.mustachejava.Mustache m = c.compile("complex.html");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, new com.github.mustachejava.ComplexObject());
            jg.writeEndObject();
            jg.flush();
            com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
            sw.toString();
            com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
            java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
            sw = new java.io.StringWriter();
            m = createMustacheFactory().compile("!zq^S<eYumHH");
            m.execute(sw, o);
            com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
            sw.toString();
            com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
            sw.toString();
            junit.framework.TestCase.fail("testComplex_literalMutationString542416 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template !zq^S<eYumHH not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString542413_failAssert0_literalMutationString542684_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter json = new java.io.StringWriter();
                com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                    }
                };
                com.github.mustachejava.Mustache m = c.compile("complex.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ComplexObject());
                jg.writeEndObject();
                jg.flush();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                sw = new java.io.StringWriter();
                m = createMustacheFactory().compile("co![lex.html");
                m.execute(sw, o);
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString542413 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString542413_failAssert0_literalMutationString542684 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template co![lex.html not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString555734_failAssert0_literalMutationString556096_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter json = new java.io.StringWriter();
                com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                    }
                };
                com.github.mustachejava.Mustache m = c.compile("V`:,be;p@tcw");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ComplexObject());
                jg.writeEndObject();
                jg.flush();
                com.github.mustachejava.TestUtil.getContents(this.root, "$u|IY0$hN&L");
                sw.toString();
                com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                sw = new java.io.StringWriter();
                m = createMustacheFactory().compile("complex.html");
                m.execute(sw, o);
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString555734 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString555734_failAssert0_literalMutationString556096 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template V`:,be;p@tcw not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString555742_failAssert0_add557068_failAssert0_literalMutationString562192_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter json = new java.io.StringWriter();
                    com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                    final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile("complex.h|tml");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new com.github.mustachejava.ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                    sw = new java.io.StringWriter();
                    createMustacheFactory().compile("complex.html");
                    m = createMustacheFactory().compile("complex.html");
                    m.execute(sw, o);
                    com.github.mustachejava.TestUtil.getContents(this.root, "PVxM4pf]! i");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString555742 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString555742_failAssert0_add557068 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString555742_failAssert0_add557068_failAssert0_literalMutationString562192 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template complex.h|tml not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString542416_failAssert0_add543649_failAssert0_literalMutationString546820_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter json = new java.io.StringWriter();
                    com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                    final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile("[aC]<buMnw&>");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new com.github.mustachejava.ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    json.toString();
                    com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                    sw = new java.io.StringWriter();
                    m = createMustacheFactory().compile("!zq^S<eYumHH");
                    m.execute(sw, o);
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString542416 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString542416_failAssert0_add543649 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString542416_failAssert0_add543649_failAssert0_literalMutationString546820 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [aC]<buMnw&> not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString542416_failAssert0null544267_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter json = new java.io.StringWriter();
                com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                    }
                };
                com.github.mustachejava.Mustache m = c.compile("complex.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ComplexObject());
                jg.writeEndObject();
                jg.flush();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                sw = new java.io.StringWriter();
                m = createMustacheFactory().compile("!zq^S<eYumHH");
                m.execute(null, o);
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString542416 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString542416_failAssert0null544267 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template !zq^S<eYumHH not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString542416_failAssert0_add543649_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter json = new java.io.StringWriter();
                com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                    }
                };
                com.github.mustachejava.Mustache m = c.compile("complex.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ComplexObject());
                jg.writeEndObject();
                jg.flush();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                json.toString();
                com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                sw = new java.io.StringWriter();
                m = createMustacheFactory().compile("!zq^S<eYumHH");
                m.execute(sw, o);
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString542416 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString542416_failAssert0_add543649 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template !zq^S<eYumHH not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString555746_failAssert0_literalMutationString556160_failAssert0_literalMutationString559102_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter json = new java.io.StringWriter();
                    com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                    final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile("l<AZch3^dgy|");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new com.github.mustachejava.ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                    sw = new java.io.StringWriter();
                    m = createMustacheFactory().compile("complex.hml");
                    m.execute(sw, o);
                    com.github.mustachejava.TestUtil.getContents(this.root, "complexbtxt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString555746 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString555746_failAssert0_literalMutationString556160 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString555746_failAssert0_literalMutationString556160_failAssert0_literalMutationString559102 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template l<AZch3^dgy| not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString542419_failAssert0_add543827_failAssert0_literalMutationString548895_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter json = new java.io.StringWriter();
                    com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                    final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                        }
                    };
                    c.compile("complex.html");
                    com.github.mustachejava.Mustache m = c.compile("complex.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new com.github.mustachejava.ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                    sw = new java.io.StringWriter();
                    m = createMustacheFactory().compile("%omplex.html");
                    m.execute(sw, o);
                    com.github.mustachejava.TestUtil.getContents(this.root, "compleE.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString542419 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString542419_failAssert0_add543827 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString542419_failAssert0_add543827_failAssert0_literalMutationString548895 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template %omplex.html not found", expected.getMessage());
        }
    }

    public void testComplexnull555779_failAssert0_literalMutationString556594_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter json = new java.io.StringWriter();
                com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                    }
                };
                com.github.mustachejava.Mustache m = c.compile("complex.h>ml");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ComplexObject());
                jg.writeEndObject();
                jg.flush();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                sw = new java.io.StringWriter();
                m = createMustacheFactory().compile("complex.html");
                m.execute(sw, o);
                com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testComplexnull555779 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testComplexnull555779_failAssert0_literalMutationString556594 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template complex.h>ml not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString542417_failAssert0_literalMutationString542734_failAssert0_add551770_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter json = new java.io.StringWriter();
                    com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                    final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile("complex.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new com.github.mustachejava.ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                    sw = new java.io.StringWriter();
                    createMustacheFactory();
                    m = createMustacheFactory().compile("com:plex.h3tml");
                    m.execute(sw, o);
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString542417 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString542417_failAssert0_literalMutationString542734 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString542417_failAssert0_literalMutationString542734_failAssert0_add551770 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template com:plex.h3tml not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString555744_failAssert0_literalMutationString555936_failAssert0_literalMutationString558346_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter json = new java.io.StringWriter();
                    com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                    final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile("zAas[/ Bn[K(");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new com.github.mustachejava.ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    com.github.mustachejava.TestUtil.getContents(this.root, "");
                    sw.toString();
                    com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                    sw = new java.io.StringWriter();
                    m = createMustacheFactory().compile("complex.html");
                    m.execute(sw, o);
                    com.github.mustachejava.TestUtil.getContents(this.root, "page1.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString555744 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString555744_failAssert0_literalMutationString555936 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString555744_failAssert0_literalMutationString555936_failAssert0_literalMutationString558346 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template zAas[/ Bn[K( not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString542422_failAssert0_add543739_failAssert0_literalMutationString547271_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter json = new java.io.StringWriter();
                    com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                    final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile("comp]ex.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new com.github.mustachejava.ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                    sw = new java.io.StringWriter();
                    m = createMustacheFactory().compile("complex.html");
                    m.execute(sw, o);
                    com.github.mustachejava.TestUtil.getContents(this.root, "RLWHy6;3PSv");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString542422 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString542422_failAssert0_add543739 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString542422_failAssert0_add543739_failAssert0_literalMutationString547271 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template comp]ex.html not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString555740_failAssert0_add557122_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter json = new java.io.StringWriter();
                com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                    }
                };
                com.github.mustachejava.Mustache m = c.compile("complex.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ComplexObject());
                jg.writeEndObject();
                jg.flush();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                sw = new java.io.StringWriter();
                createMustacheFactory().compile("iXk@d#$&jQ>f");
                m = createMustacheFactory().compile("iXk@d#$&jQ>f");
                m.execute(sw, o);
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString555740 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString555740_failAssert0_add557122 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
        }
    }

    public void testComplex_literalMutationString555744_failAssert0_literalMutationString555936_failAssert0_add563087_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter json = new java.io.StringWriter();
                    com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                    final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile("zAas[/ Bn[K(");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new com.github.mustachejava.ComplexObject());
                    jg.writeEndObject();
                    jg.writeEndObject();
                    jg.flush();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                    sw = new java.io.StringWriter();
                    m = createMustacheFactory().compile("complex.html");
                    m.execute(sw, o);
                    com.github.mustachejava.TestUtil.getContents(this.root, "page1.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString555744 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString555744_failAssert0_literalMutationString555936 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString555744_failAssert0_literalMutationString555936_failAssert0_add563087 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template zAas[/ Bn[K( not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString555731_failAssert0_literalMutationString556421_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter json = new java.io.StringWriter();
                com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                    }
                };
                com.github.mustachejava.Mustache m = c.compile("kQ>@P[iHgN*C");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ComplexObject());
                jg.writeEndObject();
                jg.flush();
                com.github.mustachejava.TestUtil.getContents(this.root, "page1.txt");
                sw.toString();
                com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                sw = new java.io.StringWriter();
                m = createMustacheFactory().compile("complex.html");
                m.execute(sw, o);
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString555731 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString555731_failAssert0_literalMutationString556421 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template kQ>@P[iHgN*C not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString542416_failAssert0_add543656_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter json = new java.io.StringWriter();
                com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                    }
                };
                com.github.mustachejava.Mustache m = c.compile("complex.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ComplexObject());
                jg.writeEndObject();
                jg.flush();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                sw = new java.io.StringWriter();
                m = createMustacheFactory().compile("!zq^S<eYumHH");
                m.execute(sw, o);
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString542416 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString542416_failAssert0_add543656 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template !zq^S<eYumHH not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString542420_failAssert0_literalMutationString542606_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter json = new java.io.StringWriter();
                com.fasterxml.jackson.databind.MappingJsonFactory jf = new com.fasterxml.jackson.databind.MappingJsonFactory();
                final com.fasterxml.jackson.core.JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final com.github.mustachejavabenchmarks.JsonCapturer captured = new com.github.mustachejavabenchmarks.JsonCapturer(jg);
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.util.CapturingMustacheVisitor(this, captured);
                    }
                };
                com.github.mustachejava.Mustache m = c.compile("complex.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ComplexObject());
                jg.writeEndObject();
                jg.flush();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                com.fasterxml.jackson.databind.JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                java.lang.Object o = com.github.mustachejavabenchmarks.JsonInterpreterTest.toObject(jsonNode);
                sw = new java.io.StringWriter();
                m = createMustacheFactory().compile("complex:html");
                m.execute(sw, o);
                com.github.mustachejava.TestUtil.getContents(this.root, "co)mplex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString542420 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString542420_failAssert0_literalMutationString542606 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template complex:html not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString159515_failAssert0_literalMutationString159740_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = initParallel();
                com.github.mustachejava.Mustache m = c.compile("cmplex|.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString159515 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString159515_failAssert0_literalMutationString159740 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template cmplex|.html not found", expected.getMessage());
        }
    }

    public void testComplexParallel_add159526_literalMutationString159594() throws com.github.mustachejava.MustacheException, java.io.IOException {
        com.github.mustachejava.MustacheFactory c = initParallel();
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        com.github.mustachejava.Mustache m = c.compile("");
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        java.io.StringWriter sw = new java.io.StringWriter();
        java.io.Writer o_testComplexParallel_add159526_literalMutationString159594__7 = m.execute(sw, new com.github.mustachejava.ParallelComplexObject());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testComplexParallel_add159526_literalMutationString159594__7)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testComplexParallel_add159526_literalMutationString159594__7)).toString());
        m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
        java.lang.String o_testComplexParallel_add159526__12 = com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
        junit.framework.TestCase.assertEquals("<h1>Colors</h1>\n  <ul>\n      <li><strong>red</strong></li>\n      <li><a href=\"#Green\">green</a></li>\n      <li><a href=\"#Blue\">blue</a></li>\n  </ul>\n  <p>The list is not empty.</p>\n", o_testComplexParallel_add159526__12);
        sw.toString();
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\nbox.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testComplexParallel_add159526_literalMutationString159594__7)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\nbox.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testComplexParallel_add159526_literalMutationString159594__7)).toString());
        junit.framework.TestCase.assertEquals("<h1>Colors</h1>\n  <ul>\n      <li><strong>red</strong></li>\n      <li><a href=\"#Green\">green</a></li>\n      <li><a href=\"#Blue\">blue</a></li>\n  </ul>\n  <p>The list is not empty.</p>\n", o_testComplexParallel_add159526__12);
    }

    public void testComplexParallel_literalMutationString159519_failAssert0_literalMutationString159751_failAssert0null165098_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = initParallel();
                    com.github.mustachejava.Mustache m = c.compile("com%plex.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexParallel_literalMutationString159519 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString159519_failAssert0_literalMutationString159751 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString159519_failAssert0_literalMutationString159751_failAssert0null165098 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template com%plex.html not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString159514_failAssert0_literalMutationString159720_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = initParallel();
                com.github.mustachejava.Mustache m = c.compile("|M10Upk,4m3t");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
                com.github.mustachejava.TestUtil.getContents(this.root, "complx.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString159514 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString159514_failAssert0_literalMutationString159720 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template |M10Upk,4m3t not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString159515_failAssert0_literalMutationString159740_failAssert0null165071_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = initParallel();
                    com.github.mustachejava.Mustache m = c.compile("cmplex|.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(null, new com.github.mustachejava.ParallelComplexObject()).close();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexParallel_literalMutationString159515 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString159515_failAssert0_literalMutationString159740 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString159515_failAssert0_literalMutationString159740_failAssert0null165071 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template cmplex|.html not found", expected.getMessage());
        }
    }

    public void testComplexParallel_add159523_literalMutationString159656_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.DefaultMustacheFactory o_testComplexParallel_add159523__1 = initParallel();
            com.github.mustachejava.MustacheFactory c = initParallel();
            com.github.mustachejava.Mustache m = c.compile("Xpo=St+j(!^2");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
            java.lang.String o_testComplexParallel_add159523__11 = com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
            sw.toString();
            junit.framework.TestCase.fail("testComplexParallel_add159523_literalMutationString159656 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template Xpo=St+j(!^2 not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString159514_failAssert0_add160036_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                initParallel();
                com.github.mustachejava.MustacheFactory c = initParallel();
                com.github.mustachejava.Mustache m = c.compile("|M10Upk,4m3t");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString159514 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString159514_failAssert0_add160036 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template |M10Upk,4m3t not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString159515_failAssert0_literalMutationString159737_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = initParallel();
                com.github.mustachejava.Mustache m = c.compile("3;o; {OD5c(");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString159515 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString159515_failAssert0_literalMutationString159737 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 3;o; {OD5c( not found", expected.getMessage());
        }
    }

    public void testComplexParallel_add159526null160143_failAssert0_literalMutationString161772_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = initParallel();
                com.github.mustachejava.Mustache m = c.compile("X`C0*!78O!eE");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ParallelComplexObject());
                m.execute(null, new com.github.mustachejava.ParallelComplexObject()).close();
                java.lang.String o_testComplexParallel_add159526__12 = com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_add159526null160143 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testComplexParallel_add159526null160143_failAssert0_literalMutationString161772 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template X`C0*!78O!eE not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString159521_failAssert0_literalMutationString159765_failAssert0_literalMutationString161343_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = initParallel();
                    com.github.mustachejava.Mustache m = c.compile("r*n%=e/MgFt:");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
                    com.github.mustachejava.TestUtil.getContents(this.root, "");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexParallel_literalMutationString159521 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString159521_failAssert0_literalMutationString159765 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString159521_failAssert0_literalMutationString159765_failAssert0_literalMutationString161343 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template r*n%=e/MgFt: not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString159515_failAssert0_literalMutationString159740_failAssert0_add163789_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = initParallel();
                    com.github.mustachejava.Mustache m = c.compile("cmplex|.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexParallel_literalMutationString159515 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString159515_failAssert0_literalMutationString159740 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString159515_failAssert0_literalMutationString159740_failAssert0_add163789 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template cmplex|.html not found", expected.getMessage());
        }
    }

    public void testComplexParallel_add159526null160144_failAssert0_literalMutationString161762_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = initParallel();
                com.github.mustachejava.Mustache m = c.compile("?}@Gn$PA!T37");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ParallelComplexObject());
                m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
                java.lang.String o_testComplexParallel_add159526__12 = com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_add159526null160144 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testComplexParallel_add159526null160144_failAssert0_literalMutationString161762 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ?}@Gn$PA!T37 not found", expected.getMessage());
        }
    }

    public void testComplexParallel_add159528null160155_failAssert0_literalMutationString161699_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = initParallel();
                com.github.mustachejava.Mustache m = c.compile("complex[html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
                sw.toString();
                sw.toString();
                java.lang.String o_testComplexParallel_add159528__11 = com.github.mustachejava.TestUtil.getContents(this.root, null);
                junit.framework.TestCase.fail("testComplexParallel_add159528null160155 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testComplexParallel_add159528null160155_failAssert0_literalMutationString161699 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template complex[html not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString159514_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = initParallel();
            com.github.mustachejava.Mustache m = c.compile("|M10Upk,4m3t");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
            com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
            sw.toString();
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString159514 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template |M10Upk,4m3t not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString159514_failAssert0_add160039_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = initParallel();
                com.github.mustachejava.Mustache m = c.compile("|M10Upk,4m3t");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ParallelComplexObject());
                m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString159514 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString159514_failAssert0_add160039 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template |M10Upk,4m3t not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString159519_failAssert0_literalMutationString159751_failAssert0_add163857_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = initParallel();
                    com.github.mustachejava.Mustache m = c.compile("com%plex.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex3txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexParallel_literalMutationString159519 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString159519_failAssert0_literalMutationString159751 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString159519_failAssert0_literalMutationString159751_failAssert0_add163857 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template com%plex.html not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString159519_failAssert0_literalMutationString159751_failAssert0_literalMutationString161503_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = initParallel();
                    com.github.mustachejava.Mustache m = c.compile("com%plx.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex3txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexParallel_literalMutationString159519 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString159519_failAssert0_literalMutationString159751 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString159519_failAssert0_literalMutationString159751_failAssert0_literalMutationString161503 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template com%plx.html not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString159519_failAssert0_literalMutationString159751_failAssert0_literalMutationString161502_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = initParallel();
                    com.github.mustachejava.Mustache m = c.compile("co7%plex.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex3txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexParallel_literalMutationString159519 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString159519_failAssert0_literalMutationString159751 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString159519_failAssert0_literalMutationString159751_failAssert0_literalMutationString161502 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template co7%plex.html not found", expected.getMessage());
        }
    }

    public void testComplexParallel_add159524null160152_failAssert0_literalMutationString162728_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = initParallel();
                com.github.mustachejava.Mustache o_testComplexParallel_add159524__3 = c.compile(":#H&eL&D=oK6");
                com.github.mustachejava.Mustache m = c.compile("complex.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
                java.lang.String o_testComplexParallel_add159524__11 = com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_add159524null160152 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testComplexParallel_add159524null160152_failAssert0_literalMutationString162728 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template :#H&eL&D=oK6 not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString159514_failAssert0null160173_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = initParallel();
                com.github.mustachejava.Mustache m = c.compile("|M10Upk,4m3t");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
                com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString159514 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString159514_failAssert0null160173 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template |M10Upk,4m3t not found", expected.getMessage());
        }
    }

    public void testComplexParallel_add159526_literalMutationString159599_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = initParallel();
            com.github.mustachejava.Mustache m = c.compile("%0HD|5TUE7uk");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, new com.github.mustachejava.ParallelComplexObject());
            m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
            java.lang.String o_testComplexParallel_add159526__12 = com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
            sw.toString();
            junit.framework.TestCase.fail("testComplexParallel_add159526_literalMutationString159599 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template %0HD|5TUE7uk not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString159515_failAssert0_literalMutationString159740_failAssert0_literalMutationString161403_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = initParallel();
                    com.github.mustachejava.Mustache m = c.compile("cmplex|.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
                    com.github.mustachejava.TestUtil.getContents(this.root, "#3z$YR``NoY");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexParallel_literalMutationString159515 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString159515_failAssert0_literalMutationString159740 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString159515_failAssert0_literalMutationString159740_failAssert0_literalMutationString161403 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template cmplex|.html not found", expected.getMessage());
        }
    }

    public void testComplexParallel_add159527_literalMutationString159612_failAssert0_literalMutationString161326_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = initParallel();
                com.github.mustachejava.Mustache m = c.compile("5K+U(N]pvLPm");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
                java.lang.String o_testComplexParallel_add159527__10 = com.github.mustachejava.TestUtil.getContents(this.root, "");
                java.lang.String o_testComplexParallel_add159527__11 = com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_add159527_literalMutationString159612 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_add159527_literalMutationString159612_failAssert0_literalMutationString161326 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 5K+U(N]pvLPm not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString159519_failAssert0_literalMutationString159751_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = initParallel();
                com.github.mustachejava.Mustache m = c.compile("com%plex.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex3txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString159519 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString159519_failAssert0_literalMutationString159751 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template com%plex.html not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString159512_failAssert0_literalMutationString159808_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = initParallel();
                com.github.mustachejava.Mustache m = c.compile("}$S<Z)!$4");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString159512 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString159512_failAssert0_literalMutationString159808 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template }$S<Z)!$4 not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString159514_failAssert0null160172_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = initParallel();
                com.github.mustachejava.Mustache m = c.compile("|M10Upk,4m3t");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(null, new com.github.mustachejava.ParallelComplexObject()).close();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString159514 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString159514_failAssert0null160172 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template |M10Upk,4m3t not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString159514_failAssert0_add160037_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = initParallel();
                c.compile("|M10Upk,4m3t");
                com.github.mustachejava.Mustache m = c.compile("|M10Upk,4m3t");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString159514 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString159514_failAssert0_add160037 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template |M10Upk,4m3t not found", expected.getMessage());
        }
    }

    public void testComplexParallel_add159526_remove160122_literalMutationString160966_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = initParallel();
            com.github.mustachejava.Mustache m = c.compile("xbmM?b`2>cDH");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
            java.lang.String o_testComplexParallel_add159526__12 = com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
            sw.toString();
            junit.framework.TestCase.fail("testComplexParallel_add159526_remove160122_literalMutationString160966 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template xbmM?b`2>cDH not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString159519_failAssert0_literalMutationString159751_failAssert0_add163855_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = initParallel();
                    com.github.mustachejava.Mustache m = c.compile("com%plex.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new com.github.mustachejava.ParallelComplexObject()).close();
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex3txt");
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex3txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexParallel_literalMutationString159519 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString159519_failAssert0_literalMutationString159751 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString159519_failAssert0_literalMutationString159751_failAssert0_add163855 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template com%plex.html not found", expected.getMessage());
        }
    }

    public void testSerialCallablenull182728_failAssert0_literalMutationString182955_failAssert0_literalMutationString184944_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("tiK!&8! V", new com.github.mustachejava.ParallelComplexObject());
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallablenull182728 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testSerialCallablenull182728_failAssert0_literalMutationString182955 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallablenull182728_failAssert0_literalMutationString182955_failAssert0_literalMutationString184944 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template tiK!&8! V not found", expected.getMessage());
        }
    }

    public void testSerialCallablenull182728_failAssert0_literalMutationString182957_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("5nUs2p1:g}9^", new com.github.mustachejava.ParallelComplexObject());
                com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallablenull182728 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testSerialCallablenull182728_failAssert0_literalMutationString182957 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 5nUs2p1:g}9^ not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182717_failAssert0_literalMutationString182905_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("%i$}?m@GVT@ob", new com.github.mustachejava.ParallelComplexObject());
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString182717 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182717_failAssert0_literalMutationString182905 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template %i$}?m@GVT@ob not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182715_failAssert0_literalMutationString182856_failAssert0_literalMutationString184184_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("g#p:[c w6_#,", new com.github.mustachejava.ParallelComplexObject());
                    com.github.mustachejava.TestUtil.getContents(this.root, "");
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString182715 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString182715_failAssert0_literalMutationString182856 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182715_failAssert0_literalMutationString182856_failAssert0_literalMutationString184184 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template g#p:[c w6_#, not found", expected.getMessage());
        }
    }

    public void testSerialCallablenull182728_failAssert0_literalMutationString182958_failAssert0_literalMutationString185315_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("fz5R(]=?ta(", new com.github.mustachejava.ParallelComplexObject());
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallablenull182728 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testSerialCallablenull182728_failAssert0_literalMutationString182958 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallablenull182728_failAssert0_literalMutationString182958_failAssert0_literalMutationString185315 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template fz5R(]=?ta( not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182713_failAssert0_add182992_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("=@rP@=U%(re(", new com.github.mustachejava.ParallelComplexObject());
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString182713 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182713_failAssert0_add182992 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template =@rP@=U%(re( not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182713_failAssert0_add182990_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                execute("=@rP@=U%(re(", new com.github.mustachejava.ParallelComplexObject());
                java.io.StringWriter sw = execute("=@rP@=U%(re(", new com.github.mustachejava.ParallelComplexObject());
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString182713 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182713_failAssert0_add182990 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template =@rP@=U%(re( not found", expected.getMessage());
        }
    }

    public void testSerialCallable_add182724_literalMutationString182816_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            java.io.StringWriter o_testSerialCallable_add182724__1 = execute("complex.html", new com.github.mustachejava.ParallelComplexObject());
            java.io.StringWriter sw = execute(" ]MmsoE@^(`2", new com.github.mustachejava.ParallelComplexObject());
            java.lang.String o_testSerialCallable_add182724__6 = com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSerialCallable_add182724_literalMutationString182816 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template  ]MmsoE@^(`2 not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182721_failAssert0null183074_failAssert0_literalMutationString184416_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("d<?=?&zLc#R ", new com.github.mustachejava.ParallelComplexObject());
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString182721 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString182721_failAssert0null183074 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182721_failAssert0null183074_failAssert0_literalMutationString184416 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template d<?=?&zLc#R  not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182713_failAssert0_literalMutationString182846_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("=@rP@=U%(re(", new com.github.mustachejava.ParallelComplexObject());
                com.github.mustachejava.TestUtil.getContents(this.root, "comple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString182713 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182713_failAssert0_literalMutationString182846 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template =@rP@=U%(re( not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182714_failAssert0_add183019_failAssert0_literalMutationString184862_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("EgM1`Hl!u", new com.github.mustachejava.ParallelComplexObject());
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString182714 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString182714_failAssert0_add183019 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182714_failAssert0_add183019_failAssert0_literalMutationString184862 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template EgM1`Hl!u not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182713_failAssert0_literalMutationString182843_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("=@rP@=U%(re(", new com.github.mustachejava.ParallelComplexObject());
                com.github.mustachejava.TestUtil.getContents(this.root, "");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString182713 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182713_failAssert0_literalMutationString182843 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template =@rP@=U%(re( not found", expected.getMessage());
        }
    }

    public void testSerialCallablenull182728_failAssert0_literalMutationString182957_failAssert0_literalMutationString184029_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("0n|p^g6%s7D<", new com.github.mustachejava.ParallelComplexObject());
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallablenull182728 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testSerialCallablenull182728_failAssert0_literalMutationString182957 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallablenull182728_failAssert0_literalMutationString182957_failAssert0_literalMutationString184029 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 0n|p^g6%s7D< not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182713_failAssert0_add182993_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("=@rP@=U%(re(", new com.github.mustachejava.ParallelComplexObject());
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString182713 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182713_failAssert0_add182993 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template =@rP@=U%(re( not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182717_failAssert0_literalMutationString182905_failAssert0_add186732_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("%i$}?m@GVT@ob", new com.github.mustachejava.ParallelComplexObject());
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString182717 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString182717_failAssert0_literalMutationString182905 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182717_failAssert0_literalMutationString182905_failAssert0_add186732 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template %i$}?m@GVT@ob not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182715_failAssert0_add182995_failAssert0_literalMutationString184776_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("compl kx.html", new com.github.mustachejava.ParallelComplexObject());
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString182715 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString182715_failAssert0_add182995 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182715_failAssert0_add182995_failAssert0_literalMutationString184776 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template compl kx.html not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182719_failAssert0_literalMutationString182878_failAssert0_literalMutationString184125_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("8OZA@z=VQ0`k", new com.github.mustachejava.ParallelComplexObject());
                    com.github.mustachejava.TestUtil.getContents(this.root, "co/plex.tt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString182719 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString182719_failAssert0_literalMutationString182878 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182719_failAssert0_literalMutationString182878_failAssert0_literalMutationString184125 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 8OZA@z=VQ0`k not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182715_failAssert0_add182995_failAssert0_literalMutationString184772_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute(")bX;my Y@x73", new com.github.mustachejava.ParallelComplexObject());
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString182715 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString182715_failAssert0_add182995 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182715_failAssert0_add182995_failAssert0_literalMutationString184772 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template )bX;my Y@x73 not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182713_failAssert0_literalMutationString182842_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("=@rP@=U%(re(", new com.github.mustachejava.ParallelComplexObject());
                com.github.mustachejava.TestUtil.getContents(this.root, "complUex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString182713 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182713_failAssert0_literalMutationString182842 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template =@rP@=U%(re( not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182713_failAssert0_literalMutationString182844_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("=@rP@=U%(re(", new com.github.mustachejava.ParallelComplexObject());
                com.github.mustachejava.TestUtil.getContents(this.root, "co@plex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString182713 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182713_failAssert0_literalMutationString182844 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template =@rP@=U%(re( not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182714_failAssert0_literalMutationString182919_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute(" does not exist", new com.github.mustachejava.ParallelComplexObject());
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString182714 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182714_failAssert0_literalMutationString182919 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182712_add182965() throws com.github.mustachejava.MustacheException, java.io.IOException {
        java.io.StringWriter o_testSerialCallable_literalMutationString182712_add182965__1 = execute("", new com.github.mustachejava.ParallelComplexObject());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testSerialCallable_literalMutationString182712_add182965__1)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testSerialCallable_literalMutationString182712_add182965__1)).toString());
        java.io.StringWriter sw = execute("", new com.github.mustachejava.ParallelComplexObject());
        java.lang.String o_testSerialCallable_literalMutationString182712__4 = com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
        junit.framework.TestCase.assertEquals("<h1>Colors</h1>\n  <ul>\n      <li><strong>red</strong></li>\n      <li><a href=\"#Green\">green</a></li>\n      <li><a href=\"#Blue\">blue</a></li>\n  </ul>\n  <p>The list is not empty.</p>\n", o_testSerialCallable_literalMutationString182712__4);
        sw.toString();
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testSerialCallable_literalMutationString182712_add182965__1)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testSerialCallable_literalMutationString182712_add182965__1)).toString());
        junit.framework.TestCase.assertEquals("<h1>Colors</h1>\n  <ul>\n      <li><strong>red</strong></li>\n      <li><a href=\"#Green\">green</a></li>\n      <li><a href=\"#Blue\">blue</a></li>\n  </ul>\n  <p>The list is not empty.</p>\n", o_testSerialCallable_literalMutationString182712__4);
    }

    public void testSerialCallable_literalMutationString182718_failAssert0_literalMutationString182884_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("c]omplex.html", new com.github.mustachejava.ParallelComplexObject());
                com.github.mustachejava.TestUtil.getContents(this.root, "comp<lex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString182718 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182718_failAssert0_literalMutationString182884 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template c]omplex.html not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182718_failAssert0_literalMutationString182886_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("aSB<y*mCw:&F", new com.github.mustachejava.ParallelComplexObject());
                com.github.mustachejava.TestUtil.getContents(this.root, "comp<lex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString182718 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182718_failAssert0_literalMutationString182886 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template aSB<y*mCw:&F not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182717_failAssert0_literalMutationString182905_failAssert0_literalMutationString185768_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("%i$}?m@GVT@ob", new com.github.mustachejava.ParallelComplexObject());
                    com.github.mustachejava.TestUtil.getContents(this.root, "ku8C##GYr},");
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString182717 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString182717_failAssert0_literalMutationString182905 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182717_failAssert0_literalMutationString182905_failAssert0_literalMutationString185768 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template %i$}?m@GVT@ob not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182713_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            java.io.StringWriter sw = execute("=@rP@=U%(re(", new com.github.mustachejava.ParallelComplexObject());
            com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182713 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template =@rP@=U%(re( not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182713_failAssert0_literalMutationString182841_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("=#rP@=U%(re(", new com.github.mustachejava.ParallelComplexObject());
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString182713 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182713_failAssert0_literalMutationString182841 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template =#rP@=U%(re( not found", expected.getMessage());
        }
    }

    public void testSerialCallablenull182728_failAssert0_literalMutationString182957_failAssert0_add186043_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    java.io.StringWriter sw = execute("5nUs2p1:g}9^", new com.github.mustachejava.ParallelComplexObject());
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallablenull182728 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testSerialCallablenull182728_failAssert0_literalMutationString182957 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallablenull182728_failAssert0_literalMutationString182957_failAssert0_add186043 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 5nUs2p1:g}9^ not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182714_failAssert0_literalMutationString182921_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("5[}$Mr`xS", new com.github.mustachejava.ParallelComplexObject());
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString182714 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182714_failAssert0_literalMutationString182921 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 5[}$Mr`xS not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182713_failAssert0null183056_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("=@rP@=U%(re(", new com.github.mustachejava.ParallelComplexObject());
                com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString182713 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182713_failAssert0null183056 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template =@rP@=U%(re( not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182713_failAssert0_add182991_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("=@rP@=U%(re(", new com.github.mustachejava.ParallelComplexObject());
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                com.github.mustachejava.TestUtil.getContents(this.root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString182713 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182713_failAssert0_add182991 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template =@rP@=U%(re( not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString182720_failAssert0_literalMutationString182865_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                java.io.StringWriter sw = execute("jN BxLu|OpK!", new com.github.mustachejava.ParallelComplexObject());
                com.github.mustachejava.TestUtil.getContents(this.root, "");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString182720 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString182720_failAssert0_literalMutationString182865 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template jN BxLu|OpK! not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200060_failAssert0_add205458_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    variable.substring(1).trim();
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "j", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060_failAssert0_add205458 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber200049_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                @java.lang.Override
                public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                    return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                        @java.lang.Override
                        public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                            if (variable.startsWith("+")) {
                                com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                    @java.lang.Override
                                    public synchronized void init() {
                                        filterText();
                                        partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                        if ((partial) == null) {
                                            throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                        }
                                    }

                                    java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                    @java.lang.Override
                                    public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                        java.io.StringWriter sw = new java.io.StringWriter();
                                        partial.execute(sw, scopes);
                                        com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                        java.io.Writer execute = mustache.execute(writer, scopes);
                                        return appendText(execute);
                                    }
                                });
                            } else {
                                super.partial(tc, variable);
                            }
                        }
                    };
                }
            };
            com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                {
                    put("name", "Chris");
                    put("value", 10000);
                    put("taxed_value", 6000);
                    put("in_ca", true);
                    put("foo", "simple");
                }
            });
            com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200136_failAssert0_add205876_failAssert0_literalMutationString220158_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "xWs9C]");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "page1.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136_failAssert0_add205876 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136_failAssert0_add205876_failAssert0_literalMutationString220158 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template xWs9C].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber200049_failAssert0_literalMutationString202292_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chr/is");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049_failAssert0_literalMutationString202292 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200041_failAssert0_literalMutationString205097_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("E")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041_failAssert0_literalMutationString205097 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200075_failAssert0_literalMutationString204591_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("8", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo]%.html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075_failAssert0_literalMutationString204591 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template simple%.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200059_failAssert0_literalMutationNumber201102_failAssert0_add229225_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "page1.txt", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200059 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200059_failAssert0_literalMutationNumber201102 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200059_failAssert0_literalMutationNumber201102_failAssert0_add229225 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html+ [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200059_failAssert0_literalMutationNumber201102_failAssert0_add229226_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "page1.txt", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200059 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200059_failAssert0_literalMutationNumber201102 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200059_failAssert0_literalMutationNumber201102_failAssert0_add229226 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200060_failAssert0_add205458_failAssert0_literalMutationString216784_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        variable.substring(1).trim();
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "j", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("hXo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060_failAssert0_add205458 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060_failAssert0_add205458_failAssert0_literalMutationString216784 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200136_failAssert0null207063_failAssert0_add230490_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", null);
                            put("foo", "xWs9C]");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136_failAssert0null207063 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136_failAssert0null207063_failAssert0_add230490 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template xWs9C].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber200051_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                @java.lang.Override
                public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                    return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                        @java.lang.Override
                        public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                            if (variable.startsWith("+")) {
                                com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                    @java.lang.Override
                                    public synchronized void init() {
                                        filterText();
                                        partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                        if ((partial) == null) {
                                            throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                        }
                                    }

                                    java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                    @java.lang.Override
                                    public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                        java.io.StringWriter sw = new java.io.StringWriter();
                                        partial.execute(sw, scopes);
                                        com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                        java.io.Writer execute = mustache.execute(writer, scopes);
                                        return appendText(execute);
                                    }
                                });
                            } else {
                                super.partial(tc, variable);
                            }
                        }
                    };
                }
            };
            com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                {
                    put("name", "Chris");
                    put("value", 10000);
                    put("taxed_value", 6000);
                    put("in_ca", true);
                    put("foo", "simple");
                }
            });
            com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200051 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber200050_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                @java.lang.Override
                public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                    return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                        @java.lang.Override
                        public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                            if (variable.startsWith("+")) {
                                com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                    @java.lang.Override
                                    public synchronized void init() {
                                        filterText();
                                        partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                        if ((partial) == null) {
                                            throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                        }
                                    }

                                    java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                    @java.lang.Override
                                    public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                        java.io.StringWriter sw = new java.io.StringWriter();
                                        partial.execute(sw, scopes);
                                        com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                        java.io.Writer execute = mustache.execute(writer, scopes);
                                        return appendText(execute);
                                    }
                                });
                            } else {
                                super.partial(tc, variable);
                            }
                        }
                    };
                }
            };
            com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                {
                    put("name", "Chris");
                    put("value", 10000);
                    put("taxed_value", 6000);
                    put("in_ca", true);
                    put("foo", "simple");
                }
            });
            com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200050 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200060_failAssert0_add205458_failAssert0null236146_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        variable.substring(1).trim();
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "j", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(null, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060_failAssert0_add205458 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060_failAssert0_add205458_failAssert0null236146 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200041_failAssert0_add206163_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("E")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041_failAssert0_add206163 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200059_failAssert0_literalMutationNumber201102_failAssert0null234403_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "page1.txt", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200059 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200059_failAssert0_literalMutationNumber201102 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200059_failAssert0_literalMutationNumber201102_failAssert0null234403 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200136_failAssert0null207063_failAssert0_add230485_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", null);
                            put("foo", "xWs9C]");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136_failAssert0null207063 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136_failAssert0null207063_failAssert0_add230485 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template xWs9C].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200040_failAssert0null206695_failAssert0_add232603_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("page1.txt")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put(null, true);
                            put(null, true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200040 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200040_failAssert0null206695 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200040_failAssert0null206695_failAssert0_add232603 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber200049_failAssert0_literalMutationString202292_failAssert0_add232373_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chr/is");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049_failAssert0_literalMutationString202292 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049_failAssert0_literalMutationString202292_failAssert0_add232373 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200041_failAssert0null207412_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("E")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put(null, "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041_failAssert0null207412 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200041_failAssert0_add206163_failAssert0_add230879_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("E")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041_failAssert0_add206163 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041_failAssert0_add206163_failAssert0_add230879 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200060_failAssert0null206604_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "j", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put(null, 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060_failAssert0null206604 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber200050_failAssert0_add206037_failAssert0_add231669_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200050 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200050_failAssert0_add206037 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200050_failAssert0_add206037_failAssert0_add231669 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple.html+ simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200060_failAssert0null206602_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "j", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put(null, "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060_failAssert0null206602 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200040_failAssert0_literalMutationNumber202511_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("page1.txt")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 0);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200040 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200040_failAssert0_literalMutationNumber202511 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber200050_failAssert0_literalMutationNumber204555_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 0);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200050 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200050_failAssert0_literalMutationNumber204555 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200074_failAssert0_literalMutationString201301_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>1 [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.t,xt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200074 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200074_failAssert0_literalMutationString201301 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 1 [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200074_failAssert0_add205243_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                c.compile(new java.io.StringReader("{{>1 [foo].html}}"), "test.html");
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>1 [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200074 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200074_failAssert0_add205243 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 1 [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200060_failAssert0_add205465_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "j", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            mustache.execute(writer, scopes);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060_failAssert0_add205465 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200040_failAssert0_add205545_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("page1.txt")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200040 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200040_failAssert0_add205545 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200041_failAssert0_add206154_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("E")) {
                                    tc.file();
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041_failAssert0_add206154 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200041_failAssert0_add206163_failAssert0_literalMutationNumber217210_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("E")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 5999);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041_failAssert0_add206163 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041_failAssert0_add206163_failAssert0_literalMutationNumber217210 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200074_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                @java.lang.Override
                public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                    return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                        @java.lang.Override
                        public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                            if (variable.startsWith("+")) {
                                com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                    @java.lang.Override
                                    public synchronized void init() {
                                        filterText();
                                        partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                        if ((partial) == null) {
                                            throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                        }
                                    }

                                    java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                    @java.lang.Override
                                    public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                        java.io.StringWriter sw = new java.io.StringWriter();
                                        partial.execute(sw, scopes);
                                        com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                        java.io.Writer execute = mustache.execute(writer, scopes);
                                        return appendText(execute);
                                    }
                                });
                            } else {
                                super.partial(tc, variable);
                            }
                        }
                    };
                }
            };
            com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>1 [foo].html}}"), "test.html");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                {
                    put("name", "Chris");
                    put("value", 10000);
                    put("taxed_value", 6000);
                    put("in_ca", true);
                    put("foo", "simple");
                }
            });
            com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200074 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 1 [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200075_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                @java.lang.Override
                public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                    return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                        @java.lang.Override
                        public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                            if (variable.startsWith("+")) {
                                com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                    @java.lang.Override
                                    public synchronized void init() {
                                        filterText();
                                        partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                        if ((partial) == null) {
                                            throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                        }
                                    }

                                    java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                    @java.lang.Override
                                    public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                        java.io.StringWriter sw = new java.io.StringWriter();
                                        partial.execute(sw, scopes);
                                        com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                        java.io.Writer execute = mustache.execute(writer, scopes);
                                        return appendText(execute);
                                    }
                                });
                            } else {
                                super.partial(tc, variable);
                            }
                        }
                    };
                }
            };
            com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo]%.html}}"), "test.html");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                {
                    put("name", "Chris");
                    put("value", 10000);
                    put("taxed_value", 6000);
                    put("in_ca", true);
                    put("foo", "simple");
                }
            });
            com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template simple%.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200075_failAssert0_add206069_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo]%.html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075_failAssert0_add206069 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template simple%.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200075_failAssert0_literalMutationString204591_failAssert0_literalMutationNumber222746_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("8", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo]%.html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075_failAssert0_literalMutationString204591 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075_failAssert0_literalMutationString204591_failAssert0_literalMutationNumber222746 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple%.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber200049_failAssert0null206638_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", null);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049_failAssert0null206638 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200130_failAssert0_literalMutationString201840_failAssert0_literalMutationString209609_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "page1.txt", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "page1.txt");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("fioo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200130 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200130_failAssert0_literalMutationString201840 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200130_failAssert0_literalMutationString201840_failAssert0_literalMutationString209609 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber200049_failAssert0null206638_failAssert0_add230169_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        tc.startOfLine();
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", null);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049_failAssert0null206638 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049_failAssert0null206638_failAssert0_add230169 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200136_failAssert0_add205876_failAssert0_add231586_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "xWs9C]");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136_failAssert0_add205876 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136_failAssert0_add205876_failAssert0_add231586 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template xWs9C].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200041_failAssert0_literalMutationBoolean205084_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("E")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", false);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041_failAssert0_literalMutationBoolean205084 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200136_failAssert0null207063_failAssert0_literalMutationString215607_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.Wtml");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", null);
                            put("foo", "xWs9C]");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136_failAssert0null207063 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136_failAssert0null207063_failAssert0_literalMutationString215607 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template xWs9C].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber200050_failAssert0_literalMutationNumber204545_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10001);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200050 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200050_failAssert0_literalMutationNumber204545 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200060_failAssert0_literalMutationString202149_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "]?}BLAq 0_g7cs", "j", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060_failAssert0_literalMutationString202149 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200075_failAssert0null207276_failAssert0_add230056_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), null, "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    c.compile(new java.io.StringReader("{{>+ [foo]%.html}}"), "test.html");
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo]%.html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075_failAssert0null207276 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075_failAssert0null207276_failAssert0_add230056 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template simple%.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber200049_failAssert0_add205479_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    tc.file();
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049_failAssert0_add205479 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200136_failAssert0_add205876_failAssert0_add231593_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "xWs9C]");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136_failAssert0_add205876 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136_failAssert0_add205876_failAssert0_add231593 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template xWs9C].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200136_failAssert0null207063_failAssert0_literalMutationString215621_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chqis");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", null);
                            put("foo", "xWs9C]");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136_failAssert0null207063 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136_failAssert0null207063_failAssert0_literalMutationString215621 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template xWs9C].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200074_failAssert0_add205232_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>1 [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200074 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200074_failAssert0_add205232 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 1 [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber200049_failAssert0_add205501_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049_failAssert0_add205501 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200136_failAssert0_add205876_failAssert0null237090_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "xWs9C]");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136_failAssert0_add205876 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136_failAssert0_add205876_failAssert0null237090 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template xWs9C].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200060_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                @java.lang.Override
                public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                    return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                        @java.lang.Override
                        public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                            if (variable.startsWith("+")) {
                                com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                    @java.lang.Override
                                    public synchronized void init() {
                                        filterText();
                                        partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "j", "]");
                                        if ((partial) == null) {
                                            throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                        }
                                    }

                                    java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                    @java.lang.Override
                                    public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                        java.io.StringWriter sw = new java.io.StringWriter();
                                        partial.execute(sw, scopes);
                                        com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                        java.io.Writer execute = mustache.execute(writer, scopes);
                                        return appendText(execute);
                                    }
                                });
                            } else {
                                super.partial(tc, variable);
                            }
                        }
                    };
                }
            };
            com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                {
                    put("name", "Chris");
                    put("value", 10000);
                    put("taxed_value", 6000);
                    put("in_ca", true);
                    put("foo", "simple");
                }
            });
            com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200136_failAssert0_add205876_failAssert0_literalMutationString220150_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "lWs9C]");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136_failAssert0_add205876 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136_failAssert0_add205876_failAssert0_literalMutationString220150 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template lWs9C].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200136_failAssert0_literalMutationString203792_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].ht5ml}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "xWs9C]");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136_failAssert0_literalMutationString203792 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template xWs9C].ht5ml not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200059_failAssert0_literalMutationNumber201102_failAssert0_literalMutationString210541_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "page1.txt", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("?ZuK", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200059 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200059_failAssert0_literalMutationNumber201102 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200059_failAssert0_literalMutationNumber201102_failAssert0_literalMutationString210541 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200075_failAssert0_literalMutationString204591_failAssert0_add232241_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("8", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo]%.html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075_failAssert0_literalMutationString204591 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075_failAssert0_literalMutationString204591_failAssert0_add232241 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template simple%.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber200051_failAssert0_add205416_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            appendText(execute);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200051 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200051_failAssert0_add205416 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200041_failAssert0_literalMutationString205097_failAssert0_add228722_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("E")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        variable.substring(1);
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041_failAssert0_literalMutationString205097 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041_failAssert0_literalMutationString205097_failAssert0_add228722 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200136_failAssert0null207063_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", null);
                        put("foo", "xWs9C]");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136_failAssert0null207063 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template xWs9C].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200130_failAssert0_literalMutationString201840_failAssert0_add229005_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "page1.txt", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("fioo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200130 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200130_failAssert0_literalMutationString201840 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200130_failAssert0_literalMutationString201840_failAssert0_add229005 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200136_failAssert0_add205876_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "xWs9C]");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136_failAssert0_add205876 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template xWs9C].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200059_failAssert0_literalMutationNumber201102_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "page1.txt", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200059 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200059_failAssert0_literalMutationNumber201102 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200060_failAssert0_add205458_failAssert0_add230762_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        variable.substring(1).trim();
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "j", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060_failAssert0_add205458 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060_failAssert0_add205458_failAssert0_add230762 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200130_failAssert0_literalMutationString201840_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "page1.txt", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("fioo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200130 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200130_failAssert0_literalMutationString201840 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber200050_failAssert0_add206037_failAssert0_literalMutationString220398_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("ZM9.+RmY-K,-rpcibrTT;:9D@ W*/[P,PilQPY?" + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200050 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200050_failAssert0_add206037 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200050_failAssert0_add206037_failAssert0_literalMutationString220398 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple.html+ simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200075_failAssert0null207276_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), null, "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo]%.html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075_failAssert0null207276 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template simple%.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200075_failAssert0null207275_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo]%.html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075_failAssert0null207275 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template simple%.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200060_failAssert0_add205458_failAssert0_add230772_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        variable.substring(1).trim();
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "j", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060_failAssert0_add205458 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060_failAssert0_add205458_failAssert0_add230772 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber200050_failAssert0_add206037_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200050 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200050_failAssert0_add206037 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple.html+ simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200136_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                @java.lang.Override
                public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                    return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                        @java.lang.Override
                        public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                            if (variable.startsWith("+")) {
                                com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                    @java.lang.Override
                                    public synchronized void init() {
                                        filterText();
                                        partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                        if ((partial) == null) {
                                            throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                        }
                                    }

                                    java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                    @java.lang.Override
                                    public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                        java.io.StringWriter sw = new java.io.StringWriter();
                                        partial.execute(sw, scopes);
                                        com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                        java.io.Writer execute = mustache.execute(writer, scopes);
                                        return appendText(execute);
                                    }
                                });
                            } else {
                                super.partial(tc, variable);
                            }
                        }
                    };
                }
            };
            com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                {
                    put("name", "Chris");
                    put("value", 10000);
                    put("taxed_value", 6000);
                    put("in_ca", true);
                    put("foo", "xWs9C]");
                }
            });
            com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template xWs9C].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200040_failAssert0null206695_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("page1.txt")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put(null, true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200040 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200040_failAssert0null206695 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber200049_failAssert0_literalMutationString202292_failAssert0null237973_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(null, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chr/is");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049_failAssert0_literalMutationString202292 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049_failAssert0_literalMutationString202292_failAssert0null237973 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber200049_failAssert0_literalMutationString202240_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049_failAssert0_literalMutationString202240 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber200049_failAssert0_literalMutationString202292_failAssert0_literalMutationString223300_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chr/Ais");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049_failAssert0_literalMutationString202292 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049_failAssert0_literalMutationString202292_failAssert0_literalMutationString223300 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200061_failAssert0_literalMutationString204710_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "page1.txt", "");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200061 should have thrown StringIndexOutOfBoundsException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200061_failAssert0_literalMutationString204710 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200074_failAssert0null206341_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>1 [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put(null, "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200074 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200074_failAssert0null206341 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 1 [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200040_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                @java.lang.Override
                public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                    return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                        @java.lang.Override
                        public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                            if (variable.startsWith("page1.txt")) {
                                com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                    @java.lang.Override
                                    public synchronized void init() {
                                        filterText();
                                        partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                        if ((partial) == null) {
                                            throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                        }
                                    }

                                    java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                    @java.lang.Override
                                    public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                        java.io.StringWriter sw = new java.io.StringWriter();
                                        partial.execute(sw, scopes);
                                        com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                        java.io.Writer execute = mustache.execute(writer, scopes);
                                        return appendText(execute);
                                    }
                                });
                            } else {
                                super.partial(tc, variable);
                            }
                        }
                    };
                }
            };
            com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                {
                    put("name", "Chris");
                    put("value", 10000);
                    put("taxed_value", 6000);
                    put("in_ca", true);
                    put("foo", "simple");
                }
            });
            com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200040 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200041_failAssert0_add206163_failAssert0null236268_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("E")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", null);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041_failAssert0_add206163 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041_failAssert0_add206163_failAssert0null236268 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200074_failAssert0null206328_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>1 [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200074 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200074_failAssert0null206328 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 1 [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber200051_failAssert0null206551_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", null);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200051 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200051_failAssert0null206551 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200075_failAssert0null207275_failAssert0_literalMutationString225128_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo]%.html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("va&lue", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075_failAssert0null207275 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075_failAssert0null207275_failAssert0_literalMutationString225128 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template simple%.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber200049_failAssert0null206627_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(null, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049_failAssert0null206627 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200130_failAssert0_literalMutationString201840_failAssert0_literalMutationString209617_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "page1.txt", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("nVame", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("fioo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200130 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200130_failAssert0_literalMutationString201840 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200130_failAssert0_literalMutationString201840_failAssert0_literalMutationString209617 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200130_failAssert0_literalMutationString201840_failAssert0null234163_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "page1.txt", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put(null, 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("fioo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200130 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200130_failAssert0_literalMutationString201840 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200130_failAssert0_literalMutationString201840_failAssert0null234163 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200075_failAssert0null207275_failAssert0_add232829_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo]%.html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075_failAssert0null207275 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075_failAssert0null207275_failAssert0_add232829 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template simple%.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200040_failAssert0null206695_failAssert0_literalMutationString224186_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("page1.txt")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put(null, true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200040 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200040_failAssert0null206695 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200040_failAssert0null206695_failAssert0_literalMutationString224186 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200041_failAssert0_literalMutationString205097_failAssert0_literalMutationString208518_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("E")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("inL_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041_failAssert0_literalMutationString205097 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041_failAssert0_literalMutationString205097_failAssert0_literalMutationString208518 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200130_failAssert0_literalMutationString201840_failAssert0null234167_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "page1.txt", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put(null, true);
                            put("fioo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200130 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200130_failAssert0_literalMutationString201840 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200130_failAssert0_literalMutationString201840_failAssert0null234167 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200136_failAssert0null207063_failAssert0null235832_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put(null, 6000);
                            put("in_ca", null);
                            put("foo", "xWs9C]");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136_failAssert0null207063 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200136_failAssert0null207063_failAssert0null235832 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template xWs9C].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200040_failAssert0_literalMutationString202506_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("page1.txt")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("page1.txt", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200040 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200040_failAssert0_literalMutationString202506 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200074_failAssert0_literalMutationString201236_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>1 [foo].html}}"), "");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200074 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200074_failAssert0_literalMutationString201236 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template 1 [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200075_failAssert0_add206064_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            sw.toString();
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo]%.html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075_failAssert0_add206064 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template simple%.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200059_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                @java.lang.Override
                public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                    return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                        @java.lang.Override
                        public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                            if (variable.startsWith("+")) {
                                com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                    @java.lang.Override
                                    public synchronized void init() {
                                        filterText();
                                        partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "page1.txt", "]");
                                        if ((partial) == null) {
                                            throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                        }
                                    }

                                    java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                    @java.lang.Override
                                    public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                        java.io.StringWriter sw = new java.io.StringWriter();
                                        partial.execute(sw, scopes);
                                        com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                        java.io.Writer execute = mustache.execute(writer, scopes);
                                        return appendText(execute);
                                    }
                                });
                            } else {
                                super.partial(tc, variable);
                            }
                        }
                    };
                }
            };
            com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                {
                    put("name", "Chris");
                    put("value", 10000);
                    put("taxed_value", 6000);
                    put("in_ca", true);
                    put("foo", "simple");
                }
            });
            com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200059 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200075_failAssert0null207276_failAssert0_literalMutationString213854_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), null, "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo]%.html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075_failAssert0null207276 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075_failAssert0null207276_failAssert0_literalMutationString213854 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template simple%.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200040_failAssert0_add205538_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("page1.txt")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200040 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200040_failAssert0_add205538 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200075_failAssert0null207276_failAssert0null235354_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), null, "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo]%.html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put(null, 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075_failAssert0null207276 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075_failAssert0null207276_failAssert0null235354 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template simple%.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber200049_failAssert0_literalMutationString202285_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("n ame", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200049_failAssert0_literalMutationString202285 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200071_failAssert0_add205257_failAssert0_literalMutationNumber216574_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].hml}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200071 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200071_failAssert0_add205257 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200071_failAssert0_add205257_failAssert0_literalMutationNumber216574 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple.hml not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200075_failAssert0_literalMutationNumber204597_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo]%.html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075_failAssert0_literalMutationNumber204597 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple%.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200059_failAssert0_literalMutationNumber201102_failAssert0_literalMutationString210581_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "page1.txt", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("page1.txt", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200059 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200059_failAssert0_literalMutationNumber201102 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200059_failAssert0_literalMutationNumber201102_failAssert0_literalMutationString210581 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200041_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                @java.lang.Override
                public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                    return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                        @java.lang.Override
                        public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                            if (variable.startsWith("E")) {
                                com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                    @java.lang.Override
                                    public synchronized void init() {
                                        filterText();
                                        partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                        if ((partial) == null) {
                                            throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                        }
                                    }

                                    java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                    @java.lang.Override
                                    public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                        java.io.StringWriter sw = new java.io.StringWriter();
                                        partial.execute(sw, scopes);
                                        com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                        java.io.Writer execute = mustache.execute(writer, scopes);
                                        return appendText(execute);
                                    }
                                });
                            } else {
                                super.partial(tc, variable);
                            }
                        }
                    };
                }
            };
            com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                {
                    put("name", "Chris");
                    put("value", 10000);
                    put("taxed_value", 6000);
                    put("in_ca", true);
                    put("foo", "simple");
                }
            });
            com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200130_failAssert0_literalMutationString201840_failAssert0_add229011_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "page1.txt", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("in_ca", true);
                            put("fioo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200130 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200130_failAssert0_literalMutationString201840 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200130_failAssert0_literalMutationString201840_failAssert0_add229011 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200059_failAssert0null206299_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "page1.txt", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200059 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200059_failAssert0null206299 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200059_failAssert0_add205213_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "page1.txt", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200059 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200059_failAssert0_add205213 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200041_failAssert0_literalMutationString205097_failAssert0null233853_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("E")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", null);
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041_failAssert0_literalMutationString205097 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200041_failAssert0_literalMutationString205097_failAssert0null233853 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200060_failAssert0_literalMutationNumber202195_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "j", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 0);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060_failAssert0_literalMutationNumber202195 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200040_failAssert0null206688_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("page1.txt")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(null, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200040 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200040_failAssert0null206688 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200060_failAssert0_add205458_failAssert0_literalMutationString216793_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        variable.substring(1).trim();
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "j", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple..xt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060_failAssert0_add205458 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200060_failAssert0_add205458_failAssert0_literalMutationString216793 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString200075_failAssert0null207275_failAssert0null238479_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                        @java.lang.Override
                        public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                            return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                                @java.lang.Override
                                public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                    if (variable.startsWith("+")) {
                                        com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @java.lang.Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new java.io.StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                            @java.lang.Override
                                            public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                                java.io.StringWriter sw = new java.io.StringWriter();
                                                partial.execute(sw, scopes);
                                                com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                java.io.Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo]%.html}}"), "test.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                        {
                            put("name", "Chris");
                            put(null, 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075_failAssert0null207275 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString200075_failAssert0null207275_failAssert0null238479 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template simple%.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber200051_failAssert0_literalMutationString201943_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = new com.github.mustachejava.DefaultMustacheFactory(this.root) {
                    @java.lang.Override
                    public com.github.mustachejava.MustacheVisitor createMustacheVisitor() {
                        return new com.github.mustachejava.DefaultMustacheVisitor(this) {
                            @java.lang.Override
                            public void partial(com.github.mustachejava.TemplateContext tc, java.lang.String variable) {
                                if (variable.startsWith("+")) {
                                    com.github.mustachejava.TemplateContext partialTC = new com.github.mustachejava.TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new com.github.mustachejava.codes.PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @java.lang.Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new java.io.StringReader(name), "__dyn artial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new com.github.mustachejava.MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        java.util.concurrent.ConcurrentMap<java.lang.String, com.github.mustachejava.Mustache> dynamicaPartialCache = new java.util.concurrent.ConcurrentHashMap<>();

                                        @java.lang.Override
                                        public java.io.Writer execute(java.io.Writer writer, java.util.List<java.lang.Object> scopes) {
                                            java.io.StringWriter sw = new java.io.StringWriter();
                                            partial.execute(sw, scopes);
                                            com.github.mustachejava.Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            java.io.Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                com.github.mustachejava.Mustache m = c.compile(new java.io.StringReader("{{>+ [foo].html}}"), "test.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, new java.util.HashMap<java.lang.String, java.lang.Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                com.github.mustachejava.TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200051 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber200051_failAssert0_literalMutationString201943 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65418_failAssert0_literalMutationString65722_failAssert0_literalMutationString67123_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("ite`s.tml");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, "page1.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testReadme_literalMutationString65418 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadme_literalMutationString65418_failAssert0_literalMutationString65722 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65418_failAssert0_literalMutationString65722_failAssert0_literalMutationString67123 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ite`s.tml not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65422_failAssert0_literalMutationString65727_failAssert0_add69282_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("`tems.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    java.lang.System.currentTimeMillis();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, "Jtems.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testReadme_literalMutationString65422 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testReadme_literalMutationString65422_failAssert0_literalMutationString65727 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65422_failAssert0_literalMutationString65727_failAssert0_add69282 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template `tems.html not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65423_failAssert0_add66021_failAssert0_literalMutationString68029_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    createMustacheFactory();
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("-QG6Fgzl) ");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, "items.tt");
                    sw.toString();
                    junit.framework.TestCase.fail("testReadme_literalMutationString65423 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testReadme_literalMutationString65423_failAssert0_add66021 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65423_failAssert0_add66021_failAssert0_literalMutationString68029 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template -QG6Fgzl)  not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65416_failAssert0_literalMutationString65622_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("?dmHE&@9.G");
                java.io.StringWriter sw = new java.io.StringWriter();
                long start = java.lang.System.currentTimeMillis();
                m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                long diff = (java.lang.System.currentTimeMillis()) - start;
                com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_literalMutationString65416 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65416_failAssert0_literalMutationString65622 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ?dmHE&@9.G not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65418_failAssert0_literalMutationString65722_failAssert0_add69220_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("ite`s.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, "page1.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testReadme_literalMutationString65418 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadme_literalMutationString65418_failAssert0_literalMutationString65722 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65418_failAssert0_literalMutationString65722_failAssert0_add69220 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ite`s.html not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65422_failAssert0_literalMutationString65731_failAssert0_add69276_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("{wcil|G0y@");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                    java.lang.System.currentTimeMillis();
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, "Jtems.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testReadme_literalMutationString65422 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testReadme_literalMutationString65422_failAssert0_literalMutationString65731 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65422_failAssert0_literalMutationString65731_failAssert0_add69276 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template {wcil|G0y@ not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65422_failAssert0_literalMutationString65731_failAssert0_add69274_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("{wcil|G0y@");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    java.lang.System.currentTimeMillis();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, "Jtems.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testReadme_literalMutationString65422 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testReadme_literalMutationString65422_failAssert0_literalMutationString65731 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65422_failAssert0_literalMutationString65731_failAssert0_add69274 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template {wcil|G0y@ not found", expected.getMessage());
        }
    }

    public void testReadme_add65426_remove66078_literalMutationString66797_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.DefaultMustacheFactory o_testReadme_add65426__1 = createMustacheFactory();
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache m = c.compile("items.h[tml");
            java.io.StringWriter sw = new java.io.StringWriter();
            long start = java.lang.System.currentTimeMillis();
            java.io.Writer o_testReadme_add65426__10 = m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
            long diff = (java.lang.System.currentTimeMillis()) - start;
            java.lang.String o_testReadme_add65426__14 = com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
            junit.framework.TestCase.fail("testReadme_add65426_remove66078_literalMutationString66797 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template items.h[tml not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65418_failAssert0_literalMutationString65722_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("ite`s.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                long start = java.lang.System.currentTimeMillis();
                m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                long diff = (java.lang.System.currentTimeMillis()) - start;
                com.github.mustachejava.TestUtil.getContents(this.root, "page1.txt");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_literalMutationString65418 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65418_failAssert0_literalMutationString65722 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ite`s.html not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65418_failAssert0_add66039_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("ite`s.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.lang.System.currentTimeMillis();
                long start = java.lang.System.currentTimeMillis();
                m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                long diff = (java.lang.System.currentTimeMillis()) - start;
                com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_literalMutationString65418 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65418_failAssert0_add66039 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ite`s.html not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65423_failAssert0_add66022_failAssert0_literalMutationString68583_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    c.compile("items.html");
                    com.github.mustachejava.Mustache m = c.compile("items.>html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, "items.tt");
                    sw.toString();
                    junit.framework.TestCase.fail("testReadme_literalMutationString65423 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testReadme_literalMutationString65423_failAssert0_add66022 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65423_failAssert0_add66022_failAssert0_literalMutationString68583 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template items.>html not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65424_failAssert0_add66003_failAssert0_literalMutationString68003_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("r<vAZ0wgSF");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, "page1.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testReadme_literalMutationString65424 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testReadme_literalMutationString65424_failAssert0_add66003 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65424_failAssert0_add66003_failAssert0_literalMutationString68003 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template r<vAZ0wgSF not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65418_failAssert0_literalMutationString65720_failAssert0_literalMutationString68232_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("ite`s.hDml");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, "");
                    sw.toString();
                    junit.framework.TestCase.fail("testReadme_literalMutationString65418 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadme_literalMutationString65418_failAssert0_literalMutationString65720 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65418_failAssert0_literalMutationString65720_failAssert0_literalMutationString68232 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ite`s.hDml not found", expected.getMessage());
        }
    }

    public void testReadmenull65435_failAssert0_add66060_failAssert0_literalMutationString68151_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("fK*0K]--Du");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(null, new com.github.mustachejava.AmplInterpreterTest.Context());
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testReadmenull65435 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testReadmenull65435_failAssert0_add66060 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testReadmenull65435_failAssert0_add66060_failAssert0_literalMutationString68151 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template fK*0K]--Du not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65418_failAssert0_literalMutationString65720_failAssert0_add70141_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("ite`s.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    java.lang.System.currentTimeMillis();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, "");
                    sw.toString();
                    junit.framework.TestCase.fail("testReadme_literalMutationString65418 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadme_literalMutationString65418_failAssert0_literalMutationString65720 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65418_failAssert0_literalMutationString65720_failAssert0_add70141 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ite`s.html not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65414() throws com.github.mustachejava.MustacheException, java.io.IOException {
        com.github.mustachejava.MustacheFactory c = createMustacheFactory();
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        com.github.mustachejava.Mustache m = c.compile("");
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        java.io.StringWriter sw = new java.io.StringWriter();
        long start = java.lang.System.currentTimeMillis();
        java.io.Writer o_testReadme_literalMutationString65414__9 = m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testReadme_literalMutationString65414__9)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testReadme_literalMutationString65414__9)).toString());
        long diff = (java.lang.System.currentTimeMillis()) - start;
        java.lang.String o_testReadme_literalMutationString65414__13 = com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadme_literalMutationString65414__13);
        sw.toString();
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testReadme_literalMutationString65414__9)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testReadme_literalMutationString65414__9)).toString());
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadme_literalMutationString65414__13);
    }

    public void testReadme_literalMutationString65418_failAssert0_add66041_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("ite`s.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                long start = java.lang.System.currentTimeMillis();
                m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                java.lang.System.currentTimeMillis();
                long diff = (java.lang.System.currentTimeMillis()) - start;
                com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_literalMutationString65418 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65418_failAssert0_add66041 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ite`s.html not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65418_failAssert0_literalMutationString65722_failAssert0_add69221_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("ite`s.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, "page1.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testReadme_literalMutationString65418 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadme_literalMutationString65418_failAssert0_literalMutationString65722 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65418_failAssert0_literalMutationString65722_failAssert0_add69221 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ite`s.html not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65422_failAssert0_literalMutationString65731_failAssert0null70641_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("{wcil|G0y@");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testReadme_literalMutationString65422 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testReadme_literalMutationString65422_failAssert0_literalMutationString65731 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65422_failAssert0_literalMutationString65731_failAssert0null70641 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template {wcil|G0y@ not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65422_failAssert0_literalMutationString65731_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("{wcil|G0y@");
                java.io.StringWriter sw = new java.io.StringWriter();
                long start = java.lang.System.currentTimeMillis();
                m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                long diff = (java.lang.System.currentTimeMillis()) - start;
                com.github.mustachejava.TestUtil.getContents(this.root, "Jtems.txt");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_literalMutationString65422 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65422_failAssert0_literalMutationString65731 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template {wcil|G0y@ not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65422_failAssert0_literalMutationString65727_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("`tems.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                long start = java.lang.System.currentTimeMillis();
                m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                long diff = (java.lang.System.currentTimeMillis()) - start;
                com.github.mustachejava.TestUtil.getContents(this.root, "Jtems.txt");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_literalMutationString65422 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65422_failAssert0_literalMutationString65727 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template `tems.html not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65424_failAssert0_literalMutationString65661_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("Q>qz;W|w0h");
                java.io.StringWriter sw = new java.io.StringWriter();
                long start = java.lang.System.currentTimeMillis();
                m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                long diff = (java.lang.System.currentTimeMillis()) - start;
                com.github.mustachejava.TestUtil.getContents(this.root, "page1.txt");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_literalMutationString65424 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65424_failAssert0_literalMutationString65661 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template Q>qz;W|w0h not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65418_failAssert0_literalMutationString65722_failAssert0null70620_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("ite`s.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testReadme_literalMutationString65418 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadme_literalMutationString65418_failAssert0_literalMutationString65722 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65418_failAssert0_literalMutationString65722_failAssert0null70620 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ite`s.html not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65418_failAssert0null66146_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("ite`s.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                long start = java.lang.System.currentTimeMillis();
                m.execute(null, new com.github.mustachejava.AmplInterpreterTest.Context());
                long diff = (java.lang.System.currentTimeMillis()) - start;
                com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_literalMutationString65418 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65418_failAssert0null66146 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ite`s.html not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65418_failAssert0_add66039_failAssert0_add69904_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("ite`s.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    java.lang.System.currentTimeMillis();
                    java.lang.System.currentTimeMillis();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testReadme_literalMutationString65418 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadme_literalMutationString65418_failAssert0_add66039 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65418_failAssert0_add66039_failAssert0_add69904 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ite`s.html not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65422_failAssert0_literalMutationString65727_failAssert0null70643_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("`tems.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(null, new com.github.mustachejava.AmplInterpreterTest.Context());
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, "Jtems.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testReadme_literalMutationString65422 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testReadme_literalMutationString65422_failAssert0_literalMutationString65727 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65422_failAssert0_literalMutationString65727_failAssert0null70643 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template `tems.html not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65418_failAssert0_literalMutationString65720_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("ite`s.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                long start = java.lang.System.currentTimeMillis();
                m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                long diff = (java.lang.System.currentTimeMillis()) - start;
                com.github.mustachejava.TestUtil.getContents(this.root, "");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_literalMutationString65418 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65418_failAssert0_literalMutationString65720 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ite`s.html not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65418_failAssert0_literalMutationString65718_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("L|L|N!<CJ!");
                java.io.StringWriter sw = new java.io.StringWriter();
                long start = java.lang.System.currentTimeMillis();
                m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                long diff = (java.lang.System.currentTimeMillis()) - start;
                com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_literalMutationString65418 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65418_failAssert0_literalMutationString65718 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template L|L|N!<CJ! not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65418_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = createMustacheFactory();
            com.github.mustachejava.Mustache m = c.compile("ite`s.html");
            java.io.StringWriter sw = new java.io.StringWriter();
            long start = java.lang.System.currentTimeMillis();
            m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
            long diff = (java.lang.System.currentTimeMillis()) - start;
            com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
            sw.toString();
            junit.framework.TestCase.fail("testReadme_literalMutationString65418 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ite`s.html not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65418_failAssert0_add66040_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("ite`s.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                long start = java.lang.System.currentTimeMillis();
                m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                long diff = (java.lang.System.currentTimeMillis()) - start;
                com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_literalMutationString65418 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65418_failAssert0_add66040 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ite`s.html not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65422_failAssert0_literalMutationString65731_failAssert0_literalMutationString67206_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("{wcil|G0y@");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, "Jtrms.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testReadme_literalMutationString65422 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testReadme_literalMutationString65422_failAssert0_literalMutationString65731 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65422_failAssert0_literalMutationString65731_failAssert0_literalMutationString67206 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template {wcil|G0y@ not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65422_failAssert0_literalMutationString65731_failAssert0_literalMutationString67202_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile("Xwcil|G0y@");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, "Jtems.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testReadme_literalMutationString65422 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testReadme_literalMutationString65422_failAssert0_literalMutationString65731 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65422_failAssert0_literalMutationString65731_failAssert0_literalMutationString67202 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template Xwcil|G0y@ not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65415_failAssert0_literalMutationString65708_failAssert0_literalMutationString68220_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile(" does not exist");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, "");
                    sw.toString();
                    junit.framework.TestCase.fail("testReadme_literalMutationString65415 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadme_literalMutationString65415_failAssert0_literalMutationString65708 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65415_failAssert0_literalMutationString65708_failAssert0_literalMutationString68220 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65418_failAssert0null66147_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("ite`s.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                long start = java.lang.System.currentTimeMillis();
                m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                long diff = (java.lang.System.currentTimeMillis()) - start;
                com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testReadme_literalMutationString65418 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65418_failAssert0null66147 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ite`s.html not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65417_failAssert0_literalMutationString65646_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache m = c.compile("Xu{L&Ddy8");
                java.io.StringWriter sw = new java.io.StringWriter();
                long start = java.lang.System.currentTimeMillis();
                m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                long diff = (java.lang.System.currentTimeMillis()) - start;
                com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_literalMutationString65417 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65417_failAssert0_literalMutationString65646 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template Xu{L&Ddy8 not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65425_failAssert0null66126_failAssert0_literalMutationString68400_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile(")q+Jy$I<n;");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testReadme_literalMutationString65425 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testReadme_literalMutationString65425_failAssert0null66126 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65425_failAssert0null66126_failAssert0_literalMutationString68400 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template )q+Jy$I<n; not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString10748_failAssert0_literalMutationNumber11170_failAssert0_literalMutationString14004_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                    com.github.mustachejava.Mustache m = c.compile(">9zqp8hBc(*");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, "C<h5xC7Jo");
                    sw.toString();
                    java.lang.String String_15 = "Should be a little bit more than 4 seconds: " + diff;
                    boolean boolean_16 = (diff > 0) && (diff < 6000);
                    junit.framework.TestCase.fail("testReadmeSerial_literalMutationString10748 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString10748_failAssert0_literalMutationNumber11170 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString10748_failAssert0_literalMutationNumber11170_failAssert0_literalMutationString14004 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template >9zqp8hBc(* not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString10739_add11447() throws com.github.mustachejava.MustacheException, java.io.IOException {
        com.github.mustachejava.MustacheFactory c = createMustacheFactory();
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        com.github.mustachejava.Mustache m = c.compile("");
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        java.io.StringWriter sw = new java.io.StringWriter();
        long start = java.lang.System.currentTimeMillis();
        java.io.Writer o_testReadmeSerial_literalMutationString10739_add11447__9 = m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testReadmeSerial_literalMutationString10739_add11447__9)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testReadmeSerial_literalMutationString10739_add11447__9)).toString());
        java.io.Writer o_testReadmeSerial_literalMutationString10739__9 = m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
        long diff = (java.lang.System.currentTimeMillis()) - start;
        java.lang.String o_testReadmeSerial_literalMutationString10739__13 = com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeSerial_literalMutationString10739__13);
        sw.toString();
        java.lang.String String_5 = "Should be a little bit more than 4 seconds: " + diff;
        boolean boolean_6 = (diff > 3999) && (diff < 6000);
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\nbox.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testReadmeSerial_literalMutationString10739_add11447__9)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\nbox.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testReadmeSerial_literalMutationString10739_add11447__9)).toString());
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeSerial_literalMutationString10739__13);
    }

    public void testReadmeSerial_add10754_add11534_literalMutationNumber13130() throws com.github.mustachejava.MustacheException, java.io.IOException {
        com.github.mustachejava.MustacheFactory c = createMustacheFactory();
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        com.github.mustachejava.Mustache m = c.compile("items2.html");
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("items2.html", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        java.io.StringWriter sw = new java.io.StringWriter();
        long start = java.lang.System.currentTimeMillis();
        java.io.Writer o_testReadmeSerial_add10754__9 = m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
        java.lang.System.currentTimeMillis();
        long diff = (java.lang.System.currentTimeMillis()) - start;
        java.lang.String o_testReadmeSerial_add10754__14 = com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeSerial_add10754__14);
        sw.toString();
        java.lang.String String_39 = "Should be a little bit more than 4 seconds: " + diff;
        junit.framework.TestCase.assertEquals("Should be a little bit more than 4 seconds: 4001", String_39);
        boolean boolean_40 = (diff > 3999) && (diff < 0);
        ((java.io.StringWriter) (o_testReadmeSerial_add10754__9)).getBuffer().toString();
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("items2.html", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeSerial_add10754__14);
        junit.framework.TestCase.assertEquals("Should be a little bit more than 4 seconds: 4001", String_39);
    }

    public void testReadmeSerial_add10751_literalMutationString10884_failAssert0_literalMutationString16265_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = createMustacheFactory();
                com.github.mustachejava.Mustache o_testReadmeSerial_add10751__3 = c.compile("Q[@??iF+^2y");
                com.github.mustachejava.Mustache m = c.compile("ihtems2.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                long start = java.lang.System.currentTimeMillis();
                java.io.Writer o_testReadmeSerial_add10751__10 = m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
                long diff = (java.lang.System.currentTimeMillis()) - start;
                java.lang.String o_testReadmeSerial_add10751__14 = com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
                sw.toString();
                java.lang.String String_37 = "Should be a little bit more than 4 seconds: " + diff;
                boolean boolean_38 = (diff > 3999) && (diff < 6000);
                junit.framework.TestCase.fail("testReadmeSerial_add10751_literalMutationString10884 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_add10751_literalMutationString10884_failAssert0_literalMutationString16265 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template Q[@??iF+^2y not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_add10754_add11534_add18219() throws com.github.mustachejava.MustacheException, java.io.IOException {
        com.github.mustachejava.MustacheFactory c = createMustacheFactory();
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        com.github.mustachejava.Mustache m = c.compile("items2.html");
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("items2.html", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        java.io.StringWriter sw = new java.io.StringWriter();
        long start = java.lang.System.currentTimeMillis();
        java.io.Writer o_testReadmeSerial_add10754__9 = m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
        java.lang.System.currentTimeMillis();
        long diff = (java.lang.System.currentTimeMillis()) - start;
        java.lang.String o_testReadmeSerial_add10754__14 = com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeSerial_add10754__14);
        sw.toString();
        java.lang.String String_39 = "Should be a little bit more than 4 seconds: " + diff;
        junit.framework.TestCase.assertEquals("Should be a little bit more than 4 seconds: 4001", String_39);
        boolean boolean_40 = (diff > 3999) && (diff < 6000);
        ((java.io.StringWriter) (o_testReadmeSerial_add10754__9)).getBuffer().toString();
        m.getName();
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("items2.html", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeSerial_add10754__14);
        junit.framework.TestCase.assertEquals("Should be a little bit more than 4 seconds: 4001", String_39);
    }

    public void testReadmeSerial_literalMutationString10739() throws com.github.mustachejava.MustacheException, java.io.IOException {
        com.github.mustachejava.MustacheFactory c = createMustacheFactory();
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        com.github.mustachejava.Mustache m = c.compile("");
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        java.io.StringWriter sw = new java.io.StringWriter();
        long start = java.lang.System.currentTimeMillis();
        java.io.Writer o_testReadmeSerial_literalMutationString10739__9 = m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testReadmeSerial_literalMutationString10739__9)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testReadmeSerial_literalMutationString10739__9)).toString());
        long diff = (java.lang.System.currentTimeMillis()) - start;
        java.lang.String o_testReadmeSerial_literalMutationString10739__13 = com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeSerial_literalMutationString10739__13);
        sw.toString();
        java.lang.String String_5 = "Should be a little bit more than 4 seconds: " + diff;
        boolean boolean_6 = (diff > 3999) && (diff < 6000);
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.lang.StringBuffer) (((java.io.StringWriter) (o_testReadmeSerial_literalMutationString10739__9)).getBuffer())).toString());
        junit.framework.TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((java.io.StringWriter) (o_testReadmeSerial_literalMutationString10739__9)).toString());
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeSerial_literalMutationString10739__13);
    }

    public void testReadmeSerial_add10754_literalMutationNumber10927() throws com.github.mustachejava.MustacheException, java.io.IOException {
        com.github.mustachejava.MustacheFactory c = createMustacheFactory();
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        com.github.mustachejava.Mustache m = c.compile("items2.html");
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("items2.html", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        java.io.StringWriter sw = new java.io.StringWriter();
        long start = java.lang.System.currentTimeMillis();
        java.io.Writer o_testReadmeSerial_add10754__9 = m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
        java.lang.System.currentTimeMillis();
        long diff = (java.lang.System.currentTimeMillis()) - start;
        java.lang.String o_testReadmeSerial_add10754__14 = com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeSerial_add10754__14);
        sw.toString();
        java.lang.String String_39 = "Should be a little bit more than 4 seconds: " + diff;
        junit.framework.TestCase.assertEquals("Should be a little bit more than 4 seconds: 4001", String_39);
        boolean boolean_40 = (diff > 0) && (diff < 6000);
        junit.framework.TestCase.assertNull(((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("items2.html", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeSerial_add10754__14);
        junit.framework.TestCase.assertEquals("Should be a little bit more than 4 seconds: 4001", String_39);
    }

    public void testReadmeParallel_literalMutationString465367_failAssert0_literalMutationString465799_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = initParallel();
                com.github.mustachejava.Mustache m = c.compile("E0Ca*}`*oB_");
                java.io.StringWriter sw = new java.io.StringWriter();
                long start = java.lang.System.currentTimeMillis();
                m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context()).close();
                long diff = (java.lang.System.currentTimeMillis()) - start;
                com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
                sw.toString();
                java.lang.String String_127 = "Should be a little bit more than 1 se6cond: " + diff;
                boolean boolean_128 = (diff > 999) && (diff < 2000);
                junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367_failAssert0_literalMutationString465799 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template E0Ca*}`*oB_ not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_literalMutationString465367_failAssert0_literalMutationString465792_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = initParallel();
                com.github.mustachejava.Mustache m = c.compile("E0Ca*}`*oB_");
                java.io.StringWriter sw = new java.io.StringWriter();
                long start = java.lang.System.currentTimeMillis();
                m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context()).close();
                long diff = (java.lang.System.currentTimeMillis()) - start;
                com.github.mustachejava.TestUtil.getContents(this.root, "YjqT!o#0@");
                sw.toString();
                java.lang.String String_127 = "Should be a little bit more than 1 second: " + diff;
                boolean boolean_128 = (diff > 999) && (diff < 2000);
                junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367_failAssert0_literalMutationString465792 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template E0Ca*}`*oB_ not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_add465380_add466199_literalMutationNumber468247() throws com.github.mustachejava.MustacheException, java.io.IOException {
        com.github.mustachejava.MustacheFactory c = initParallel();
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        com.github.mustachejava.Mustache m = c.compile("items2.html");
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("items2.html", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        java.io.StringWriter sw = new java.io.StringWriter();
        java.lang.System.currentTimeMillis();
        long start = java.lang.System.currentTimeMillis();
        m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context()).close();
        long diff = (java.lang.System.currentTimeMillis()) - start;
        java.lang.String o_testReadmeParallel_add465380__15 = com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add465380__15);
        sw.toString();
        java.lang.String String_153 = "Should be a little bit more than 1 second: " + diff;
        junit.framework.TestCase.assertEquals("Should be a little bit more than 1 second: 1001", String_153);
        boolean boolean_154 = (diff > 1000) && (diff < 2000);
        m.getName();
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("items2.html", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add465380__15);
        junit.framework.TestCase.assertEquals("Should be a little bit more than 1 second: 1001", String_153);
    }

    public void testReadmeParallel_add465378null466508_failAssert0_literalMutationString469551_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.DefaultMustacheFactory o_testReadmeParallel_add465378__1 = initParallel();
                com.github.mustachejava.MustacheFactory c = initParallel();
                com.github.mustachejava.Mustache m = c.compile("o[Yn,`DA&EH");
                java.io.StringWriter sw = new java.io.StringWriter();
                long start = java.lang.System.currentTimeMillis();
                m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context()).close();
                long diff = (java.lang.System.currentTimeMillis()) - start;
                java.lang.String o_testReadmeParallel_add465378__15 = com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                java.lang.String String_155 = "Should be a little bit more than 1 second: " + diff;
                boolean boolean_156 = (diff > 999) && (diff < 2000);
                junit.framework.TestCase.fail("testReadmeParallel_add465378null466508 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testReadmeParallel_add465378null466508_failAssert0_literalMutationString469551 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template o[Yn,`DA&EH not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_literalMutationString465367_failAssert0_literalMutationString465799_failAssert0_literalMutationNumber469146_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = initParallel();
                    com.github.mustachejava.Mustache m = c.compile("E0Ca*}`*oB_");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context()).close();
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
                    sw.toString();
                    java.lang.String String_127 = "Should be a little bit more than 1 se6cond: " + diff;
                    boolean boolean_128 = (diff > 999) && (diff < 0);
                    junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367_failAssert0_literalMutationString465799 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367_failAssert0_literalMutationString465799_failAssert0_literalMutationNumber469146 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template E0Ca*}`*oB_ not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_literalMutationString465367_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory c = initParallel();
            com.github.mustachejava.Mustache m = c.compile("E0Ca*}`*oB_");
            java.io.StringWriter sw = new java.io.StringWriter();
            long start = java.lang.System.currentTimeMillis();
            m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context()).close();
            long diff = (java.lang.System.currentTimeMillis()) - start;
            com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
            sw.toString();
            java.lang.String String_127 = "Should be a little bit more than 1 second: " + diff;
            boolean boolean_128 = (diff > 999) && (diff < 2000);
            junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template E0Ca*}`*oB_ not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_literalMutationString465367_failAssert0_literalMutationString465799_failAssert0_add473627_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = initParallel();
                    com.github.mustachejava.Mustache m = c.compile("E0Ca*}`*oB_");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context()).close();
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
                    sw.toString();
                    java.lang.String String_127 = "Should be a little bit more than 1 se6cond: " + diff;
                    boolean boolean_128 = (diff > 999) && (diff < 2000);
                    junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367_failAssert0_literalMutationString465799 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367_failAssert0_literalMutationString465799_failAssert0_add473627 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template E0Ca*}`*oB_ not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_literalMutationString465367_failAssert0_literalMutationString465792_failAssert0_add473612_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = initParallel();
                    com.github.mustachejava.Mustache m = c.compile("E0Ca*}`*oB_");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    java.lang.System.currentTimeMillis();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context()).close();
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, "YjqT!o#0@");
                    sw.toString();
                    java.lang.String String_127 = "Should be a little bit more than 1 second: " + diff;
                    boolean boolean_128 = (diff > 999) && (diff < 2000);
                    junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367_failAssert0_literalMutationString465792 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367_failAssert0_literalMutationString465792_failAssert0_add473612 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template E0Ca*}`*oB_ not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_add465382_add466270() throws com.github.mustachejava.MustacheException, java.io.IOException {
        com.github.mustachejava.MustacheFactory c = initParallel();
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        com.github.mustachejava.Mustache m = c.compile("items2.html");
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("items2.html", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        java.io.StringWriter sw = new java.io.StringWriter();
        long start = java.lang.System.currentTimeMillis();
        m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
        m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context()).close();
        long diff = (java.lang.System.currentTimeMillis()) - start;
        java.lang.String o_testReadmeParallel_add465382_add466270__16 = com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add465382_add466270__16);
        java.lang.String o_testReadmeParallel_add465382__16 = com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add465382__16);
        sw.toString();
        java.lang.String String_161 = "Should be a little bit more than 1 second: " + diff;
        junit.framework.TestCase.assertEquals("Should be a little bit more than 1 second: 1002", String_161);
        boolean boolean_162 = (diff > 999) && (diff < 2000);
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("items2.html", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add465382_add466270__16);
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add465382__16);
        junit.framework.TestCase.assertEquals("Should be a little bit more than 1 second: 1002", String_161);
    }

    public void testReadmeParallel_add465382_add466264() throws com.github.mustachejava.MustacheException, java.io.IOException {
        com.github.mustachejava.MustacheFactory c = initParallel();
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        com.github.mustachejava.Mustache m = c.compile("items2.html");
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("items2.html", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        m.getName();
        java.io.StringWriter sw = new java.io.StringWriter();
        long start = java.lang.System.currentTimeMillis();
        m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context());
        m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context()).close();
        long diff = (java.lang.System.currentTimeMillis()) - start;
        java.lang.String o_testReadmeParallel_add465382__16 = com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add465382__16);
        sw.toString();
        java.lang.String String_161 = "Should be a little bit more than 1 second: " + diff;
        junit.framework.TestCase.assertEquals("Should be a little bit more than 1 second: 1002", String_161);
        boolean boolean_162 = (diff > 999) && (diff < 2000);
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("items2.html", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add465382__16);
        junit.framework.TestCase.assertEquals("Should be a little bit more than 1 second: 1002", String_161);
    }

    public void testReadmeParallel_literalMutationString465367_failAssert0_literalMutationString465799_failAssert0null475014_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = initParallel();
                    com.github.mustachejava.Mustache m = c.compile("E0Ca*}`*oB_");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(null, new com.github.mustachejava.AmplInterpreterTest.Context()).close();
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
                    sw.toString();
                    java.lang.String String_127 = "Should be a little bit more than 1 se6cond: " + diff;
                    boolean boolean_128 = (diff > 999) && (diff < 2000);
                    junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367_failAssert0_literalMutationString465799 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367_failAssert0_literalMutationString465799_failAssert0null475014 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template E0Ca*}`*oB_ not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_literalMutationString465367_failAssert0null466534_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = initParallel();
                com.github.mustachejava.Mustache m = c.compile("E0Ca*}`*oB_");
                java.io.StringWriter sw = new java.io.StringWriter();
                long start = java.lang.System.currentTimeMillis();
                m.execute(null, new com.github.mustachejava.AmplInterpreterTest.Context()).close();
                long diff = (java.lang.System.currentTimeMillis()) - start;
                com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
                sw.toString();
                java.lang.String String_127 = "Should be a little bit more than 1 second: " + diff;
                boolean boolean_128 = (diff > 999) && (diff < 2000);
                junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367_failAssert0null466534 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template E0Ca*}`*oB_ not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_add465380_literalMutationString465519() throws com.github.mustachejava.MustacheException, java.io.IOException {
        com.github.mustachejava.MustacheFactory c = initParallel();
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        com.github.mustachejava.Mustache m = c.compile("items2.html");
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("items2.html", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        java.io.StringWriter sw = new java.io.StringWriter();
        java.lang.System.currentTimeMillis();
        long start = java.lang.System.currentTimeMillis();
        m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context()).close();
        long diff = (java.lang.System.currentTimeMillis()) - start;
        java.lang.String o_testReadmeParallel_add465380__15 = com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add465380__15);
        sw.toString();
        java.lang.String String_153 = "page1.txt" + diff;
        junit.framework.TestCase.assertEquals("page1.txt1001", String_153);
        boolean boolean_154 = (diff > 999) && (diff < 2000);
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("items2.html", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add465380__15);
        junit.framework.TestCase.assertEquals("page1.txt1001", String_153);
    }

    public void testReadmeParallel_literalMutationString465367_failAssert0_add466368_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                initParallel();
                com.github.mustachejava.MustacheFactory c = initParallel();
                com.github.mustachejava.Mustache m = c.compile("E0Ca*}`*oB_");
                java.io.StringWriter sw = new java.io.StringWriter();
                long start = java.lang.System.currentTimeMillis();
                m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context()).close();
                long diff = (java.lang.System.currentTimeMillis()) - start;
                com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
                sw.toString();
                java.lang.String String_127 = "Should be a little bit more than 1 second: " + diff;
                boolean boolean_128 = (diff > 999) && (diff < 2000);
                junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367_failAssert0_add466368 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template E0Ca*}`*oB_ not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_literalMutationString465367_failAssert0_literalMutationString465792_failAssert0null475012_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = initParallel();
                    com.github.mustachejava.Mustache m = c.compile("E0Ca*}`*oB_");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context()).close();
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    java.lang.String String_127 = "Should be a little bit more than 1 second: " + diff;
                    boolean boolean_128 = (diff > 999) && (diff < 2000);
                    junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367_failAssert0_literalMutationString465792 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367_failAssert0_literalMutationString465792_failAssert0null475012 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template E0Ca*}`*oB_ not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_add465381_remove466493() throws com.github.mustachejava.MustacheException, java.io.IOException {
        com.github.mustachejava.MustacheFactory c = initParallel();
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        com.github.mustachejava.Mustache m = c.compile("items2.html");
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("items2.html", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        java.io.StringWriter sw = new java.io.StringWriter();
        long start = java.lang.System.currentTimeMillis();
        m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context()).close();
        m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context()).close();
        long diff = (java.lang.System.currentTimeMillis()) - start;
        java.lang.String o_testReadmeParallel_add465381__17 = com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add465381__17);
        java.lang.String String_163 = "Should be a little bit more than 1 second: " + diff;
        junit.framework.TestCase.assertEquals("Should be a little bit more than 1 second: 2001", String_163);
        boolean boolean_164 = (diff > 999) && (diff < 2000);
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("items2.html", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add465381__17);
        junit.framework.TestCase.assertEquals("Should be a little bit more than 1 second: 2001", String_163);
    }

    public void testReadmeParallel_literalMutationString465367_failAssert0_literalMutationString465792_failAssert0_literalMutationString469103_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory c = initParallel();
                    com.github.mustachejava.Mustache m = c.compile("E0Ca*}`*oB_");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    long start = java.lang.System.currentTimeMillis();
                    m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context()).close();
                    long diff = (java.lang.System.currentTimeMillis()) - start;
                    com.github.mustachejava.TestUtil.getContents(this.root, "YjqTo#0@");
                    sw.toString();
                    java.lang.String String_127 = "Should be a little bit more than 1 second: " + diff;
                    boolean boolean_128 = (diff > 999) && (diff < 2000);
                    junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367_failAssert0_literalMutationString465792 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367_failAssert0_literalMutationString465792_failAssert0_literalMutationString469103 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template E0Ca*}`*oB_ not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_add465385() throws com.github.mustachejava.MustacheException, java.io.IOException {
        com.github.mustachejava.MustacheFactory c = initParallel();
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        com.github.mustachejava.Mustache m = c.compile("items2.html");
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("items2.html", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        java.io.StringWriter sw = new java.io.StringWriter();
        long start = java.lang.System.currentTimeMillis();
        m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context()).close();
        long diff = (java.lang.System.currentTimeMillis()) - start;
        sw.toString();
        sw.toString();
        java.lang.String o_testReadmeParallel_add465385__15 = com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add465385__15);
        java.lang.String String_151 = "Should be a little bit more than 1 second: " + diff;
        junit.framework.TestCase.assertEquals("Should be a little bit more than 1 second: 1001", String_151);
        boolean boolean_152 = (diff > 999) && (diff < 2000);
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("items2.html", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add465385__15);
        junit.framework.TestCase.assertEquals("Should be a little bit more than 1 second: 1001", String_151);
    }

    public void testReadmeParallel_literalMutationString465367_failAssert0_add466370_failAssert0() throws com.github.mustachejava.MustacheException, java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory c = initParallel();
                com.github.mustachejava.Mustache m = c.compile("E0Ca*}`*oB_");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.lang.System.currentTimeMillis();
                long start = java.lang.System.currentTimeMillis();
                m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context()).close();
                long diff = (java.lang.System.currentTimeMillis()) - start;
                com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
                sw.toString();
                java.lang.String String_127 = "Should be a little bit more than 1 second: " + diff;
                boolean boolean_128 = (diff > 999) && (diff < 2000);
                junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeParallel_literalMutationString465367_failAssert0_add466370 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template E0Ca*}`*oB_ not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_add465384_literalMutationNumber465596() throws com.github.mustachejava.MustacheException, java.io.IOException {
        com.github.mustachejava.MustacheFactory c = initParallel();
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        com.github.mustachejava.Mustache m = c.compile("items2.html");
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("items2.html", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        java.io.StringWriter sw = new java.io.StringWriter();
        long start = java.lang.System.currentTimeMillis();
        m.execute(sw, new com.github.mustachejava.AmplInterpreterTest.Context()).close();
        long diff = (java.lang.System.currentTimeMillis()) - start;
        java.lang.String o_testReadmeParallel_add465384__14 = com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add465384__14);
        java.lang.String o_testReadmeParallel_add465384__15 = com.github.mustachejava.TestUtil.getContents(this.root, "items.txt");
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add465384__15);
        sw.toString();
        java.lang.String String_159 = "Should be a little bit more than 1 second: " + diff;
        junit.framework.TestCase.assertEquals("Should be a little bit more than 1 second: 1001", String_159);
        boolean boolean_160 = (diff > 999) && (diff < 0);
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        junit.framework.TestCase.assertFalse(((java.util.concurrent.ExecutorService) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        junit.framework.TestCase.assertEquals(100, ((int) (((com.github.mustachejava.DefaultMustacheFactory) (c)).getRecursionLimit())));
        junit.framework.TestCase.assertFalse(((com.github.mustachejava.codes.DefaultMustache) (m)).isRecursive());
        junit.framework.TestCase.assertEquals("items2.html", ((com.github.mustachejava.codes.DefaultMustache) (m)).getName());
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add465384__14);
        junit.framework.TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add465384__15);
        junit.framework.TestCase.assertEquals("Should be a little bit more than 1 second: 1001", String_159);
    }

    public void testDeferred_literalMutationString174450_failAssert0null175721_failAssert0_add181136_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.DefaultMustacheFactory mf = new com.github.mustachejava.DeferringMustacheFactory(this.root);
                    mf.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
                    java.lang.Object context = new java.lang.Object() {
                        java.lang.String title = "Deferred";

                        java.lang.Object deferred = new com.github.mustachejava.DeferringMustacheFactory.DeferredCallable();

                        java.lang.Object deferredpartial = com.github.mustachejava.DeferringMustacheFactory.DEFERRED;
                    };
                    mf.compile("a|v0u1NM3cqYS");
                    com.github.mustachejava.Mustache m = mf.compile("a|v0u1NM3cqYS");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, context).close();
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testDeferred_literalMutationString174450 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDeferred_literalMutationString174450_failAssert0null175721 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDeferred_literalMutationString174450_failAssert0null175721_failAssert0_add181136 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template a|v0u1NM3cqYS not found", expected.getMessage());
        }
    }

    public void testDeferred_literalMutationString174450_failAssert0_add175511_failAssert0() throws java.io.IOException {
        try {
            {
                com.github.mustachejava.DefaultMustacheFactory mf = new com.github.mustachejava.DeferringMustacheFactory(this.root);
                mf.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
                java.lang.Object context = new java.lang.Object() {
                    java.lang.String title = "Deferred";

                    java.lang.Object deferred = new com.github.mustachejava.DeferringMustacheFactory.DeferredCallable();

                    java.lang.Object deferredpartial = com.github.mustachejava.DeferringMustacheFactory.DEFERRED;
                };
                com.github.mustachejava.Mustache m = mf.compile("a|v0u1NM3cqYS");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, context).close();
                com.github.mustachejava.TestUtil.getContents(this.root, "deferred.txt");
                com.github.mustachejava.TestUtil.getContents(this.root, "deferred.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDeferred_literalMutationString174450 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDeferred_literalMutationString174450_failAssert0_add175511 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template a|v0u1NM3cqYS not found", expected.getMessage());
        }
    }

    public void testDeferred_literalMutationString174450_failAssert0_add175506_failAssert0() throws java.io.IOException {
        try {
            {
                com.github.mustachejava.DefaultMustacheFactory mf = new com.github.mustachejava.DeferringMustacheFactory(this.root);
                mf.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
                mf.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
                java.lang.Object context = new java.lang.Object() {
                    java.lang.String title = "Deferred";

                    java.lang.Object deferred = new com.github.mustachejava.DeferringMustacheFactory.DeferredCallable();

                    java.lang.Object deferredpartial = com.github.mustachejava.DeferringMustacheFactory.DEFERRED;
                };
                com.github.mustachejava.Mustache m = mf.compile("a|v0u1NM3cqYS");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, context).close();
                com.github.mustachejava.TestUtil.getContents(this.root, "deferred.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDeferred_literalMutationString174450 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDeferred_literalMutationString174450_failAssert0_add175506 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template a|v0u1NM3cqYS not found", expected.getMessage());
        }
    }

    public void testDeferred_literalMutationString174450_failAssert0() throws java.io.IOException {
        try {
            com.github.mustachejava.DefaultMustacheFactory mf = new com.github.mustachejava.DeferringMustacheFactory(this.root);
            mf.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
            java.lang.Object context = new java.lang.Object() {
                java.lang.String title = "Deferred";

                java.lang.Object deferred = new com.github.mustachejava.DeferringMustacheFactory.DeferredCallable();

                java.lang.Object deferredpartial = com.github.mustachejava.DeferringMustacheFactory.DEFERRED;
            };
            com.github.mustachejava.Mustache m = mf.compile("a|v0u1NM3cqYS");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, context).close();
            com.github.mustachejava.TestUtil.getContents(this.root, "deferred.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDeferred_literalMutationString174450 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template a|v0u1NM3cqYS not found", expected.getMessage());
        }
    }

    public void testDeferred_remove174470null175673_failAssert0_literalMutationString178871_failAssert0() throws java.io.IOException {
        try {
            {
                com.github.mustachejava.DefaultMustacheFactory mf = new com.github.mustachejava.DeferringMustacheFactory(this.root);
                mf.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
                java.lang.Object context = new java.lang.Object() {
                    java.lang.String title = "Deferred";

                    java.lang.Object deferred = new com.github.mustachejava.DeferringMustacheFactory.DeferredCallable();

                    java.lang.Object deferredpartial = com.github.mustachejava.DeferringMustacheFactory.DEFERRED;
                };
                com.github.mustachejava.Mustache m = mf.compile("E+=T{WB$&{zvk");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.lang.String o_testDeferred_remove174470__15 = com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testDeferred_remove174470null175673 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testDeferred_remove174470null175673_failAssert0_literalMutationString178871 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template E+=T{WB$&{zvk not found", expected.getMessage());
        }
    }

    public void testDeferred_literalMutationString174450_failAssert0_add175506_failAssert0_literalMutationString179039_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.DefaultMustacheFactory mf = new com.github.mustachejava.DeferringMustacheFactory(this.root);
                    mf.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
                    mf.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
                    java.lang.Object context = new java.lang.Object() {
                        java.lang.String title = "DPferred";

                        java.lang.Object deferred = new com.github.mustachejava.DeferringMustacheFactory.DeferredCallable();

                        java.lang.Object deferredpartial = com.github.mustachejava.DeferringMustacheFactory.DEFERRED;
                    };
                    com.github.mustachejava.Mustache m = mf.compile("a|v0u1NM3cqYS");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, context).close();
                    com.github.mustachejava.TestUtil.getContents(this.root, "deferred.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDeferred_literalMutationString174450 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDeferred_literalMutationString174450_failAssert0_add175506 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDeferred_literalMutationString174450_failAssert0_add175506_failAssert0_literalMutationString179039 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template a|v0u1NM3cqYS not found", expected.getMessage());
        }
    }

    public void testDeferred_literalMutationString174450_failAssert0null175721_failAssert0_literalMutationString178764_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.DefaultMustacheFactory mf = new com.github.mustachejava.DeferringMustacheFactory(this.root);
                    mf.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
                    java.lang.Object context = new java.lang.Object() {
                        java.lang.String title = "";

                        java.lang.Object deferred = new com.github.mustachejava.DeferringMustacheFactory.DeferredCallable();

                        java.lang.Object deferredpartial = com.github.mustachejava.DeferringMustacheFactory.DEFERRED;
                    };
                    com.github.mustachejava.Mustache m = mf.compile("a|v0u1NM3cqYS");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    m.execute(sw, context).close();
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testDeferred_literalMutationString174450 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDeferred_literalMutationString174450_failAssert0null175721 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDeferred_literalMutationString174450_failAssert0null175721_failAssert0_literalMutationString178764 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template a|v0u1NM3cqYS not found", expected.getMessage());
        }
    }

    public void testDeferred_literalMutationString174452_failAssert0_literalMutationString174928_failAssert0() throws java.io.IOException {
        try {
            {
                com.github.mustachejava.DefaultMustacheFactory mf = new com.github.mustachejava.DeferringMustacheFactory(this.root);
                mf.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
                java.lang.Object context = new java.lang.Object() {
                    java.lang.String title = "Deferred";

                    java.lang.Object deferred = new com.github.mustachejava.DeferringMustacheFactory.DeferredCallable();

                    java.lang.Object deferredpartial = com.github.mustachejava.DeferringMustacheFactory.DEFERRED;
                };
                com.github.mustachejava.Mustache m = mf.compile(" does not exist");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, context).close();
                com.github.mustachejava.TestUtil.getContents(this.root, "deferred.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDeferred_literalMutationString174452 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDeferred_literalMutationString174452_failAssert0_literalMutationString174928 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testDeferred_literalMutationString174450_failAssert0_literalMutationString175029_failAssert0() throws java.io.IOException {
        try {
            {
                com.github.mustachejava.DefaultMustacheFactory mf = new com.github.mustachejava.DeferringMustacheFactory(this.root);
                mf.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
                java.lang.Object context = new java.lang.Object() {
                    java.lang.String title = "Deferrd";

                    java.lang.Object deferred = new com.github.mustachejava.DeferringMustacheFactory.DeferredCallable();

                    java.lang.Object deferredpartial = com.github.mustachejava.DeferringMustacheFactory.DEFERRED;
                };
                com.github.mustachejava.Mustache m = mf.compile("a|v0u1NM3cqYS");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, context).close();
                com.github.mustachejava.TestUtil.getContents(this.root, "deferred.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDeferred_literalMutationString174450 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDeferred_literalMutationString174450_failAssert0_literalMutationString175029 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template a|v0u1NM3cqYS not found", expected.getMessage());
        }
    }

    public void testDeferred_remove174469_remove175609_literalMutationString177160_failAssert0() throws java.io.IOException {
        try {
            com.github.mustachejava.DefaultMustacheFactory mf = new com.github.mustachejava.DeferringMustacheFactory(this.root);
            mf.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
            java.lang.Object context = new java.lang.Object() {
                java.lang.String title = "Deferred";

                java.lang.Object deferred = new com.github.mustachejava.DeferringMustacheFactory.DeferredCallable();

                java.lang.Object deferredpartial = com.github.mustachejava.DeferringMustacheFactory.DEFERRED;
            };
            com.github.mustachejava.Mustache m = mf.compile("BKo.VCYVKmz [");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, context).close();
            java.lang.String o_testDeferred_remove174469__16 = com.github.mustachejava.TestUtil.getContents(this.root, "deferred.txt");
            junit.framework.TestCase.fail("testDeferred_remove174469_remove175609_literalMutationString177160 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template BKo.VCYVKmz [ not found", expected.getMessage());
        }
    }

    public void testDeferred_literalMutationString174450_failAssert0null175721_failAssert0() throws java.io.IOException {
        try {
            {
                com.github.mustachejava.DefaultMustacheFactory mf = new com.github.mustachejava.DeferringMustacheFactory(this.root);
                mf.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
                java.lang.Object context = new java.lang.Object() {
                    java.lang.String title = "Deferred";

                    java.lang.Object deferred = new com.github.mustachejava.DeferringMustacheFactory.DeferredCallable();

                    java.lang.Object deferredpartial = com.github.mustachejava.DeferringMustacheFactory.DEFERRED;
                };
                com.github.mustachejava.Mustache m = mf.compile("a|v0u1NM3cqYS");
                java.io.StringWriter sw = new java.io.StringWriter();
                m.execute(sw, context).close();
                com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testDeferred_literalMutationString174450 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDeferred_literalMutationString174450_failAssert0null175721 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template a|v0u1NM3cqYS not found", expected.getMessage());
        }
    }

    public void testDeferred_remove174470_remove175605_literalMutationString177010_failAssert0() throws java.io.IOException {
        try {
            com.github.mustachejava.DefaultMustacheFactory mf = new com.github.mustachejava.DeferringMustacheFactory(this.root);
            mf.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
            java.lang.Object context = new java.lang.Object() {
                java.lang.String title = "Deferred";

                java.lang.Object deferred = new com.github.mustachejava.DeferringMustacheFactory.DeferredCallable();

                java.lang.Object deferredpartial = com.github.mustachejava.DeferringMustacheFactory.DEFERRED;
            };
            com.github.mustachejava.Mustache m = mf.compile("tOD&sD7_>%uid");
            java.io.StringWriter sw = new java.io.StringWriter();
            java.lang.String o_testDeferred_remove174470__15 = com.github.mustachejava.TestUtil.getContents(this.root, "deferred.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDeferred_remove174470_remove175605_literalMutationString177010 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template tOD&sD7_>%uid not found", expected.getMessage());
        }
    }

    public void testDeferred_literalMutationString174448_literalMutationString174613_failAssert0() throws java.io.IOException {
        try {
            com.github.mustachejava.DefaultMustacheFactory mf = new com.github.mustachejava.DeferringMustacheFactory(this.root);
            mf.setExecutorService(java.util.concurrent.Executors.newCachedThreadPool());
            java.lang.Object context = new java.lang.Object() {
                java.lang.String title = "Deferrd";

                java.lang.Object deferred = new com.github.mustachejava.DeferringMustacheFactory.DeferredCallable();

                java.lang.Object deferredpartial = com.github.mustachejava.DeferringMustacheFactory.DEFERRED;
            };
            com.github.mustachejava.Mustache m = mf.compile("[eferred.html");
            java.io.StringWriter sw = new java.io.StringWriter();
            m.execute(sw, context).close();
            java.lang.String o_testDeferred_literalMutationString174448__17 = com.github.mustachejava.TestUtil.getContents(this.root, "deferred.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDeferred_literalMutationString174448_literalMutationString174613 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template [eferred.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_add410097_literalMutationString410232_failAssert0_add414168_failAssert0() throws java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
                com.github.mustachejava.Mustache compile = mf.compile("relative/funct onpaths.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.Writer o_testRelativePathsTemplateFunction_add410097__7 = compile.execute(sw, new java.lang.Object() {
                    java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                        @java.lang.Override
                        public java.lang.String apply(java.lang.String s) {
                            return s;
                        }
                    };
                });
                compile.execute(sw, new java.lang.Object() {
                    java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                        @java.lang.Override
                        public java.lang.String apply(java.lang.String s) {
                            return s;
                        }
                    };
                }).close();
                java.lang.String o_testRelativePathsTemplateFunction_add410097__30 = com.github.mustachejava.TestUtil.getContents(this.root, "relative/paths.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add410097_literalMutationString410232 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add410097_literalMutationString410232_failAssert0_add414168 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template relative/funct onpaths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_add410099_literalMutationString410202_failAssert0() throws java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
            com.github.mustachejava.Mustache compile = mf.compile("Q&fUV_O,vZ)cKF$nq.s]BQ<9@;f");
            java.io.StringWriter sw = new java.io.StringWriter();
            compile.execute(sw, new java.lang.Object() {
                java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                    @java.lang.Override
                    public java.lang.String apply(java.lang.String s) {
                        return s;
                    }
                };
            }).close();
            sw.toString();
            java.lang.String o_testRelativePathsTemplateFunction_add410099__20 = com.github.mustachejava.TestUtil.getContents(this.root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add410099_literalMutationString410202 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template Q&fUV_O,vZ)cKF$nq.s]BQ<9@;f not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString410085_failAssert0_add410607_failAssert0_literalMutationString412782_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
                    com.github.mustachejava.Mustache compile = mf.compile("pa<ge1.txt");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    compile.execute(sw, new java.lang.Object() {
                        java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                            @java.lang.Override
                            public java.lang.String apply(java.lang.String s) {
                                return s;
                            }
                        };
                    }).close();
                    compile.execute(sw, new java.lang.Object() {
                        java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                            @java.lang.Override
                            public java.lang.String apply(java.lang.String s) {
                                return s;
                            }
                        };
                    }).close();
                    com.github.mustachejava.TestUtil.getContents(this.root, "relative/paths.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410085 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410085_failAssert0_add410607 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410085_failAssert0_add410607_failAssert0_literalMutationString412782 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template pa<ge1.txt not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString410089_failAssert0_literalMutationString410319_failAssert0_literalMutationString412268_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
                    com.github.mustachejava.Mustache compile = mf.compile("OIzc22}b[L.U[*liKN#2B#|[cA]h");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    compile.execute(sw, new java.lang.Object() {
                        java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                            @java.lang.Override
                            public java.lang.String apply(java.lang.String s) {
                                return s;
                            }
                        };
                    }).close();
                    com.github.mustachejava.TestUtil.getContents(this.root, "page1.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410089 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410089_failAssert0_literalMutationString410319 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410089_failAssert0_literalMutationString410319_failAssert0_literalMutationString412268 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template OIzc22}b[L.U[*liKN#2B#|[cA]h not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString410086_failAssert0_add410680_failAssert0null415798_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
                    com.github.mustachejava.Mustache compile = mf.compile("EC{o[%?8BB:17h(hazFa8yldQY>");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    compile.execute(null, new java.lang.Object() {
                        java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                            @java.lang.Override
                            public java.lang.String apply(java.lang.String s) {
                                return s;
                            }
                        };
                    }).close();
                    com.github.mustachejava.TestUtil.getContents(this.root, "relative/paths.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086_failAssert0_add410680 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086_failAssert0_add410680_failAssert0null415798 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template EC{o[%?8BB:17h(hazFa8yldQY> not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString410090_failAssert0_literalMutationString410355_failAssert0() throws java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
                com.github.mustachejava.Mustache compile = mf.compile("^a,4:$TMF.<v#M}N2R<>2ofP[6%");
                java.io.StringWriter sw = new java.io.StringWriter();
                compile.execute(sw, new java.lang.Object() {
                    java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                        @java.lang.Override
                        public java.lang.String apply(java.lang.String s) {
                            return s;
                        }
                    };
                }).close();
                com.github.mustachejava.TestUtil.getContents(this.root, "relative/path.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410090 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410090_failAssert0_literalMutationString410355 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template ^a,4:$TMF.<v#M}N2R<>2ofP[6% not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_add410097_literalMutationString410232_failAssert0_literalMutationString411978_failAssert0() throws java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
                com.github.mustachejava.Mustache compile = mf.compile("relative/funct onpaths.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.Writer o_testRelativePathsTemplateFunction_add410097__7 = compile.execute(sw, new java.lang.Object() {
                    java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                        @java.lang.Override
                        public java.lang.String apply(java.lang.String s) {
                            return s;
                        }
                    };
                });
                compile.execute(sw, new java.lang.Object() {
                    java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                        @java.lang.Override
                        public java.lang.String apply(java.lang.String s) {
                            return s;
                        }
                    };
                }).close();
                java.lang.String o_testRelativePathsTemplateFunction_add410097__30 = com.github.mustachejava.TestUtil.getContents(this.root, "page1.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add410097_literalMutationString410232 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add410097_literalMutationString410232_failAssert0_literalMutationString411978 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template relative/funct onpaths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString410086_failAssert0_add410680_failAssert0_add414911_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
                    com.github.mustachejava.Mustache compile = mf.compile("EC{o[%?8BB:17h(hazFa8yldQY>");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    compile.execute(sw, new java.lang.Object() {
                        java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                            @java.lang.Override
                            public java.lang.String apply(java.lang.String s) {
                                return s;
                            }
                        };
                    }).close();
                    com.github.mustachejava.TestUtil.getContents(this.root, "relative/paths.txt");
                    sw.toString();
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086_failAssert0_add410680 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086_failAssert0_add410680_failAssert0_add414911 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template EC{o[%?8BB:17h(hazFa8yldQY> not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_remove410101_literalMutationString410272_failAssert0() throws java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
            com.github.mustachejava.Mustache compile = mf.compile("Ev7%s82ipzuLE$r=/z KBtI|b;)");
            java.io.StringWriter sw = new java.io.StringWriter();
            compile.execute(sw, new java.lang.Object() {
                java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                    @java.lang.Override
                    public java.lang.String apply(java.lang.String s) {
                        return s;
                    }
                };
            }).close();
            java.lang.String o_testRelativePathsTemplateFunction_remove410101__18 = com.github.mustachejava.TestUtil.getContents(this.root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_remove410101_literalMutationString410272 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template Ev7%s82ipzuLE$r=/z KBtI|b;) not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString410086_failAssert0_literalMutationString410417_failAssert0() throws java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
                com.github.mustachejava.Mustache compile = mf.compile("EC{o[%?8BB:17h(hazFa8yldQY>");
                java.io.StringWriter sw = new java.io.StringWriter();
                compile.execute(sw, new java.lang.Object() {
                    java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                        @java.lang.Override
                        public java.lang.String apply(java.lang.String s) {
                            return s;
                        }
                    };
                }).close();
                com.github.mustachejava.TestUtil.getContents(this.root, "reative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086_failAssert0_literalMutationString410417 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template EC{o[%?8BB:17h(hazFa8yldQY> not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_remove410102_literalMutationString410283_failAssert0() throws java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
            com.github.mustachejava.Mustache compile = mf.compile("CW {[`|UmifeOk[Q2bxO}w:YLT(");
            java.io.StringWriter sw = new java.io.StringWriter();
            compile.execute(sw, new java.lang.Object() {
                java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                    @java.lang.Override
                    public java.lang.String apply(java.lang.String s) {
                        return s;
                    }
                };
            }).close();
            java.lang.String o_testRelativePathsTemplateFunction_remove410102__18 = com.github.mustachejava.TestUtil.getContents(this.root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_remove410102_literalMutationString410283 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template CW {[`|UmifeOk[Q2bxO}w:YLT( not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString410086_failAssert0() throws java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
            com.github.mustachejava.Mustache compile = mf.compile("EC{o[%?8BB:17h(hazFa8yldQY>");
            java.io.StringWriter sw = new java.io.StringWriter();
            compile.execute(sw, new java.lang.Object() {
                java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                    @java.lang.Override
                    public java.lang.String apply(java.lang.String s) {
                        return s;
                    }
                };
            }).close();
            com.github.mustachejava.TestUtil.getContents(this.root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template EC{o[%?8BB:17h(hazFa8yldQY> not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString410086_failAssert0_add410680_failAssert0() throws java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
                com.github.mustachejava.Mustache compile = mf.compile("EC{o[%?8BB:17h(hazFa8yldQY>");
                java.io.StringWriter sw = new java.io.StringWriter();
                compile.execute(sw, new java.lang.Object() {
                    java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                        @java.lang.Override
                        public java.lang.String apply(java.lang.String s) {
                            return s;
                        }
                    };
                }).close();
                com.github.mustachejava.TestUtil.getContents(this.root, "relative/paths.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086_failAssert0_add410680 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template EC{o[%?8BB:17h(hazFa8yldQY> not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString410086_failAssert0_add410680_failAssert0_literalMutationString412972_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
                    com.github.mustachejava.Mustache compile = mf.compile("t!VoNdqac^`-1+2`&f+f:-saf+j");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    compile.execute(sw, new java.lang.Object() {
                        java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                            @java.lang.Override
                            public java.lang.String apply(java.lang.String s) {
                                return s;
                            }
                        };
                    }).close();
                    com.github.mustachejava.TestUtil.getContents(this.root, "relative/paths.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086_failAssert0_add410680 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086_failAssert0_add410680_failAssert0_literalMutationString412972 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template t!VoNdqac^`-1+2`&f+f:-saf+j not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString410086_failAssert0_add410680_failAssert0_literalMutationString412970_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
                    com.github.mustachejava.Mustache compile = mf.compile("EC{o[%?8BB:17h(hazFa8ldQY>");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    compile.execute(sw, new java.lang.Object() {
                        java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                            @java.lang.Override
                            public java.lang.String apply(java.lang.String s) {
                                return s;
                            }
                        };
                    }).close();
                    com.github.mustachejava.TestUtil.getContents(this.root, "relative/paths.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086_failAssert0_add410680 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086_failAssert0_add410680_failAssert0_literalMutationString412970 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template EC{o[%?8BB:17h(hazFa8ldQY> not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_add410096_add410490_literalMutationString411404_failAssert0() throws java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
            com.github.mustachejava.Mustache compile = mf.compile("relative/fu}ctionpaths.html");
            java.io.StringWriter sw = new java.io.StringWriter();
            compile.execute(sw, new java.lang.Object() {
                java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                    @java.lang.Override
                    public java.lang.String apply(java.lang.String s) {
                        return s;
                    }
                };
            }).close();
            compile.execute(sw, new java.lang.Object() {
                java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                    @java.lang.Override
                    public java.lang.String apply(java.lang.String s) {
                        return s;
                    }
                };
            }).close();
            java.lang.String o_testRelativePathsTemplateFunction_add410096__31 = com.github.mustachejava.TestUtil.getContents(this.root, "relative/paths.txt");
            sw.toString();
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add410096_add410490_literalMutationString411404 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template relative/fu}ctionpaths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString410086_failAssert0_add410676_failAssert0() throws java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
                mf.compile("EC{o[%?8BB:17h(hazFa8yldQY>");
                com.github.mustachejava.Mustache compile = mf.compile("EC{o[%?8BB:17h(hazFa8yldQY>");
                java.io.StringWriter sw = new java.io.StringWriter();
                compile.execute(sw, new java.lang.Object() {
                    java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                        @java.lang.Override
                        public java.lang.String apply(java.lang.String s) {
                            return s;
                        }
                    };
                }).close();
                com.github.mustachejava.TestUtil.getContents(this.root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086_failAssert0_add410676 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template EC{o[%?8BB:17h(hazFa8yldQY> not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_add410097_literalMutationString410232_failAssert0null415541_failAssert0() throws java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
                com.github.mustachejava.Mustache compile = mf.compile("relative/funct onpaths.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.Writer o_testRelativePathsTemplateFunction_add410097__7 = compile.execute(sw, new java.lang.Object() {
                    java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                        @java.lang.Override
                        public java.lang.String apply(java.lang.String s) {
                            return s;
                        }
                    };
                });
                compile.execute(sw, new java.lang.Object() {
                    java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                        @java.lang.Override
                        public java.lang.String apply(java.lang.String s) {
                            return s;
                        }
                    };
                }).close();
                java.lang.String o_testRelativePathsTemplateFunction_add410097__30 = com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add410097_literalMutationString410232 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add410097_literalMutationString410232_failAssert0null415541 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template relative/funct onpaths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString410086_failAssert0_add410680_failAssert0_add414910_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
                    com.github.mustachejava.Mustache compile = mf.compile("EC{o[%?8BB:17h(hazFa8yldQY>");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    compile.execute(sw, new java.lang.Object() {
                        java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                            @java.lang.Override
                            public java.lang.String apply(java.lang.String s) {
                                return s;
                            }
                        };
                    }).close();
                    com.github.mustachejava.TestUtil.getContents(this.root, "relative/paths.txt");
                    com.github.mustachejava.TestUtil.getContents(this.root, "relative/paths.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086_failAssert0_add410680 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086_failAssert0_add410680_failAssert0_add414910 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template EC{o[%?8BB:17h(hazFa8yldQY> not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString410086_failAssert0null410809_failAssert0() throws java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
                com.github.mustachejava.Mustache compile = mf.compile("EC{o[%?8BB:17h(hazFa8yldQY>");
                java.io.StringWriter sw = new java.io.StringWriter();
                compile.execute(sw, new java.lang.Object() {
                    java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                        @java.lang.Override
                        public java.lang.String apply(java.lang.String s) {
                            return s;
                        }
                    };
                }).close();
                com.github.mustachejava.TestUtil.getContents(this.root, null);
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086_failAssert0null410809 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template EC{o[%?8BB:17h(hazFa8yldQY> not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunctionnull410104_failAssert0_literalMutationString410429_failAssert0() throws java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
                com.github.mustachejava.Mustache compile = mf.compile("relative/function}aths.html");
                java.io.StringWriter sw = new java.io.StringWriter();
                compile.execute(null, new java.lang.Object() {
                    java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                        @java.lang.Override
                        public java.lang.String apply(java.lang.String s) {
                            return s;
                        }
                    };
                }).close();
                com.github.mustachejava.TestUtil.getContents(this.root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunctionnull410104 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunctionnull410104_failAssert0_literalMutationString410429 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template relative/function}aths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_add410097_literalMutationString410232_failAssert0() throws java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
            com.github.mustachejava.Mustache compile = mf.compile("relative/funct onpaths.html");
            java.io.StringWriter sw = new java.io.StringWriter();
            java.io.Writer o_testRelativePathsTemplateFunction_add410097__7 = compile.execute(sw, new java.lang.Object() {
                java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                    @java.lang.Override
                    public java.lang.String apply(java.lang.String s) {
                        return s;
                    }
                };
            });
            compile.execute(sw, new java.lang.Object() {
                java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                    @java.lang.Override
                    public java.lang.String apply(java.lang.String s) {
                        return s;
                    }
                };
            }).close();
            java.lang.String o_testRelativePathsTemplateFunction_add410097__30 = com.github.mustachejava.TestUtil.getContents(this.root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add410097_literalMutationString410232 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template relative/funct onpaths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString410086_failAssert0_add410680_failAssert0null415799_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
                    com.github.mustachejava.Mustache compile = mf.compile("EC{o[%?8BB:17h(hazFa8yldQY>");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    compile.execute(sw, new java.lang.Object() {
                        java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                            @java.lang.Override
                            public java.lang.String apply(java.lang.String s) {
                                return s;
                            }
                        };
                    }).close();
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086_failAssert0_add410680 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086_failAssert0_add410680_failAssert0null415799 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template EC{o[%?8BB:17h(hazFa8yldQY> not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString410091_failAssert0_add410627_failAssert0_literalMutationString412850_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
                    mf.compile("relative/functionpath s.html");
                    com.github.mustachejava.Mustache compile = mf.compile("relative/functionpaths.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    compile.execute(sw, new java.lang.Object() {
                        java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                            @java.lang.Override
                            public java.lang.String apply(java.lang.String s) {
                                return s;
                            }
                        };
                    }).close();
                    com.github.mustachejava.TestUtil.getContents(this.root, "p4^$UIX&L2;9lYL!n*");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410091 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410091_failAssert0_add410627 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410091_failAssert0_add410627_failAssert0_literalMutationString412850 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template relative/functionpath s.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_add410095_remove410723_literalMutationString411661_failAssert0() throws java.io.IOException {
        try {
            com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
            com.github.mustachejava.Mustache o_testRelativePathsTemplateFunction_add410095__3 = mf.compile("relative/functionpaths.html");
            com.github.mustachejava.Mustache compile = mf.compile("z0B&k4^n#!TQnzqbqvuSOz,*Llj");
            java.io.StringWriter sw = new java.io.StringWriter();
            java.lang.String o_testRelativePathsTemplateFunction_add410095__20 = com.github.mustachejava.TestUtil.getContents(this.root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add410095_remove410723_literalMutationString411661 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template z0B&k4^n#!TQnzqbqvuSOz,*Llj not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunctionnull410104_failAssert0_literalMutationString410429_failAssert0_add414242_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    createMustacheFactory();
                    com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
                    com.github.mustachejava.Mustache compile = mf.compile("relative/function}aths.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    compile.execute(null, new java.lang.Object() {
                        java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                            @java.lang.Override
                            public java.lang.String apply(java.lang.String s) {
                                return s;
                            }
                        };
                    }).close();
                    com.github.mustachejava.TestUtil.getContents(this.root, "relative/paths.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsTemplateFunctionnull410104 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testRelativePathsTemplateFunctionnull410104_failAssert0_literalMutationString410429 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunctionnull410104_failAssert0_literalMutationString410429_failAssert0_add414242 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template relative/function}aths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunctionnull410105_failAssert0_add410688_failAssert0_literalMutationString413009_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
                    com.github.mustachejava.Mustache compile = mf.compile("relative/func<tionpaths.html");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    compile.execute(sw, new java.lang.Object() {
                        java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                            @java.lang.Override
                            public java.lang.String apply(java.lang.String s) {
                                return s;
                            }
                        };
                    }).close();
                    com.github.mustachejava.TestUtil.getContents(this.root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsTemplateFunctionnull410105 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testRelativePathsTemplateFunctionnull410105_failAssert0_add410688 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunctionnull410105_failAssert0_add410688_failAssert0_literalMutationString413009 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template relative/func<tionpaths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString410085_failAssert0_add410605_failAssert0_literalMutationString413294_failAssert0() throws java.io.IOException {
        try {
            {
                {
                    createMustacheFactory();
                    com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
                    com.github.mustachejava.Mustache compile = mf.compile(" does not exist");
                    java.io.StringWriter sw = new java.io.StringWriter();
                    compile.execute(sw, new java.lang.Object() {
                        java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                            @java.lang.Override
                            public java.lang.String apply(java.lang.String s) {
                                return s;
                            }
                        };
                    }).close();
                    com.github.mustachejava.TestUtil.getContents(this.root, "relative/paths.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410085 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410085_failAssert0_add410605 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410085_failAssert0_add410605_failAssert0_literalMutationString413294 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString410086_failAssert0null410808_failAssert0() throws java.io.IOException {
        try {
            {
                com.github.mustachejava.MustacheFactory mf = createMustacheFactory();
                com.github.mustachejava.Mustache compile = mf.compile("EC{o[%?8BB:17h(hazFa8yldQY>");
                java.io.StringWriter sw = new java.io.StringWriter();
                compile.execute(null, new java.lang.Object() {
                    java.util.function.Function i = new com.github.mustachejava.TemplateFunction() {
                        @java.lang.Override
                        public java.lang.String apply(java.lang.String s) {
                            return s;
                        }
                    };
                }).close();
                com.github.mustachejava.TestUtil.getContents(this.root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString410086_failAssert0null410808 should have thrown MustacheNotFoundException");
        } catch (com.github.mustachejava.MustacheNotFoundException expected) {
            junit.framework.TestCase.assertEquals("Template EC{o[%?8BB:17h(hazFa8yldQY> not found", expected.getMessage());
        }
    }
}

