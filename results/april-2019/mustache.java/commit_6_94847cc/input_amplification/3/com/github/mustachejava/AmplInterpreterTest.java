package com.github.mustachejava;


import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MappingJsonFactory;
import com.github.mustachejava.codes.DefaultCode;
import com.github.mustachejava.codes.DefaultMustache;
import com.github.mustachejava.codes.PartialCode;
import com.github.mustachejava.reflect.SimpleObjectHandler;
import com.github.mustachejava.resolver.DefaultResolver;
import com.github.mustachejava.util.CapturingMustacheVisitor;
import com.github.mustachejavabenchmarks.JsonCapturer;
import com.github.mustachejavabenchmarks.JsonInterpreterTest;
import java.io.File;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.function.Function;
import junit.framework.TestCase;


@SuppressWarnings("unused")
public class AmplInterpreterTest extends TestCase {
    protected File root;

    public void testSimple_literalMutationString379596_failAssert0_literalMutationString380820_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("[kC!Yc|@aTx");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                TestUtil.getContents(root, "simple.&xt");
                sw.toString();
                junit.framework.TestCase.fail("testSimple_literalMutationString379596 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testSimple_literalMutationString379596_failAssert0_literalMutationString380820 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [kC!Yc|@aTx not found", expected.getMessage());
        }
    }

    public void testSimple_literalMutationString379574_literalMutationString380223_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("V7gKVi0Of? ");
            StringWriter sw = new StringWriter();
            Writer o_testSimple_literalMutationString379574__7 = m.execute(sw, new Object() {
                String name = "%hris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            String o_testSimple_literalMutationString379574__14 = TestUtil.getContents(root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSimple_literalMutationString379574_literalMutationString380223 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template V7gKVi0Of?  not found", expected.getMessage());
        }
    }

    public void testSimple_literalMutationString379566() throws MustacheException, IOException, InterruptedException, ExecutionException {
        MustacheFactory c = createMustacheFactory();
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        Mustache m = c.compile("");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        Writer o_testSimple_literalMutationString379566__7 = m.execute(sw, new Object() {
            String name = "Chris";

            int value = 10000;

            int taxed_value() {
                return ((int) ((this.value) - ((this.value) * 0.4)));
            }

            boolean in_ca = true;
        });
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testSimple_literalMutationString379566__7)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testSimple_literalMutationString379566__7)).toString());
        String o_testSimple_literalMutationString379566__14 = TestUtil.getContents(root, "simple.txt");
        TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", o_testSimple_literalMutationString379566__14);
        sw.toString();
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testSimple_literalMutationString379566__7)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testSimple_literalMutationString379566__7)).toString());
        TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", o_testSimple_literalMutationString379566__14);
    }

    public void testSimple_literalMutationString379570_failAssert0_literalMutationString380729_failAssert0_literalMutationNumber387057_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("G#-Gn5?mw<mQ");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * -0.6)));
                        }

                        boolean in_ca = true;
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimple_literalMutationString379570 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimple_literalMutationString379570_failAssert0_literalMutationString380729 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimple_literalMutationString379570_failAssert0_literalMutationString380729_failAssert0_literalMutationNumber387057 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template G#-Gn5?mw<mQ not found", expected.getMessage());
        }
    }

    public void testSimple_literalMutationString379570_failAssert0_literalMutationString380729_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("G#-Gn5?mw<mQ");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimple_literalMutationString379570 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimple_literalMutationString379570_failAssert0_literalMutationString380729 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template G#-Gn5?mw<mQ not found", expected.getMessage());
        }
    }

    public void testSimple_literalMutationString379570_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("G#-Gn5?m<mQ");
            StringWriter sw = new StringWriter();
            m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            TestUtil.getContents(root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSimple_literalMutationString379570 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template G#-Gn5?m<mQ not found", expected.getMessage());
        }
    }

    public void testSimple_literalMutationString379570_failAssert0_literalMutationString380729_failAssert0_add389453_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("G#-Gn5?mw<mQ");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimple_literalMutationString379570 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimple_literalMutationString379570_failAssert0_literalMutationString380729 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimple_literalMutationString379570_failAssert0_literalMutationString380729_failAssert0_add389453 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template G#-Gn5?mw<mQ not found", expected.getMessage());
        }
    }

    public void testSimple_literalMutationNumber379589_literalMutationString380344_add388688() throws MustacheException, IOException, InterruptedException, ExecutionException {
        MustacheFactory c = createMustacheFactory();
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        Mustache m = c.compile("");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        Writer o_testSimple_literalMutationNumber379589_literalMutationString380344_add388688__7 = m.execute(sw, new Object() {
            String name = "Chris";

            int value = 10000;

            int taxed_value() {
                return ((int) ((this.value) - ((this.value) * 0.8)));
            }

            boolean in_ca = true;
        });
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testSimple_literalMutationNumber379589_literalMutationString380344_add388688__7)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testSimple_literalMutationNumber379589_literalMutationString380344_add388688__7)).toString());
        Writer o_testSimple_literalMutationNumber379589__7 = m.execute(sw, new Object() {
            String name = "Chris";

            int value = 10000;

            int taxed_value() {
                return ((int) ((this.value) - ((this.value) * 0.8)));
            }

            boolean in_ca = true;
        });
        String o_testSimple_literalMutationNumber379589__15 = TestUtil.getContents(root, "simple.txt");
        TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", o_testSimple_literalMutationNumber379589__15);
        sw.toString();
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\nbox.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testSimple_literalMutationNumber379589_literalMutationString380344_add388688__7)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\nbox.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testSimple_literalMutationNumber379589_literalMutationString380344_add388688__7)).toString());
        TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", o_testSimple_literalMutationNumber379589__15);
    }

    public void testSimple_literalMutationString379570_failAssert0_literalMutationString380729_failAssert0null390209_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("G#-Gn5?mw<mQ");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testSimple_literalMutationString379570 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimple_literalMutationString379570_failAssert0_literalMutationString380729 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimple_literalMutationString379570_failAssert0_literalMutationString380729_failAssert0null390209 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template G#-Gn5?mw<mQ not found", expected.getMessage());
        }
    }

    public void testSimple_literalMutationString379570_failAssert0_add381540_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("G#-Gn5?m<mQ");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimple_literalMutationString379570 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimple_literalMutationString379570_failAssert0_add381540 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template G#-Gn5?m<mQ not found", expected.getMessage());
        }
    }

    public void testSimple_remove379603null381656_failAssert0_literalMutationString387138_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile(", Q3{%60kN8");
                StringWriter sw = new StringWriter();
                Writer o_testSimple_remove379603__7 = m.execute(null, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                String o_testSimple_remove379603__13 = TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimple_remove379603null381656 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testSimple_remove379603null381656_failAssert0_literalMutationString387138 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template , Q3{%60kN8 not found", expected.getMessage());
        }
    }

    public void testSimple_literalMutationNumber379582_add381422_literalMutationString382628_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("%ps5sQ<.J`5");
            StringWriter sw = new StringWriter();
            Writer o_testSimple_literalMutationNumber379582__7 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 5000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            String o_testSimple_literalMutationNumber379582__15 = TestUtil.getContents(root, "simple.txt");
            sw.toString();
            o_testSimple_literalMutationNumber379582__7.toString();
            junit.framework.TestCase.fail("testSimple_literalMutationNumber379582_add381422_literalMutationString382628 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template %ps5sQ<.J`5 not found", expected.getMessage());
        }
    }

    private static class LocalizedMustacheResolver extends DefaultResolver {
        private final Locale locale;

        LocalizedMustacheResolver(File root, Locale locale) {
            super(root);
            this.locale = locale;
        }

        @Override
        public Reader getReader(String resourceName) {
            int index = resourceName.lastIndexOf('.');
            String newResourceName;
            if (index == (-1)) {
                newResourceName = resourceName;
            } else {
                newResourceName = (((resourceName.substring(0, index)) + "_") + (locale.toLanguageTag())) + (resourceName.substring(index));
            }
            Reader reader = super.getReader(newResourceName);
            if (reader == null) {
                reader = super.getReader(resourceName);
            }
            return reader;
        }
    }

    public void testSimpleI18N_literalMutationString118249_literalMutationString120685_failAssert0null142097_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(new AmplInterpreterTest.LocalizedMustacheResolver(root, Locale.KOREAN));
                    Mustache m = c.compile("simpl[.html");
                    StringWriter sw = new StringWriter();
                    Writer o_testSimpleI18N_literalMutationString118249__9 = m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    String o_testSimpleI18N_literalMutationString118249__16 = TestUtil.getContents(root, null);
                    sw.toString();
                }
                {
                    MustacheFactory c = new DefaultMustacheFactory(new AmplInterpreterTest.LocalizedMustacheResolver(this.root, Locale.JAPANESE));
                    Mustache m = c.compile("simple.html");
                    StringWriter sw = new StringWriter();
                    Writer o_testSimpleI18N_literalMutationString118249__26 = m.execute(sw, new Object() {
                        String name = "ChrXis";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    String o_testSimpleI18N_literalMutationString118249__33 = TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                }
                junit.framework.TestCase.fail("testSimpleI18N_literalMutationString118249_literalMutationString120685 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationString118249_literalMutationString120685_failAssert0null142097 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template simpl[.html not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString118211_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(new AmplInterpreterTest.LocalizedMustacheResolver(root, Locale.KOREAN));
                Mustache m = c.compile("gKO<&Kllqq)");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                TestUtil.getContents(root, "simple_ko.txt");
                sw.toString();
            }
            {
                MustacheFactory c = new DefaultMustacheFactory(new AmplInterpreterTest.LocalizedMustacheResolver(root, Locale.JAPANESE));
                Mustache m = c.compile("simple.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationString118211 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template gKO<&Kllqq) not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString118218_literalMutationString120808_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(new AmplInterpreterTest.LocalizedMustacheResolver(root, Locale.KOREAN));
                Mustache m = c.compile("@L (o1X&RwI");
                StringWriter sw = new StringWriter();
                Writer o_testSimpleI18N_literalMutationString118218__9 = m.execute(sw, new Object() {
                    String name = "Bhris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                String o_testSimpleI18N_literalMutationString118218__16 = TestUtil.getContents(root, "simple_ko.txt");
                sw.toString();
            }
            {
                MustacheFactory c = new DefaultMustacheFactory(new AmplInterpreterTest.LocalizedMustacheResolver(this.root, Locale.JAPANESE));
                Mustache m = c.compile("simple.html");
                StringWriter sw = new StringWriter();
                Writer o_testSimpleI18N_literalMutationString118218__26 = m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                String o_testSimpleI18N_literalMutationString118218__33 = TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationString118218_literalMutationString120808 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @L (o1X&RwI not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString118249_literalMutationString120685_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(new AmplInterpreterTest.LocalizedMustacheResolver(root, Locale.KOREAN));
                Mustache m = c.compile("simpl[.html");
                StringWriter sw = new StringWriter();
                Writer o_testSimpleI18N_literalMutationString118249__9 = m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                String o_testSimpleI18N_literalMutationString118249__16 = TestUtil.getContents(root, "simple_ko.txt");
                sw.toString();
            }
            {
                MustacheFactory c = new DefaultMustacheFactory(new AmplInterpreterTest.LocalizedMustacheResolver(this.root, Locale.JAPANESE));
                Mustache m = c.compile("simple.html");
                StringWriter sw = new StringWriter();
                Writer o_testSimpleI18N_literalMutationString118249__26 = m.execute(sw, new Object() {
                    String name = "ChrXis";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                String o_testSimpleI18N_literalMutationString118249__33 = TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationString118249_literalMutationString120685 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template simpl[.html not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString118249_literalMutationString120685_failAssert0_literalMutationNumber135564_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(new AmplInterpreterTest.LocalizedMustacheResolver(root, Locale.KOREAN));
                    Mustache m = c.compile("simpl[.html");
                    StringWriter sw = new StringWriter();
                    Writer o_testSimpleI18N_literalMutationString118249__9 = m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    String o_testSimpleI18N_literalMutationString118249__16 = TestUtil.getContents(root, "simple_ko.txt");
                    sw.toString();
                }
                {
                    MustacheFactory c = new DefaultMustacheFactory(new AmplInterpreterTest.LocalizedMustacheResolver(this.root, Locale.JAPANESE));
                    Mustache m = c.compile("simple.html");
                    StringWriter sw = new StringWriter();
                    Writer o_testSimpleI18N_literalMutationString118249__26 = m.execute(sw, new Object() {
                        String name = "ChrXis";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.0)));
                        }

                        boolean in_ca = true;
                    });
                    String o_testSimpleI18N_literalMutationString118249__33 = TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                }
                junit.framework.TestCase.fail("testSimpleI18N_literalMutationString118249_literalMutationString120685 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationString118249_literalMutationString120685_failAssert0_literalMutationNumber135564 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template simpl[.html not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString118241() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = new DefaultMustacheFactory(new AmplInterpreterTest.LocalizedMustacheResolver(root, Locale.KOREAN));
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("simple.html");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("simple.html", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testSimpleI18N_literalMutationString118241__9 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            TestCase.assertEquals("\uc548\ub155\ud558\uc138\uc694 Chris\n\u00a0\u00a0 \ub2f9\uc2e0\uc740 10000\ub2ec\ub7ec\ub97c \uc6d0\ud588\ub2e4!\n\n\uc74c, 6000\ub2ec\ub7ec, \uc138\uae08 \ud6c4.\n", ((StringBuffer) (((StringWriter) (o_testSimpleI18N_literalMutationString118241__9)).getBuffer())).toString());
            TestCase.assertEquals("\uc548\ub155\ud558\uc138\uc694 Chris\n\u00a0\u00a0 \ub2f9\uc2e0\uc740 10000\ub2ec\ub7ec\ub97c \uc6d0\ud588\ub2e4!\n\n\uc74c, 6000\ub2ec\ub7ec, \uc138\uae08 \ud6c4.\n", ((StringWriter) (o_testSimpleI18N_literalMutationString118241__9)).toString());
            String o_testSimpleI18N_literalMutationString118241__16 = TestUtil.getContents(root, "simple_ko.txt");
            TestCase.assertEquals("\uc548\ub155\ud558\uc138\uc694 Chris\n\u00a0\u00a0 \ub2f9\uc2e0\uc740 10000\ub2ec\ub7ec\ub97c \uc6d0\ud588\ub2e4!\n\n\uc74c, 6000\ub2ec\ub7ec, \uc138\uae08 \ud6c4.\n", o_testSimpleI18N_literalMutationString118241__16);
            sw.toString();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("simple.html", ((DefaultMustache) (m)).getName());
            TestCase.assertEquals("\uc548\ub155\ud558\uc138\uc694 Chris\n\u00a0\u00a0 \ub2f9\uc2e0\uc740 10000\ub2ec\ub7ec\ub97c \uc6d0\ud588\ub2e4!\n\n\uc74c, 6000\ub2ec\ub7ec, \uc138\uae08 \ud6c4.\n", ((StringBuffer) (((StringWriter) (o_testSimpleI18N_literalMutationString118241__9)).getBuffer())).toString());
            TestCase.assertEquals("\uc548\ub155\ud558\uc138\uc694 Chris\n\u00a0\u00a0 \ub2f9\uc2e0\uc740 10000\ub2ec\ub7ec\ub97c \uc6d0\ud588\ub2e4!\n\n\uc74c, 6000\ub2ec\ub7ec, \uc138\uae08 \ud6c4.\n", ((StringWriter) (o_testSimpleI18N_literalMutationString118241__9)).toString());
            TestCase.assertEquals("\uc548\ub155\ud558\uc138\uc694 Chris\n\u00a0\u00a0 \ub2f9\uc2e0\uc740 10000\ub2ec\ub7ec\ub97c \uc6d0\ud588\ub2e4!\n\n\uc74c, 6000\ub2ec\ub7ec, \uc138\uae08 \ud6c4.\n", o_testSimpleI18N_literalMutationString118241__16);
        }
        {
            MustacheFactory c = new DefaultMustacheFactory(new AmplInterpreterTest.LocalizedMustacheResolver(this.root, Locale.JAPANESE));
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testSimpleI18N_literalMutationString118241__26 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testSimpleI18N_literalMutationString118241__26)).getBuffer())).toString());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testSimpleI18N_literalMutationString118241__26)).toString());
            String o_testSimpleI18N_literalMutationString118241__33 = TestUtil.getContents(this.root, "simple.txt");
            TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", o_testSimpleI18N_literalMutationString118241__33);
            sw.toString();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testSimpleI18N_literalMutationString118241__26)).getBuffer())).toString());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testSimpleI18N_literalMutationString118241__26)).toString());
            TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", o_testSimpleI18N_literalMutationString118241__33);
        }
    }

    public void testSimpleI18N_literalMutationNumber118232_literalMutationString120172_literalMutationString130569_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(new AmplInterpreterTest.LocalizedMustacheResolver(root, Locale.KOREAN));
                Mustache m = c.compile("simple.html");
                StringWriter sw = new StringWriter();
                Writer o_testSimpleI18N_literalMutationNumber118232__9 = m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.8)));
                    }

                    boolean in_ca = true;
                });
                String o_testSimpleI18N_literalMutationNumber118232__17 = TestUtil.getContents(root, "simple_ko.txt");
                sw.toString();
            }
            {
                MustacheFactory c = new DefaultMustacheFactory(new AmplInterpreterTest.LocalizedMustacheResolver(this.root, Locale.JAPANESE));
                Mustache m = c.compile("simple.<tml");
                StringWriter sw = new StringWriter();
                Writer o_testSimpleI18N_literalMutationNumber118232__27 = m.execute(sw, new Object() {
                    String name = "Chrs";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                String o_testSimpleI18N_literalMutationNumber118232__34 = TestUtil.getContents(this.root, "simple.txt");
                sw.toString();
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationNumber118232_literalMutationString120172_literalMutationString130569 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template simple.<tml not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationNumber118226null125878_failAssert0_literalMutationString133000_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(new AmplInterpreterTest.LocalizedMustacheResolver(root, Locale.KOREAN));
                    Mustache m = c.compile("Cg*9z|Uz1-v");
                    StringWriter sw = new StringWriter();
                    Writer o_testSimpleI18N_literalMutationNumber118226__9 = m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 20000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    String o_testSimpleI18N_literalMutationNumber118226__17 = TestUtil.getContents(root, "simple_ko.txt");
                    sw.toString();
                }
                {
                    MustacheFactory c = new DefaultMustacheFactory(new AmplInterpreterTest.LocalizedMustacheResolver(this.root, Locale.JAPANESE));
                    Mustache m = c.compile(null);
                    StringWriter sw = new StringWriter();
                    Writer o_testSimpleI18N_literalMutationNumber118226__27 = m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    String o_testSimpleI18N_literalMutationNumber118226__34 = TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                }
                junit.framework.TestCase.fail("testSimpleI18N_literalMutationNumber118226null125878 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationNumber118226null125878_failAssert0_literalMutationString133000 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Cg*9z|Uz1-v not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString118209() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = new DefaultMustacheFactory(new AmplInterpreterTest.LocalizedMustacheResolver(root, Locale.KOREAN));
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testSimpleI18N_literalMutationString118209__9 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testSimpleI18N_literalMutationString118209__9)).getBuffer())).toString());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testSimpleI18N_literalMutationString118209__9)).toString());
            String o_testSimpleI18N_literalMutationString118209__16 = TestUtil.getContents(root, "simple_ko.txt");
            TestCase.assertEquals("\uc548\ub155\ud558\uc138\uc694 Chris\n\u00a0\u00a0 \ub2f9\uc2e0\uc740 10000\ub2ec\ub7ec\ub97c \uc6d0\ud588\ub2e4!\n\n\uc74c, 6000\ub2ec\ub7ec, \uc138\uae08 \ud6c4.\n", o_testSimpleI18N_literalMutationString118209__16);
            sw.toString();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testSimpleI18N_literalMutationString118209__9)).getBuffer())).toString());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testSimpleI18N_literalMutationString118209__9)).toString());
            TestCase.assertEquals("\uc548\ub155\ud558\uc138\uc694 Chris\n\u00a0\u00a0 \ub2f9\uc2e0\uc740 10000\ub2ec\ub7ec\ub97c \uc6d0\ud588\ub2e4!\n\n\uc74c, 6000\ub2ec\ub7ec, \uc138\uae08 \ud6c4.\n", o_testSimpleI18N_literalMutationString118209__16);
        }
        {
            MustacheFactory c = new DefaultMustacheFactory(new AmplInterpreterTest.LocalizedMustacheResolver(this.root, Locale.JAPANESE));
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("simple.html");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("simple.html", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testSimpleI18N_literalMutationString118209__26 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", ((StringBuffer) (((StringWriter) (o_testSimpleI18N_literalMutationString118209__26)).getBuffer())).toString());
            TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", ((StringWriter) (o_testSimpleI18N_literalMutationString118209__26)).toString());
            String o_testSimpleI18N_literalMutationString118209__33 = TestUtil.getContents(this.root, "simple.txt");
            TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", o_testSimpleI18N_literalMutationString118209__33);
            sw.toString();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("simple.html", ((DefaultMustache) (m)).getName());
            TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", ((StringBuffer) (((StringWriter) (o_testSimpleI18N_literalMutationString118209__26)).getBuffer())).toString());
            TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", ((StringWriter) (o_testSimpleI18N_literalMutationString118209__26)).toString());
            TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", o_testSimpleI18N_literalMutationString118209__33);
        }
    }

    public void testSimpleI18N_literalMutationString118218_literalMutationString120808_failAssert0_literalMutationString136013_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(new AmplInterpreterTest.LocalizedMustacheResolver(root, Locale.KOREAN));
                    Mustache m = c.compile("@L (o1X&RwI");
                    StringWriter sw = new StringWriter();
                    Writer o_testSimpleI18N_literalMutationString118218__9 = m.execute(sw, new Object() {
                        String name = "BhrBis";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    String o_testSimpleI18N_literalMutationString118218__16 = TestUtil.getContents(root, "simple_ko.txt");
                    sw.toString();
                }
                {
                    MustacheFactory c = new DefaultMustacheFactory(new AmplInterpreterTest.LocalizedMustacheResolver(this.root, Locale.JAPANESE));
                    Mustache m = c.compile("simple.html");
                    StringWriter sw = new StringWriter();
                    Writer o_testSimpleI18N_literalMutationString118218__26 = m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    String o_testSimpleI18N_literalMutationString118218__33 = TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                }
                junit.framework.TestCase.fail("testSimpleI18N_literalMutationString118218_literalMutationString120808 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationString118218_literalMutationString120808_failAssert0_literalMutationString136013 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @L (o1X&RwI not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString118249_literalMutationString120685_failAssert0_add140599_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(new AmplInterpreterTest.LocalizedMustacheResolver(root, Locale.KOREAN));
                    Mustache m = c.compile("simpl[.html");
                    StringWriter sw = new StringWriter();
                    Writer o_testSimpleI18N_literalMutationString118249__9 = m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    String o_testSimpleI18N_literalMutationString118249__16 = TestUtil.getContents(root, "simple_ko.txt");
                    sw.toString();
                }
                {
                    MustacheFactory c = new DefaultMustacheFactory(new AmplInterpreterTest.LocalizedMustacheResolver(this.root, Locale.JAPANESE));
                    Mustache m = c.compile("simple.html");
                    StringWriter sw = new StringWriter();
                    Writer o_testSimpleI18N_literalMutationString118249__26 = m.execute(sw, new Object() {
                        String name = "ChrXis";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    String o_testSimpleI18N_literalMutationString118249__33 = TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                }
                junit.framework.TestCase.fail("testSimpleI18N_literalMutationString118249_literalMutationString120685 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationString118249_literalMutationString120685_failAssert0_add140599 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template simpl[.html not found", expected.getMessage());
        }
    }

    public void testSimpleI18N_literalMutationString118218_literalMutationString120808_failAssert0_add140664_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(new AmplInterpreterTest.LocalizedMustacheResolver(root, Locale.KOREAN));
                    c.compile("@L (o1X&RwI");
                    Mustache m = c.compile("@L (o1X&RwI");
                    StringWriter sw = new StringWriter();
                    Writer o_testSimpleI18N_literalMutationString118218__9 = m.execute(sw, new Object() {
                        String name = "Bhris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    String o_testSimpleI18N_literalMutationString118218__16 = TestUtil.getContents(root, "simple_ko.txt");
                    sw.toString();
                }
                {
                    MustacheFactory c = new DefaultMustacheFactory(new AmplInterpreterTest.LocalizedMustacheResolver(this.root, Locale.JAPANESE));
                    Mustache m = c.compile("simple.html");
                    StringWriter sw = new StringWriter();
                    Writer o_testSimpleI18N_literalMutationString118218__26 = m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    String o_testSimpleI18N_literalMutationString118218__33 = TestUtil.getContents(this.root, "simple.txt");
                    sw.toString();
                }
                junit.framework.TestCase.fail("testSimpleI18N_literalMutationString118218_literalMutationString120808 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleI18N_literalMutationString118218_literalMutationString120808_failAssert0_add140664 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @L (o1X&RwI not found", expected.getMessage());
        }
    }

    public void testRootCheck_add372950_literalMutationString372970_failAssert0_add373721_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    c.compile("ZZI6Ga]Q:]f]_)p+");
                    c.compile("ZZI6Ga]Q:]f]_)p+");
                    Mustache m = c.compile("../../../pom.xml");
                }
                junit.framework.TestCase.fail("testRootCheck_add372950_literalMutationString372970 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_add372950_literalMutationString372970_failAssert0_add373721 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ZZI6Ga]Q:]f]_)p+ not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372947_literalMutationString372998_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            {
                Mustache m = c.compile("Y.}c[k6}B^bCd<V");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372947_literalMutationString372998 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Y.}c[k6}B^bCd<V not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372944_literalMutationString372993_failAssert0_literalMutationString373218_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile("page1{.$txt");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372944_literalMutationString372993 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372944_literalMutationString372993_failAssert0_literalMutationString373218 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template page1{.$txt not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372948_literalMutationString373006_failAssert0_literalMutationString373417_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile("../../.i.gp[om.xml");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373006 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373006_failAssert0_literalMutationString373417 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ../../.i.gp[om.xml not found", expected.getMessage());
        }
    }

    public void testRootCheck_add372950_literalMutationString372970_failAssert0null373800_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    c.compile("ZZI6Ga]Q:]f]_)p+");
                    Mustache m = c.compile(null);
                }
                junit.framework.TestCase.fail("testRootCheck_add372950_literalMutationString372970 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_add372950_literalMutationString372970_failAssert0null373800 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ZZI6Ga]Q:]f]_)p+ not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372948_literalMutationString373004_failAssert0_add373658_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                createMustacheFactory();
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile("W@dW@lY_Rr+8U lrj");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373004 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373004_failAssert0_add373658 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
        }
    }

    public void testRootCheck_add372949_literalMutationString372965_failAssert0_literalMutationString373199_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                createMustacheFactory();
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile(",Me[L6n1zAGrhL-");
                }
                junit.framework.TestCase.fail("testRootCheck_add372949_literalMutationString372965 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_add372949_literalMutationString372965_failAssert0_literalMutationString373199 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ,Me[L6n1zAGrhL- not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372948_literalMutationString373001_failAssert0_literalMutationString373274_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile("../.././p[om.ml");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373001 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373001_failAssert0_literalMutationString373274 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ../.././p[om.ml not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372945_literalMutationString372981_failAssert0_add373628_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                createMustacheFactory();
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile("yC&f$P]XFum)(DzXb");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372945_literalMutationString372981 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372945_literalMutationString372981_failAssert0_add373628 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template yC&f$P]XFum)(DzXb not found", expected.getMessage());
        }
    }

    public void testRootCheck_add372949_literalMutationString372967_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            createMustacheFactory();
            MustacheFactory c = createMustacheFactory();
            {
                Mustache m = c.compile("HB;7UCgU:ydftF03");
            }
            junit.framework.TestCase.fail("testRootCheck_add372949_literalMutationString372967 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template HB;7UCgU:ydftF03 not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372945_literalMutationString372982_failAssert0_add373635_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    c.compile("d7JR:p6!nZf;u7qF");
                    Mustache m = c.compile("d7JR:p6!nZf;u7qF");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372945_literalMutationString372982 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372945_literalMutationString372982_failAssert0_add373635 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template d7JR:p6!nZf;u7qF not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372948_literalMutationString373005_failAssert0_add373653_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    c.compile("../../..yp[om.xml");
                    Mustache m = c.compile("../../..yp[om.xml");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373005 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373005_failAssert0_add373653 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ../../..yp[om.xml not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372944_literalMutationString372991_failAssert0_literalMutationString373225_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile(" doesvnot exist");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372944_literalMutationString372991 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372944_literalMutationString372991_failAssert0_literalMutationString373225 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  doesvnot exist not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372948_literalMutationString373005_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            {
                Mustache m = c.compile("../../..yp[om.xml");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373005 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ../../..yp[om.xml not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372948_literalMutationString373004_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            {
                Mustache m = c.compile("W@dW@lY_Rr+8U lrj");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373004 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
        }
    }

    public void testRootCheck_literalMutationString372948_literalMutationString373001_failAssert0_add373649_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                createMustacheFactory();
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile("../../../p[om.ml");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373001 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373001_failAssert0_add373649 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ../../../p[om.ml not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372947_literalMutationString372999_failAssert0_literalMutationString373327_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile("../../..pom`xml");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372947_literalMutationString372999 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372947_literalMutationString372999_failAssert0_literalMutationString373327 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ../../..pom`xml not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372944_literalMutationString372991_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            {
                Mustache m = c.compile(" does not exist");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372944_literalMutationString372991 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372947_literalMutationString372998_failAssert0_add373717_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                createMustacheFactory();
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile("Y.}c[k6}B^bCd<V");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372947_literalMutationString372998 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372947_literalMutationString372998_failAssert0_add373717 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Y.}c[k6}B^bCd<V not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372944_literalMutationString372991_failAssert0_literalMutationString373228_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile(" does not eist");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372944_literalMutationString372991 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372944_literalMutationString372991_failAssert0_literalMutationString373228 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not eist not found", expected.getMessage());
        }
    }

    public void testRootCheck_add372950_literalMutationString372970_failAssert0_literalMutationString373441_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    c.compile("ZZI6Ga]Q:]f]_)p+");
                    Mustache m = c.compile("r./../../pom.xml");
                }
                junit.framework.TestCase.fail("testRootCheck_add372950_literalMutationString372970 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_add372950_literalMutationString372970_failAssert0_literalMutationString373441 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ZZI6Ga]Q:]f]_)p+ not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372947_literalMutationString372997_failAssert0_literalMutationString373320_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile(" does not exist");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372947_literalMutationString372997 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372947_literalMutationString372997_failAssert0_literalMutationString373320 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372943_literalMutationString372988_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            {
                Mustache m = c.compile("]");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372943_literalMutationString372988 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ] not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372944_literalMutationString372992_failAssert0_add373619_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                createMustacheFactory();
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile(" y#7^DG]m");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372944_literalMutationString372992 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372944_literalMutationString372992_failAssert0_add373619 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  y#7^DG]m not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372943_literalMutationString372988_failAssert0_add373648_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile("]");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372943_literalMutationString372988 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372943_literalMutationString372988_failAssert0_add373648 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ] not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372946_literalMutationString373012_failAssert0_add373664_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    c.compile("#,p0bm}znoL9ABG3");
                    Mustache m = c.compile("#,p0bm}znoL9ABG3");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372946_literalMutationString373012 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372946_literalMutationString373012_failAssert0_add373664 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template #,p0bm}znoL9ABG3 not found", expected.getMessage());
        }
    }

    public void testRootCheck_add372949_literalMutationString372967_failAssert0_add373606_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                createMustacheFactory();
                MustacheFactory c = createMustacheFactory();
                {
                    c.compile("HB;7UCgU:ydftF03");
                    Mustache m = c.compile("HB;7UCgU:ydftF03");
                }
                junit.framework.TestCase.fail("testRootCheck_add372949_literalMutationString372967 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_add372949_literalMutationString372967_failAssert0_add373606 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template HB;7UCgU:ydftF03 not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372945_literalMutationString372985_failAssert0_add373641_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    c.compile("yC&fP]Xum)(DzXb");
                    Mustache m = c.compile("yC&fP]Xum)(DzXb");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372945_literalMutationString372985 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372945_literalMutationString372985_failAssert0_add373641 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template yC&fP]Xum)(DzXb not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372945_literalMutationString372981_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            {
                Mustache m = c.compile("yC&f$P]XFum)(DzXb");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372945_literalMutationString372981 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template yC&f$P]XFum)(DzXb not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372945_literalMutationString372984_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            {
                Mustache m = c.compile("yC&fP]XFum+(DzXb");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372945_literalMutationString372984 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template yC&fP]XFum+(DzXb not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372945_literalMutationString372985_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            {
                Mustache m = c.compile("yC&fP]Xum)(DzXb");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372945_literalMutationString372985 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template yC&fP]Xum)(DzXb not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372945_literalMutationString372982_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            {
                Mustache m = c.compile("d7JR:p6!nZf;u7qF");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372945_literalMutationString372982 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template d7JR:p6!nZf;u7qF not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372948_literalMutationString373006_failAssert0_add373711_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                createMustacheFactory();
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile("../../.i./p[om.xml");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373006 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373006_failAssert0_add373711 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ../../.i./p[om.xml not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372948_literalMutationString373006_failAssert0_add373712_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    c.compile("../../.i./p[om.xml");
                    Mustache m = c.compile("../../.i./p[om.xml");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373006 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373006_failAssert0_add373712 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ../../.i./p[om.xml not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372948_literalMutationString373006_failAssert0_add373713_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile("../../.i./p[om.xml");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373006 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373006_failAssert0_add373713 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ../../.i./p[om.xml not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372944_literalMutationString372991_failAssert0_add373627_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile(" does not exist");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372944_literalMutationString372991 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372944_literalMutationString372991_failAssert0_add373627 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372944_literalMutationString372991_failAssert0_add373626_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    c.compile(" does not exist");
                    Mustache m = c.compile(" does not exist");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372944_literalMutationString372991 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372944_literalMutationString372991_failAssert0_add373626 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testRootCheck_add372950_literalMutationString372978_failAssert0_literalMutationString373452_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    c.compile("[v73Kx*!fE@h6)Ch");
                    Mustache m = c.compile("aE{bBN&O}*/N){5^");
                }
                junit.framework.TestCase.fail("testRootCheck_add372950_literalMutationString372978 should have thrown MustacheException");
            }
            junit.framework.TestCase.fail("testRootCheck_add372950_literalMutationString372978_failAssert0_literalMutationString373452 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [v73Kx*!fE@h6)Ch not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372945_literalMutationString372982_failAssert0_literalMutationString373246_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile("d7JR:p6!nZfZ;u7qF");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372945_literalMutationString372982 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372945_literalMutationString372982_failAssert0_literalMutationString373246 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template d7JR:p6!nZfZ;u7qF not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372945_literalMutationString372984_failAssert0_add373639_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile("yC&fP]XFum+(DzXb");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372945_literalMutationString372984 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372945_literalMutationString372984_failAssert0_add373639 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template yC&fP]XFum+(DzXb not found", expected.getMessage());
        }
    }

    public void testRootCheck_add372950_literalMutationString372976_failAssert0_literalMutationString373502_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    c.compile("mmb}7VxRunJ)ue#o");
                    Mustache m = c.compile("../.U./../pom.xml");
                }
                junit.framework.TestCase.fail("testRootCheck_add372950_literalMutationString372976 should have thrown MustacheException");
            }
            junit.framework.TestCase.fail("testRootCheck_add372950_literalMutationString372976_failAssert0_literalMutationString373502 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template mmb}7VxRunJ)ue#o not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372946_literalMutationString373011_failAssert0_literalMutationString373424_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile("3_]Q,H7S9:$tOxG[");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372946_literalMutationString373011 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372946_literalMutationString373011_failAssert0_literalMutationString373424 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 3_]Q,H7S9:$tOxG[ not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372944_literalMutationString372992_failAssert0_literalMutationString373212_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile(" y#7^}DG]m");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372944_literalMutationString372992 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372944_literalMutationString372992_failAssert0_literalMutationString373212 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  y#7^}DG]m not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372944_literalMutationString372992_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            {
                Mustache m = c.compile(" y#7^DG]m");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372944_literalMutationString372992 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  y#7^DG]m not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372947_literalMutationString372998_failAssert0_add373718_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    c.compile("Y.}c[k6}B^bCd<V");
                    Mustache m = c.compile("Y.}c[k6}B^bCd<V");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372947_literalMutationString372998 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372947_literalMutationString372998_failAssert0_add373718 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Y.}c[k6}B^bCd<V not found", expected.getMessage());
        }
    }

    public void testRootCheck_add372950_literalMutationString372970_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            {
                c.compile("ZZI6Ga]Q:]f]_)p+");
                Mustache m = c.compile("../../../pom.xml");
            }
            junit.framework.TestCase.fail("testRootCheck_add372950_literalMutationString372970 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ZZI6Ga]Q:]f]_)p+ not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372948_literalMutationString373001_failAssert0_add373651_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile("../../../p[om.ml");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373001 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373001_failAssert0_add373651 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ../../../p[om.ml not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372944_literalMutationString372992_failAssert0_add373620_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    c.compile(" y#7^DG]m");
                    Mustache m = c.compile(" y#7^DG]m");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372944_literalMutationString372992 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372944_literalMutationString372992_failAssert0_add373620 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  y#7^DG]m not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372948_literalMutationString373001_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            {
                Mustache m = c.compile("../../../p[om.ml");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373001 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ../../../p[om.ml not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372948_literalMutationString373006_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            {
                Mustache m = c.compile("../../.i./p[om.xml");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373006 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ../../.i./p[om.xml not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372946_literalMutationString373012_failAssert0_add373663_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                createMustacheFactory();
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile("#,p0bm}znoL9ABG3");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372946_literalMutationString373012 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372946_literalMutationString373012_failAssert0_add373663 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template #,p0bm}znoL9ABG3 not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372946_literalMutationString373012_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            {
                Mustache m = c.compile("#,p0bm}znoL9ABG3");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372946_literalMutationString373012 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template #,p0bm}znoL9ABG3 not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372948_literalMutationString373001_failAssert0_literalMutationString373271_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile(".R./../../p[om.ml");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373001 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373001_failAssert0_literalMutationString373271 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template .R./../../p[om.ml not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372943_literalMutationString372987_failAssert0_literalMutationString373264_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile("p|age1.txt");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372943_literalMutationString372987 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372943_literalMutationString372987_failAssert0_literalMutationString373264 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template p|age1.txt not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372945_literalMutationString372981_failAssert0_literalMutationString373232_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile("y&f$P]XFum)(DzXb");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372945_literalMutationString372981 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372945_literalMutationString372981_failAssert0_literalMutationString373232 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template y&f$P]XFum)(DzXb not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372948_literalMutationString373005_failAssert0_add373654_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile("../../..yp[om.xml");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373005 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372948_literalMutationString373005_failAssert0_add373654 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ../../..yp[om.xml not found", expected.getMessage());
        }
    }

    public void testRootCheck_literalMutationString372947_literalMutationString372998_failAssert0_literalMutationString373428_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                {
                    Mustache m = c.compile("Y.}c[k6}B^bC<V");
                }
                junit.framework.TestCase.fail("testRootCheck_literalMutationString372947_literalMutationString372998 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRootCheck_literalMutationString372947_literalMutationString372998_failAssert0_literalMutationString373428 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Y.}c[k6}B^bC<V not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString162536_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = new DefaultMustacheFactory(root) {
                @Override
                public String filterText(String appended, boolean startOfLine) {
                    if (startOfLine) {
                        appended = appended.replaceAll("^[\t ]+", "");
                    }
                    return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                }
            };
            Mustache m = c.compile("1TFf#!?dv9}MC+[i%_2");
            StringWriter sw = new StringWriter();
            m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            TestUtil.getContents(root, "simplefiltered.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 1TFf#!?dv9}MC+[i%_2 not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString162536_failAssert0null164393_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public String filterText(String appended, boolean startOfLine) {
                        if (startOfLine) {
                            appended = appended.replaceAll("^[\t ]+", "");
                        }
                        return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*\n[ \n\t]*", null);
                    }
                };
                Mustache m = c.compile("1TFf#!?dv9}MC+[i%_2");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                TestUtil.getContents(root, "simplefiltered.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0null164393 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 1TFf#!?dv9}MC+[i%_2 not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString162536_failAssert0null164387_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public String filterText(String appended, boolean startOfLine) {
                        if (startOfLine) {
                            appended = appended.replaceAll("^[\t ]+", "");
                        }
                        return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                    }
                };
                Mustache m = c.compile("1TFf#!?dv9}MC+[i%_2");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                TestUtil.getContents(root, "simplefiltered.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0null164387 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 1TFf#!?dv9}MC+[i%_2 not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString162536_failAssert0_add164184_failAssert0_add176995_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public String filterText(String appended, boolean startOfLine) {
                            if (startOfLine) {
                                appended = appended.replaceAll("^[\t ]+", "");
                            }
                            appended.replaceAll("[ \t]+", " ");
                            appended.replaceAll("[ \t]+", " ");
                            return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                        }
                    };
                    Mustache m = c.compile("1TFf#!?dv9}MC+[i%_2");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    TestUtil.getContents(root, "simplefiltered.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0_add164184 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0_add164184_failAssert0_add176995 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 1TFf#!?dv9}MC+[i%_2 not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString162536_failAssert0_add164184_failAssert0_literalMutationNumber168984_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public String filterText(String appended, boolean startOfLine) {
                            if (startOfLine) {
                                appended = appended.replaceAll("^[\t ]+", "");
                            }
                            appended.replaceAll("[ \t]+", " ");
                            return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                        }
                    };
                    Mustache m = c.compile("1TFf#!?dv9}MC+[i%_2");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 20000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    TestUtil.getContents(root, "simplefiltered.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0_add164184 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0_add164184_failAssert0_literalMutationNumber168984 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 1TFf#!?dv9}MC+[i%_2 not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString162536_failAssert0_add164188_failAssert0_literalMutationNumber168919_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public String filterText(String appended, boolean startOfLine) {
                            if (startOfLine) {
                                appended = appended.replaceAll("^[\t ]+", "");
                            }
                            return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                        }
                    };
                    Mustache m = c.compile("1TFf#!?dv9}MC+[i%_2");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * -0.6)));
                        }

                        boolean in_ca = true;
                    });
                    TestUtil.getContents(root, "simplefiltered.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0_add164188 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0_add164188_failAssert0_literalMutationNumber168919 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 1TFf#!?dv9}MC+[i%_2 not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString162536_failAssert0_add164184_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public String filterText(String appended, boolean startOfLine) {
                        if (startOfLine) {
                            appended = appended.replaceAll("^[\t ]+", "");
                        }
                        appended.replaceAll("[ \t]+", " ");
                        return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                    }
                };
                Mustache m = c.compile("1TFf#!?dv9}MC+[i%_2");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                TestUtil.getContents(root, "simplefiltered.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0_add164184 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 1TFf#!?dv9}MC+[i%_2 not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString162538_failAssert0_literalMutationString163827_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public String filterText(String appended, boolean startOfLine) {
                        if (startOfLine) {
                            appended = appended.replaceAll("^[\t ]+", "");
                        }
                        return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                    }
                };
                Mustache m = c.compile("^-E|ynj{nV(8ca%]fYj");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                TestUtil.getContents(root, "simplefiltered.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162538 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162538_failAssert0_literalMutationString163827 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ^-E|ynj{nV(8ca%]fYj not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString162536_failAssert0null164389_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public String filterText(String appended, boolean startOfLine) {
                        if (startOfLine) {
                            appended = appended.replaceAll("^[\t ]+", null);
                        }
                        return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                    }
                };
                Mustache m = c.compile("1TFf#!?dv9}MC+[i%_2");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                TestUtil.getContents(root, "simplefiltered.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0null164389 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 1TFf#!?dv9}MC+[i%_2 not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString162536_failAssert0_add164184_failAssert0null178761_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public String filterText(String appended, boolean startOfLine) {
                            if (startOfLine) {
                                appended = appended.replaceAll("^[\t ]+", "");
                            }
                            appended.replaceAll("[ \t]+", " ");
                            return appended.replaceAll(null, " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                        }
                    };
                    Mustache m = c.compile("1TFf#!?dv9}MC+[i%_2");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    TestUtil.getContents(root, "simplefiltered.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0_add164184 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0_add164184_failAssert0null178761 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 1TFf#!?dv9}MC+[i%_2 not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString162536_failAssert0_add164182_failAssert0_literalMutationString174517_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public String filterText(String appended, boolean startOfLine) {
                            if (startOfLine) {
                                appended.replaceAll("^[\t ]+", "");
                                appended = appended.replaceAll("^[\t ]+", "");
                            }
                            return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                        }
                    };
                    Mustache m = c.compile("1TFf#!?dvW9}MC+[i%_2");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    TestUtil.getContents(root, "simplefiltered.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0_add164182 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0_add164182_failAssert0_literalMutationString174517 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 1TFf#!?dvW9}MC+[i%_2 not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString162561_failAssert0_literalMutationString163352_failAssert0_literalMutationString176317_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public String filterText(String appended, boolean startOfLine) {
                            if (startOfLine) {
                                appended = appended.replaceAll("^[\t ]+", "");
                            }
                            return appended.replaceAll("[ \t]+", "").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                        }
                    };
                    Mustache m = c.compile("=x.d(l2o@g8e|mT7/Cb");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    TestUtil.getContents(root, "}implefiltered.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162561 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162561_failAssert0_literalMutationString163352 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162561_failAssert0_literalMutationString163352_failAssert0_literalMutationString176317 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template =x.d(l2o@g8e|mT7/Cb not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString162536_failAssert0_literalMutationNumber163895_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public String filterText(String appended, boolean startOfLine) {
                        if (startOfLine) {
                            appended = appended.replaceAll("^[\t ]+", "");
                        }
                        return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                    }
                };
                Mustache m = c.compile("1TFf#!?dv9}MC+[i%_2");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 0;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                TestUtil.getContents(root, "simplefiltered.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0_literalMutationNumber163895 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 1TFf#!?dv9}MC+[i%_2 not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString162536_failAssert0_literalMutationString163880_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public String filterText(String appended, boolean startOfLine) {
                        if (startOfLine) {
                            appended = appended.replaceAll("^[\t ]+", "");
                        }
                        return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*\n[ \n\t]*", "");
                    }
                };
                Mustache m = c.compile("1TFf#!?dv9}MC+[i%_2");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                TestUtil.getContents(root, "simplefiltered.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0_literalMutationString163880 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 1TFf#!?dv9}MC+[i%_2 not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString162536_failAssert0_add164182_failAssert0_add177802_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public String filterText(String appended, boolean startOfLine) {
                            if (startOfLine) {
                                appended.replaceAll("^[\t ]+", "");
                                appended = appended.replaceAll("^[\t ]+", "");
                            }
                            return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                        }
                    };
                    Mustache m = c.compile("1TFf#!?dv9}MC+[i%_2");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    TestUtil.getContents(root, "simplefiltered.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0_add164182 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0_add164182_failAssert0_add177802 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 1TFf#!?dv9}MC+[i%_2 not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString162536_failAssert0_literalMutationString163878_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public String filterText(String appended, boolean startOfLine) {
                        if (startOfLine) {
                            appended = appended.replaceAll("^[\t ]+", "");
                        }
                        return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*!\n[ \n\t]*", "\n");
                    }
                };
                Mustache m = c.compile("1TFf#!?dv9}MC+[i%_2");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                TestUtil.getContents(root, "simplefiltered.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0_literalMutationString163878 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 1TFf#!?dv9}MC+[i%_2 not found", expected.getMessage());
        }
    }

    public void testSimpleFilterednull162583_failAssert0_add164048_failAssert0_literalMutationString167778_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public String filterText(String appended, boolean startOfLine) {
                            if (startOfLine) {
                                appended = appended.replaceAll("^[\t ]+", "");
                            }
                            appended.replaceAll("[ \t]+", " ");
                            return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                        }
                    };
                    Mustache m = c.compile("7vs`Y[uA#GIOEQJW}j>");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleFilterednull162583 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testSimpleFilterednull162583_failAssert0_add164048 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testSimpleFilterednull162583_failAssert0_add164048_failAssert0_literalMutationString167778 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 7vs`Y[uA#GIOEQJW}j> not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString162536_failAssert0_add164182_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public String filterText(String appended, boolean startOfLine) {
                        if (startOfLine) {
                            appended.replaceAll("^[\t ]+", "");
                            appended = appended.replaceAll("^[\t ]+", "");
                        }
                        return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                    }
                };
                Mustache m = c.compile("1TFf#!?dv9}MC+[i%_2");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                TestUtil.getContents(root, "simplefiltered.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0_add164182 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 1TFf#!?dv9}MC+[i%_2 not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString162536_failAssert0_add164188_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public String filterText(String appended, boolean startOfLine) {
                        if (startOfLine) {
                            appended = appended.replaceAll("^[\t ]+", "");
                        }
                        return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                    }
                };
                Mustache m = c.compile("1TFf#!?dv9}MC+[i%_2");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                TestUtil.getContents(root, "simplefiltered.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0_add164188 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 1TFf#!?dv9}MC+[i%_2 not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString162536_failAssert0_add164188_failAssert0_add176992_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public String filterText(String appended, boolean startOfLine) {
                            if (startOfLine) {
                                appended = appended.replaceAll("^[\t ]+", "");
                            }
                            return appended.replaceAll("[ \t]+", " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                        }
                    };
                    Mustache m = c.compile("1TFf#!?dv9}MC+[i%_2");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    TestUtil.getContents(root, "simplefiltered.txt");
                    sw.toString();
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0_add164188 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0_add164188_failAssert0_add176992 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 1TFf#!?dv9}MC+[i%_2 not found", expected.getMessage());
        }
    }

    public void testSimpleFiltered_literalMutationString162536_failAssert0_add164188_failAssert0null178749_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public String filterText(String appended, boolean startOfLine) {
                            if (startOfLine) {
                                appended = appended.replaceAll("^[\t ]+", "");
                            }
                            return appended.replaceAll(null, " ").replaceAll("[ \n\t]*\n[ \n\t]*", "\n");
                        }
                    };
                    Mustache m = c.compile("1TFf#!?dv9}MC+[i%_2");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    TestUtil.getContents(root, "simplefiltered.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0_add164188 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleFiltered_literalMutationString162536_failAssert0_add164188_failAssert0null178749 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 1TFf#!?dv9}MC+[i%_2 not found", expected.getMessage());
        }
    }

    public void testTypedSimple_literalMutationString142814_failAssert0_literalMutationString144414_failAssert0_literalMutationNumber152354_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    final Object scope = new Object() {
                        String name = "Chris";

                        int value = 10000;

                        class MyObject {
                            int taxed_value() {
                                return ((int) ((value) - ((value) * 0.0)));
                            }

                            String fred = "";
                        }

                        MyObject in_ca = new MyObject();

                        boolean test = false;
                    };
                    DefaultMustacheFactory c = new DefaultMustacheFactory(root);
                    c.setObjectHandler(new TypeCheckingHandler());
                    Mustache m = c.compile("YiV1{BcI>");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, scope.getClass()).flush();
                    TestUtil.getContents(root, "simpletyped.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testTypedSimple_literalMutationString142814 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testTypedSimple_literalMutationString142814_failAssert0_literalMutationString144414 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testTypedSimple_literalMutationString142814_failAssert0_literalMutationString144414_failAssert0_literalMutationNumber152354 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template YiV1{BcI> not found", expected.getMessage());
        }
    }

    public void testTypedSimple_literalMutationNumber142797null145484_failAssert0_literalMutationString150346_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                final Object scope = new Object() {
                    String name = "Chris";

                    int value = 0;

                    class MyObject {
                        int taxed_value() {
                            return ((int) ((value) - ((value) * 0.4)));
                        }

                        String fred = "";
                    }

                    MyObject in_ca = new MyObject();

                    boolean test = false;
                };
                DefaultMustacheFactory c = new DefaultMustacheFactory(root);
                c.setObjectHandler(new TypeCheckingHandler());
                Mustache m = c.compile("simple.h]ml");
                StringWriter sw = new StringWriter();
                m.execute(sw, scope.getClass()).flush();
                String o_testTypedSimple_literalMutationNumber142797__24 = TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testTypedSimple_literalMutationNumber142797null145484 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testTypedSimple_literalMutationNumber142797null145484_failAssert0_literalMutationString150346 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template simple.h]ml not found", expected.getMessage());
        }
    }

    public void testTypedSimple_literalMutationString142812_failAssert0_add145175_failAssert0null155547_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    final Object scope = new Object() {
                        String name = "Chris";

                        int value = 10000;

                        class MyObject {
                            int taxed_value() {
                                return ((int) ((value) - ((value) * 0.4)));
                            }

                            String fred = "";
                        }

                        MyObject in_ca = new MyObject();

                        boolean test = false;
                    };
                    DefaultMustacheFactory c = new DefaultMustacheFactory(root);
                    c.setObjectHandler(new TypeCheckingHandler());
                    Mustache m = c.compile("+>u9d1gJ_DT");
                    StringWriter sw = new StringWriter();
                    m.execute(null, scope.getClass());
                    m.execute(sw, scope.getClass()).flush();
                    TestUtil.getContents(root, "simpletyped.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812_failAssert0_add145175 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812_failAssert0_add145175_failAssert0null155547 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +>u9d1gJ_DT not found", expected.getMessage());
        }
    }

    public void testTypedSimple_literalMutationString142812_failAssert0_literalMutationNumber144363_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                final Object scope = new Object() {
                    String name = "Chris";

                    int value = 10001;

                    class MyObject {
                        int taxed_value() {
                            return ((int) ((value) - ((value) * 0.4)));
                        }

                        String fred = "";
                    }

                    MyObject in_ca = new MyObject();

                    boolean test = false;
                };
                DefaultMustacheFactory c = new DefaultMustacheFactory(root);
                c.setObjectHandler(new TypeCheckingHandler());
                Mustache m = c.compile("+>u9d1gJ_DT");
                StringWriter sw = new StringWriter();
                m.execute(sw, scope.getClass()).flush();
                TestUtil.getContents(root, "simpletyped.txt");
                sw.toString();
                junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812_failAssert0_literalMutationNumber144363 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +>u9d1gJ_DT not found", expected.getMessage());
        }
    }

    public void testTypedSimple_literalMutationString142814_failAssert0_literalMutationString144414_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                final Object scope = new Object() {
                    String name = "Chris";

                    int value = 10000;

                    class MyObject {
                        int taxed_value() {
                            return ((int) ((value) - ((value) * 0.4)));
                        }

                        String fred = "";
                    }

                    MyObject in_ca = new MyObject();

                    boolean test = false;
                };
                DefaultMustacheFactory c = new DefaultMustacheFactory(root);
                c.setObjectHandler(new TypeCheckingHandler());
                Mustache m = c.compile("YiV1{BcI>");
                StringWriter sw = new StringWriter();
                m.execute(sw, scope.getClass()).flush();
                TestUtil.getContents(root, "simpletyped.txt");
                sw.toString();
                junit.framework.TestCase.fail("testTypedSimple_literalMutationString142814 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testTypedSimple_literalMutationString142814_failAssert0_literalMutationString144414 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template YiV1{BcI> not found", expected.getMessage());
        }
    }

    public void testTypedSimple_literalMutationString142812_failAssert0_add145175_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                final Object scope = new Object() {
                    String name = "Chris";

                    int value = 10000;

                    class MyObject {
                        int taxed_value() {
                            return ((int) ((value) - ((value) * 0.4)));
                        }

                        String fred = "";
                    }

                    MyObject in_ca = new MyObject();

                    boolean test = false;
                };
                DefaultMustacheFactory c = new DefaultMustacheFactory(root);
                c.setObjectHandler(new TypeCheckingHandler());
                Mustache m = c.compile("+>u9d1gJ_DT");
                StringWriter sw = new StringWriter();
                m.execute(sw, scope.getClass());
                m.execute(sw, scope.getClass()).flush();
                TestUtil.getContents(root, "simpletyped.txt");
                sw.toString();
                junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812_failAssert0_add145175 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +>u9d1gJ_DT not found", expected.getMessage());
        }
    }

    public void testTypedSimple_literalMutationString142814_failAssert0_literalMutationString144414_failAssert0_add154673_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    final Object scope = new Object() {
                        String name = "Chris";

                        int value = 10000;

                        class MyObject {
                            int taxed_value() {
                                return ((int) ((value) - ((value) * 0.4)));
                            }

                            String fred = "";
                        }

                        MyObject in_ca = new MyObject();

                        boolean test = false;
                    };
                    DefaultMustacheFactory c = new DefaultMustacheFactory(root);
                    c.setObjectHandler(new TypeCheckingHandler());
                    Mustache m = c.compile("YiV1{BcI>");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, scope.getClass());
                    m.execute(sw, scope.getClass()).flush();
                    TestUtil.getContents(root, "simpletyped.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testTypedSimple_literalMutationString142814 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testTypedSimple_literalMutationString142814_failAssert0_literalMutationString144414 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testTypedSimple_literalMutationString142814_failAssert0_literalMutationString144414_failAssert0_add154673 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template YiV1{BcI> not found", expected.getMessage());
        }
    }

    public void testTypedSimple_literalMutationString142812_failAssert0_add145175_failAssert0_literalMutationString150812_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    final Object scope = new Object() {
                        String name = "Chris";

                        int value = 10000;

                        class MyObject {
                            int taxed_value() {
                                return ((int) ((value) - ((value) * 0.4)));
                            }

                            String fred = "";
                        }

                        MyObject in_ca = new MyObject();

                        boolean test = false;
                    };
                    DefaultMustacheFactory c = new DefaultMustacheFactory(root);
                    c.setObjectHandler(new TypeCheckingHandler());
                    Mustache m = c.compile("+>u9d1gJ_DT");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, scope.getClass());
                    m.execute(sw, scope.getClass()).flush();
                    TestUtil.getContents(root, "-/opU1vw(uq7uB%");
                    sw.toString();
                    junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812_failAssert0_add145175 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812_failAssert0_add145175_failAssert0_literalMutationString150812 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +>u9d1gJ_DT not found", expected.getMessage());
        }
    }

    public void testTypedSimple_literalMutationString142812_failAssert0null145522_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                final Object scope = new Object() {
                    String name = "Chris";

                    int value = 10000;

                    class MyObject {
                        int taxed_value() {
                            return ((int) ((value) - ((value) * 0.4)));
                        }

                        String fred = "";
                    }

                    MyObject in_ca = new MyObject();

                    boolean test = false;
                };
                DefaultMustacheFactory c = new DefaultMustacheFactory(root);
                c.setObjectHandler(new TypeCheckingHandler());
                Mustache m = c.compile("+>u9d1gJ_DT");
                StringWriter sw = new StringWriter();
                m.execute(null, scope.getClass()).flush();
                TestUtil.getContents(root, "simpletyped.txt");
                sw.toString();
                junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812_failAssert0null145522 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +>u9d1gJ_DT not found", expected.getMessage());
        }
    }

    public void testTypedSimple_literalMutationString142812_failAssert0_literalMutationString144384_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                final Object scope = new Object() {
                    String name = "Chris";

                    int value = 10000;

                    class MyObject {
                        int taxed_value() {
                            return ((int) ((value) - ((value) * 0.4)));
                        }

                        String fred = "";
                    }

                    MyObject in_ca = new MyObject();

                    boolean test = false;
                };
                DefaultMustacheFactory c = new DefaultMustacheFactory(root);
                c.setObjectHandler(new TypeCheckingHandler());
                Mustache m = c.compile("+>u9d1gJ_DT");
                StringWriter sw = new StringWriter();
                m.execute(sw, scope.getClass()).flush();
                TestUtil.getContents(root, "{ScbHm/^zoe?&Fp");
                sw.toString();
                junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812_failAssert0_literalMutationString144384 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +>u9d1gJ_DT not found", expected.getMessage());
        }
    }

    public void testTypedSimple_remove142834_literalMutationString143275_failAssert0_literalMutationString151986_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                final Object scope = new Object() {
                    String name = "Chris";

                    int value = 10000;

                    class MyObject {
                        int taxed_value() {
                            return ((int) ((value) - ((value) * 0.4)));
                        }

                        String fred = "";
                    }

                    MyObject in_ca = new MyObject();

                    boolean test = false;
                };
                DefaultMustacheFactory c = new DefaultMustacheFactory(root);
                c.setObjectHandler(new TypeCheckingHandler());
                Mustache m = c.compile("L-G]:#(J*");
                StringWriter sw = new StringWriter();
                String o_testTypedSimple_remove142834__20 = TestUtil.getContents(root, "simpletyped.txt");
                sw.toString();
                junit.framework.TestCase.fail("testTypedSimple_remove142834_literalMutationString143275 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testTypedSimple_remove142834_literalMutationString143275_failAssert0_literalMutationString151986 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template L-G]:#(J* not found", expected.getMessage());
        }
    }

    public void testTypedSimple_literalMutationString142814_failAssert0_literalMutationString144414_failAssert0null155683_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    final Object scope = new Object() {
                        String name = "Chris";

                        int value = 10000;

                        class MyObject {
                            int taxed_value() {
                                return ((int) ((value) - ((value) * 0.4)));
                            }

                            String fred = "";
                        }

                        MyObject in_ca = new MyObject();

                        boolean test = false;
                    };
                    DefaultMustacheFactory c = new DefaultMustacheFactory(root);
                    c.setObjectHandler(new TypeCheckingHandler());
                    Mustache m = c.compile("YiV1{BcI>");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, scope.getClass()).flush();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testTypedSimple_literalMutationString142814 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testTypedSimple_literalMutationString142814_failAssert0_literalMutationString144414 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testTypedSimple_literalMutationString142814_failAssert0_literalMutationString144414_failAssert0null155683 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template YiV1{BcI> not found", expected.getMessage());
        }
    }

    public void testTypedSimple_literalMutationString142812_failAssert0_literalMutationNumber144363_failAssert0_add154654_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    final Object scope = new Object() {
                        String name = "Chris";

                        int value = 10001;

                        class MyObject {
                            int taxed_value() {
                                return ((int) ((value) - ((value) * 0.4)));
                            }

                            String fred = "";
                        }

                        MyObject in_ca = new MyObject();

                        boolean test = false;
                    };
                    DefaultMustacheFactory c = new DefaultMustacheFactory(root);
                    c.setObjectHandler(new TypeCheckingHandler());
                    c.setObjectHandler(new TypeCheckingHandler());
                    Mustache m = c.compile("+>u9d1gJ_DT");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, scope.getClass()).flush();
                    TestUtil.getContents(root, "simpletyped.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812_failAssert0_literalMutationNumber144363 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812_failAssert0_literalMutationNumber144363_failAssert0_add154654 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +>u9d1gJ_DT not found", expected.getMessage());
        }
    }

    public void testTypedSimple_literalMutationString142812_failAssert0_add145176_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                final Object scope = new Object() {
                    String name = "Chris";

                    int value = 10000;

                    class MyObject {
                        int taxed_value() {
                            return ((int) ((value) - ((value) * 0.4)));
                        }

                        String fred = "";
                    }

                    MyObject in_ca = new MyObject();

                    boolean test = false;
                };
                DefaultMustacheFactory c = new DefaultMustacheFactory(root);
                c.setObjectHandler(new TypeCheckingHandler());
                Mustache m = c.compile("+>u9d1gJ_DT");
                StringWriter sw = new StringWriter();
                scope.getClass();
                m.execute(sw, scope.getClass()).flush();
                TestUtil.getContents(root, "simpletyped.txt");
                sw.toString();
                junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812_failAssert0_add145176 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +>u9d1gJ_DT not found", expected.getMessage());
        }
    }

    public void testTypedSimple_literalMutationString142812_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            final Object scope = new Object() {
                String name = "Chris";

                int value = 10000;

                class MyObject {
                    int taxed_value() {
                        return ((int) ((value) - ((value) * 0.4)));
                    }

                    String fred = "";
                }

                MyObject in_ca = new MyObject();

                boolean test = false;
            };
            DefaultMustacheFactory c = new DefaultMustacheFactory(root);
            c.setObjectHandler(new TypeCheckingHandler());
            Mustache m = c.compile("+>u9d1gJ_DT");
            StringWriter sw = new StringWriter();
            m.execute(sw, scope.getClass()).flush();
            TestUtil.getContents(root, "simpletyped.txt");
            sw.toString();
            junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +>u9d1gJ_DT not found", expected.getMessage());
        }
    }

    public void testTypedSimple_literalMutationString142812_failAssert0_literalMutationNumber144363_failAssert0_literalMutationString152301_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    final Object scope = new Object() {
                        String name = "Chris";

                        int value = 10001;

                        class MyObject {
                            int taxed_value() {
                                return ((int) ((value) - ((value) * 0.4)));
                            }

                            String fred = "";
                        }

                        MyObject in_ca = new MyObject();

                        boolean test = false;
                    };
                    DefaultMustacheFactory c = new DefaultMustacheFactory(root);
                    c.setObjectHandler(new TypeCheckingHandler());
                    Mustache m = c.compile("+>u9d1gJ_DT");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, scope.getClass()).flush();
                    TestUtil.getContents(root, "");
                    sw.toString();
                    junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812_failAssert0_literalMutationNumber144363 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812_failAssert0_literalMutationNumber144363_failAssert0_literalMutationString152301 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +>u9d1gJ_DT not found", expected.getMessage());
        }
    }

    public void testTypedSimple_literalMutationString142812_failAssert0_add145175_failAssert0_add154275_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    final Object scope = new Object() {
                        String name = "Chris";

                        int value = 10000;

                        class MyObject {
                            int taxed_value() {
                                return ((int) ((value) - ((value) * 0.4)));
                            }

                            String fred = "";
                        }

                        MyObject in_ca = new MyObject();

                        boolean test = false;
                    };
                    DefaultMustacheFactory c = new DefaultMustacheFactory(root);
                    c.setObjectHandler(new TypeCheckingHandler());
                    c.compile("+>u9d1gJ_DT");
                    Mustache m = c.compile("+>u9d1gJ_DT");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, scope.getClass());
                    m.execute(sw, scope.getClass()).flush();
                    TestUtil.getContents(root, "simpletyped.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812_failAssert0_add145175 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testTypedSimple_literalMutationString142812_failAssert0_add145175_failAssert0_add154275 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +>u9d1gJ_DT not found", expected.getMessage());
        }
    }

    private DefaultMustacheFactory createMustacheFactory() {
        return new DefaultMustacheFactory(root);
    }

    public void testRecurision_add390738_literalMutationString390792_failAssert0() throws IOException {
        try {
            StringWriter o_testRecurision_add390738__1 = execute("ogm_OO;0:p:wU|", new Object() {
                Object value = new Object() {
                    boolean value = false;
                };
            });
            StringWriter sw = execute("recursion.html", new Object() {
                Object value = new Object() {
                    boolean value = false;
                };
            });
            String o_testRecurision_add390738__20 = TestUtil.getContents(root, "recursion.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRecurision_add390738_literalMutationString390792 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ogm_OO;0:p:wU| not found", expected.getMessage());
        }
    }

    public void testRecurision_add390740_remove391137_literalMutationString391945_failAssert0() throws IOException {
        try {
            StringWriter sw = execute("%oGUd,CF{kVQkm", new Object() {
                Object value = new Object() {
                    boolean value = false;
                };
            });
            sw.toString();
            String o_testRecurision_add390740__12 = TestUtil.getContents(this.root, "recursion.txt");
            junit.framework.TestCase.fail("testRecurision_add390740_remove391137_literalMutationString391945 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template %oGUd,CF{kVQkm not found", expected.getMessage());
        }
    }

    public void testRecurision_add390738_literalMutationString390792_failAssert0null395517_failAssert0() throws IOException {
        try {
            {
                StringWriter o_testRecurision_add390738__1 = execute("ogm_OO;0:p:wU|", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                StringWriter sw = execute(null, new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                String o_testRecurision_add390738__20 = TestUtil.getContents(root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_add390738_literalMutationString390792 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_add390738_literalMutationString390792_failAssert0null395517 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ogm_OO;0:p:wU| not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString390730_failAssert0_literalMutationBoolean390987_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("%4z[@>AKg(3A=I", new Object() {
                    Object value = new Object() {
                        boolean value = true;
                    };
                });
                TestUtil.getContents(root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationString390730 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString390730_failAssert0_literalMutationBoolean390987 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template %4z[@>AKg(3A=I not found", expected.getMessage());
        }
    }

    public void testRecurision_add390740_add391059_literalMutationString391744_failAssert0() throws IOException {
        try {
            StringWriter sw = execute(">x}0, v{N_N$OQ", new Object() {
                Object value = new Object() {
                    boolean value = false;
                };
            });
            sw.toString();
            String o_testRecurision_add390740__12 = TestUtil.getContents(root, "recursion.txt");
            sw.toString();
            sw.toString();
            junit.framework.TestCase.fail("testRecurision_add390740_add391059_literalMutationString391744 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template >x}0, v{N_N$OQ not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString390725_failAssert0_literalMutationString391015_failAssert0_literalMutationString393905_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("H^36]VfRVbR&Pyl", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    TestUtil.getContents(root, "");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecurision_literalMutationString390725 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecurision_literalMutationString390725_failAssert0_literalMutationString391015 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString390725_failAssert0_literalMutationString391015_failAssert0_literalMutationString393905 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template H^36]VfRVbR&Pyl not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString390736_failAssert0_add391092_failAssert0_literalMutationString392812_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute(".z{`u?q<*]u-Pu", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    TestUtil.getContents(root, "recursion.{txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecurision_literalMutationString390736 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testRecurision_literalMutationString390736_failAssert0_add391092 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString390736_failAssert0_add391092_failAssert0_literalMutationString392812 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template .z{`u?q<*]u-Pu not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString390736_failAssert0_add391089_failAssert0_literalMutationString394011_failAssert0() throws IOException {
        try {
            {
                {
                    execute("d5JcVBHdYkDnT}", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    StringWriter sw = execute("recursion.html", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    TestUtil.getContents(root, "recursion.{txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecurision_literalMutationString390736 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testRecurision_literalMutationString390736_failAssert0_add391089 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString390736_failAssert0_add391089_failAssert0_literalMutationString394011 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template d5JcVBHdYkDnT} not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString390730_failAssert0_literalMutationString390990_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("%4z[@>AKg(3A=I", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                TestUtil.getContents(root, "recRursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationString390730 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString390730_failAssert0_literalMutationString390990 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template %4z[@>AKg(3A=I not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString390730_failAssert0() throws IOException {
        try {
            StringWriter sw = execute("%4z[@>AKg(3A=I", new Object() {
                Object value = new Object() {
                    boolean value = false;
                };
            });
            TestUtil.getContents(root, "recursion.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRecurision_literalMutationString390730 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template %4z[@>AKg(3A=I not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString390736_failAssert0_add391091_failAssert0_literalMutationString392797_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("IqeN%k@r)DJCee", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    TestUtil.getContents(root, "recursion.{txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testRecurision_literalMutationString390736 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testRecurision_literalMutationString390736_failAssert0_add391091 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString390736_failAssert0_add391091_failAssert0_literalMutationString392797 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IqeN%k@r)DJCee not found", expected.getMessage());
        }
    }

    public void testRecurisionnull390744_failAssert0_literalMutationString390888_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("recursi[n.html", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testRecurisionnull390744 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testRecurisionnull390744_failAssert0_literalMutationString390888 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template recursi[n.html not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString390730_failAssert0_literalMutationBoolean390987_failAssert0_add394969_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("%4z[@>AKg(3A=I", new Object() {
                        Object value = new Object() {
                            boolean value = true;
                        };
                    });
                    TestUtil.getContents(root, "recursion.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testRecurision_literalMutationString390730 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecurision_literalMutationString390730_failAssert0_literalMutationBoolean390987 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString390730_failAssert0_literalMutationBoolean390987_failAssert0_add394969 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template %4z[@>AKg(3A=I not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString390730_failAssert0_add391111_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("%4z[@>AKg(3A=I", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                TestUtil.getContents(root, "recursion.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationString390730 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString390730_failAssert0_add391111 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template %4z[@>AKg(3A=I not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString390732_failAssert0_literalMutationString390935_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("?Rvp*xtr|e 9.V", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                TestUtil.getContents(root, "");
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationString390732 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString390732_failAssert0_literalMutationString390935 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ?Rvp*xtr|e 9.V not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString390730_failAssert0_literalMutationString390989_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("%4z[@>AKg(3A=I", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                TestUtil.getContents(root, "recurs[on.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationString390730 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString390730_failAssert0_literalMutationString390989 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template %4z[@>AKg(3A=I not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString390730_failAssert0_literalMutationString390986_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute(": }Q$k41-z$.M^", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                TestUtil.getContents(root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationString390730 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString390730_failAssert0_literalMutationString390986 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template : }Q$k41-z$.M^ not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString390730_failAssert0_literalMutationBoolean390987_failAssert0_literalMutationString393719_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("%4z[@>AKg(3A=I", new Object() {
                        Object value = new Object() {
                            boolean value = true;
                        };
                    });
                    TestUtil.getContents(root, "Mn]DX{+9YUt#w");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecurision_literalMutationString390730 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecurision_literalMutationString390730_failAssert0_literalMutationBoolean390987 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString390730_failAssert0_literalMutationBoolean390987_failAssert0_literalMutationString393719 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template %4z[@>AKg(3A=I not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString390726_add391070() throws IOException {
        StringWriter o_testRecurision_literalMutationString390726_add391070__1 = execute("", new Object() {
            Object value = new Object() {
                boolean value = false;
            };
        });
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testRecurision_literalMutationString390726_add391070__1)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testRecurision_literalMutationString390726_add391070__1)).toString());
        StringWriter sw = execute("", new Object() {
            Object value = new Object() {
                boolean value = false;
            };
        });
        String o_testRecurision_literalMutationString390726__11 = TestUtil.getContents(root, "recursion.txt");
        TestCase.assertEquals("Test\n  Test\n\n", o_testRecurision_literalMutationString390726__11);
        sw.toString();
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testRecurision_literalMutationString390726_add391070__1)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testRecurision_literalMutationString390726_add391070__1)).toString());
        TestCase.assertEquals("Test\n  Test\n\n", o_testRecurision_literalMutationString390726__11);
    }

    public void testRecurisionnull390744_failAssert0_literalMutationString390891_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("!FR|WapUrwEEnV", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testRecurisionnull390744 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testRecurisionnull390744_failAssert0_literalMutationString390891 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template !FR|WapUrwEEnV not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString390730_failAssert0_add391110_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("%4z[@>AKg(3A=I", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                TestUtil.getContents(root, "recursion.txt");
                TestUtil.getContents(root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationString390730 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString390730_failAssert0_add391110 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template %4z[@>AKg(3A=I not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString390730_failAssert0null391179_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("%4z[@>AKg(3A=I", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationString390730 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString390730_failAssert0null391179 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template %4z[@>AKg(3A=I not found", expected.getMessage());
        }
    }

    public void testRecurision_add390738_literalMutationString390792_failAssert0_literalMutationString393164_failAssert0() throws IOException {
        try {
            {
                StringWriter o_testRecurision_add390738__1 = execute("ogm_OO;0r:p:wU|", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                StringWriter sw = execute("recursion.html", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                String o_testRecurision_add390738__20 = TestUtil.getContents(root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_add390738_literalMutationString390792 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_add390738_literalMutationString390792_failAssert0_literalMutationString393164 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ogm_OO;0r:p:wU| not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString390730_failAssert0_add391109_failAssert0() throws IOException {
        try {
            {
                execute("%4z[@>AKg(3A=I", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                StringWriter sw = execute("%4z[@>AKg(3A=I", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                TestUtil.getContents(root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationString390730 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString390730_failAssert0_add391109 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template %4z[@>AKg(3A=I not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString390733_failAssert0null391185_failAssert0_literalMutationString392355_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("wz!uh^;27CYU-G", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRecurision_literalMutationString390733 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testRecurision_literalMutationString390733_failAssert0null391185 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString390733_failAssert0null391185_failAssert0_literalMutationString392355 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template wz!uh^;27CYU-G not found", expected.getMessage());
        }
    }

    public void testRecurision_add390738_literalMutationString390792_failAssert0_add394784_failAssert0() throws IOException {
        try {
            {
                StringWriter o_testRecurision_add390738__1 = execute("ogm_OO;0:p:wU|", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                StringWriter sw = execute("recursion.html", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                String o_testRecurision_add390738__20 = TestUtil.getContents(root, "recursion.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_add390738_literalMutationString390792 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_add390738_literalMutationString390792_failAssert0_add394784 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ogm_OO;0:p:wU| not found", expected.getMessage());
        }
    }

    public void testRecurision_literalMutationString390730_failAssert0_add391112_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("%4z[@>AKg(3A=I", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                TestUtil.getContents(root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecurision_literalMutationString390730 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecurision_literalMutationString390730_failAssert0_add391112 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template %4z[@>AKg(3A=I not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367808_failAssert0_add371623_failAssert0() throws IOException {
        try {
            {
                {
                    execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    StringWriter sw = execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    TestUtil.getContents(root, "recJrsion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367808 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367808_failAssert0_add371623 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367808_failAssert0_add371624_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    TestUtil.getContents(root, "recJrsion.txt");
                    TestUtil.getContents(root, "recJrsion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367808 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367808_failAssert0_add371624 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_add367630_literalMutationString367686_failAssert0() throws IOException {
        try {
            StringWriter sw = execute("recursion_w:th_inheritance.html", new Object() {
                Object value = new Object() {
                    boolean value = false;
                };
            });
            sw.toString();
            String o_testRecursionWithInheritance_add367630__12 = TestUtil.getContents(root, "recursion.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRecursionWithInheritance_add367630_literalMutationString367686 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template recursion_w:th_inheritance.html not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367806_failAssert0_literalMutationString370105_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    TestUtil.getContents(root, "page1.3txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367806 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367806_failAssert0_literalMutationString370105 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367806_failAssert0_literalMutationString370104_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    TestUtil.getContents(root, " does not exist");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367806 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367806_failAssert0_literalMutationString370104 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_add367630_literalMutationString367686_failAssert0_literalMutationString370718_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("reDcursion_w:th_inheritance.html", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                sw.toString();
                String o_testRecursionWithInheritance_add367630__12 = TestUtil.getContents(root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_add367630_literalMutationString367686 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_add367630_literalMutationString367686_failAssert0_literalMutationString370718 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template reDcursion_w:th_inheritance.html not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_remove367632_remove368034_literalMutationString368808_failAssert0() throws IOException {
        try {
            StringWriter sw = execute("Q=V]/R3$Ua23;8r#Lrz[1(zHY-EY.dV", new Object() {
                Object value = new Object() {
                    boolean value = false;
                };
            });
            String o_testRecursionWithInheritance_remove367632__10 = TestUtil.getContents(this.root, "recursion.txt");
            junit.framework.TestCase.fail("testRecursionWithInheritance_remove367632_remove368034_literalMutationString368808 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Q=V]/R3$Ua23;8r#Lrz[1(zHY-EY.dV not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_add367977_failAssert0_add371481_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    TestUtil.getContents(root, "recursion.txt");
                    sw.toString();
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_add367977 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_add367977_failAssert0_add371481 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_remove367631null368050_failAssert0_literalMutationString369358_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("e%3z|oAOAzB6[,aTDI&5OK2!IhVG75:", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                String o_testRecursionWithInheritance_remove367631__10 = TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_remove367631null368050 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_remove367631null368050_failAssert0_literalMutationString369358 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template e%3z|oAOAzB6[,aTDI&5OK2!IhVG75: not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367615_remove368037_literalMutationString368902_failAssert0() throws IOException {
        try {
            StringWriter sw = execute("&(UegR>]aKS6A<*{_wFi&U4bv<nh)bc", new Object() {
                Object value = new Object() {
                    boolean value = false;
                };
            });
            String o_testRecursionWithInheritance_literalMutationString367615__11 = TestUtil.getContents(this.root, "recursion.txt");
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367615_remove368037_literalMutationString368902 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template &(UegR>]aKS6A<*{_wFi&U4bv<nh)bc not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367808_failAssert0_literalMutationString370085_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("zY@I[&}]g&,)opGF_?sPvpNcW7s1%vX", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    TestUtil.getContents(root, "recJrsion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367808 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367808_failAssert0_literalMutationString370085 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template zY@I[&}]g&,)opGF_?sPvpNcW7s1%vX not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367806_failAssert0_add371629_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    TestUtil.getContents(root, "page1.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367806 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367806_failAssert0_add371629 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367808_failAssert0_literalMutationString370093_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    TestUtil.getContents(root, "reJrsion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367808 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367808_failAssert0_literalMutationString370093 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_add367976_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                TestUtil.getContents(root, "recursion.txt");
                TestUtil.getContents(root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_add367976 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367806_failAssert0_add371627_failAssert0() throws IOException {
        try {
            {
                {
                    execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    StringWriter sw = execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    TestUtil.getContents(root, "page1.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367806 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367806_failAssert0_add371627 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367808_failAssert0null372346_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367808 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367808_failAssert0null372346 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_add367628_literalMutationString367714_failAssert0() throws IOException {
        try {
            StringWriter o_testRecursionWithInheritance_add367628__1 = execute("muMTW<$x$@3$IwZ@Dz#g;cD1X3!t+:(", new Object() {
                Object value = new Object() {
                    boolean value = false;
                };
            });
            StringWriter sw = execute("recursion_with_inheritance.html", new Object() {
                Object value = new Object() {
                    boolean value = false;
                };
            });
            String o_testRecursionWithInheritance_add367628__20 = TestUtil.getContents(root, "recursion.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRecursionWithInheritance_add367628_literalMutationString367714 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template muMTW<$x$@3$IwZ@Dz#g;cD1X3!t+:( not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0null368060_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0null368060 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367806_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                TestUtil.getContents(root, "page1.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367806 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367808_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                TestUtil.getContents(root, "recJrsion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367808 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367804_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                TestUtil.getContents(root, "");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367804 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_add367977_failAssert0_literalMutationString369652_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("IA=zrC&Dq>.}PY}`e5%soJF @vg Pb1,", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    TestUtil.getContents(root, "recursion.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_add367977 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_add367977_failAssert0_literalMutationString369652 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>.}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_add367630_literalMutationString367686_failAssert0_add371839_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("recursion_w:th_inheritance.html", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                sw.toString();
                TestUtil.getContents(root, "recursion.txt");
                String o_testRecursionWithInheritance_add367630__12 = TestUtil.getContents(root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_add367630_literalMutationString367686 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_add367630_literalMutationString367686_failAssert0_add371839 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template recursion_w:th_inheritance.html not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367804_failAssert0_add371940_failAssert0() throws IOException {
        try {
            {
                {
                    execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    StringWriter sw = execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    TestUtil.getContents(root, "");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367804 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367804_failAssert0_add371940 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367622_failAssert0_literalMutationString367906_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("recur:ion_with_inheritance.html", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                TestUtil.getContents(root, "");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367622 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367622_failAssert0_literalMutationString367906 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template recur:ion_with_inheritance.html not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_add367630_literalMutationString367686_failAssert0null372447_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("recursion_w:th_inheritance.html", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                sw.toString();
                String o_testRecursionWithInheritance_add367630__12 = TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_add367630_literalMutationString367686 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_add367630_literalMutationString367686_failAssert0null372447 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template recursion_w:th_inheritance.html not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367616_add367964() throws IOException {
        StringWriter o_testRecursionWithInheritance_literalMutationString367616_add367964__1 = execute("", new Object() {
            Object value = new Object() {
                boolean value = false;
            };
        });
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testRecursionWithInheritance_literalMutationString367616_add367964__1)).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testRecursionWithInheritance_literalMutationString367616_add367964__1)).getBuffer())).toString());
        StringWriter sw = execute("", new Object() {
            Object value = new Object() {
                boolean value = false;
            };
        });
        String o_testRecursionWithInheritance_literalMutationString367616__11 = TestUtil.getContents(root, "recursion.txt");
        TestCase.assertEquals("Test\n  Test\n\n", o_testRecursionWithInheritance_literalMutationString367616__11);
        sw.toString();
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testRecursionWithInheritance_literalMutationString367616_add367964__1)).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testRecursionWithInheritance_literalMutationString367616_add367964__1)).getBuffer())).toString());
        TestCase.assertEquals("Test\n  Test\n\n", o_testRecursionWithInheritance_literalMutationString367616__11);
    }

    public void testRecursionWithInheritance_literalMutationString367617_failAssert0_literalMutationString367854_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("recursio`n_with_inheritannce.html", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                TestUtil.getContents(root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367617 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367617_failAssert0_literalMutationString367854 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template recursio`n_with_inheritannce.html not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_add367975_failAssert0() throws IOException {
        try {
            {
                execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                StringWriter sw = execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                TestUtil.getContents(root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_add367975 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_add367977_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                TestUtil.getContents(root, "recursion.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_add367977 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0() throws IOException {
        try {
            StringWriter sw = execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                Object value = new Object() {
                    boolean value = false;
                };
            });
            TestUtil.getContents(root, "recursion.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_add367978_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                TestUtil.getContents(root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_add367978 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367620_failAssert0_literalMutationString367815_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("#h!2Gx$`uYf=UZ<jOFd^,v& n&Gx|e", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                TestUtil.getContents(root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367620 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367620_failAssert0_literalMutationString367815 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template #h!2Gx$`uYf=UZ<jOFd^,v& n&Gx|e not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367798_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("r-!)M$($hBrTlgk{c(d!6UW`q{!#HmX", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                TestUtil.getContents(root, "recursion.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367798 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template r-!)M$($hBrTlgk{c(d!6UW`q{!#HmX not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_add367976_failAssert0_add371763_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    TestUtil.getContents(root, "recursion.txt");
                    TestUtil.getContents(root, "recursion.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_add367976 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_add367976_failAssert0_add371763 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367616_remove368040_add371192() throws IOException {
        StringWriter o_testRecursionWithInheritance_literalMutationString367616_remove368040_add371192__1 = execute("", new Object() {
            Object value = new Object() {
                boolean value = false;
            };
        });
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testRecursionWithInheritance_literalMutationString367616_remove368040_add371192__1)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testRecursionWithInheritance_literalMutationString367616_remove368040_add371192__1)).toString());
        StringWriter sw = execute("", new Object() {
            Object value = new Object() {
                boolean value = false;
            };
        });
        String o_testRecursionWithInheritance_literalMutationString367616__11 = TestUtil.getContents(this.root, "recursion.txt");
        TestCase.assertEquals("Test\n  Test\n\n", o_testRecursionWithInheritance_literalMutationString367616__11);
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testRecursionWithInheritance_literalMutationString367616_remove368040_add371192__1)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testRecursionWithInheritance_literalMutationString367616_remove368040_add371192__1)).toString());
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_add367976_failAssert0_literalMutationString370486_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("IA=zrC&Dq>}PY `e5%soJF @vg Pb1,", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    TestUtil.getContents(root, "recursion.txt");
                    TestUtil.getContents(root, "recursion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_add367976 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_add367976_failAssert0_literalMutationString370486 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY `e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_add367976_failAssert0null372410_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    TestUtil.getContents(root, null);
                    TestUtil.getContents(root, "recursion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_add367976 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_add367976_failAssert0null372410 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_add367630null368042_failAssert0_literalMutationString369405_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("c:J()imw;vJ!RyWb!>aO)P02C%U2tD.", new Object() {
                    Object value = new Object() {
                        boolean value = false;
                    };
                });
                sw.toString();
                sw.toString();
                String o_testRecursionWithInheritance_add367630__12 = TestUtil.getContents(root, null);
                junit.framework.TestCase.fail("testRecursionWithInheritance_add367630null368042 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_add367630null368042_failAssert0_literalMutationString369405 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template c:J()imw;vJ!RyWb!>aO)P02C%U2tD. not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367806_failAssert0null372348_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367806 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_literalMutationString367806_failAssert0null372348 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_add367975_failAssert0_literalMutationBoolean369675_failAssert0() throws IOException {
        try {
            {
                {
                    execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                        Object value = new Object() {
                            boolean value = true;
                        };
                    });
                    StringWriter sw = execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    TestUtil.getContents(root, "recursion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_add367975 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_add367975_failAssert0_literalMutationBoolean369675 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367619_failAssert0_add367975_failAssert0_add371484_failAssert0() throws IOException {
        try {
            {
                {
                    execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    StringWriter sw = execute("IA=zrC&Dq>}PY}`e5%soJF @vg Pb1,", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    TestUtil.getContents(root, "recursion.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_add367975 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367619_failAssert0_add367975_failAssert0_add371484 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template IA=zrC&Dq>}PY}`e5%soJF @vg Pb1, not found", expected.getMessage());
        }
    }

    public void testRecursionWithInheritance_literalMutationString367627_failAssert0_add368013_failAssert0_literalMutationString369559_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("Qq&0^;$P({{(q0PM^#5uBRPr]Udo|8O", new Object() {
                        Object value = new Object() {
                            boolean value = false;
                        };
                    });
                    TestUtil.getContents(root, "recurion.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367627 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367627_failAssert0_add368013 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testRecursionWithInheritance_literalMutationString367627_failAssert0_add368013_failAssert0_literalMutationString369559 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Qq&0^;$P({{(q0PM^#5uBRPr]Udo|8O not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_add374229_literalMutationString374304_failAssert0() throws IOException {
        try {
            StringWriter sw = execute("Z!-&kv6ddOL$zGd(QEU+d?pn[pEx#G/C<S", new Object() {
                Object test = new Object() {
                    boolean test = false;
                };
            });
            sw.toString();
            String o_testPartialRecursionWithInheritance_add374229__12 = TestUtil.getContents(root, "recursive_partial_inheritance.txt");
            sw.toString();
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_add374229_literalMutationString374304 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Z!-&kv6ddOL$zGd(QEU+d?pn[pEx#G/C<S not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_remove374230_literalMutationString374350_failAssert0_literalMutationString376866_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("7y=rAT3mq,AM5h(zwe3bl!&/Q8mQ}9Emm", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                String o_testPartialRecursionWithInheritance_remove374230__10 = TestUtil.getContents(root, "recursive_partial_inheritance.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_remove374230_literalMutationString374350 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_remove374230_literalMutationString374350_failAssert0_literalMutationString376866 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 7y=rAT3mq,AM5h(zwe3bl!&/Q8mQ}9Emm not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritancenull374233_failAssert0_literalMutationString374380_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("-APS/LQ=+OdctLMEj*3[h&<*& $oupLCd@", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritancenull374233 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritancenull374233_failAssert0_literalMutationString374380 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template -APS/LQ=+OdctLMEj*3[h&<*& $oupLCd@ not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374216_failAssert0_literalMutationString374510_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute(" does not exist", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                TestUtil.getContents(root, "recursive_partial_inheritance.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374216 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374216_failAssert0_literalMutationString374510 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374214_failAssert0_add374596_failAssert0_literalMutationString376490_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("64=v>1EDtRO/$Gdx>Fy7c^IQ1]T$y!s%^", new Object() {
                        Object test = new Object() {
                            boolean test = false;
                        };
                    });
                    TestUtil.getContents(root, "recursive_partial_inheritance.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374214 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374214_failAssert0_add374596 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374214_failAssert0_add374596_failAssert0_literalMutationString376490 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 64=v>1EDtRO/$Gdx>Fy7c^IQ1]T$y!s%^ not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_add374229_literalMutationString374301_failAssert0_literalMutationString376839_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("g8<]G@i6%", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                sw.toString();
                String o_testPartialRecursionWithInheritance_add374229__12 = TestUtil.getContents(root, "recursive_partial_inheritance.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_add374229_literalMutationString374301 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_add374229_literalMutationString374301_failAssert0_literalMutationString376839 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template g8<]G@i6% not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374223_failAssert0_literalMutationString374525_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("OKxaD/h1SCl(3W,@m>xNjDq7+qLNymE[P_", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                TestUtil.getContents(root, "recursive_partialinheritance.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374223 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374223_failAssert0_literalMutationString374525 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template OKxaD/h1SCl(3W,@m>xNjDq7+qLNymE[P_ not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374224_failAssert0_literalMutationString374504_failAssert0_literalMutationString376967_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("g;5p[e(mrd$-^g(1GxU,x##Q6XhMn7RQ3Y", new Object() {
                        Object test = new Object() {
                            boolean test = false;
                        };
                    });
                    TestUtil.getContents(root, "");
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374224 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374224_failAssert0_literalMutationString374504 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374224_failAssert0_literalMutationString374504_failAssert0_literalMutationString376967 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template g;5p[e(mrd$-^g(1GxU,x##Q6XhMn7RQ3Y not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritancenull374233_failAssert0_literalMutationString374380_failAssert0_literalMutationString376923_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("M)g@z1M_g+j5K]s!#k`.yvOf$cJYj{Yf78", new Object() {
                        Object test = new Object() {
                            boolean test = false;
                        };
                    });
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialRecursionWithInheritancenull374233 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testPartialRecursionWithInheritancenull374233_failAssert0_literalMutationString374380 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritancenull374233_failAssert0_literalMutationString374380_failAssert0_literalMutationString376923 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template M)g@z1M_g+j5K]s!#k`.yvOf$cJYj{Yf78 not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374221_failAssert0_add374578_failAssert0_literalMutationString377385_failAssert0() throws IOException {
        try {
            {
                {
                    execute("`sZc lpSJ346WHSl6M2D QX$v+k5DZe(e>", new Object() {
                        Object test = new Object() {
                            boolean test = false;
                        };
                    });
                    StringWriter sw = execute("recursive_partial_inheritance.html", new Object() {
                        Object test = new Object() {
                            boolean test = false;
                        };
                    });
                    TestUtil.getContents(root, "");
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374221 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374221_failAssert0_add374578 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374221_failAssert0_add374578_failAssert0_literalMutationString377385 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template `sZc lpSJ346WHSl6M2D QX$v+k5DZe(e> not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_add374229_literalMutationString374304_failAssert0null379078_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("Z!-&kv6ddOL$zGd(QEU+d?pn[pEx#G/C<S", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                sw.toString();
                String o_testPartialRecursionWithInheritance_add374229__12 = TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_add374229_literalMutationString374304 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_add374229_literalMutationString374304_failAssert0null379078 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Z!-&kv6ddOL$zGd(QEU+d?pn[pEx#G/C<S not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374216_failAssert0_literalMutationString374510_failAssert0_add378240_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute(" does not exist", new Object() {
                        Object test = new Object() {
                            boolean test = false;
                        };
                    });
                    TestUtil.getContents(root, "recursive_partial_inheritance.txt");
                    TestUtil.getContents(root, "recursive_partial_inheritance.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374216 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374216_failAssert0_literalMutationString374510 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374216_failAssert0_literalMutationString374510_failAssert0_add378240 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_literalMutationString374456_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("dlo:7o$!__eB&9dXiX,Q@KD`Q[&3!Gz,R0", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                TestUtil.getContents(root, "recursive_partial_inhreritance.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_literalMutationString374456 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template dlo:7o$!__eB&9dXiX,Q@KD`Q[&3!Gz,R0 not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374216_failAssert0_literalMutationString374510_failAssert0null378966_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute(" does not exist", new Object() {
                        Object test = new Object() {
                            boolean test = false;
                        };
                    });
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374216 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374216_failAssert0_literalMutationString374510 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374216_failAssert0_literalMutationString374510_failAssert0null378966 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_add374592_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("dlo:7o$!__eB&9dXiX,Q@KD`Q[&3!Gz,R0", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                TestUtil.getContents(root, "recursive_partial_inheritance.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_add374592 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template dlo:7o$!__eB&9dXiX,Q@KD`Q[&3!Gz,R0 not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374216_failAssert0_literalMutationString374510_failAssert0_literalMutationString376635_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute(" does not exist", new Object() {
                        Object test = new Object() {
                            boolean test = false;
                        };
                    });
                    TestUtil.getContents(root, "recursve_partial_inheritance.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374216 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374216_failAssert0_literalMutationString374510 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374216_failAssert0_literalMutationString374510_failAssert0_literalMutationString376635 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374218_failAssert0_literalMutationString374382_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("W]dg8ueT=Q(Qe#^4 R%U(2m,:cJW]w(6r^w", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                TestUtil.getContents(root, "recursive_partial_inheritance.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374218 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374218_failAssert0_literalMutationString374382 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template W]dg8ueT=Q(Qe#^4 R%U(2m,:cJW]w(6r^w not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_remove374230_literalMutationString374350_failAssert0_add378315_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("7y=rAT3mq,AM5h(zwe3bl!&/Q8mQ}9EPmm", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                String o_testPartialRecursionWithInheritance_remove374230__10 = TestUtil.getContents(root, "recursive_partial_inheritance.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_remove374230_literalMutationString374350 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_remove374230_literalMutationString374350_failAssert0_add378315 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 7y=rAT3mq,AM5h(zwe3bl!&/Q8mQ}9EPmm not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritancenull374233_failAssert0_add374567_failAssert0_literalMutationString376404_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("recursive_partial_inheritance.h^ml", new Object() {
                        Object test = new Object() {
                            boolean test = false;
                        };
                    });
                    TestUtil.getContents(root, null);
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialRecursionWithInheritancenull374233 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testPartialRecursionWithInheritancenull374233_failAssert0_add374567 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritancenull374233_failAssert0_add374567_failAssert0_literalMutationString376404 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template recursive_partial_inheritance.h^ml not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_literalMutationString374456_failAssert0null379068_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("dlo:7o$!__eB&9dXiX,Q@KD`Q[&3!Gz,R0", new Object() {
                        Object test = new Object() {
                            boolean test = false;
                        };
                    });
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_literalMutationString374456 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_literalMutationString374456_failAssert0null379068 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template dlo:7o$!__eB&9dXiX,Q@KD`Q[&3!Gz,R0 not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_literalMutationString374456_failAssert0_add378450_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("dlo:7o$!__eB&9dXiX,Q@KD`Q[&3!Gz,R0", new Object() {
                        Object test = new Object() {
                            boolean test = false;
                        };
                    });
                    TestUtil.getContents(root, "recursive_partial_inhreritance.txt");
                    TestUtil.getContents(root, "recursive_partial_inhreritance.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_literalMutationString374456 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_literalMutationString374456_failAssert0_add378450 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template dlo:7o$!__eB&9dXiX,Q@KD`Q[&3!Gz,R0 not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_remove374230_literalMutationString374350_failAssert0() throws IOException {
        try {
            StringWriter sw = execute("7y=rAT3mq,AM5h(zwe3bl!&/Q8mQ}9EPmm", new Object() {
                Object test = new Object() {
                    boolean test = false;
                };
            });
            String o_testPartialRecursionWithInheritance_remove374230__10 = TestUtil.getContents(root, "recursive_partial_inheritance.txt");
            sw.toString();
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_remove374230_literalMutationString374350 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 7y=rAT3mq,AM5h(zwe3bl!&/Q8mQ}9EPmm not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374217_failAssert0() throws IOException {
        try {
            StringWriter sw = execute("dlo:7o$!__eB&9dXiX,Q@KD`Q[&3!Gz,R0", new Object() {
                Object test = new Object() {
                    boolean test = false;
                };
            });
            TestUtil.getContents(root, "recursive_partial_inheritance.txt");
            sw.toString();
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template dlo:7o$!__eB&9dXiX,Q@KD`Q[&3!Gz,R0 not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374223_failAssert0null374676_failAssert0_literalMutationString375848_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("recursive_partial_inheritan{ce.html", new Object() {
                        Object test = new Object() {
                            boolean test = false;
                        };
                    });
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374223 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374223_failAssert0null374676 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374223_failAssert0null374676_failAssert0_literalMutationString375848 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template recursive_partial_inheritan{ce.html not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_add374229null374641_failAssert0_literalMutationString376015_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("<Hmx1fBdU2Z4SYij1E!C(|6pi:eb+MR95d", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                sw.toString();
                sw.toString();
                String o_testPartialRecursionWithInheritance_add374229__12 = TestUtil.getContents(root, null);
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_add374229null374641 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_add374229null374641_failAssert0_literalMutationString376015 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template <Hmx1fBdU2Z4SYij1E!C(|6pi:eb+MR95d not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374218_failAssert0_literalMutationString374387_failAssert0_literalMutationString377251_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("7Wk$M>z/89BB#v`o8/g}BDu^N[o_]zp]f)jN", new Object() {
                        Object test = new Object() {
                            boolean test = false;
                        };
                    });
                    TestUtil.getContents(root, "recursive_partial_inheritance.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374218 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374218_failAssert0_literalMutationString374387 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374218_failAssert0_literalMutationString374387_failAssert0_literalMutationString377251 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 7Wk$M>z/89BB#v`o8/g}BDu^N[o_]zp]f)jN not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationBoolean374220_failAssert0_literalMutationString374493_failAssert0_literalMutationString376586_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("B_rcmR_A[:@L2CX^,Qaaf=Nh_/U+<jN}>E", new Object() {
                        Object test = new Object() {
                            boolean test = true;
                        };
                    });
                    TestUtil.getContents(root, "sYn/ipxK!+2i4n<00?V3>><4[wm&$@[l^");
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationBoolean374220 should have thrown MustacheException");
                }
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationBoolean374220_failAssert0_literalMutationString374493 should have thrown MustacheException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationBoolean374220_failAssert0_literalMutationString374493_failAssert0_literalMutationString376586 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template B_rcmR_A[:@L2CX^,Qaaf=Nh_/U+<jN}>E not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_literalMutationString374448_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("M]vl6lO2t9e/syHK87dU32(1kV YQQpZYx", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                TestUtil.getContents(root, "recursive_partial_inheritance.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_literalMutationString374448 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template M]vl6lO2t9e/syHK87dU32(1kV YQQpZYx not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_add374593_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("dlo:7o$!__eB&9dXiX,Q@KD`Q[&3!Gz,R0", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                TestUtil.getContents(root, "recursive_partial_inheritance.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_add374593 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template dlo:7o$!__eB&9dXiX,Q@KD`Q[&3!Gz,R0 not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_add374590_failAssert0() throws IOException {
        try {
            {
                execute("dlo:7o$!__eB&9dXiX,Q@KD`Q[&3!Gz,R0", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                StringWriter sw = execute("dlo:7o$!__eB&9dXiX,Q@KD`Q[&3!Gz,R0", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                TestUtil.getContents(root, "recursive_partial_inheritance.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_add374590 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template dlo:7o$!__eB&9dXiX,Q@KD`Q[&3!Gz,R0 not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_literalMutationString374455_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("dlo:7o$!__eB&9dXiX,Q@KD`Q[&3!Gz,R0", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                TestUtil.getContents(root, "recurive_partial_inheritance.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_literalMutationString374455 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template dlo:7o$!__eB&9dXiX,Q@KD`Q[&3!Gz,R0 not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_literalMutationString374456_failAssert0_literalMutationString377266_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("dlo:7o$!__eB&9dXiX,Q@KDQ[&3!Gz,R0", new Object() {
                        Object test = new Object() {
                            boolean test = false;
                        };
                    });
                    TestUtil.getContents(root, "recursive_partial_inhreritance.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_literalMutationString374456 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_literalMutationString374456_failAssert0_literalMutationString377266 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template dlo:7o$!__eB&9dXiX,Q@KDQ[&3!Gz,R0 not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374221_failAssert0_add374579_failAssert0_literalMutationString376141_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("recursive_partial_inhe ritance.html", new Object() {
                        Object test = new Object() {
                            boolean test = false;
                        };
                    });
                    TestUtil.getContents(root, "");
                    TestUtil.getContents(root, "");
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374221 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374221_failAssert0_add374579 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374221_failAssert0_add374579_failAssert0_literalMutationString376141 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template recursive_partial_inhe ritance.html not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_add374229_literalMutationString374304_failAssert0_add378467_failAssert0() throws IOException {
        try {
            {
                execute("Z!-&kv6ddOL$zGd(QEU+d?pn[pEx#G/C<S", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                StringWriter sw = execute("Z!-&kv6ddOL$zGd(QEU+d?pn[pEx#G/C<S", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                sw.toString();
                String o_testPartialRecursionWithInheritance_add374229__12 = TestUtil.getContents(root, "recursive_partial_inheritance.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_add374229_literalMutationString374304 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_add374229_literalMutationString374304_failAssert0_add378467 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Z!-&kv6ddOL$zGd(QEU+d?pn[pEx#G/C<S not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_add374229_literalMutationString374304_failAssert0_add378470_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("Z!-&kv6ddOL$zGd(QEU+d?pn[pEx#G/C<S", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                sw.toString();
                String o_testPartialRecursionWithInheritance_add374229__12 = TestUtil.getContents(root, "recursive_partial_inheritance.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_add374229_literalMutationString374304 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_add374229_literalMutationString374304_failAssert0_add378470 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Z!-&kv6ddOL$zGd(QEU+d?pn[pEx#G/C<S not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374217_failAssert0null374664_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("dlo:7o$!__eB&9dXiX,Q@KD`Q[&3!Gz,R0", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217_failAssert0null374664 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template dlo:7o$!__eB&9dXiX,Q@KD`Q[&3!Gz,R0 not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374226_failAssert0null374668_failAssert0_literalMutationString376050_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("2HT4kA F30([@ &(RzW [i(G^Y(oh/A-#N", new Object() {
                        Object test = new Object() {
                            boolean test = false;
                        };
                    });
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374226 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374226_failAssert0null374668 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374226_failAssert0null374668_failAssert0_literalMutationString376050 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 2HT4kA F30([@ &(RzW [i(G^Y(oh/A-#N not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374221_failAssert0_literalMutationString374409_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("&<=%izQ{C|/gD`<7M-%YaLpz/C[mS/n1&l", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                TestUtil.getContents(root, "");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374221 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374221_failAssert0_literalMutationString374409 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template &<=%izQ{C|/gD`<7M-%YaLpz/C[mS/n1&l not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374215_add374559() throws IOException {
        StringWriter o_testPartialRecursionWithInheritance_literalMutationString374215_add374559__1 = execute("", new Object() {
            Object test = new Object() {
                boolean test = false;
            };
        });
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testPartialRecursionWithInheritance_literalMutationString374215_add374559__1)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testPartialRecursionWithInheritance_literalMutationString374215_add374559__1)).toString());
        StringWriter sw = execute("", new Object() {
            Object test = new Object() {
                boolean test = false;
            };
        });
        String o_testPartialRecursionWithInheritance_literalMutationString374215__11 = TestUtil.getContents(root, "recursive_partial_inheritance.txt");
        TestCase.assertEquals("TEST\n  TEST\n\n\n", o_testPartialRecursionWithInheritance_literalMutationString374215__11);
        sw.toString();
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testPartialRecursionWithInheritance_literalMutationString374215_add374559__1)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testPartialRecursionWithInheritance_literalMutationString374215_add374559__1)).toString());
        TestCase.assertEquals("TEST\n  TEST\n\n\n", o_testPartialRecursionWithInheritance_literalMutationString374215__11);
    }

    public void testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_add374591_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("dlo:7o$!__eB&9dXiX,Q@KD`Q[&3!Gz,R0", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                TestUtil.getContents(root, "recursive_partial_inheritance.txt");
                TestUtil.getContents(root, "recursive_partial_inheritance.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_add374591 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template dlo:7o$!__eB&9dXiX,Q@KD`Q[&3!Gz,R0 not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritancenull374233_failAssert0_literalMutationString374380_failAssert0_add378334_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("-APS/LQ=+OdctLMEj*3[h&<*& $oupLCd@", new Object() {
                        Object test = new Object() {
                            boolean test = false;
                        };
                    });
                    TestUtil.getContents(root, null);
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialRecursionWithInheritancenull374233 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testPartialRecursionWithInheritancenull374233_failAssert0_literalMutationString374380 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritancenull374233_failAssert0_literalMutationString374380_failAssert0_add378334 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template -APS/LQ=+OdctLMEj*3[h&<*& $oupLCd@ not found", expected.getMessage());
        }
    }

    public void testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_literalMutationBoolean374450_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("dlo:7o$!__eB&9dXiX,Q@KD`Q[&3!Gz,R0", new Object() {
                    Object test = new Object() {
                        boolean test = true;
                    };
                });
                TestUtil.getContents(root, "recursive_partial_inheritance.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialRecursionWithInheritance_literalMutationString374217_failAssert0_literalMutationBoolean374450 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template dlo:7o$!__eB&9dXiX,Q@KD`Q[&3!Gz,R0 not found", expected.getMessage());
        }
    }

    public void testChainedInheritance_literalMutationString253001_add253347() throws IOException {
        StringWriter o_testChainedInheritance_literalMutationString253001_add253347__1 = execute("", new Object() {
            Object test = new Object() {
                boolean test = false;
            };
        });
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testChainedInheritance_literalMutationString253001_add253347__1)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testChainedInheritance_literalMutationString253001_add253347__1)).toString());
        StringWriter sw = execute("", new Object() {
            Object test = new Object() {
                boolean test = false;
            };
        });
        String o_testChainedInheritance_literalMutationString253001__11 = TestUtil.getContents(root, "page.txt");
        TestCase.assertEquals("<main id=\"content\" role=\"main\">\n  This is the page content\n\n</main>\n", o_testChainedInheritance_literalMutationString253001__11);
        sw.toString();
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testChainedInheritance_literalMutationString253001_add253347__1)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testChainedInheritance_literalMutationString253001_add253347__1)).toString());
        TestCase.assertEquals("<main id=\"content\" role=\"main\">\n  This is the page content\n\n</main>\n", o_testChainedInheritance_literalMutationString253001__11);
    }

    public void testChainedInheritance_literalMutationString253004_failAssert0_literalMutationString253186_failAssert0_literalMutationBoolean256377_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("lw]LN)((T", new Object() {
                        Object test = new Object() {
                            boolean test = true;
                        };
                    });
                    TestUtil.getContents(root, "page.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253004 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253004_failAssert0_literalMutationString253186 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253004_failAssert0_literalMutationString253186_failAssert0_literalMutationBoolean256377 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template lw]LN)((T not found", expected.getMessage());
        }
    }

    public void testChainedInheritance_literalMutationString253001_add253348_add256497() throws IOException {
        StringWriter o_testChainedInheritance_literalMutationString253001_add253348_add256497__1 = execute("", new Object() {
            Object test = new Object() {
                boolean test = false;
            };
        });
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testChainedInheritance_literalMutationString253001_add253348_add256497__1)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testChainedInheritance_literalMutationString253001_add253348_add256497__1)).toString());
        StringWriter sw = execute("", new Object() {
            Object test = new Object() {
                boolean test = false;
            };
        });
        String o_testChainedInheritance_literalMutationString253001_add253348__11 = TestUtil.getContents(root, "page.txt");
        TestCase.assertEquals("<main id=\"content\" role=\"main\">\n  This is the page content\n\n</main>\n", o_testChainedInheritance_literalMutationString253001_add253348__11);
        String o_testChainedInheritance_literalMutationString253001__11 = TestUtil.getContents(root, "page.txt");
        TestCase.assertEquals("<main id=\"content\" role=\"main\">\n  This is the page content\n\n</main>\n", o_testChainedInheritance_literalMutationString253001__11);
        sw.toString();
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testChainedInheritance_literalMutationString253001_add253348_add256497__1)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testChainedInheritance_literalMutationString253001_add253348_add256497__1)).toString());
        TestCase.assertEquals("<main id=\"content\" role=\"main\">\n  This is the page content\n\n</main>\n", o_testChainedInheritance_literalMutationString253001_add253348__11);
        TestCase.assertEquals("<main id=\"content\" role=\"main\">\n  This is the page content\n\n</main>\n", o_testChainedInheritance_literalMutationString253001__11);
    }

    public void testChainedInheritance_literalMutationString253004_failAssert0_literalMutationBoolean253189_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("@8L&:0b1(", new Object() {
                    Object test = new Object() {
                        boolean test = true;
                    };
                });
                TestUtil.getContents(root, "page.txt");
                sw.toString();
                junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253004 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253004_failAssert0_literalMutationBoolean253189 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @8L&:0b1( not found", expected.getMessage());
        }
    }

    public void testChainedInheritance_literalMutationString253003_failAssert0_literalMutationString253199_failAssert0_literalMutationString256336_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("Ih#^FHo-f-IBXSZ", new Object() {
                        Object test = new Object() {
                            boolean test = false;
                        };
                    });
                    TestUtil.getContents(root, "page.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253003 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253003_failAssert0_literalMutationString253199 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253003_failAssert0_literalMutationString253199_failAssert0_literalMutationString256336 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Ih#^FHo-f-IBXSZ not found", expected.getMessage());
        }
    }

    public void testChainedInheritance_literalMutationString253012_failAssert0_literalMutationString253301_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("aA[n&+|TZ", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                TestUtil.getContents(root, "pagetxt");
                sw.toString();
                junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253012 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253012_failAssert0_literalMutationString253301 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template aA[n&+|TZ not found", expected.getMessage());
        }
    }

    public void testChainedInheritance_literalMutationString253004_failAssert0_literalMutationString253186_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("lw]LN)((T", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                TestUtil.getContents(root, "page.txt");
                sw.toString();
                junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253004 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253004_failAssert0_literalMutationString253186 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template lw]LN)((T not found", expected.getMessage());
        }
    }

    public void testChainedInheritance_literalMutationString253004_failAssert0_literalMutationString253194_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("@8L&:0b1(", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                TestUtil.getContents(root, "_7K8#F]o");
                sw.toString();
                junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253004 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253004_failAssert0_literalMutationString253194 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @8L&:0b1( not found", expected.getMessage());
        }
    }

    public void testChainedInheritance_literalMutationString253004_failAssert0null253446_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("@8L&:0b1(", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253004 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253004_failAssert0null253446 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @8L&:0b1( not found", expected.getMessage());
        }
    }

    public void testChainedInheritance_literalMutationString253004_failAssert0_add253362_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("@8L&:0b1(", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                TestUtil.getContents(root, "page.txt");
                TestUtil.getContents(root, "page.txt");
                sw.toString();
                junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253004 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253004_failAssert0_add253362 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @8L&:0b1( not found", expected.getMessage());
        }
    }

    public void testChainedInheritance_remove253017_literalMutationString253120_add256576() throws IOException {
        StringWriter o_testChainedInheritance_remove253017_literalMutationString253120_add256576__1 = execute("", new Object() {
            Object test = new Object() {
                boolean test = false;
            };
        });
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testChainedInheritance_remove253017_literalMutationString253120_add256576__1)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testChainedInheritance_remove253017_literalMutationString253120_add256576__1)).toString());
        StringWriter sw = execute("", new Object() {
            Object test = new Object() {
                boolean test = false;
            };
        });
        String o_testChainedInheritance_remove253017__10 = TestUtil.getContents(root, "page.txt");
        TestCase.assertEquals("<main id=\"content\" role=\"main\">\n  This is the page content\n\n</main>\n", o_testChainedInheritance_remove253017__10);
        sw.toString();
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testChainedInheritance_remove253017_literalMutationString253120_add256576__1)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testChainedInheritance_remove253017_literalMutationString253120_add256576__1)).toString());
        TestCase.assertEquals("<main id=\"content\" role=\"main\">\n  This is the page content\n\n</main>\n", o_testChainedInheritance_remove253017__10);
    }

    public void testChainedInheritance_literalMutationString253004_failAssert0_add253361_failAssert0() throws IOException {
        try {
            {
                execute("@8L&:0b1(", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                StringWriter sw = execute("@8L&:0b1(", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                TestUtil.getContents(root, "page.txt");
                sw.toString();
                junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253004 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253004_failAssert0_add253361 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @8L&:0b1( not found", expected.getMessage());
        }
    }

    public void testChainedInheritance_literalMutationString253004_failAssert0_add253363_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("@8L&:0b1(", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                TestUtil.getContents(root, "page.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253004 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253004_failAssert0_add253363 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @8L&:0b1( not found", expected.getMessage());
        }
    }

    public void testChainedInheritance_add253016_literalMutationString253090_failAssert0() throws IOException {
        try {
            StringWriter sw = execute("page.[html", new Object() {
                Object test = new Object() {
                    boolean test = false;
                };
            });
            sw.toString();
            String o_testChainedInheritance_add253016__12 = TestUtil.getContents(root, "page.txt");
            sw.toString();
            junit.framework.TestCase.fail("testChainedInheritance_add253016_literalMutationString253090 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template page.[html not found", expected.getMessage());
        }
    }

    public void testChainedInheritance_literalMutationString253004_failAssert0_literalMutationString253186_failAssert0_add257308_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("lw]LN)((T", new Object() {
                        Object test = new Object() {
                            boolean test = false;
                        };
                    });
                    TestUtil.getContents(root, "page.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253004 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253004_failAssert0_literalMutationString253186 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253004_failAssert0_literalMutationString253186_failAssert0_add257308 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template lw]LN)((T not found", expected.getMessage());
        }
    }

    public void testChainedInheritance_literalMutationString253004_failAssert0_add253364_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("@8L&:0b1(", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                TestUtil.getContents(root, "page.txt");
                sw.toString();
                junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253004 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253004_failAssert0_add253364 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @8L&:0b1( not found", expected.getMessage());
        }
    }

    public void testChainedInheritance_literalMutationString253003_failAssert0_literalMutationString253199_failAssert0_add257296_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute(" does not exist", new Object() {
                        Object test = new Object() {
                            boolean test = false;
                        };
                    });
                    TestUtil.getContents(root, "page.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253003 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253003_failAssert0_literalMutationString253199 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253003_failAssert0_literalMutationString253199_failAssert0_add257296 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testChainedInheritance_literalMutationString253003_failAssert0_literalMutationString253199_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute(" does not exist", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                TestUtil.getContents(root, "page.txt");
                sw.toString();
                junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253003 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253003_failAssert0_literalMutationString253199 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testChainedInheritance_literalMutationString253006_failAssert0_add253379_failAssert0_literalMutationString256178_failAssert0() throws IOException {
        try {
            {
                {
                    StringWriter sw = execute("98cGhD.}[", new Object() {
                        Object test = new Object() {
                            boolean test = false;
                        };
                    });
                    TestUtil.getContents(root, "page.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253006 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253006_failAssert0_add253379 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253006_failAssert0_add253379_failAssert0_literalMutationString256178 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 98cGhD.}[ not found", expected.getMessage());
        }
    }

    public void testChainedInheritance_literalMutationBoolean253007_literalMutationString253159_failAssert0() throws IOException {
        try {
            StringWriter sw = execute(".hBkAd>`[", new Object() {
                Object test = new Object() {
                    boolean test = true;
                };
            });
            String o_testChainedInheritance_literalMutationBoolean253007__12 = TestUtil.getContents(root, "page.txt");
            sw.toString();
            junit.framework.TestCase.fail("testChainedInheritance_literalMutationBoolean253007_literalMutationString253159 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template .hBkAd>`[ not found", expected.getMessage());
        }
    }

    public void testChainedInheritance_literalMutationString253004_failAssert0() throws IOException {
        try {
            StringWriter sw = execute("@8L&:0b1(", new Object() {
                Object test = new Object() {
                    boolean test = false;
                };
            });
            TestUtil.getContents(root, "page.txt");
            sw.toString();
            junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253004 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @8L&:0b1( not found", expected.getMessage());
        }
    }

    public void testChainedInheritance_remove253018_literalMutationString253135_failAssert0() throws IOException {
        try {
            StringWriter sw = execute("b_1vj{K ,", new Object() {
                Object test = new Object() {
                    boolean test = false;
                };
            });
            String o_testChainedInheritance_remove253018__10 = TestUtil.getContents(root, "page.txt");
            sw.toString();
            junit.framework.TestCase.fail("testChainedInheritance_remove253018_literalMutationString253135 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template b_1vj{K , not found", expected.getMessage());
        }
    }

    public void testChainedInheritance_literalMutationString253005_failAssert0_literalMutationString253263_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("pae%html", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                TestUtil.getContents(root, "page.txt");
                sw.toString();
                junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253005 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testChainedInheritance_literalMutationString253005_failAssert0_literalMutationString253263 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template pae%html not found", expected.getMessage());
        }
    }

    public void testChainedInheritancenull253020_failAssert0_literalMutationString253179_failAssert0() throws IOException {
        try {
            {
                StringWriter sw = execute("page.h{ml", new Object() {
                    Object test = new Object() {
                        boolean test = false;
                    };
                });
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testChainedInheritancenull253020 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testChainedInheritancenull253020_failAssert0_literalMutationString253179 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template page.h{ml not found", expected.getMessage());
        }
    }

    public void testSimplePragma_literalMutationNumber94040null96146_failAssert0_literalMutationString100063_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("P(GS-A2}z`E7u+Qgr");
                StringWriter sw = new StringWriter();
                Writer o_testSimplePragma_literalMutationNumber94040__7 = m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.8)));
                    }

                    boolean in_ca = true;
                });
                String o_testSimplePragma_literalMutationNumber94040__15 = TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testSimplePragma_literalMutationNumber94040null96146 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testSimplePragma_literalMutationNumber94040null96146_failAssert0_literalMutationString100063 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template P(GS-A2}z`E7u+Qgr not found", expected.getMessage());
        }
    }

    public void testSimplePragma_literalMutationString94017_failAssert0_add96004_failAssert0_add103811_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    createMustacheFactory();
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("v,kuN<yt?/N`TDVsm");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testSimplePragma_literalMutationString94017 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimplePragma_literalMutationString94017_failAssert0_add96004 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimplePragma_literalMutationString94017_failAssert0_add96004_failAssert0_add103811 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template v,kuN<yt?/N`TDVsm not found", expected.getMessage());
        }
    }

    public void testSimplePragma_literalMutationNumber94036_add95771_literalMutationString96865_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("simplepra^ma.html");
            StringWriter sw = new StringWriter();
            Writer o_testSimplePragma_literalMutationNumber94036__7 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * -0.6)));
                }

                boolean in_ca = true;
            });
            String o_testSimplePragma_literalMutationNumber94036__15 = TestUtil.getContents(root, "simple.txt");
            sw.toString();
            sw.toString();
            junit.framework.TestCase.fail("testSimplePragma_literalMutationNumber94036_add95771_literalMutationString96865 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template simplepra^ma.html not found", expected.getMessage());
        }
    }

    public void testSimplePragma_literalMutationString94017_failAssert0_literalMutationNumber95287_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("v,kuN<yt?/N`TDVsm");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 20000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimplePragma_literalMutationString94017 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimplePragma_literalMutationString94017_failAssert0_literalMutationNumber95287 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template v,kuN<yt?/N`TDVsm not found", expected.getMessage());
        }
    }

    public void testSimplePragma_literalMutationString94017_failAssert0_add96004_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                createMustacheFactory();
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("v,kuN<yt?/N`TDVsm");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimplePragma_literalMutationString94017 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimplePragma_literalMutationString94017_failAssert0_add96004 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template v,kuN<yt?/N`TDVsm not found", expected.getMessage());
        }
    }

    public void testSimplePragma_add94050_literalMutationString94312_literalMutationString98524_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("simp<lepragma.html");
            StringWriter sw = new StringWriter();
            Writer o_testSimplePragma_add94050__7 = m.execute(sw, new Object() {
                String name = "ChrBis";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            Writer o_testSimplePragma_add94050__14 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            String o_testSimplePragma_add94050__21 = TestUtil.getContents(root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSimplePragma_add94050_literalMutationString94312_literalMutationString98524 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template simp<lepragma.html not found", expected.getMessage());
        }
    }

    public void testSimplePragma_add94051_add95442_literalMutationString97100_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("dyVm=a7/gb6yz+V_`");
            StringWriter sw = new StringWriter();
            Writer o_testSimplePragma_add94051__7 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            String o_testSimplePragma_add94051__14 = TestUtil.getContents(root, "simple.txt");
            String o_testSimplePragma_add94051__15 = TestUtil.getContents(root, "simple.txt");
            sw.toString();
            ((StringWriter) (o_testSimplePragma_add94051__7)).getBuffer().toString();
            junit.framework.TestCase.fail("testSimplePragma_add94051_add95442_literalMutationString97100 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template dyVm=a7/gb6yz+V_` not found", expected.getMessage());
        }
    }

    public void testSimplePragma_literalMutationString94018() throws MustacheException, IOException, InterruptedException, ExecutionException {
        MustacheFactory c = createMustacheFactory();
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        Mustache m = c.compile("");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        Writer o_testSimplePragma_literalMutationString94018__7 = m.execute(sw, new Object() {
            String name = "Chris";

            int value = 10000;

            int taxed_value() {
                return ((int) ((this.value) - ((this.value) * 0.4)));
            }

            boolean in_ca = true;
        });
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testSimplePragma_literalMutationString94018__7)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testSimplePragma_literalMutationString94018__7)).toString());
        String o_testSimplePragma_literalMutationString94018__14 = TestUtil.getContents(root, "simple.txt");
        TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", o_testSimplePragma_literalMutationString94018__14);
        sw.toString();
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testSimplePragma_literalMutationString94018__7)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testSimplePragma_literalMutationString94018__7)).toString());
        TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", o_testSimplePragma_literalMutationString94018__14);
    }

    public void testSimplePragma_literalMutationNumber94031_literalMutationString94888_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("[R{fl)4}S84&sE)EH");
            StringWriter sw = new StringWriter();
            Writer o_testSimplePragma_literalMutationNumber94031__7 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10001;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            String o_testSimplePragma_literalMutationNumber94031__15 = TestUtil.getContents(root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSimplePragma_literalMutationNumber94031_literalMutationString94888 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [R{fl)4}S84&sE)EH not found", expected.getMessage());
        }
    }

    public void testSimplePragma_literalMutationString94017_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("v,kuN<yt?/N`TDVsm");
            StringWriter sw = new StringWriter();
            m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            TestUtil.getContents(root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSimplePragma_literalMutationString94017 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template v,kuN<yt?/N`TDVsm not found", expected.getMessage());
        }
    }

    public void testSimplePragma_literalMutationString94017_failAssert0null96196_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("v,kuN<yt?/N`TDVsm");
                StringWriter sw = new StringWriter();
                m.execute(null, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimplePragma_literalMutationString94017 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimplePragma_literalMutationString94017_failAssert0null96196 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template v,kuN<yt?/N`TDVsm not found", expected.getMessage());
        }
    }

    public void testSimplePragma_literalMutationString94017_failAssert0_add96004_failAssert0_literalMutationString100845_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    createMustacheFactory();
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("v,kuN<yt?/N`TDVsm");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    TestUtil.getContents(root, "simp{le.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimplePragma_literalMutationString94017 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSimplePragma_literalMutationString94017_failAssert0_add96004 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimplePragma_literalMutationString94017_failAssert0_add96004_failAssert0_literalMutationString100845 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template v,kuN<yt?/N`TDVsm not found", expected.getMessage());
        }
    }

    public void testSimplePragma_literalMutationString94047_failAssert0null96202_failAssert0_literalMutationString100340_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("simplepra`gma.html");
                    StringWriter sw = new StringWriter();
                    m.execute(null, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    TestUtil.getContents(root, "simple.6xt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimplePragma_literalMutationString94047 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testSimplePragma_literalMutationString94047_failAssert0null96202 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testSimplePragma_literalMutationString94047_failAssert0null96202_failAssert0_literalMutationString100340 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template simplepra`gma.html not found", expected.getMessage());
        }
    }

    public void testSimplePragma_literalMutationNumber94033null96151_failAssert0_literalMutationString101952_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("[)>VQ_r^$rX]k-xHS");
                StringWriter sw = new StringWriter();
                Writer o_testSimplePragma_literalMutationNumber94033__7 = m.execute(null, new Object() {
                    String name = "Chris";

                    int value = 5000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                String o_testSimplePragma_literalMutationNumber94033__15 = TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimplePragma_literalMutationNumber94033null96151 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testSimplePragma_literalMutationNumber94033null96151_failAssert0_literalMutationString101952 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [)>VQ_r^$rX]k-xHS not found", expected.getMessage());
        }
    }

    private class OkGenerator {
        public boolean isItOk() {
            return true;
        }
    }

    private String getOutput(final boolean setObjectHandler) {
        final DefaultMustacheFactory mustacheFactory = new DefaultMustacheFactory();
        if (setObjectHandler) {
            mustacheFactory.setObjectHandler(new SimpleObjectHandler());
        }
        final Mustache defaultMustache = mustacheFactory.compile(new StringReader("{{#okGenerator.isItOk}}{{okGenerator.isItOk}}{{/okGenerator.isItOk}}"), "Test template");
        final Map<String, Object> params = new HashMap<>();
        params.put("okGenerator", new AmplInterpreterTest.OkGenerator());
        final Writer writer = new StringWriter();
        defaultMustache.execute(writer, params);
        return writer.toString();
    }

    public void testMultipleWrappers_literalMutationString208816_failAssert0_literalMutationString210849_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("l2BWqF9{,[>");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    Object o = new Object() {
                        int taxed_value() {
                            return ((int) ((value) - ((value) * 0.4)));
                        }

                        String fred = "test";
                    };

                    Object in_ca = Arrays.asList(o, new Object() {
                        int taxed_value = ((int) ((value) - ((value) * 0.2)));
                    }, o);
                });
                TestUtil.getContents(root, "simplerewrap.txt");
                sw.toString();
                junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString208816 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString208816_failAssert0_literalMutationString210849 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template l2BWqF9{,[> not found", expected.getMessage());
        }
    }

    public void testMultipleWrappers_literalMutationString208811() throws MustacheException, IOException, InterruptedException, ExecutionException {
        MustacheFactory c = createMustacheFactory();
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        Mustache m = c.compile("");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        Writer o_testMultipleWrappers_literalMutationString208811__7 = m.execute(sw, new Object() {
            String name = "Chris";

            int value = 10000;

            Object o = new Object() {
                int taxed_value() {
                    return ((int) ((value) - ((value) * 0.4)));
                }

                String fred = "test";
            };

            Object in_ca = Arrays.asList(o, new Object() {
                int taxed_value = ((int) ((value) - ((value) * 0.2)));
            }, o);
        });
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testMultipleWrappers_literalMutationString208811__7)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testMultipleWrappers_literalMutationString208811__7)).toString());
        String o_testMultipleWrappers_literalMutationString208811__23 = TestUtil.getContents(root, "simplerewrap.txt");
        TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.test\nWell, $8000,  after taxes.\nWell, $6000,  after taxes.test\n", o_testMultipleWrappers_literalMutationString208811__23);
        sw.toString();
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testMultipleWrappers_literalMutationString208811__7)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testMultipleWrappers_literalMutationString208811__7)).toString());
        TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.test\nWell, $8000,  after taxes.\nWell, $6000,  after taxes.test\n", o_testMultipleWrappers_literalMutationString208811__23);
    }

    public void testMultipleWrappers_literalMutationString208816_failAssert0_literalMutationString210849_failAssert0_literalMutationString220145_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("l2BWqF9{,[>");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        Object o = new Object() {
                            int taxed_value() {
                                return ((int) ((value) - ((value) * 0.4)));
                            }

                            String fred = "test";
                        };

                        Object in_ca = Arrays.asList(o, new Object() {
                            int taxed_value = ((int) ((value) - ((value) * 0.2)));
                        }, o);
                    });
                    TestUtil.getContents(root, "simplerewra-p.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString208816 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString208816_failAssert0_literalMutationString210849 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMultipleWrappers_literalMutationString208816_failAssert0_literalMutationString210849_failAssert0_literalMutationString220145 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template l2BWqF9{,[> not found", expected.getMessage());
        }
    }

    public void testMultipleWrappers_remove208860_literalMutationString209314_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("gY+K:!0CELh");
            StringWriter sw = new StringWriter();
            Writer o_testMultipleWrappers_remove208860__7 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                Object o = new Object() {
                    int taxed_value() {
                        return ((int) ((value) - ((value) * 0.4)));
                    }

                    String fred = "test";
                };

                Object in_ca = Arrays.asList(o, new Object() {
                    int taxed_value = ((int) ((value) - ((value) * 0.2)));
                }, o);
            });
            String o_testMultipleWrappers_remove208860__22 = TestUtil.getContents(root, "simplerewrap.txt");
            sw.toString();
            junit.framework.TestCase.fail("testMultipleWrappers_remove208860_literalMutationString209314 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template gY+K:!0CELh not found", expected.getMessage());
        }
    }

    public void testMultipleWrappers_add208854_remove212186_literalMutationString214045_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache o_testMultipleWrappers_add208854__3 = c.compile("WH#XZ|1Ia|Q");
            Mustache m = c.compile("simple.html");
            StringWriter sw = new StringWriter();
            Writer o_testMultipleWrappers_add208854__8 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                Object o = new Object() {
                    int taxed_value() {
                        return ((int) ((value) - ((value) * 0.4)));
                    }

                    String fred = "test";
                };

                Object in_ca = Arrays.asList(o, new Object() {
                    int taxed_value = ((int) ((value) - ((value) * 0.2)));
                }, o);
            });
            String o_testMultipleWrappers_add208854__24 = TestUtil.getContents(this.root, "simplerewrap.txt");
            junit.framework.TestCase.fail("testMultipleWrappers_add208854_remove212186_literalMutationString214045 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template WH#XZ|1Ia|Q not found", expected.getMessage());
        }
    }

    public void testNestedLatches_literalMutationString36847_failAssert0_add40809_failAssert0() throws IOException {
        try {
            {
                DefaultMustacheFactory c = createMustacheFactory();
                c.setExecutorService(Executors.newCachedThreadPool());
                Mustache m = c.compile("@u7MZT6#TZ*4 &|>");
                StringWriter sw = new StringWriter();
                Writer execute = m.execute(sw, new Object() {
                    Callable<Object> nest = () -> {
                        Thread.sleep(300);
                        return "How";
                    };

                    Callable<Object> nested = () -> {
                        Thread.sleep(200);
                        return "are";
                    };

                    Callable<Object> nestest = () -> {
                        Thread.sleep(100);
                        return "you?";
                    };
                });
                execute.close();
                execute.close();
                sw.toString();
                junit.framework.TestCase.fail("testNestedLatches_literalMutationString36847 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testNestedLatches_literalMutationString36847_failAssert0_add40809 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @u7MZT6#TZ*4 &|> not found", expected.getMessage());
        }
    }

    public void testNestedLatches_literalMutationString36847_failAssert0_add40802_failAssert0() throws IOException {
        try {
            {
                DefaultMustacheFactory c = createMustacheFactory();
                c.setExecutorService(Executors.newCachedThreadPool());
                c.setExecutorService(Executors.newCachedThreadPool());
                Mustache m = c.compile("@u7MZT6#TZ*4 &|>");
                StringWriter sw = new StringWriter();
                Writer execute = m.execute(sw, new Object() {
                    Callable<Object> nest = () -> {
                        Thread.sleep(300);
                        return "How";
                    };

                    Callable<Object> nested = () -> {
                        Thread.sleep(200);
                        return "are";
                    };

                    Callable<Object> nestest = () -> {
                        Thread.sleep(100);
                        return "you?";
                    };
                });
                execute.close();
                sw.toString();
                junit.framework.TestCase.fail("testNestedLatches_literalMutationString36847 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testNestedLatches_literalMutationString36847_failAssert0_add40802 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @u7MZT6#TZ*4 &|> not found", expected.getMessage());
        }
    }

    public void testNestedLatches_literalMutationString36847_failAssert0() throws IOException {
        try {
            DefaultMustacheFactory c = createMustacheFactory();
            c.setExecutorService(Executors.newCachedThreadPool());
            Mustache m = c.compile("@u7MZT6#TZ*4 &|>");
            StringWriter sw = new StringWriter();
            Writer execute = m.execute(sw, new Object() {
                Callable<Object> nest = () -> {
                    Thread.sleep(300);
                    return "How";
                };

                Callable<Object> nested = () -> {
                    Thread.sleep(200);
                    return "are";
                };

                Callable<Object> nestest = () -> {
                    Thread.sleep(100);
                    return "you?";
                };
            });
            execute.close();
            sw.toString();
            junit.framework.TestCase.fail("testNestedLatches_literalMutationString36847 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @u7MZT6#TZ*4 &|> not found", expected.getMessage());
        }
    }

    public void testNestedLatches_literalMutationString36847_failAssert0null41325_failAssert0() throws IOException {
        try {
            {
                DefaultMustacheFactory c = createMustacheFactory();
                c.setExecutorService(Executors.newCachedThreadPool());
                Mustache m = c.compile("@u7MZT6#TZ*4 &|>");
                StringWriter sw = new StringWriter();
                Writer execute = m.execute(null, new Object() {
                    Callable<Object> nest = () -> {
                        Thread.sleep(300);
                        return "How";
                    };

                    Callable<Object> nested = () -> {
                        Thread.sleep(200);
                        return "are";
                    };

                    Callable<Object> nestest = () -> {
                        Thread.sleep(100);
                        return "you?";
                    };
                });
                execute.close();
                sw.toString();
                junit.framework.TestCase.fail("testNestedLatches_literalMutationString36847 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testNestedLatches_literalMutationString36847_failAssert0null41325 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @u7MZT6#TZ*4 &|> not found", expected.getMessage());
        }
    }

    public void testNestedLatches_add36891_remove40860_literalMutationString45018_failAssert0() throws IOException {
        try {
            DefaultMustacheFactory c = createMustacheFactory();
            c.setExecutorService(Executors.newCachedThreadPool());
            Mustache m = c.compile("`I>^glH=f4M`z0X%");
            StringWriter sw = new StringWriter();
            Writer execute = m.execute(sw, new Object() {
                Callable<Object> nest = () -> {
                    Thread.sleep(300);
                    return "How";
                };

                Callable<Object> nested = () -> {
                    Thread.sleep(200);
                    return "are";
                };

                Callable<Object> nestest = () -> {
                    Thread.sleep(100);
                    return "you?";
                };
            });
            execute.close();
            sw.toString();
            junit.framework.TestCase.fail("testNestedLatches_add36891_remove40860_literalMutationString45018 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template `I>^glH=f4M`z0X% not found", expected.getMessage());
        }
    }

    public void testNestedLatches_literalMutationString36847_failAssert0_literalMutationNumber39488_failAssert0() throws IOException {
        try {
            {
                DefaultMustacheFactory c = createMustacheFactory();
                c.setExecutorService(Executors.newCachedThreadPool());
                Mustache m = c.compile("@u7MZT6#TZ*4 &|>");
                StringWriter sw = new StringWriter();
                Writer execute = m.execute(sw, new Object() {
                    Callable<Object> nest = () -> {
                        Thread.sleep(0);
                        return "How";
                    };

                    Callable<Object> nested = () -> {
                        Thread.sleep(200);
                        return "are";
                    };

                    Callable<Object> nestest = () -> {
                        Thread.sleep(100);
                        return "you?";
                    };
                });
                execute.close();
                sw.toString();
                junit.framework.TestCase.fail("testNestedLatches_literalMutationString36847 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testNestedLatches_literalMutationString36847_failAssert0_literalMutationNumber39488 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @u7MZT6#TZ*4 &|> not found", expected.getMessage());
        }
    }

    public void testNestedLatches_literalMutationNumber36877_literalMutationNumber38663_literalMutationString45712_failAssert0() throws IOException {
        try {
            DefaultMustacheFactory c = createMustacheFactory();
            c.setExecutorService(Executors.newCachedThreadPool());
            Mustache m = c.compile("latchedt`est.html");
            StringWriter sw = new StringWriter();
            Writer execute = m.execute(sw, new Object() {
                Callable<Object> nest = () -> {
                    Thread.sleep(600);
                    return "How";
                };

                Callable<Object> nested = () -> {
                    Thread.sleep(200);
                    return "are";
                };

                Callable<Object> nestest = () -> {
                    Thread.sleep(200);
                    return "you?";
                };
            });
            execute.close();
            sw.toString();
            junit.framework.TestCase.fail("testNestedLatches_literalMutationNumber36877_literalMutationNumber38663_literalMutationString45712 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template latchedt`est.html not found", expected.getMessage());
        }
    }

    public void testNestedLatches_literalMutationString36847_failAssert0_literalMutationString39507_failAssert0() throws IOException {
        try {
            {
                DefaultMustacheFactory c = createMustacheFactory();
                c.setExecutorService(Executors.newCachedThreadPool());
                Mustache m = c.compile("@u7MZT6#TZ*4 &|>");
                StringWriter sw = new StringWriter();
                Writer execute = m.execute(sw, new Object() {
                    Callable<Object> nest = () -> {
                        Thread.sleep(300);
                        return "How";
                    };

                    Callable<Object> nested = () -> {
                        Thread.sleep(200);
                        return "ae";
                    };

                    Callable<Object> nestest = () -> {
                        Thread.sleep(100);
                        return "you?";
                    };
                });
                execute.close();
                sw.toString();
                junit.framework.TestCase.fail("testNestedLatches_literalMutationString36847 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testNestedLatches_literalMutationString36847_failAssert0_literalMutationString39507 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @u7MZT6#TZ*4 &|> not found", expected.getMessage());
        }
    }

    public void testBrokenSimple_literalMutationString358370_literalMutationString358775_failAssert0_literalMutationString363194_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("<");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        String name = "";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    String String_244 = "Should have failed: " + (sw.toString());
                }
                junit.framework.TestCase.fail("testBrokenSimple_literalMutationString358370_literalMutationString358775 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testBrokenSimple_literalMutationString358370_literalMutationString358775_failAssert0_literalMutationString363194 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template < not found", expected.getMessage());
        }
    }

    public void testBrokenSimple_literalMutationString358370_literalMutationString358775_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("<");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                String String_244 = "Should have failed: " + (sw.toString());
            }
            junit.framework.TestCase.fail("testBrokenSimple_literalMutationString358370_literalMutationString358775 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template < not found", expected.getMessage());
        }
    }

    public void testBrokenSimple_literalMutationString358371_literalMutationString358700_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("@UM<FR: uC8 6v8F|");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                String String_170 = "Should have failed: " + (sw.toString());
            }
            junit.framework.TestCase.fail("testBrokenSimple_literalMutationString358371_literalMutationString358700 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @UM<FR: uC8 6v8F| not found", expected.getMessage());
        }
    }

    public void testBrokenSimple_literalMutationString358371_literalMutationString358698_remove366856() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = createMustacheFactory();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testBrokenSimple_literalMutationString358371_literalMutationString358698__8 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            String String_242 = "Should have failed: " + (sw.toString());
            TestCase.assertEquals("Should have failed: box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", String_242);
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        }
    }

    public void testBrokenSimple_literalMutationString358370_literalMutationBoolean358794_literalMutationNumber359706() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = createMustacheFactory();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testBrokenSimple_literalMutationString358370_literalMutationBoolean358794__8 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.0)));
                }

                boolean in_ca = false;
            });
            String String_171 = "Should have failed: " + (sw.toString());
            TestCase.assertEquals("Should have failed: box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", String_171);
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        }
    }

    public void testBrokenSimple_literalMutationString358370_literalMutationString358775_failAssert0null367042_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("<");
                    StringWriter sw = new StringWriter();
                    m.execute(null, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    String String_244 = "Should have failed: " + (sw.toString());
                }
                junit.framework.TestCase.fail("testBrokenSimple_literalMutationString358370_literalMutationString358775 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testBrokenSimple_literalMutationString358370_literalMutationString358775_failAssert0null367042 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template < not found", expected.getMessage());
        }
    }

    public void testBrokenSimple_literalMutationString358372_literalMutationString358847_failAssert0_add366830_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("[fb2xN/y3");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    String String_324 = "Should have failed: " + (sw.toString());
                }
                junit.framework.TestCase.fail("testBrokenSimple_literalMutationString358372_literalMutationString358847 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testBrokenSimple_literalMutationString358372_literalMutationString358847_failAssert0_add366830 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [fb2xN/y3 not found", expected.getMessage());
        }
    }

    public void testBrokenSimple_literalMutationString358370_literalMutationNumber358791_remove366862() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = createMustacheFactory();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testBrokenSimple_literalMutationString358370_literalMutationNumber358791__8 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.0)));
                }

                boolean in_ca = true;
            });
            String String_326 = "Should have failed: " + (sw.toString());
            TestCase.assertEquals("Should have failed: box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", String_326);
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        }
    }

    public void testBrokenSimple_literalMutationNumber358388_literalMutationString359046_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("broken>imple.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 1.4)));
                    }

                    boolean in_ca = true;
                });
                String String_258 = "Should have failed: " + (sw.toString());
            }
            junit.framework.TestCase.fail("testBrokenSimple_literalMutationNumber358388_literalMutationString359046 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template broken>imple.html not found", expected.getMessage());
        }
    }

    public void testBrokenSimple_literalMutationNumber358382null359230_failAssert0_literalMutationString360707_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("brokensim]ple.html");
                    StringWriter sw = new StringWriter();
                    m.execute(null, new Object() {
                        String name = "Chris";

                        int value = 0;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    String String_156 = "Should have failed: " + (sw.toString());
                }
                junit.framework.TestCase.fail("testBrokenSimple_literalMutationNumber358382null359230 should have thrown MustacheException");
            }
            junit.framework.TestCase.fail("testBrokenSimple_literalMutationNumber358382null359230_failAssert0_literalMutationString360707 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template brokensim]ple.html not found", expected.getMessage());
        }
    }

    public void testBrokenSimple_literalMutationString358371_literalMutationString358700_failAssert0_literalMutationNumber361141_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("@UM<FR: uC8 6v8F|");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 20000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    String String_170 = "Should have failed: " + (sw.toString());
                }
                junit.framework.TestCase.fail("testBrokenSimple_literalMutationString358371_literalMutationString358700 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testBrokenSimple_literalMutationString358371_literalMutationString358700_failAssert0_literalMutationNumber361141 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @UM<FR: uC8 6v8F| not found", expected.getMessage());
        }
    }

    public void testBrokenSimple_literalMutationString358372_literalMutationString358847_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("[fb2xN/y3");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                String String_324 = "Should have failed: " + (sw.toString());
            }
            junit.framework.TestCase.fail("testBrokenSimple_literalMutationString358372_literalMutationString358847 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [fb2xN/y3 not found", expected.getMessage());
        }
    }

    public void testBrokenSimple_literalMutationString358370_literalMutationBoolean358794() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = createMustacheFactory();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testBrokenSimple_literalMutationString358370_literalMutationBoolean358794__8 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = false;
            });
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testBrokenSimple_literalMutationString358370_literalMutationBoolean358794__8)).getBuffer())).toString());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testBrokenSimple_literalMutationString358370_literalMutationBoolean358794__8)).toString());
            String String_171 = "Should have failed: " + (sw.toString());
            TestCase.assertEquals("Should have failed: box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", String_171);
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testBrokenSimple_literalMutationString358370_literalMutationBoolean358794__8)).getBuffer())).toString());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testBrokenSimple_literalMutationString358370_literalMutationBoolean358794__8)).toString());
        }
    }

    public void testBrokenSimple_literalMutationString358370_literalMutationString358776_remove366860() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = createMustacheFactory();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testBrokenSimple_literalMutationString358370_literalMutationString358776__8 = m.execute(sw, new Object() {
                String name = "";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            String String_295 = "Should have failed: " + (sw.toString());
            TestCase.assertEquals("Should have failed: box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", String_295);
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        }
    }

    public void testBrokenSimple_literalMutationString358376_literalMutationString358651_literalMutationString359822() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = createMustacheFactory();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testBrokenSimple_literalMutationString358376_literalMutationString358651__8 = m.execute(sw, new Object() {
                String name = "";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            String String_261 = "ShouCd have failed: " + (sw.toString());
            TestCase.assertEquals("ShouCd have failed: box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", String_261);
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        }
    }

    public void testBrokenSimple_literalMutationString358374_literalMutationString358970() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = createMustacheFactory();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testBrokenSimple_literalMutationString358374_literalMutationString358970__8 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testBrokenSimple_literalMutationString358374_literalMutationString358970__8)).getBuffer())).toString());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testBrokenSimple_literalMutationString358374_literalMutationString358970__8)).toString());
            String String_291 = "Should have failed: " + (sw.toString());
            TestCase.assertEquals("Should have failed: box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", String_291);
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testBrokenSimple_literalMutationString358374_literalMutationString358970__8)).getBuffer())).toString());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testBrokenSimple_literalMutationString358374_literalMutationString358970__8)).toString());
        }
    }

    public void testBrokenSimple_literalMutationString358378_literalMutationString358923_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("jTZR8Mcix9K+p]bD_");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "page1.txt";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                String String_249 = "Should have failed: " + (sw.toString());
            }
            junit.framework.TestCase.fail("testBrokenSimple_literalMutationString358378_literalMutationString358923 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template jTZR8Mcix9K+p]bD_ not found", expected.getMessage());
        }
    }

    public void testBrokenSimple_literalMutationNumber358389_literalMutationString359093_literalMutationNumber359733() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = createMustacheFactory();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testBrokenSimple_literalMutationNumber358389_literalMutationString359093__8 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.0)));
                }

                boolean in_ca = true;
            });
            String String_175 = "Should have failed: " + (sw.toString());
            TestCase.assertEquals("Should have failed: box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", String_175);
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        }
    }

    public void testBrokenSimple_literalMutationString358370_literalMutationString358776() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = createMustacheFactory();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testBrokenSimple_literalMutationString358370_literalMutationString358776__8 = m.execute(sw, new Object() {
                String name = "";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testBrokenSimple_literalMutationString358370_literalMutationString358776__8)).getBuffer())).toString());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testBrokenSimple_literalMutationString358370_literalMutationString358776__8)).toString());
            String String_295 = "Should have failed: " + (sw.toString());
            TestCase.assertEquals("Should have failed: box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", String_295);
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testBrokenSimple_literalMutationString358370_literalMutationString358776__8)).getBuffer())).toString());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testBrokenSimple_literalMutationString358370_literalMutationString358776__8)).toString());
        }
    }

    public void testBrokenSimple_literalMutationString358370_literalMutationString358777() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = createMustacheFactory();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testBrokenSimple_literalMutationString358370_literalMutationString358777__8 = m.execute(sw, new Object() {
                String name = "7hris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testBrokenSimple_literalMutationString358370_literalMutationString358777__8)).getBuffer())).toString());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testBrokenSimple_literalMutationString358370_literalMutationString358777__8)).toString());
            String String_243 = "Should have failed: " + (sw.toString());
            TestCase.assertEquals("Should have failed: box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", String_243);
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testBrokenSimple_literalMutationString358370_literalMutationString358777__8)).getBuffer())).toString());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testBrokenSimple_literalMutationString358370_literalMutationString358777__8)).toString());
        }
    }

    public void testBrokenSimple_literalMutationNumber358393_literalMutationString359167() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = createMustacheFactory();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testBrokenSimple_literalMutationNumber358393_literalMutationString359167__8 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.8)));
                }

                boolean in_ca = true;
            });
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testBrokenSimple_literalMutationNumber358393_literalMutationString359167__8)).getBuffer())).toString());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testBrokenSimple_literalMutationNumber358393_literalMutationString359167__8)).toString());
            String String_317 = "Should have failed: " + (sw.toString());
            TestCase.assertEquals("Should have failed: box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", String_317);
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testBrokenSimple_literalMutationNumber358393_literalMutationString359167__8)).getBuffer())).toString());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testBrokenSimple_literalMutationNumber358393_literalMutationString359167__8)).toString());
        }
    }

    public void testBrokenSimple_literalMutationString358372_literalMutationString358847_failAssert0_literalMutationNumber365573_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("[fb2xN/y3");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 20000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    String String_324 = "Should have failed: " + (sw.toString());
                }
                junit.framework.TestCase.fail("testBrokenSimple_literalMutationString358372_literalMutationString358847 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testBrokenSimple_literalMutationString358372_literalMutationString358847_failAssert0_literalMutationNumber365573 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [fb2xN/y3 not found", expected.getMessage());
        }
    }

    public void testBrokenSimple_literalMutationString358376_literalMutationString358651() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = createMustacheFactory();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testBrokenSimple_literalMutationString358376_literalMutationString358651__8 = m.execute(sw, new Object() {
                String name = "";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testBrokenSimple_literalMutationString358376_literalMutationString358651__8)).getBuffer())).toString());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testBrokenSimple_literalMutationString358376_literalMutationString358651__8)).toString());
            String String_261 = "Should have failed: " + (sw.toString());
            TestCase.assertEquals("Should have failed: box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", String_261);
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testBrokenSimple_literalMutationString358376_literalMutationString358651__8)).getBuffer())).toString());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testBrokenSimple_literalMutationString358376_literalMutationString358651__8)).toString());
        }
    }

    public void testBrokenSimple_literalMutationNumber358389_literalMutationString359093_remove366855() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = createMustacheFactory();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testBrokenSimple_literalMutationNumber358389_literalMutationString359093__8 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * -0.6)));
                }

                boolean in_ca = true;
            });
            String String_175 = "Should have failed: " + (sw.toString());
            TestCase.assertEquals("Should have failed: box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", String_175);
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        }
    }

    public void testBrokenSimple_literalMutationString358371_literalMutationString358700_failAssert0_add366077_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    createMustacheFactory();
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("@UM<FR: uC8 6v8F|");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    String String_170 = "Should have failed: " + (sw.toString());
                }
                junit.framework.TestCase.fail("testBrokenSimple_literalMutationString358371_literalMutationString358700 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testBrokenSimple_literalMutationString358371_literalMutationString358700_failAssert0_add366077 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @UM<FR: uC8 6v8F| not found", expected.getMessage());
        }
    }

    public void testBrokenSimple_literalMutationString358371_literalMutationString358698() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = createMustacheFactory();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testBrokenSimple_literalMutationString358371_literalMutationString358698__8 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testBrokenSimple_literalMutationString358371_literalMutationString358698__8)).getBuffer())).toString());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testBrokenSimple_literalMutationString358371_literalMutationString358698__8)).toString());
            String String_242 = "Should have failed: " + (sw.toString());
            TestCase.assertEquals("Should have failed: box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", String_242);
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testBrokenSimple_literalMutationString358371_literalMutationString358698__8)).getBuffer())).toString());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testBrokenSimple_literalMutationString358371_literalMutationString358698__8)).toString());
        }
    }

    public void testBrokenSimple_literalMutationString358376_literalMutationString358651_remove366858() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = createMustacheFactory();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testBrokenSimple_literalMutationString358376_literalMutationString358651__8 = m.execute(sw, new Object() {
                String name = "";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            String String_261 = "Should have failed: " + (sw.toString());
            TestCase.assertEquals("Should have failed: box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", String_261);
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        }
    }

    public void testBrokenSimple_literalMutationString358372_literalMutationString358847_failAssert0null367195_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("[fb2xN/y3");
                    StringWriter sw = new StringWriter();
                    m.execute(null, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    String String_324 = "Should have failed: " + (sw.toString());
                }
                junit.framework.TestCase.fail("testBrokenSimple_literalMutationString358372_literalMutationString358847 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testBrokenSimple_literalMutationString358372_literalMutationString358847_failAssert0null367195 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [fb2xN/y3 not found", expected.getMessage());
        }
    }

    public void testBrokenSimple_literalMutationString358376_literalMutationString358651_add365800() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = createMustacheFactory();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testBrokenSimple_literalMutationString358376_literalMutationString358651__8 = m.execute(sw, new Object() {
                String name = "";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            String String_261 = "Should have failed: " + (sw.toString());
            TestCase.assertEquals("Should have failed: box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", String_261);
            o_testBrokenSimple_literalMutationString358376_literalMutationString358651__8.toString();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            TestCase.assertEquals("Should have failed: box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", String_261);
        }
    }

    public void testBrokenSimple_literalMutationNumber358389_literalMutationString359093() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = createMustacheFactory();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testBrokenSimple_literalMutationNumber358389_literalMutationString359093__8 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * -0.6)));
                }

                boolean in_ca = true;
            });
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testBrokenSimple_literalMutationNumber358389_literalMutationString359093__8)).getBuffer())).toString());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testBrokenSimple_literalMutationNumber358389_literalMutationString359093__8)).toString());
            String String_175 = "Should have failed: " + (sw.toString());
            TestCase.assertEquals("Should have failed: box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", String_175);
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testBrokenSimple_literalMutationNumber358389_literalMutationString359093__8)).getBuffer())).toString());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testBrokenSimple_literalMutationNumber358389_literalMutationString359093__8)).toString());
        }
    }

    public void testBrokenSimple_literalMutationString358370_literalMutationString358777_remove366857() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = createMustacheFactory();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testBrokenSimple_literalMutationString358370_literalMutationString358777__8 = m.execute(sw, new Object() {
                String name = "7hris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            String String_243 = "Should have failed: " + (sw.toString());
            TestCase.assertEquals("Should have failed: box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", String_243);
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        }
    }

    public void testBrokenSimple_literalMutationString358371_literalMutationString358700_failAssert0null366930_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("@UM<FR: uC8 6v8F|");
                    StringWriter sw = new StringWriter();
                    m.execute(null, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    String String_170 = "Should have failed: " + (sw.toString());
                }
                junit.framework.TestCase.fail("testBrokenSimple_literalMutationString358371_literalMutationString358700 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testBrokenSimple_literalMutationString358371_literalMutationString358700_failAssert0null366930 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @UM<FR: uC8 6v8F| not found", expected.getMessage());
        }
    }

    public void testBrokenSimple_literalMutationNumber358385_literalMutationString358630_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("gC1)JtVNK?<6@3C[:");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 9999;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                String String_270 = "Should have failed: " + (sw.toString());
            }
            junit.framework.TestCase.fail("testBrokenSimple_literalMutationNumber358385_literalMutationString358630 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
        }
    }

    public void testBrokenSimple_add358398_literalMutationString358581_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("brokensimp%le.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;
                });
                sw.toString();
                String String_268 = "Should have failed: " + (sw.toString());
            }
            junit.framework.TestCase.fail("testBrokenSimple_add358398_literalMutationString358581 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template brokensimp%le.html not found", expected.getMessage());
        }
    }

    public void testBrokenSimple_literalMutationNumber358389_literalMutationString359093_literalMutationBoolean359737() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = createMustacheFactory();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testBrokenSimple_literalMutationNumber358389_literalMutationString359093__8 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * -0.6)));
                }

                boolean in_ca = false;
            });
            String String_175 = "Should have failed: " + (sw.toString());
            TestCase.assertEquals("Should have failed: box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", String_175);
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        }
    }

    public void testBrokenSimple_literalMutationString358374_literalMutationString358970_remove366859() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = createMustacheFactory();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testBrokenSimple_literalMutationString358374_literalMutationString358970__8 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;
            });
            String String_291 = "Should have failed: " + (sw.toString());
            TestCase.assertEquals("Should have failed: box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", String_291);
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        }
    }

    public void testBrokenSimple_literalMutationNumber358393_literalMutationString359167_remove366861() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = createMustacheFactory();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testBrokenSimple_literalMutationNumber358393_literalMutationString359167__8 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.8)));
                }

                boolean in_ca = true;
            });
            String String_317 = "Should have failed: " + (sw.toString());
            TestCase.assertEquals("Should have failed: box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", String_317);
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        }
    }

    public void testBrokenSimple_literalMutationString358370_literalMutationBoolean358794_remove366854() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = createMustacheFactory();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testBrokenSimple_literalMutationString358370_literalMutationBoolean358794__8 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = false;
            });
            String String_171 = "Should have failed: " + (sw.toString());
            TestCase.assertEquals("Should have failed: box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", String_171);
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        }
    }

    public void testBrokenSimple_literalMutationString358370_literalMutationNumber358791() throws MustacheException, IOException, InterruptedException, ExecutionException {
        {
            MustacheFactory c = createMustacheFactory();
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            Mustache m = c.compile("");
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            StringWriter sw = new StringWriter();
            Writer o_testBrokenSimple_literalMutationString358370_literalMutationNumber358791__8 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.0)));
                }

                boolean in_ca = true;
            });
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testBrokenSimple_literalMutationString358370_literalMutationNumber358791__8)).getBuffer())).toString());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testBrokenSimple_literalMutationString358370_literalMutationNumber358791__8)).toString());
            String String_326 = "Should have failed: " + (sw.toString());
            TestCase.assertEquals("Should have failed: box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", String_326);
            TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
            TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
            TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
            TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testBrokenSimple_literalMutationString358370_literalMutationNumber358791__8)).getBuffer())).toString());
            TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testBrokenSimple_literalMutationString358370_literalMutationNumber358791__8)).toString());
        }
    }

    public void testBrokenSimple_literalMutationString358370_literalMutationString358775_failAssert0_add366438_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    c.compile("<");
                    Mustache m = c.compile("<");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        String name = "Chris";

                        int value = 10000;

                        int taxed_value() {
                            return ((int) ((this.value) - ((this.value) * 0.4)));
                        }

                        boolean in_ca = true;
                    });
                    String String_244 = "Should have failed: " + (sw.toString());
                }
                junit.framework.TestCase.fail("testBrokenSimple_literalMutationString358370_literalMutationString358775 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testBrokenSimple_literalMutationString358370_literalMutationString358775_failAssert0_add366438 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template < not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_literalMutationString181561null182342_failAssert0_literalMutationString184269_failAssert0() throws IOException {
        try {
            {
                Object object = new Object() {
                    List<String> people = Collections.singletonList("M}&s");
                };
                StringWriter sw = execute("_}OWMh][!e!X", null);
                String o_testIsNotEmpty_literalMutationString181561__9 = TestUtil.getContents(root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString181561null182342 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString181561null182342_failAssert0_literalMutationString184269 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template _}OWMh][!e!X not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_literalMutationString181567_failAssert0_literalMutationString181947_failAssert0() throws IOException {
        try {
            {
                Object object = new Object() {
                    List<String> people = Collections.singletonList("Tst");
                };
                StringWriter sw = execute("xq8A5%G)M1X$", object);
                TestUtil.getContents(root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString181567 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString181567_failAssert0_literalMutationString181947 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template xq8A5%G)M1X$ not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_literalMutationString181561_literalMutationString181836_failAssert0() throws IOException {
        try {
            Object object = new Object() {
                List<String> people = Collections.singletonList("M}&s");
            };
            StringWriter sw = execute("Z]3n^W6_D78t", object);
            String o_testIsNotEmpty_literalMutationString181561__9 = TestUtil.getContents(root, "isempty.txt");
            sw.toString();
            junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString181561_literalMutationString181836 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Z]3n^W6_D78t not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_literalMutationString181567_failAssert0null182368_failAssert0() throws IOException {
        try {
            {
                Object object = new Object() {
                    List<String> people = Collections.singletonList("Test");
                };
                StringWriter sw = execute("xq8A5%G)M1X$", object);
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString181567 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString181567_failAssert0null182368 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template xq8A5%G)M1X$ not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_add181574_literalMutationString181749_failAssert0() throws IOException {
        try {
            List<String> o_testIsNotEmpty_add181574__1 = Collections.singletonList("Test");
            Object object = new Object() {
                List<String> people = Collections.singletonList("Test");
            };
            StringWriter sw = execute(":f]/`?DWx*oB", object);
            String o_testIsNotEmpty_add181574__10 = TestUtil.getContents(root, "isempty.txt");
            sw.toString();
            junit.framework.TestCase.fail("testIsNotEmpty_add181574_literalMutationString181749 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template :f]/`?DWx*oB not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_add181575_add182145_literalMutationString183044_failAssert0() throws IOException {
        try {
            Object object = new Object() {
                List<String> people = Collections.singletonList("Test");
            };
            StringWriter o_testIsNotEmpty_add181575__7 = execute("isempty.html", object);
            ((StringWriter) (o_testIsNotEmpty_add181575__7)).getBuffer().toString();
            StringWriter sw = execute("isem]ty.html", object);
            String o_testIsNotEmpty_add181575__10 = TestUtil.getContents(root, "isempty.txt");
            sw.toString();
            junit.framework.TestCase.fail("testIsNotEmpty_add181575_add182145_literalMutationString183044 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template isem]ty.html not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_add181576_remove182277_literalMutationString183293_failAssert0() throws IOException {
        try {
            Object object = new Object() {
                List<String> people = Collections.singletonList("Test");
            };
            StringWriter sw = execute(">rg]js%e;w`v", object);
            String o_testIsNotEmpty_add181576__9 = TestUtil.getContents(root, "isempty.txt");
            String o_testIsNotEmpty_add181576__10 = TestUtil.getContents(root, "isempty.txt");
            sw.toString();
            junit.framework.TestCase.fail("testIsNotEmpty_add181576_remove182277_literalMutationString183293 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template >rg]js%e;w`v not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_literalMutationString181567_failAssert0() throws IOException {
        try {
            Object object = new Object() {
                List<String> people = Collections.singletonList("Test");
            };
            StringWriter sw = execute("xq8A5%G)M1X$", object);
            TestUtil.getContents(root, "isempty.txt");
            sw.toString();
            junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString181567 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template xq8A5%G)M1X$ not found", expected.getMessage());
        }
    }

    public void testIsNotEmptynull181581_failAssert0_literalMutationString181933_failAssert0() throws IOException {
        try {
            {
                Object object = new Object() {
                    List<String> people = Collections.singletonList("Test");
                };
                StringWriter sw = execute("(vdSA&]HT#>8", null);
                TestUtil.getContents(root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testIsNotEmptynull181581 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testIsNotEmptynull181581_failAssert0_literalMutationString181933 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template (vdSA&]HT#>8 not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_literalMutationString181573_failAssert0null182388_failAssert0_literalMutationString184183_failAssert0() throws IOException {
        try {
            {
                {
                    Object object = new Object() {
                        List<String> people = Collections.singletonList("Test");
                    };
                    StringWriter sw = execute("-#I )U)gZF3|", object);
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString181573 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString181573_failAssert0null182388 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString181573_failAssert0null182388_failAssert0_literalMutationString184183 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template -#I )U)gZF3| not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_add181575null182305_failAssert0_literalMutationString184356_failAssert0() throws IOException {
        try {
            {
                Object object = new Object() {
                    List<String> people = Collections.singletonList("Test");
                };
                StringWriter o_testIsNotEmpty_add181575__7 = execute("|s[(O3m}F5B2", object);
                StringWriter sw = execute(null, object);
                String o_testIsNotEmpty_add181575__10 = TestUtil.getContents(root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testIsNotEmpty_add181575null182305 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testIsNotEmpty_add181575null182305_failAssert0_literalMutationString184356 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template |s[(O3m}F5B2 not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_literalMutationString181567_failAssert0_add182220_failAssert0() throws IOException {
        try {
            {
                Object object = new Object() {
                    List<String> people = Collections.singletonList("Test");
                };
                StringWriter sw = execute("xq8A5%G)M1X$", object);
                TestUtil.getContents(root, "isempty.txt");
                TestUtil.getContents(root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString181567 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testIsNotEmpty_literalMutationString181567_failAssert0_add182220 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template xq8A5%G)M1X$ not found", expected.getMessage());
        }
    }

    public void testIsNotEmpty_literalMutationString181562_add182184() throws IOException {
        Object object = new Object() {
            List<String> people = Collections.singletonList("Test");
        };
        StringWriter o_testIsNotEmpty_literalMutationString181562_add182184__7 = execute("", object);
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testIsNotEmpty_literalMutationString181562_add182184__7)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testIsNotEmpty_literalMutationString181562_add182184__7)).toString());
        StringWriter sw = execute("", object);
        String o_testIsNotEmpty_literalMutationString181562__9 = TestUtil.getContents(root, "isempty.txt");
        TestCase.assertEquals("Is not empty\n", o_testIsNotEmpty_literalMutationString181562__9);
        sw.toString();
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testIsNotEmpty_literalMutationString181562_add182184__7)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testIsNotEmpty_literalMutationString181562_add182184__7)).toString());
        TestCase.assertEquals("Is not empty\n", o_testIsNotEmpty_literalMutationString181562__9);
    }

    private StringWriter execute(String name, Object object) {
        MustacheFactory c = createMustacheFactory();
        Mustache m = c.compile(name);
        StringWriter sw = new StringWriter();
        m.execute(sw, object);
        return sw;
    }

    private StringWriter execute(String name, List<Object> objects) {
        MustacheFactory c = createMustacheFactory();
        Mustache m = c.compile(name);
        StringWriter sw = new StringWriter();
        m.execute(sw, objects);
        return sw;
    }

    public void testImmutableList_literalMutationString326329_failAssert0_literalMutationString326730_failAssert0null333308_failAssert0() throws IOException {
        try {
            {
                {
                    Object object = new Object() {
                        List<String> people = Collections.singletonList(null);
                    };
                    StringWriter sw = execute("is]empty.html", Collections.singletonList(object));
                    TestUtil.getContents(root, "isempty.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testImmutableList_literalMutationString326329 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testImmutableList_literalMutationString326329_failAssert0_literalMutationString326730 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString326329_failAssert0_literalMutationString326730_failAssert0null333308 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template is]empty.html not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString326329_failAssert0_literalMutationString326730_failAssert0() throws IOException {
        try {
            {
                Object object = new Object() {
                    List<String> people = Collections.singletonList("page1.txt");
                };
                StringWriter sw = execute("is]empty.html", Collections.singletonList(object));
                TestUtil.getContents(root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testImmutableList_literalMutationString326329 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString326329_failAssert0_literalMutationString326730 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template is]empty.html not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString326326_failAssert0_add327090_failAssert0() throws IOException {
        try {
            {
                Object object = new Object() {
                    List<String> people = Collections.singletonList("Test");
                };
                StringWriter sw = execute("O`&((#{,e<xh", Collections.singletonList(object));
                TestUtil.getContents(root, "isempty.txt");
                TestUtil.getContents(root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testImmutableList_literalMutationString326326 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString326326_failAssert0_add327090 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template O`&((#{,e<xh not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString326326_failAssert0null327236_failAssert0() throws IOException {
        try {
            {
                Object object = new Object() {
                    List<String> people = Collections.singletonList("Test");
                };
                StringWriter sw = execute("O`&((#{,e<xh", Collections.singletonList(null));
                TestUtil.getContents(root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testImmutableList_literalMutationString326326 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString326326_failAssert0null327236 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template O`&((#{,e<xh not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString326329_failAssert0null327197_failAssert0() throws IOException {
        try {
            {
                Object object = new Object() {
                    List<String> people = Collections.singletonList("Test");
                };
                StringWriter sw = execute("is]empty.html", Collections.singletonList(object));
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testImmutableList_literalMutationString326329 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString326329_failAssert0null327197 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template is]empty.html not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString326326_failAssert0_add327092_failAssert0() throws IOException {
        try {
            {
                Object object = new Object() {
                    List<String> people = Collections.singletonList("Test");
                };
                StringWriter sw = execute("O`&((#{,e<xh", Collections.singletonList(object));
                TestUtil.getContents(root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testImmutableList_literalMutationString326326 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString326326_failAssert0_add327092 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template O`&((#{,e<xh not found", expected.getMessage());
        }
    }

    public void testImmutableList_add326337_literalMutationString326553_failAssert0() throws IOException {
        try {
            Object object = new Object() {
                List<String> people = Collections.singletonList("Test");
            };
            StringWriter o_testImmutableList_add326337__7 = execute("kIaC%Cb$=o}m", Collections.singletonList(object));
            StringWriter sw = execute("isempty.html", Collections.singletonList(object));
            String o_testImmutableList_add326337__12 = TestUtil.getContents(root, "isempty.txt");
            sw.toString();
            junit.framework.TestCase.fail("testImmutableList_add326337_literalMutationString326553 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template kIaC%Cb$=o}m not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString326329_failAssert0null327197_failAssert0_add331977_failAssert0() throws IOException {
        try {
            {
                {
                    Object object = new Object() {
                        List<String> people = Collections.singletonList("Test");
                    };
                    Collections.singletonList(object);
                    StringWriter sw = execute("is]empty.html", Collections.singletonList(object));
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testImmutableList_literalMutationString326329 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testImmutableList_literalMutationString326329_failAssert0null327197 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString326329_failAssert0null327197_failAssert0_add331977 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template is]empty.html not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString326329_failAssert0null327197_failAssert0null333170_failAssert0() throws IOException {
        try {
            {
                {
                    Object object = new Object() {
                        List<String> people = Collections.singletonList(null);
                    };
                    StringWriter sw = execute("is]empty.html", Collections.singletonList(object));
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testImmutableList_literalMutationString326329 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testImmutableList_literalMutationString326329_failAssert0null327197 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString326329_failAssert0null327197_failAssert0null333170 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template is]empty.html not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString326326_failAssert0_literalMutationString326907_failAssert0() throws IOException {
        try {
            {
                Object object = new Object() {
                    List<String> people = Collections.singletonList("rest");
                };
                StringWriter sw = execute("O`&((#{,e<xh", Collections.singletonList(object));
                TestUtil.getContents(root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testImmutableList_literalMutationString326326 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString326326_failAssert0_literalMutationString326907 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template O`&((#{,e<xh not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString326329_failAssert0_add327032_failAssert0() throws IOException {
        try {
            {
                Object object = new Object() {
                    List<String> people = Collections.singletonList("Test");
                };
                StringWriter sw = execute("is]empty.html", Collections.singletonList(object));
                TestUtil.getContents(root, "isempty.txt");
                sw.toString();
                junit.framework.TestCase.fail("testImmutableList_literalMutationString326329 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString326329_failAssert0_add327032 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template is]empty.html not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString326329_failAssert0_literalMutationString326730_failAssert0_add332192_failAssert0() throws IOException {
        try {
            {
                {
                    Object object = new Object() {
                        List<String> people = Collections.singletonList("page1.txt");
                    };
                    StringWriter sw = execute("is]empty.html", Collections.singletonList(object));
                    TestUtil.getContents(root, "isempty.txt");
                    TestUtil.getContents(root, "isempty.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testImmutableList_literalMutationString326329 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testImmutableList_literalMutationString326329_failAssert0_literalMutationString326730 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString326329_failAssert0_literalMutationString326730_failAssert0_add332192 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template is]empty.html not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString326318_literalMutationString326591_failAssert0() throws IOException {
        try {
            Object object = new Object() {
                List<String> people = Collections.singletonList("");
            };
            StringWriter sw = execute("d<6E#bq!#nv[", Collections.singletonList(object));
            String o_testImmutableList_literalMutationString326318__10 = TestUtil.getContents(root, "isempty.txt");
            sw.toString();
            junit.framework.TestCase.fail("testImmutableList_literalMutationString326318_literalMutationString326591 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template d<6E#bq!#nv[ not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString326324_add326991() throws IOException {
        Object object = new Object() {
            List<String> people = Collections.singletonList("Test");
        };
        StringWriter o_testImmutableList_literalMutationString326324_add326991__7 = execute("", Collections.singletonList(object));
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testImmutableList_literalMutationString326324_add326991__7)).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testImmutableList_literalMutationString326324_add326991__7)).getBuffer())).toString());
        StringWriter sw = execute("", Collections.singletonList(object));
        String o_testImmutableList_literalMutationString326324__10 = TestUtil.getContents(root, "isempty.txt");
        TestCase.assertEquals("Is not empty\n", o_testImmutableList_literalMutationString326324__10);
        sw.toString();
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testImmutableList_literalMutationString326324_add326991__7)).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testImmutableList_literalMutationString326324_add326991__7)).getBuffer())).toString());
        TestCase.assertEquals("Is not empty\n", o_testImmutableList_literalMutationString326324__10);
    }

    public void testImmutableList_literalMutationString326321_literalMutationString326644_failAssert0() throws IOException {
        try {
            Object object = new Object() {
                List<String> people = Collections.singletonList("Tst");
            };
            StringWriter sw = execute("Ky7CN|zH2A&.", Collections.singletonList(object));
            String o_testImmutableList_literalMutationString326321__10 = TestUtil.getContents(root, "isempty.txt");
            sw.toString();
            junit.framework.TestCase.fail("testImmutableList_literalMutationString326321_literalMutationString326644 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Ky7CN|zH2A&. not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString326326_failAssert0() throws IOException {
        try {
            Object object = new Object() {
                List<String> people = Collections.singletonList("Test");
            };
            StringWriter sw = execute("O`&((#{,e<xh", Collections.singletonList(object));
            TestUtil.getContents(root, "isempty.txt");
            sw.toString();
            junit.framework.TestCase.fail("testImmutableList_literalMutationString326326 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template O`&((#{,e<xh not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString326329_failAssert0() throws IOException {
        try {
            Object object = new Object() {
                List<String> people = Collections.singletonList("Test");
            };
            StringWriter sw = execute("is]empty.html", Collections.singletonList(object));
            TestUtil.getContents(root, "isempty.txt");
            sw.toString();
            junit.framework.TestCase.fail("testImmutableList_literalMutationString326329 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template is]empty.html not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString326329_failAssert0_literalMutationString326730_failAssert0_literalMutationString330417_failAssert0() throws IOException {
        try {
            {
                {
                    Object object = new Object() {
                        List<String> people = Collections.singletonList("page1.txt");
                    };
                    StringWriter sw = execute("; R,UG@=j>bKD", Collections.singletonList(object));
                    TestUtil.getContents(root, "isempty.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testImmutableList_literalMutationString326329 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testImmutableList_literalMutationString326329_failAssert0_literalMutationString326730 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString326329_failAssert0_literalMutationString326730_failAssert0_literalMutationString330417 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ; R,UG@=j>bKD not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString326326_failAssert0_literalMutationString326923_failAssert0() throws IOException {
        try {
            {
                Object object = new Object() {
                    List<String> people = Collections.singletonList("Test");
                };
                StringWriter sw = execute("O`&((#{,e<xh", Collections.singletonList(object));
                TestUtil.getContents(root, "isemptytxt");
                sw.toString();
                junit.framework.TestCase.fail("testImmutableList_literalMutationString326326 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString326326_failAssert0_literalMutationString326923 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template O`&((#{,e<xh not found", expected.getMessage());
        }
    }

    public void testImmutableList_literalMutationString326329_failAssert0null327197_failAssert0_literalMutationString329821_failAssert0() throws IOException {
        try {
            {
                {
                    Object object = new Object() {
                        List<String> people = Collections.singletonList("Tcest");
                    };
                    StringWriter sw = execute("is]empty.html", Collections.singletonList(object));
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testImmutableList_literalMutationString326329 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testImmutableList_literalMutationString326329_failAssert0null327197 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testImmutableList_literalMutationString326329_failAssert0null327197_failAssert0_literalMutationString329821 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template is]empty.html not found", expected.getMessage());
        }
    }

    public void testSecurity_literalMutationString105223_failAssert0_add107826_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("se]urity.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;

                    private String test = "Test";
                });
                TestUtil.getContents(root, "security.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSecurity_literalMutationString105223 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSecurity_literalMutationString105223_failAssert0_add107826 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template se]urity.html not found", expected.getMessage());
        }
    }

    public void testSecurity_literalMutationString105234null107991_failAssert0_literalMutationString112478_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("secur}ity.html");
                StringWriter sw = new StringWriter();
                Writer o_testSecurity_literalMutationString105234__7 = m.execute(sw, new Object() {
                    String name = "Cris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;

                    private String test = "Test";
                });
                String o_testSecurity_literalMutationString105234__15 = TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testSecurity_literalMutationString105234null107991 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testSecurity_literalMutationString105234null107991_failAssert0_literalMutationString112478 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template secur}ity.html not found", expected.getMessage());
        }
    }

    public void testSecurity_literalMutationString105224_failAssert0_add107839_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                createMustacheFactory();
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("TChq{/1?2UQ*i");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;

                    private String test = "Test";
                });
                TestUtil.getContents(root, "security.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSecurity_literalMutationString105224 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSecurity_literalMutationString105224_failAssert0_add107839 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template TChq{/1?2UQ*i not found", expected.getMessage());
        }
    }

    public void testSecurity_literalMutationNumber105245_literalMutationString106030_failAssert0_literalMutationString114151_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("5|A|b>()wa>_V");
                StringWriter sw = new StringWriter();
                Writer o_testSecurity_literalMutationNumber105245__7 = m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.2)));
                    }

                    boolean in_ca = true;

                    private String test = "Test";
                });
                String o_testSecurity_literalMutationNumber105245__16 = TestUtil.getContents(root, "j2??2?s TK%H");
                sw.toString();
                junit.framework.TestCase.fail("testSecurity_literalMutationNumber105245_literalMutationString106030 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testSecurity_literalMutationNumber105245_literalMutationString106030_failAssert0_literalMutationString114151 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 5|A|b>()wa>_V not found", expected.getMessage());
        }
    }

    public void testSecurity_literalMutationString105224_failAssert0_literalMutationNumber107060_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("TChq{/1?2UQ*i");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 0;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;

                    private String test = "Test";
                });
                TestUtil.getContents(root, "security.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSecurity_literalMutationString105224 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSecurity_literalMutationString105224_failAssert0_literalMutationNumber107060 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template TChq{/1?2UQ*i not found", expected.getMessage());
        }
    }

    public void testSecurity_literalMutationString105224_failAssert0null108054_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("TChq{/1?2UQ*i");
                StringWriter sw = new StringWriter();
                m.execute(null, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;

                    private String test = "Test";
                });
                TestUtil.getContents(root, "security.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSecurity_literalMutationString105224 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSecurity_literalMutationString105224_failAssert0null108054 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template TChq{/1?2UQ*i not found", expected.getMessage());
        }
    }

    public void testSecurity_literalMutationString105223_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("se]urity.html");
            StringWriter sw = new StringWriter();
            m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;

                private String test = "Test";
            });
            TestUtil.getContents(root, "security.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSecurity_literalMutationString105223 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template se]urity.html not found", expected.getMessage());
        }
    }

    public void testSecurity_literalMutationString105224_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("TChq{/1?2UQ*i");
            StringWriter sw = new StringWriter();
            m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;

                private String test = "Test";
            });
            TestUtil.getContents(root, "security.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSecurity_literalMutationString105224 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template TChq{/1?2UQ*i not found", expected.getMessage());
        }
    }

    public void testSecurity_add105263_literalMutationString105439_failAssert0_literalMutationString114664_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("5up?j=zB^?A87");
                StringWriter sw = new StringWriter();
                Writer o_testSecurity_add105263__7 = m.execute(sw, new Object() {
                    String name = "M8T=b";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;

                    private String test = "Test";
                });
                String o_testSecurity_add105263__15 = TestUtil.getContents(root, "security.txt");
                String o_testSecurity_add105263__16 = TestUtil.getContents(root, "security.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSecurity_add105263_literalMutationString105439 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSecurity_add105263_literalMutationString105439_failAssert0_literalMutationString114664 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 5up?j=zB^?A87 not found", expected.getMessage());
        }
    }

    public void testSecurity_literalMutationString105233null108000_failAssert0_literalMutationString115091_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("security.ht ml");
                StringWriter sw = new StringWriter();
                Writer o_testSecurity_literalMutationString105233__7 = m.execute(sw, new Object() {
                    String name = "O$Z.K";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;

                    private String test = "Test";
                });
                String o_testSecurity_literalMutationString105233__15 = TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testSecurity_literalMutationString105233null108000 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testSecurity_literalMutationString105233null108000_failAssert0_literalMutationString115091 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template security.ht ml not found", expected.getMessage());
        }
    }

    public void testSecurity_literalMutationString105225() throws MustacheException, IOException, InterruptedException, ExecutionException {
        MustacheFactory c = createMustacheFactory();
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        Mustache m = c.compile("");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        Writer o_testSecurity_literalMutationString105225__7 = m.execute(sw, new Object() {
            String name = "Chris";

            int value = 10000;

            int taxed_value() {
                return ((int) ((this.value) - ((this.value) * 0.4)));
            }

            boolean in_ca = true;

            private String test = "Test";
        });
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testSecurity_literalMutationString105225__7)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testSecurity_literalMutationString105225__7)).toString());
        String o_testSecurity_literalMutationString105225__15 = TestUtil.getContents(root, "security.txt");
        TestCase.assertEquals("", o_testSecurity_literalMutationString105225__15);
        sw.toString();
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testSecurity_literalMutationString105225__7)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testSecurity_literalMutationString105225__7)).toString());
        TestCase.assertEquals("", o_testSecurity_literalMutationString105225__15);
    }

    public void testSecurity_literalMutationString105223_failAssert0_literalMutationString106965_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("se]urity.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;

                    private String test = "W&&D";
                });
                TestUtil.getContents(root, "security.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSecurity_literalMutationString105223 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSecurity_literalMutationString105223_failAssert0_literalMutationString106965 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template se]urity.html not found", expected.getMessage());
        }
    }

    public void testSecurity_literalMutationString105249_literalMutationString105851_failAssert0_literalMutationString114587_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("y-K,j(MNut&h}");
                StringWriter sw = new StringWriter();
                Writer o_testSecurity_literalMutationString105249__7 = m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;

                    private String test = "Te<st";
                });
                String o_testSecurity_literalMutationString105249__15 = TestUtil.getContents(root, "page1.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSecurity_literalMutationString105249_literalMutationString105851 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testSecurity_literalMutationString105249_literalMutationString105851_failAssert0_literalMutationString114587 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template y-K,j(MNut&h} not found", expected.getMessage());
        }
    }

    public void testSecurity_add105263_literalMutationString105439_failAssert0null117726_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("5up?j=zB^?A87");
                StringWriter sw = new StringWriter();
                Writer o_testSecurity_add105263__7 = m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;

                    private String test = "Test";
                });
                String o_testSecurity_add105263__15 = TestUtil.getContents(root, "security.txt");
                String o_testSecurity_add105263__16 = TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testSecurity_add105263_literalMutationString105439 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSecurity_add105263_literalMutationString105439_failAssert0null117726 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 5up?j=zB^?A87 not found", expected.getMessage());
        }
    }

    public void testSecurity_add105263_literalMutationString105439_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("5up?j=zB^?A87");
            StringWriter sw = new StringWriter();
            Writer o_testSecurity_add105263__7 = m.execute(sw, new Object() {
                String name = "Chris";

                int value = 10000;

                int taxed_value() {
                    return ((int) ((this.value) - ((this.value) * 0.4)));
                }

                boolean in_ca = true;

                private String test = "Test";
            });
            String o_testSecurity_add105263__15 = TestUtil.getContents(root, "security.txt");
            String o_testSecurity_add105263__16 = TestUtil.getContents(root, "security.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSecurity_add105263_literalMutationString105439 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 5up?j=zB^?A87 not found", expected.getMessage());
        }
    }

    public void testSecurity_literalMutationString105223_failAssert0null108045_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("se]urity.html");
                StringWriter sw = new StringWriter();
                m.execute(null, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;

                    private String test = "Test";
                });
                TestUtil.getContents(root, "security.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSecurity_literalMutationString105223 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSecurity_literalMutationString105223_failAssert0null108045 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template se]urity.html not found", expected.getMessage());
        }
    }

    public void testSecurity_add105263_literalMutationString105439_failAssert0_add116992_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("5up?j=zB^?A87");
                StringWriter sw = new StringWriter();
                Writer o_testSecurity_add105263__7 = m.execute(sw, new Object() {
                    String name = "Chris";

                    int value = 10000;

                    int taxed_value() {
                        return ((int) ((this.value) - ((this.value) * 0.4)));
                    }

                    boolean in_ca = true;

                    private String test = "Test";
                });
                String o_testSecurity_add105263__15 = TestUtil.getContents(root, "security.txt");
                String o_testSecurity_add105263__16 = TestUtil.getContents(root, "security.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testSecurity_add105263_literalMutationString105439 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSecurity_add105263_literalMutationString105439_failAssert0_add116992 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 5up?j=zB^?A87 not found", expected.getMessage());
        }
    }

    public void testIdentitySimple_literalMutationString275131_failAssert0null277525_failAssert0null286350_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("Z!@.k,RdB[v");
                    StringWriter sw = new StringWriter();
                    m.identity(sw);
                    TestUtil.getContents(root, null).replaceAll("\\s+", "");
                    sw.toString().replaceAll("\\s+", null);
                    junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131_failAssert0null277525 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131_failAssert0null277525_failAssert0null286350 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Z!@.k,RdB[v not found", expected.getMessage());
        }
    }

    public void testIdentitySimple_literalMutationString275150_add277008_literalMutationString278464() throws MustacheException, IOException, InterruptedException, ExecutionException {
        DefaultMustacheFactory o_testIdentitySimple_literalMutationString275150_add277008__1 = createMustacheFactory();
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (o_testIdentitySimple_literalMutationString275150_add277008__1)).getRecursionLimit())));
        TestCase.assertNull(((DefaultMustacheFactory) (o_testIdentitySimple_literalMutationString275150_add277008__1)).getExecutorService());
        MustacheFactory c = createMustacheFactory();
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        Mustache m = c.compile("");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        m.identity(sw);
        String o_testIdentitySimple_literalMutationString275150__8 = TestUtil.getContents(root, "simple.html").replaceAll("\\s+", "");
        TestCase.assertEquals("Hello{{name}}Youhavejustwon${{value}}!{{#test}}{{/test}}{{#in_ca}}Well,${{taxed_value}},aftertaxes.{{fred}}{{/in_ca}}", o_testIdentitySimple_literalMutationString275150__8);
        String o_testIdentitySimple_literalMutationString275150__10 = sw.toString().replaceAll(">s+", "");
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", o_testIdentitySimple_literalMutationString275150__10);
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (o_testIdentitySimple_literalMutationString275150_add277008__1)).getRecursionLimit())));
        TestCase.assertNull(((DefaultMustacheFactory) (o_testIdentitySimple_literalMutationString275150_add277008__1)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("Hello{{name}}Youhavejustwon${{value}}!{{#test}}{{/test}}{{#in_ca}}Well,${{taxed_value}},aftertaxes.{{fred}}{{/in_ca}}", o_testIdentitySimple_literalMutationString275150__8);
    }

    public void testIdentitySimple_literalMutationString275131_failAssert0_add277177_failAssert0null286542_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("Z!@.k,RdB[v");
                    StringWriter sw = new StringWriter();
                    m.identity(null);
                    TestUtil.getContents(root, "simple.html");
                    TestUtil.getContents(root, "simple.html").replaceAll("\\s+", "");
                    sw.toString().replaceAll("\\s+", "");
                    junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131_failAssert0_add277177 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131_failAssert0_add277177_failAssert0null286542 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Z!@.k,RdB[v not found", expected.getMessage());
        }
    }

    public void testIdentitySimple_literalMutationString275131_failAssert0_literalMutationString276544_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("Z!@.k,Rd[v");
                StringWriter sw = new StringWriter();
                m.identity(sw);
                TestUtil.getContents(root, "simple.html").replaceAll("\\s+", "");
                sw.toString().replaceAll("\\s+", "");
                junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131_failAssert0_literalMutationString276544 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Z!@.k,Rd[v not found", expected.getMessage());
        }
    }

    public void testIdentitySimple_literalMutationString275147_literalMutationString275747_failAssert0null286618_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("d]OTIcVcz,6");
                StringWriter sw = new StringWriter();
                m.identity(sw);
                String o_testIdentitySimple_literalMutationString275147__8 = TestUtil.getContents(root, "simple.html").replaceAll("\\s+", "");
                String o_testIdentitySimple_literalMutationString275147__10 = sw.toString().replaceAll("", null);
                junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275147_literalMutationString275747 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275147_literalMutationString275747_failAssert0null286618 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template d]OTIcVcz,6 not found", expected.getMessage());
        }
    }

    public void testIdentitySimple_literalMutationString275141_literalMutationString275921_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("simpl|.html");
            StringWriter sw = new StringWriter();
            m.identity(sw);
            String o_testIdentitySimple_literalMutationString275141__8 = TestUtil.getContents(root, "simple.html").replaceAll("I@^", "");
            String o_testIdentitySimple_literalMutationString275141__10 = sw.toString().replaceAll("\\s+", "");
            junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275141_literalMutationString275921 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template simpl|.html not found", expected.getMessage());
        }
    }

    public void testIdentitySimple_literalMutationString275126_literalMutationString275797() throws MustacheException, IOException, InterruptedException, ExecutionException {
        MustacheFactory c = createMustacheFactory();
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        Mustache m = c.compile("");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        m.identity(sw);
        String o_testIdentitySimple_literalMutationString275126__8 = TestUtil.getContents(root, "simple.html").replaceAll("\\s+", "");
        TestCase.assertEquals("Hello{{name}}Youhavejustwon${{value}}!{{#test}}{{/test}}{{#in_ca}}Well,${{taxed_value}},aftertaxes.{{fred}}{{/in_ca}}", o_testIdentitySimple_literalMutationString275126__8);
        String o_testIdentitySimple_literalMutationString275126__10 = sw.toString().replaceAll("\\s+", ">");
        TestCase.assertEquals("box.html>classloader.html>client.html>client.txt>com>compiletest.mustache>complex.html>complex.txt>div.html>fallback>fdbcli.mustache>fdbcli.txt>fdbcli2.mustache>fdbcli2.txt>fdbcli3.mustache>fdbcli3.txt>follow.html>follownomenu.html>follownomenu.txt>functions>hogan.json>main.html>method.html>multiple_recursive_partials.html>multipleextensions.html>multipleextensions.txt>nested_inheritance.html>nested_inheritance.txt>nested_partials_template.html>overrideextension.html>parentreplace.html>partialintemplatefunction.html>partialsub.html>partialsubpartial.html>partialsubpartial.txt>partialsuper.html>path>pretranslate.html>psauxwww.mustache>psauxwww.txt>relative>replace.html>replace.txt>singlereplace.html>spec>sub.html>sub.txt>subblockchild1.html>subblockchild1.txt>subblockchild2.html>subblockchild2.txt>subblocksuper.html>subsub.html>subsub.txt>subsubchild1.html>subsubchild1.txt>subsubchild2.html>subsubchild2.txt>subsubchild3.html>subsubchild3.txt>subsubmiddle.html>subsubsuper.html>super.html>template.html>template.mustache>templates_filepath>templates.jar>toomany.html>tweetbox.html>uninterestingpartial.html>", o_testIdentitySimple_literalMutationString275126__10);
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("Hello{{name}}Youhavejustwon${{value}}!{{#test}}{{/test}}{{#in_ca}}Well,${{taxed_value}},aftertaxes.{{fred}}{{/in_ca}}", o_testIdentitySimple_literalMutationString275126__8);
    }

    public void testIdentitySimple_literalMutationString275148_remove277223_literalMutationString278814_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("simple.}html");
            StringWriter sw = new StringWriter();
            String o_testIdentitySimple_literalMutationString275148__8 = TestUtil.getContents(root, "simple.html").replaceAll("\\s+", "");
            String o_testIdentitySimple_literalMutationString275148__10 = sw.toString().replaceAll("\\?s+", "");
            junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275148_remove277223_literalMutationString278814 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template simple.}html not found", expected.getMessage());
        }
    }

    public void testIdentitySimple_literalMutationString275131_failAssert0_add277177_failAssert0_add285110_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    c.compile("Z!@.k,RdB[v");
                    Mustache m = c.compile("Z!@.k,RdB[v");
                    StringWriter sw = new StringWriter();
                    m.identity(sw);
                    TestUtil.getContents(root, "simple.html");
                    TestUtil.getContents(root, "simple.html").replaceAll("\\s+", "");
                    sw.toString().replaceAll("\\s+", "");
                    junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131_failAssert0_add277177 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131_failAssert0_add277177_failAssert0_add285110 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Z!@.k,RdB[v not found", expected.getMessage());
        }
    }

    public void testIdentitySimple_literalMutationString275131_failAssert0null277525_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("Z!@.k,RdB[v");
                StringWriter sw = new StringWriter();
                m.identity(sw);
                TestUtil.getContents(root, "simple.html").replaceAll("\\s+", "");
                sw.toString().replaceAll("\\s+", null);
                junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131_failAssert0null277525 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Z!@.k,RdB[v not found", expected.getMessage());
        }
    }

    public void testIdentitySimple_literalMutationString275131_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("Z!@.k,RdB[v");
            StringWriter sw = new StringWriter();
            m.identity(sw);
            TestUtil.getContents(root, "simple.html").replaceAll("\\s+", "");
            sw.toString().replaceAll("\\s+", "");
            junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Z!@.k,RdB[v not found", expected.getMessage());
        }
    }

    public void testIdentitySimple_literalMutationString275147_literalMutationString275747_failAssert0_literalMutationString282041_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("d]OTIcVcz,6");
                StringWriter sw = new StringWriter();
                m.identity(sw);
                String o_testIdentitySimple_literalMutationString275147__8 = TestUtil.getContents(root, "}:-*AHRpo!l").replaceAll("\\s+", "");
                String o_testIdentitySimple_literalMutationString275147__10 = sw.toString().replaceAll("", "");
                junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275147_literalMutationString275747 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275147_literalMutationString275747_failAssert0_literalMutationString282041 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template d]OTIcVcz,6 not found", expected.getMessage());
        }
    }

    public void testIdentitySimple_literalMutationString275131_failAssert0_add277177_failAssert0_literalMutationString281770_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("Z!@.k,RdB[v");
                    StringWriter sw = new StringWriter();
                    m.identity(sw);
                    TestUtil.getContents(root, "simple.html");
                    TestUtil.getContents(root, "simple.html").replaceAll("\\s+", "");
                    sw.toString().replaceAll("\\s+", "");
                    junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131_failAssert0_add277177 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131_failAssert0_add277177_failAssert0_literalMutationString281770 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Z!@.k,RdB[v not found", expected.getMessage());
        }
    }

    public void testIdentitySimple_literalMutationString275129_failAssert0_literalMutationString276396_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("page1].txt");
                StringWriter sw = new StringWriter();
                m.identity(sw);
                TestUtil.getContents(root, "simple.html").replaceAll("\\s+", "");
                sw.toString().replaceAll("\\s+", "");
                junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275129 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275129_failAssert0_literalMutationString276396 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template page1].txt not found", expected.getMessage());
        }
    }

    public void testIdentitySimple_literalMutationString275145_add276902_literalMutationString278288_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile(".},B}>rCZf?");
            StringWriter sw = new StringWriter();
            m.identity(sw);
            String o_testIdentitySimple_literalMutationString275145__8 = TestUtil.getContents(root, "simple.html").replaceAll("\\s+", "2");
            String o_testIdentitySimple_literalMutationString275145__10 = sw.toString().replaceAll("\\s+", "");
            m.getName();
            junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275145_add276902_literalMutationString278288 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template .},B}>rCZf? not found", expected.getMessage());
        }
    }

    public void testIdentitySimplenull275169_failAssert0_add277092_failAssert0_literalMutationString283044_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("iC_|#=)Johk");
                    StringWriter sw = new StringWriter();
                    m.identity(sw);
                    TestUtil.getContents(root, "simple.html").replaceAll("\\s+", "");
                    sw.toString().replaceAll(null, "");
                    junit.framework.TestCase.fail("testIdentitySimplenull275169 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testIdentitySimplenull275169_failAssert0_add277092 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testIdentitySimplenull275169_failAssert0_add277092_failAssert0_literalMutationString283044 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template iC_|#=)Johk not found", expected.getMessage());
        }
    }

    public void testIdentitySimple_literalMutationString275131_failAssert0null277525_failAssert0_add284854_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    c.compile("Z!@.k,RdB[v");
                    Mustache m = c.compile("Z!@.k,RdB[v");
                    StringWriter sw = new StringWriter();
                    m.identity(sw);
                    TestUtil.getContents(root, "simple.html").replaceAll("\\s+", "");
                    sw.toString().replaceAll("\\s+", null);
                    junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131_failAssert0null277525 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131_failAssert0null277525_failAssert0_add284854 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Z!@.k,RdB[v not found", expected.getMessage());
        }
    }

    public void testIdentitySimple_literalMutationString275126() throws MustacheException, IOException, InterruptedException, ExecutionException {
        MustacheFactory c = createMustacheFactory();
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        Mustache m = c.compile("");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        m.identity(sw);
        String o_testIdentitySimple_literalMutationString275126__8 = TestUtil.getContents(root, "simple.html").replaceAll("\\s+", "");
        TestCase.assertEquals("Hello{{name}}Youhavejustwon${{value}}!{{#test}}{{/test}}{{#in_ca}}Well,${{taxed_value}},aftertaxes.{{fred}}{{/in_ca}}", o_testIdentitySimple_literalMutationString275126__8);
        String o_testIdentitySimple_literalMutationString275126__10 = sw.toString().replaceAll("\\s+", "");
        TestCase.assertEquals("box.htmlclassloader.htmlclient.htmlclient.txtcomcompiletest.mustachecomplex.htmlcomplex.txtdiv.htmlfallbackfdbcli.mustachefdbcli.txtfdbcli2.mustachefdbcli2.txtfdbcli3.mustachefdbcli3.txtfollow.htmlfollownomenu.htmlfollownomenu.txtfunctionshogan.jsonmain.htmlmethod.htmlmultiple_recursive_partials.htmlmultipleextensions.htmlmultipleextensions.txtnested_inheritance.htmlnested_inheritance.txtnested_partials_template.htmloverrideextension.htmlparentreplace.htmlpartialintemplatefunction.htmlpartialsub.htmlpartialsubpartial.htmlpartialsubpartial.txtpartialsuper.htmlpathpretranslate.htmlpsauxwww.mustachepsauxwww.txtrelativereplace.htmlreplace.txtsinglereplace.htmlspecsub.htmlsub.txtsubblockchild1.htmlsubblockchild1.txtsubblockchild2.htmlsubblockchild2.txtsubblocksuper.htmlsubsub.htmlsubsub.txtsubsubchild1.htmlsubsubchild1.txtsubsubchild2.htmlsubsubchild2.txtsubsubchild3.htmlsubsubchild3.txtsubsubmiddle.htmlsubsubsuper.htmlsuper.htmltemplate.htmltemplate.mustachetemplates_filepathtemplates.jartoomany.htmltweetbox.htmluninterestingpartial.html", o_testIdentitySimple_literalMutationString275126__10);
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("Hello{{name}}Youhavejustwon${{value}}!{{#test}}{{/test}}{{#in_ca}}Well,${{taxed_value}},aftertaxes.{{fred}}{{/in_ca}}", o_testIdentitySimple_literalMutationString275126__8);
    }

    public void testIdentitySimple_literalMutationString275131_failAssert0_add277177_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("Z!@.k,RdB[v");
                StringWriter sw = new StringWriter();
                m.identity(sw);
                TestUtil.getContents(root, "simple.html");
                TestUtil.getContents(root, "simple.html").replaceAll("\\s+", "");
                sw.toString().replaceAll("\\s+", "");
                junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131_failAssert0_add277177 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Z!@.k,RdB[v not found", expected.getMessage());
        }
    }

    public void testIdentitySimplenull275167_failAssert0null277461_failAssert0_literalMutationString282970_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile(".XtN$HO[GnP");
                    StringWriter sw = new StringWriter();
                    m.identity(sw);
                    TestUtil.getContents(root, "simple.html").replaceAll(null, "");
                    sw.toString().replaceAll(null, "");
                    junit.framework.TestCase.fail("testIdentitySimplenull275167 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testIdentitySimplenull275167_failAssert0null277461 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testIdentitySimplenull275167_failAssert0null277461_failAssert0_literalMutationString282970 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template .XtN$HO[GnP not found", expected.getMessage());
        }
    }

    public void testIdentitySimple_literalMutationString275126_add276883() throws MustacheException, IOException, InterruptedException, ExecutionException {
        MustacheFactory c = createMustacheFactory();
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        Mustache m = c.compile("");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        m.identity(sw);
        String o_testIdentitySimple_literalMutationString275126__8 = TestUtil.getContents(root, "simple.html").replaceAll("\\s+", "");
        TestCase.assertEquals("Hello{{name}}Youhavejustwon${{value}}!{{#test}}{{/test}}{{#in_ca}}Well,${{taxed_value}},aftertaxes.{{fred}}{{/in_ca}}", o_testIdentitySimple_literalMutationString275126__8);
        sw.toString();
        String o_testIdentitySimple_literalMutationString275126__10 = sw.toString().replaceAll("\\s+", "");
        TestCase.assertEquals("box.htmlclassloader.htmlclient.htmlclient.txtcomcompiletest.mustachecomplex.htmlcomplex.txtdiv.htmlfallbackfdbcli.mustachefdbcli.txtfdbcli2.mustachefdbcli2.txtfdbcli3.mustachefdbcli3.txtfollow.htmlfollownomenu.htmlfollownomenu.txtfunctionshogan.jsonmain.htmlmethod.htmlmultiple_recursive_partials.htmlmultipleextensions.htmlmultipleextensions.txtnested_inheritance.htmlnested_inheritance.txtnested_partials_template.htmloverrideextension.htmlparentreplace.htmlpartialintemplatefunction.htmlpartialsub.htmlpartialsubpartial.htmlpartialsubpartial.txtpartialsuper.htmlpathpretranslate.htmlpsauxwww.mustachepsauxwww.txtrelativereplace.htmlreplace.txtsinglereplace.htmlspecsub.htmlsub.txtsubblockchild1.htmlsubblockchild1.txtsubblockchild2.htmlsubblockchild2.txtsubblocksuper.htmlsubsub.htmlsubsub.txtsubsubchild1.htmlsubsubchild1.txtsubsubchild2.htmlsubsubchild2.txtsubsubchild3.htmlsubsubchild3.txtsubsubmiddle.htmlsubsubsuper.htmlsuper.htmltemplate.htmltemplate.mustachetemplates_filepathtemplates.jartoomany.htmltweetbox.htmluninterestingpartial.html", o_testIdentitySimple_literalMutationString275126__10);
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("Hello{{name}}Youhavejustwon${{value}}!{{#test}}{{/test}}{{#in_ca}}Well,${{taxed_value}},aftertaxes.{{fred}}{{/in_ca}}", o_testIdentitySimple_literalMutationString275126__8);
    }

    public void testIdentitySimple_literalMutationString275147_literalMutationString275747_failAssert0_add285191_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                c.compile("d]OTIcVcz,6");
                Mustache m = c.compile("d]OTIcVcz,6");
                StringWriter sw = new StringWriter();
                m.identity(sw);
                String o_testIdentitySimple_literalMutationString275147__8 = TestUtil.getContents(root, "simple.html").replaceAll("\\s+", "");
                String o_testIdentitySimple_literalMutationString275147__10 = sw.toString().replaceAll("", "");
                junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275147_literalMutationString275747 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275147_literalMutationString275747_failAssert0_add285191 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template d]OTIcVcz,6 not found", expected.getMessage());
        }
    }

    public void testIdentitySimple_literalMutationString275147_literalMutationString275747_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("d]OTIcVcz,6");
            StringWriter sw = new StringWriter();
            m.identity(sw);
            String o_testIdentitySimple_literalMutationString275147__8 = TestUtil.getContents(root, "simple.html").replaceAll("\\s+", "");
            String o_testIdentitySimple_literalMutationString275147__10 = sw.toString().replaceAll("", "");
            junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275147_literalMutationString275747 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template d]OTIcVcz,6 not found", expected.getMessage());
        }
    }

    public void testIdentitySimple_literalMutationString275131_failAssert0null277525_failAssert0_literalMutationString280912_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("Z!@.k,RdB[v");
                    StringWriter sw = new StringWriter();
                    m.identity(sw);
                    TestUtil.getContents(root, "simple.html").replaceAll("", "");
                    sw.toString().replaceAll("\\s+", null);
                    junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131_failAssert0null277525 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testIdentitySimple_literalMutationString275131_failAssert0null277525_failAssert0_literalMutationString280912 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Z!@.k,RdB[v not found", expected.getMessage());
        }
    }

    public void testProperties_add195376_literalMutationString195580_failAssert0_literalMutationNumber202800_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("2=Bc-Z4i]md");
                StringWriter sw = new StringWriter();
                Writer o_testProperties_add195376__7 = m.execute(sw, new Object() {
                    String getName() {
                        return "Chris";
                    }

                    int getValue() {
                        return 10001;
                    }

                    int taxed_value() {
                        return ((int) ((this.getValue()) - ((this.getValue()) * 0.4)));
                    }

                    boolean isIn_ca() {
                        return true;
                    }
                });
                sw.toString();
                String o_testProperties_add195376__23 = TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testProperties_add195376_literalMutationString195580 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testProperties_add195376_literalMutationString195580_failAssert0_literalMutationNumber202800 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 2=Bc-Z4i]md not found", expected.getMessage());
        }
    }

    public void testProperties_literalMutationString195343_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("{c#(cHKHE7B");
            StringWriter sw = new StringWriter();
            m.execute(sw, new Object() {
                String getName() {
                    return "Chris";
                }

                int getValue() {
                    return 10000;
                }

                int taxed_value() {
                    return ((int) ((this.getValue()) - ((this.getValue()) * 0.4)));
                }

                boolean isIn_ca() {
                    return true;
                }
            });
            TestUtil.getContents(root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testProperties_literalMutationString195343 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template {c#(cHKHE7B not found", expected.getMessage());
        }
    }

    public void testProperties_add195376_literalMutationString195580_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("2=Bc-Z4i]md");
            StringWriter sw = new StringWriter();
            Writer o_testProperties_add195376__7 = m.execute(sw, new Object() {
                String getName() {
                    return "Chris";
                }

                int getValue() {
                    return 10000;
                }

                int taxed_value() {
                    return ((int) ((this.getValue()) - ((this.getValue()) * 0.4)));
                }

                boolean isIn_ca() {
                    return true;
                }
            });
            sw.toString();
            String o_testProperties_add195376__23 = TestUtil.getContents(root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testProperties_add195376_literalMutationString195580 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 2=Bc-Z4i]md not found", expected.getMessage());
        }
    }

    public void testProperties_literalMutationString195343_failAssert0_literalMutationString196514_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("{c#(cHK5E7B");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String getName() {
                        return "Chris";
                    }

                    int getValue() {
                        return 10000;
                    }

                    int taxed_value() {
                        return ((int) ((this.getValue()) - ((this.getValue()) * 0.4)));
                    }

                    boolean isIn_ca() {
                        return true;
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testProperties_literalMutationString195343 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testProperties_literalMutationString195343_failAssert0_literalMutationString196514 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template {c#(cHK5E7B not found", expected.getMessage());
        }
    }

    public void testProperties_add195376_literalMutationString195580_failAssert0null206966_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("2=Bc-Z4i]md");
                StringWriter sw = new StringWriter();
                Writer o_testProperties_add195376__7 = m.execute(sw, new Object() {
                    String getName() {
                        return "Chris";
                    }

                    int getValue() {
                        return 10000;
                    }

                    int taxed_value() {
                        return ((int) ((this.getValue()) - ((this.getValue()) * 0.4)));
                    }

                    boolean isIn_ca() {
                        return true;
                    }
                });
                sw.toString();
                String o_testProperties_add195376__23 = TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testProperties_add195376_literalMutationString195580 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testProperties_add195376_literalMutationString195580_failAssert0null206966 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 2=Bc-Z4i]md not found", expected.getMessage());
        }
    }

    public void testProperties_literalMutationString195343_failAssert0_add197478_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("{c#(cHKHE7B");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String getName() {
                        return "Chris";
                    }

                    int getValue() {
                        return 10000;
                    }

                    int taxed_value() {
                        return ((int) ((this.getValue()) - ((this.getValue()) * 0.4)));
                    }

                    boolean isIn_ca() {
                        return true;
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testProperties_literalMutationString195343 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testProperties_literalMutationString195343_failAssert0_add197478 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template {c#(cHKHE7B not found", expected.getMessage());
        }
    }

    public void testProperties_literalMutationString195339() throws MustacheException, IOException, InterruptedException, ExecutionException {
        MustacheFactory c = createMustacheFactory();
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        Mustache m = c.compile("");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        Writer o_testProperties_literalMutationString195339__7 = m.execute(sw, new Object() {
            String getName() {
                return "Chris";
            }

            int getValue() {
                return 10000;
            }

            int taxed_value() {
                return ((int) ((this.getValue()) - ((this.getValue()) * 0.4)));
            }

            boolean isIn_ca() {
                return true;
            }
        });
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testProperties_literalMutationString195339__7)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testProperties_literalMutationString195339__7)).toString());
        String o_testProperties_literalMutationString195339__22 = TestUtil.getContents(root, "simple.txt");
        TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", o_testProperties_literalMutationString195339__22);
        sw.toString();
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testProperties_literalMutationString195339__7)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testProperties_literalMutationString195339__7)).toString());
        TestCase.assertEquals("Hello Chris\n  You have just won $10000!\n\nWell, $6000,  after taxes.\n", o_testProperties_literalMutationString195339__22);
    }

    public void testProperties_literalMutationString195343_failAssert0null197712_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("{c#(cHKHE7B");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    String getName() {
                        return "Chris";
                    }

                    int getValue() {
                        return 10000;
                    }

                    int taxed_value() {
                        return ((int) ((this.getValue()) - ((this.getValue()) * 0.4)));
                    }

                    boolean isIn_ca() {
                        return true;
                    }
                });
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testProperties_literalMutationString195343 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testProperties_literalMutationString195343_failAssert0null197712 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template {c#(cHKHE7B not found", expected.getMessage());
        }
    }

    public void testProperties_literalMutationNumber195355null197681_failAssert0_literalMutationString201878_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("jjMi3*[>8G;");
                StringWriter sw = new StringWriter();
                Writer o_testProperties_literalMutationNumber195355__7 = m.execute(null, new Object() {
                    String getName() {
                        return "Chris";
                    }

                    int getValue() {
                        return 5000;
                    }

                    int taxed_value() {
                        return ((int) ((this.getValue()) - ((this.getValue()) * 0.4)));
                    }

                    boolean isIn_ca() {
                        return true;
                    }
                });
                String o_testProperties_literalMutationNumber195355__23 = TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testProperties_literalMutationNumber195355null197681 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testProperties_literalMutationNumber195355null197681_failAssert0_literalMutationString201878 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template jjMi3*[>8G; not found", expected.getMessage());
        }
    }

    public void testProperties_add195376_literalMutationString195580_failAssert0_add206013_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("2=Bc-Z4i]md");
                StringWriter sw = new StringWriter();
                Writer o_testProperties_add195376__7 = m.execute(sw, new Object() {
                    String getName() {
                        return "Chris";
                    }

                    int getValue() {
                        return 10000;
                    }

                    int taxed_value() {
                        return ((int) ((this.getValue()) - ((this.getValue()) * 0.4)));
                    }

                    boolean isIn_ca() {
                        return true;
                    }
                });
                sw.toString();
                sw.toString();
                String o_testProperties_add195376__23 = TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testProperties_add195376_literalMutationString195580 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testProperties_add195376_literalMutationString195580_failAssert0_add206013 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 2=Bc-Z4i]md not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString72106_failAssert0_add77041_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                StringWriter sw = execute("|FH<q%mb0M]", new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString72106 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString72106_failAssert0_add77041 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template |FH<q%mb0M] not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString72152_failAssert0_add77057_failAssert0_literalMutationString88425_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                {
                    StringWriter sw = execute("/@7jZPajs`n", new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                        }
                    });
                    TestUtil.getContents(root, "simzple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString72152 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString72152_failAssert0_add77057 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString72152_failAssert0_add77057_failAssert0_literalMutationString88425 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template /@7jZPajs`n not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString72106_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            StringWriter sw = execute("|FH<q%mb0M]", new HashMap<String, Object>() {
                {
                    put("name", "Chris");
                    put("value", 10000);
                    put("taxed_value", 6000);
                    put("in_ca", true);
                }
            });
            TestUtil.getContents(root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString72106 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template |FH<q%mb0M] not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString72106_failAssert0null77919_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            {
                StringWriter sw = execute("|FH<q%mb0M]", new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", null);
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString72106 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString72106_failAssert0null77919 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template |FH<q%mb0M] not found", expected.getMessage());
        }
    }

    public void testSimpleWithMap_literalMutationString72109_literalMutationString74164_failAssert0() throws MustacheException, IOException, InterruptedException, ExecutionException {
        try {
            StringWriter sw = execute("pwkT?>!hgVO", new HashMap<String, Object>() {
                {
                    Object o_testSimpleWithMap_literalMutationString72109__8 = put("nae", "Chris");
                    Object o_testSimpleWithMap_literalMutationString72109__9 = put("value", 10000);
                    Object o_testSimpleWithMap_literalMutationString72109__10 = put("taxed_value", 6000);
                    Object o_testSimpleWithMap_literalMutationString72109__11 = put("in_ca", true);
                }
            });
            String o_testSimpleWithMap_literalMutationString72109__12 = TestUtil.getContents(root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSimpleWithMap_literalMutationString72109_literalMutationString74164 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template pwkT?>!hgVO not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61883_failAssert0_add62176_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("+1yK,*o1^[!XPB-S>Fc25/^LC#l]s&");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_add62176 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +1yK,*o1^[!XPB-S>Fc25/^LC#l]s& not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61883_failAssert0_add62174_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                c.compile("+1yK,*o1^[!XPB-S>Fc25/^LC#l]s&");
                Mustache m = c.compile("+1yK,*o1^[!XPB-S>Fc25/^LC#l]s&");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_add62174 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +1yK,*o1^[!XPB-S>Fc25/^LC#l]s& not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add61890_literalMutationString61944_failAssert0_add64708_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                c.compile("partialinte:platefunction.html");
                Mustache m = c.compile("partialinte:platefunction.html");
                StringWriter sw = new StringWriter();
                Writer o_testPartialWithTF_add61890__7 = m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_add61890_literalMutationString61944 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_add61890_literalMutationString61944_failAssert0_add64708 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialinte:platefunction.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61883_failAssert0_add62175_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("+1yK,*o1^[!XPB-S>Fc25/^LC#l]s&");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_add62175 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +1yK,*o1^[!XPB-S>Fc25/^LC#l]s& not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove61892_literalMutationString61965_failAssert0_literalMutationString63188_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("qN> &U ,prdF U9!p&<IcI2!Qn];ON");
                StringWriter sw = new StringWriter();
                Writer o_testPartialWithTF_remove61892__7 = m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_remove61892_literalMutationString61965 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_remove61892_literalMutationString61965_failAssert0_literalMutationString63188 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template qN> &U ,prdF U9!p&<IcI2!Qn];ON not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61881_failAssert0_add62180_failAssert0_literalMutationString63458_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("pa tialintemplaefunction.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        public TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    m.execute(sw, new Object() {
                        public TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61881 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61881_failAssert0_add62180 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61881_failAssert0_add62180_failAssert0_literalMutationString63458 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template pa tialintemplaefunction.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61883_failAssert0_add62173_failAssert0() throws MustacheException, IOException {
        try {
            {
                createMustacheFactory();
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("+1yK,*o1^[!XPB-S>Fc25/^LC#l]s&");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_add62173 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +1yK,*o1^[!XPB-S>Fc25/^LC#l]s& not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61883_failAssert0_add62177_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("+1yK,*o1^[!XPB-S>Fc25/^LC#l]s&");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_add62177 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +1yK,*o1^[!XPB-S>Fc25/^LC#l]s& not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61884_failAssert0_literalMutationString61988_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile(" does not exist");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61884 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61884_failAssert0_literalMutationString61988 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61883_failAssert0_add62174_failAssert0null65363_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    c.compile("+1yK,*o1^[!XPB-S>Fc25/^LC#l]s&");
                    Mustache m = c.compile("+1yK,*o1^[!XPB-S>Fc25/^LC#l]s&");
                    StringWriter sw = new StringWriter();
                    m.execute(null, new Object() {
                        public TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_add62174 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_add62174_failAssert0null65363 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +1yK,*o1^[!XPB-S>Fc25/^LC#l]s& not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove61892_literalMutationString61964_failAssert0_literalMutationString63505_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("partiaintem|platefunction.html");
                StringWriter sw = new StringWriter();
                Writer o_testPartialWithTF_remove61892__7 = m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_remove61892_literalMutationString61964 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_remove61892_literalMutationString61964_failAssert0_literalMutationString63505 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partiaintem|platefunction.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add61887_add62031_literalMutationString62726_failAssert0() throws MustacheException, IOException {
        try {
            DefaultMustacheFactory o_testPartialWithTF_add61887__1 = createMustacheFactory();
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("(enXN[,iy2L(M;d3%V|0|*s>KTipkM");
            StringWriter sw = new StringWriter();
            Writer o_testPartialWithTF_add61887__8 = m.execute(sw, new Object() {
                public TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            ((StringWriter) (o_testPartialWithTF_add61887__8)).getBuffer().toString();
            junit.framework.TestCase.fail("testPartialWithTF_add61887_add62031_literalMutationString62726 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template (enXN[,iy2L(M;d3%V|0|*s>KTipkM not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61883_failAssert0_add62176_failAssert0_literalMutationString63442_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("=V2g?gwN(-&s,}C9&SF>]V+TRfu8U9");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        public TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_add62176 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_add62176_failAssert0_literalMutationString63442 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template =V2g?gwN(-&s,}C9&SF>]V+TRfu8U9 not found", expected.getMessage());
        }
    }

    public void testPartialWithTFnull61894_failAssert0_literalMutationString61980_failAssert0_literalMutationString63150_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("i:h.{|sip&X-sr01L6nkNxMCQyyaq1");
                    StringWriter sw = new StringWriter();
                    m.execute(null, new Object() {
                        public TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTFnull61894 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testPartialWithTFnull61894_failAssert0_literalMutationString61980 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTFnull61894_failAssert0_literalMutationString61980_failAssert0_literalMutationString63150 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template i:h.{|sip&X-sr01L6nkNxMCQyyaq1 not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61885_failAssert0_add62169_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                c.compile("partialintem|latefunction.html");
                Mustache m = c.compile("partialintem|latefunction.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61885 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61885_failAssert0_add62169 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialintem|latefunction.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove61892_literalMutationString61965_failAssert0_add64659_failAssert0() throws MustacheException, IOException {
        try {
            {
                createMustacheFactory();
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("qN> &? ,prdF U9!p&<IcI2!Qn];ON");
                StringWriter sw = new StringWriter();
                Writer o_testPartialWithTF_remove61892__7 = m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_remove61892_literalMutationString61965 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_remove61892_literalMutationString61965_failAssert0_add64659 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template qN> &? ,prdF U9!p&<IcI2!Qn];ON not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61885_failAssert0_add62171_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("partialintem|latefunction.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61885 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61885_failAssert0_add62171 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialintem|latefunction.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61883_failAssert0_literalMutationString62001_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("+1yK,*o1p[!XPB-S>Fc25/^LC#l]s&");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_literalMutationString62001 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +1yK,*o1p[!XPB-S>Fc25/^LC#l]s& not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove61891_literalMutationString61971_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("tx-Ig@PY).OxO%:[cZ (Z;9hW&%YFE");
            StringWriter sw = new StringWriter();
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_remove61891_literalMutationString61971 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template tx-Ig@PY).OxO%:[cZ (Z;9hW&%YFE not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove61892_literalMutationString61964_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("partialintem|platefunction.html");
            StringWriter sw = new StringWriter();
            Writer o_testPartialWithTF_remove61892__7 = m.execute(sw, new Object() {
                public TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_remove61892_literalMutationString61964 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialintem|platefunction.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove61892_literalMutationString61965_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("qN> &? ,prdF U9!p&<IcI2!Qn];ON");
            StringWriter sw = new StringWriter();
            Writer o_testPartialWithTF_remove61892__7 = m.execute(sw, new Object() {
                public TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_remove61892_literalMutationString61965 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template qN> &? ,prdF U9!p&<IcI2!Qn];ON not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61883_failAssert0_add62175_failAssert0_add64888_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    createMustacheFactory();
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("+1yK,*o1^[!XPB-S>Fc25/^LC#l]s&");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        public TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    m.execute(sw, new Object() {
                        public TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_add62175 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_add62175_failAssert0_add64888 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +1yK,*o1^[!XPB-S>Fc25/^LC#l]s& not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove61892_literalMutationString61964_failAssert0_add64945_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("partialintem|platefunction.html");
                StringWriter sw = new StringWriter();
                Writer o_testPartialWithTF_remove61892__7 = m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_remove61892_literalMutationString61964 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_remove61892_literalMutationString61964_failAssert0_add64945 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialintem|platefunction.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove61892_literalMutationString61963_failAssert0_literalMutationString63198_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("L+d_=&zWzR_Yt.ylRUX]9^#c(bt@Rm");
                StringWriter sw = new StringWriter();
                Writer o_testPartialWithTF_remove61892__7 = m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_remove61892_literalMutationString61963 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_remove61892_literalMutationString61963_failAssert0_literalMutationString63198 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template L+d_=&zWzR_Yt.ylRUX]9^#c(bt@Rm not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add61890_literalMutationString61945_failAssert0_add64971_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("partialintemplatefunc]tion.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                Writer o_testPartialWithTF_add61890__7 = m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_add61890_literalMutationString61945 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_add61890_literalMutationString61945_failAssert0_add64971 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialintemplatefunc]tion.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove61891_remove62194_literalMutationString62756_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("partialinte platefunction.html");
            StringWriter sw = new StringWriter();
            junit.framework.TestCase.fail("testPartialWithTF_remove61891_remove62194_literalMutationString62756 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialinte platefunction.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61885_failAssert0_add62170_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("partialintem|latefunction.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61885 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61885_failAssert0_add62170 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialintem|latefunction.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61883_failAssert0_add62174_failAssert0_literalMutationString63111_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    c.compile("+1yK,*o1^[!XPB-S>Fc25/^LC#l]s&");
                    Mustache m = c.compile("");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        public TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_add62174 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_add62174_failAssert0_literalMutationString63111 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +1yK,*o1^[!XPB-S>Fc25/^LC#l]s& not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add61889_literalMutationString61939_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("Xi>qF?jWE194h-x}{v_}dEaT[[)az]");
            StringWriter sw = new StringWriter();
            Writer o_testPartialWithTF_add61889__7 = m.execute(sw, new Object() {
                public TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            Writer o_testPartialWithTF_add61889__14 = m.execute(sw, new Object() {
                public TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_add61889_literalMutationString61939 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Xi>qF?jWE194h-x}{v_}dEaT[[)az] not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61883_failAssert0_add62176_failAssert0_add64883_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    c.compile("+1yK,*o1^[!XPB-S>Fc25/^LC#l]s&");
                    Mustache m = c.compile("+1yK,*o1^[!XPB-S>Fc25/^LC#l]s&");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        public TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_add62176 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_add62176_failAssert0_add64883 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +1yK,*o1^[!XPB-S>Fc25/^LC#l]s& not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61882() throws MustacheException, IOException {
        MustacheFactory c = createMustacheFactory();
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        Mustache m = c.compile("");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        Writer o_testPartialWithTF_literalMutationString61882__7 = m.execute(sw, new Object() {
            public TemplateFunction i() {
                return ( s) -> s;
            }
        });
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testPartialWithTF_literalMutationString61882__7)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testPartialWithTF_literalMutationString61882__7)).toString());
        sw.toString();
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testPartialWithTF_literalMutationString61882__7)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testPartialWithTF_literalMutationString61882__7)).toString());
    }

    public void testPartialWithTF_add61890_literalMutationString61945_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("partialintemplatefunc]tion.html");
            StringWriter sw = new StringWriter();
            Writer o_testPartialWithTF_add61890__7 = m.execute(sw, new Object() {
                public TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_add61890_literalMutationString61945 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialintemplatefunc]tion.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61885_failAssert0_literalMutationString61995_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("4z+m!Hckb3Bk}R;3@<9B8HFjy(w6av");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61885 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61885_failAssert0_literalMutationString61995 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 4z+m!Hckb3Bk}R;3@<9B8HFjy(w6av not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove61892_literalMutationString61962_failAssert0_literalMutationString63497_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("hvP vSS0v8y;`o1q7#M@d8L|m&K5B");
                StringWriter sw = new StringWriter();
                Writer o_testPartialWithTF_remove61892__7 = m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_remove61892_literalMutationString61962 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_remove61892_literalMutationString61962_failAssert0_literalMutationString63497 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
        }
    }

    public void testPartialWithTF_add61888_literalMutationString61951_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache o_testPartialWithTF_add61888__3 = c.compile("partialintemplate|function.html");
            Mustache m = c.compile("partialintemplatefunction.html");
            StringWriter sw = new StringWriter();
            Writer o_testPartialWithTF_add61888__8 = m.execute(sw, new Object() {
                public TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_add61888_literalMutationString61951 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialintemplate|function.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add61889_literalMutationString61940_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("partialintemplat}function.html");
            StringWriter sw = new StringWriter();
            Writer o_testPartialWithTF_add61889__7 = m.execute(sw, new Object() {
                public TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            Writer o_testPartialWithTF_add61889__14 = m.execute(sw, new Object() {
                public TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_add61889_literalMutationString61940 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialintemplat}function.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61884_failAssert0_literalMutationString61992_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("-1h.O,;|Q");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61884 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61884_failAssert0_literalMutationString61992 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template -1h.O,;|Q not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add61888_literalMutationString61959_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache o_testPartialWithTF_add61888__3 = c.compile("partialintemplatefunction.html");
            Mustache m = c.compile("J<!.YKP* q:Y(Mdl,|d`&;}|2pSHv*");
            StringWriter sw = new StringWriter();
            Writer o_testPartialWithTF_add61888__8 = m.execute(sw, new Object() {
                public TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_add61888_literalMutationString61959 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template J<!.YKP* q:Y(Mdl,|d`&;}|2pSHv* not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61883_failAssert0_literalMutationString62003_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("+1y,*o1^[!XPB-S>Fc25/^LC#l]s&");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_literalMutationString62003 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +1y,*o1^[!XPB-S>Fc25/^LC#l]s& not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61886_failAssert0_literalMutationString61981_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("_>pR3#bT`@vgJeC71cD3vBz8r*6`HU|");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61886 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61886_failAssert0_literalMutationString61981 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template _>pR3#bT`@vgJeC71cD3vBz8r*6`HU| not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add61889_add62056_literalMutationString62918_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("][a*=`v-G<#zLYD`iM75Q(Mh[/Kilb");
            StringWriter sw = new StringWriter();
            Writer o_testPartialWithTF_add61889__7 = m.execute(sw, new Object() {
                public TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            Writer o_testPartialWithTF_add61889__14 = m.execute(sw, new Object() {
                public TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            ((StringWriter) (o_testPartialWithTF_add61889__14)).getBuffer().toString();
            junit.framework.TestCase.fail("testPartialWithTF_add61889_add62056_literalMutationString62918 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ][a*=`v-G<#zLYD`iM75Q(Mh[/Kilb not found", expected.getMessage());
        }
    }

    public void testPartialWithTFnull61894_failAssert0_literalMutationString61980_failAssert0_add64629_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    createMustacheFactory();
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("vTh-D<o_Y}n[N?p/NMrSxr_A[l$Gu8");
                    StringWriter sw = new StringWriter();
                    m.execute(null, new Object() {
                        public TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTFnull61894 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testPartialWithTFnull61894_failAssert0_literalMutationString61980 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTFnull61894_failAssert0_literalMutationString61980_failAssert0_add64629 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template vTh-D<o_Y}n[N?p/NMrSxr_A[l$Gu8 not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add61890_literalMutationString61945_failAssert0null65500_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("partialintemplatefunc]tion.html");
                StringWriter sw = new StringWriter();
                Writer o_testPartialWithTF_add61890__7 = m.execute(null, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_add61890_literalMutationString61945 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_add61890_literalMutationString61945_failAssert0null65500 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialintemplatefunc]tion.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add61888_literalMutationString61949_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache o_testPartialWithTF_add61888__3 = c.compile("partialin{emplatefunction.html");
            Mustache m = c.compile("partialintemplatefunction.html");
            StringWriter sw = new StringWriter();
            Writer o_testPartialWithTF_add61888__8 = m.execute(sw, new Object() {
                public TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_add61888_literalMutationString61949 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialin{emplatefunction.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add61887_literalMutationString61933_failAssert0() throws MustacheException, IOException {
        try {
            DefaultMustacheFactory o_testPartialWithTF_add61887__1 = createMustacheFactory();
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("9.n@HziR_{kgHD!o}4eQgLn ,x<zx4");
            StringWriter sw = new StringWriter();
            Writer o_testPartialWithTF_add61887__8 = m.execute(sw, new Object() {
                public TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_add61887_literalMutationString61933 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 9.n@HziR_{kgHD!o}4eQgLn ,x<zx4 not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove61892_literalMutationString61964_failAssert0null65490_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("partialintem|platefunction.html");
                StringWriter sw = new StringWriter();
                Writer o_testPartialWithTF_remove61892__7 = m.execute(null, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_remove61892_literalMutationString61964 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_remove61892_literalMutationString61964_failAssert0null65490 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialintem|platefunction.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add61887null62198_failAssert0_literalMutationString62998_failAssert0() throws MustacheException, IOException {
        try {
            {
                DefaultMustacheFactory o_testPartialWithTF_add61887__1 = createMustacheFactory();
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("aOHIst-_*;V](c;U.Lz);K.27sI&LT");
                StringWriter sw = new StringWriter();
                Writer o_testPartialWithTF_add61887__8 = m.execute(null, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_add61887null62198 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_add61887null62198_failAssert0_literalMutationString62998 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template aOHIst-_*;V](c;U.Lz);K.27sI&LT not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add61890_literalMutationString61947_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("zQwgR!K{16TY{]&&Ap/]UW2e/rg5j/");
            StringWriter sw = new StringWriter();
            Writer o_testPartialWithTF_add61890__7 = m.execute(sw, new Object() {
                public TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_add61890_literalMutationString61947 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template zQwgR!K{16TY{]&&Ap/]UW2e/rg5j/ not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add61890_literalMutationString61946_failAssert0_literalMutationString63241_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile(",aLoYwYkEv#WCW&R;^sY!4mDfj)P}");
                StringWriter sw = new StringWriter();
                Writer o_testPartialWithTF_add61890__7 = m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_add61890_literalMutationString61946 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_add61890_literalMutationString61946_failAssert0_literalMutationString63241 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ,aLoYwYkEv#WCW&R;^sY!4mDfj)P} not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61883_failAssert0null62221_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("+1yK,*o1^[!XPB-S>Fc25/^LC#l]s&");
                StringWriter sw = new StringWriter();
                m.execute(null, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0null62221 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +1yK,*o1^[!XPB-S>Fc25/^LC#l]s& not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61885_failAssert0_literalMutationString61998_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("partialintem|latefunctKion.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61885 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61885_failAssert0_literalMutationString61998 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialintem|latefunctKion.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61885_failAssert0_literalMutationString61997_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("partia8intem|latefunction.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61885 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61885_failAssert0_literalMutationString61997 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partia8intem|latefunction.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove61892_literalMutationString61965_failAssert0null65383_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("qN> &? ,prdF U9!p&<IcI2!Qn];ON");
                StringWriter sw = new StringWriter();
                Writer o_testPartialWithTF_remove61892__7 = m.execute(null, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_remove61892_literalMutationString61965 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_remove61892_literalMutationString61965_failAssert0null65383 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template qN> &? ,prdF U9!p&<IcI2!Qn];ON not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add61888_literalMutationString61953_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache o_testPartialWithTF_add61888__3 = c.compile("_9&o/O0_rvGel}[$&%=3W(An*<U /J");
            Mustache m = c.compile("partialintemplatefunction.html");
            StringWriter sw = new StringWriter();
            Writer o_testPartialWithTF_add61888__8 = m.execute(sw, new Object() {
                public TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_add61888_literalMutationString61953 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template _9&o/O0_rvGel}[$&%=3W(An*<U /J not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add61890_literalMutationString61947_failAssert0_add64975_failAssert0() throws MustacheException, IOException {
        try {
            {
                createMustacheFactory();
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("zQwgR!K{16TY{]&&Ap/]UW2e/rg5j/");
                StringWriter sw = new StringWriter();
                Writer o_testPartialWithTF_add61890__7 = m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_add61890_literalMutationString61947 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_add61890_literalMutationString61947_failAssert0_add64975 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template zQwgR!K{16TY{]&&Ap/]UW2e/rg5j/ not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61883_failAssert0_add62174_failAssert0_add64601_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    createMustacheFactory();
                    MustacheFactory c = createMustacheFactory();
                    c.compile("+1yK,*o1^[!XPB-S>Fc25/^LC#l]s&");
                    Mustache m = c.compile("+1yK,*o1^[!XPB-S>Fc25/^LC#l]s&");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        public TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_add62174 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_add62174_failAssert0_add64601 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +1yK,*o1^[!XPB-S>Fc25/^LC#l]s& not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add61890_literalMutationString61944_failAssert0_literalMutationString63245_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("partialinte:patefunction.html");
                StringWriter sw = new StringWriter();
                Writer o_testPartialWithTF_add61890__7 = m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_add61890_literalMutationString61944 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_add61890_literalMutationString61944_failAssert0_literalMutationString63245 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialinte:patefunction.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61883_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("+1yK,*o1^[!XPB-S>Fc25/^LC#l]s&");
            StringWriter sw = new StringWriter();
            m.execute(sw, new Object() {
                public TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +1yK,*o1^[!XPB-S>Fc25/^LC#l]s& not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61882_add62139_literalMutationString62741_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("?");
            StringWriter sw = new StringWriter();
            Writer o_testPartialWithTF_literalMutationString61882__7 = m.execute(sw, new Object() {
                public TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            o_testPartialWithTF_literalMutationString61882__7.toString();
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61882_add62139_literalMutationString62741 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ? not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove61892_literalMutationString61964_failAssert0_add64944_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("partialintem|platefunction.html");
                StringWriter sw = new StringWriter();
                Writer o_testPartialWithTF_remove61892__7 = m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_remove61892_literalMutationString61964 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_remove61892_literalMutationString61964_failAssert0_add64944 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialintem|platefunction.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTFnull61894_failAssert0_literalMutationString61980_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("vTh-D<o_Y}n[N?p/NMrSxr_A[l$Gu8");
                StringWriter sw = new StringWriter();
                m.execute(null, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTFnull61894 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testPartialWithTFnull61894_failAssert0_literalMutationString61980 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template vTh-D<o_Y}n[N?p/NMrSxr_A[l$Gu8 not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61885_failAssert0null62219_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("partialintem|latefunction.html");
                StringWriter sw = new StringWriter();
                m.execute(null, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61885 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61885_failAssert0null62219 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialintem|latefunction.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61883_failAssert0_add62176_failAssert0null65469_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("+1yK,*o1^[!XPB-S>Fc25/^LC#l]s&");
                    StringWriter sw = new StringWriter();
                    m.execute(null, new Object() {
                        public TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_add62176 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_add62176_failAssert0null65469 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +1yK,*o1^[!XPB-S>Fc25/^LC#l]s& not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add61890_literalMutationString61947_failAssert0_literalMutationString63545_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("zQwgR!K{160Y{]&&Ap/]UW2e/rg5j/");
                StringWriter sw = new StringWriter();
                Writer o_testPartialWithTF_add61890__7 = m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_add61890_literalMutationString61947 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_add61890_literalMutationString61947_failAssert0_literalMutationString63545 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template zQwgR!K{160Y{]&&Ap/]UW2e/rg5j/ not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61885_failAssert0_add62168_failAssert0() throws MustacheException, IOException {
        try {
            {
                createMustacheFactory();
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("partialintem|latefunction.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61885 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61885_failAssert0_add62168 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialintem|latefunction.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add61890_literalMutationString61945_failAssert0_literalMutationString63539_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("partialintem,platefunc]tion.html");
                StringWriter sw = new StringWriter();
                Writer o_testPartialWithTF_add61890__7 = m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_add61890_literalMutationString61945 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_add61890_literalMutationString61945_failAssert0_literalMutationString63539 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialintem,platefunc]tion.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add61887_add62024_literalMutationString62873_failAssert0() throws MustacheException, IOException {
        try {
            DefaultMustacheFactory o_testPartialWithTF_add61887__1 = createMustacheFactory();
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("A+fqyOO]}TY#W1ao<(d#M!wt).Yg{r");
            StringWriter sw = new StringWriter();
            Writer o_testPartialWithTF_add61887__8 = m.execute(sw, new Object() {
                public TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_add61887_add62024_literalMutationString62873 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template A+fqyOO]}TY#W1ao<(d#M!wt).Yg{r not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61883_failAssert0_literalMutationString62004_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("+1yK,*o1^[!XPB-S>F|c25/^LC#l]s&");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_literalMutationString62004 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +1yK,*o1^[!XPB-S>F|c25/^LC#l]s& not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61885_failAssert0_add62172_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("partialintem|latefunction.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61885 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61885_failAssert0_add62172 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialintem|latefunction.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61883_failAssert0_literalMutationString62002_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile(";5VC[31a`^;u=N-iP{,j.2_a^mOK5v");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_literalMutationString62002 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ;5VC[31a`^;u=N-iP{,j.2_a^mOK5v not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add61890_literalMutationString61944_failAssert0null65400_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("partialinte:platefunction.html");
                StringWriter sw = new StringWriter();
                Writer o_testPartialWithTF_add61890__7 = m.execute(null, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_add61890_literalMutationString61944 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_add61890_literalMutationString61944_failAssert0null65400 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialinte:platefunction.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add61890_literalMutationString61944_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("partialinte:platefunction.html");
            StringWriter sw = new StringWriter();
            Writer o_testPartialWithTF_add61890__7 = m.execute(sw, new Object() {
                public TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_add61890_literalMutationString61944 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialinte:platefunction.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_remove61892_literalMutationString61964_failAssert0_literalMutationString63502_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("partialintem|platefunctPion.html");
                StringWriter sw = new StringWriter();
                Writer o_testPartialWithTF_remove61892__7 = m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_remove61892_literalMutationString61964 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_remove61892_literalMutationString61964_failAssert0_literalMutationString63502 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialintem|platefunctPion.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61883_failAssert0_add62173_failAssert0_add64598_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    createMustacheFactory();
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("+1yK,*o1^[!XPB-S>Fc25/^LC#l]s&");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new Object() {
                        public TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    m.execute(sw, new Object() {
                        public TemplateFunction i() {
                            return ( s) -> s;
                        }
                    });
                    sw.toString();
                    junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_add62173 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61883_failAssert0_add62173_failAssert0_add64598 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template +1yK,*o1^[!XPB-S>Fc25/^LC#l]s& not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61885_failAssert0_literalMutationString61996_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("partialintem|laefunction.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61885 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61885_failAssert0_literalMutationString61996 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialintem|laefunction.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61881_failAssert0_literalMutationString62010_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("j5h]jxaW%jT;O5,x1g>i@XcIB _cA");
                StringWriter sw = new StringWriter();
                m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61881 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61881_failAssert0_literalMutationString62010 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template j5h]jxaW%jT;O5,x1g>i@XcIB _cA not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_add61890_literalMutationString61945_failAssert0_add64969_failAssert0() throws MustacheException, IOException {
        try {
            {
                createMustacheFactory();
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("partialintemplatefunc]tion.html");
                StringWriter sw = new StringWriter();
                Writer o_testPartialWithTF_add61890__7 = m.execute(sw, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_add61890_literalMutationString61945 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_add61890_literalMutationString61945_failAssert0_add64969 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialintemplatefunc]tion.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61885_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("partialintem|latefunction.html");
            StringWriter sw = new StringWriter();
            m.execute(sw, new Object() {
                public TemplateFunction i() {
                    return ( s) -> s;
                }
            });
            sw.toString();
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61885 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template partialintem|latefunction.html not found", expected.getMessage());
        }
    }

    public void testPartialWithTF_literalMutationString61882null62211_failAssert0_literalMutationString63002_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("?");
                StringWriter sw = new StringWriter();
                Writer o_testPartialWithTF_literalMutationString61882__7 = m.execute(null, new Object() {
                    public TemplateFunction i() {
                        return ( s) -> s;
                    }
                });
                sw.toString();
                junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61882null62211 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testPartialWithTF_literalMutationString61882null62211_failAssert0_literalMutationString63002 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ? not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString13498_failAssert0null15629_failAssert0_literalMutationString18968_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("x)VhJ[<)(8g5");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile(null);
                    m.execute(sw, o);
                    TestUtil.getContents(root, "");
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString13498 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString13498_failAssert0null15629 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString13498_failAssert0null15629_failAssert0_literalMutationString18968 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template x)VhJ[<)(8g5 not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString13498_failAssert0null15629_failAssert0_literalMutationString18964_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("x)VhJ[<)(8g5");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "page1.txt");
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile(null);
                    m.execute(sw, o);
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString13498 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString13498_failAssert0null15629 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString13498_failAssert0null15629_failAssert0_literalMutationString18964 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template x)VhJ[<)(8g5 not found", expected.getMessage());
        }
    }

    public void testComplex_remove46_failAssert0_literalMutationString488_failAssert0null12839_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("complex html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile("complex.html");
                    m.execute(sw, o);
                    TestUtil.getContents(root, null);
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_remove46 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testComplex_remove46_failAssert0_literalMutationString488 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_remove46_failAssert0_literalMutationString488_failAssert0null12839 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template complex html not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString13498_failAssert0_add15238_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("x)VhJ[<)(8g5");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("complex.html");
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString13498 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString13498_failAssert0_add15238 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template x)VhJ[<)(8g5 not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString13498_failAssert0null15629_failAssert0_add23200_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("x)VhJ[<)(8g5");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile(null);
                    m.execute(sw, o);
                    m.execute(sw, o);
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString13498 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString13498_failAssert0null15629 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString13498_failAssert0null15629_failAssert0_add23200 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template x)VhJ[<)(8g5 not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString13498_failAssert0_add15238_failAssert0_literalMutationString17182_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("x)VhJ[<)(8g5");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "cCmplex.txt");
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile("complex.html");
                    m.execute(sw, o);
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString13498 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString13498_failAssert0_add15238 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString13498_failAssert0_add15238_failAssert0_literalMutationString17182 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template x)VhJ[<)(8g5 not found", expected.getMessage());
        }
    }

    public void testComplexnull13546_failAssert0_literalMutationString13764_failAssert0_literalMutationString17774_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("WL60}f*PY,a]");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile(null);
                    m.execute(sw, o);
                    TestUtil.getContents(root, "");
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexnull13546 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testComplexnull13546_failAssert0_literalMutationString13764 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexnull13546_failAssert0_literalMutationString13764_failAssert0_literalMutationString17774 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template WL60}f*PY,a] not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString396134_failAssert0_add397603_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("complex.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                JsonInterpreterTest.toObject(jsonNode);
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("5z@5=l!5;JD]");
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString396134 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString396134_failAssert0_add397603 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
        }
    }

    public void testComplex_literalMutationString396120_failAssert0_literalMutationString396933_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("}r/>YG]gLHR$");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("");
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString396120 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString396120_failAssert0_literalMutationString396933 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }r/>YG]gLHR$ not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString13511_failAssert0null15426_failAssert0_literalMutationString16690_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("complex.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile("{ZRswC;X*Xg`");
                    m.execute(sw, o);
                    TestUtil.getContents(root, "");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString13511 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString13511_failAssert0null15426 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString13511_failAssert0null15426_failAssert0_literalMutationString16690 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template {ZRswC;X*Xg` not found", expected.getMessage());
        }
    }

    public void testComplex_remove46_failAssert0_literalMutationString488_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("complex html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("complex.html");
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_remove46 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testComplex_remove46_failAssert0_literalMutationString488 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template complex html not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString13498_failAssert0() throws MustacheException, IOException {
        try {
            StringWriter json = new StringWriter();
            MappingJsonFactory jf = new MappingJsonFactory();
            final JsonGenerator jg = jf.createJsonGenerator(json);
            jg.writeStartObject();
            final JsonCapturer captured = new JsonCapturer(jg);
            MustacheFactory c = new DefaultMustacheFactory(root) {
                @Override
                public MustacheVisitor createMustacheVisitor() {
                    return new CapturingMustacheVisitor(this, captured);
                }
            };
            Mustache m = c.compile("x)VhJ[<)(8g5");
            StringWriter sw = new StringWriter();
            m.execute(sw, new ComplexObject());
            jg.writeEndObject();
            jg.flush();
            TestUtil.getContents(root, "complex.txt");
            sw.toString();
            JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
            Object o = JsonInterpreterTest.toObject(jsonNode);
            sw = new StringWriter();
            m = createMustacheFactory().compile("complex.html");
            m.execute(sw, o);
            TestUtil.getContents(root, "complex.txt");
            sw.toString();
            TestUtil.getContents(root, "complex.txt");
            sw.toString();
            junit.framework.TestCase.fail("testComplex_literalMutationString13498 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template x)VhJ[<)(8g5 not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString396120_failAssert0null398158_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("}r/>YG]gLHR$");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile(null);
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString396120 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString396120_failAssert0null398158 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }r/>YG]gLHR$ not found", expected.getMessage());
        }
    }

    public void testComplexnull13546_failAssert0_literalMutationString13764_failAssert0null25360_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("WL60}f*PY,a]");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile(null);
                    m.execute(sw, o);
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexnull13546 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testComplexnull13546_failAssert0_literalMutationString13764 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexnull13546_failAssert0_literalMutationString13764_failAssert0null25360 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template WL60}f*PY,a] not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString13507_failAssert0_literalMutationString14214_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("complex.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("H}yZTCv4vr,i");
                m.execute(sw, o);
                TestUtil.getContents(root, "complx.txt");
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString13507 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString13507_failAssert0_literalMutationString14214 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template H}yZTCv4vr,i not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString13498_failAssert0_literalMutationString14562_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("x)VhJ[<)(8g5");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("complex.html");
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                TestUtil.getContents(root, "compnlex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString13498 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString13498_failAssert0_literalMutationString14562 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template x)VhJ[<)(8g5 not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString13507_failAssert0_literalMutationString14193_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("}O? /;Fc^#?F");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("H}yZTCv4vr,i");
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString13507 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString13507_failAssert0_literalMutationString14193 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }O? /;Fc^#?F not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString13498_failAssert0_literalMutationString14551_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("x)VhJ[<)(8g5");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("complex.htl");
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString13498 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString13498_failAssert0_literalMutationString14551 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template x)VhJ[<)(8g5 not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString396120_failAssert0_add397703_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("}r/>YG]gLHR$");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("complex.html");
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString396120 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString396120_failAssert0_add397703 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }r/>YG]gLHR$ not found", expected.getMessage());
        }
    }

    public void testComplexnull13546_failAssert0_literalMutationString13764_failAssert0_literalMutationString17762_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("WL60}fPY,a]");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile(null);
                    m.execute(sw, o);
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexnull13546 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testComplexnull13546_failAssert0_literalMutationString13764 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexnull13546_failAssert0_literalMutationString13764_failAssert0_literalMutationString17762 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template WL60}fPY,a] not found", expected.getMessage());
        }
    }

    public void testComplexnull13546_failAssert0_literalMutationString13764_failAssert0_add22302_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("WL60}f*PY,a]");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile(null);
                    m.execute(sw, o);
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexnull13546 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testComplexnull13546_failAssert0_literalMutationString13764 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexnull13546_failAssert0_literalMutationString13764_failAssert0_add22302 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template WL60}f*PY,a] not found", expected.getMessage());
        }
    }

    public void testComplexnull13546_failAssert0_literalMutationString13764_failAssert0_add22307_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("WL60}f*PY,a]");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    jf.createJsonParser(json.toString());
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile(null);
                    m.execute(sw, o);
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexnull13546 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testComplexnull13546_failAssert0_literalMutationString13764 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexnull13546_failAssert0_literalMutationString13764_failAssert0_add22307 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template WL60}f*PY,a] not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString1_failAssert0() throws MustacheException, IOException {
        try {
            StringWriter json = new StringWriter();
            MappingJsonFactory jf = new MappingJsonFactory();
            final JsonGenerator jg = jf.createJsonGenerator(json);
            jg.writeStartObject();
            final JsonCapturer captured = new JsonCapturer(jg);
            MustacheFactory c = new DefaultMustacheFactory(root) {
                @Override
                public MustacheVisitor createMustacheVisitor() {
                    return new CapturingMustacheVisitor(this, captured);
                }
            };
            Mustache m = c.compile("Rcp}om)!dFq.");
            StringWriter sw = new StringWriter();
            m.execute(sw, new ComplexObject());
            jg.writeEndObject();
            jg.flush();
            TestUtil.getContents(root, "complex.txt");
            sw.toString();
            JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
            Object o = JsonInterpreterTest.toObject(jsonNode);
            sw = new StringWriter();
            m = createMustacheFactory().compile("complex.html");
            m.execute(sw, o);
            TestUtil.getContents(root, "complex.txt");
            sw.toString();
            TestUtil.getContents(root, "complex.txt");
            sw.toString();
            junit.framework.TestCase.fail("testComplex_literalMutationString1 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Rcp}om)!dFq. not found", expected.getMessage());
        }
    }

    public void testComplexnull13544_failAssert0_literalMutationString13743_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("compl]ex.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, null);
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("complex.html");
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplexnull13544 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testComplexnull13544_failAssert0_literalMutationString13743 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template compl]ex.html not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString13507_failAssert0() throws MustacheException, IOException {
        try {
            StringWriter json = new StringWriter();
            MappingJsonFactory jf = new MappingJsonFactory();
            final JsonGenerator jg = jf.createJsonGenerator(json);
            jg.writeStartObject();
            final JsonCapturer captured = new JsonCapturer(jg);
            MustacheFactory c = new DefaultMustacheFactory(root) {
                @Override
                public MustacheVisitor createMustacheVisitor() {
                    return new CapturingMustacheVisitor(this, captured);
                }
            };
            Mustache m = c.compile("complex.html");
            StringWriter sw = new StringWriter();
            m.execute(sw, new ComplexObject());
            jg.writeEndObject();
            jg.flush();
            TestUtil.getContents(root, "complex.txt");
            sw.toString();
            JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
            Object o = JsonInterpreterTest.toObject(jsonNode);
            sw = new StringWriter();
            m = createMustacheFactory().compile("H}yZTCv4vr,i");
            m.execute(sw, o);
            TestUtil.getContents(root, "complex.txt");
            sw.toString();
            TestUtil.getContents(root, "complex.txt");
            sw.toString();
            junit.framework.TestCase.fail("testComplex_literalMutationString13507 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template H}yZTCv4vr,i not found", expected.getMessage());
        }
    }

    public void testComplexnull13547_failAssert0_literalMutationString13686_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("tNtT^PmX%a[E");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("complex.html");
                m.execute(null, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplexnull13547 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testComplexnull13547_failAssert0_literalMutationString13686 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template tNtT^PmX%a[E not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString13507_failAssert0null15498_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("complex.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("H}yZTCv4vr,i");
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString13507 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString13507_failAssert0null15498 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template H}yZTCv4vr,i not found", expected.getMessage());
        }
    }

    public void testComplexnull13544_failAssert0null15315_failAssert0_literalMutationString16134_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("comp`ex.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile(null);
                    m.execute(sw, o);
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexnull13544 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testComplexnull13544_failAssert0null15315 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testComplexnull13544_failAssert0null15315_failAssert0_literalMutationString16134 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template comp`ex.html not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString1_failAssert0null2115_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("Rcp}om)!dFq.");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(null);
                sw = new StringWriter();
                m = createMustacheFactory().compile("complex.html");
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString1 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString1_failAssert0null2115 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Rcp}om)!dFq. not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString3_failAssert0_literalMutationString942_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("compl].html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("complex.html");
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString3 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString3_failAssert0_literalMutationString942 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template compl].html not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString15_failAssert0() throws MustacheException, IOException {
        try {
            StringWriter json = new StringWriter();
            MappingJsonFactory jf = new MappingJsonFactory();
            final JsonGenerator jg = jf.createJsonGenerator(json);
            jg.writeStartObject();
            final JsonCapturer captured = new JsonCapturer(jg);
            MustacheFactory c = new DefaultMustacheFactory(root) {
                @Override
                public MustacheVisitor createMustacheVisitor() {
                    return new CapturingMustacheVisitor(this, captured);
                }
            };
            Mustache m = c.compile("complex.html");
            StringWriter sw = new StringWriter();
            m.execute(sw, new ComplexObject());
            jg.writeEndObject();
            jg.flush();
            TestUtil.getContents(root, "complex.txt");
            sw.toString();
            JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
            Object o = JsonInterpreterTest.toObject(jsonNode);
            sw = new StringWriter();
            m = createMustacheFactory().compile("EIWp/9a9}{ A");
            m.execute(sw, o);
            TestUtil.getContents(root, "complex.txt");
            sw.toString();
            TestUtil.getContents(root, "complex.txt");
            sw.toString();
            junit.framework.TestCase.fail("testComplex_literalMutationString15 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template EIWp/9a9}{ A not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString1_failAssert0_literalMutationString1017_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("Rcp}om)!dFq.");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("complex.html");
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                TestUtil.getContents(root, "page1.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString1 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString1_failAssert0_literalMutationString1017 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Rcp}om)!dFq. not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString396120_failAssert0null398153_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("}r/>YG]gLHR$");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("complex.html");
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString396120 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString396120_failAssert0null398153 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }r/>YG]gLHR$ not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString396120_failAssert0null398158_failAssert0_add405993_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("}r/>YG]gLHR$");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    jg.flush();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile(null);
                    m.execute(sw, o);
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString396120 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString396120_failAssert0null398158 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString396120_failAssert0null398158_failAssert0_add405993 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }r/>YG]gLHR$ not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString13498_failAssert0_add15245_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("x)VhJ[<)(8g5");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                createMustacheFactory();
                m = createMustacheFactory().compile("complex.html");
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString13498 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString13498_failAssert0_add15245 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template x)VhJ[<)(8g5 not found", expected.getMessage());
        }
    }

    public void testComplexnull13549_failAssert0_literalMutationString13808_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("`cLs_pmm1]bW");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("complex.html");
                m.execute(sw, o);
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testComplexnull13549 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testComplexnull13549_failAssert0_literalMutationString13808 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template `cLs_pmm1]bW not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString396120_failAssert0_add397701_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("}r/>YG]gLHR$");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("complex.html");
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString396120 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString396120_failAssert0_add397701 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }r/>YG]gLHR$ not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString396130_failAssert0null398201_failAssert0_literalMutationString401860_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("Ym&naISt,]Wf");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile("page1.txt");
                    m.execute(null, o);
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString396130 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString396130_failAssert0null398201 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString396130_failAssert0null398201_failAssert0_literalMutationString401860 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Ym&naISt,]Wf not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString15_failAssert0_add1613_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("complex.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("EIWp/9a9}{ A");
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString15 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString15_failAssert0_add1613 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template EIWp/9a9}{ A not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString396121_failAssert0null398270_failAssert0_literalMutationString401808_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("d9Z!;O]yY");
                    StringWriter sw = new StringWriter();
                    m.execute(null, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile("complex.html");
                    m.execute(sw, o);
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString396121 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString396121_failAssert0null398270 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString396121_failAssert0null398270_failAssert0_literalMutationString401808 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template d9Z!;O]yY not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString396134_failAssert0_add397596_failAssert0_literalMutationString402696_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("j6o!:7&fRxN/");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile("5z@5=l!5;JD]");
                    m.execute(sw, o);
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString396134 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString396134_failAssert0_add397596 should have thrown JsonGenerationException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString396134_failAssert0_add397596_failAssert0_literalMutationString402696 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template j6o!:7&fRxN/ not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString15_failAssert0_add1613_failAssert0_add8593_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("complex.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile("EIWp/9a9}{ A");
                    m.execute(sw, o);
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString15 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString15_failAssert0_add1613 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString15_failAssert0_add1613_failAssert0_add8593 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template EIWp/9a9}{ A not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString13498_failAssert0_add15238_failAssert0_add21860_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    c.compile("x)VhJ[<)(8g5");
                    Mustache m = c.compile("x)VhJ[<)(8g5");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "complex.txt");
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile("complex.html");
                    m.execute(sw, o);
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString13498 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString13498_failAssert0_add15238 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString13498_failAssert0_add15238_failAssert0_add21860 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template x)VhJ[<)(8g5 not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString396120_failAssert0() throws MustacheException, IOException {
        try {
            StringWriter json = new StringWriter();
            MappingJsonFactory jf = new MappingJsonFactory();
            final JsonGenerator jg = jf.createJsonGenerator(json);
            jg.writeStartObject();
            final JsonCapturer captured = new JsonCapturer(jg);
            MustacheFactory c = new DefaultMustacheFactory(root) {
                @Override
                public MustacheVisitor createMustacheVisitor() {
                    return new CapturingMustacheVisitor(this, captured);
                }
            };
            Mustache m = c.compile("}r/>YG]gLHR$");
            StringWriter sw = new StringWriter();
            m.execute(sw, new ComplexObject());
            jg.writeEndObject();
            jg.flush();
            TestUtil.getContents(root, "complex.txt");
            sw.toString();
            JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
            Object o = JsonInterpreterTest.toObject(jsonNode);
            sw = new StringWriter();
            m = createMustacheFactory().compile("complex.html");
            m.execute(sw, o);
            TestUtil.getContents(root, "complex.txt");
            sw.toString();
            TestUtil.getContents(root, "complex.txt");
            sw.toString();
            junit.framework.TestCase.fail("testComplex_literalMutationString396120 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }r/>YG]gLHR$ not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString396134_failAssert0() throws MustacheException, IOException {
        try {
            StringWriter json = new StringWriter();
            MappingJsonFactory jf = new MappingJsonFactory();
            final JsonGenerator jg = jf.createJsonGenerator(json);
            jg.writeStartObject();
            final JsonCapturer captured = new JsonCapturer(jg);
            MustacheFactory c = new DefaultMustacheFactory(root) {
                @Override
                public MustacheVisitor createMustacheVisitor() {
                    return new CapturingMustacheVisitor(this, captured);
                }
            };
            Mustache m = c.compile("complex.html");
            StringWriter sw = new StringWriter();
            m.execute(sw, new ComplexObject());
            jg.writeEndObject();
            jg.flush();
            TestUtil.getContents(root, "complex.txt");
            sw.toString();
            JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
            Object o = JsonInterpreterTest.toObject(jsonNode);
            sw = new StringWriter();
            m = createMustacheFactory().compile("5z@5=l!5;JD]");
            m.execute(sw, o);
            TestUtil.getContents(root, "complex.txt");
            sw.toString();
            TestUtil.getContents(root, "complex.txt");
            sw.toString();
            junit.framework.TestCase.fail("testComplex_literalMutationString396134 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
        }
    }

    public void testComplex_literalMutationString396132_failAssert0_literalMutationString397187_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("TxGtdySA8Cf ");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("comlex.html");
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString396132 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString396132_failAssert0_literalMutationString397187 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template TxGtdySA8Cf  not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString15_failAssert0_add1613_failAssert0_literalMutationString3974_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile("EIWp/9a9}{ A");
                    m.execute(sw, o);
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString15 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString15_failAssert0_add1613 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString15_failAssert0_add1613_failAssert0_literalMutationString3974 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template EIWp/9a9}{ A not found", expected.getMessage());
        }
    }

    public void testComplex_remove46_failAssert0_literalMutationString488_failAssert0_add10664_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("complex html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile("complex.html");
                    m.execute(sw, o);
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_remove46 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testComplex_remove46_failAssert0_literalMutationString488 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_remove46_failAssert0_literalMutationString488_failAssert0_add10664 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template complex html not found", expected.getMessage());
        }
    }

    public void testComplexnull13545_failAssert0_add14742_failAssert0_literalMutationString19437_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("complex.}html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    jf.createJsonParser(json.toString()).readValueAsTree();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(null);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile("complex.html");
                    m.execute(sw, o);
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexnull13545 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testComplexnull13545_failAssert0_add14742 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testComplexnull13545_failAssert0_add14742_failAssert0_literalMutationString19437 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template complex.}html not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString13498_failAssert0null15629_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("x)VhJ[<)(8g5");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile(null);
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString13498 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString13498_failAssert0null15629 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template x)VhJ[<)(8g5 not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString396120_failAssert0null398158_failAssert0null408581_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("}r/>YG]gLHR$");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile(null);
                    m.execute(sw, o);
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString396120 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString396120_failAssert0null398158 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString396120_failAssert0null398158_failAssert0null408581 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }r/>YG]gLHR$ not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString396138_failAssert0_add397844_failAssert0_literalMutationString402216_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("complex.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile("KR:gj%NydS=Z");
                    m.execute(sw, o);
                    TestUtil.getContents(root, "page1.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString396138 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString396138_failAssert0_add397844 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString396138_failAssert0_add397844_failAssert0_literalMutationString402216 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template KR:gj%NydS=Z not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString13515_failAssert0_literalMutationString14419_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("complex.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("comple%.html");
                m.execute(sw, o);
                TestUtil.getContents(root, "com#lex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString13515 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString13515_failAssert0_literalMutationString14419 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template comple%.html not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString13507_failAssert0_add15006_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("complex.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("H}yZTCv4vr,i");
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString13507 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString13507_failAssert0_add15006 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template H}yZTCv4vr,i not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString15_failAssert0null2066_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("complex.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("EIWp/9a9}{ A");
                m.execute(sw, o);
                TestUtil.getContents(root, null);
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString15 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString15_failAssert0null2066 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template EIWp/9a9}{ A not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString13498_failAssert0null15629_failAssert0_add23195_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("x)VhJ[<)(8g5");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    jf.createJsonParser(json.toString());
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile(null);
                    m.execute(sw, o);
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString13498 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString13498_failAssert0null15629 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString13498_failAssert0null15629_failAssert0_add23195 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template x)VhJ[<)(8g5 not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString396134_failAssert0_literalMutationString396805_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("complex.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("5z@5=l!5;PJD]");
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString396134 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString396134_failAssert0_literalMutationString396805 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
        }
    }

    public void testComplex_literalMutationString396134_failAssert0_literalMutationString396809_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("complex.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("5z@5=l!5;JD]");
                m.execute(sw, o);
                TestUtil.getContents(root, "coQplex.txt");
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString396134 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString396134_failAssert0_literalMutationString396809 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
        }
    }

    public void testComplex_literalMutationString13502_failAssert0_literalMutationString14570_failAssert0_literalMutationString18420_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile(";]q2rK I]9Mv");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "coJmplex.t3xt");
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile("complex.html");
                    m.execute(sw, o);
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString13502 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString13502_failAssert0_literalMutationString14570 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString13502_failAssert0_literalMutationString14570_failAssert0_literalMutationString18420 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ;]q2rK I]9Mv not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString13502_failAssert0_literalMutationString14564_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("co[plex.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "coJmplex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("complex.html");
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString13502 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString13502_failAssert0_literalMutationString14564 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template co[plex.html not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString396135_failAssert0_literalMutationString396845_failAssert0_literalMutationString400707_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("bhYFVO8AnT[");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile("complex.html");
                    m.execute(sw, o);
                    TestUtil.getContents(root, "c:mplex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString396135 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString396135_failAssert0_literalMutationString396845 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString396135_failAssert0_literalMutationString396845_failAssert0_literalMutationString400707 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template bhYFVO8AnT[ not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString15_failAssert0_literalMutationString873_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("complex.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("EIWp/9a9}{ A");
                m.execute(sw, o);
                TestUtil.getContents(root, "page1.txt");
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString15 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString15_failAssert0_literalMutationString873 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template EIWp/9a9}{ A not found", expected.getMessage());
        }
    }

    public void testComplexnull13546_failAssert0_literalMutationString13764_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("WL60}f*PY,a]");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile(null);
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplexnull13546 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testComplexnull13546_failAssert0_literalMutationString13764 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template WL60}f*PY,a] not found", expected.getMessage());
        }
    }

    public void testComplexnull13549_failAssert0_add14719_failAssert0_literalMutationString19271_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("c}mplex.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile("complex.html");
                    m.execute(sw, o);
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexnull13549 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testComplexnull13549_failAssert0_add14719 should have thrown EmptyStackException");
            }
            junit.framework.TestCase.fail("testComplexnull13549_failAssert0_add14719_failAssert0_literalMutationString19271 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template c}mplex.html not found", expected.getMessage());
        }
    }

    public void testComplexnull13546_failAssert0_literalMutationString13764_failAssert0null25365_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("WL60}f*PY,a]");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile(null);
                    m.execute(null, o);
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexnull13546 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testComplexnull13546_failAssert0_literalMutationString13764 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexnull13546_failAssert0_literalMutationString13764_failAssert0null25365 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template WL60}f*PY,a] not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString1_failAssert0_add1720_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("Rcp}om)!dFq.");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("complex.html");
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString1 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString1_failAssert0_add1720 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Rcp}om)!dFq. not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString13509_failAssert0_add15119_failAssert0_literalMutationString19764_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("F4co]h[QN`1U");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile("complex.Btml");
                    m.execute(sw, o);
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString13509 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString13509_failAssert0_add15119 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString13509_failAssert0_add15119_failAssert0_literalMutationString19764 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template F4co]h[QN`1U not found", expected.getMessage());
        }
    }

    public void testComplex_remove46_failAssert0_literalMutationString488_failAssert0_literalMutationString6800_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("complex html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile("complex.html");
                    m.execute(sw, o);
                    TestUtil.getContents(root, "comple3.txt");
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_remove46 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testComplex_remove46_failAssert0_literalMutationString488 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_remove46_failAssert0_literalMutationString488_failAssert0_literalMutationString6800 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template complex html not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString396120_failAssert0null398158_failAssert0_literalMutationString401795_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter json = new StringWriter();
                    MappingJsonFactory jf = new MappingJsonFactory();
                    final JsonGenerator jg = jf.createJsonGenerator(json);
                    jg.writeStartObject();
                    final JsonCapturer captured = new JsonCapturer(jg);
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new CapturingMustacheVisitor(this, captured);
                        }
                    };
                    Mustache m = c.compile("}r/>YG]gLHR$");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ComplexObject());
                    jg.writeEndObject();
                    jg.flush();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                    Object o = JsonInterpreterTest.toObject(jsonNode);
                    sw = new StringWriter();
                    m = createMustacheFactory().compile(null);
                    m.execute(sw, o);
                    TestUtil.getContents(root, "page1.txt");
                    sw.toString();
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplex_literalMutationString396120 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplex_literalMutationString396120_failAssert0null398158 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString396120_failAssert0null398158_failAssert0_literalMutationString401795 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }r/>YG]gLHR$ not found", expected.getMessage());
        }
    }

    public void testComplex_literalMutationString396120_failAssert0_literalMutationString396938_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter json = new StringWriter();
                MappingJsonFactory jf = new MappingJsonFactory();
                final JsonGenerator jg = jf.createJsonGenerator(json);
                jg.writeStartObject();
                final JsonCapturer captured = new JsonCapturer(jg);
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new CapturingMustacheVisitor(this, captured);
                    }
                };
                Mustache m = c.compile("}r/>YG]gLHR$");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ComplexObject());
                jg.writeEndObject();
                jg.flush();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                JsonNode jsonNode = jf.createJsonParser(json.toString()).readValueAsTree();
                Object o = JsonInterpreterTest.toObject(jsonNode);
                sw = new StringWriter();
                m = createMustacheFactory().compile("compleh.html");
                m.execute(sw, o);
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplex_literalMutationString396120 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplex_literalMutationString396120_failAssert0_literalMutationString396938 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }r/>YG]gLHR$ not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString223799_failAssert0null224459_failAssert0_literalMutationString225454_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = initParallel();
                    Mustache m = c.compile("c]mplex.html");
                    StringWriter sw = new StringWriter();
                    m.execute(null, new ParallelComplexObject()).close();
                    TestUtil.getContents(root, "complex.xt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexParallel_literalMutationString223799 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString223799_failAssert0null224459 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString223799_failAssert0null224459_failAssert0_literalMutationString225454 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template c]mplex.html not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString223793_failAssert0_literalMutationString224000_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = initParallel();
                Mustache m = c.compile("ppFiY$&_D>p ");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ParallelComplexObject()).close();
                TestUtil.getContents(root, "compEex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793_failAssert0_literalMutationString224000 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ppFiY$&_D>p  not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString223793_failAssert0_literalMutationString224002_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = initParallel();
                Mustache m = c.compile("ppFiY$&_D>p ");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ParallelComplexObject()).close();
                TestUtil.getContents(root, "page1.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793_failAssert0_literalMutationString224002 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ppFiY$&_D>p  not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString223793_failAssert0_literalMutationString224000_failAssert0_literalMutationString226269_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = initParallel();
                    Mustache m = c.compile("ppFiY$&_D>zp ");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ParallelComplexObject()).close();
                    TestUtil.getContents(root, "compEex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793_failAssert0_literalMutationString224000 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793_failAssert0_literalMutationString224000_failAssert0_literalMutationString226269 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ppFiY$&_D>zp  not found", expected.getMessage());
        }
    }

    public void testComplexParallel_add223802_literalMutationString223875_failAssert0_literalMutationString226476_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = initParallel();
                Mustache o_testComplexParallel_add223802__3 = c.compile("complex.html");
                Mustache m = c.compile("complex.h}ml");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ParallelComplexObject()).close();
                String o_testComplexParallel_add223802__11 = TestUtil.getContents(root, "");
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_add223802_literalMutationString223875 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_add223802_literalMutationString223875_failAssert0_literalMutationString226476 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template complex.h}ml not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString223793_failAssert0_add224326_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = initParallel();
                Mustache m = c.compile("ppFiY$&_D>p ");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ParallelComplexObject()).close();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793_failAssert0_add224326 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ppFiY$&_D>p  not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString223793_failAssert0_literalMutationString224000_failAssert0_add228460_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = initParallel();
                    c.compile("ppFiY$&_D>p ");
                    Mustache m = c.compile("ppFiY$&_D>p ");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ParallelComplexObject()).close();
                    TestUtil.getContents(root, "compEex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793_failAssert0_literalMutationString224000 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793_failAssert0_literalMutationString224000_failAssert0_add228460 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ppFiY$&_D>p  not found", expected.getMessage());
        }
    }

    public void testComplexParallel_add223802_literalMutationString223873_failAssert0_literalMutationString226491_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = initParallel();
                Mustache o_testComplexParallel_add223802__3 = c.compile("complex.html");
                Mustache m = c.compile("->7q^&Y&N>Ye");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ParallelComplexObject()).close();
                String o_testComplexParallel_add223802__11 = TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_add223802_literalMutationString223873 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_add223802_literalMutationString223873_failAssert0_literalMutationString226491 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ->7q^&Y&N>Ye not found", expected.getMessage());
        }
    }

    public void testComplexParallel_add223806_remove224407_literalMutationString225065_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = initParallel();
            Mustache m = c.compile("comp<lex.html");
            StringWriter sw = new StringWriter();
            sw.toString();
            String o_testComplexParallel_add223806__11 = TestUtil.getContents(root, "complex.txt");
            sw.toString();
            junit.framework.TestCase.fail("testComplexParallel_add223806_remove224407_literalMutationString225065 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template comp<lex.html not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString223793_failAssert0_literalMutationString224002_failAssert0_add228876_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = initParallel();
                    Mustache m = c.compile("ppFiY$&_D>p ");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ParallelComplexObject()).close();
                    TestUtil.getContents(root, "page1.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793_failAssert0_literalMutationString224002 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793_failAssert0_literalMutationString224002_failAssert0_add228876 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ppFiY$&_D>p  not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString223793_failAssert0_add224324_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = initParallel();
                Mustache m = c.compile("ppFiY$&_D>p ");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ParallelComplexObject());
                m.execute(sw, new ParallelComplexObject()).close();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793_failAssert0_add224324 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ppFiY$&_D>p  not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString223797_failAssert0_add224340_failAssert0_literalMutationString225784_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = initParallel();
                    Mustache m = c.compile("complex.>tml");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ParallelComplexObject()).close();
                    TestUtil.getContents(root, "page1.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexParallel_literalMutationString223797 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString223797_failAssert0_add224340 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString223797_failAssert0_add224340_failAssert0_literalMutationString225784 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template complex.>tml not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString223793_failAssert0null224450_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = initParallel();
                Mustache m = c.compile("ppFiY$&_D>p ");
                StringWriter sw = new StringWriter();
                m.execute(null, new ParallelComplexObject()).close();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793_failAssert0null224450 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ppFiY$&_D>p  not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString223790_failAssert0_literalMutationString224112_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = initParallel();
                Mustache m = c.compile("<*kuMZfUgE|");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ParallelComplexObject()).close();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString223790 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString223790_failAssert0_literalMutationString224112 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template <*kuMZfUgE| not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString223793_failAssert0_literalMutationString223997_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = initParallel();
                Mustache m = c.compile("^I<wUz.%.knx");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ParallelComplexObject()).close();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793_failAssert0_literalMutationString223997 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ^I<wUz.%.knx not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString223793_failAssert0null224451_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = initParallel();
                Mustache m = c.compile("ppFiY$&_D>p ");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ParallelComplexObject()).close();
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793_failAssert0null224451 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ppFiY$&_D>p  not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString223798_failAssert0_literalMutationString224041_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = initParallel();
                Mustache m = c.compile("co>plex.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ParallelComplexObject()).close();
                TestUtil.getContents(root, "cobmplex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString223798 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString223798_failAssert0_literalMutationString224041 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template co>plex.html not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString223793_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = initParallel();
            Mustache m = c.compile("ppFiY$&_D>p ");
            StringWriter sw = new StringWriter();
            m.execute(sw, new ParallelComplexObject()).close();
            TestUtil.getContents(root, "complex.txt");
            sw.toString();
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ppFiY$&_D>p  not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString223795_failAssert0_literalMutationString224078_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = initParallel();
                Mustache m = c.compile("vJTW^bnB`m))");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ParallelComplexObject()).close();
                TestUtil.getContents(root, "");
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString223795 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString223795_failAssert0_literalMutationString224078 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template vJTW^bnB`m)) not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString223793_failAssert0_literalMutationString224002_failAssert0null229553_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = initParallel();
                    Mustache m = c.compile("ppFiY$&_D>p ");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ParallelComplexObject()).close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793_failAssert0_literalMutationString224002 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793_failAssert0_literalMutationString224002_failAssert0null229553 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ppFiY$&_D>p  not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString223793_failAssert0_add224323_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = initParallel();
                Mustache m = c.compile("ppFiY$&_D>p ");
                StringWriter sw = new StringWriter();
                m.execute(sw, new ParallelComplexObject()).close();
                m.execute(sw, new ParallelComplexObject()).close();
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793_failAssert0_add224323 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ppFiY$&_D>p  not found", expected.getMessage());
        }
    }

    public void testComplexParallel_literalMutationString223793_failAssert0_literalMutationString224002_failAssert0_literalMutationString226867_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = initParallel();
                    Mustache m = c.compile("ppFiY$&_D>p ");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new ParallelComplexObject()).close();
                    TestUtil.getContents(root, "page.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793_failAssert0_literalMutationString224002 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testComplexParallel_literalMutationString223793_failAssert0_literalMutationString224002_failAssert0_literalMutationString226867 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ppFiY$&_D>p  not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270178_failAssert0_literalMutationString270391_failAssert0_literalMutationString272645_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter sw = execute("com}plex.html", new ParallelComplexObject());
                    TestUtil.getContents(root, "ZNm8%b%bhs@^");
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString270178 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270178_failAssert0_literalMutationString270391 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270178_failAssert0_literalMutationString270391_failAssert0_literalMutationString272645 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template com}plex.html not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270179_failAssert0_literalMutationString270296_failAssert0null274585_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter sw = execute("c`omplex.html", new ParallelComplexObject());
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString270179 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270179_failAssert0_literalMutationString270296 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270179_failAssert0_literalMutationString270296_failAssert0null274585 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template c`omplex.html not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270170_failAssert0_add270473_failAssert0null274429_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter sw = execute("}KPx-|/e*(5c", new ParallelComplexObject());
                    TestUtil.getContents(root, null);
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0_add270473 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0_add270473_failAssert0null274429 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }KPx-|/e*(5c not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270170_failAssert0_literalMutationString270360_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter sw = execute("}KPx-|/e*(5c", new ParallelComplexObject());
                TestUtil.getContents(root, "cooplex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0_literalMutationString270360 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }KPx-|/e*(5c not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270170_failAssert0_literalMutationString270364_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter sw = execute("}KPx-|/e*(5c", new ParallelComplexObject());
                TestUtil.getContents(root, "XHk)>u+y69,");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0_literalMutationString270364 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }KPx-|/e*(5c not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270170_failAssert0_add270474_failAssert0_add273667_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter sw = execute("}KPx-|/e*(5c", new ParallelComplexObject());
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0_add270474 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0_add270474_failAssert0_add273667 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }KPx-|/e*(5c not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270170_failAssert0_literalMutationString270359_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter sw = execute("}KPx-|/e*(5c", new ParallelComplexObject());
                TestUtil.getContents(root, "");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0_literalMutationString270359 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }KPx-|/e*(5c not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270170_failAssert0_add270474_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter sw = execute("}KPx-|/e*(5c", new ParallelComplexObject());
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0_add270474 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }KPx-|/e*(5c not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270177_failAssert0_literalMutationString270318_failAssert0_literalMutationString272233_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter sw = execute("}@H?&NZy<E%P", new ParallelComplexObject());
                    TestUtil.getContents(root, "page1.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString270177 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270177_failAssert0_literalMutationString270318 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270177_failAssert0_literalMutationString270318_failAssert0_literalMutationString272233 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }@H?&NZy<E%P not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270170_failAssert0_add270472_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter sw = execute("}KPx-|/e*(5c", new ParallelComplexObject());
                TestUtil.getContents(root, "complex.txt");
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0_add270472 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }KPx-|/e*(5c not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270170_failAssert0null270523_failAssert0_literalMutationString271527_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter sw = execute("5#gaaap<VnN8", new ParallelComplexObject());
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0null270523 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0null270523_failAssert0_literalMutationString271527 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 5#gaaap<VnN8 not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270170_failAssert0_add270474_failAssert0null274427_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter sw = execute("}KPx-|/e*(5c", new ParallelComplexObject());
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0_add270474 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0_add270474_failAssert0null274427 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }KPx-|/e*(5c not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270172_failAssert0_add270489_failAssert0_literalMutationString271662_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter sw = execute("=&pRVIB@b D6", new ParallelComplexObject());
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString270172 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270172_failAssert0_add270489 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270172_failAssert0_add270489_failAssert0_literalMutationString271662 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
        }
    }

    public void testSerialCallable_literalMutationString270180_failAssert0_literalMutationString270330_failAssert0_literalMutationString272540_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter sw = execute("CbOvsK.%_fP", new ParallelComplexObject());
                    TestUtil.getContents(root, "BG1D<0lIZ4A");
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString270180 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270180_failAssert0_literalMutationString270330 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270180_failAssert0_literalMutationString270330_failAssert0_literalMutationString272540 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template CbOvsK.%_fP not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270174_failAssert0_literalMutationString270346_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter sw = execute("/vDCiKC$XK}", new ParallelComplexObject());
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270174 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270174_failAssert0_literalMutationString270346 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template /vDCiKC$XK} not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270170_failAssert0_add270473_failAssert0_literalMutationString271722_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter sw = execute("}KPx-|/e*5c", new ParallelComplexObject());
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0_add270473 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0_add270473_failAssert0_literalMutationString271722 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }KPx-|/e*5c not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270169_add270440() throws MustacheException, IOException {
        StringWriter o_testSerialCallable_literalMutationString270169_add270440__1 = execute("", new ParallelComplexObject());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testSerialCallable_literalMutationString270169_add270440__1)).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testSerialCallable_literalMutationString270169_add270440__1)).getBuffer())).toString());
        StringWriter sw = execute("", new ParallelComplexObject());
        String o_testSerialCallable_literalMutationString270169__4 = TestUtil.getContents(root, "complex.txt");
        TestCase.assertEquals("<h1>Colors</h1>\n  <ul>\n      <li><strong>red</strong></li>\n      <li><a href=\"#Green\">green</a></li>\n      <li><a href=\"#Blue\">blue</a></li>\n  </ul>\n  <p>The list is not empty.</p>\n", o_testSerialCallable_literalMutationString270169__4);
        sw.toString();
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testSerialCallable_literalMutationString270169_add270440__1)).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testSerialCallable_literalMutationString270169_add270440__1)).getBuffer())).toString());
        TestCase.assertEquals("<h1>Colors</h1>\n  <ul>\n      <li><strong>red</strong></li>\n      <li><a href=\"#Green\">green</a></li>\n      <li><a href=\"#Blue\">blue</a></li>\n  </ul>\n  <p>The list is not empty.</p>\n", o_testSerialCallable_literalMutationString270169__4);
    }

    public void testSerialCallable_literalMutationString270170_failAssert0_literalMutationString270353_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter sw = execute("AKPx-|/e*(5c", new ParallelComplexObject());
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0_literalMutationString270353 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template AKPx-|/e*(5c not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270170_failAssert0_literalMutationString270356_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter sw = execute("}KPxs-|/e*(5c", new ParallelComplexObject());
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0_literalMutationString270356 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }KPxs-|/e*(5c not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270170_failAssert0null270523_failAssert0_add273556_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    execute("}KPx-|/e*(5c", new ParallelComplexObject());
                    StringWriter sw = execute("}KPx-|/e*(5c", new ParallelComplexObject());
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0null270523 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0null270523_failAssert0_add273556 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }KPx-|/e*(5c not found", expected.getMessage());
        }
    }

    public void testSerialCallable_add270181_literalMutationString270233_failAssert0() throws MustacheException, IOException {
        try {
            StringWriter o_testSerialCallable_add270181__1 = execute("complex.html", new ParallelComplexObject());
            StringWriter sw = execute("&H6Y2#Y1}4a8", new ParallelComplexObject());
            String o_testSerialCallable_add270181__6 = TestUtil.getContents(root, "complex.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSerialCallable_add270181_literalMutationString270233 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template &H6Y2#Y1}4a8 not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270170_failAssert0() throws MustacheException, IOException {
        try {
            StringWriter sw = execute("}KPx-|/e*(5c", new ParallelComplexObject());
            TestUtil.getContents(root, "complex.txt");
            sw.toString();
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }KPx-|/e*(5c not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270178_failAssert0_literalMutationString270391_failAssert0null274591_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter sw = execute("com}plex.html", new ParallelComplexObject());
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString270178 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270178_failAssert0_literalMutationString270391 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270178_failAssert0_literalMutationString270391_failAssert0null274591 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template com}plex.html not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270180_failAssert0_literalMutationString270331_failAssert0_literalMutationString273264_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter sw = execute("page1%.txt", new ParallelComplexObject());
                    TestUtil.getContents(root, "BG1D<0lIZ4A");
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString270180 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270180_failAssert0_literalMutationString270331 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270180_failAssert0_literalMutationString270331_failAssert0_literalMutationString273264 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template page1%.txt not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270179_failAssert0_literalMutationString270296_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter sw = execute("c`omplex.html", new ParallelComplexObject());
                TestUtil.getContents(root, "comp6ex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270179 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270179_failAssert0_literalMutationString270296 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template c`omplex.html not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270170_failAssert0null270523_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter sw = execute("}KPx-|/e*(5c", new ParallelComplexObject());
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0null270523 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }KPx-|/e*(5c not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270178_failAssert0_literalMutationString270391_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter sw = execute("com}plex.html", new ParallelComplexObject());
                TestUtil.getContents(root, "complex.tyxt");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270178 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270178_failAssert0_literalMutationString270391 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template com}plex.html not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270170_failAssert0_add270473_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter sw = execute("}KPx-|/e*(5c", new ParallelComplexObject());
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0_add270473 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }KPx-|/e*(5c not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270170_failAssert0_add270471_failAssert0() throws MustacheException, IOException {
        try {
            {
                execute("}KPx-|/e*(5c", new ParallelComplexObject());
                StringWriter sw = execute("}KPx-|/e*(5c", new ParallelComplexObject());
                TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0_add270471 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }KPx-|/e*(5c not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270178_failAssert0_literalMutationString270391_failAssert0_add274011_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter sw = execute("com}plex.html", new ParallelComplexObject());
                    TestUtil.getContents(root, "complex.tyxt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString270178 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270178_failAssert0_literalMutationString270391 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270178_failAssert0_literalMutationString270391_failAssert0_add274011 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template com}plex.html not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270179_failAssert0_literalMutationString270296_failAssert0_add273997_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter sw = execute("c`omplex.html", new ParallelComplexObject());
                    TestUtil.getContents(root, "comp6ex.txt");
                    TestUtil.getContents(root, "comp6ex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString270179 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270179_failAssert0_literalMutationString270296 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270179_failAssert0_literalMutationString270296_failAssert0_add273997 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template c`omplex.html not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270170_failAssert0_add270473_failAssert0_add273670_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter sw = execute("}KPx-|/e*(5c", new ParallelComplexObject());
                    TestUtil.getContents(root, "complex.txt");
                    TestUtil.getContents(root, "complex.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0_add270473 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0_add270473_failAssert0_add273670 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }KPx-|/e*(5c not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270170_failAssert0_add270474_failAssert0_literalMutationString271715_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    StringWriter sw = execute("}KPx-|/e*(5c", new ParallelComplexObject());
                    TestUtil.getContents(root, "com:plex.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0_add270474 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0_add270474_failAssert0_literalMutationString271715 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }KPx-|/e*(5c not found", expected.getMessage());
        }
    }

    public void testSerialCallable_add270183_literalMutationString270244_failAssert0_literalMutationString273044_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter sw = execute(" does not exist", new ParallelComplexObject());
                sw.toString();
                String o_testSerialCallable_add270183__5 = TestUtil.getContents(root, "complex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_add270183_literalMutationString270244 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_add270183_literalMutationString270244_failAssert0_literalMutationString273044 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testSerialCallable_literalMutationString270170_failAssert0_literalMutationString270363_failAssert0() throws MustacheException, IOException {
        try {
            {
                StringWriter sw = execute("}KPx-|/e*(5c", new ParallelComplexObject());
                TestUtil.getContents(root, "cxomplex.txt");
                sw.toString();
                junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testSerialCallable_literalMutationString270170_failAssert0_literalMutationString270363 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }KPx-|/e*(5c not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287407_failAssert0_add292912_failAssert0_literalMutationString311751_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("page1.txt")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "page1.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407_failAssert0_add292912 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407_failAssert0_add292912_failAssert0_literalMutationString311751 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287441_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = new DefaultMustacheFactory(root) {
                @Override
                public MustacheVisitor createMustacheVisitor() {
                    return new DefaultMustacheVisitor(this) {
                        @Override
                        public void partial(TemplateContext tc, String variable) {
                            if (variable.startsWith("+")) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                    @Override
                                    public synchronized void init() {
                                        filterText();
                                        partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                        if ((partial) == null) {
                                            throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                        }
                                    }

                                    ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                    @Override
                                    public Writer execute(Writer writer, List<Object> scopes) {
                                        StringWriter sw = new StringWriter();
                                        partial.execute(sw, scopes);
                                        Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                        Writer execute = mustache.execute(writer, scopes);
                                        return appendText(execute);
                                    }
                                });
                            } else {
                                super.partial(tc, variable);
                            }
                        }
                    };
                }
            };
            Mustache m = c.compile(new StringReader("{{>R [foo].html}}"), "test.html");
            StringWriter sw = new StringWriter();
            m.execute(sw, new HashMap<String, Object>() {
                {
                    put("name", "Chris");
                    put("value", 10000);
                    put("taxed_value", 6000);
                    put("in_ca", true);
                    put("foo", "simple");
                }
            });
            TestUtil.getContents(root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template R [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287441_failAssert0_add293472_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("+")) {
                                    tc.line();
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>R [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441_failAssert0_add293472 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template R [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287408_failAssert0_add293148_failAssert0_literalMutationString311558_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("u")) {
                                        tc.startOfLine();
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse p*rtial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287408 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287408_failAssert0_add293148 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287408_failAssert0_add293148_failAssert0_literalMutationString311558 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287425_failAssert0null294255_failAssert0null321009_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "@", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", null);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425_failAssert0null294255 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425_failAssert0null294255_failAssert0null321009 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287416_failAssert0_literalMutationString291099_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("+")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("i_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416_failAssert0_literalMutationString291099 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287438_failAssert0_literalMutationString291160_failAssert0_literalMutationString307200_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ foo].html}}"), "te9st.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "sim>le");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438_failAssert0_literalMutationString291160 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438_failAssert0_literalMutationString291160_failAssert0_literalMutationString307200 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287408_failAssert0_add293148_failAssert0_add319357_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("u")) {
                                        tc.startOfLine();
                                        tc.startOfLine();
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287408 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287408_failAssert0_add293148 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287408_failAssert0_add293148_failAssert0_add319357 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287425_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = new DefaultMustacheFactory(root) {
                @Override
                public MustacheVisitor createMustacheVisitor() {
                    return new DefaultMustacheVisitor(this) {
                        @Override
                        public void partial(TemplateContext tc, String variable) {
                            if (variable.startsWith("+")) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                    @Override
                                    public synchronized void init() {
                                        filterText();
                                        partial = df.compile(new StringReader(name), "__dynpartial__", "@", "]");
                                        if ((partial) == null) {
                                            throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                        }
                                    }

                                    ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                    @Override
                                    public Writer execute(Writer writer, List<Object> scopes) {
                                        StringWriter sw = new StringWriter();
                                        partial.execute(sw, scopes);
                                        Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                        Writer execute = mustache.execute(writer, scopes);
                                        return appendText(execute);
                                    }
                                });
                            } else {
                                super.partial(tc, variable);
                            }
                        }
                    };
                }
            };
            Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
            StringWriter sw = new StringWriter();
            m.execute(sw, new HashMap<String, Object>() {
                {
                    put("name", "Chris");
                    put("value", 10000);
                    put("taxed_value", 6000);
                    put("in_ca", true);
                    put("foo", "simple");
                }
            });
            TestUtil.getContents(root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287416_failAssert0_literalMutationString291099_failAssert0_literalMutationString307735_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("i_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416_failAssert0_literalMutationString291099 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416_failAssert0_literalMutationString291099_failAssert0_literalMutationString307735 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287427_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = new DefaultMustacheFactory(root) {
                @Override
                public MustacheVisitor createMustacheVisitor() {
                    return new DefaultMustacheVisitor(this) {
                        @Override
                        public void partial(TemplateContext tc, String variable) {
                            if (variable.startsWith("+")) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                    @Override
                                    public synchronized void init() {
                                        filterText();
                                        partial = df.compile(new StringReader(name), "__dynpartial__", "page1.txt", "]");
                                        if ((partial) == null) {
                                            throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                        }
                                    }

                                    ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                    @Override
                                    public Writer execute(Writer writer, List<Object> scopes) {
                                        StringWriter sw = new StringWriter();
                                        partial.execute(sw, scopes);
                                        Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                        Writer execute = mustache.execute(writer, scopes);
                                        return appendText(execute);
                                    }
                                });
                            } else {
                                super.partial(tc, variable);
                            }
                        }
                    };
                }
            };
            Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
            StringWriter sw = new StringWriter();
            m.execute(sw, new HashMap<String, Object>() {
                {
                    put("name", "Chris");
                    put("value", 10000);
                    put("taxed_value", 6000);
                    put("in_ca", true);
                    put("foo", "simple");
                }
            });
            TestUtil.getContents(root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287427 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287438_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = new DefaultMustacheFactory(root) {
                @Override
                public MustacheVisitor createMustacheVisitor() {
                    return new DefaultMustacheVisitor(this) {
                        @Override
                        public void partial(TemplateContext tc, String variable) {
                            if (variable.startsWith("+")) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                    @Override
                                    public synchronized void init() {
                                        filterText();
                                        partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                        if ((partial) == null) {
                                            throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                        }
                                    }

                                    ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                    @Override
                                    public Writer execute(Writer writer, List<Object> scopes) {
                                        StringWriter sw = new StringWriter();
                                        partial.execute(sw, scopes);
                                        Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                        Writer execute = mustache.execute(writer, scopes);
                                        return appendText(execute);
                                    }
                                });
                            } else {
                                super.partial(tc, variable);
                            }
                        }
                    };
                }
            };
            Mustache m = c.compile(new StringReader("{{>+ foo].html}}"), "test.html");
            StringWriter sw = new StringWriter();
            m.execute(sw, new HashMap<String, Object>() {
                {
                    put("name", "Chris");
                    put("value", 10000);
                    put("taxed_value", 6000);
                    put("in_ca", true);
                    put("foo", "simple");
                }
            });
            TestUtil.getContents(root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287430_failAssert0_add293171_failAssert0_literalMutationString302524_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        tc.file();
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "8", "page1.txt");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287430 should have thrown MustacheException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287430_failAssert0_add293171 should have thrown MustacheException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287430_failAssert0_add293171_failAssert0_literalMutationString302524 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287425_failAssert0null294255_failAssert0_add315966_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "@", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                appendText(execute);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", null);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425_failAssert0null294255 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425_failAssert0null294255_failAssert0_add315966 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287497_failAssert0_literalMutationNumber289670_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("+")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("fo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287497 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287497_failAssert0_literalMutationNumber289670 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + .html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287418_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = new DefaultMustacheFactory(root) {
                @Override
                public MustacheVisitor createMustacheVisitor() {
                    return new DefaultMustacheVisitor(this) {
                        @Override
                        public void partial(TemplateContext tc, String variable) {
                            if (variable.startsWith("+")) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                    @Override
                                    public synchronized void init() {
                                        filterText();
                                        partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                        if ((partial) == null) {
                                            throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                        }
                                    }

                                    ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                    @Override
                                    public Writer execute(Writer writer, List<Object> scopes) {
                                        StringWriter sw = new StringWriter();
                                        partial.execute(sw, scopes);
                                        Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                        Writer execute = mustache.execute(writer, scopes);
                                        return appendText(execute);
                                    }
                                });
                            } else {
                                super.partial(tc, variable);
                            }
                        }
                    };
                }
            };
            Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
            StringWriter sw = new StringWriter();
            m.execute(sw, new HashMap<String, Object>() {
                {
                    put("name", "Chris");
                    put("value", 10000);
                    put("taxed_value", 6000);
                    put("in_ca", true);
                    put("foo", "simple");
                }
            });
            TestUtil.getContents(root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287417_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = new DefaultMustacheFactory(root) {
                @Override
                public MustacheVisitor createMustacheVisitor() {
                    return new DefaultMustacheVisitor(this) {
                        @Override
                        public void partial(TemplateContext tc, String variable) {
                            if (variable.startsWith("+")) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                    @Override
                                    public synchronized void init() {
                                        filterText();
                                        partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                        if ((partial) == null) {
                                            throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                        }
                                    }

                                    ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                    @Override
                                    public Writer execute(Writer writer, List<Object> scopes) {
                                        StringWriter sw = new StringWriter();
                                        partial.execute(sw, scopes);
                                        Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                        Writer execute = mustache.execute(writer, scopes);
                                        return appendText(execute);
                                    }
                                });
                            } else {
                                super.partial(tc, variable);
                            }
                        }
                    };
                }
            };
            Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
            StringWriter sw = new StringWriter();
            m.execute(sw, new HashMap<String, Object>() {
                {
                    put("name", "Chris");
                    put("value", 10000);
                    put("taxed_value", 6000);
                    put("in_ca", true);
                    put("foo", "simple");
                }
            });
            TestUtil.getContents(root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287408_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = new DefaultMustacheFactory(root) {
                @Override
                public MustacheVisitor createMustacheVisitor() {
                    return new DefaultMustacheVisitor(this) {
                        @Override
                        public void partial(TemplateContext tc, String variable) {
                            if (variable.startsWith("u")) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                    @Override
                                    public synchronized void init() {
                                        filterText();
                                        partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                        if ((partial) == null) {
                                            throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                        }
                                    }

                                    ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                    @Override
                                    public Writer execute(Writer writer, List<Object> scopes) {
                                        StringWriter sw = new StringWriter();
                                        partial.execute(sw, scopes);
                                        Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                        Writer execute = mustache.execute(writer, scopes);
                                        return appendText(execute);
                                    }
                                });
                            } else {
                                super.partial(tc, variable);
                            }
                        }
                    };
                }
            };
            Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
            StringWriter sw = new StringWriter();
            m.execute(sw, new HashMap<String, Object>() {
                {
                    put("name", "Chris");
                    put("value", 10000);
                    put("taxed_value", 6000);
                    put("in_ca", true);
                    put("foo", "simple");
                }
            });
            TestUtil.getContents(root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287408 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287407_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = new DefaultMustacheFactory(root) {
                @Override
                public MustacheVisitor createMustacheVisitor() {
                    return new DefaultMustacheVisitor(this) {
                        @Override
                        public void partial(TemplateContext tc, String variable) {
                            if (variable.startsWith("page1.txt")) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                    @Override
                                    public synchronized void init() {
                                        filterText();
                                        partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                        if ((partial) == null) {
                                            throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                        }
                                    }

                                    ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                    @Override
                                    public Writer execute(Writer writer, List<Object> scopes) {
                                        StringWriter sw = new StringWriter();
                                        partial.execute(sw, scopes);
                                        Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                        Writer execute = mustache.execute(writer, scopes);
                                        return appendText(execute);
                                    }
                                });
                            } else {
                                super.partial(tc, variable);
                            }
                        }
                    };
                }
            };
            Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
            StringWriter sw = new StringWriter();
            m.execute(sw, new HashMap<String, Object>() {
                {
                    put("name", "Chris");
                    put("value", 10000);
                    put("taxed_value", 6000);
                    put("in_ca", true);
                    put("foo", "simple");
                }
            });
            TestUtil.getContents(root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287417_failAssert0_literalMutationNumber289942_failAssert0_literalMutationString304744_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", " ", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 0);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417_failAssert0_literalMutationNumber289942 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417_failAssert0_literalMutationNumber289942_failAssert0_literalMutationString304744 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287418_failAssert0_literalMutationString290182_failAssert0null323011_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("o")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(null, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418_failAssert0_literalMutationString290182 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418_failAssert0_literalMutationString290182_failAssert0null323011 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287416_failAssert0_add293196_failAssert0_literalMutationString303324_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        tc.file();
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416_failAssert0_add293196 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416_failAssert0_add293196_failAssert0_literalMutationString303324 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287441_failAssert0_add293472_failAssert0_add317246_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        tc.line();
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>R [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441_failAssert0_add293472 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441_failAssert0_add293472_failAssert0_add317246 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template R [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287425_failAssert0_literalMutationString290538_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("+")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "@", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("nae", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425_failAssert0_literalMutationString290538 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287440_failAssert0null294193_failAssert0_literalMutationString298694_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [f9oo].%html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", null);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287440 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287440_failAssert0null294193 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287440_failAssert0null294193_failAssert0_literalMutationString298694 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template .%html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287416_failAssert0_add293196_failAssert0_add317342_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        tc.file();
                                        tc.file();
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416_failAssert0_add293196 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416_failAssert0_add293196_failAssert0_add317342 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287407_failAssert0_add292917_failAssert0_add316719_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("page1.txt")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407_failAssert0_add292917 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407_failAssert0_add292917_failAssert0_add316719 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287416_failAssert0_literalMutationString291099_failAssert0_add318445_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("i_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416_failAssert0_literalMutationString291099 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416_failAssert0_literalMutationString291099_failAssert0_add318445 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287407_failAssert0null294054_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("page1.txt")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", null);
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407_failAssert0null294054 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287416_failAssert0_literalMutationString291099_failAssert0null323817_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", null);
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("i_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416_failAssert0_literalMutationString291099 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416_failAssert0_literalMutationString291099_failAssert0null323817 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287407_failAssert0_add292917_failAssert0_literalMutationNumber300746_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("page1.txt")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 5999);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407_failAssert0_add292917 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407_failAssert0_add292917_failAssert0_literalMutationNumber300746 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287425_failAssert0null294255_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("+")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "@", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", null);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425_failAssert0null294255 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287438_failAssert0_literalMutationString291160_failAssert0null323646_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ foo].html}}"), "te9st.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", null);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438_failAssert0_literalMutationString291160 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438_failAssert0_literalMutationString291160_failAssert0null323646 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287438_failAssert0null294422_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("+")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put(null, "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438_failAssert0null294422 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287438_failAssert0_literalMutationString291160_failAssert0_literalMutationString307162_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ foo].html}}"), "te9st.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("vale", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438_failAssert0_literalMutationString291160 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438_failAssert0_literalMutationString291160_failAssert0_literalMutationString307162 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartialnull287576_failAssert0_literalMutationString288269_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("+")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", ">", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartialnull287576 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testDynamicPartialnull287576_failAssert0_literalMutationString288269 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287417_failAssert0null294067_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("+")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(null, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417_failAssert0null294067 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287418_failAssert0_add292995_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                variable.startsWith("+");
                                if (variable.startsWith("+")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418_failAssert0_add292995 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287438_failAssert0_add293231_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("+")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            sw.toString();
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438_failAssert0_add293231 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287418_failAssert0_literalMutationString290182_failAssert0_literalMutationString304913_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("o")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("ta-ed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418_failAssert0_literalMutationString290182 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418_failAssert0_literalMutationString290182_failAssert0_literalMutationString304913 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287441_failAssert0_literalMutationNumber292235_failAssert0_add318339_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>R [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 3000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441_failAssert0_literalMutationNumber292235 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441_failAssert0_literalMutationNumber292235_failAssert0_add318339 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template R [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287417_failAssert0_literalMutationNumber289942_failAssert0null322978_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(null);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 0);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417_failAssert0_literalMutationNumber289942 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417_failAssert0_literalMutationNumber289942_failAssert0null322978 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287417_failAssert0_literalMutationString289923_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("+")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417_failAssert0_literalMutationString289923 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287418_failAssert0_add293017_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("+")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418_failAssert0_add293017 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287438_failAssert0_literalMutationString291160_failAssert0_add318280_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ foo].html}}"), "te9st.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438_failAssert0_literalMutationString291160 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438_failAssert0_literalMutationString291160_failAssert0_add318280 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287417_failAssert0_literalMutationNumber289942_failAssert0_add317719_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 0);
                            put("in_ca", true);
                            put("foo", "simple");
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417_failAssert0_literalMutationNumber289942 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417_failAssert0_literalMutationNumber289942_failAssert0_add317719 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287427_failAssert0_add293458_failAssert0_literalMutationString302418_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "page1txt", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                appendText(execute);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287427 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287427_failAssert0_add293458 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287427_failAssert0_add293458_failAssert0_literalMutationString302418 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287417_failAssert0_add292925_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("+")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    variable.substring(0).trim();
                                    list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417_failAssert0_add292925 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287441_failAssert0_literalMutationNumber292235_failAssert0null323708_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>R [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 3000);
                            put("in_ca", null);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441_failAssert0_literalMutationNumber292235 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441_failAssert0_literalMutationNumber292235_failAssert0null323708 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template R [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287418_failAssert0_literalMutationString290182_failAssert0_add317736_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("o")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                appendText(execute);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418_failAssert0_literalMutationString290182 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418_failAssert0_literalMutationString290182_failAssert0_add317736 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartialnull287575_failAssert0null293726_failAssert0_literalMutationNumber297167_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(null, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", null);
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartialnull287575 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartialnull287575_failAssert0null293726 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartialnull287575_failAssert0null293726_failAssert0_literalMutationNumber297167 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + .html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287416_failAssert0null294386_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("+")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(null, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416_failAssert0null294386 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287408_failAssert0_add293148_failAssert0null324853_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("u")) {
                                        tc.startOfLine();
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287408 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287408_failAssert0_add293148 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287408_failAssert0_add293148_failAssert0null324853 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287408_failAssert0_add293149_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("u")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                    list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287408 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287408_failAssert0_add293149 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287509_failAssert0null294214_failAssert0_literalMutationString299267_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(null);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "si:mple");
                        }
                    });
                    TestUtil.getContents(root, "simp{le.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287509 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287509_failAssert0null294214 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287509_failAssert0null294214_failAssert0_literalMutationString299267 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template si:mple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287418_failAssert0_literalMutationString290221_failAssert0null325461_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "t^st.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", null);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418_failAssert0_literalMutationString290221 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418_failAssert0_literalMutationString290221_failAssert0null325461 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287425_failAssert0_add293082_failAssert0_add317051_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "@", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                mustache.execute(writer, scopes);
                                                Writer execute = mustache.execute(writer, scopes);
                                                appendText(execute);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425_failAssert0_add293082 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425_failAssert0_add293082_failAssert0_add317051 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287417_failAssert0_literalMutationNumber289942_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("+")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 0);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417_failAssert0_literalMutationNumber289942 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287438_failAssert0_literalMutationString291160_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("+")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ foo].html}}"), "te9st.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438_failAssert0_literalMutationString291160 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287427_failAssert0_add293458_failAssert0_add317140_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "page1.txt", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                appendText(execute);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287427 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287427_failAssert0_add293458 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287427_failAssert0_add293458_failAssert0_add317140 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287438_failAssert0null294422_failAssert0null321140_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put(null, null);
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438_failAssert0null294422 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438_failAssert0null294422_failAssert0null321140 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287407_failAssert0_add292917_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("page1.txt")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407_failAssert0_add292917 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287407_failAssert0_add292912_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("page1.txt")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407_failAssert0_add292912 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287418_failAssert0_literalMutationString290182_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("o")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418_failAssert0_literalMutationString290182 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287441_failAssert0_add293472_failAssert0_literalMutationString302920_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        tc.line();
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>R [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("fo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441_failAssert0_add293472 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441_failAssert0_add293472_failAssert0_literalMutationString302920 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template R [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartialnull287576_failAssert0_literalMutationString288269_failAssert0_literalMutationString305694_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", ">", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("" + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartialnull287576 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testDynamicPartialnull287576_failAssert0_literalMutationString288269 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartialnull287576_failAssert0_literalMutationString288269_failAssert0_literalMutationString305694 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287441_failAssert0_literalMutationNumber292235_failAssert0null323692_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(null, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>R [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 3000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441_failAssert0_literalMutationNumber292235 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441_failAssert0_literalMutationNumber292235_failAssert0null323692 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template R [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287427_failAssert0_add293458_failAssert0null322316_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "page1.txt", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(null, scopes);
                                                appendText(execute);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287427 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287427_failAssert0_add293458 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287427_failAssert0_add293458_failAssert0null322316 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287492_failAssert0_add293256_failAssert0_literalMutationString301234_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "R", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                sw.toString();
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287492 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287492_failAssert0_add293256 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287492_failAssert0_add293256_failAssert0_literalMutationString301234 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287407_failAssert0_literalMutationString289809_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("page1.txt")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("n0me", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407_failAssert0_literalMutationString289809 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287425_failAssert0_add293082_failAssert0null322207_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "@", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                mustache.execute(writer, scopes);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425_failAssert0_add293082 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425_failAssert0_add293082_failAssert0null322207 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287438_failAssert0_literalMutationString291160_failAssert0_add318282_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ foo].html}}"), "te9st.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438_failAssert0_literalMutationString291160 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438_failAssert0_literalMutationString291160_failAssert0_add318282 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287501_failAssert0_add293434_failAssert0_literalMutationString301439_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "page1.txt", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simle");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287501 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287501_failAssert0_add293434 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287501_failAssert0_add293434_failAssert0_literalMutationString301439 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287408_failAssert0_literalMutationNumber290883_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("u")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 12000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287408 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287408_failAssert0_literalMutationNumber290883 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287441_failAssert0_literalMutationNumber292235_failAssert0_literalMutationNumber307322_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(2).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>R [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 3000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441_failAssert0_literalMutationNumber292235 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441_failAssert0_literalMutationNumber292235_failAssert0_literalMutationNumber307322 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template R [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287441_failAssert0null294716_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("+")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>R [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put(null, 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441_failAssert0null294716 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template R [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287407_failAssert0_add292912_failAssert0_add319384_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("page1.txt")) {
                                        tc.line();
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407_failAssert0_add292912 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407_failAssert0_add292912_failAssert0_add319384 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287417_failAssert0_literalMutationNumber289942_failAssert0_literalMutationString304820_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 0);
                            put("page1.txt", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417_failAssert0_literalMutationNumber289942 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417_failAssert0_literalMutationNumber289942_failAssert0_literalMutationString304820 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287441_failAssert0_literalMutationNumber292235_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("+")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>R [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 3000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441_failAssert0_literalMutationNumber292235 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template R [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartialnull287576_failAssert0_literalMutationString288269_failAssert0_add317932_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", ">", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartialnull287576 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testDynamicPartialnull287576_failAssert0_literalMutationString288269 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartialnull287576_failAssert0_literalMutationString288269_failAssert0_add317932 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [foo].html[foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287427_failAssert0_add293458_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("+")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "page1.txt", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            appendText(execute);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287427 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287427_failAssert0_add293458 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287418_failAssert0_literalMutationString290221_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("+")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "t^st.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418_failAssert0_literalMutationString290221 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287418_failAssert0_literalMutationString290221_failAssert0_literalMutationString313634_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parseupartial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "t^st.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418_failAssert0_literalMutationString290221 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418_failAssert0_literalMutationString290221_failAssert0_literalMutationString313634 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287425_failAssert0null294255_failAssert0_literalMutationString297725_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "@", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", null);
                            put(")oo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425_failAssert0null294255 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425_failAssert0null294255_failAssert0_literalMutationString297725 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287416_failAssert0_add293196_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("+")) {
                                    tc.file();
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416_failAssert0_add293196 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287425_failAssert0_add293082_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("+")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "@", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            mustache.execute(writer, scopes);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425_failAssert0_add293082 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287408_failAssert0_add293148_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("u")) {
                                    tc.startOfLine();
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287408 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287408_failAssert0_add293148 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287407_failAssert0_add292917_failAssert0null321844_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("page1.txt")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", null);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407_failAssert0_add292917 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407_failAssert0_add292917_failAssert0null321844 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287438_failAssert0null294422_failAssert0_literalMutationString298249_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put(null, "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simpe");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438_failAssert0null294422 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438_failAssert0null294422_failAssert0_literalMutationString298249 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287425_failAssert0_add293082_failAssert0_literalMutationString302057_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "#", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "@", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                mustache.execute(writer, scopes);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425_failAssert0_add293082 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287425_failAssert0_add293082_failAssert0_literalMutationString302057 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287417_failAssert0_literalMutationNumber289942_failAssert0_add317701_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        tc.startOfLine();
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 0);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417_failAssert0_literalMutationNumber289942 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417_failAssert0_literalMutationNumber289942_failAssert0_add317701 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287441_failAssert0_literalMutationNumber292235_failAssert0_literalMutationString307365_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>R [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chrs");
                            put("value", 10000);
                            put("taxed_value", 3000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441_failAssert0_literalMutationNumber292235 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441_failAssert0_literalMutationNumber292235_failAssert0_literalMutationString307365 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template R [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287441_failAssert0_add293472_failAssert0null322426_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        tc.line();
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>R [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441_failAssert0_add293472 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441_failAssert0_add293472_failAssert0null322426 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template R [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287408_failAssert0null294339_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("u")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put(null, 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287408 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287408_failAssert0null294339 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287427_failAssert0_literalMutationString292067_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("+")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartnial__", "page1.txt", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287427 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287427_failAssert0_literalMutationString292067 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287417_failAssert0_add292932_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("+")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            mustache.execute(writer, scopes);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417_failAssert0_add292932 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287407_failAssert0_literalMutationString289790_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("page1.txt")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("7uk>=f7!J^*pW]0h;$;gUB0 h|xeeF[D&OE9%({" + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407_failAssert0_literalMutationString289790 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287407_failAssert0null294046_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("page1.txt")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", null);
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287407_failAssert0null294046 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287416_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = new DefaultMustacheFactory(root) {
                @Override
                public MustacheVisitor createMustacheVisitor() {
                    return new DefaultMustacheVisitor(this) {
                        @Override
                        public void partial(TemplateContext tc, String variable) {
                            if (variable.startsWith("+")) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                    @Override
                                    public synchronized void init() {
                                        filterText();
                                        partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                        if ((partial) == null) {
                                            throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                        }
                                    }

                                    ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                    @Override
                                    public Writer execute(Writer writer, List<Object> scopes) {
                                        StringWriter sw = new StringWriter();
                                        partial.execute(sw, scopes);
                                        Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                        Writer execute = mustache.execute(writer, scopes);
                                        return appendText(execute);
                                    }
                                });
                            } else {
                                super.partial(tc, variable);
                            }
                        }
                    };
                }
            };
            Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
            StringWriter sw = new StringWriter();
            m.execute(sw, new HashMap<String, Object>() {
                {
                    put("name", "Chris");
                    put("value", 10000);
                    put("taxed_value", 6000);
                    put("in_ca", true);
                    put("foo", "simple");
                }
            });
            TestUtil.getContents(root, "simple.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287408_failAssert0null294322_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                if (variable.startsWith("u")) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                        @Override
                                        public synchronized void init() {
                                            filterText();
                                            partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                            if ((partial) == null) {
                                                throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                            }
                                        }

                                        ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                        @Override
                                        public Writer execute(Writer writer, List<Object> scopes) {
                                            StringWriter sw = new StringWriter();
                                            partial.execute(sw, scopes);
                                            Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                            Writer execute = mustache.execute(writer, scopes);
                                            return appendText(execute);
                                        }
                                    });
                                } else {
                                    super.partial(tc, variable);
                                }
                            }
                        };
                    }
                };
                Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                StringWriter sw = new StringWriter();
                m.execute(sw, new HashMap<String, Object>() {
                    {
                        put("name", "Chris");
                        put("value", 10000);
                        put("taxed_value", 6000);
                        put("in_ca", true);
                        put("foo", "simple");
                    }
                });
                TestUtil.getContents(root, "simple.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287408 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287408_failAssert0null294322 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287417_failAssert0_literalMutationNumber289942_failAssert0null322966_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 0);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417_failAssert0_literalMutationNumber289942 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287417_failAssert0_literalMutationNumber289942_failAssert0null322966 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287438_failAssert0null294422_failAssert0_add316094_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put(null, "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put(null, "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438_failAssert0null294422 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287438_failAssert0null294422_failAssert0_add316094 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationString287441_failAssert0_literalMutationNumber292235_failAssert0_add318343_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(1).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>R [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 3000);
                            put("in_ca", true);
                            put("foo", "simple");
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441_failAssert0_literalMutationNumber292235 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationString287441_failAssert0_literalMutationNumber292235_failAssert0_add318343 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template R [foo].html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287416_failAssert0_add293196_failAssert0null322571_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        tc.file();
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "test.html");
                    StringWriter sw = new StringWriter();
                    m.execute(null, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416_failAssert0_add293196 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287416_failAssert0_add293196_failAssert0null322571 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testDynamicPartial_literalMutationNumber287418_failAssert0_literalMutationString290221_failAssert0_add319885_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    if (variable.startsWith("+")) {
                                        TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                        list.add(new PartialCode(partialTC, df, variable.substring(0).trim()) {
                                            @Override
                                            public synchronized void init() {
                                                filterText();
                                                partial = df.compile(new StringReader(name), "__dynpartial__", "[", "]");
                                                if ((partial) == null) {
                                                    throw new MustacheException(("Failed to parse partial name template: " + (name)));
                                                }
                                            }

                                            ConcurrentMap<String, Mustache> dynamicaPartialCache = new ConcurrentHashMap<>();

                                            @Override
                                            public Writer execute(Writer writer, List<Object> scopes) {
                                                StringWriter sw = new StringWriter();
                                                partial.execute(sw, scopes);
                                                Mustache mustache = dynamicaPartialCache.computeIfAbsent(sw.toString(), df::compilePartial);
                                                Writer execute = mustache.execute(writer, scopes);
                                                return appendText(execute);
                                            }
                                        });
                                    } else {
                                        super.partial(tc, variable);
                                    }
                                }
                            };
                        }
                    };
                    Mustache m = c.compile(new StringReader("{{>+ [foo].html}}"), "t^st.html");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, new HashMap<String, Object>() {
                        {
                            put("name", "Chris");
                            put("value", 10000);
                            put("value", 10000);
                            put("taxed_value", 6000);
                            put("in_ca", true);
                            put("foo", "simple");
                        }
                    });
                    TestUtil.getContents(root, "simple.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418_failAssert0_literalMutationString290221 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDynamicPartial_literalMutationNumber287418_failAssert0_literalMutationString290221_failAssert0_add319885 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template + simple.html not found", expected.getMessage());
        }
    }

    public void testReadme_add66010_literalMutationString66074_failAssert0_add70757_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("v#%Z3m#<KN");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context());
                Writer o_testReadme_add66010__9 = m.execute(sw, new AmplInterpreterTest.Context());
                Writer o_testReadme_add66010__11 = m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                String o_testReadme_add66010__15 = TestUtil.getContents(root, "items.txt");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_add66010_literalMutationString66074 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_add66010_literalMutationString66074_failAssert0_add70757 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template v#%Z3m#<KN not found", expected.getMessage());
        }
    }

    public void testReadme_add66009_literalMutationString66166_failAssert0_literalMutationString68508_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("KBlP]rk1|w");
                StringWriter sw = new StringWriter();
                System.currentTimeMillis();
                long start = System.currentTimeMillis();
                Writer o_testReadme_add66009__10 = m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                String o_testReadme_add66009__14 = TestUtil.getContents(root, "items.wtxt");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_add66009_literalMutationString66166 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_add66009_literalMutationString66166_failAssert0_literalMutationString68508 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template KBlP]rk1|w not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65999_failAssert0_add66576_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("{tems.html");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "items.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testReadme_literalMutationString65999 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65999_failAssert0_add66576 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template {tems.html not found", expected.getMessage());
        }
    }

    public void testReadme_remove66014_literalMutationString66173_failAssert0_literalMutationString69174_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("nK8SI`aP:MP");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                long diff = (System.currentTimeMillis()) - start;
                String o_testReadme_remove66014__11 = TestUtil.getContents(root, "items.txt");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_remove66014_literalMutationString66173 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_remove66014_literalMutationString66173_failAssert0_literalMutationString69174 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template nK8SI`aP:MP not found", expected.getMessage());
        }
    }

    public void testReadmenull66016_failAssert0_literalMutationString66195_failAssert0null71528_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("rv%Y-D(pG=");
                    StringWriter sw = new StringWriter();
                    long start = System.currentTimeMillis();
                    m.execute(null, new AmplInterpreterTest.Context());
                    long diff = (System.currentTimeMillis()) - start;
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testReadmenull66016 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testReadmenull66016_failAssert0_literalMutationString66195 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmenull66016_failAssert0_literalMutationString66195_failAssert0null71528 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template rv%Y-D(pG= not found", expected.getMessage());
        }
    }

    public void testReadmenull66016_failAssert0_literalMutationString66195_failAssert0_add70628_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("rv%Y-D(pG=");
                    StringWriter sw = new StringWriter();
                    long start = System.currentTimeMillis();
                    m.execute(null, new AmplInterpreterTest.Context());
                    System.currentTimeMillis();
                    long diff = (System.currentTimeMillis()) - start;
                    TestUtil.getContents(root, "items.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testReadmenull66016 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testReadmenull66016_failAssert0_literalMutationString66195 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmenull66016_failAssert0_literalMutationString66195_failAssert0_add70628 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template rv%Y-D(pG= not found", expected.getMessage());
        }
    }

    public void testReadmenull66016_failAssert0_literalMutationString66193_failAssert0_literalMutationString68615_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("it%ms.htl");
                    StringWriter sw = new StringWriter();
                    long start = System.currentTimeMillis();
                    m.execute(null, new AmplInterpreterTest.Context());
                    long diff = (System.currentTimeMillis()) - start;
                    TestUtil.getContents(root, "items.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testReadmenull66016 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testReadmenull66016_failAssert0_literalMutationString66193 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmenull66016_failAssert0_literalMutationString66193_failAssert0_literalMutationString68615 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template it%ms.htl not found", expected.getMessage());
        }
    }

    public void testReadme_add66013_literalMutationString66119_failAssert0_add70452_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("mwjg]4cO;L");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context());
                Writer o_testReadme_add66013__9 = m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                sw.toString();
                String o_testReadme_add66013__14 = TestUtil.getContents(root, "items.txt");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_add66013_literalMutationString66119 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_add66013_literalMutationString66119_failAssert0_add70452 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template mwjg]4cO;L not found", expected.getMessage());
        }
    }

    public void testReadmenull66016_failAssert0_literalMutationString66195_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("rv%Y-D(pG=");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(null, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "items.txt");
                sw.toString();
                junit.framework.TestCase.fail("testReadmenull66016 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testReadmenull66016_failAssert0_literalMutationString66195 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template rv%Y-D(pG= not found", expected.getMessage());
        }
    }

    public void testReadmenull66016_failAssert0_literalMutationString66193_failAssert0_literalMutationString68616_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("items.`htl");
                    StringWriter sw = new StringWriter();
                    long start = System.currentTimeMillis();
                    m.execute(null, new AmplInterpreterTest.Context());
                    long diff = (System.currentTimeMillis()) - start;
                    TestUtil.getContents(root, "items.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testReadmenull66016 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testReadmenull66016_failAssert0_literalMutationString66193 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmenull66016_failAssert0_literalMutationString66193_failAssert0_literalMutationString68616 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template items.`htl not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65999_failAssert0_literalMutationString66216_failAssert0_literalMutationString68786_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("W#-Fd=,%D");
                    StringWriter sw = new StringWriter();
                    long start = System.currentTimeMillis();
                    m.execute(sw, new AmplInterpreterTest.Context());
                    long diff = (System.currentTimeMillis()) - start;
                    TestUtil.getContents(root, "items.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testReadme_literalMutationString65999 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadme_literalMutationString65999_failAssert0_literalMutationString66216 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65999_failAssert0_literalMutationString66216_failAssert0_literalMutationString68786 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template W#-Fd=,%D not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString66003_failAssert0_add66586_failAssert0_literalMutationString69003_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    createMustacheFactory();
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("X]UF^li:cU");
                    StringWriter sw = new StringWriter();
                    long start = System.currentTimeMillis();
                    m.execute(sw, new AmplInterpreterTest.Context());
                    long diff = (System.currentTimeMillis()) - start;
                    TestUtil.getContents(root, "page1.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testReadme_literalMutationString66003 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testReadme_literalMutationString66003_failAssert0_add66586 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString66003_failAssert0_add66586_failAssert0_literalMutationString69003 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template X]UF^li:cU not found", expected.getMessage());
        }
    }

    public void testReadme_remove66014_literalMutationString66173_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("nK8SI`P:MP");
            StringWriter sw = new StringWriter();
            long start = System.currentTimeMillis();
            long diff = (System.currentTimeMillis()) - start;
            String o_testReadme_remove66014__11 = TestUtil.getContents(root, "items.txt");
            sw.toString();
            junit.framework.TestCase.fail("testReadme_remove66014_literalMutationString66173 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template nK8SI`P:MP not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65999_failAssert0null66706_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("{tems.html");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(null, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "items.txt");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_literalMutationString65999 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65999_failAssert0null66706 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template {tems.html not found", expected.getMessage());
        }
    }

    public void testReadme_add66013_literalMutationString66119_failAssert0null71463_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("mwjg]4cO;L");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                Writer o_testReadme_add66013__9 = m.execute(null, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                sw.toString();
                String o_testReadme_add66013__14 = TestUtil.getContents(root, "items.txt");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_add66013_literalMutationString66119 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_add66013_literalMutationString66119_failAssert0null71463 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template mwjg]4cO;L not found", expected.getMessage());
        }
    }

    public void testReadme_add66010_literalMutationString66074_failAssert0_literalMutationString68763_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("v#%Z3m#KN");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                Writer o_testReadme_add66010__9 = m.execute(sw, new AmplInterpreterTest.Context());
                Writer o_testReadme_add66010__11 = m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                String o_testReadme_add66010__15 = TestUtil.getContents(root, "items.txt");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_add66010_literalMutationString66074 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_add66010_literalMutationString66074_failAssert0_literalMutationString68763 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template v#%Z3m#KN not found", expected.getMessage());
        }
    }

    public void testReadmenull66016_failAssert0_literalMutationString66195_failAssert0_literalMutationString68607_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("rv%Y-D(pG=");
                    StringWriter sw = new StringWriter();
                    long start = System.currentTimeMillis();
                    m.execute(null, new AmplInterpreterTest.Context());
                    long diff = (System.currentTimeMillis()) - start;
                    TestUtil.getContents(root, ".p]rr!.K%");
                    sw.toString();
                    junit.framework.TestCase.fail("testReadmenull66016 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testReadmenull66016_failAssert0_literalMutationString66195 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmenull66016_failAssert0_literalMutationString66195_failAssert0_literalMutationString68607 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template rv%Y-D(pG= not found", expected.getMessage());
        }
    }

    public void testReadme_add66013_literalMutationString66119_failAssert0_literalMutationString68339_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("mwjg]4cO;L");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                Writer o_testReadme_add66013__9 = m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                sw.toString();
                String o_testReadme_add66013__14 = TestUtil.getContents(root, "page1.txt");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_add66013_literalMutationString66119 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_add66013_literalMutationString66119_failAssert0_literalMutationString68339 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template mwjg]4cO;L not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString66004_failAssert0_literalMutationString66310_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("13:Z7>N9s=");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "itms.txt");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_literalMutationString66004 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString66004_failAssert0_literalMutationString66310 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 13:Z7>N9s= not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65999_failAssert0_literalMutationString66223_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("{tems.html");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "items:.txt");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_literalMutationString65999 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65999_failAssert0_literalMutationString66223 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template {tems.html not found", expected.getMessage());
        }
    }

    public void testReadmenull66016_failAssert0_literalMutationString66195_failAssert0_literalMutationString68611_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("rv%Y-D(pG=");
                    StringWriter sw = new StringWriter();
                    long start = System.currentTimeMillis();
                    m.execute(null, new AmplInterpreterTest.Context());
                    long diff = (System.currentTimeMillis()) - start;
                    TestUtil.getContents(root, "items.t>xt");
                    sw.toString();
                    junit.framework.TestCase.fail("testReadmenull66016 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testReadmenull66016_failAssert0_literalMutationString66195 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmenull66016_failAssert0_literalMutationString66195_failAssert0_literalMutationString68611 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template rv%Y-D(pG= not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65995() throws MustacheException, IOException {
        MustacheFactory c = createMustacheFactory();
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        Mustache m = c.compile("");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        long start = System.currentTimeMillis();
        Writer o_testReadme_literalMutationString65995__9 = m.execute(sw, new AmplInterpreterTest.Context());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testReadme_literalMutationString65995__9)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testReadme_literalMutationString65995__9)).toString());
        long diff = (System.currentTimeMillis()) - start;
        String o_testReadme_literalMutationString65995__13 = TestUtil.getContents(root, "items.txt");
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadme_literalMutationString65995__13);
        sw.toString();
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testReadme_literalMutationString65995__9)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testReadme_literalMutationString65995__9)).toString());
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadme_literalMutationString65995__13);
    }

    public void testReadme_literalMutationString65999_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("{tems.html");
            StringWriter sw = new StringWriter();
            long start = System.currentTimeMillis();
            m.execute(sw, new AmplInterpreterTest.Context());
            long diff = (System.currentTimeMillis()) - start;
            TestUtil.getContents(root, "items.txt");
            sw.toString();
            junit.framework.TestCase.fail("testReadme_literalMutationString65999 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template {tems.html not found", expected.getMessage());
        }
    }

    public void testReadmenull66016_failAssert0_literalMutationString66195_failAssert0_add70625_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    c.compile("rv%Y-D(pG=");
                    Mustache m = c.compile("rv%Y-D(pG=");
                    StringWriter sw = new StringWriter();
                    long start = System.currentTimeMillis();
                    m.execute(null, new AmplInterpreterTest.Context());
                    long diff = (System.currentTimeMillis()) - start;
                    TestUtil.getContents(root, "items.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testReadmenull66016 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testReadmenull66016_failAssert0_literalMutationString66195 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmenull66016_failAssert0_literalMutationString66195_failAssert0_add70625 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template rv%Y-D(pG= not found", expected.getMessage());
        }
    }

    public void testReadme_add66010_literalMutationString66074_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("v#%Z3m#<KN");
            StringWriter sw = new StringWriter();
            long start = System.currentTimeMillis();
            Writer o_testReadme_add66010__9 = m.execute(sw, new AmplInterpreterTest.Context());
            Writer o_testReadme_add66010__11 = m.execute(sw, new AmplInterpreterTest.Context());
            long diff = (System.currentTimeMillis()) - start;
            String o_testReadme_add66010__15 = TestUtil.getContents(root, "items.txt");
            sw.toString();
            junit.framework.TestCase.fail("testReadme_add66010_literalMutationString66074 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template v#%Z3m#<KN not found", expected.getMessage());
        }
    }

    public void testReadme_remove66014_literalMutationString66173_failAssert0_add71089_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("nK8SI`P:MP");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                System.currentTimeMillis();
                long diff = (System.currentTimeMillis()) - start;
                String o_testReadme_remove66014__11 = TestUtil.getContents(root, "items.txt");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_remove66014_literalMutationString66173 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_remove66014_literalMutationString66173_failAssert0_add71089 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template nK8SI`P:MP not found", expected.getMessage());
        }
    }

    public void testReadme_add66013_literalMutationString66119_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("mwjg]4cO;L");
            StringWriter sw = new StringWriter();
            long start = System.currentTimeMillis();
            Writer o_testReadme_add66013__9 = m.execute(sw, new AmplInterpreterTest.Context());
            long diff = (System.currentTimeMillis()) - start;
            sw.toString();
            String o_testReadme_add66013__14 = TestUtil.getContents(root, "items.txt");
            sw.toString();
            junit.framework.TestCase.fail("testReadme_add66013_literalMutationString66119 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template mwjg]4cO;L not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString66005_failAssert0_literalMutationString66288_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("&k`87dRwc;");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "Utems.txt");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_literalMutationString66005 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString66005_failAssert0_literalMutationString66288 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template &k`87dRwc; not found", expected.getMessage());
        }
    }

    public void testReadme_literalMutationString65999_failAssert0_add66577_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("{tems.html");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "items.txt");
                sw.toString();
                junit.framework.TestCase.fail("testReadme_literalMutationString65999 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadme_literalMutationString65999_failAssert0_add66577 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template {tems.html not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_add27023_literalMutationString27185_failAssert0null36276_failAssert0() throws MustacheException, IOException {
        try {
            {
                DefaultMustacheFactory o_testReadmeSerial_add27023__1 = createMustacheFactory();
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("it>ems2.html");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                Writer o_testReadmeSerial_add27023__10 = m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                String o_testReadmeSerial_add27023__14 = TestUtil.getContents(root, null);
                sw.toString();
                String String_17 = "Should be a little bit more than 4 seconds: " + diff;
                boolean boolean_18 = (diff > 3999) && (diff < 6000);
                junit.framework.TestCase.fail("testReadmeSerial_add27023_literalMutationString27185 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_add27023_literalMutationString27185_failAssert0null36276 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template it>ems2.html not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27014_failAssert0_literalMutationNumber27551_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("g?%?myjuV!k");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "items.txt");
                sw.toString();
                String String_33 = "Should be a little bit more than 4 seconds: " + diff;
                boolean boolean_34 = (diff > 0) && (diff < 6000);
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27014 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27014_failAssert0_literalMutationNumber27551 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template g?%?myjuV!k not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27012_failAssert0null28136_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("items2.:html");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(null, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "items.txt");
                sw.toString();
                String String_27 = "Should be a little bit more than 4 seconds: " + diff;
                boolean boolean_28 = (diff > 3999) && (diff < 6000);
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012_failAssert0null28136 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template items2.:html not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27014_failAssert0_literalMutationNumber27557_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("g?%?myjuV!k");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "items.txt");
                sw.toString();
                String String_33 = "Should be a little bit more than 4 seconds: " + diff;
                boolean boolean_34 = (diff > 3999) && (diff < 0);
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27014 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27014_failAssert0_literalMutationNumber27557 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template g?%?myjuV!k not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_add27025_literalMutationString27093_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("T7nBwY26sF ");
            StringWriter sw = new StringWriter();
            System.currentTimeMillis();
            long start = System.currentTimeMillis();
            Writer o_testReadmeSerial_add27025__10 = m.execute(sw, new AmplInterpreterTest.Context());
            long diff = (System.currentTimeMillis()) - start;
            String o_testReadmeSerial_add27025__14 = TestUtil.getContents(root, "items.txt");
            sw.toString();
            String String_11 = "Should be a little bit more than 4 seconds: " + diff;
            boolean boolean_12 = (diff > 3999) && (diff < 6000);
            junit.framework.TestCase.fail("testReadmeSerial_add27025_literalMutationString27093 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template T7nBwY26sF  not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27012_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("items2.:html");
            StringWriter sw = new StringWriter();
            long start = System.currentTimeMillis();
            m.execute(sw, new AmplInterpreterTest.Context());
            long diff = (System.currentTimeMillis()) - start;
            TestUtil.getContents(root, "items.txt");
            sw.toString();
            String String_27 = "Should be a little bit more than 4 seconds: " + diff;
            boolean boolean_28 = (diff > 3999) && (diff < 6000);
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template items2.:html not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27462_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("items2.:html");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "items.txt");
                sw.toString();
                String String_27 = "Shuld be a little bit more than 4 seconds: " + diff;
                boolean boolean_28 = (diff > 3999) && (diff < 6000);
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27462 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template items2.:html not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27455_failAssert0null36252_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("items2.:html");
                    StringWriter sw = new StringWriter();
                    long start = System.currentTimeMillis();
                    m.execute(sw, new AmplInterpreterTest.Context());
                    long diff = (System.currentTimeMillis()) - start;
                    TestUtil.getContents(root, null);
                    sw.toString();
                    String String_27 = "Should be a little bit more than 4 seconds: " + diff;
                    boolean boolean_28 = (diff > 3999) && (diff < 6000);
                    junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27455 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27455_failAssert0null36252 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template items2.:html not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27012_failAssert0_add28003_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("items2.:html");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context());
                m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "items.txt");
                sw.toString();
                String String_27 = "Should be a little bit more than 4 seconds: " + diff;
                boolean boolean_28 = (diff > 3999) && (diff < 6000);
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012_failAssert0_add28003 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template items2.:html not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27012_failAssert0_add28001_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                c.compile("items2.:html");
                Mustache m = c.compile("items2.:html");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "items.txt");
                sw.toString();
                String String_27 = "Should be a little bit more than 4 seconds: " + diff;
                boolean boolean_28 = (diff > 3999) && (diff < 6000);
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012_failAssert0_add28001 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template items2.:html not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_add27023_literalMutationString27185_failAssert0() throws MustacheException, IOException {
        try {
            DefaultMustacheFactory o_testReadmeSerial_add27023__1 = createMustacheFactory();
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("it>ems2.html");
            StringWriter sw = new StringWriter();
            long start = System.currentTimeMillis();
            Writer o_testReadmeSerial_add27023__10 = m.execute(sw, new AmplInterpreterTest.Context());
            long diff = (System.currentTimeMillis()) - start;
            String o_testReadmeSerial_add27023__14 = TestUtil.getContents(root, "items.txt");
            sw.toString();
            String String_17 = "Should be a little bit more than 4 seconds: " + diff;
            boolean boolean_18 = (diff > 3999) && (diff < 6000);
            junit.framework.TestCase.fail("testReadmeSerial_add27023_literalMutationString27185 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template it>ems2.html not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27448_failAssert0_add35815_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("d{b=I>&65lFO");
                    StringWriter sw = new StringWriter();
                    long start = System.currentTimeMillis();
                    m.execute(sw, new AmplInterpreterTest.Context());
                    long diff = (System.currentTimeMillis()) - start;
                    TestUtil.getContents(root, "items.txt");
                    sw.toString();
                    sw.toString();
                    String String_27 = "Should be a little bit more than 4 seconds: " + diff;
                    boolean boolean_28 = (diff > 3999) && (diff < 6000);
                    junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27448 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27448_failAssert0_add35815 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template d{b=I>&65lFO not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_add27025_add27781_literalMutationString28956_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("qLs(cwAo{3A");
            StringWriter sw = new StringWriter();
            System.currentTimeMillis();
            long start = System.currentTimeMillis();
            Writer o_testReadmeSerial_add27025_add27781__10 = m.execute(sw, new AmplInterpreterTest.Context());
            Writer o_testReadmeSerial_add27025__10 = m.execute(sw, new AmplInterpreterTest.Context());
            long diff = (System.currentTimeMillis()) - start;
            String o_testReadmeSerial_add27025__14 = TestUtil.getContents(root, "items.txt");
            sw.toString();
            String String_11 = "Should be a little bit more than 4 seconds: " + diff;
            boolean boolean_12 = (diff > 3999) && (diff < 6000);
            junit.framework.TestCase.fail("testReadmeSerial_add27025_add27781_literalMutationString28956 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template qLs(cwAo{3A not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_add27027_remove28091() throws MustacheException, IOException {
        MustacheFactory c = createMustacheFactory();
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        Mustache m = c.compile("items2.html");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("items2.html", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        long start = System.currentTimeMillis();
        Writer o_testReadmeSerial_add27027__9 = m.execute(sw, new AmplInterpreterTest.Context());
        System.currentTimeMillis();
        long diff = (System.currentTimeMillis()) - start;
        String o_testReadmeSerial_add27027__14 = TestUtil.getContents(root, "items.txt");
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeSerial_add27027__14);
        String String_13 = "Should be a little bit more than 4 seconds: " + diff;
        TestCase.assertEquals("Should be a little bit more than 4 seconds: 4001", String_13);
        boolean boolean_14 = (diff > 3999) && (diff < 6000);
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("items2.html", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeSerial_add27027__14);
        TestCase.assertEquals("Should be a little bit more than 4 seconds: 4001", String_13);
    }

    public void testReadmeSerial_add27029_literalMutationString27219_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("`2O!_b^hUAL");
            StringWriter sw = new StringWriter();
            long start = System.currentTimeMillis();
            Writer o_testReadmeSerial_add27029__9 = m.execute(sw, new AmplInterpreterTest.Context());
            long diff = (System.currentTimeMillis()) - start;
            sw.toString();
            String o_testReadmeSerial_add27029__14 = TestUtil.getContents(root, "items.txt");
            sw.toString();
            String String_19 = "Should be a little bit more than 4 seconds: " + diff;
            boolean boolean_20 = (diff > 3999) && (diff < 6000);
            junit.framework.TestCase.fail("testReadmeSerial_add27029_literalMutationString27219 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template `2O!_b^hUAL not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27014_failAssert0null28145_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("g?%?myjuV!k");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(null, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "items.txt");
                sw.toString();
                String String_33 = "Should be a little bit more than 4 seconds: " + diff;
                boolean boolean_34 = (diff > 3999) && (diff < 6000);
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27014 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27014_failAssert0null28145 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template g?%?myjuV!k not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27455_failAssert0_add35368_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("items2.:html");
                    StringWriter sw = new StringWriter();
                    long start = System.currentTimeMillis();
                    m.execute(sw, new AmplInterpreterTest.Context());
                    m.execute(sw, new AmplInterpreterTest.Context());
                    long diff = (System.currentTimeMillis()) - start;
                    TestUtil.getContents(root, "items.t2xt");
                    sw.toString();
                    String String_27 = "Should be a little bit more than 4 seconds: " + diff;
                    boolean boolean_28 = (diff > 3999) && (diff < 6000);
                    junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27455 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27455_failAssert0_add35368 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template items2.:html not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27455_failAssert0_add35369_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("items2.:html");
                    StringWriter sw = new StringWriter();
                    long start = System.currentTimeMillis();
                    m.execute(sw, new AmplInterpreterTest.Context());
                    System.currentTimeMillis();
                    long diff = (System.currentTimeMillis()) - start;
                    TestUtil.getContents(root, "items.t2xt");
                    sw.toString();
                    String String_27 = "Should be a little bit more than 4 seconds: " + diff;
                    boolean boolean_28 = (diff > 3999) && (diff < 6000);
                    junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27455 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27455_failAssert0_add35369 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template items2.:html not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27014_failAssert0_add28029_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("g?%?myjuV!k");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "items.txt");
                TestUtil.getContents(root, "items.txt");
                sw.toString();
                String String_33 = "Should be a little bit more than 4 seconds: " + diff;
                boolean boolean_34 = (diff > 3999) && (diff < 6000);
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27014 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27014_failAssert0_add28029 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template g?%?myjuV!k not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27013_failAssert0null28161_failAssert0_literalMutationString30003_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile(" does not exist");
                    StringWriter sw = new StringWriter();
                    long start = System.currentTimeMillis();
                    m.execute(sw, new AmplInterpreterTest.Context());
                    long diff = (System.currentTimeMillis()) - start;
                    TestUtil.getContents(root, null);
                    sw.toString();
                    String String_45 = "Should be a little bit more than 4 seconds: " + diff;
                    boolean boolean_46 = (diff > 3999) && (diff < 6000);
                    junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27013 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27013_failAssert0null28161 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27013_failAssert0null28161_failAssert0_literalMutationString30003 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27014_failAssert0_add28027_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("g?%?myjuV!k");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context());
                m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "items.txt");
                sw.toString();
                String String_33 = "Should be a little bit more than 4 seconds: " + diff;
                boolean boolean_34 = (diff > 3999) && (diff < 6000);
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27014 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27014_failAssert0_add28027 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template g?%?myjuV!k not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27014_failAssert0_add28029_failAssert0null36121_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("g?%?myjuV!k");
                    StringWriter sw = new StringWriter();
                    long start = System.currentTimeMillis();
                    m.execute(sw, new AmplInterpreterTest.Context());
                    long diff = (System.currentTimeMillis()) - start;
                    TestUtil.getContents(root, null);
                    TestUtil.getContents(root, "items.txt");
                    sw.toString();
                    String String_33 = "Should be a little bit more than 4 seconds: " + diff;
                    boolean boolean_34 = (diff > 3999) && (diff < 6000);
                    junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27014 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27014_failAssert0_add28029 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27014_failAssert0_add28029_failAssert0null36121 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template g?%?myjuV!k not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_add27023_literalMutationString27185_failAssert0_add35429_failAssert0() throws MustacheException, IOException {
        try {
            {
                createMustacheFactory();
                DefaultMustacheFactory o_testReadmeSerial_add27023__1 = createMustacheFactory();
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("it>ems2.html");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                Writer o_testReadmeSerial_add27023__10 = m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                String o_testReadmeSerial_add27023__14 = TestUtil.getContents(root, "items.txt");
                sw.toString();
                String String_17 = "Should be a little bit more than 4 seconds: " + diff;
                boolean boolean_18 = (diff > 3999) && (diff < 6000);
                junit.framework.TestCase.fail("testReadmeSerial_add27023_literalMutationString27185 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_add27023_literalMutationString27185_failAssert0_add35429 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template it>ems2.html not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_add27023_literalMutationString27185_failAssert0_literalMutationNumber32534_failAssert0() throws MustacheException, IOException {
        try {
            {
                DefaultMustacheFactory o_testReadmeSerial_add27023__1 = createMustacheFactory();
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("it>ems2.html");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                Writer o_testReadmeSerial_add27023__10 = m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                String o_testReadmeSerial_add27023__14 = TestUtil.getContents(root, "items.txt");
                sw.toString();
                String String_17 = "Should be a little bit more than 4 seconds: " + diff;
                boolean boolean_18 = (diff > 3999) && (diff < 0);
                junit.framework.TestCase.fail("testReadmeSerial_add27023_literalMutationString27185 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_add27023_literalMutationString27185_failAssert0_literalMutationNumber32534 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template it>ems2.html not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27014_failAssert0_add28030_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("g?%?myjuV!k");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "items.txt");
                sw.toString();
                sw.toString();
                String String_33 = "Should be a little bit more than 4 seconds: " + diff;
                boolean boolean_34 = (diff > 3999) && (diff < 6000);
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27014 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27014_failAssert0_add28030 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template g?%?myjuV!k not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27448_failAssert0_literalMutationString33815_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("d{b=I>&65lFO");
                    StringWriter sw = new StringWriter();
                    long start = System.currentTimeMillis();
                    m.execute(sw, new AmplInterpreterTest.Context());
                    long diff = (System.currentTimeMillis()) - start;
                    TestUtil.getContents(root, "8:vxnG6!W");
                    sw.toString();
                    String String_27 = "Should be a little bit more than 4 seconds: " + diff;
                    boolean boolean_28 = (diff > 3999) && (diff < 6000);
                    junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27448 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27448_failAssert0_literalMutationString33815 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template d{b=I>&65lFO not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27455_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("items2.:html");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "items.t2xt");
                sw.toString();
                String String_27 = "Should be a little bit more than 4 seconds: " + diff;
                boolean boolean_28 = (diff > 3999) && (diff < 6000);
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27455 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template items2.:html not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27014_failAssert0_add28029_failAssert0_add35009_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    c.compile("g?%?myjuV!k");
                    Mustache m = c.compile("g?%?myjuV!k");
                    StringWriter sw = new StringWriter();
                    long start = System.currentTimeMillis();
                    m.execute(sw, new AmplInterpreterTest.Context());
                    long diff = (System.currentTimeMillis()) - start;
                    TestUtil.getContents(root, "items.txt");
                    TestUtil.getContents(root, "items.txt");
                    sw.toString();
                    String String_33 = "Should be a little bit more than 4 seconds: " + diff;
                    boolean boolean_34 = (diff > 3999) && (diff < 6000);
                    junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27014 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27014_failAssert0_add28029 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27014_failAssert0_add28029_failAssert0_add35009 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template g?%?myjuV!k not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27011() throws MustacheException, IOException {
        MustacheFactory c = createMustacheFactory();
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        Mustache m = c.compile("");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        long start = System.currentTimeMillis();
        Writer o_testReadmeSerial_literalMutationString27011__9 = m.execute(sw, new AmplInterpreterTest.Context());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testReadmeSerial_literalMutationString27011__9)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testReadmeSerial_literalMutationString27011__9)).toString());
        long diff = (System.currentTimeMillis()) - start;
        String o_testReadmeSerial_literalMutationString27011__13 = TestUtil.getContents(root, "items.txt");
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeSerial_literalMutationString27011__13);
        sw.toString();
        String String_35 = "Should be a little bit more than 4 seconds: " + diff;
        boolean boolean_36 = (diff > 3999) && (diff < 6000);
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testReadmeSerial_literalMutationString27011__9)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testReadmeSerial_literalMutationString27011__9)).toString());
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeSerial_literalMutationString27011__13);
    }

    public void testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27448_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("d{b=I>&65lFO");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "items.txt");
                sw.toString();
                String String_27 = "Should be a little bit more than 4 seconds: " + diff;
                boolean boolean_28 = (diff > 3999) && (diff < 6000);
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27448 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template d{b=I>&65lFO not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27455_failAssert0_literalMutationNumber32297_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("items2.:html");
                    StringWriter sw = new StringWriter();
                    long start = System.currentTimeMillis();
                    m.execute(sw, new AmplInterpreterTest.Context());
                    long diff = (System.currentTimeMillis()) - start;
                    TestUtil.getContents(root, "items.t2xt");
                    sw.toString();
                    String String_27 = "Should be a little bit more than 4 seconds: " + diff;
                    boolean boolean_28 = (diff > 0) && (diff < 6000);
                    junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27455 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27455_failAssert0_literalMutationNumber32297 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template items2.:html not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27011_add27962() throws MustacheException, IOException {
        MustacheFactory c = createMustacheFactory();
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        Mustache m = c.compile("");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        long start = System.currentTimeMillis();
        Writer o_testReadmeSerial_literalMutationString27011_add27962__9 = m.execute(sw, new AmplInterpreterTest.Context());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testReadmeSerial_literalMutationString27011_add27962__9)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testReadmeSerial_literalMutationString27011_add27962__9)).toString());
        Writer o_testReadmeSerial_literalMutationString27011__9 = m.execute(sw, new AmplInterpreterTest.Context());
        long diff = (System.currentTimeMillis()) - start;
        String o_testReadmeSerial_literalMutationString27011__13 = TestUtil.getContents(root, "items.txt");
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeSerial_literalMutationString27011__13);
        sw.toString();
        String String_35 = "Should be a little bit more than 4 seconds: " + diff;
        boolean boolean_36 = (diff > 3999) && (diff < 6000);
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\nbox.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testReadmeSerial_literalMutationString27011_add27962__9)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\nbox.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testReadmeSerial_literalMutationString27011_add27962__9)).toString());
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeSerial_literalMutationString27011__13);
    }

    public void testReadmeSerial_literalMutationString27014_failAssert0null28146_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("g?%?myjuV!k");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, null);
                sw.toString();
                String String_33 = "Should be a little bit more than 4 seconds: " + diff;
                boolean boolean_34 = (diff > 3999) && (diff < 6000);
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27014 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27014_failAssert0null28146 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template g?%?myjuV!k not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27012_failAssert0_add28007_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("items2.:html");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "items.txt");
                sw.toString();
                String String_27 = "Should be a little bit more than 4 seconds: " + diff;
                boolean boolean_28 = (diff > 3999) && (diff < 6000);
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012_failAssert0_add28007 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template items2.:html not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_add27029_literalMutationString27228() throws MustacheException, IOException {
        MustacheFactory c = createMustacheFactory();
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        Mustache m = c.compile("items2.html");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("items2.html", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        long start = System.currentTimeMillis();
        Writer o_testReadmeSerial_add27029__9 = m.execute(sw, new AmplInterpreterTest.Context());
        long diff = (System.currentTimeMillis()) - start;
        sw.toString();
        sw.toString();
        String o_testReadmeSerial_add27029__14 = TestUtil.getContents(root, "items.txt");
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeSerial_add27029__14);
        String String_19 = "" + diff;
        TestCase.assertEquals("4001", String_19);
        boolean boolean_20 = (diff > 3999) && (diff < 6000);
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("items2.html", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeSerial_add27029__14);
        TestCase.assertEquals("4001", String_19);
    }

    public void testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27448_failAssert0null36396_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("d{b=I>&65lFO");
                    StringWriter sw = new StringWriter();
                    long start = System.currentTimeMillis();
                    m.execute(null, new AmplInterpreterTest.Context());
                    long diff = (System.currentTimeMillis()) - start;
                    TestUtil.getContents(root, "items.txt");
                    sw.toString();
                    String String_27 = "Should be a little bit more than 4 seconds: " + diff;
                    boolean boolean_28 = (diff > 3999) && (diff < 6000);
                    junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27448 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27448_failAssert0null36396 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template d{b=I>&65lFO not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27455_failAssert0_literalMutationString32282_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("items2e:html");
                    StringWriter sw = new StringWriter();
                    long start = System.currentTimeMillis();
                    m.execute(sw, new AmplInterpreterTest.Context());
                    long diff = (System.currentTimeMillis()) - start;
                    TestUtil.getContents(root, "items.t2xt");
                    sw.toString();
                    String String_27 = "Should be a little bit more than 4 seconds: " + diff;
                    boolean boolean_28 = (diff > 3999) && (diff < 6000);
                    junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27455 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012_failAssert0_literalMutationString27455_failAssert0_literalMutationString32282 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template items2e:html not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_add27024_literalMutationString27276_remove35889() throws MustacheException, IOException {
        MustacheFactory c = createMustacheFactory();
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        Mustache o_testReadmeSerial_add27024__3 = c.compile("");
        TestCase.assertFalse(((DefaultMustache) (o_testReadmeSerial_add27024__3)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (o_testReadmeSerial_add27024__3)).getName());
        Mustache m = c.compile("items2.html");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("items2.html", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        long start = System.currentTimeMillis();
        Writer o_testReadmeSerial_add27024__10 = m.execute(sw, new AmplInterpreterTest.Context());
        long diff = (System.currentTimeMillis()) - start;
        String o_testReadmeSerial_add27024__14 = TestUtil.getContents(root, "items.txt");
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeSerial_add27024__14);
        String String_23 = "Should be a little bit more than 4 seconds: " + diff;
        TestCase.assertEquals("Should be a little bit more than 4 seconds: 4001", String_23);
        boolean boolean_24 = (diff > 3999) && (diff < 6000);
        TestCase.assertNull(((DefaultMustacheFactory) (c)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (o_testReadmeSerial_add27024__3)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (o_testReadmeSerial_add27024__3)).getName());
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("items2.html", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeSerial_add27024__14);
        TestCase.assertEquals("Should be a little bit more than 4 seconds: 4001", String_23);
    }

    public void testReadmeSerial_literalMutationString27014_failAssert0_add28029_failAssert0_literalMutationNumber31042_failAssert0() throws MustacheException, IOException {
        try {
            {
                {
                    MustacheFactory c = createMustacheFactory();
                    Mustache m = c.compile("g?%?myjuV!k");
                    StringWriter sw = new StringWriter();
                    long start = System.currentTimeMillis();
                    m.execute(sw, new AmplInterpreterTest.Context());
                    long diff = (System.currentTimeMillis()) - start;
                    TestUtil.getContents(root, "items.txt");
                    TestUtil.getContents(root, "items.txt");
                    sw.toString();
                    String String_33 = "Should be a little bit more than 4 seconds: " + diff;
                    boolean boolean_34 = (diff > 3999) && (diff < 5999);
                    junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27014 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27014_failAssert0_add28029 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27014_failAssert0_add28029_failAssert0_literalMutationNumber31042 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template g?%?myjuV!k not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27012_failAssert0null28137_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = createMustacheFactory();
                Mustache m = c.compile("items2.:html");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context());
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, null);
                sw.toString();
                String String_27 = "Should be a little bit more than 4 seconds: " + diff;
                boolean boolean_28 = (diff > 3999) && (diff < 6000);
                junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27012_failAssert0null28137 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template items2.:html not found", expected.getMessage());
        }
    }

    public void testReadmeSerial_literalMutationString27014_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = createMustacheFactory();
            Mustache m = c.compile("g?%?myjuV!k");
            StringWriter sw = new StringWriter();
            long start = System.currentTimeMillis();
            m.execute(sw, new AmplInterpreterTest.Context());
            long diff = (System.currentTimeMillis()) - start;
            TestUtil.getContents(root, "items.txt");
            sw.toString();
            String String_33 = "Should be a little bit more than 4 seconds: " + diff;
            boolean boolean_34 = (diff > 3999) && (diff < 6000);
            junit.framework.TestCase.fail("testReadmeSerial_literalMutationString27014 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template g?%?myjuV!k not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_add259527_literalMutationString259731_failAssert0_literalMutationString265394_failAssert0() throws MustacheException, IOException {
        try {
            {
                DefaultMustacheFactory o_testReadmeParallel_add259527__1 = initParallel();
                MustacheFactory c = initParallel();
                Mustache m = c.compile("i`ems2.html");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context()).close();
                long diff = (System.currentTimeMillis()) - start;
                String o_testReadmeParallel_add259527__15 = TestUtil.getContents(root, "page1.txt");
                sw.toString();
                String String_65 = "Should be a little bit more than 1 second: " + diff;
                boolean boolean_66 = (diff > 999) && (diff < 2000);
                junit.framework.TestCase.fail("testReadmeParallel_add259527_literalMutationString259731 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeParallel_add259527_literalMutationString259731_failAssert0_literalMutationString265394 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template i`ems2.html not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_add259532_add260343_add266875() throws MustacheException, IOException {
        MustacheFactory c = initParallel();
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        Mustache m = c.compile("items2.html");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("items2.html", ((DefaultMustache) (m)).getName());
        m.getName();
        m.getName();
        StringWriter sw = new StringWriter();
        long start = System.currentTimeMillis();
        m.execute(sw, new AmplInterpreterTest.Context()).close();
        System.currentTimeMillis();
        long diff = (System.currentTimeMillis()) - start;
        String o_testReadmeParallel_add259532__15 = TestUtil.getContents(root, "items.txt");
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add259532__15);
        sw.toString();
        String String_59 = "Should be a little bit more than 1 second: " + diff;
        TestCase.assertEquals("Should be a little bit more than 1 second: 1001", String_59);
        boolean boolean_60 = (diff > 999) && (diff < 2000);
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("items2.html", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add259532__15);
        TestCase.assertEquals("Should be a little bit more than 1 second: 1001", String_59);
    }

    public void testReadmeParallel_add259532_add260343_literalMutationString261496_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = initParallel();
            Mustache m = c.compile("*2>g#&vU(V%");
            m.getName();
            StringWriter sw = new StringWriter();
            long start = System.currentTimeMillis();
            m.execute(sw, new AmplInterpreterTest.Context()).close();
            System.currentTimeMillis();
            long diff = (System.currentTimeMillis()) - start;
            String o_testReadmeParallel_add259532__15 = TestUtil.getContents(root, "items.txt");
            sw.toString();
            String String_59 = "Should be a little bit more than 1 second: " + diff;
            boolean boolean_60 = (diff > 999) && (diff < 2000);
            junit.framework.TestCase.fail("testReadmeParallel_add259532_add260343_literalMutationString261496 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template *2>g#&vU(V% not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_literalMutationString259518_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = initParallel();
            Mustache m = c.compile("( A!H.kC8go");
            StringWriter sw = new StringWriter();
            long start = System.currentTimeMillis();
            m.execute(sw, new AmplInterpreterTest.Context()).close();
            long diff = (System.currentTimeMillis()) - start;
            TestUtil.getContents(root, "items.txt");
            sw.toString();
            String String_95 = "Should be a little bit more than 1 second: " + diff;
            boolean boolean_96 = (diff > 999) && (diff < 2000);
            junit.framework.TestCase.fail("testReadmeParallel_literalMutationString259518 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ( A!H.kC8go not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_literalMutationString259517_failAssert0_literalMutationString260284_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = initParallel();
                Mustache m = c.compile(" does not exist");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context()).close();
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "items.txt");
                sw.toString();
                String String_97 = "Should be a little bit more than 1 second: " + diff;
                boolean boolean_98 = (diff > 999) && (diff < 2000);
                junit.framework.TestCase.fail("testReadmeParallel_literalMutationString259517 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeParallel_literalMutationString259517_failAssert0_literalMutationString260284 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_add259529_remove260692_literalMutationString261630_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = initParallel();
            Mustache m = c.compile("G[+.h7?qHq!");
            StringWriter sw = new StringWriter();
            System.currentTimeMillis();
            long start = System.currentTimeMillis();
            long diff = (System.currentTimeMillis()) - start;
            String o_testReadmeParallel_add259529__15 = TestUtil.getContents(root, "items.txt");
            sw.toString();
            String String_67 = "Should be a little bit more than 1 second: " + diff;
            boolean boolean_68 = (diff > 999) && (diff < 2000);
            junit.framework.TestCase.fail("testReadmeParallel_add259529_remove260692_literalMutationString261630 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template G[+.h7?qHq! not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_literalMutationString259516_add260541() throws MustacheException, IOException {
        MustacheFactory c = initParallel();
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        Mustache m = c.compile("");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        long start = System.currentTimeMillis();
        Writer o_testReadmeParallel_literalMutationString259516_add260541__9 = m.execute(sw, new AmplInterpreterTest.Context());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testReadmeParallel_literalMutationString259516_add260541__9)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testReadmeParallel_literalMutationString259516_add260541__9)).toString());
        m.execute(sw, new AmplInterpreterTest.Context()).close();
        long diff = (System.currentTimeMillis()) - start;
        String o_testReadmeParallel_literalMutationString259516__14 = TestUtil.getContents(root, "items.txt");
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_literalMutationString259516__14);
        sw.toString();
        String String_87 = "Should be a little bit more than 1 second: " + diff;
        boolean boolean_88 = (diff > 999) && (diff < 2000);
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\nbox.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testReadmeParallel_literalMutationString259516_add260541__9)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\nbox.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testReadmeParallel_literalMutationString259516_add260541__9)).toString());
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_literalMutationString259516__14);
    }

    public void testReadmeParallel_literalMutationString259518_failAssert0_add260667_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = initParallel();
                Mustache m = c.compile("( A!H.kC8go");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context()).close();
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "items.txt");
                sw.toString();
                sw.toString();
                String String_95 = "Should be a little bit more than 1 second: " + diff;
                boolean boolean_96 = (diff > 999) && (diff < 2000);
                junit.framework.TestCase.fail("testReadmeParallel_literalMutationString259518 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeParallel_literalMutationString259518_failAssert0_add260667 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ( A!H.kC8go not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_literalMutationString259518_failAssert0_add260664_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = initParallel();
                Mustache m = c.compile("( A!H.kC8go");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context());
                m.execute(sw, new AmplInterpreterTest.Context()).close();
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "items.txt");
                sw.toString();
                String String_95 = "Should be a little bit more than 1 second: " + diff;
                boolean boolean_96 = (diff > 999) && (diff < 2000);
                junit.framework.TestCase.fail("testReadmeParallel_literalMutationString259518 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeParallel_literalMutationString259518_failAssert0_add260664 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ( A!H.kC8go not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_add259530_remove260680() throws MustacheException, IOException {
        MustacheFactory c = initParallel();
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        Mustache m = c.compile("items2.html");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("items2.html", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        long start = System.currentTimeMillis();
        m.execute(sw, new AmplInterpreterTest.Context()).close();
        m.execute(sw, new AmplInterpreterTest.Context()).close();
        long diff = (System.currentTimeMillis()) - start;
        String o_testReadmeParallel_add259530__17 = TestUtil.getContents(root, "items.txt");
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add259530__17);
        String String_57 = "Should be a little bit more than 1 second: " + diff;
        TestCase.assertEquals("Should be a little bit more than 1 second: 2001", String_57);
        boolean boolean_58 = (diff > 999) && (diff < 2000);
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("items2.html", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add259530__17);
        TestCase.assertEquals("Should be a little bit more than 1 second: 2001", String_57);
    }

    public void testReadmeParallel_add259530_remove260679() throws MustacheException, IOException {
        MustacheFactory c = initParallel();
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        Mustache m = c.compile("items2.html");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("items2.html", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        long start = System.currentTimeMillis();
        m.execute(sw, new AmplInterpreterTest.Context()).close();
        long diff = (System.currentTimeMillis()) - start;
        String o_testReadmeParallel_add259530__17 = TestUtil.getContents(root, "items.txt");
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add259530__17);
        sw.toString();
        String String_57 = "Should be a little bit more than 1 second: " + diff;
        TestCase.assertEquals("Should be a little bit more than 1 second: 1001", String_57);
        boolean boolean_58 = (diff > 999) && (diff < 2000);
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("items2.html", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add259530__17);
        TestCase.assertEquals("Should be a little bit more than 1 second: 1001", String_57);
    }

    public void testReadmeParallel_literalMutationString259516_add260538_add266658() throws MustacheException, IOException {
        MustacheFactory c = initParallel();
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        Mustache m = c.compile("");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        m.getName();
        StringWriter sw = new StringWriter();
        long start = System.currentTimeMillis();
        m.execute(sw, new AmplInterpreterTest.Context()).close();
        long diff = (System.currentTimeMillis()) - start;
        String o_testReadmeParallel_literalMutationString259516__14 = TestUtil.getContents(root, "items.txt");
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_literalMutationString259516__14);
        sw.toString();
        String String_87 = "Should be a little bit more than 1 second: " + diff;
        TestCase.assertEquals("Should be a little bit more than 1 second: 0", String_87);
        boolean boolean_88 = (diff > 999) && (diff < 2000);
        m.getName();
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_literalMutationString259516__14);
        TestCase.assertEquals("Should be a little bit more than 1 second: 0", String_87);
    }

    public void testReadmeParallel_literalMutationString259518_failAssert0null260770_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = initParallel();
                Mustache m = c.compile("( A!H.kC8go");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context()).close();
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, null);
                sw.toString();
                String String_95 = "Should be a little bit more than 1 second: " + diff;
                boolean boolean_96 = (diff > 999) && (diff < 2000);
                junit.framework.TestCase.fail("testReadmeParallel_literalMutationString259518 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeParallel_literalMutationString259518_failAssert0null260770 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ( A!H.kC8go not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_literalMutationString259526_failAssert0_literalMutationString260223_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = initParallel();
                Mustache m = c.compile("items2.h ml");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context()).close();
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "item.txt");
                sw.toString();
                String String_93 = "Should be a little bit more than 1 second: " + diff;
                boolean boolean_94 = (diff > 999) && (diff < 2000);
                junit.framework.TestCase.fail("testReadmeParallel_literalMutationString259526 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeParallel_literalMutationString259526_failAssert0_literalMutationString260223 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template items2.h ml not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_add259527_add260410_add266768() throws MustacheException, IOException {
        DefaultMustacheFactory o_testReadmeParallel_add259527__1 = initParallel();
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (o_testReadmeParallel_add259527__1)).getExecutorService())).isShutdown());
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (o_testReadmeParallel_add259527__1)).getExecutorService())).isTerminated());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (o_testReadmeParallel_add259527__1)).getRecursionLimit())));
        DefaultMustacheFactory o_testReadmeParallel_add259527_add260410__4 = initParallel();
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (o_testReadmeParallel_add259527_add260410__4)).getExecutorService())).isShutdown());
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (o_testReadmeParallel_add259527_add260410__4)).getExecutorService())).isTerminated());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (o_testReadmeParallel_add259527_add260410__4)).getRecursionLimit())));
        MustacheFactory c = initParallel();
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        Mustache o_testReadmeParallel_add259527_add260410_add266768__9 = c.compile("items2.html");
        TestCase.assertFalse(((DefaultMustache) (o_testReadmeParallel_add259527_add260410_add266768__9)).isRecursive());
        TestCase.assertEquals("items2.html", ((DefaultMustache) (o_testReadmeParallel_add259527_add260410_add266768__9)).getName());
        Mustache m = c.compile("items2.html");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("items2.html", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        long start = System.currentTimeMillis();
        m.execute(sw, new AmplInterpreterTest.Context()).close();
        long diff = (System.currentTimeMillis()) - start;
        String o_testReadmeParallel_add259527__15 = TestUtil.getContents(root, "items.txt");
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add259527__15);
        sw.toString();
        String String_65 = "Should be a little bit more than 1 second: " + diff;
        TestCase.assertEquals("Should be a little bit more than 1 second: 1001", String_65);
        boolean boolean_66 = (diff > 999) && (diff < 2000);
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (o_testReadmeParallel_add259527__1)).getExecutorService())).isShutdown());
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (o_testReadmeParallel_add259527__1)).getExecutorService())).isTerminated());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (o_testReadmeParallel_add259527__1)).getRecursionLimit())));
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (o_testReadmeParallel_add259527_add260410__4)).getExecutorService())).isShutdown());
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (o_testReadmeParallel_add259527_add260410__4)).getExecutorService())).isTerminated());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (o_testReadmeParallel_add259527_add260410__4)).getRecursionLimit())));
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (o_testReadmeParallel_add259527_add260410_add266768__9)).isRecursive());
        TestCase.assertEquals("items2.html", ((DefaultMustache) (o_testReadmeParallel_add259527_add260410_add266768__9)).getName());
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("items2.html", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add259527__15);
        TestCase.assertEquals("Should be a little bit more than 1 second: 1001", String_65);
    }

    public void testReadmeParallel_add259531_remove260686() throws MustacheException, IOException {
        MustacheFactory c = initParallel();
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        Mustache m = c.compile("items2.html");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("items2.html", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        long start = System.currentTimeMillis();
        m.execute(sw, new AmplInterpreterTest.Context()).close();
        long diff = (System.currentTimeMillis()) - start;
        String o_testReadmeParallel_add259531__16 = TestUtil.getContents(root, "items.txt");
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add259531__16);
        sw.toString();
        String String_63 = "Should be a little bit more than 1 second: " + diff;
        TestCase.assertEquals("Should be a little bit more than 1 second: 1001", String_63);
        boolean boolean_64 = (diff > 999) && (diff < 2000);
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("items2.html", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add259531__16);
        TestCase.assertEquals("Should be a little bit more than 1 second: 1001", String_63);
    }

    public void testReadmeParallel_add259531_remove260687() throws MustacheException, IOException {
        MustacheFactory c = initParallel();
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        Mustache m = c.compile("items2.html");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("items2.html", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        long start = System.currentTimeMillis();
        m.execute(sw, new AmplInterpreterTest.Context());
        long diff = (System.currentTimeMillis()) - start;
        String o_testReadmeParallel_add259531__16 = TestUtil.getContents(root, "items.txt");
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add259531__16);
        sw.toString();
        String String_63 = "Should be a little bit more than 1 second: " + diff;
        TestCase.assertEquals("Should be a little bit more than 1 second: 1", String_63);
        boolean boolean_64 = (diff > 999) && (diff < 2000);
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("items2.html", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_add259531__16);
        TestCase.assertEquals("Should be a little bit more than 1 second: 1", String_63);
    }

    public void testReadmeParallel_literalMutationString259518_failAssert0_literalMutationString260265_failAssert0() throws MustacheException, IOException {
        try {
            {
                MustacheFactory c = initParallel();
                Mustache m = c.compile("( A!H.kC8go");
                StringWriter sw = new StringWriter();
                long start = System.currentTimeMillis();
                m.execute(sw, new AmplInterpreterTest.Context()).close();
                long diff = (System.currentTimeMillis()) - start;
                TestUtil.getContents(root, "items.txt");
                sw.toString();
                String String_95 = "Should be a little bit more than 1 sec:ond: " + diff;
                boolean boolean_96 = (diff > 999) && (diff < 2000);
                junit.framework.TestCase.fail("testReadmeParallel_literalMutationString259518 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testReadmeParallel_literalMutationString259518_failAssert0_literalMutationString260265 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ( A!H.kC8go not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_literalMutationString259516_literalMutationNumber259903_literalMutationString262125_failAssert0() throws MustacheException, IOException {
        try {
            MustacheFactory c = initParallel();
            Mustache m = c.compile("<");
            StringWriter sw = new StringWriter();
            long start = System.currentTimeMillis();
            m.execute(sw, new AmplInterpreterTest.Context()).close();
            long diff = (System.currentTimeMillis()) - start;
            String o_testReadmeParallel_literalMutationString259516__14 = TestUtil.getContents(root, "items.txt");
            sw.toString();
            String String_87 = "Should be a little bit more than 1 second: " + diff;
            boolean boolean_88 = (diff > 999) && (diff < 1999);
            junit.framework.TestCase.fail("testReadmeParallel_literalMutationString259516_literalMutationNumber259903_literalMutationString262125 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template < not found", expected.getMessage());
        }
    }

    public void testReadmeParallel_literalMutationString259516_literalMutationNumber259903_add267344() throws MustacheException, IOException {
        MustacheFactory c = initParallel();
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        Mustache m = c.compile("");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        long start = System.currentTimeMillis();
        Writer o_testReadmeParallel_literalMutationString259516_literalMutationNumber259903_add267344__9 = m.execute(sw, new AmplInterpreterTest.Context());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testReadmeParallel_literalMutationString259516_literalMutationNumber259903_add267344__9)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testReadmeParallel_literalMutationString259516_literalMutationNumber259903_add267344__9)).toString());
        m.execute(sw, new AmplInterpreterTest.Context()).close();
        long diff = (System.currentTimeMillis()) - start;
        String o_testReadmeParallel_literalMutationString259516__14 = TestUtil.getContents(root, "items.txt");
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_literalMutationString259516__14);
        sw.toString();
        String String_87 = "Should be a little bit more than 1 second: " + diff;
        boolean boolean_88 = (diff > 999) && (diff < 1999);
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isShutdown());
        TestCase.assertFalse(((ExecutorService) (((DefaultMustacheFactory) (c)).getExecutorService())).isTerminated());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (c)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\nbox.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testReadmeParallel_literalMutationString259516_literalMutationNumber259903_add267344__9)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\nbox.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testReadmeParallel_literalMutationString259516_literalMutationNumber259903_add267344__9)).toString());
        TestCase.assertEquals("Name: Item 1\nPrice: $19.99\n  Feature: New!\n  Feature: Awesome!\nName: Item 2\nPrice: $29.99\n  Feature: Old.\n  Feature: Ugly.\n", o_testReadmeParallel_literalMutationString259516__14);
    }

    static class Context {
        List<AmplInterpreterTest.Context.Item> items() {
            return Arrays.asList(new AmplInterpreterTest.Context.Item("Item 1", "$19.99", Arrays.asList(new AmplInterpreterTest.Context.Feature("New!"), new AmplInterpreterTest.Context.Feature("Awesome!"))), new AmplInterpreterTest.Context.Item("Item 2", "$29.99", Arrays.asList(new AmplInterpreterTest.Context.Feature("Old."), new AmplInterpreterTest.Context.Feature("Ugly."))));
        }

        static class Item {
            Item(String name, String price, List<AmplInterpreterTest.Context.Feature> features) {
                this.name = name;
                this.price = price;
                this.features = features;
            }

            String name;

            String price;

            List<AmplInterpreterTest.Context.Feature> features;
        }

        static class Feature {
            Feature(String description) {
                this.description = description;
            }

            String description;

            Callable<String> desc() throws InterruptedException {
                return () -> {
                    Thread.sleep(1000);
                    return description;
                };
            }
        }
    }

    public void testDeferred_literalMutationString244239_failAssert0_literalMutationString244736_failAssert0() throws IOException {
        try {
            {
                DefaultMustacheFactory mf = new DeferringMustacheFactory(root);
                mf.setExecutorService(Executors.newCachedThreadPool());
                Object context = new Object() {
                    String title = "Deferred";

                    Object deferred = new DeferringMustacheFactory.DeferredCallable();

                    Object deferredpartial = DeferringMustacheFactory.DEFERRED;
                };
                Mustache m = mf.compile("]w`0cIanv=#IB");
                StringWriter sw = new StringWriter();
                m.execute(sw, context).close();
                TestUtil.getContents(root, "deferred.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDeferred_literalMutationString244239 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDeferred_literalMutationString244239_failAssert0_literalMutationString244736 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ]w`0cIanv=#IB not found", expected.getMessage());
        }
    }

    public void testDeferred_literalMutationString244235_failAssert0_add245271_failAssert0_literalMutationString247850_failAssert0() throws IOException {
        try {
            {
                {
                    DefaultMustacheFactory mf = new DeferringMustacheFactory(root);
                    mf.setExecutorService(Executors.newCachedThreadPool());
                    Object context = new Object() {
                        String title = "";

                        Object deferred = new DeferringMustacheFactory.DeferredCallable();

                        Object deferredpartial = DeferringMustacheFactory.DEFERRED;
                    };
                    Mustache m = mf.compile("P$HZ[&OV#Bf,u");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, context).close();
                    TestUtil.getContents(root, "deferred.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testDeferred_literalMutationString244235 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDeferred_literalMutationString244235_failAssert0_add245271 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDeferred_literalMutationString244235_failAssert0_add245271_failAssert0_literalMutationString247850 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template P$HZ[&OV#Bf,u not found", expected.getMessage());
        }
    }

    public void testDeferred_literalMutationString244229_remove245369_literalMutationString246447_failAssert0() throws IOException {
        try {
            DefaultMustacheFactory mf = new DeferringMustacheFactory(root);
            mf.setExecutorService(Executors.newCachedThreadPool());
            Object context = new Object() {
                String title = "Defesrred";

                Object deferred = new DeferringMustacheFactory.DeferredCallable();

                Object deferredpartial = DeferringMustacheFactory.DEFERRED;
            };
            Mustache m = mf.compile("deferred.ht]ml");
            StringWriter sw = new StringWriter();
            String o_testDeferred_literalMutationString244229__17 = TestUtil.getContents(root, "deferred.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDeferred_literalMutationString244229_remove245369_literalMutationString246447 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template deferred.ht]ml not found", expected.getMessage());
        }
    }

    public void testDeferred_literalMutationString244235_failAssert0() throws IOException {
        try {
            DefaultMustacheFactory mf = new DeferringMustacheFactory(root);
            mf.setExecutorService(Executors.newCachedThreadPool());
            Object context = new Object() {
                String title = "Deferred";

                Object deferred = new DeferringMustacheFactory.DeferredCallable();

                Object deferredpartial = DeferringMustacheFactory.DEFERRED;
            };
            Mustache m = mf.compile("P$HZ[&OV#Bf,u");
            StringWriter sw = new StringWriter();
            m.execute(sw, context).close();
            TestUtil.getContents(root, "deferred.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDeferred_literalMutationString244235 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template P$HZ[&OV#Bf,u not found", expected.getMessage());
        }
    }

    public void testDeferred_literalMutationString244239_failAssert0_literalMutationString244736_failAssert0_literalMutationString248002_failAssert0() throws IOException {
        try {
            {
                {
                    DefaultMustacheFactory mf = new DeferringMustacheFactory(root);
                    mf.setExecutorService(Executors.newCachedThreadPool());
                    Object context = new Object() {
                        String title = "Deferred";

                        Object deferred = new DeferringMustacheFactory.DeferredCallable();

                        Object deferredpartial = DeferringMustacheFactory.DEFERRED;
                    };
                    Mustache m = mf.compile("-sJQHMU3n|FK]");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, context).close();
                    TestUtil.getContents(root, "deferred.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDeferred_literalMutationString244239 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDeferred_literalMutationString244239_failAssert0_literalMutationString244736 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDeferred_literalMutationString244239_failAssert0_literalMutationString244736_failAssert0_literalMutationString248002 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template -sJQHMU3n|FK] not found", expected.getMessage());
        }
    }

    public void testDeferred_literalMutationString244235_failAssert0_add245271_failAssert0_add250883_failAssert0() throws IOException {
        try {
            {
                {
                    DefaultMustacheFactory mf = new DeferringMustacheFactory(root);
                    mf.setExecutorService(Executors.newCachedThreadPool());
                    Object context = new Object() {
                        String title = "Deferred";

                        Object deferred = new DeferringMustacheFactory.DeferredCallable();

                        Object deferredpartial = DeferringMustacheFactory.DEFERRED;
                    };
                    Mustache m = mf.compile("P$HZ[&OV#Bf,u");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, context).close();
                    TestUtil.getContents(root, "deferred.txt");
                    sw.toString();
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testDeferred_literalMutationString244235 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDeferred_literalMutationString244235_failAssert0_add245271 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDeferred_literalMutationString244235_failAssert0_add245271_failAssert0_add250883 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template P$HZ[&OV#Bf,u not found", expected.getMessage());
        }
    }

    public void testDeferred_literalMutationString244245_failAssert0_literalMutationString244790_failAssert0() throws IOException {
        try {
            {
                DefaultMustacheFactory mf = new DeferringMustacheFactory(root);
                mf.setExecutorService(Executors.newCachedThreadPool());
                Object context = new Object() {
                    String title = "Deferred";

                    Object deferred = new DeferringMustacheFactory.DeferredCallable();

                    Object deferredpartial = DeferringMustacheFactory.DEFERRED;
                };
                Mustache m = mf.compile("#W:7VKZZb:oKP");
                StringWriter sw = new StringWriter();
                m.execute(sw, context).close();
                TestUtil.getContents(root, "6lpb0?QC d{{");
                sw.toString();
                junit.framework.TestCase.fail("testDeferred_literalMutationString244245 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testDeferred_literalMutationString244245_failAssert0_literalMutationString244790 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template #W:7VKZZb:oKP not found", expected.getMessage());
        }
    }

    public void testDeferred_literalMutationString244240_failAssert0_literalMutationString244826_failAssert0() throws IOException {
        try {
            {
                DefaultMustacheFactory mf = new DeferringMustacheFactory(root);
                mf.setExecutorService(Executors.newCachedThreadPool());
                Object context = new Object() {
                    String title = "Deferred";

                    Object deferred = new DeferringMustacheFactory.DeferredCallable();

                    Object deferredpartial = DeferringMustacheFactory.DEFERRED;
                };
                Mustache m = mf.compile("#?f[DclMG8{K,");
                StringWriter sw = new StringWriter();
                m.execute(sw, context).close();
                TestUtil.getContents(root, "defarred.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDeferred_literalMutationString244240 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testDeferred_literalMutationString244240_failAssert0_literalMutationString244826 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template #?f[DclMG8{K, not found", expected.getMessage());
        }
    }

    public void testDeferred_literalMutationString244243_failAssert0_literalMutationString244719_failAssert0_literalMutationString248125_failAssert0() throws IOException {
        try {
            {
                {
                    DefaultMustacheFactory mf = new DeferringMustacheFactory(root);
                    mf.setExecutorService(Executors.newCachedThreadPool());
                    Object context = new Object() {
                        String title = "Deferred";

                        Object deferred = new DeferringMustacheFactory.DeferredCallable();

                        Object deferredpartial = DeferringMustacheFactory.DEFERRED;
                    };
                    Mustache m = mf.compile("KzpFI&n3 Qpjc$");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, context).close();
                    TestUtil.getContents(root, "deferre.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDeferred_literalMutationString244243 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testDeferred_literalMutationString244243_failAssert0_literalMutationString244719 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDeferred_literalMutationString244243_failAssert0_literalMutationString244719_failAssert0_literalMutationString248125 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template KzpFI&n3 Qpjc$ not found", expected.getMessage());
        }
    }

    public void testDeferred_literalMutationString244239_failAssert0_add245257_failAssert0_literalMutationString247605_failAssert0() throws IOException {
        try {
            {
                {
                    DefaultMustacheFactory mf = new DeferringMustacheFactory(root);
                    mf.setExecutorService(Executors.newCachedThreadPool());
                    mf.setExecutorService(Executors.newCachedThreadPool());
                    Object context = new Object() {
                        String title = "Deferred";

                        Object deferred = new DeferringMustacheFactory.DeferredCallable();

                        Object deferredpartial = DeferringMustacheFactory.DEFERRED;
                    };
                    Mustache m = mf.compile("1]$Qfq6GVq?0b");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, context).close();
                    TestUtil.getContents(root, "deferred.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDeferred_literalMutationString244239 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDeferred_literalMutationString244239_failAssert0_add245257 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDeferred_literalMutationString244239_failAssert0_add245257_failAssert0_literalMutationString247605 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 1]$Qfq6GVq?0b not found", expected.getMessage());
        }
    }

    public void testDeferred_literalMutationString244235_failAssert0_literalMutationString244744_failAssert0() throws IOException {
        try {
            {
                DefaultMustacheFactory mf = new DeferringMustacheFactory(root);
                mf.setExecutorService(Executors.newCachedThreadPool());
                Object context = new Object() {
                    String title = "";

                    Object deferred = new DeferringMustacheFactory.DeferredCallable();

                    Object deferredpartial = DeferringMustacheFactory.DEFERRED;
                };
                Mustache m = mf.compile("P$HZ[&OV#Bf,u");
                StringWriter sw = new StringWriter();
                m.execute(sw, context).close();
                TestUtil.getContents(root, "deferred.txt");
                sw.toString();
                junit.framework.TestCase.fail("testDeferred_literalMutationString244235 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDeferred_literalMutationString244235_failAssert0_literalMutationString244744 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template P$HZ[&OV#Bf,u not found", expected.getMessage());
        }
    }

    public void testDeferred_literalMutationString244239_failAssert0_literalMutationString244736_failAssert0_add250944_failAssert0() throws IOException {
        try {
            {
                {
                    DefaultMustacheFactory mf = new DeferringMustacheFactory(root);
                    mf.setExecutorService(Executors.newCachedThreadPool());
                    Object context = new Object() {
                        String title = "Deferred";

                        Object deferred = new DeferringMustacheFactory.DeferredCallable();

                        Object deferredpartial = DeferringMustacheFactory.DEFERRED;
                    };
                    Mustache m = mf.compile("]w`0cIanv=#IB");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, context);
                    m.execute(sw, context).close();
                    TestUtil.getContents(root, "deferred.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDeferred_literalMutationString244239 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDeferred_literalMutationString244239_failAssert0_literalMutationString244736 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDeferred_literalMutationString244239_failAssert0_literalMutationString244736_failAssert0_add250944 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ]w`0cIanv=#IB not found", expected.getMessage());
        }
    }

    public void testDeferred_literalMutationString244239_failAssert0_literalMutationString244736_failAssert0null252292_failAssert0() throws IOException {
        try {
            {
                {
                    DefaultMustacheFactory mf = new DeferringMustacheFactory(root);
                    mf.setExecutorService(Executors.newCachedThreadPool());
                    Object context = new Object() {
                        String title = "Deferred";

                        Object deferred = new DeferringMustacheFactory.DeferredCallable();

                        Object deferredpartial = DeferringMustacheFactory.DEFERRED;
                    };
                    Mustache m = mf.compile("]w`0cIanv=#IB");
                    StringWriter sw = new StringWriter();
                    m.execute(null, context).close();
                    TestUtil.getContents(root, "deferred.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testDeferred_literalMutationString244239 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDeferred_literalMutationString244239_failAssert0_literalMutationString244736 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDeferred_literalMutationString244239_failAssert0_literalMutationString244736_failAssert0null252292 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ]w`0cIanv=#IB not found", expected.getMessage());
        }
    }

    public void testDeferred_literalMutationString244235_failAssert0_add245271_failAssert0null252260_failAssert0() throws IOException {
        try {
            {
                {
                    DefaultMustacheFactory mf = new DeferringMustacheFactory(root);
                    mf.setExecutorService(Executors.newCachedThreadPool());
                    Object context = new Object() {
                        String title = "Deferred";

                        Object deferred = new DeferringMustacheFactory.DeferredCallable();

                        Object deferredpartial = DeferringMustacheFactory.DEFERRED;
                    };
                    Mustache m = mf.compile("P$HZ[&OV#Bf,u");
                    StringWriter sw = new StringWriter();
                    m.execute(sw, context).close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testDeferred_literalMutationString244235 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testDeferred_literalMutationString244235_failAssert0_add245271 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDeferred_literalMutationString244235_failAssert0_add245271_failAssert0null252260 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template P$HZ[&OV#Bf,u not found", expected.getMessage());
        }
    }

    public void testDeferred_add244246_literalMutationString244450_failAssert0() throws IOException {
        try {
            DefaultMustacheFactory mf = new DeferringMustacheFactory(root);
            mf.setExecutorService(Executors.newCachedThreadPool());
            mf.setExecutorService(Executors.newCachedThreadPool());
            Object context = new Object() {
                String title = "Deferred";

                Object deferred = new DeferringMustacheFactory.DeferredCallable();

                Object deferredpartial = DeferringMustacheFactory.DEFERRED;
            };
            Mustache m = mf.compile("4FMub!&h#h&{O");
            StringWriter sw = new StringWriter();
            m.execute(sw, context).close();
            String o_testDeferred_add244246__19 = TestUtil.getContents(root, "deferred.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDeferred_add244246_literalMutationString244450 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 4FMub!&h#h&{O not found", expected.getMessage());
        }
    }

    public void testDeferred_literalMutationString244235_failAssert0_add245271_failAssert0() throws IOException {
        try {
            {
                DefaultMustacheFactory mf = new DeferringMustacheFactory(root);
                mf.setExecutorService(Executors.newCachedThreadPool());
                Object context = new Object() {
                    String title = "Deferred";

                    Object deferred = new DeferringMustacheFactory.DeferredCallable();

                    Object deferredpartial = DeferringMustacheFactory.DEFERRED;
                };
                Mustache m = mf.compile("P$HZ[&OV#Bf,u");
                StringWriter sw = new StringWriter();
                m.execute(sw, context).close();
                TestUtil.getContents(root, "deferred.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testDeferred_literalMutationString244235 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testDeferred_literalMutationString244235_failAssert0_add245271 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template P$HZ[&OV#Bf,u not found", expected.getMessage());
        }
    }

    public void testDeferred_literalMutationString244234_add245165() throws IOException {
        DefaultMustacheFactory mf = new DeferringMustacheFactory(root);
        TestCase.assertNull(((DeferringMustacheFactory) (mf)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DeferringMustacheFactory) (mf)).getRecursionLimit())));
        mf.setExecutorService(Executors.newCachedThreadPool());
        Object context = new Object() {
            String title = "Deferred";

            Object deferred = new DeferringMustacheFactory.DeferredCallable();

            Object deferredpartial = DeferringMustacheFactory.DEFERRED;
        };
        Mustache m = mf.compile("");
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        StringWriter sw = new StringWriter();
        Writer o_testDeferred_literalMutationString244234_add245165__15 = m.execute(sw, context);
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testDeferred_literalMutationString244234_add245165__15)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testDeferred_literalMutationString244234_add245165__15)).toString());
        m.execute(sw, context).close();
        String o_testDeferred_literalMutationString244234__17 = TestUtil.getContents(root, "deferred.txt");
        TestCase.assertEquals("<html>\n<head><title>Deferred</title></head>\n<body>\n<div id=\"1\"></div>\n<script>document.getElementById(\"1\").innerHTML=\"I am calculated\\n\\\"later\\\" and divs\\nare written out &lt;\\nnow\";</script>\n</body>\n</html>", o_testDeferred_literalMutationString244234__17);
        sw.toString();
        TestCase.assertFalse(((ExecutorService) (((DeferringMustacheFactory) (mf)).getExecutorService())).isTerminated());
        TestCase.assertFalse(((ExecutorService) (((DeferringMustacheFactory) (mf)).getExecutorService())).isShutdown());
        TestCase.assertEquals(100, ((int) (((DeferringMustacheFactory) (mf)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (m)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (m)).getName());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\nbox.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testDeferred_literalMutationString244234_add245165__15)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\nbox.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testDeferred_literalMutationString244234_add245165__15)).toString());
        TestCase.assertEquals("<html>\n<head><title>Deferred</title></head>\n<body>\n<div id=\"1\"></div>\n<script>document.getElementById(\"1\").innerHTML=\"I am calculated\\n\\\"later\\\" and divs\\nare written out &lt;\\nnow\";</script>\n</body>\n</html>", o_testDeferred_literalMutationString244234__17);
    }

    public void testDeferred_literalMutationString244231_literalMutationString244538_failAssert0() throws IOException {
        try {
            DefaultMustacheFactory mf = new DeferringMustacheFactory(root);
            mf.setExecutorService(Executors.newCachedThreadPool());
            Object context = new Object() {
                String title = "page1.txt";

                Object deferred = new DeferringMustacheFactory.DeferredCallable();

                Object deferredpartial = DeferringMustacheFactory.DEFERRED;
            };
            Mustache m = mf.compile("defe^red.html");
            StringWriter sw = new StringWriter();
            m.execute(sw, context).close();
            String o_testDeferred_literalMutationString244231__17 = TestUtil.getContents(root, "deferred.txt");
            sw.toString();
            junit.framework.TestCase.fail("testDeferred_literalMutationString244231_literalMutationString244538 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template defe^red.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333994_failAssert0_literalMutationString334432_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("}elative/paths.html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "relative/pat}hs.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333994 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333994_failAssert0_literalMutationString334432 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }elative/paths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333986_failAssert0null334816_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("relative/p]aths.html");
                StringWriter sw = new StringWriter();
                compile.execute(null, "").close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986_failAssert0null334816 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/p]aths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDirnull334006_failAssert0_literalMutationString334265_failAssert0_add339111_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("VZp9x4%mh{ vx=a[Je-");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsSameDirnull334006 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testRelativePathsSameDirnull334006_failAssert0_literalMutationString334265 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDirnull334006_failAssert0_literalMutationString334265_failAssert0_add339111 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template VZp9x4%mh{ vx=a[Je- not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333994_failAssert0_literalMutationString334432_failAssert0null340154_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("}elative/paths.html");
                    StringWriter sw = new StringWriter();
                    compile.execute(null, "").close();
                    TestUtil.getContents(root, "relative/pat}hs.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333994 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333994_failAssert0_literalMutationString334432 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333994_failAssert0_literalMutationString334432_failAssert0null340154 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }elative/paths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333984_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("8Cc=?H!Fs]]@@$&z|;Q");
            StringWriter sw = new StringWriter();
            compile.execute(sw, "").close();
            TestUtil.getContents(root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333984 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 8Cc=?H!Fs]]@@$&z|;Q not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333986_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("relative/p]aths.html");
            StringWriter sw = new StringWriter();
            compile.execute(sw, "").close();
            TestUtil.getContents(root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/p]aths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333986_failAssert0_add334676_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("relative/p]aths.html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "");
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986_failAssert0_add334676 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/p]aths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333984_failAssert0_literalMutationString334301_failAssert0null340164_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("VPtwN9Qj)Bw[CF[<rM|");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333984 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333984_failAssert0_literalMutationString334301 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333984_failAssert0_literalMutationString334301_failAssert0null340164 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template VPtwN9Qj)Bw[CF[<rM| not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDirnull334006_failAssert0_literalMutationString334265_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("VZp9x4%mh{ vx=a[Je-");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsSameDirnull334006 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDirnull334006_failAssert0_literalMutationString334265 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template VZp9x4%mh{ vx=a[Je- not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333986_failAssert0null334816_failAssert0_add338804_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("relative/p]aths.html");
                    StringWriter sw = new StringWriter();
                    compile.execute(null, "");
                    compile.execute(null, "").close();
                    TestUtil.getContents(root, "relative/paths.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986_failAssert0null334816 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986_failAssert0null334816_failAssert0_add338804 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/p]aths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333986_failAssert0_add334673_failAssert0() throws IOException {
        try {
            {
                createMustacheFactory();
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("relative/p]aths.html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986_failAssert0_add334673 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/p]aths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333984_failAssert0null334802_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("8Cc=?H!Fs]]@@$&z|;Q");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333984 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333984_failAssert0null334802 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 8Cc=?H!Fs]]@@$&z|;Q not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_add334000_literalMutationString334073_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("f^zD&InbkePYx/2,j*9");
            StringWriter sw = new StringWriter();
            compile.execute(sw, "").close();
            String o_testRelativePathsSameDir_add334000__9 = TestUtil.getContents(root, "relative/paths.txt");
            String o_testRelativePathsSameDir_add334000__10 = TestUtil.getContents(root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsSameDir_add334000_literalMutationString334073 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template f^zD&InbkePYx/2,j*9 not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333986_failAssert0_literalMutationString334362_failAssert0_literalMutationString337473_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("relative/p]aths.html");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "t").close();
                    TestUtil.getContents(root, "r^lative/paths.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986_failAssert0_literalMutationString334362 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986_failAssert0_literalMutationString334362_failAssert0_literalMutationString337473 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/p]aths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333994_failAssert0_literalMutationString334432_failAssert0_literalMutationString337291_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("}elative/paths.html");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "relative/pat}hstxt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333994 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333994_failAssert0_literalMutationString334432 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333994_failAssert0_literalMutationString334432_failAssert0_literalMutationString337291 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }elative/paths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333984_failAssert0_add334646_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                mf.compile("8Cc=?H!Fs]]@@$&z|;Q");
                Mustache compile = mf.compile("8Cc=?H!Fs]]@@$&z|;Q");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333984 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333984_failAssert0_add334646 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 8Cc=?H!Fs]]@@$&z|;Q not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_add333997_literalMutationString334130_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache o_testRelativePathsSameDir_add333997__3 = mf.compile("relative/paths.html");
            Mustache compile = mf.compile("?eW>s:&(@10i!8^F/;Q");
            StringWriter sw = new StringWriter();
            compile.execute(sw, "").close();
            String o_testRelativePathsSameDir_add333997__10 = TestUtil.getContents(root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsSameDir_add333997_literalMutationString334130 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ?eW>s:&(@10i!8^F/;Q not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333986_failAssert0_literalMutationString334357_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile(";kq+,_|,gx0%R`]x[CiE");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986_failAssert0_literalMutationString334357 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ;kq+,_|,gx0%R`]x[CiE not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333986_failAssert0_literalMutationString334362_failAssert0_add339326_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("relative/p]aths.html");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "t").close();
                    TestUtil.getContents(root, "relative/paths.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986_failAssert0_literalMutationString334362 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986_failAssert0_literalMutationString334362_failAssert0_add339326 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/p]aths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_add333999_literalMutationString334146_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("evlr`fAso!c0z;`n^?s");
            StringWriter sw = new StringWriter();
            Writer o_testRelativePathsSameDir_add333999__7 = compile.execute(sw, "");
            compile.execute(sw, "").close();
            String o_testRelativePathsSameDir_add333999__10 = TestUtil.getContents(root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsSameDir_add333999_literalMutationString334146 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template evlr`fAso!c0z;`n^?s not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDirnull334006_failAssert0_literalMutationString334265_failAssert0_literalMutationString337015_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("VZp9x4%mh{ Fx=a[Je-");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsSameDirnull334006 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testRelativePathsSameDirnull334006_failAssert0_literalMutationString334265 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDirnull334006_failAssert0_literalMutationString334265_failAssert0_literalMutationString337015 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template VZp9x4%mh{ Fx=a[Je- not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333984_failAssert0_add334649_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("8Cc=?H!Fs]]@@$&z|;Q");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "relative/paths.txt");
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333984 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333984_failAssert0_add334649 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 8Cc=?H!Fs]]@@$&z|;Q not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333984_failAssert0_literalMutationString334301_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("VPtwN9Qj)Bw[CF[<rM|");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333984 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333984_failAssert0_literalMutationString334301 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template VPtwN9Qj)Bw[CF[<rM| not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333992_failAssert0_add334664_failAssert0_literalMutationString336521_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("rel<ative/paths.html");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "relative/pths.txt");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333992 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333992_failAssert0_add334664 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333992_failAssert0_add334664_failAssert0_literalMutationString336521 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template rel<ative/paths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333986_failAssert0_literalMutationString334362_failAssert0_add339321_failAssert0() throws IOException {
        try {
            {
                {
                    createMustacheFactory();
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("relative/p]aths.html");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "t").close();
                    TestUtil.getContents(root, "relative/paths.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986_failAssert0_literalMutationString334362 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986_failAssert0_literalMutationString334362_failAssert0_add339321 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/p]aths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333984_failAssert0_literalMutationString334301_failAssert0_add339249_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    mf.compile("VPtwN9Qj)Bw[CF[<rM|");
                    Mustache compile = mf.compile("VPtwN9Qj)Bw[CF[<rM|");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "relative/paths.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333984 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333984_failAssert0_literalMutationString334301 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333984_failAssert0_literalMutationString334301_failAssert0_add339249 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template VPtwN9Qj)Bw[CF[<rM| not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333986_failAssert0_literalMutationString334362_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("relative/p]aths.html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "t").close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986_failAssert0_literalMutationString334362 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/p]aths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333994_failAssert0_literalMutationString334432_failAssert0_add339234_failAssert0() throws IOException {
        try {
            {
                {
                    createMustacheFactory();
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("}elative/paths.html");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "relative/pat}hs.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333994 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333994_failAssert0_literalMutationString334432 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333994_failAssert0_literalMutationString334432_failAssert0_add339234 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }elative/paths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_remove334002null334769_failAssert0_literalMutationString336384_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("ub*-nrid,/rX_W 8aH3");
                StringWriter sw = new StringWriter();
                String o_testRelativePathsSameDir_remove334002__7 = TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsSameDir_remove334002null334769 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_remove334002null334769_failAssert0_literalMutationString336384 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ub*-nrid,/rX_W 8aH3 not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDirnull334006_failAssert0_literalMutationString334265_failAssert0null340082_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("VZp9x4%mh{ vx=a[Je-");
                    StringWriter sw = new StringWriter();
                    compile.execute(null, "").close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsSameDirnull334006 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testRelativePathsSameDirnull334006_failAssert0_literalMutationString334265 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDirnull334006_failAssert0_literalMutationString334265_failAssert0null340082 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template VZp9x4%mh{ vx=a[Je- not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333986_failAssert0_literalMutationString334362_failAssert0_literalMutationString337476_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("relative/p]aths.html");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "t").close();
                    TestUtil.getContents(root, ":%FJ?q+FDZ&kRsTa5Y");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986_failAssert0_literalMutationString334362 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986_failAssert0_literalMutationString334362_failAssert0_literalMutationString337476 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/p]aths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333986_failAssert0_literalMutationString334362_failAssert0null340204_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("relative/p]aths.html");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "t").close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986_failAssert0_literalMutationString334362 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986_failAssert0_literalMutationString334362_failAssert0null340204 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/p]aths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333986_failAssert0_literalMutationString334362_failAssert0null340202_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("relative/p]aths.html");
                    StringWriter sw = new StringWriter();
                    compile.execute(null, "t").close();
                    TestUtil.getContents(root, "relative/paths.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986_failAssert0_literalMutationString334362 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333986_failAssert0_literalMutationString334362_failAssert0null340202 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/p]aths.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333984_failAssert0_literalMutationString334297_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("8Cc=?H!FsR]@@$&z|;Q");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333984 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333984_failAssert0_literalMutationString334297 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 8Cc=?H!FsR]@@$&z|;Q not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_add333996_literalMutationString334167_failAssert0() throws IOException {
        try {
            DefaultMustacheFactory o_testRelativePathsSameDir_add333996__1 = createMustacheFactory();
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("[a!zU)lo-%#5;j=7rIr");
            StringWriter sw = new StringWriter();
            compile.execute(sw, "").close();
            String o_testRelativePathsSameDir_add333996__10 = TestUtil.getContents(root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsSameDir_add333996_literalMutationString334167 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [a!zU)lo-%#5;j=7rIr not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDir_literalMutationString333984_failAssert0null334800_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("8Cc=?H!Fs]]@@$&z|;Q");
                StringWriter sw = new StringWriter();
                compile.execute(null, "").close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333984 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDir_literalMutationString333984_failAssert0null334800 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 8Cc=?H!Fs]]@@$&z|;Q not found", expected.getMessage());
        }
    }

    public void testRelativePathsSameDirnull334006_failAssert0_literalMutationString334265_failAssert0_add339106_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    mf.compile("VZp9x4%mh{ vx=a[Je-");
                    Mustache compile = mf.compile("VZp9x4%mh{ vx=a[Je-");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsSameDirnull334006 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testRelativePathsSameDirnull334006_failAssert0_literalMutationString334265 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsSameDirnull334006_failAssert0_literalMutationString334265_failAssert0_add339106 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template VZp9x4%mh{ vx=a[Je- not found", expected.getMessage());
        }
    }

    public void testRelativePathsRootDirnull230041_failAssert0_add230658_failAssert0_literalMutationString232747_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("(N#7o=bc8)#Xtv:^rXGf:e");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsRootDirnull230041 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testRelativePathsRootDirnull230041_failAssert0_add230658 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testRelativePathsRootDirnull230041_failAssert0_add230658_failAssert0_literalMutationString232747 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template (N#7o=bc8)#Xtv:^rXGf:e not found", expected.getMessage());
        }
    }

    public void testRelativePathsRootDir_literalMutationString230028_failAssert0_literalMutationString230410_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("r}elative/rootpath.html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "LO6{87d6R%A.+-$Qrh");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230028 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230028_failAssert0_literalMutationString230410 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template r}elative/rootpath.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsRootDir_literalMutationString230019_failAssert0null230839_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("relative/rootpath.{tml");
                StringWriter sw = new StringWriter();
                compile.execute(null, "").close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230019 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230019_failAssert0null230839 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/rootpath.{tml not found", expected.getMessage());
        }
    }

    public void testRelativePathsRootDir_literalMutationString230019_failAssert0null230839_failAssert0_add234835_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("relative/rootpath.{tml");
                    StringWriter sw = new StringWriter();
                    compile.execute(null, "").close();
                    compile.execute(null, "").close();
                    TestUtil.getContents(root, "relative/paths.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230019 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230019_failAssert0null230839 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230019_failAssert0null230839_failAssert0_add234835 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/rootpath.{tml not found", expected.getMessage());
        }
    }

    public void testRelativePathsRootDir_literalMutationString230022_literalMutationString230271_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("rela]ive/rootpath.html");
            StringWriter sw = new StringWriter();
            compile.execute(sw, "").close();
            String o_testRelativePathsRootDir_literalMutationString230022__9 = TestUtil.getContents(root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230022_literalMutationString230271 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template rela]ive/rootpath.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsRootDir_literalMutationString230019_failAssert0_add230693_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("relative/rootpath.{tml");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230019 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230019_failAssert0_add230693 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/rootpath.{tml not found", expected.getMessage());
        }
    }

    public void testRelativePathsRootDir_add230035_literalMutationString230145_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile(",my[jr09D5Ri!vLMQOh,.?");
            StringWriter sw = new StringWriter();
            compile.execute(sw, "").close();
            String o_testRelativePathsRootDir_add230035__9 = TestUtil.getContents(root, "relative/paths.txt");
            String o_testRelativePathsRootDir_add230035__10 = TestUtil.getContents(root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsRootDir_add230035_literalMutationString230145 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ,my[jr09D5Ri!vLMQOh,.? not found", expected.getMessage());
        }
    }

    public void testRelativePathsRootDir_literalMutationString230021_failAssert0_add230702_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                mf.compile("oAdne!pXF-|Z0[@S#N!(I%");
                Mustache compile = mf.compile("oAdne!pXF-|Z0[@S#N!(I%");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230021 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230021_failAssert0_add230702 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template oAdne!pXF-|Z0[@S#N!(I% not found", expected.getMessage());
        }
    }

    public void testRelativePathsRootDir_literalMutationString230021_failAssert0_literalMutationString230380_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("uc9d?_1EkStc(0LM}cCl^+");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230021 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230021_failAssert0_literalMutationString230380 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template uc9d?_1EkStc(0LM}cCl^+ not found", expected.getMessage());
        }
    }

    public void testRelativePathsRootDir_literalMutationString230023_literalMutationString230228_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("%%isrT Z#S}Y?J3LcBAQXE");
            StringWriter sw = new StringWriter();
            compile.execute(sw, "b").close();
            String o_testRelativePathsRootDir_literalMutationString230023__9 = TestUtil.getContents(root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230023_literalMutationString230228 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template %%isrT Z#S}Y?J3LcBAQXE not found", expected.getMessage());
        }
    }

    public void testRelativePathsRootDir_literalMutationString230019_failAssert0null230839_failAssert0_literalMutationString232356_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("relative/rootpath.{tml");
                    StringWriter sw = new StringWriter();
                    compile.execute(null, "").close();
                    TestUtil.getContents(root, "rpelative/paths.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230019 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230019_failAssert0null230839 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230019_failAssert0null230839_failAssert0_literalMutationString232356 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/rootpath.{tml not found", expected.getMessage());
        }
    }

    public void testRelativePathsRootDir_literalMutationString230019_failAssert0_literalMutationString230361_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("relative/rootpath.{tml");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "/97Jo9[1:TtxuJ5>QU");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230019 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230019_failAssert0_literalMutationString230361 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/rootpath.{tml not found", expected.getMessage());
        }
    }

    public void testRelativePathsRootDir_literalMutationString230019_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("relative/rootpath.{tml");
            StringWriter sw = new StringWriter();
            compile.execute(sw, "").close();
            TestUtil.getContents(root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230019 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/rootpath.{tml not found", expected.getMessage());
        }
    }

    public void testRelativePathsRootDir_literalMutationString230019_failAssert0null230841_failAssert0_add234844_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("relative/rootpath.{tml");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, null);
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230019 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230019_failAssert0null230841 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230019_failAssert0null230841_failAssert0_add234844 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/rootpath.{tml not found", expected.getMessage());
        }
    }

    public void testRelativePathsRootDir_literalMutationString230021_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("oAdne!pXF-|Z0[@S#N!(I%");
            StringWriter sw = new StringWriter();
            compile.execute(sw, "").close();
            TestUtil.getContents(root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230021 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template oAdne!pXF-|Z0[@S#N!(I% not found", expected.getMessage());
        }
    }

    public void testRelativePathsRootDir_literalMutationString230019_failAssert0null230841_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("relative/rootpath.{tml");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230019 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230019_failAssert0null230841 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/rootpath.{tml not found", expected.getMessage());
        }
    }

    public void testRelativePathsRootDir_literalMutationString230019_failAssert0_add230690_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("relative/rootpath.{tml");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "");
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230019 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230019_failAssert0_add230690 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/rootpath.{tml not found", expected.getMessage());
        }
    }

    public void testRelativePathsRootDir_literalMutationString230030_failAssert0null230845_failAssert0_literalMutationString232489_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("relative/roo]path.html");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230030 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230030_failAssert0null230845 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230030_failAssert0null230845_failAssert0_literalMutationString232489 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/roo]path.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsRootDir_literalMutationString230021_failAssert0_add230706_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("oAdne!pXF-|Z0[@S#N!(I%");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230021 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230021_failAssert0_add230706 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template oAdne!pXF-|Z0[@S#N!(I% not found", expected.getMessage());
        }
    }

    public void testRelativePathsRootDir_literalMutationString230019_failAssert0null230841_failAssert0_literalMutationString232360_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("relative/root+ath.{tml");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230019 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230019_failAssert0null230841 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230019_failAssert0null230841_failAssert0_literalMutationString232360 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/root+ath.{tml not found", expected.getMessage());
        }
    }

    public void testRelativePathsRootDir_literalMutationString230022_literalMutationString230271_failAssert0_add235611_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("rela]ive/rootpath.html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                String o_testRelativePathsRootDir_literalMutationString230022__9 = TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230022_literalMutationString230271 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230022_literalMutationString230271_failAssert0_add235611 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template rela]ive/rootpath.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsRootDir_literalMutationString230021_failAssert0_literalMutationString230378_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("oAdnne!pXF-|Z0[@S#N!(I%");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230021 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230021_failAssert0_literalMutationString230378 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template oAdnne!pXF-|Z0[@S#N!(I% not found", expected.getMessage());
        }
    }

    public void testRelativePathsRootDir_literalMutationString230022_literalMutationString230271_failAssert0_literalMutationString233853_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("rela]ive/rootpath.html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                String o_testRelativePathsRootDir_literalMutationString230022__9 = TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230022_literalMutationString230271 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsRootDir_literalMutationString230022_literalMutationString230271_failAssert0_literalMutationString233853 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template rela]ive/rootpath.html not found", expected.getMessage());
        }
    }

    public void testPathsWithExtension_literalMutationString55226_add55854_literalMutationString56500_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile(" R[bh&;lV1>eYKG5^y zht!");
            StringWriter sw = new StringWriter();
            compile.execute(sw, "!").close();
            String o_testPathsWithExtension_literalMutationString55226__9 = TestUtil.getContents(root, "relative/paths.txt");
            sw.toString();
            compile.getName();
            junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55226_add55854_literalMutationString56500 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  R[bh&;lV1>eYKG5^y zht! not found", expected.getMessage());
        }
    }

    public void testPathsWithExtension_add55236_remove55957_literalMutationString56836_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("Pr(gz,76X]N!A<FroFeuFW]");
            StringWriter sw = new StringWriter();
            compile.execute(sw, "").close();
            compile.execute(sw, "").close();
            String o_testPathsWithExtension_add55236__11 = TestUtil.getContents(this.root, "relative/paths.txt");
            junit.framework.TestCase.fail("testPathsWithExtension_add55236_remove55957_literalMutationString56836 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Pr(gz,76X]N!A<FroFeuFW] not found", expected.getMessage());
        }
    }

    public void testPathsWithExtension_literalMutationString55224_failAssert0_literalMutationString55616_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("KLa>=9E9{Q-)eO3h-}Q`fM+");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55224 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55224_failAssert0_literalMutationString55616 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template KLa>=9E9{Q-)eO3h-}Q`fM+ not found", expected.getMessage());
        }
    }

    public void testPathsWithExtension_literalMutationString55232_failAssert0_add55915_failAssert0_literalMutationString57934_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("re lative/extension.html");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "relative/paths.&txt");
                    TestUtil.getContents(root, "relative/paths.&txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55232 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55232_failAssert0_add55915 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55232_failAssert0_add55915_failAssert0_literalMutationString57934 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template re lative/extension.html not found", expected.getMessage());
        }
    }

    public void testPathsWithExtension_literalMutationString55224_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("KLa>=9E9{Q-)eO3h-}Q`fM+");
            StringWriter sw = new StringWriter();
            compile.execute(sw, "").close();
            TestUtil.getContents(root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55224 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template KLa>=9E9{Q-)eO3h-}Q`fM+ not found", expected.getMessage());
        }
    }

    public void testPathsWithExtension_literalMutationString55224_failAssert0null56060_failAssert0_add60619_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("KLa>=9E9{Q-)eO3h-}Q`fM+");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55224 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55224_failAssert0null56060 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55224_failAssert0null56060_failAssert0_add60619 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template KLa>=9E9{Q-)eO3h-}Q`fM+ not found", expected.getMessage());
        }
    }

    public void testPathsWithExtension_literalMutationString55230_failAssert0_literalMutationString55537_failAssert0null61394_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("/.0q=x|!V;!|nQsqqL=-OXR");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55230 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55230_failAssert0_literalMutationString55537 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55230_failAssert0_literalMutationString55537_failAssert0null61394 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template /.0q=x|!V;!|nQsqqL=-OXR not found", expected.getMessage());
        }
    }

    public void testPathsWithExtension_literalMutationString55227_literalMutationString55459_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("[elative/extension.html");
            StringWriter sw = new StringWriter();
            compile.execute(sw, "page1.txt").close();
            String o_testPathsWithExtension_literalMutationString55227__9 = TestUtil.getContents(root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55227_literalMutationString55459 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [elative/extension.html not found", expected.getMessage());
        }
    }

    public void testPathsWithExtension_literalMutationString55226_add55844_literalMutationString57138_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache o_testPathsWithExtension_literalMutationString55226_add55844__3 = mf.compile("relative/|xtension.html");
            Mustache compile = mf.compile("relative/extension.html");
            StringWriter sw = new StringWriter();
            compile.execute(sw, "!").close();
            String o_testPathsWithExtension_literalMutationString55226__9 = TestUtil.getContents(root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55226_add55844_literalMutationString57138 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/|xtension.html not found", expected.getMessage());
        }
    }

    public void testPathsWithExtension_literalMutationString55224_failAssert0null56060_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("KLa>=9E9{Q-)eO3h-}Q`fM+");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55224 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55224_failAssert0null56060 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template KLa>=9E9{Q-)eO3h-}Q`fM+ not found", expected.getMessage());
        }
    }

    public void testPathsWithExtension_literalMutationString55224_failAssert0null56058_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("KLa>=9E9{Q-)eO3h-}Q`fM+");
                StringWriter sw = new StringWriter();
                compile.execute(null, "").close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55224 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55224_failAssert0null56058 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template KLa>=9E9{Q-)eO3h-}Q`fM+ not found", expected.getMessage());
        }
    }

    public void testPathsWithExtension_add55238_remove55958_literalMutationString56947_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("xwv{.z,,W1*fJ*P%,jD)[pH");
            StringWriter sw = new StringWriter();
            String o_testPathsWithExtension_add55238__9 = TestUtil.getContents(root, "relative/paths.txt");
            String o_testPathsWithExtension_add55238__10 = TestUtil.getContents(root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testPathsWithExtension_add55238_remove55958_literalMutationString56947 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template xwv{.z,,W1*fJ*P%,jD)[pH not found", expected.getMessage());
        }
    }

    public void testPathsWithExtension_add55235_remove55964_literalMutationString56875_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache o_testPathsWithExtension_add55235__3 = mf.compile("relative/extension.html");
            Mustache compile = mf.compile("n`>&v;^{gy&[L!NQ@*$T`ar");
            StringWriter sw = new StringWriter();
            compile.execute(sw, "").close();
            String o_testPathsWithExtension_add55235__10 = TestUtil.getContents(this.root, "relative/paths.txt");
            junit.framework.TestCase.fail("testPathsWithExtension_add55235_remove55964_literalMutationString56875 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template n`>&v;^{gy&[L!NQ@*$T`ar not found", expected.getMessage());
        }
    }

    public void testPathsWithExtension_literalMutationString55224_failAssert0null56060_failAssert0_literalMutationString58876_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("[Z,F^=-?/`H]TI+,ZAV190>");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55224 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55224_failAssert0null56060 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55224_failAssert0null56060_failAssert0_literalMutationString58876 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [Z,F^=-?/`H]TI+,ZAV190> not found", expected.getMessage());
        }
    }

    public void testPathsWithExtension_literalMutationString55224_failAssert0_add55919_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                mf.compile("KLa>=9E9{Q-)eO3h-}Q`fM+");
                Mustache compile = mf.compile("KLa>=9E9{Q-)eO3h-}Q`fM+");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55224 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55224_failAssert0_add55919 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template KLa>=9E9{Q-)eO3h-}Q`fM+ not found", expected.getMessage());
        }
    }

    public void testPathsWithExtension_literalMutationString55222_failAssert0_literalMutationString55585_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("rel]aive/extension.html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55222 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55222_failAssert0_literalMutationString55585 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template rel]aive/extension.html not found", expected.getMessage());
        }
    }

    public void testPathsWithExtension_literalMutationString55230_failAssert0_literalMutationString55537_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("/.0q=x|!V;!|nQsqqL=-OXR");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "relativeWpaths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55230 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55230_failAssert0_literalMutationString55537 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template /.0q=x|!V;!|nQsqqL=-OXR not found", expected.getMessage());
        }
    }

    public void testPathsWithExtension_literalMutationString55224_failAssert0_add55924_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("KLa>=9E9{Q-)eO3h-}Q`fM+");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55224 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testPathsWithExtension_literalMutationString55224_failAssert0_add55924 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template KLa>=9E9{Q-)eO3h-}Q`fM+ not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString156157_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("$pw[*@ ?)HtOO6kvZ=S,:uo!msk");
            StringWriter sw = new StringWriter();
            compile.execute(sw, new Object() {
                Function i = new TemplateFunction() {
                    @Override
                    public String apply(String s) {
                        return s;
                    }
                };
            }).close();
            TestUtil.getContents(root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template $pw[*@ ?)HtOO6kvZ=S,:uo!msk not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString156158_failAssert0_add156773_failAssert0_literalMutationString158401_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("rK?^0(fez");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, new Object() {
                        Function i = new TemplateFunction() {
                            @Override
                            public String apply(String s) {
                                return s;
                            }
                        };
                    }).close();
                    TestUtil.getContents(root, "relative/paths.txt");
                    TestUtil.getContents(root, "relative/paths.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156158 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156158_failAssert0_add156773 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156158_failAssert0_add156773_failAssert0_literalMutationString158401 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template rK?^0(fez not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_add156172_literalMutationString156292_failAssert0_literalMutationString159114_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("sm(hVEX[Eb1dwl.8]XpF@z-$3rw");
                StringWriter sw = new StringWriter();
                compile.execute(sw, new Object() {
                    Function i = new TemplateFunction() {
                        @Override
                        public String apply(String s) {
                            return s;
                        }
                    };
                }).close();
                sw.toString();
                String o_testRelativePathsTemplateFunction_add156172__20 = TestUtil.getContents(root, ".xV]]PNf<V`e4`R%&!");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add156172_literalMutationString156292 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add156172_literalMutationString156292_failAssert0_literalMutationString159114 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template sm(hVEX[Eb1dwl.8]XpF@z-$3rw not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString156157_failAssert0_literalMutationString156418_failAssert0_add161265_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    mf.compile("$pw[*@ ?)HtOO6kvZ=S,:uo!8sk");
                    Mustache compile = mf.compile("$pw[*@ ?)HtOO6kvZ=S,:uo!8sk");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, new Object() {
                        Function i = new TemplateFunction() {
                            @Override
                            public String apply(String s) {
                                return s;
                            }
                        };
                    }).close();
                    TestUtil.getContents(root, "relative/paths.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157_failAssert0_literalMutationString156418 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157_failAssert0_literalMutationString156418_failAssert0_add161265 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template $pw[*@ ?)HtOO6kvZ=S,:uo!8sk not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString156157_failAssert0null156863_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("$pw[*@ ?)HtOO6kvZ=S,:uo!msk");
                StringWriter sw = new StringWriter();
                compile.execute(null, new Object() {
                    Function i = new TemplateFunction() {
                        @Override
                        public String apply(String s) {
                            return s;
                        }
                    };
                }).close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157_failAssert0null156863 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template $pw[*@ ?)HtOO6kvZ=S,:uo!msk not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString156157_failAssert0null156864_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("$pw[*@ ?)HtOO6kvZ=S,:uo!msk");
                StringWriter sw = new StringWriter();
                compile.execute(sw, new Object() {
                    Function i = new TemplateFunction() {
                        @Override
                        public String apply(String s) {
                            return s;
                        }
                    };
                }).close();
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157_failAssert0null156864 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template $pw[*@ ?)HtOO6kvZ=S,:uo!msk not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString156155_remove156815_add159934() throws IOException {
        MustacheFactory mf = createMustacheFactory();
        TestCase.assertNull(((DefaultMustacheFactory) (mf)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (mf)).getRecursionLimit())));
        Mustache compile = mf.compile("");
        TestCase.assertFalse(((DefaultMustache) (compile)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (compile)).getName());
        StringWriter sw = new StringWriter();
        Writer o_testRelativePathsTemplateFunction_literalMutationString156155_remove156815_add159934__7 = compile.execute(sw, new Object() {
            Function i = new TemplateFunction() {
                @Override
                public String apply(String s) {
                    return s;
                }
            };
        });
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testRelativePathsTemplateFunction_literalMutationString156155_remove156815_add159934__7)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testRelativePathsTemplateFunction_literalMutationString156155_remove156815_add159934__7)).toString());
        compile.execute(sw, new Object() {
            Function i = new TemplateFunction() {
                @Override
                public String apply(String s) {
                    return s;
                }
            };
        }).close();
        String o_testRelativePathsTemplateFunction_literalMutationString156155__19 = TestUtil.getContents(root, "relative/paths.txt");
        TestCase.assertEquals("test", o_testRelativePathsTemplateFunction_literalMutationString156155__19);
        sw.toString();
        TestCase.assertNull(((DefaultMustacheFactory) (mf)).getExecutorService());
        TestCase.assertEquals(100, ((int) (((DefaultMustacheFactory) (mf)).getRecursionLimit())));
        TestCase.assertFalse(((DefaultMustache) (compile)).isRecursive());
        TestCase.assertEquals("", ((DefaultMustache) (compile)).getName());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\nbox.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringBuffer) (((StringWriter) (o_testRelativePathsTemplateFunction_literalMutationString156155_remove156815_add159934__7)).getBuffer())).toString());
        TestCase.assertEquals("box.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\nbox.html\nclassloader.html\nclient.html\nclient.txt\ncom\ncompiletest.mustache\ncomplex.html\ncomplex.txt\ndiv.html\nfallback\nfdbcli.mustache\nfdbcli.txt\nfdbcli2.mustache\nfdbcli2.txt\nfdbcli3.mustache\nfdbcli3.txt\nfollow.html\nfollownomenu.html\nfollownomenu.txt\nfunctions\nhogan.json\nmain.html\nmethod.html\nmultiple_recursive_partials.html\nmultipleextensions.html\nmultipleextensions.txt\nnested_inheritance.html\nnested_inheritance.txt\nnested_partials_template.html\noverrideextension.html\nparentreplace.html\npartialintemplatefunction.html\npartialsub.html\npartialsubpartial.html\npartialsubpartial.txt\npartialsuper.html\npath\npretranslate.html\npsauxwww.mustache\npsauxwww.txt\nrelative\nreplace.html\nreplace.txt\nsinglereplace.html\nspec\nsub.html\nsub.txt\nsubblockchild1.html\nsubblockchild1.txt\nsubblockchild2.html\nsubblockchild2.txt\nsubblocksuper.html\nsubsub.html\nsubsub.txt\nsubsubchild1.html\nsubsubchild1.txt\nsubsubchild2.html\nsubsubchild2.txt\nsubsubchild3.html\nsubsubchild3.txt\nsubsubmiddle.html\nsubsubsuper.html\nsuper.html\ntemplate.html\ntemplate.mustache\ntemplates_filepath\ntemplates.jar\ntoomany.html\ntweetbox.html\nuninterestingpartial.html\n", ((StringWriter) (o_testRelativePathsTemplateFunction_literalMutationString156155_remove156815_add159934__7)).toString());
        TestCase.assertEquals("test", o_testRelativePathsTemplateFunction_literalMutationString156155__19);
    }

    public void testRelativePathsTemplateFunctionnull156178_failAssert0_literalMutationString156367_failAssert0_add161069_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("VJ-z^ry2oT#;s@|^EK ]hV.U`5D");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, new Object() {
                        Function i = new TemplateFunction() {
                            @Override
                            public String apply(String s) {
                                return s;
                            }
                        };
                    }).close();
                    compile.execute(sw, new Object() {
                        Function i = new TemplateFunction() {
                            @Override
                            public String apply(String s) {
                                return s;
                            }
                        };
                    }).close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsTemplateFunctionnull156178 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testRelativePathsTemplateFunctionnull156178_failAssert0_literalMutationString156367 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunctionnull156178_failAssert0_literalMutationString156367_failAssert0_add161069 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template VJ-z^ry2oT#;s@|^EK ]hV.U`5D not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunctionnull156178_failAssert0_literalMutationString156367_failAssert0_literalMutationString159083_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("VJ-z^ry2oT#;s@|^EK ]h`V.U`5D");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, new Object() {
                        Function i = new TemplateFunction() {
                            @Override
                            public String apply(String s) {
                                return s;
                            }
                        };
                    }).close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsTemplateFunctionnull156178 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testRelativePathsTemplateFunctionnull156178_failAssert0_literalMutationString156367 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunctionnull156178_failAssert0_literalMutationString156367_failAssert0_literalMutationString159083 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template VJ-z^ry2oT#;s@|^EK ]h`V.U`5D not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString156157_failAssert0null156863_failAssert0_add160244_failAssert0() throws IOException {
        try {
            {
                {
                    createMustacheFactory();
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("$pw[*@ ?)HtOO6kvZ=S,:uo!msk");
                    StringWriter sw = new StringWriter();
                    compile.execute(null, new Object() {
                        Function i = new TemplateFunction() {
                            @Override
                            public String apply(String s) {
                                return s;
                            }
                        };
                    }).close();
                    TestUtil.getContents(root, "relative/paths.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157_failAssert0null156863 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157_failAssert0null156863_failAssert0_add160244 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template $pw[*@ ?)HtOO6kvZ=S,:uo!msk not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_add156167_literalMutationString156284_failAssert0() throws IOException {
        try {
            DefaultMustacheFactory o_testRelativePathsTemplateFunction_add156167__1 = createMustacheFactory();
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("c_i;==[}eql{[r [P46,oj82Bpn");
            StringWriter sw = new StringWriter();
            compile.execute(sw, new Object() {
                Function i = new TemplateFunction() {
                    @Override
                    public String apply(String s) {
                        return s;
                    }
                };
            }).close();
            String o_testRelativePathsTemplateFunction_add156167__20 = TestUtil.getContents(root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add156167_literalMutationString156284 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template c_i;==[}eql{[r [P46,oj82Bpn not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString156158_failAssert0_literalMutationString156509_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile(" does not exist");
                StringWriter sw = new StringWriter();
                compile.execute(sw, new Object() {
                    Function i = new TemplateFunction() {
                        @Override
                        public String apply(String s) {
                            return s;
                        }
                    };
                }).close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156158 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156158_failAssert0_literalMutationString156509 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString156158_failAssert0null156888_failAssert0_literalMutationString158010_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("page1 .txt");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, new Object() {
                        Function i = new TemplateFunction() {
                            @Override
                            public String apply(String s) {
                                return s;
                            }
                        };
                    }).close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156158 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156158_failAssert0null156888 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156158_failAssert0null156888_failAssert0_literalMutationString158010 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template page1 .txt not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_add156169_literalMutationString156258_failAssert0_literalMutationString158777_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("=HSWWF`=`8k!,u=PqJfc=8 q+;c");
                StringWriter sw = new StringWriter();
                compile.execute(sw, new Object() {
                    Function i = new TemplateFunction() {
                        @Override
                        public String apply(String s) {
                            return s;
                        }
                    };
                }).close();
                compile.execute(sw, new Object() {
                    Function i = new TemplateFunction() {
                        @Override
                        public String apply(String s) {
                            return s;
                        }
                    };
                }).close();
                String o_testRelativePathsTemplateFunction_add156169__31 = TestUtil.getContents(root, "relative/paths.Wtxt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add156169_literalMutationString156258 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add156169_literalMutationString156258_failAssert0_literalMutationString158777 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template =HSWWF`=`8k!,u=PqJfc=8 q+;c not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString156157_failAssert0_literalMutationString156418_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("$pw[*@ ?)HtOO6kvZ=S,:uo!8sk");
                StringWriter sw = new StringWriter();
                compile.execute(sw, new Object() {
                    Function i = new TemplateFunction() {
                        @Override
                        public String apply(String s) {
                            return s;
                        }
                    };
                }).close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157_failAssert0_literalMutationString156418 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template $pw[*@ ?)HtOO6kvZ=S,:uo!8sk not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_add156167null156831_failAssert0_literalMutationString159235_failAssert0() throws IOException {
        try {
            {
                DefaultMustacheFactory o_testRelativePathsTemplateFunction_add156167__1 = createMustacheFactory();
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("4tQA_gK@CEZ$An()VfZ/6;ex>fP");
                StringWriter sw = new StringWriter();
                compile.execute(sw, new Object() {
                    Function i = new TemplateFunction() {
                        @Override
                        public String apply(String s) {
                            return s;
                        }
                    };
                }).close();
                String o_testRelativePathsTemplateFunction_add156167__20 = TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add156167null156831 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add156167null156831_failAssert0_literalMutationString159235 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 4tQA_gK@CEZ$An()VfZ/6;ex>fP not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_add156172_literalMutationString156292_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("sm(hVEX[Eb1dwl.8]XpF@z-$3rw");
            StringWriter sw = new StringWriter();
            compile.execute(sw, new Object() {
                Function i = new TemplateFunction() {
                    @Override
                    public String apply(String s) {
                        return s;
                    }
                };
            }).close();
            sw.toString();
            String o_testRelativePathsTemplateFunction_add156172__20 = TestUtil.getContents(root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add156172_literalMutationString156292 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template sm(hVEX[Eb1dwl.8]XpF@z-$3rw not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString156157_failAssert0null156864_failAssert0_add161154_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("$pw[*@ ?)HtOO6kvZ=S,:uo!msk");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, new Object() {
                        Function i = new TemplateFunction() {
                            @Override
                            public String apply(String s) {
                                return s;
                            }
                        };
                    }).close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157_failAssert0null156864 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157_failAssert0null156864_failAssert0_add161154 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template $pw[*@ ?)HtOO6kvZ=S,:uo!msk not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString156157_failAssert0_literalMutationString156423_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("$pw[*@ ?)HtOO6kvZ=S,:uo!msk");
                StringWriter sw = new StringWriter();
                compile.execute(sw, new Object() {
                    Function i = new TemplateFunction() {
                        @Override
                        public String apply(String s) {
                            return s;
                        }
                    };
                }).close();
                TestUtil.getContents(root, "page1.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157_failAssert0_literalMutationString156423 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template $pw[*@ ?)HtOO6kvZ=S,:uo!msk not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_add156172_literalMutationString156292_failAssert0_add161088_failAssert0() throws IOException {
        try {
            {
                createMustacheFactory();
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("sm(hVEX[Eb1dwl.8]XpF@z-$3rw");
                StringWriter sw = new StringWriter();
                compile.execute(sw, new Object() {
                    Function i = new TemplateFunction() {
                        @Override
                        public String apply(String s) {
                            return s;
                        }
                    };
                }).close();
                sw.toString();
                String o_testRelativePathsTemplateFunction_add156172__20 = TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add156172_literalMutationString156292 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add156172_literalMutationString156292_failAssert0_add161088 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template sm(hVEX[Eb1dwl.8]XpF@z-$3rw not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString156157_failAssert0null156863_failAssert0_literalMutationString157972_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("$pw[*@ ?)tOO6kvZ=S,:uo!msk");
                    StringWriter sw = new StringWriter();
                    compile.execute(null, new Object() {
                        Function i = new TemplateFunction() {
                            @Override
                            public String apply(String s) {
                                return s;
                            }
                        };
                    }).close();
                    TestUtil.getContents(root, "relative/paths.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157_failAssert0null156863 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157_failAssert0null156863_failAssert0_literalMutationString157972 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template $pw[*@ ?)tOO6kvZ=S,:uo!msk not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_add156167_literalMutationString156284_failAssert0_literalMutationString159399_failAssert0() throws IOException {
        try {
            {
                DefaultMustacheFactory o_testRelativePathsTemplateFunction_add156167__1 = createMustacheFactory();
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("c_i;==u}eql{[r [P46,oj82Bpn");
                StringWriter sw = new StringWriter();
                compile.execute(sw, new Object() {
                    Function i = new TemplateFunction() {
                        @Override
                        public String apply(String s) {
                            return s;
                        }
                    };
                }).close();
                String o_testRelativePathsTemplateFunction_add156167__20 = TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add156167_literalMutationString156284 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add156167_literalMutationString156284_failAssert0_literalMutationString159399 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template c_i;==u}eql{[r [P46,oj82Bpn not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString156158_failAssert0_add156771_failAssert0_literalMutationString158391_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile(" does not exist");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, new Object() {
                        Function i = new TemplateFunction() {
                            @Override
                            public String apply(String s) {
                                return s;
                            }
                        };
                    }).close();
                    compile.execute(sw, new Object() {
                        Function i = new TemplateFunction() {
                            @Override
                            public String apply(String s) {
                                return s;
                            }
                        };
                    }).close();
                    TestUtil.getContents(root, "relative/paths.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156158 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156158_failAssert0_add156771 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156158_failAssert0_add156771_failAssert0_literalMutationString158391 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString156155_remove156815_literalMutationString157705_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("<");
            StringWriter sw = new StringWriter();
            compile.execute(sw, new Object() {
                Function i = new TemplateFunction() {
                    @Override
                    public String apply(String s) {
                        return s;
                    }
                };
            }).close();
            String o_testRelativePathsTemplateFunction_literalMutationString156155__19 = TestUtil.getContents(root, "relative/paths.txt");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156155_remove156815_literalMutationString157705 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template < not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString156157_failAssert0_add156715_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("$pw[*@ ?)HtOO6kvZ=S,:uo!msk");
                StringWriter sw = new StringWriter();
                compile.execute(sw, new Object() {
                    Function i = new TemplateFunction() {
                        @Override
                        public String apply(String s) {
                            return s;
                        }
                    };
                }).close();
                compile.execute(sw, new Object() {
                    Function i = new TemplateFunction() {
                        @Override
                        public String apply(String s) {
                            return s;
                        }
                    };
                }).close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157_failAssert0_add156715 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template $pw[*@ ?)HtOO6kvZ=S,:uo!msk not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_add156167_literalMutationString156284_failAssert0null162063_failAssert0() throws IOException {
        try {
            {
                DefaultMustacheFactory o_testRelativePathsTemplateFunction_add156167__1 = createMustacheFactory();
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("c_i;==[}eql{[r [P46,oj82Bpn");
                StringWriter sw = new StringWriter();
                compile.execute(sw, new Object() {
                    Function i = new TemplateFunction() {
                        @Override
                        public String apply(String s) {
                            return s;
                        }
                    };
                }).close();
                String o_testRelativePathsTemplateFunction_add156167__20 = TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add156167_literalMutationString156284 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add156167_literalMutationString156284_failAssert0null162063 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template c_i;==[}eql{[r [P46,oj82Bpn not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunctionnull156178_failAssert0_literalMutationString156367_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("VJ-z^ry2oT#;s@|^EK ]hV.U`5D");
                StringWriter sw = new StringWriter();
                compile.execute(sw, new Object() {
                    Function i = new TemplateFunction() {
                        @Override
                        public String apply(String s) {
                            return s;
                        }
                    };
                }).close();
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunctionnull156178 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunctionnull156178_failAssert0_literalMutationString156367 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template VJ-z^ry2oT#;s@|^EK ]hV.U`5D not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString156157_failAssert0null156863_failAssert0null161685_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("$pw[*@ ?)HtOO6kvZ=S,:uo!msk");
                    StringWriter sw = new StringWriter();
                    compile.execute(null, new Object() {
                        Function i = new TemplateFunction() {
                            @Override
                            public String apply(String s) {
                                return s;
                            }
                        };
                    }).close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157_failAssert0null156863 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157_failAssert0null156863_failAssert0null161685 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template $pw[*@ ?)HtOO6kvZ=S,:uo!msk not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString156157_failAssert0_add156716_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("$pw[*@ ?)HtOO6kvZ=S,:uo!msk");
                StringWriter sw = new StringWriter();
                compile.execute(sw, new Object() {
                    Function i = new TemplateFunction() {
                        @Override
                        public String apply(String s) {
                            return s;
                        }
                    };
                });
                compile.execute(sw, new Object() {
                    Function i = new TemplateFunction() {
                        @Override
                        public String apply(String s) {
                            return s;
                        }
                    };
                }).close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157_failAssert0_add156716 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template $pw[*@ ?)HtOO6kvZ=S,:uo!msk not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_add156171_literalMutationString156305_failAssert0_literalMutationString159157_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile(" does not exist");
                StringWriter sw = new StringWriter();
                compile.execute(sw, new Object() {
                    Function i = new TemplateFunction() {
                        @Override
                        public String apply(String s) {
                            return s;
                        }
                    };
                }).close();
                String o_testRelativePathsTemplateFunction_add156171__19 = TestUtil.getContents(root, "relative/paths.txt");
                String o_testRelativePathsTemplateFunction_add156171__20 = TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add156171_literalMutationString156305 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add156171_literalMutationString156305_failAssert0_literalMutationString159157 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString156157_failAssert0_add156718_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("$pw[*@ ?)HtOO6kvZ=S,:uo!msk");
                StringWriter sw = new StringWriter();
                compile.execute(sw, new Object() {
                    Function i = new TemplateFunction() {
                        @Override
                        public String apply(String s) {
                            return s;
                        }
                    };
                }).close();
                TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157_failAssert0_add156718 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template $pw[*@ ?)HtOO6kvZ=S,:uo!msk not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString156157_failAssert0_literalMutationString156418_failAssert0_literalMutationString159366_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("$pw[*@ ?)HtOO6kvZ=S,:uo!8sk");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, new Object() {
                        Function i = new TemplateFunction() {
                            @Override
                            public String apply(String s) {
                                return s;
                            }
                        };
                    }).close();
                    TestUtil.getContents(root, "]wYf!_Np{wMm*vKLq%");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157_failAssert0_literalMutationString156418 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157_failAssert0_literalMutationString156418_failAssert0_literalMutationString159366 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template $pw[*@ ?)HtOO6kvZ=S,:uo!8sk not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_literalMutationString156157_failAssert0null156864_failAssert0null162011_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("$pw[*@ ?)HtOO6kvZ=S,:uo!msk");
                    StringWriter sw = new StringWriter();
                    compile.execute(null, new Object() {
                        Function i = new TemplateFunction() {
                            @Override
                            public String apply(String s) {
                                return s;
                            }
                        };
                    }).close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157_failAssert0null156864 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_literalMutationString156157_failAssert0null156864_failAssert0null162011 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template $pw[*@ ?)HtOO6kvZ=S,:uo!msk not found", expected.getMessage());
        }
    }

    public void testRelativePathsTemplateFunction_add156167_literalMutationString156284_failAssert0_add161287_failAssert0() throws IOException {
        try {
            {
                DefaultMustacheFactory o_testRelativePathsTemplateFunction_add156167__1 = createMustacheFactory();
                MustacheFactory mf = createMustacheFactory();
                mf.compile("c_i;==[}eql{[r [P46,oj82Bpn");
                Mustache compile = mf.compile("c_i;==[}eql{[r [P46,oj82Bpn");
                StringWriter sw = new StringWriter();
                compile.execute(sw, new Object() {
                    Function i = new TemplateFunction() {
                        @Override
                        public String apply(String s) {
                            return s;
                        }
                    };
                }).close();
                String o_testRelativePathsTemplateFunction_add156167__20 = TestUtil.getContents(root, "relative/paths.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add156167_literalMutationString156284 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsTemplateFunction_add156167_literalMutationString156284_failAssert0_add161287 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template c_i;==[}eql{[r [P46,oj82Bpn not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_add207547_literalMutationString207564_failAssert0_add208205_failAssert0() throws IOException {
        try {
            {
                createMustacheFactory();
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile("QoQ[`v0 !%>spv1gcd0Z$y");
                }
                junit.framework.TestCase.fail("testRelativePathFail_add207547_literalMutationString207564 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_add207547_literalMutationString207564_failAssert0_add208205 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template QoQ[`v0 !%>spv1gcd0Z$y not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207546_literalMutationString207591_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            {
                Mustache compile = mf.compile(":a>#-2M7Oih]s?[T6!6ZR!");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207546_literalMutationString207591 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template :a>#-2M7Oih]s?[T6!6ZR! not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207546_literalMutationString207595_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            {
                Mustache compile = mf.compile(":a>#-2M7Oih]s?V6!6ZR!");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207546_literalMutationString207595 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template :a>#-2M7Oih]s?V6!6ZR! not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207546_literalMutationString207593_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            {
                Mustache compile = mf.compile("`;(`Y9hTBe=+d%z{xcWNAe");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207546_literalMutationString207593 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template `;(`Y9hTBe=+d%z{xcWNAe not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_add207547_literalMutationString207565_failAssert0_add208308_failAssert0() throws IOException {
        try {
            {
                createMustacheFactory();
                createMustacheFactory();
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile("relative/pathfail.]html");
                }
                junit.framework.TestCase.fail("testRelativePathFail_add207547_literalMutationString207565 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_add207547_literalMutationString207565_failAssert0_add208308 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/pathfail.]html not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207545_literalMutationString207587_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            {
                Mustache compile = mf.compile(" does not exist");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207545_literalMutationString207587 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_add207548_literalMutationString207568_failAssert0null208366_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    mf.compile("5t@aB`3]$igu0z)y{<bZy(");
                    Mustache compile = mf.compile(null);
                }
                junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207568 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207568_failAssert0null208366 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
        }
    }

    public void testRelativePathFail_literalMutationString207544_literalMutationString207604_failAssert0_add208342_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile("%gnE-/]_+aDLH)14tSDJ(N");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207544_literalMutationString207604 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207544_literalMutationString207604_failAssert0_add208342 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template %gnE-/]_+aDLH)14tSDJ(N not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_add207548_literalMutationString207577_failAssert0_literalMutationString208079_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    mf.compile("5]faQY*w#wjdP0(bwV#02.");
                    Mustache compile = mf.compile("relative/pahfail.html");
                }
                junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207577 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207577_failAssert0_literalMutationString208079 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 5]faQY*w#wjdP0(bwV#02. not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207542_literalMutationString207578_failAssert0_literalMutationString207966_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile("mMu]B[ $XkEQFMs0>..eUS?");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207578 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207578_failAssert0_literalMutationString207966 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template mMu]B[ $XkEQFMs0>..eUS? not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207544_literalMutationString207605_failAssert0_literalMutationString207881_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile("}0 !E{$>Wz&TJ/^iHv1,H#h");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207544_literalMutationString207605 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207544_literalMutationString207605_failAssert0_literalMutationString207881 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template }0 !E{$>Wz&TJ/^iHv1,H#h not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_add207548_literalMutationString207576_failAssert0_literalMutationString207855_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    mf.compile("DZB$(Obcy6k]i`NvD[re&,");
                    Mustache compile = mf.compile("relative/pathBfail.html");
                }
                junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207576 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207576_failAssert0_literalMutationString207855 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template DZB$(Obcy6k]i`NvD[re&, not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207546_literalMutationString207594_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            {
                Mustache compile = mf.compile(":a>#-2ML7Oih]s?[V6!6ZR!");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207546_literalMutationString207594 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template :a>#-2ML7Oih]s?[V6!6ZR! not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207546_literalMutationString207593_failAssert0_literalMutationString207934_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile("`;(`Y9hTBe=md%z{xcWNAe");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207546_literalMutationString207593 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207546_literalMutationString207593_failAssert0_literalMutationString207934 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template `;(`Y9hTBe=md%z{xcWNAe not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207542_literalMutationString207582_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            {
                Mustache compile = mf.compile("relative/pathfail>E.html");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207582 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/pathfail>E.html not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207542_literalMutationString207581_failAssert0_literalMutationString207962_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile("relative/pat7failE.%tml");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207581 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207581_failAssert0_literalMutationString207962 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/pat7failE.%tml not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_add207548_literalMutationString207568_failAssert0_literalMutationString207850_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    mf.compile("5t@aB`3]$igu0z)y{<bZy(");
                    Mustache compile = mf.compile("FlUB4-x%$szQ)Y_r4k_j{F");
                }
                junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207568 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207568_failAssert0_literalMutationString207850 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
        }
    }

    public void testRelativePathFail_add207547_literalMutationString207564_failAssert0_literalMutationString207791_failAssert0() throws IOException {
        try {
            {
                createMustacheFactory();
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile("QoQ[`G0 !%>spv1gcd0Z$y");
                }
                junit.framework.TestCase.fail("testRelativePathFail_add207547_literalMutationString207564 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_add207547_literalMutationString207564_failAssert0_literalMutationString207791 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template QoQ[`G0 !%>spv1gcd0Z$y not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207544_literalMutationString207604_failAssert0_literalMutationString208099_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile("%nE-/]_+aDLH)14tSDJ(N");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207544_literalMutationString207604 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207544_literalMutationString207604_failAssert0_literalMutationString208099 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template %nE-/]_+aDLH)14tSDJ(N not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207546_literalMutationString207591_failAssert0_add208260_failAssert0() throws IOException {
        try {
            {
                createMustacheFactory();
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile(":a>#-2M7Oih]s?[T6!6ZR!");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207546_literalMutationString207591 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207546_literalMutationString207591_failAssert0_add208260 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template :a>#-2M7Oih]s?[T6!6ZR! not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207546_literalMutationString207591_failAssert0_add208261_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    mf.compile(":a>#-2M7Oih]s?[T6!6ZR!");
                    Mustache compile = mf.compile(":a>#-2M7Oih]s?[T6!6ZR!");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207546_literalMutationString207591 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207546_literalMutationString207591_failAssert0_add208261 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template :a>#-2M7Oih]s?[T6!6ZR! not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_add207548_literalMutationString207575_failAssert0_literalMutationString208066_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    mf.compile("nm=lu#o<?e?B^D8D=DSVKK");
                    Mustache compile = mf.compile("relative/phthfail.html");
                }
                junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207575 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207575_failAssert0_literalMutationString208066 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template nm=lu#o<?e?B^D8D=DSVKK not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207545_literalMutationString207587_failAssert0_literalMutationString207913_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile(" doesD not exist");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207545_literalMutationString207587 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207545_literalMutationString207587_failAssert0_literalMutationString207913 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  doesD not exist not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207542_literalMutationString207583_failAssert0_literalMutationString207972_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile("relatie/pathfailE.h[ml");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207583 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207583_failAssert0_literalMutationString207972 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relatie/pathfailE.h[ml not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207542_literalMutationString207580_failAssert0_literalMutationString207985_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile(" V(r@#xP]");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207580 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207580_failAssert0_literalMutationString207985 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  V(r@#xP] not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_add207548_literalMutationString207574_failAssert0_literalMutationString208029_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    mf.compile("");
                    Mustache compile = mf.compile("*_M^<Q8ih}-xm@:l{j`Lo4");
                }
                junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207574 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207574_failAssert0_literalMutationString208029 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template *_M^<Q8ih}-xm@:l{j`Lo4 not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_add207548_literalMutationString207569_failAssert0_literalMutationString208044_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    mf.compile("45N2)jJ]Ou]pI/]6r1te#T");
                    Mustache compile = mf.compile("relative/pathfail.html");
                }
                junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207569 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207569_failAssert0_literalMutationString208044 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 45N2)jJ]Ou]pI/]6r1te#T not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207543_literalMutationString207599_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            {
                Mustache compile = mf.compile("r_skuf&4d8I]}z8efzhm`");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207543_literalMutationString207599 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template r_skuf&4d8I]}z8efzhm` not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207542_literalMutationString207582_failAssert0_literalMutationString207978_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile("relaFive/pathfail>E.html");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207582 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207582_failAssert0_literalMutationString207978 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relaFive/pathfail>E.html not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207546_literalMutationString207593_failAssert0_add208267_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    mf.compile("`;(`Y9hTBe=+d%z{xcWNAe");
                    Mustache compile = mf.compile("`;(`Y9hTBe=+d%z{xcWNAe");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207546_literalMutationString207593 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207546_literalMutationString207593_failAssert0_add208267 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template `;(`Y9hTBe=+d%z{xcWNAe not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207542_literalMutationString207582_failAssert0_add208290_failAssert0() throws IOException {
        try {
            {
                createMustacheFactory();
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile("relative/pathfail>E.html");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207582 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207582_failAssert0_add208290 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/pathfail>E.html not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207542_literalMutationString207582_failAssert0_add208291_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    mf.compile("relative/pathfail>E.html");
                    Mustache compile = mf.compile("relative/pathfail>E.html");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207582 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207582_failAssert0_add208291 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/pathfail>E.html not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_add207548_literalMutationString207568_failAssert0_add208227_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    mf.compile("5t@aB`3]$igu0z)y{<bZy(");
                    mf.compile("5t@aB`3]$igu0z)y{<bZy(");
                    Mustache compile = mf.compile("relative/pathfail.html");
                }
                junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207568 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207568_failAssert0_add208227 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
        }
    }

    public void testRelativePathFail_add207548_literalMutationString207568_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            {
                mf.compile("5t@aB`3]$igu0z)y{<bZy(");
                Mustache compile = mf.compile("relative/pathfail.html");
            }
            junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207568 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
        }
    }

    public void testRelativePathFail_add207548_literalMutationString207569_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            {
                mf.compile("relativ /pathfail.html");
                Mustache compile = mf.compile("relative/pathfail.html");
            }
            junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207569 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relativ /pathfail.html not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207541_literalMutationString207609_failAssert0_literalMutationString207950_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile(" does not exist");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207541_literalMutationString207609 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207541_literalMutationString207609_failAssert0_literalMutationString207950 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207545_literalMutationString207587_failAssert0_add208259_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile(" does not exist");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207545_literalMutationString207587 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207545_literalMutationString207587_failAssert0_add208259 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_add207548_literalMutationString207569_failAssert0_add208320_failAssert0() throws IOException {
        try {
            {
                createMustacheFactory();
                MustacheFactory mf = createMustacheFactory();
                {
                    mf.compile("relativ /pathfail.html");
                    Mustache compile = mf.compile("relative/pathfail.html");
                }
                junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207569 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207569_failAssert0_add208320 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relativ /pathfail.html not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_add207547_literalMutationString207564_failAssert0() throws IOException {
        try {
            createMustacheFactory();
            MustacheFactory mf = createMustacheFactory();
            {
                Mustache compile = mf.compile("QoQ[`v0 !%>spv1gcd0Z$y");
            }
            junit.framework.TestCase.fail("testRelativePathFail_add207547_literalMutationString207564 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template QoQ[`v0 !%>spv1gcd0Z$y not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_add207548_literalMutationString207569_failAssert0_add208323_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    mf.compile("relativ /pathfail.html");
                    Mustache compile = mf.compile("relative/pathfail.html");
                }
                junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207569 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207569_failAssert0_add208323 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relativ /pathfail.html not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_add207547_literalMutationString207565_failAssert0() throws IOException {
        try {
            createMustacheFactory();
            MustacheFactory mf = createMustacheFactory();
            {
                Mustache compile = mf.compile("relative/pathfail.]html");
            }
            junit.framework.TestCase.fail("testRelativePathFail_add207547_literalMutationString207565 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/pathfail.]html not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207542_literalMutationString207581_failAssert0_add208282_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    mf.compile("relative/pathfailE.%tml");
                    Mustache compile = mf.compile("relative/pathfailE.%tml");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207581 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207581_failAssert0_add208282 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/pathfailE.%tml not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207546_literalMutationString207592_failAssert0_literalMutationString207942_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile("mhy_!UsD[");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207546_literalMutationString207592 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207546_literalMutationString207592_failAssert0_literalMutationString207942 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template mhy_!UsD[ not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207545_literalMutationString207586_failAssert0_literalMutationString207904_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile("pag+1.:xt");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207545_literalMutationString207586 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207545_literalMutationString207586_failAssert0_literalMutationString207904 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template pag+1.:xt not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_add207548_literalMutationString207568_failAssert0_add208226_failAssert0() throws IOException {
        try {
            {
                createMustacheFactory();
                MustacheFactory mf = createMustacheFactory();
                {
                    mf.compile("5t@aB`3]$igu0z)y{<bZy(");
                    Mustache compile = mf.compile("relative/pathfail.html");
                }
                junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207568 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207568_failAssert0_add208226 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
        }
    }

    public void testRelativePathFail_literalMutationString207542_literalMutationString207578_failAssert0_add208284_failAssert0() throws IOException {
        try {
            {
                createMustacheFactory();
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile("e%6mA8sjP4P>f):D&rc/T] ");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207578 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207578_failAssert0_add208284 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template e%6mA8sjP4P>f):D&rc/T]  not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207542_literalMutationString207582_failAssert0_literalMutationString207976_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile("relatiRve/pathfail>E.html");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207582 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207582_failAssert0_literalMutationString207976 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relatiRve/pathfail>E.html not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_add207548_literalMutationString207569_failAssert0null208400_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    mf.compile("relativ /pathfail.html");
                    Mustache compile = mf.compile(null);
                }
                junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207569 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207569_failAssert0null208400 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relativ /pathfail.html not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_add207548_literalMutationString207568_failAssert0_literalMutationString207843_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    mf.compile("5t@aOB`3]$igu0z)y{<bZy(");
                    Mustache compile = mf.compile("relative/pathfail.html");
                }
                junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207568 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207568_failAssert0_literalMutationString207843 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
        }
    }

    public void testRelativePathFail_literalMutationString207546_literalMutationString207595_failAssert0_add208265_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile(":a>#-2M7Oih]s?V6!6ZR!");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207546_literalMutationString207595 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207546_literalMutationString207595_failAssert0_add208265 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template :a>#-2M7Oih]s?V6!6ZR! not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207542_literalMutationString207581_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            {
                Mustache compile = mf.compile("relative/pathfailE.%tml");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207581 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/pathfailE.%tml not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207546_literalMutationString207591_failAssert0_literalMutationString207920_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile(":a>#-dM7Oih]s?[T6!6ZR!");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207546_literalMutationString207591 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207546_literalMutationString207591_failAssert0_literalMutationString207920 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template :a>#-dM7Oih]s?[T6!6ZR! not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207542_literalMutationString207578_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            {
                Mustache compile = mf.compile("e%6mA8sjP4P>f):D&rc/T] ");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207578 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template e%6mA8sjP4P>f):D&rc/T]  not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207542_literalMutationString207583_failAssert0_literalMutationString207974_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile("relatie/p{athfailE.html");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207583 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207542_literalMutationString207583_failAssert0_literalMutationString207974 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relatie/p{athfailE.html not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_add207548_literalMutationString207567_failAssert0_literalMutationString207818_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    mf.compile(" does not exist");
                    Mustache compile = mf.compile("relative/pathfail.html");
                }
                junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207567 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207567_failAssert0_literalMutationString207818 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207544_literalMutationString207603_failAssert0_literalMutationString207874_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile(" does not exist");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207544_literalMutationString207603 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207544_literalMutationString207603_failAssert0_literalMutationString207874 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207545_literalMutationString207587_failAssert0_add208257_failAssert0() throws IOException {
        try {
            {
                createMustacheFactory();
                MustacheFactory mf = createMustacheFactory();
                {
                    Mustache compile = mf.compile(" does not exist");
                }
                junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207545_literalMutationString207587 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207545_literalMutationString207587_failAssert0_add208257 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_literalMutationString207544_literalMutationString207604_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            {
                Mustache compile = mf.compile("%gnE-/]_+aDLH)14tSDJ(N");
            }
            junit.framework.TestCase.fail("testRelativePathFail_literalMutationString207544_literalMutationString207604 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template %gnE-/]_+aDLH)14tSDJ(N not found", expected.getMessage());
        }
    }

    public void testRelativePathFail_add207548_literalMutationString207569_failAssert0_literalMutationString208048_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                {
                    mf.compile("relativ /pathfail.html");
                    Mustache compile = mf.compile("relatMve/pathfail.html");
                }
                junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207569 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathFail_add207548_literalMutationString207569_failAssert0_literalMutationString208048 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relativ /pathfail.html not found", expected.getMessage());
        }
    }

    private static class AccessTrackingMap extends HashMap<String, String> {
        Set<String> accessed = new HashSet<>();

        @Override
        public String get(Object key) {
            accessed.add(((String) (key)));
            return super.get(key);
        }

        void check() {
            Set<String> keyset = new HashSet<>(keySet());
            keyset.removeAll(accessed);
            if (!(keyset.isEmpty())) {
                throw new MustacheException("All keys in the map were not accessed");
            }
        }
    }

    private AmplInterpreterTest.AccessTrackingMap createBaseMap() {
        AmplInterpreterTest.AccessTrackingMap accessTrackingMap = new AmplInterpreterTest.AccessTrackingMap();
        accessTrackingMap.put("first", "Sam");
        accessTrackingMap.put("last", "Pullara");
        return accessTrackingMap;
    }

    private static class SuperClass {
        String values = "value";
    }

    public void testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189456_failAssert0_literalMutationString191204_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("0&HKtXD(n.]F&e!:Q5tZ");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189456 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189456_failAssert0_literalMutationString191204 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 0&HKtXD(n.]F&e!:Q5tZ not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189491_failAssert0null194855_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("T!>XqXdTZr<% (#$Bu@p");
                    StringWriter sw = new StringWriter();
                    compile.execute(null, "").close();
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189491 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189491_failAssert0null194855 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template T!>XqXdTZr<% (#$Bu@p not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189487_failAssert0null194543_failAssert0() throws IOException {
        try {
            {
                {
                    createMustacheFactory();
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("T!>XqXdTZr<% (#$Bu@p");
                    StringWriter sw = new StringWriter();
                    compile.execute(null, "").close();
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189487 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189487_failAssert0null194543 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template T!>XqXdTZr<% (#$Bu@p not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188777_failAssert0_literalMutationString189181_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("m%Yk3, p8VZ&%@$3$>A.2");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "uninterestingpartial.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188777 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188777_failAssert0_literalMutationString189181 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template m%Yk3, p8VZ&%@$3$>A.2 not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189487_failAssert0null194545_failAssert0() throws IOException {
        try {
            {
                {
                    createMustacheFactory();
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("T!>XqXdTZr<% (#$Bu@p");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189487 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189487_failAssert0null194545 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template T!>XqXdTZr<% (#$Bu@p not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189455_failAssert0_literalMutationString192342_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("relative/dotdot]html");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "");
                    compile.execute(sw, "g").close();
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189455 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189455_failAssert0_literalMutationString192342 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/dotdot]html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188779_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("T!>XqXdTZr<% (#$Bu@p");
            StringWriter sw = new StringWriter();
            compile.execute(sw, "").close();
            TestUtil.getContents(root, "uninterestingpartial.html");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template T!>XqXdTZr<% (#$Bu@p not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189491_failAssert0_literalMutationString192314_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("T!>XqXdTZr<% (#$Bu@p");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    TestUtil.getContents(root, "bvWGGm#^v]GmD=N xXyS=[&wk");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189491 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189491_failAssert0_literalMutationString192314 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template T!>XqXdTZr<% (#$Bu@p not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189455_failAssert0null194868_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("relative/dotdot]html");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "");
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189455 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189455_failAssert0null194868 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/dotdot]html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189487_failAssert0_literalMutationString191156_failAssert0() throws IOException {
        try {
            {
                {
                    createMustacheFactory();
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("T!>XPqXdTZr<% (#$Bu@p");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189487 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189487_failAssert0_literalMutationString191156 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template T!>XPqXdTZr<% (#$Bu@p not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189456_failAssert0null194559_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("relative/dotdot]html");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, null);
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189456 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189456_failAssert0null194559 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/dotdot]html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189487_failAssert0() throws IOException {
        try {
            {
                createMustacheFactory();
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("T!>XqXdTZr<% (#$Bu@p");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "uninterestingpartial.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189487 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template T!>XqXdTZr<% (#$Bu@p not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188784_failAssert0_literalMutationString189092_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("B6SAw`33AVG3u3?3OU9,");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "page1.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188784 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188784_failAssert0_literalMutationString189092 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template B6SAw`33AVG3u3?3OU9, not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188778_failAssert0null189603_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("relative/dotdot]html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778_failAssert0null189603 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/dotdot]html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189487_failAssert0_literalMutationString191160_failAssert0() throws IOException {
        try {
            {
                {
                    createMustacheFactory();
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("T!>XqXdTZr<% (#$Bu@p");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "_").close();
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189487 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189487_failAssert0_literalMutationString191160 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template T!>XqXdTZr<% (#$Bu@p not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188779_failAssert0null189621_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("T!>XqXdTZr<% (#$Bu@p");
                StringWriter sw = new StringWriter();
                compile.execute(null, "").close();
                TestUtil.getContents(root, "uninterestingpartial.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0null189621 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template T!>XqXdTZr<% (#$Bu@p not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189489_failAssert0_add194156_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("T!>XqXdTZr<% (#$Bu@p");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    compile.execute(sw, "");
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189489 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189489_failAssert0_add194156 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template T!>XqXdTZr<% (#$Bu@p not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189452_failAssert0_add193513_failAssert0() throws IOException {
        try {
            {
                {
                    createMustacheFactory();
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("relative/dotdot]html");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "");
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189452 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189452_failAssert0_add193513 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/dotdot]html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189456_failAssert0_add193508_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("relative/dotdot]html");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189456 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189456_failAssert0_add193508 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/dotdot]html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_add188789_literalMutationString188924_failAssert0() throws IOException {
        try {
            DefaultMustacheFactory o_testRelativePathsDotDotDir_add188789__1 = createMustacheFactory();
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("i}IYg6Sr5@Ix- %d63,U");
            StringWriter sw = new StringWriter();
            compile.execute(sw, "").close();
            String o_testRelativePathsDotDotDir_add188789__10 = TestUtil.getContents(root, "uninterestingpartial.html");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_add188789_literalMutationString188924 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template i}IYg6Sr5@Ix- %d63,U not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189491_failAssert0_add194052_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("T!>XqXdTZr<% (#$Bu@p");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189491 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189491_failAssert0_add194052 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template T!>XqXdTZr<% (#$Bu@p not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_add188789_literalMutationString188926_failAssert0() throws IOException {
        try {
            DefaultMustacheFactory o_testRelativePathsDotDotDir_add188789__1 = createMustacheFactory();
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("relativ`/dotdot.html");
            StringWriter sw = new StringWriter();
            compile.execute(sw, "").close();
            String o_testRelativePathsDotDotDir_add188789__10 = TestUtil.getContents(root, "uninterestingpartial.html");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_add188789_literalMutationString188926 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relativ`/dotdot.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189452_failAssert0() throws IOException {
        try {
            {
                createMustacheFactory();
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("relative/dotdot]html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "uninterestingpartial.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189452 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/dotdot]html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189491_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("T!>XqXdTZr<% (#$Bu@p");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "uninterestingpartial.html");
                TestUtil.getContents(root, "uninterestingpartial.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189491 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template T!>XqXdTZr<% (#$Bu@p not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189455_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("relative/dotdot]html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "");
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "uninterestingpartial.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189455 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/dotdot]html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189492_failAssert0_literalMutationString191146_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("T!>XqXdTZr<% (#$Bu@p");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "*Ez_0:D8Oh/Hfb]0GO|#$sIHy");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189492 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189492_failAssert0_literalMutationString191146 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template T!>XqXdTZr<% (#$Bu@p not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188779_failAssert0null189623_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("T!>XqXdTZr<% (#$Bu@p");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0null189623 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template T!>XqXdTZr<% (#$Bu@p not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188778_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("relative/dotdot]html");
            StringWriter sw = new StringWriter();
            compile.execute(sw, "").close();
            TestUtil.getContents(root, "uninterestingpartial.html");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/dotdot]html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_add188794_remove189520_literalMutationString190522_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("Cam|A^^(!{;h31Jt&#2m");
            StringWriter sw = new StringWriter();
            compile.execute(sw, "").close();
            String o_testRelativePathsDotDotDir_add188794__10 = TestUtil.getContents(root, "uninterestingpartial.html");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_add188794_remove189520_literalMutationString190522 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Cam|A^^(!{;h31Jt&#2m not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189492_failAssert0_add193470_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    mf.compile("T!>XqXdTZr<% (#$Bu@p");
                    Mustache compile = mf.compile("T!>XqXdTZr<% (#$Bu@p");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189492 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189492_failAssert0_add193470 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template T!>XqXdTZr<% (#$Bu@p not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189489_failAssert0null194913_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("T!>XqXdTZr<% (#$Bu@p");
                    StringWriter sw = new StringWriter();
                    compile.execute(null, "").close();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189489 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189489_failAssert0null194913 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template T!>XqXdTZr<% (#$Bu@p not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189487_failAssert0_add193479_failAssert0() throws IOException {
        try {
            {
                {
                    createMustacheFactory();
                    MustacheFactory mf = createMustacheFactory();
                    mf.compile("T!>XqXdTZr<% (#$Bu@p");
                    Mustache compile = mf.compile("T!>XqXdTZr<% (#$Bu@p");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189487 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189487_failAssert0_add193479 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template T!>XqXdTZr<% (#$Bu@p not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188785_failAssert0_literalMutationString189079_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("relative/dotdot^.html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "unbnterestingpartial.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188785 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188785_failAssert0_literalMutationString189079 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/dotdot^.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189452_failAssert0null194562_failAssert0() throws IOException {
        try {
            {
                {
                    createMustacheFactory();
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("relative/dotdot]html");
                    StringWriter sw = new StringWriter();
                    compile.execute(null, "").close();
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189452 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189452_failAssert0null194562 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/dotdot]html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189487_failAssert0_add193484_failAssert0() throws IOException {
        try {
            {
                {
                    createMustacheFactory();
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("T!>XqXdTZr<% (#$Bu@p");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189487 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189487_failAssert0_add193484 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template T!>XqXdTZr<% (#$Bu@p not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_add188792_remove189512_literalMutationString190462_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("&?u}Ig@G;#NB?UYQo)@w");
            StringWriter sw = new StringWriter();
            Writer o_testRelativePathsDotDotDir_add188792__7 = compile.execute(sw, "");
            String o_testRelativePathsDotDotDir_add188792__10 = TestUtil.getContents(root, "uninterestingpartial.html");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_add188792_remove189512_literalMutationString190462 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template &?u}Ig@G;#NB?UYQo)@w not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_add188791_literalMutationString188940_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("d=K%kToRC8ef!Uqav33O");
            StringWriter sw = new StringWriter();
            compile.execute(sw, "").close();
            compile.execute(sw, "").close();
            String o_testRelativePathsDotDotDir_add188791__11 = TestUtil.getContents(root, "uninterestingpartial.html");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_add188791_literalMutationString188940 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template d=K%kToRC8ef!Uqav33O not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188779_failAssert0_literalMutationString189200_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("T!>XqXdTZr<% (#$Bu@p");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "W").close();
                TestUtil.getContents(root, "uninterestingpartial.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_literalMutationString189200 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template T!>XqXdTZr<% (#$Bu@p not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188778_failAssert0_literalMutationString189130_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("relative/dotdot]html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "uninterestingpartialhtml");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778_failAssert0_literalMutationString189130 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/dotdot]html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_add188790_literalMutationString188872_failAssert0_literalMutationString192004_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache o_testRelativePathsDotDotDir_add188790__3 = mf.compile("relative/dotdot.html");
                Mustache compile = mf.compile("VIDD,6V!og()]UopnBlS");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                String o_testRelativePathsDotDotDir_add188790__10 = TestUtil.getContents(root, "uninterestingpartial.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_add188790_literalMutationString188872 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_add188790_literalMutationString188872_failAssert0_literalMutationString192004 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template VIDD,6V!og()]UopnBlS not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188778_failAssert0_literalMutationString189134_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("relative/dotdot]html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "uninterestingparti?l.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778_failAssert0_literalMutationString189134 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/dotdot]html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189455_failAssert0_add194064_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    mf.compile("relative/dotdot]html");
                    Mustache compile = mf.compile("relative/dotdot]html");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "");
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189455 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189455_failAssert0_add194064 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/dotdot]html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189452_failAssert0_literalMutationString191223_failAssert0() throws IOException {
        try {
            {
                {
                    createMustacheFactory();
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("reltive/dotdot]html");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189452 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189452_failAssert0_literalMutationString191223 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template reltive/dotdot]html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188779_failAssert0_literalMutationString189201_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("T!>XqXdTZr<% (#$Bu@p");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_literalMutationString189201 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template T!>XqXdTZr<% (#$Bu@p not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_remove188795_literalMutationString188971_failAssert0() throws IOException {
        try {
            MustacheFactory mf = createMustacheFactory();
            Mustache compile = mf.compile("bEd<bRPEtpUF(>%;>=|f");
            StringWriter sw = new StringWriter();
            String o_testRelativePathsDotDotDir_remove188795__7 = TestUtil.getContents(root, "uninterestingpartial.html");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_remove188795_literalMutationString188971 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template bEd<bRPEtpUF(>%;>=|f not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188785_failAssert0null189591_failAssert0_literalMutationString190858_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("re:lative/dotdot.html");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188785 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188785_failAssert0null189591 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188785_failAssert0null189591_failAssert0_literalMutationString190858 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template re:lative/dotdot.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189489_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("T!>XqXdTZr<% (#$Bu@p");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "uninterestingpartial.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189489 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template T!>XqXdTZr<% (#$Bu@p not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189456_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("relative/dotdot]html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "uninterestingpartial.html");
                TestUtil.getContents(root, "uninterestingpartial.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188778_failAssert0_add189456 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/dotdot]html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189492_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = createMustacheFactory();
                Mustache compile = mf.compile("T!>XqXdTZr<% (#$Bu@p");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "uninterestingpartial.html");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189492 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template T!>XqXdTZr<% (#$Bu@p not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189489_failAssert0_literalMutationString192511_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile("T!>XqXdTZr<% R#$Bu@p");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "uninterestingpartial.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189489 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188779_failAssert0_add189489_failAssert0_literalMutationString192511 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template T!>XqXdTZr<% R#$Bu@p not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDir_literalMutationString188776_failAssert0_literalMutationString189234_failAssert0_literalMutationString191949_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = createMustacheFactory();
                    Mustache compile = mf.compile(" does not exist");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "uninterestingpa}rtial.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188776 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188776_failAssert0_literalMutationString189234 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDir_literalMutationString188776_failAssert0_literalMutationString189234_failAssert0_literalMutationString191949 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_add410004_failAssert0_add413608_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public String resolvePartialPath(String dir, String name, String extension) {
                            return name + extension;
                        }
                    };
                    Mustache compile = mf.compile("7||u$Q(H-xg{LzZ/c6R:0)rsO");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "");
                    compile.execute(sw, "");
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "nonrelative.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_add410004 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_add410004_failAssert0_add413608 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 7||u$Q(H-xg{LzZ/c6R:0)rsO not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_add410004_failAssert0null414667_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public String resolvePartialPath(String dir, String name, String extension) {
                            return name + extension;
                        }
                    };
                    Mustache compile = mf.compile("7||u$Q(H-xg{LzZ/c6R:0)rsO");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "");
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "nonrelative.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_add410004 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_add410004_failAssert0null414667 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 7||u$Q(H-xg{LzZ/c6R:0)rsO not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0() throws IOException {
        try {
            MustacheFactory mf = new DefaultMustacheFactory(root) {
                @Override
                public String resolvePartialPath(String dir, String name, String extension) {
                    return name + extension;
                }
            };
            Mustache compile = mf.compile("relative/no nrelative.html");
            StringWriter sw = new StringWriter();
            compile.execute(sw, "").close();
            TestUtil.getContents(root, "nonrelative.html");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/no nrelative.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0() throws IOException {
        try {
            MustacheFactory mf = new DefaultMustacheFactory(root) {
                @Override
                public String resolvePartialPath(String dir, String name, String extension) {
                    return name + extension;
                }
            };
            Mustache compile = mf.compile("7||u$Q(H-xg{LzZ/c6R:0)rsO");
            StringWriter sw = new StringWriter();
            compile.execute(sw, "").close();
            TestUtil.getContents(root, "nonrelative.html");
            sw.toString();
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 7||u$Q(H-xg{LzZ/c6R:0)rsO not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_add410006_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public String resolvePartialPath(String dir, String name, String extension) {
                        return name + extension;
                    }
                };
                Mustache compile = mf.compile("7||u$Q(H-xg{LzZ/c6R:0)rsO");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "nonrelative.html");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_add410006 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 7||u$Q(H-xg{LzZ/c6R:0)rsO not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add410001_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public String resolvePartialPath(String dir, String name, String extension) {
                        return name + extension;
                    }
                };
                Mustache compile = mf.compile("relative/no nrelative.html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "nonrelative.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add410001 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/no nrelative.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_add410002_failAssert0_add414030_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public String resolvePartialPath(String dir, String name, String extension) {
                            return name + extension;
                        }
                    };
                    mf.compile("7||u$Q(H-xg{LzZ/c6R:0)rsO");
                    mf.compile("7||u$Q(H-xg{LzZ/c6R:0)rsO");
                    Mustache compile = mf.compile("7||u$Q(H-xg{LzZ/c6R:0)rsO");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "nonrelative.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_add410002 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_add410002_failAssert0_add414030 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 7||u$Q(H-xg{LzZ/c6R:0)rsO not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_add410004_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public String resolvePartialPath(String dir, String name, String extension) {
                        return name + extension;
                    }
                };
                Mustache compile = mf.compile("7||u$Q(H-xg{LzZ/c6R:0)rsO");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "");
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "nonrelative.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_add410004 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 7||u$Q(H-xg{LzZ/c6R:0)rsO not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_add410003_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public String resolvePartialPath(String dir, String name, String extension) {
                        return name + extension;
                    }
                };
                Mustache compile = mf.compile("7||u$Q(H-xg{LzZ/c6R:0)rsO");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "nonrelative.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_add410003 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 7||u$Q(H-xg{LzZ/c6R:0)rsO not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_literalMutationString409829_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public String resolvePartialPath(String dir, String name, String extension) {
                        return name + extension;
                    }
                };
                Mustache compile = mf.compile("relative/no nrelative.html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "nonrelaive.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_literalMutationString409829 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/no nrelative.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409702_failAssert0_literalMutationString409958_failAssert0_literalMutationString412556_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public String resolvePartialPath(String dir, String name, String extension) {
                            return name + extension;
                        }
                    };
                    Mustache compile = mf.compile("?aMjIs0f&i,9j#IpE@WMxx w8");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409702 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409702_failAssert0_literalMutationString409958 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409702_failAssert0_literalMutationString409958_failAssert0_literalMutationString412556 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ?aMjIs0f&i,9j#IpE@WMxx w8 not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_literalMutationString409834_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public String resolvePartialPath(String dir, String name, String extension) {
                        return name + extension;
                    }
                };
                Mustache compile = mf.compile("7||u$Q(H-xg{>LzZ/c6R:0)rsO");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "nonrelative.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_literalMutationString409834 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 7||u$Q(H-xg{>LzZ/c6R:0)rsO not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add410000_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public String resolvePartialPath(String dir, String name, String extension) {
                        return name + extension;
                    }
                };
                Mustache compile = mf.compile("relative/no nrelative.html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "nonrelative.html");
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add410000 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/no nrelative.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add409998_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public String resolvePartialPath(String dir, String name, String extension) {
                        return name + extension;
                    }
                };
                Mustache compile = mf.compile("relative/no nrelative.html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "");
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "nonrelative.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add409998 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/no nrelative.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_literalMutationString409844_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public String resolvePartialPath(String dir, String name, String extension) {
                        return name + extension;
                    }
                };
                Mustache compile = mf.compile("7||u$Q(H-xg{LzZ/c6R:0)rsO");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "norelative.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_literalMutationString409844 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 7||u$Q(H-xg{LzZ/c6R:0)rsO not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverridenull409715_failAssert0_literalMutationString409803_failAssert0_literalMutationString412033_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public String resolvePartialPath(String dir, String name, String extension) {
                            return name + extension;
                        }
                    };
                    Mustache compile = mf.compile("Na13?@#s rDf(YpN@,y8APC6c");
                    StringWriter sw = new StringWriter();
                    compile.execute(null, "").close();
                    TestUtil.getContents(root, "");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDirOverridenull409715 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverridenull409715_failAssert0_literalMutationString409803 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverridenull409715_failAssert0_literalMutationString409803_failAssert0_literalMutationString412033 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Na13?@#s rDf(YpN@,y8APC6c not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add410001_failAssert0null414606_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public String resolvePartialPath(String dir, String name, String extension) {
                            return name + extension;
                        }
                    };
                    Mustache compile = mf.compile("relative/no nrelative.html");
                    StringWriter sw = new StringWriter();
                    compile.execute(null, "").close();
                    TestUtil.getContents(root, "nonrelative.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add410001 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add410001_failAssert0null414606 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/no nrelative.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_add410004_failAssert0_literalMutationString411504_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public String resolvePartialPath(String dir, String name, String extension) {
                            return name + extension;
                        }
                    };
                    Mustache compile = mf.compile("74|u$Q(H-xg{LzZ/c6R:0)rsO");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "");
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "nonrelative.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_add410004 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_add410004_failAssert0_literalMutationString411504 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 74|u$Q(H-xg{LzZ/c6R:0)rsO not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0null410083_failAssert0_add413325_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public String resolvePartialPath(String dir, String name, String extension) {
                            return name + extension;
                        }
                    };
                    Mustache compile = mf.compile("7||u$Q(H-xg{LzZ/c6R:0)rsO");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0null410083 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0null410083_failAssert0_add413325 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 7||u$Q(H-xg{LzZ/c6R:0)rsO not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add409997_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public String resolvePartialPath(String dir, String name, String extension) {
                        return name + extension;
                    }
                };
                Mustache compile = mf.compile("relative/no nrelative.html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "nonrelative.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add409997 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/no nrelative.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409701_failAssert0_literalMutationString409862_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public String resolvePartialPath(String dir, String name, String extension) {
                        return name + extension;
                    }
                };
                Mustache compile = mf.compile("Hj[&IrfYCutgi9L{{?^q,km#r");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "page1.txt");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409701 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409701_failAssert0_literalMutationString409862 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Hj[&IrfYCutgi9L{{?^q,km#r not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0null410079_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public String resolvePartialPath(String dir, String name, String extension) {
                        return name + extension;
                    }
                };
                Mustache compile = mf.compile("7||u$Q(H-xg{LzZ/c6R:0)rsO");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "nonrelative.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0null410079 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 7||u$Q(H-xg{LzZ/c6R:0)rsO not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add410001_failAssert0_add413524_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public String resolvePartialPath(String dir, String name, String extension) {
                            return name + extension;
                        }
                    };
                    Mustache compile = mf.compile("relative/no nrelative.html");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "nonrelative.html");
                    TestUtil.getContents(root, "nonrelative.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add410001 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add410001_failAssert0_add413524 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/no nrelative.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverridenull409715_failAssert0_literalMutationString409803_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public String resolvePartialPath(String dir, String name, String extension) {
                        return name + extension;
                    }
                };
                Mustache compile = mf.compile("Na13?@#s rDf(YpN@,y8APC6c");
                StringWriter sw = new StringWriter();
                compile.execute(null, "").close();
                TestUtil.getContents(root, "nonrelative.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverridenull409715 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverridenull409715_failAssert0_literalMutationString409803 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Na13?@#s rDf(YpN@,y8APC6c not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_literalMutationString409835_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public String resolvePartialPath(String dir, String name, String extension) {
                        return name + extension;
                    }
                };
                Mustache compile = mf.compile("7||u$Q(H-xg{LzZ/c6h:0)rsO");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "nonrelative.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_literalMutationString409835 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 7||u$Q(H-xg{LzZ/c6h:0)rsO not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_literalMutationString409822_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public String resolvePartialPath(String dir, String name, String extension) {
                        return name + extension;
                    }
                };
                Mustache compile = mf.compile("relative/no nrelative.html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "nonrelative.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_literalMutationString409822 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/no nrelative.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_add410002_failAssert0_literalMutationString412479_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public String resolvePartialPath(String dir, String name, String extension) {
                            return name + extension;
                        }
                    };
                    mf.compile("7||u$Q_H-xg{LzZ/c6R:0)rsO");
                    Mustache compile = mf.compile("7||u$Q(H-xg{LzZ/c6R:0)rsO");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "nonrelative.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_add410002 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_add410002_failAssert0_literalMutationString412479 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 7||u$Q_H-xg{LzZ/c6R:0)rsO not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409693_failAssert0_literalMutationString409921_failAssert0_literalMutationString413049_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public String resolvePartialPath(String dir, String name, String extension) {
                            return name + extension;
                        }
                    };
                    Mustache compile = mf.compile("Fr]_T:s(|@");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "nonrelative.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409693 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409693_failAssert0_literalMutationString409921 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409693_failAssert0_literalMutationString409921_failAssert0_literalMutationString413049 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Fr]_T:s(|@ not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409703_failAssert0null410088_failAssert0_literalMutationString410611_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public String resolvePartialPath(String dir, String name, String extension) {
                            return name + extension;
                        }
                    };
                    Mustache compile = mf.compile("J1$]`(h:*6;kh()%%l5C#o9Jt");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409703 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409703_failAssert0null410088 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409703_failAssert0null410088_failAssert0_literalMutationString410611 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template J1$]`(h:*6;kh()%%l5C#o9Jt not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409700_failAssert0_literalMutationString409911_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public String resolvePartialPath(String dir, String name, String extension) {
                        return name + extension;
                    }
                };
                Mustache compile = mf.compile("dUNhZi(-q&/(CHsu*r[[ h>Uy");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409700 should have thrown FileNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409700_failAssert0_literalMutationString409911 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template dUNhZi(-q&/(CHsu*r[[ h>Uy not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverridenull409715_failAssert0_literalMutationString409803_failAssert0_add413836_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public String resolvePartialPath(String dir, String name, String extension) {
                            return name + extension;
                        }
                    };
                    Mustache compile = mf.compile("Na13?@#s rDf(YpN@,y8APC6c");
                    StringWriter sw = new StringWriter();
                    compile.execute(null, "").close();
                    TestUtil.getContents(root, "nonrelative.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDirOverridenull409715 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverridenull409715_failAssert0_literalMutationString409803 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverridenull409715_failAssert0_literalMutationString409803_failAssert0_add413836 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Na13?@#s rDf(YpN@,y8APC6c not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409705_failAssert0_literalMutationString409878_failAssert0_literalMutationString413085_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public String resolvePartialPath(String dir, String name, String extension) {
                            return name + extension;
                        }
                    };
                    Mustache compile = mf.compile("relative/nonreZati[e.html");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "nonrelatxve.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409705 should have thrown FileNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409705_failAssert0_literalMutationString409878 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409705_failAssert0_literalMutationString409878_failAssert0_literalMutationString413085 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/nonreZati[e.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0null410074_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public String resolvePartialPath(String dir, String name, String extension) {
                        return name + extension;
                    }
                };
                Mustache compile = mf.compile("relative/no nrelative.html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "nonrelative.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0null410074 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/no nrelative.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0null410076_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public String resolvePartialPath(String dir, String name, String extension) {
                        return name + extension;
                    }
                };
                Mustache compile = mf.compile("relative/no nrelative.html");
                StringWriter sw = new StringWriter();
                compile.execute(null, "").close();
                TestUtil.getContents(root, "nonrelative.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0null410076 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/no nrelative.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0null410078_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public String resolvePartialPath(String dir, String name, String extension) {
                        return name + extension;
                    }
                };
                Mustache compile = mf.compile("relative/no nrelative.html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0null410078 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/no nrelative.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add410001_failAssert0_literalMutationString411338_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public String resolvePartialPath(String dir, String name, String extension) {
                            return name + extension;
                        }
                    };
                    Mustache compile = mf.compile("relative/no nrelative.html");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "page1.txt");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add410001 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add410001_failAssert0_literalMutationString411338 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/no nrelative.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverridenull409715_failAssert0_literalMutationString409803_failAssert0null414852_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public String resolvePartialPath(String dir, String name, String extension) {
                            return name + extension;
                        }
                    };
                    Mustache compile = mf.compile("Na13?@#s rDf(YpN@,y8APC6c");
                    StringWriter sw = new StringWriter();
                    compile.execute(null, "").close();
                    TestUtil.getContents(root, null);
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDirOverridenull409715 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverridenull409715_failAssert0_literalMutationString409803 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverridenull409715_failAssert0_literalMutationString409803_failAssert0null414852 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Na13?@#s rDf(YpN@,y8APC6c not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add409999_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public String resolvePartialPath(String dir, String name, String extension) {
                        return name + extension;
                    }
                };
                Mustache compile = mf.compile("relative/no nrelative.html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "nonrelative.html");
                TestUtil.getContents(root, "nonrelative.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add409999 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/no nrelative.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add410001_failAssert0_add413523_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public String resolvePartialPath(String dir, String name, String extension) {
                            return name + extension;
                        }
                    };
                    Mustache compile = mf.compile("relative/no nrelative.html");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "");
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "nonrelative.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add410001 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add410001_failAssert0_add413523 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/no nrelative.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0null410083_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public String resolvePartialPath(String dir, String name, String extension) {
                        return name + extension;
                    }
                };
                Mustache compile = mf.compile("7||u$Q(H-xg{LzZ/c6R:0)rsO");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, null);
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0null410083 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 7||u$Q(H-xg{LzZ/c6R:0)rsO not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_add410002_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public String resolvePartialPath(String dir, String name, String extension) {
                        return name + extension;
                    }
                };
                mf.compile("7||u$Q(H-xg{LzZ/c6R:0)rsO");
                Mustache compile = mf.compile("7||u$Q(H-xg{LzZ/c6R:0)rsO");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "nonrelative.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409696_failAssert0_add410002 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 7||u$Q(H-xg{LzZ/c6R:0)rsO not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add410001_failAssert0_literalMutationString411342_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public String resolvePartialPath(String dir, String name, String extension) {
                            return name + extension;
                        }
                    };
                    Mustache compile = mf.compile("relative/no nrelative.html");
                    StringWriter sw = new StringWriter();
                    compile.execute(sw, "").close();
                    TestUtil.getContents(root, "nnrelative.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add410001 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_add410001_failAssert0_literalMutationString411342 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/no nrelative.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_literalMutationString409826_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public String resolvePartialPath(String dir, String name, String extension) {
                        return name + extension;
                    }
                };
                Mustache compile = mf.compile("relative/no nrelative.html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "").close();
                TestUtil.getContents(root, "nonrel|ative.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_literalMutationString409826 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/no nrelative.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_literalMutationString409823_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public String resolvePartialPath(String dir, String name, String extension) {
                        return name + extension;
                    }
                };
                Mustache compile = mf.compile("relative/no nrelative.html");
                StringWriter sw = new StringWriter();
                compile.execute(sw, "page1.txt").close();
                TestUtil.getContents(root, "nonrelative.html");
                sw.toString();
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverride_literalMutationString409694_failAssert0_literalMutationString409823 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template relative/no nrelative.html not found", expected.getMessage());
        }
    }

    public void testRelativePathsDotDotDirOverridenull409715_failAssert0_literalMutationString409804_failAssert0_literalMutationString412043_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public String resolvePartialPath(String dir, String name, String extension) {
                            return name + extension;
                        }
                    };
                    Mustache compile = mf.compile("]n2Bi&ztm?>bhWnyP_h[G-2yJ");
                    StringWriter sw = new StringWriter();
                    compile.execute(null, "").close();
                    TestUtil.getContents(root, "nonrelative.html");
                    sw.toString();
                    junit.framework.TestCase.fail("testRelativePathsDotDotDirOverridenull409715 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testRelativePathsDotDotDirOverridenull409715_failAssert0_literalMutationString409804 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testRelativePathsDotDotDirOverridenull409715_failAssert0_literalMutationString409804_failAssert0_literalMutationString412043 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ]n2Bi&ztm?>bhWnyP_h[G-2yJ not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236870_failAssert0_literalMutationString237028_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("cC5f2w![*mZ)z/`&x.V9lZ").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236870 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236870_failAssert0_literalMutationString237028 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template cC5f2w![*mZ)z/`&x.V9lZ not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236867_failAssert0_literalMutationString237084_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("EWY5jG|Z1iW#TgY7?Yp{0").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236867 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236867_failAssert0_literalMutationString237084 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template EWY5jG|Z1iW#TgY7?Yp{0 not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236870_failAssert0_literalMutationString237028_failAssert0null243639_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("cC5f2w![*mZ)z/`&x.V9lZ").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236870 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236870_failAssert0_literalMutationString237028 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236870_failAssert0_literalMutationString237028_failAssert0null243639 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template cC5f2w![*mZ)z/`&x.V9lZ not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236870_failAssert0_literalMutationString237028_failAssert0null243636_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("cC5f2w![*mZ)z/`&x.V9lZ").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236870 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236870_failAssert0_literalMutationString237028 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236870_failAssert0_literalMutationString237028_failAssert0null243636 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template cC5f2w![*mZ)z/`&x.V9lZ not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236867_failAssert0_literalMutationString237089_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("overridextension.h<tml").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236867 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236867_failAssert0_literalMutationString237089 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template overridextension.h<tml not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0null237186_failAssert0_literalMutationString237649_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("page1.txt", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237186 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237186_failAssert0_literalMutationString237649 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0null237188_failAssert0_literalMutationString237638_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "page1.txt", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237188 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237188_failAssert0_literalMutationString237638 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0null237190_failAssert0_add240515_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    tc.startOfLine();
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237190 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237190_failAssert0_add240515 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236866_failAssert0_literalMutationString237072_failAssert0null243807_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile(" does not exist").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236866 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236866_failAssert0_literalMutationString237072 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236866_failAssert0_literalMutationString237072_failAssert0null243807 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236866_failAssert0_literalMutationString237076_failAssert0_literalMutationString240442_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile(" does not exist").execute(sw, "page1.txt").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236866 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236866_failAssert0_literalMutationString237076 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236866_failAssert0_literalMutationString237076_failAssert0_literalMutationString240442 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0_add237132_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0_add237132 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0_add237131_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                tc.startOfLine();
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0_add237131 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0_literalMutationString237061_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "page1.txt").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0_literalMutationString237061 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0_add237136_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                sw.toString();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0_add237136 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0_add237135_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78/=_YiOhc*G&x,^p)|J");
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0_add237135 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0_add237129_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                tc.file();
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0_add237129 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0_literalMutationString237053_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "(", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0_literalMutationString237053 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0_literalMutationString237050_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("O", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0_literalMutationString237050 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0_literalMutationString237057_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("_i| _RvoRS=m$u:0&= !)j").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0_literalMutationString237057 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template _i| _RvoRS=m$u:0&= !)j not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0_literalMutationString237058_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78/=_YiOhc*G&x,^p)J").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0_literalMutationString237058 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236867_failAssert0_literalMutationString237084_failAssert0_literalMutationString240386_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("EWY5jG|Z1iW#cTgY7?Yp{0").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236867 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236867_failAssert0_literalMutationString237084 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236867_failAssert0_literalMutationString237084_failAssert0_literalMutationString240386 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template EWY5jG|Z1iW#cTgY7?Yp{0 not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236870_failAssert0_literalMutationString237028_failAssert0_add242096_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("cC5f2w![*mZ)z/`&x.V9lZ").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236870 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236870_failAssert0_literalMutationString237028 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236870_failAssert0_literalMutationString237028_failAssert0_add242096 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template cC5f2w![*mZ)z/`&x.V9lZ not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0() throws IOException {
        try {
            MustacheFactory mf = new DefaultMustacheFactory(root) {
                @Override
                public MustacheVisitor createMustacheVisitor() {
                    return new DefaultMustacheVisitor(this) {
                        @Override
                        public void partial(TemplateContext tc, String variable) {
                            TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                            list.add(new PartialCode(partialTC, df, variable) {
                                @Override
                                protected String partialName() {
                                    return name;
                                }
                            });
                        }
                    };
                }
            };
            StringWriter sw = new StringWriter();
            mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
            sw.toString();
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236866_failAssert0_literalMutationString237072_failAssert0_add242293_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    tc.startOfLine();
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile(" does not exist").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236866 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236866_failAssert0_literalMutationString237072 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236866_failAssert0_literalMutationString237072_failAssert0_add242293 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0null237188_failAssert0_literalMutationString237643_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("!@.0dh!,4:57`!GIo6[*Xm").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237188 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237188_failAssert0_literalMutationString237643 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template !@.0dh!,4:57`!GIo6[*Xm not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236867_failAssert0_literalMutationString237084_failAssert0_add242251_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("EWY5jG|Z1iW#TgY7?Yp{0").execute(sw, "");
                    mf.compile("EWY5jG|Z1iW#TgY7?Yp{0").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236867 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236867_failAssert0_literalMutationString237084 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236867_failAssert0_literalMutationString237084_failAssert0_add242251 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template EWY5jG|Z1iW#TgY7?Yp{0 not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0null237187_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237187 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0null237189_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237189 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0null237190_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237190 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0null237192_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(null, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237192 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236870_failAssert0_literalMutationString237028_failAssert0_add242097_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("cC5f2w![*mZ)z/`&x.V9lZ").execute(sw, "").close();
                    mf.compile("cC5f2w![*mZ)z/`&x.V9lZ").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236870 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236870_failAssert0_literalMutationString237028 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236870_failAssert0_literalMutationString237028_failAssert0_add242097 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template cC5f2w![*mZ)z/`&x.V9lZ not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0_literalMutationString237048_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0_literalMutationString237048 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236866_failAssert0_literalMutationString237072_failAssert0_literalMutationString240455_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("x", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile(" does not exist").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236866 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236866_failAssert0_literalMutationString237072 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236866_failAssert0_literalMutationString237072_failAssert0_literalMutationString240455 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236868_failAssert0_literalMutationString237043_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("over<rideextension.ht;ml").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236868 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236868_failAssert0_literalMutationString237043 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template over<rideextension.ht;ml not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0_literalMutationString237062_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "U").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0_literalMutationString237062 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0_add237137_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0_add237137 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0_add237134_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "");
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0_add237134 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0_literalMutationString237051_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0_literalMutationString237051 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0_literalMutationString237059_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78]=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0_literalMutationString237059 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78]=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236867_failAssert0_literalMutationString237084_failAssert0null243772_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("EWY5jG|Z1iW#TgY7?Yp{0").execute(null, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236867 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236867_failAssert0_literalMutationString237084 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236867_failAssert0_literalMutationString237084_failAssert0null243772 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template EWY5jG|Z1iW#TgY7?Yp{0 not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0null237186_failAssert0null242350_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237186 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237186_failAssert0null242350 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0null237189_failAssert0_literalMutationString237668_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "page1.txt", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237189 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237189_failAssert0_literalMutationString237668 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236866_failAssert0_literalMutationString237072_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile(" does not exist").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236866 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236866_failAssert0_literalMutationString237072 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testOverrideExtensionnull236893_failAssert0_literalMutationString237002_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("overrideextension.h]tml").execute(null, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtensionnull236893 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testOverrideExtensionnull236893_failAssert0_literalMutationString237002 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template overrideextension.h]tml not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236867_failAssert0_literalMutationString237086_failAssert0_literalMutationString239332_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("%(Z&?M,&k").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236867 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236867_failAssert0_literalMutationString237086 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236867_failAssert0_literalMutationString237086_failAssert0_literalMutationString239332 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template %(Z&?M,&k not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236870_failAssert0_literalMutationString237028_failAssert0_literalMutationString240135_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("cC5f2w![*mZ)z/`&x.V9lZ").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236870 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236870_failAssert0_literalMutationString237028 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236870_failAssert0_literalMutationString237028_failAssert0_literalMutationString240135 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template cC5f2w![*mZ)z/`&x.V9lZ not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0null237187_failAssert0_literalMutationString237619_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("Q", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237187 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237187_failAssert0_literalMutationString237619 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtensionnull236893_failAssert0_literalMutationString237000_failAssert0_literalMutationString239192_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("overrdeexte|nsion.html").execute(null, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtensionnull236893 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testOverrideExtensionnull236893_failAssert0_literalMutationString237000 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtensionnull236893_failAssert0_literalMutationString237000_failAssert0_literalMutationString239192 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template overrdeexte|nsion.html not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0null237188_failAssert0_add240539_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237188 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237188_failAssert0_add240539 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtensionnull236893_failAssert0_literalMutationString237002_failAssert0_literalMutationString239268_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("overrideextensuon.h]tml").execute(null, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtensionnull236893 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testOverrideExtensionnull236893_failAssert0_literalMutationString237002 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtensionnull236893_failAssert0_literalMutationString237002_failAssert0_literalMutationString239268 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template overrideextensuon.h]tml not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0null237189_failAssert0_add240553_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                    mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237189 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237189_failAssert0_add240553 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0null237187_failAssert0_add240527_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "");
                    mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237187 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237187_failAssert0_add240527 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtensionnull236893_failAssert0_literalMutationString237005_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("|jkt^adF@k2}:_;B]5/oL?").execute(null, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtensionnull236893 should have thrown NullPointerException");
            }
            junit.framework.TestCase.fail("testOverrideExtensionnull236893_failAssert0_literalMutationString237005 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template |jkt^adF@k2}:_;B]5/oL? not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0null237188_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237188 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0null237186_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237186 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtensionnull236893_failAssert0_literalMutationString237002_failAssert0_add241567_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("overrideextension.h]tml").execute(null, "").close();
                    sw.toString();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtensionnull236893 should have thrown NullPointerException");
                }
                junit.framework.TestCase.fail("testOverrideExtensionnull236893_failAssert0_literalMutationString237002 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtensionnull236893_failAssert0_literalMutationString237002_failAssert0_add241567 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template overrideextension.h]tml not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0null237190_failAssert0null242328_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237190 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237190_failAssert0null242328 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0_add237130_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                tc.line();
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0_add237130 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0_add237133_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0_add237133 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0null237188_failAssert0_add240537_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("@(78/=_YiOhc*G&x,^p)|J");
                    mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237188 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237188_failAssert0_add240537 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236870_failAssert0_literalMutationString237026_failAssert0_literalMutationString239459_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile(" does not exist").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236870 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236870_failAssert0_literalMutationString237026 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236870_failAssert0_literalMutationString237026_failAssert0_literalMutationString239459 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0_literalMutationString237052_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("{{", "page1.txt", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0_literalMutationString237052 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0null237186_failAssert0_add240544_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                    mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237186 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237186_failAssert0_add240544 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0_literalMutationString237049_failAssert0() throws IOException {
        try {
            {
                MustacheFactory mf = new DefaultMustacheFactory(root) {
                    @Override
                    public MustacheVisitor createMustacheVisitor() {
                        return new DefaultMustacheVisitor(this) {
                            @Override
                            public void partial(TemplateContext tc, String variable) {
                                TemplateContext partialTC = new TemplateContext("page1.txt", "}}", tc.file(), tc.line(), tc.startOfLine());
                                list.add(new PartialCode(partialTC, df, variable) {
                                    @Override
                                    protected String partialName() {
                                        return name;
                                    }
                                });
                            }
                        };
                    }
                };
                StringWriter sw = new StringWriter();
                mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                sw.toString();
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0_literalMutationString237049 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testOverrideExtension_literalMutationString236869_failAssert0null237189_failAssert0null242358_failAssert0() throws IOException {
        try {
            {
                {
                    MustacheFactory mf = new DefaultMustacheFactory(root) {
                        @Override
                        public MustacheVisitor createMustacheVisitor() {
                            return new DefaultMustacheVisitor(this) {
                                @Override
                                public void partial(TemplateContext tc, String variable) {
                                    TemplateContext partialTC = new TemplateContext("{{", "}}", tc.file(), tc.line(), tc.startOfLine());
                                    list.add(new PartialCode(partialTC, df, variable) {
                                        @Override
                                        protected String partialName() {
                                            return name;
                                        }
                                    });
                                }
                            };
                        }
                    };
                    StringWriter sw = new StringWriter();
                    mf.compile("@(78/=_YiOhc*G&x,^p)|J").execute(sw, "").close();
                    sw.toString();
                    junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869 should have thrown MustacheNotFoundException");
                }
                junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237189 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testOverrideExtension_literalMutationString236869_failAssert0null237189_failAssert0null242358 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template @(78/=_YiOhc*G&x,^p)|J not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258322_literalMutationString258383_failAssert0_add258921_failAssert0() throws Exception {
        try {
            {
                String nonExistingMustache = "H]04";
                {
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                }
                junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258383 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258383_failAssert0_add258921 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template H]04 not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258321_literalMutationString258377_failAssert0_add258924_failAssert0() throws Exception {
        try {
            {
                String nonExistingMustache = "^d2a$`QdL";
                {
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                }
                junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258321_literalMutationString258377 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258321_literalMutationString258377_failAssert0_add258924 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ^d2a$`QdL not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258322_literalMutationString258384_failAssert0_literalMutationString258647_failAssert0() throws Exception {
        try {
            {
                String nonExistingMustache = "4Z]4";
                {
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                }
                junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258384 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258384_failAssert0_literalMutationString258647 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 4Z]4 not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258321_literalMutationString258376_failAssert0_add258932_failAssert0() throws Exception {
        try {
            {
                String nonExistingMustache = " does not exist";
                {
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                }
                junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258321_literalMutationString258376 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258321_literalMutationString258376_failAssert0_add258932 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258321_literalMutationString258376_failAssert0() throws Exception {
        try {
            String nonExistingMustache = " does not exist";
            {
                new DefaultMustacheFactory().compile(nonExistingMustache);
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258321_literalMutationString258376 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258322_literalMutationString258385_failAssert0_literalMutationString258655_failAssert0() throws Exception {
        try {
            {
                String nonExistingMustache = "4].004";
                {
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                }
                junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258385 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258385_failAssert0_literalMutationString258655 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 4].004 not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258323_literalMutationString258371_failAssert0_literalMutationString258782_failAssert0() throws Exception {
        try {
            {
                String nonExistingMustache = ")l}[h";
                {
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                }
                junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258323_literalMutationString258371 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258323_literalMutationString258371_failAssert0_literalMutationString258782 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template )l}[h not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_add258324_literalMutationString258350_failAssert0_literalMutationString258751_failAssert0() throws Exception {
        try {
            {
                String nonExistingMustache = "y `#";
                {
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                }
                junit.framework.TestCase.fail("testMustacheNotFoundException_add258324_literalMutationString258350 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_add258324_literalMutationString258350_failAssert0_literalMutationString258751 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template y `# not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258318_literalMutationString258364_failAssert0_literalMutationString258812_failAssert0() throws Exception {
        try {
            {
                String nonExistingMustache = "Q$mQ|%M_X";
                {
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                }
                junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258318_literalMutationString258364 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258318_literalMutationString258364_failAssert0_literalMutationString258812 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template Q$mQ|%M_X not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258322_literalMutationString258386_failAssert0_add258987_failAssert0() throws Exception {
        try {
            {
                String nonExistingMustache = "[HIr";
                {
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                }
                junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258386 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258386_failAssert0_add258987 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [HIr not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258323_literalMutationString258373_failAssert0() throws Exception {
        try {
            String nonExistingMustache = ";[h";
            {
                new DefaultMustacheFactory().compile(nonExistingMustache);
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258323_literalMutationString258373 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ;[h not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258322_literalMutationString258384_failAssert0() throws Exception {
        try {
            String nonExistingMustache = "4]4";
            {
                new DefaultMustacheFactory().compile(nonExistingMustache);
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258384 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 4]4 not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258322_literalMutationString258385_failAssert0() throws Exception {
        try {
            String nonExistingMustache = "4]004";
            {
                new DefaultMustacheFactory().compile(nonExistingMustache);
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258385 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 4]004 not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258322_literalMutationString258386_failAssert0_literalMutationString258826_failAssert0() throws Exception {
        try {
            {
                String nonExistingMustache = "[Hr";
                {
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                }
                junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258386 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258386_failAssert0_literalMutationString258826 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [Hr not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258322_literalMutationString258386_failAssert0() throws Exception {
        try {
            String nonExistingMustache = "[HIr";
            {
                new DefaultMustacheFactory().compile(nonExistingMustache);
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258386 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [HIr not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258321_literalMutationString258377_failAssert0_literalMutationString258670_failAssert0() throws Exception {
        try {
            {
                String nonExistingMustache = "^d2a$QdL";
                {
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                }
                junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258321_literalMutationString258377 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258321_literalMutationString258377_failAssert0_literalMutationString258670 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ^d2a$QdL not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258322_literalMutationString258383_failAssert0() throws Exception {
        try {
            String nonExistingMustache = "H]04";
            {
                new DefaultMustacheFactory().compile(nonExistingMustache);
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258383 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template H]04 not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258322_literalMutationString258385_failAssert0_add258918_failAssert0() throws Exception {
        try {
            {
                String nonExistingMustache = "4]004";
                {
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                }
                junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258385 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258385_failAssert0_add258918 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 4]004 not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258323_literalMutationString258371_failAssert0() throws Exception {
        try {
            String nonExistingMustache = ")}[h";
            {
                new DefaultMustacheFactory().compile(nonExistingMustache);
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258323_literalMutationString258371 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template )}[h not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258323_literalMutationString258371_failAssert0_add258970_failAssert0() throws Exception {
        try {
            {
                String nonExistingMustache = ")}[h";
                {
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                }
                junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258323_literalMutationString258371 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258323_literalMutationString258371_failAssert0_add258970 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template )}[h not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258321_literalMutationString258377_failAssert0() throws Exception {
        try {
            String nonExistingMustache = "^d2a$`QdL";
            {
                new DefaultMustacheFactory().compile(nonExistingMustache);
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258321_literalMutationString258377 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ^d2a$`QdL not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258323_literalMutationString258371_failAssert0_add258969_failAssert0() throws Exception {
        try {
            {
                String nonExistingMustache = ")}[h";
                {
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                }
                junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258323_literalMutationString258371 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258323_literalMutationString258371_failAssert0_add258969 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template )}[h not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258322_literalMutationString258384_failAssert0_add258916_failAssert0() throws Exception {
        try {
            {
                String nonExistingMustache = "4]4";
                {
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                }
                junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258384 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258384_failAssert0_add258916 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 4]4 not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258322_literalMutationString258384_failAssert0_add258917_failAssert0() throws Exception {
        try {
            {
                String nonExistingMustache = "4]4";
                {
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                }
                junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258384 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258384_failAssert0_add258917 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 4]4 not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258322_literalMutationString258385_failAssert0_add258919_failAssert0() throws Exception {
        try {
            {
                String nonExistingMustache = "4]004";
                {
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                }
                junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258385 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258385_failAssert0_add258919 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 4]004 not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258322_literalMutationString258383_failAssert0_literalMutationString258659_failAssert0() throws Exception {
        try {
            {
                String nonExistingMustache = " DF|";
                {
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                }
                junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258383 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258383_failAssert0_literalMutationString258659 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  DF| not found", expected.getMessage());
        }
    }

    public void testMustacheNotFoundException_literalMutationString258322_literalMutationString258386_failAssert0_add258988_failAssert0() throws Exception {
        try {
            {
                String nonExistingMustache = "[HIr";
                {
                    new DefaultMustacheFactory().compile(nonExistingMustache);
                }
                junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258386 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testMustacheNotFoundException_literalMutationString258322_literalMutationString258386_failAssert0_add258988 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [HIr not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_add180439_literalMutationString180462_failAssert0_add181086_failAssert0() throws Exception {
        try {
            {
                {
                    execute("inf[initeparent.html", new AmplInterpreterTest.Context());
                    StringWriter sw = execute("infiniteparent.html", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180462 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180462_failAssert0_add181086 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template inf[initeparent.html not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_add180439_literalMutationString180462_failAssert0_add181084_failAssert0() throws Exception {
        try {
            {
                {
                    execute("inf[initeparent.html", new AmplInterpreterTest.Context());
                    execute("inf[initeparent.html", new AmplInterpreterTest.Context());
                    StringWriter sw = execute("infiniteparent.html", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180462 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180462_failAssert0_add181084 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template inf[initeparent.html not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_add180439_literalMutationString180462_failAssert0_add181085_failAssert0() throws Exception {
        try {
            {
                {
                    execute("inf[initeparent.html", new AmplInterpreterTest.Context());
                    execute("infiniteparent.html", new AmplInterpreterTest.Context());
                    StringWriter sw = execute("infiniteparent.html", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180462 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180462_failAssert0_add181085 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template inf[initeparent.html not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180434_literalMutationString180487_failAssert0_add181013_failAssert0() throws Exception {
        try {
            {
                {
                    StringWriter sw = execute(" does not exist", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180434_literalMutationString180487 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180434_literalMutationString180487_failAssert0_add181013 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180436_literalMutationString180484_failAssert0() throws Exception {
        try {
            {
                StringWriter sw = execute("0L02nj;&E:fjp[A;7}", new AmplInterpreterTest.Context());
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180436_literalMutationString180484 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 0L02nj;&E:fjp[A;7} not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180436_literalMutationString180483_failAssert0() throws Exception {
        try {
            {
                StringWriter sw = execute("0L02nsj;&E$fjp[A;7}", new AmplInterpreterTest.Context());
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180436_literalMutationString180483 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 0L02nsj;&E$fjp[A;7} not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180436_literalMutationString180480_failAssert0() throws Exception {
        try {
            {
                StringWriter sw = execute("0L02nsj;&Eg:fjp[A;7}", new AmplInterpreterTest.Context());
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180436_literalMutationString180480 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 0L02nsj;&Eg:fjp[A;7} not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180437_literalMutationString180502_failAssert0_add181097_failAssert0() throws Exception {
        try {
            {
                {
                    StringWriter sw = execute("[}u7+Lj|5]0dv5RWMpd", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180437_literalMutationString180502 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180437_literalMutationString180502_failAssert0_add181097 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [}u7+Lj|5]0dv5RWMpd not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_add180440_literalMutationString180454_failAssert0() throws Exception {
        try {
            {
                StringWriter sw = execute("(Fd<@3g!*f(j;!$nIVY", new AmplInterpreterTest.Context());
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_add180440_literalMutationString180454 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template (Fd<@3g!*f(j;!$nIVY not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180435_literalMutationString180495_failAssert0_add181021_failAssert0() throws Exception {
        try {
            {
                {
                    StringWriter sw = execute("ol6bj|LRhhw&8_+VB(", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180435_literalMutationString180495 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180435_literalMutationString180495_failAssert0_add181021 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ol6bj|LRhhw&8_+VB( not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180435_literalMutationString180495_failAssert0() throws Exception {
        try {
            {
                StringWriter sw = execute("ol6bj|LRhhw&8_+VB(", new AmplInterpreterTest.Context());
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180435_literalMutationString180495 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ol6bj|LRhhw&8_+VB( not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_add180439_literalMutationString180460_failAssert0_add181082_failAssert0() throws Exception {
        try {
            {
                {
                    execute(" ,(/:+hv`4O$+c!P/[m", new AmplInterpreterTest.Context());
                    execute("infiniteparent.html", new AmplInterpreterTest.Context());
                    StringWriter sw = execute("infiniteparent.html", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180460 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180460_failAssert0_add181082 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  ,(/:+hv`4O$+c!P/[m not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180434_literalMutationString180486_failAssert0_literalMutationString180691_failAssert0() throws Exception {
        try {
            {
                {
                    StringWriter sw = execute("&TK]7sTb_e", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180434_literalMutationString180486 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180434_literalMutationString180486_failAssert0_literalMutationString180691 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template &TK]7sTb_e not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180435_literalMutationString180495_failAssert0_literalMutationString180719_failAssert0() throws Exception {
        try {
            {
                {
                    StringWriter sw = execute("ol6bj|LRphhw&8_+VB(", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180435_literalMutationString180495 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180435_literalMutationString180495_failAssert0_literalMutationString180719 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ol6bj|LRphhw&8_+VB( not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_add180439_literalMutationString180460_failAssert0null181146_failAssert0() throws Exception {
        try {
            {
                {
                    execute(" ,(/:+hv`4O$+c!P/[m", new AmplInterpreterTest.Context());
                    StringWriter sw = execute(null, new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180460 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180460_failAssert0null181146 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  ,(/:+hv`4O$+c!P/[m not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180435_literalMutationString180493_failAssert0_literalMutationString180712_failAssert0() throws Exception {
        try {
            {
                {
                    StringWriter sw = execute(" does not exist", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180435_literalMutationString180493 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180435_literalMutationString180493_failAssert0_literalMutationString180712 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_add180439_literalMutationString180462_failAssert0() throws Exception {
        try {
            {
                execute("inf[initeparent.html", new AmplInterpreterTest.Context());
                StringWriter sw = execute("infiniteparent.html", new AmplInterpreterTest.Context());
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180462 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template inf[initeparent.html not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_add180439_literalMutationString180462_failAssert0null181148_failAssert0() throws Exception {
        try {
            {
                {
                    execute("inf[initeparent.html", new AmplInterpreterTest.Context());
                    StringWriter sw = execute(null, new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180462 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180462_failAssert0null181148 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template inf[initeparent.html not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180435_literalMutationString180496_failAssert0_literalMutationString180876_failAssert0() throws Exception {
        try {
            {
                {
                    StringWriter sw = execute("`7f*tU[D@uX*D7E&G", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180435_literalMutationString180496 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180435_literalMutationString180496_failAssert0_literalMutationString180876 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template `7f*tU[D@uX*D7E&G not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_add180439_literalMutationString180460_failAssert0_literalMutationString180923_failAssert0() throws Exception {
        try {
            {
                {
                    execute(" ,(/:+hv`4O$+c!P/[m", new AmplInterpreterTest.Context());
                    StringWriter sw = execute("in`finiteparent.html", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180460 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180460_failAssert0_literalMutationString180923 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  ,(/:+hv`4O$+c!P/[m not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180436_literalMutationString180483_failAssert0_add181041_failAssert0() throws Exception {
        try {
            {
                {
                    StringWriter sw = execute("0L02nsj;&E$fjp[A;7}", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180436_literalMutationString180483 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180436_literalMutationString180483_failAssert0_add181041 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 0L02nsj;&E$fjp[A;7} not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180434_literalMutationString180487_failAssert0() throws Exception {
        try {
            {
                StringWriter sw = execute(" does not exist", new AmplInterpreterTest.Context());
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180434_literalMutationString180487 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180434_literalMutationString180490_failAssert0() throws Exception {
        try {
            {
                StringWriter sw = execute("#9!qj5 Q4", new AmplInterpreterTest.Context());
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180434_literalMutationString180490 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template #9!qj5 Q4 not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_add180440_literalMutationString180454_failAssert0_add180998_failAssert0() throws Exception {
        try {
            {
                {
                    execute("(Fd<@3g!*f(j;!$nIVY", new AmplInterpreterTest.Context());
                    StringWriter sw = execute("(Fd<@3g!*f(j;!$nIVY", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_add180440_literalMutationString180454 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_add180440_literalMutationString180454_failAssert0_add180998 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template (Fd<@3g!*f(j;!$nIVY not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_add180439_literalMutationString180460_failAssert0() throws Exception {
        try {
            {
                execute(" ,(/:+hv`4O$+c!P/[m", new AmplInterpreterTest.Context());
                StringWriter sw = execute("infiniteparent.html", new AmplInterpreterTest.Context());
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180460 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  ,(/:+hv`4O$+c!P/[m not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180437_literalMutationString180502_failAssert0_literalMutationString180975_failAssert0() throws Exception {
        try {
            {
                {
                    StringWriter sw = execute("JRZ&Ux!pE}}O(tsGt/D", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180437_literalMutationString180502 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180437_literalMutationString180502_failAssert0_literalMutationString180975 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template JRZ&Ux!pE}}O(tsGt/D not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180434_literalMutationString180490_failAssert0_add181068_failAssert0() throws Exception {
        try {
            {
                {
                    StringWriter sw = execute("#9!qj5 Q4", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180434_literalMutationString180490 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180434_literalMutationString180490_failAssert0_add181068 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template #9!qj5 Q4 not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180436_literalMutationString180484_failAssert0_literalMutationString180770_failAssert0() throws Exception {
        try {
            {
                {
                    StringWriter sw = execute("0L02nj;&E:fj!p[A;7}", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180436_literalMutationString180484 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180436_literalMutationString180484_failAssert0_literalMutationString180770 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 0L02nj;&E:fj!p[A;7} not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_add180440_literalMutationString180454_failAssert0_add180999_failAssert0() throws Exception {
        try {
            {
                {
                    StringWriter sw = execute("(Fd<@3g!*f(j;!$nIVY", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_add180440_literalMutationString180454 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_add180440_literalMutationString180454_failAssert0_add180999 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template (Fd<@3g!*f(j;!$nIVY not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180438_literalMutationString180472_failAssert0_literalMutationString180747_failAssert0() throws Exception {
        try {
            {
                {
                    StringWriter sw = execute("xhxrOp;$iCXH;g0G^wcP+", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180438_literalMutationString180472 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180438_literalMutationString180472_failAssert0_literalMutationString180747 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template xhxrOp;$iCXH;g0G^wcP+ not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180436_literalMutationString180484_failAssert0_add181039_failAssert0() throws Exception {
        try {
            {
                {
                    StringWriter sw = execute("0L02nj;&E:fjp[A;7}", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180436_literalMutationString180484 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180436_literalMutationString180484_failAssert0_add181039 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 0L02nj;&E:fjp[A;7} not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180437_literalMutationString180497_failAssert0_literalMutationString180853_failAssert0() throws Exception {
        try {
            {
                {
                    StringWriter sw = execute("UG_mHTx)W>*2nI5{MH", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180437_literalMutationString180497 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180437_literalMutationString180497_failAssert0_literalMutationString180853 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template UG_mHTx)W>*2nI5{MH not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_add180439_literalMutationString180460_failAssert0_add181083_failAssert0() throws Exception {
        try {
            {
                {
                    execute(" ,(/:+hv`4O$+c!P/[m", new AmplInterpreterTest.Context());
                    StringWriter sw = execute("infiniteparent.html", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180460 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180460_failAssert0_add181083 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  ,(/:+hv`4O$+c!P/[m not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_add180439_literalMutationString180460_failAssert0_add181081_failAssert0() throws Exception {
        try {
            {
                {
                    execute(" ,(/:+hv`4O$+c!P/[m", new AmplInterpreterTest.Context());
                    execute(" ,(/:+hv`4O$+c!P/[m", new AmplInterpreterTest.Context());
                    StringWriter sw = execute("infiniteparent.html", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180460 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180460_failAssert0_add181081 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  ,(/:+hv`4O$+c!P/[m not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_add180439_literalMutationString180462_failAssert0_literalMutationString180934_failAssert0() throws Exception {
        try {
            {
                {
                    execute("inf[initeparent.html", new AmplInterpreterTest.Context());
                    StringWriter sw = execute("", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180462 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180462_failAssert0_literalMutationString180934 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template inf[initeparent.html not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_add180439_literalMutationString180462_failAssert0_literalMutationString180935_failAssert0() throws Exception {
        try {
            {
                {
                    execute("inf[initeparent.html", new AmplInterpreterTest.Context());
                    StringWriter sw = execute("page1.txt", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180462 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180462_failAssert0_literalMutationString180935 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template inf[initeparent.html not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_add180439_literalMutationString180460_failAssert0_literalMutationString180919_failAssert0() throws Exception {
        try {
            {
                {
                    execute(" ,(/:+hv`4$+c!P/[m", new AmplInterpreterTest.Context());
                    StringWriter sw = execute("infiniteparent.html", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180460 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_add180439_literalMutationString180460_failAssert0_literalMutationString180919 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  ,(/:+hv`4$+c!P/[m not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_add180440_literalMutationString180454_failAssert0_literalMutationString180651_failAssert0() throws Exception {
        try {
            {
                {
                    StringWriter sw = execute("(Fd<@3g!t*f(j;!$nIVY", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_add180440_literalMutationString180454 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_add180440_literalMutationString180454_failAssert0_literalMutationString180651 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template (Fd<@3g!t*f(j;!$nIVY not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180437_literalMutationString180502_failAssert0_add181096_failAssert0() throws Exception {
        try {
            {
                {
                    execute("[}u7+Lj|5]0dv5RWMpd", new AmplInterpreterTest.Context());
                    StringWriter sw = execute("[}u7+Lj|5]0dv5RWMpd", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180437_literalMutationString180502 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180437_literalMutationString180502_failAssert0_add181096 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [}u7+Lj|5]0dv5RWMpd not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180435_literalMutationString180495_failAssert0_add181020_failAssert0() throws Exception {
        try {
            {
                {
                    execute("ol6bj|LRhhw&8_+VB(", new AmplInterpreterTest.Context());
                    StringWriter sw = execute("ol6bj|LRhhw&8_+VB(", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180435_literalMutationString180495 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180435_literalMutationString180495_failAssert0_add181020 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template ol6bj|LRhhw&8_+VB( not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180434_literalMutationString180487_failAssert0_add181012_failAssert0() throws Exception {
        try {
            {
                {
                    execute(" does not exist", new AmplInterpreterTest.Context());
                    StringWriter sw = execute(" does not exist", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180434_literalMutationString180487 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180434_literalMutationString180487_failAssert0_add181012 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template  does not exist not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180436_literalMutationString180483_failAssert0_literalMutationString180774_failAssert0() throws Exception {
        try {
            {
                {
                    StringWriter sw = execute("0L0H2nsj;&E$fjp[A;7}", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180436_literalMutationString180483 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180436_literalMutationString180483_failAssert0_literalMutationString180774 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template 0L0H2nsj;&E$fjp[A;7} not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180436_literalMutationString180482_failAssert0() throws Exception {
        try {
            {
                StringWriter sw = execute("(Nl4i}&^Wju.Amlf+7w", new AmplInterpreterTest.Context());
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180436_literalMutationString180482 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template (Nl4i}&^Wju.Amlf+7w not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180437_literalMutationString180502_failAssert0_literalMutationString180977_failAssert0() throws Exception {
        try {
            {
                {
                    StringWriter sw = execute("[}u+Lj|5]0dv5RWMpd", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180437_literalMutationString180502 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180437_literalMutationString180502_failAssert0_literalMutationString180977 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [}u+Lj|5]0dv5RWMpd not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180437_literalMutationString180502_failAssert0() throws Exception {
        try {
            {
                StringWriter sw = execute("[}u7+Lj|5]0dv5RWMpd", new AmplInterpreterTest.Context());
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180437_literalMutationString180502 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template [}u7+Lj|5]0dv5RWMpd not found", expected.getMessage());
        }
    }

    public void testLimitedDepthRecursion_literalMutationString180435_literalMutationString180493_failAssert0_literalMutationString180713_failAssert0() throws Exception {
        try {
            {
                {
                    StringWriter sw = execute("page1.]xt", new AmplInterpreterTest.Context());
                }
                junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180435_literalMutationString180493 should have thrown MustacheNotFoundException");
            }
            junit.framework.TestCase.fail("testLimitedDepthRecursion_literalMutationString180435_literalMutationString180493_failAssert0_literalMutationString180713 should have thrown MustacheNotFoundException");
        } catch (MustacheNotFoundException expected) {
            TestCase.assertEquals("Template page1.]xt not found", expected.getMessage());
        }
    }

    private DefaultMustacheFactory initParallel() {
        DefaultMustacheFactory cf = createMustacheFactory();
        cf.setExecutorService(Executors.newCachedThreadPool());
        return cf;
    }

    protected void setUp() throws Exception {
        super.setUp();
        File file = new File("src/test/resources");
        root = (new File(file, "simple.html").exists()) ? file : new File("../src/test/resources");
    }
}

