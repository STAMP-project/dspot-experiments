diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/VerifyMojo.java b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/VerifyMojo.java
index c358d425e..0d7d209f5 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/VerifyMojo.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/VerifyMojo.java
@@ -24,7 +24,6 @@
 import java.util.Collection;
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.maven.plugin.MojoExecutionException;
@@ -73,29 +72,13 @@
     private boolean skip;
 
     /**
-     * Disables the translations visibility check.
+     * Disables the plugin execution.
      *
      * @since 4.3M1
      */
     @Parameter(property = "xar.verify.translationVisibility.skip", defaultValue = "false")
     private boolean translationVisibilitySkip;
 
-    /**
-     * Disables the check for the existence of the date fields.
-     *
-     * @since 10.7M1
-     */
-    @Parameter(property = "xar.dates.skip", defaultValue = "false")
-    private boolean skipDates;
-
-    /**
-     * Disables the check for the existence of the date fields.
-     *
-     * @since 10.7M1
-     */
-    @Parameter(property = "xar.dates.skip.documentList")
-    private Set<String> skipDatesDocumentList;
-
     @Override
     public void execute() throws MojoExecutionException, MojoFailureException
     {
@@ -193,11 +176,6 @@ public void execute() throws MojoExecutionException, MojoFailureException
             // Verification 12: Verify that  attachments have a mimetype set.
             verifyAttachmentMimetypes(errors, xdoc.getAttachmentData());
 
-            // Verification 13: Verify that date fields are not set.
-            if (!skipDates) {
-                verifyDateFields(errors, xdoc);
-            }
-
             // Display errors
             if (errors.isEmpty()) {
                 getLog().info(String.format("  Verifying [%s/%s]... ok", parentName, file.getName()));
@@ -221,23 +199,6 @@ public void execute() throws MojoExecutionException, MojoFailureException
         }
     }
 
-    private void verifyDateFields(List<String> errors, XWikiDocument xdoc)
-    {
-        if (!skipDatesDocumentList.contains(xdoc.getReference())) {
-            if (xdoc.isDatePresent()) {
-                errors.add("'date' field is present");
-            }
-
-            if (xdoc.isContentUpdateDatePresent()) {
-                errors.add("'contentUpdateDate' field is present");
-            }
-
-            if (xdoc.isCreationeDatePresent()) {
-                errors.add("'creationDate' field is present");
-            }
-        }
-    }
-
     private void verifyAuthor(List<String> errors, String author, String message)
     {
         if (!AUTHOR.equals(author)) {
diff --git a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/internal/XWikiDocument.java b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/internal/XWikiDocument.java
index 9e48c2fd1..add9f4eeb 100644
--- a/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/internal/XWikiDocument.java
+++ b/xwiki-commons-tools/xwiki-commons-tool-xar/xwiki-commons-tool-xar-plugin/src/main/java/org/xwiki/tool/xar/internal/XWikiDocument.java
@@ -133,21 +133,6 @@
      */
     private List<String> translationVisibilities = new ArrayList<>();
 
-    /**
-     * @see #datePresent()
-     */
-    private boolean datePresent;
-
-    /**
-     * @see #contentUpdateDatePresent()
-     */
-    private boolean contentUpdateDatePresent;
-
-    /**
-     * @see #creationDatePresent()
-     */
-    private boolean creationDatePresent;
-
     /**
      * Parse XML file to extract document information.
      *
@@ -185,7 +170,20 @@ public void fromXML(Document domdoc) throws DocumentException
 
         Element rootElement = domdoc.getRootElement();
 
-        this.reference = readDocumentReference(domdoc);
+        this.reference = rootElement.attributeValue("reference");
+        if (this.reference == null) {
+            String name = readElement(rootElement, "name");
+            String space = readElement(rootElement, "web");
+
+            // If the reference, name and space don't exist we consider that we're not reading an XML that corresponds
+            // to a wiki page.
+            if (name == null && space == null) {
+                throw new DocumentException(String.format("Content doesn't point to valid wiki page XML",
+                    domdoc.getName()));
+            }
+
+            this.reference = space == null ? name : escapeSpaceOrPageName(space) + '.' + escapeSpaceOrPageName(name);
+        }
 
         this.locale = rootElement.attributeValue("locale");
         if (this.locale == null) {
@@ -206,10 +204,6 @@ public void fromXML(Document domdoc) throws DocumentException
         this.title = readElement(rootElement, "title");
         this.syntaxId = readElement(rootElement, "syntaxId");
 
-        this.datePresent = isElementPresent(rootElement, "date");
-        this.contentUpdateDatePresent = isElementPresent(rootElement, "contentUpdateDate");
-        this.creationDatePresent = isElementPresent(rootElement, "creationDate");
-
         // Does this document contain a XWiki.TranslationDocumentClass xobject?
         if (rootElement.selectNodes("//object/className[text() = 'XWiki.TranslationDocumentClass']").size() > 0) {
             this.containsTranslations = true;
@@ -222,44 +216,6 @@ public void fromXML(Document domdoc) throws DocumentException
         }
     }
 
-    /**
-     * @param domdoc the DOM document containing and XML wiki page
-     * @return the reference of the wiki page
-     * @throws DocumentException if it is not a valid XML wiki page
-     */
-    private static String readDocumentReference(Document domdoc) throws DocumentException
-    {
-        Element rootElement = domdoc.getRootElement();
-
-        String result = rootElement.attributeValue("reference");
-        if (result == null) {
-            String name = readElement(rootElement, "name");
-            String space = readElement(rootElement, "web");
-
-            // If the reference, name and space don't exist we consider that we're not reading an XML that corresponds
-            // to a wiki page.
-            if (name == null && space == null) {
-                throw new DocumentException(
-                    String.format("Content doesn't point to valid wiki page XML", domdoc.getName()));
-            }
-
-            result = space == null ? name : escapeSpaceOrPageName(space) + '.' + escapeSpaceOrPageName(name);
-        }
-
-        return result;
-    }
-
-    /**
-     * @param rootElement the root XML element under which to find the element
-     * @param elementName the name of the element to read
-     * @return {@code true} if the element is present; {@code false} otherwise
-     */
-    public static boolean isElementPresent(Element rootElement, String elementName)
-    {
-        Element element = rootElement.element(elementName);
-        return element != null;
-    }
-
     /**
      * Read an element from the XML.
      *
@@ -267,7 +223,7 @@ public static boolean isElementPresent(Element rootElement, String elementName)
      * @param elementName the name of the element to read
      * @return null or the element value as a String
      */
-    public static String readElement(Element rootElement, String elementName)
+    private String readElement(Element rootElement, String elementName)
     {
         String result = null;
         Element element = rootElement.element(elementName);
@@ -277,7 +233,7 @@ public static String readElement(Element rootElement, String elementName)
         return result;
     }
 
-    public static List<Map<String, String>> readAttachmentData(Element rootElement)
+    private List<Map<String, String>> readAttachmentData(Element rootElement)
     {
         List<Map<String, String>> data = new ArrayList<>();
         for (Object attachmentNode : rootElement.elements("attachment")) {
@@ -473,7 +429,7 @@ public String getSyntaxId()
      * @param name the name to escape
      * @return the escaped name
      */
-    public static String escapeSpaceOrPageName(String name)
+    private String escapeSpaceOrPageName(String name)
     {
         return name != null ? name.replaceAll("[\\\\\\.]", "\\\\$0") : null;
     }
@@ -495,28 +451,4 @@ public static String getReference(File file)
 
         return doc.getReference();
     }
-
-    /**
-     * @return {@code true} if the date field is present; false otherwise
-     */
-    public boolean isDatePresent()
-    {
-        return datePresent;
-    }
-
-    /**
-     * @return {@code true} if the contentUpdateDate field is present; false otherwise
-     */
-    public boolean isContentUpdateDatePresent()
-    {
-        return contentUpdateDatePresent;
-    }
-
-    /**
-     * @return {@code true} if the creationDate field is present; false otherwise
-     */
-    public boolean isCreationeDatePresent()
-    {
-        return creationDatePresent;
-    }
 }
