diff --git a/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-api/src/main/java/org/xwiki/diff/internal/DefaultDiffManager.java b/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-api/src/main/java/org/xwiki/diff/internal/DefaultDiffManager.java
index 4373f1a..f9bad1f 100644
--- a/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-api/src/main/java/org/xwiki/diff/internal/DefaultDiffManager.java
+++ b/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-api/src/main/java/org/xwiki/diff/internal/DefaultDiffManager.java
@@ -127,16 +127,6 @@
 
             if (patchCurrent.isEmpty()) {
                 mergeResult.setMerged(next);
-            } else if (isFullyModified(commonAncestor, patchCurrent)) {
-                // If current is completely modified compared to the common ancestor we assume any change in next is
-                // a conflict
-                // ... except if the current content is identical to the next one!
-                if (!current.equals(next)) {
-                    Delta<E> deltaNext = nextElement(patchNext);
-                    Delta<E> deltaCurrent = nextElement(patchCurrent);
-                    logConflict(mergeResult, deltaCurrent, deltaNext);
-                }
-                mergeResult.setMerged(fallback(commonAncestor, next, current, configuration));
             } else {
                 merge(mergeResult, commonAncestor, patchNext, patchCurrent, configuration);
             }
@@ -145,28 +135,8 @@
         return mergeResult;
     }
 
-    private <E> List<E> fallback(List<E> commonAncestor, List<E> next, List<E> current,
-            MergeConfiguration<E> configuration)
-    {
-        Version fallbackVersion;
-        if (configuration != null) {
-            fallbackVersion = configuration.getFallbackOnConflict();
-        } else {
-            fallbackVersion = Version.CURRENT;
-        }
-
-        switch (fallbackVersion) {
-            case NEXT:
-                return next;
-            case PREVIOUS:
-                return commonAncestor;
-            default:
-                return current;
-        }
-    }
-
     private <E> int fallback(List<E> commonAncestor, Delta<E> deltaNext, Delta<E> deltaCurrent, List<E> merged,
-            int currentIndex, MergeConfiguration<E> configuration)
+        int currentIndex, MergeConfiguration<E> configuration)
     {
         int newIndex = currentIndex;
 
@@ -387,16 +357,4 @@
     {
         return delta != null && delta.getPrevious().getIndex() == index;
     }
-
-    /**
-     * Check if the content is completely different between the ancestor and the current version
-     *
-     * @param <E> the type of compared elements
-     * @param commonAncestor previous version
-     * @param patchCurrent patch to the current version
-     * @return either or not the user has changed everything
-     */
-    private <E> boolean isFullyModified(List commonAncestor, Patch<E> patchCurrent) {
-        return patchCurrent.size() == 1 && commonAncestor.size() == patchCurrent.get(0).getPrevious().size();
-    }
 }
diff --git a/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-api/src/test/java/org/xwiki/diff/internal/DefaultDiffManagerTest.java b/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-api/src/test/java/org/xwiki/diff/internal/DefaultDiffManagerTest.java
index 65d0aa7..3a6a7db 100644
--- a/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-api/src/test/java/org/xwiki/diff/internal/DefaultDiffManagerTest.java
+++ b/xwiki-commons-core/xwiki-commons-diff/xwiki-commons-diff-api/src/test/java/org/xwiki/diff/internal/DefaultDiffManagerTest.java
@@ -264,28 +264,28 @@ public void testMergeCharList() throws Exception
         Assert.assertEquals(toCharacters("aijb"), result.getMerged());
 
         result =
-            this.mocker.getComponentUnderTest().merge(toCharacters("d"), toCharacters("ab d"), toCharacters("abc d"), null);
+            this.mocker.getComponentUnderTest().merge(toCharacters(""), toCharacters("ab"), toCharacters("abc"), null);
 
         Assert.assertEquals(0, result.getLog().getLogs(LogLevel.ERROR).size());
-        Assert.assertEquals(toCharacters("abc d"), result.getMerged());
+        Assert.assertEquals(toCharacters("abc"), result.getMerged());
 
         result =
-            this.mocker.getComponentUnderTest().merge(toCharacters("d"), toCharacters("abc d"), toCharacters("ab d"), null);
+            this.mocker.getComponentUnderTest().merge(toCharacters(""), toCharacters("abc"), toCharacters("ab"), null);
 
         Assert.assertEquals(0, result.getLog().getLogs(LogLevel.ERROR).size());
-        Assert.assertEquals(toCharacters("abc d"), result.getMerged());
+        Assert.assertEquals(toCharacters("abc"), result.getMerged());
 
         result =
-            this.mocker.getComponentUnderTest().merge(toCharacters("d"), toCharacters("bcd"), toCharacters("abcd"), null);
+            this.mocker.getComponentUnderTest().merge(toCharacters(""), toCharacters("bc"), toCharacters("abc"), null);
 
         Assert.assertEquals(0, result.getLog().getLogs(LogLevel.ERROR).size());
-        Assert.assertEquals(toCharacters("abcd"), result.getMerged());
+        Assert.assertEquals(toCharacters("abc"), result.getMerged());
 
         result =
-            this.mocker.getComponentUnderTest().merge(toCharacters("d"), toCharacters("abcd"), toCharacters("bcd"), null);
+            this.mocker.getComponentUnderTest().merge(toCharacters(""), toCharacters("abc"), toCharacters("bc"), null);
 
         Assert.assertEquals(0, result.getLog().getLogs(LogLevel.ERROR).size());
-        Assert.assertEquals(toCharacters("abcd"), result.getMerged());
+        Assert.assertEquals(toCharacters("abc"), result.getMerged());
 
         // Misc
 
@@ -354,24 +354,4 @@ public void testMergeWithEmptyNew() throws Exception
         Assert.assertEquals(1, result.getLog().getLogs(LogLevel.ERROR).size());
         Assert.assertEquals(toCharacters("b"), result.getMerged());
     }
-
-    @Test
-    public void testMergeWhenUserHasChangedAllContent() throws Exception
-    {
-        MergeResult<String> result;
-
-        // Test 1: All content has changed between previous and current
-        result = mocker.getComponentUnderTest().merge(Arrays.asList("Line 1", "Line 2", "Line 3"),
-                Arrays.asList("Line 1", "Line 2 modified", "Line 3", "Line 4 Added"),
-                Arrays.asList("New content", "That is completely different"), null);
-
-        Assert.assertEquals(Arrays.asList("New content", "That is completely different"), result.getMerged());
-
-        // Test 2: All content has been deleted between previous and current
-        result = mocker.getComponentUnderTest().merge(Arrays.asList("Line 1", "Line 2", "Line 3"),
-                Arrays.asList("Line 1", "Line 2 modified", "Line 3", "Line 4 Added"),
-                Collections.emptyList(), null);
-
-        Assert.assertEquals(Collections.emptyList(), result.getMerged());
-    }
 }
