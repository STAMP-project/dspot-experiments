package org.mockserver.validator.jsonschema;


import org.hamcrest.core.Is;
import org.junit.Assert;
import org.junit.Test;
import org.mockserver.logging.MockServerLogger;


/**
 *
 *
 * @author jamesdbloom
 */
public class JsonSchemaExpectationValidatorIntegrationTest {
    // given
    private JsonSchemaValidator jsonSchemaValidator = new JsonSchemaExpectationValidator(new MockServerLogger());

    @Test
    public void shouldValidateValidCompleteExpectationWithHttpResponse() {
        // when
        Assert.assertThat(jsonSchemaValidator.isValid((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("{" + (NEW_LINE)) + "  \"httpRequest\" : {") + (NEW_LINE)) + "    \"method\" : \"someMethod\",") + (NEW_LINE)) + "    \"path\" : \"somePath\",") + (NEW_LINE)) + "    \"queryStringParameters\" : [ {") + (NEW_LINE)) + "      \"name\" : \"queryStringParameterNameOne\",") + (NEW_LINE)) + "      \"values\" : [ \"queryStringParameterValueOne_One\", \"queryStringParameterValueOne_Two\" ]") + (NEW_LINE)) + "    }, {") + (NEW_LINE)) + "      \"name\" : \"queryStringParameterNameTwo\",") + (NEW_LINE)) + "      \"values\" : [ \"queryStringParameterValueTwo_One\" ]") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"body\" : {") + (NEW_LINE)) + "      \"type\" : \"STRING\",") + (NEW_LINE)) + "      \"string\" : \"someBody\"") + (NEW_LINE)) + "    },") + (NEW_LINE)) + "    \"cookies\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someCookieName\",") + (NEW_LINE)) + "      \"value\" : \"someCookieValue\"") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"headers\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someHeaderName\",") + (NEW_LINE)) + "      \"values\" : [ \"someHeaderValue\" ]") + (NEW_LINE)) + "    } ]") + (NEW_LINE)) + "  },") + (NEW_LINE)) + "  \"httpResponse\" : {") + (NEW_LINE)) + "    \"statusCode\" : 304,") + (NEW_LINE)) + "    \"body\" : \"someBody\",") + (NEW_LINE)) + "    \"cookies\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someCookieName\",") + (NEW_LINE)) + "      \"value\" : \"someCookieValue\"") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"headers\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someHeaderName\",") + (NEW_LINE)) + "      \"values\" : [ \"someHeaderValue\" ]") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"delay\" : {") + (NEW_LINE)) + "      \"timeUnit\" : \"MICROSECONDS\",") + (NEW_LINE)) + "      \"value\" : 1") + (NEW_LINE)) + "    },") + (NEW_LINE)) + "    \"connectionOptions\" : {") + (NEW_LINE)) + "      \"suppressContentLengthHeader\" : true,") + (NEW_LINE)) + "      \"contentLengthHeaderOverride\" : 50,") + (NEW_LINE)) + "      \"suppressConnectionHeader\" : true,") + (NEW_LINE)) + "      \"keepAliveOverride\" : true,") + (NEW_LINE)) + "      \"closeSocket\" : true") + (NEW_LINE)) + "    }") + (NEW_LINE)) + "  },") + (NEW_LINE)) + "  \"times\" : {") + (NEW_LINE)) + "    \"remainingTimes\" : 5,") + (NEW_LINE)) + "    \"unlimited\" : false") + (NEW_LINE)) + "  }") + (NEW_LINE)) + "}")), Is.is(""));
    }

    @Test
    public void shouldValidateValidCompleteExpectationWithHttpResponseTemplate() {
        // when
        Assert.assertThat(jsonSchemaValidator.isValid((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("{" + (NEW_LINE)) + "  \"httpRequest\" : {") + (NEW_LINE)) + "    \"method\" : \"someMethod\",") + (NEW_LINE)) + "    \"path\" : \"somePath\",") + (NEW_LINE)) + "    \"queryStringParameters\" : [ {") + (NEW_LINE)) + "      \"name\" : \"queryStringParameterNameOne\",") + (NEW_LINE)) + "      \"values\" : [ \"queryStringParameterValueOne_One\", \"queryStringParameterValueOne_Two\" ]") + (NEW_LINE)) + "    }, {") + (NEW_LINE)) + "      \"name\" : \"queryStringParameterNameTwo\",") + (NEW_LINE)) + "      \"values\" : [ \"queryStringParameterValueTwo_One\" ]") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"body\" : {") + (NEW_LINE)) + "      \"type\" : \"STRING\",") + (NEW_LINE)) + "      \"string\" : \"someBody\"") + (NEW_LINE)) + "    },") + (NEW_LINE)) + "    \"cookies\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someCookieName\",") + (NEW_LINE)) + "      \"value\" : \"someCookieValue\"") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"headers\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someHeaderName\",") + (NEW_LINE)) + "      \"values\" : [ \"someHeaderValue\" ]") + (NEW_LINE)) + "    } ]") + (NEW_LINE)) + "  },") + (NEW_LINE)) + "  \"httpResponseTemplate\" : {") + (NEW_LINE)) + "    \"templateType\" : \"JAVASCRIPT\",") + (NEW_LINE)) + "    \"template\" : \"return {};\",") + (NEW_LINE)) + "    \"delay\" : {") + (NEW_LINE)) + "      \"timeUnit\" : \"MICROSECONDS\",") + (NEW_LINE)) + "      \"value\" : 1") + (NEW_LINE)) + "    }") + (NEW_LINE)) + "  },") + (NEW_LINE)) + "  \"times\" : {") + (NEW_LINE)) + "    \"remainingTimes\" : 5,") + (NEW_LINE)) + "    \"unlimited\" : false") + (NEW_LINE)) + "  }") + (NEW_LINE)) + "}")), Is.is(""));
    }

    @Test
    public void shouldValidateValidCompleteExpectationWithHttpResponseClassCallback() {
        // when
        Assert.assertThat(jsonSchemaValidator.isValid((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("{" + (NEW_LINE)) + "  \"httpRequest\" : {") + (NEW_LINE)) + "    \"method\" : \"someMethod\",") + (NEW_LINE)) + "    \"path\" : \"somePath\",") + (NEW_LINE)) + "    \"queryStringParameters\" : [ {") + (NEW_LINE)) + "      \"name\" : \"queryStringParameterNameOne\",") + (NEW_LINE)) + "      \"values\" : [ \"queryStringParameterValueOne_One\", \"queryStringParameterValueOne_Two\" ]") + (NEW_LINE)) + "    }, {") + (NEW_LINE)) + "      \"name\" : \"queryStringParameterNameTwo\",") + (NEW_LINE)) + "      \"values\" : [ \"queryStringParameterValueTwo_One\" ]") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"body\" : {") + (NEW_LINE)) + "      \"type\" : \"STRING\",") + (NEW_LINE)) + "      \"string\" : \"someBody\"") + (NEW_LINE)) + "    },") + (NEW_LINE)) + "    \"cookies\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someCookieName\",") + (NEW_LINE)) + "      \"value\" : \"someCookieValue\"") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"headers\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someHeaderName\",") + (NEW_LINE)) + "      \"values\" : [ \"someHeaderValue\" ]") + (NEW_LINE)) + "    } ]") + (NEW_LINE)) + "  },") + (NEW_LINE)) + "  \"httpResponseClassCallback\" : {") + (NEW_LINE)) + "    \"callbackClass\" : \"someClass\"") + (NEW_LINE)) + "  },") + (NEW_LINE)) + "  \"times\" : {") + (NEW_LINE)) + "    \"remainingTimes\" : 5,") + (NEW_LINE)) + "    \"unlimited\" : false") + (NEW_LINE)) + "  }") + (NEW_LINE)) + "}")), Is.is(""));
    }

    @Test
    public void shouldValidateValidCompleteExpectationWithHttpResponseObjectCallback() {
        // when
        Assert.assertThat(jsonSchemaValidator.isValid((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("{" + (NEW_LINE)) + "  \"httpRequest\" : {") + (NEW_LINE)) + "    \"method\" : \"someMethod\",") + (NEW_LINE)) + "    \"path\" : \"somePath\",") + (NEW_LINE)) + "    \"queryStringParameters\" : [ {") + (NEW_LINE)) + "      \"name\" : \"queryStringParameterNameOne\",") + (NEW_LINE)) + "      \"values\" : [ \"queryStringParameterValueOne_One\", \"queryStringParameterValueOne_Two\" ]") + (NEW_LINE)) + "    }, {") + (NEW_LINE)) + "      \"name\" : \"queryStringParameterNameTwo\",") + (NEW_LINE)) + "      \"values\" : [ \"queryStringParameterValueTwo_One\" ]") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"body\" : {") + (NEW_LINE)) + "      \"type\" : \"STRING\",") + (NEW_LINE)) + "      \"string\" : \"someBody\"") + (NEW_LINE)) + "    },") + (NEW_LINE)) + "    \"cookies\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someCookieName\",") + (NEW_LINE)) + "      \"value\" : \"someCookieValue\"") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"headers\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someHeaderName\",") + (NEW_LINE)) + "      \"values\" : [ \"someHeaderValue\" ]") + (NEW_LINE)) + "    } ]") + (NEW_LINE)) + "  },") + (NEW_LINE)) + "  \"httpResponseObjectCallback\" : {") + (NEW_LINE)) + "    \"clientId\" : \"someClientId\"") + (NEW_LINE)) + "  },") + (NEW_LINE)) + "  \"times\" : {") + (NEW_LINE)) + "    \"remainingTimes\" : 5,") + (NEW_LINE)) + "    \"unlimited\" : false") + (NEW_LINE)) + "  }") + (NEW_LINE)) + "}")), Is.is(""));
    }

    @Test
    public void shouldValidateValidCompleteExpectationWithHttpForward() {
        // when
        Assert.assertThat(jsonSchemaValidator.isValid(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("{" + (NEW_LINE)) + "  \"httpRequest\" : {") + (NEW_LINE)) + "    \"method\" : \"someMethod\",") + (NEW_LINE)) + "    \"path\" : \"somePath\",") + (NEW_LINE)) + "    \"queryStringParameters\" : [ {") + (NEW_LINE)) + "      \"name\" : \"queryStringParameterNameOne\",") + (NEW_LINE)) + "      \"values\" : [ \"queryStringParameterValueOne_One\", \"queryStringParameterValueOne_Two\" ]") + (NEW_LINE)) + "    }, {") + (NEW_LINE)) + "      \"name\" : \"queryStringParameterNameTwo\",") + (NEW_LINE)) + "      \"values\" : [ \"queryStringParameterValueTwo_One\" ]") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"body\" : {") + (NEW_LINE)) + "      \"type\" : \"STRING\",") + (NEW_LINE)) + "      \"string\" : \"someBody\"") + (NEW_LINE)) + "    },") + (NEW_LINE)) + "    \"cookies\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someCookieName\",") + (NEW_LINE)) + "      \"value\" : \"someCookieValue\"") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"headers\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someHeaderName\",") + (NEW_LINE)) + "      \"values\" : [ \"someHeaderValue\" ]") + (NEW_LINE)) + "    } ]") + (NEW_LINE)) + "  },") + (NEW_LINE)) + "  \"httpForward\" : {") + (NEW_LINE)) + "    \"host\" : \"someHost\",") + (NEW_LINE)) + "    \"port\" : 1234,") + (NEW_LINE)) + "    \"scheme\" : \"HTTPS\"") + "  },") + (NEW_LINE)) + "  \"times\" : {") + (NEW_LINE)) + "    \"remainingTimes\" : 5,") + (NEW_LINE)) + "    \"unlimited\" : false") + (NEW_LINE)) + "  }") + (NEW_LINE)) + "}")), Is.is(""));
    }

    @Test
    public void shouldValidateValidCompleteExpectationWithHttpForwardTemplate() {
        // when
        Assert.assertThat(jsonSchemaValidator.isValid((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("{" + (NEW_LINE)) + "  \"httpRequest\" : {") + (NEW_LINE)) + "    \"method\" : \"someMethod\",") + (NEW_LINE)) + "    \"path\" : \"somePath\",") + (NEW_LINE)) + "    \"queryStringParameters\" : [ {") + (NEW_LINE)) + "      \"name\" : \"queryStringParameterNameOne\",") + (NEW_LINE)) + "      \"values\" : [ \"queryStringParameterValueOne_One\", \"queryStringParameterValueOne_Two\" ]") + (NEW_LINE)) + "    }, {") + (NEW_LINE)) + "      \"name\" : \"queryStringParameterNameTwo\",") + (NEW_LINE)) + "      \"values\" : [ \"queryStringParameterValueTwo_One\" ]") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"body\" : {") + (NEW_LINE)) + "      \"type\" : \"STRING\",") + (NEW_LINE)) + "      \"string\" : \"someBody\"") + (NEW_LINE)) + "    },") + (NEW_LINE)) + "    \"cookies\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someCookieName\",") + (NEW_LINE)) + "      \"value\" : \"someCookieValue\"") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"headers\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someHeaderName\",") + (NEW_LINE)) + "      \"values\" : [ \"someHeaderValue\" ]") + (NEW_LINE)) + "    } ]") + (NEW_LINE)) + "  },") + (NEW_LINE)) + "  \"httpForwardTemplate\" : {") + (NEW_LINE)) + "    \"templateType\" : \"JAVASCRIPT\",") + (NEW_LINE)) + "    \"template\" : \"return {};\",") + (NEW_LINE)) + "    \"delay\" : {") + (NEW_LINE)) + "      \"timeUnit\" : \"MICROSECONDS\",") + (NEW_LINE)) + "      \"value\" : 1") + (NEW_LINE)) + "    }") + (NEW_LINE)) + "  },") + (NEW_LINE)) + "  \"times\" : {") + (NEW_LINE)) + "    \"remainingTimes\" : 5,") + (NEW_LINE)) + "    \"unlimited\" : false") + (NEW_LINE)) + "  }") + (NEW_LINE)) + "}")), Is.is(""));
    }

    @Test
    public void shouldValidateValidCompleteExpectationWithHttpForwardClassCallback() {
        // when
        Assert.assertThat(jsonSchemaValidator.isValid((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("{" + (NEW_LINE)) + "  \"httpRequest\" : {") + (NEW_LINE)) + "    \"method\" : \"someMethod\",") + (NEW_LINE)) + "    \"path\" : \"somePath\",") + (NEW_LINE)) + "    \"queryStringParameters\" : [ {") + (NEW_LINE)) + "      \"name\" : \"queryStringParameterNameOne\",") + (NEW_LINE)) + "      \"values\" : [ \"queryStringParameterValueOne_One\", \"queryStringParameterValueOne_Two\" ]") + (NEW_LINE)) + "    }, {") + (NEW_LINE)) + "      \"name\" : \"queryStringParameterNameTwo\",") + (NEW_LINE)) + "      \"values\" : [ \"queryStringParameterValueTwo_One\" ]") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"body\" : {") + (NEW_LINE)) + "      \"type\" : \"STRING\",") + (NEW_LINE)) + "      \"string\" : \"someBody\"") + (NEW_LINE)) + "    },") + (NEW_LINE)) + "    \"cookies\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someCookieName\",") + (NEW_LINE)) + "      \"value\" : \"someCookieValue\"") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"headers\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someHeaderName\",") + (NEW_LINE)) + "      \"values\" : [ \"someHeaderValue\" ]") + (NEW_LINE)) + "    } ]") + (NEW_LINE)) + "  },") + (NEW_LINE)) + "  \"httpForwardClassCallback\" : {") + (NEW_LINE)) + "    \"callbackClass\" : \"someClass\"") + (NEW_LINE)) + "  },") + (NEW_LINE)) + "  \"times\" : {") + (NEW_LINE)) + "    \"remainingTimes\" : 5,") + (NEW_LINE)) + "    \"unlimited\" : false") + (NEW_LINE)) + "  }") + (NEW_LINE)) + "}")), Is.is(""));
    }

    @Test
    public void shouldValidateValidCompleteExpectationWithHttpForwardObjectCallback() {
        // when
        Assert.assertThat(jsonSchemaValidator.isValid((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("{" + (NEW_LINE)) + "  \"httpRequest\" : {") + (NEW_LINE)) + "    \"method\" : \"someMethod\",") + (NEW_LINE)) + "    \"path\" : \"somePath\",") + (NEW_LINE)) + "    \"queryStringParameters\" : [ {") + (NEW_LINE)) + "      \"name\" : \"queryStringParameterNameOne\",") + (NEW_LINE)) + "      \"values\" : [ \"queryStringParameterValueOne_One\", \"queryStringParameterValueOne_Two\" ]") + (NEW_LINE)) + "    }, {") + (NEW_LINE)) + "      \"name\" : \"queryStringParameterNameTwo\",") + (NEW_LINE)) + "      \"values\" : [ \"queryStringParameterValueTwo_One\" ]") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"body\" : {") + (NEW_LINE)) + "      \"type\" : \"STRING\",") + (NEW_LINE)) + "      \"string\" : \"someBody\"") + (NEW_LINE)) + "    },") + (NEW_LINE)) + "    \"cookies\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someCookieName\",") + (NEW_LINE)) + "      \"value\" : \"someCookieValue\"") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"headers\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someHeaderName\",") + (NEW_LINE)) + "      \"values\" : [ \"someHeaderValue\" ]") + (NEW_LINE)) + "    } ]") + (NEW_LINE)) + "  },") + (NEW_LINE)) + "  \"httpForwardObjectCallback\" : {") + (NEW_LINE)) + "    \"clientId\" : \"someClientId\"") + (NEW_LINE)) + "  },") + (NEW_LINE)) + "  \"times\" : {") + (NEW_LINE)) + "    \"remainingTimes\" : 5,") + (NEW_LINE)) + "    \"unlimited\" : false") + (NEW_LINE)) + "  }") + (NEW_LINE)) + "}")), Is.is(""));
    }

    @Test
    public void shouldValidateValidCompleteExpectationWithHttpOverrideForwardedRequest() {
        // when
        Assert.assertThat(jsonSchemaValidator.isValid((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("{" + (NEW_LINE)) + "  \"httpRequest\" : {") + (NEW_LINE)) + "    \"method\" : \"someMethod\",") + (NEW_LINE)) + "    \"path\" : \"somePath\",") + (NEW_LINE)) + "    \"queryStringParameters\" : [ {") + (NEW_LINE)) + "      \"name\" : \"queryStringParameterNameOne\",") + (NEW_LINE)) + "      \"values\" : [ \"queryStringParameterValueOne_One\", \"queryStringParameterValueOne_Two\" ]") + (NEW_LINE)) + "    }, {") + (NEW_LINE)) + "      \"name\" : \"queryStringParameterNameTwo\",") + (NEW_LINE)) + "      \"values\" : [ \"queryStringParameterValueTwo_One\" ]") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"body\" : {") + (NEW_LINE)) + "      \"type\" : \"STRING\",") + (NEW_LINE)) + "      \"string\" : \"someBody\"") + (NEW_LINE)) + "    },") + (NEW_LINE)) + "    \"cookies\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someCookieName\",") + (NEW_LINE)) + "      \"value\" : \"someCookieValue\"") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"headers\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someHeaderName\",") + (NEW_LINE)) + "      \"values\" : [ \"someHeaderValue\" ]") + (NEW_LINE)) + "    } ]") + (NEW_LINE)) + "  },") + (NEW_LINE)) + "  \"httpOverrideForwardedRequest\" : {") + (NEW_LINE)) + "    \"httpRequest\" : {") + (NEW_LINE)) + "      \"method\" : \"some_overridden_method\",") + (NEW_LINE)) + "      \"path\" : \"some_overridden_path\",") + (NEW_LINE)) + "      \"body\" : {") + (NEW_LINE)) + "        \"type\" : \"STRING\",") + (NEW_LINE)) + "        \"string\" : \"some_overridden_body\"") + (NEW_LINE)) + "      }") + (NEW_LINE)) + "    },") + (NEW_LINE)) + "    \"delay\" : {") + (NEW_LINE)) + "      \"timeUnit\" : \"MICROSECONDS\",") + (NEW_LINE)) + "      \"value\" : 1") + (NEW_LINE)) + "    }") + (NEW_LINE)) + "  },") + (NEW_LINE)) + "  \"times\" : {") + (NEW_LINE)) + "    \"remainingTimes\" : 5,") + (NEW_LINE)) + "    \"unlimited\" : false") + (NEW_LINE)) + "  }") + (NEW_LINE)) + "}")), Is.is(""));
    }

    @Test
    public void shouldValidateValidCompleteExpectationWithHttpError() {
        // when
        Assert.assertThat(jsonSchemaValidator.isValid((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("{" + (NEW_LINE)) + "  \"httpRequest\" : {") + (NEW_LINE)) + "    \"method\" : \"someMethod\",") + (NEW_LINE)) + "    \"path\" : \"somePath\",") + (NEW_LINE)) + "    \"queryStringParameters\" : [ {") + (NEW_LINE)) + "      \"name\" : \"queryStringParameterNameOne\",") + (NEW_LINE)) + "      \"values\" : [ \"queryStringParameterValueOne_One\", \"queryStringParameterValueOne_Two\" ]") + (NEW_LINE)) + "    }, {") + (NEW_LINE)) + "      \"name\" : \"queryStringParameterNameTwo\",") + (NEW_LINE)) + "      \"values\" : [ \"queryStringParameterValueTwo_One\" ]") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"body\" : {") + (NEW_LINE)) + "      \"type\" : \"STRING\",") + (NEW_LINE)) + "      \"string\" : \"someBody\"") + (NEW_LINE)) + "    },") + (NEW_LINE)) + "    \"cookies\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someCookieName\",") + (NEW_LINE)) + "      \"value\" : \"someCookieValue\"") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"headers\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someHeaderName\",") + (NEW_LINE)) + "      \"values\" : [ \"someHeaderValue\" ]") + (NEW_LINE)) + "    } ]") + (NEW_LINE)) + "  },") + (NEW_LINE)) + "  \"httpError\" : {") + (NEW_LINE)) + "    \"delay\" : {") + (NEW_LINE)) + "      \"timeUnit\" : \"HOURS\",") + (NEW_LINE)) + "      \"value\" : 1") + (NEW_LINE)) + "    },") + (NEW_LINE)) + "    \"dropConnection\" : true,") + (NEW_LINE)) + "    \"responseBytes\" : \"c29tZV9ieXRlcw==\"") + (NEW_LINE)) + "  },") + (NEW_LINE)) + "  \"times\" : {") + (NEW_LINE)) + "    \"remainingTimes\" : 5,") + (NEW_LINE)) + "    \"unlimited\" : false") + (NEW_LINE)) + "  }") + (NEW_LINE)) + "}")), Is.is(""));
    }

    @Test
    public void shouldValidateValidExpectationOnlyWithHttpResponse() {
        // when
        Assert.assertThat(jsonSchemaValidator.isValid((((((((((((((((((((((((((((((((((((((((((((((((("{" + (NEW_LINE)) + "  \"httpResponse\" : {") + (NEW_LINE)) + "    \"statusCode\" : 304,") + (NEW_LINE)) + "    \"body\" : \"someBody\",") + (NEW_LINE)) + "    \"cookies\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someCookieName\",") + (NEW_LINE)) + "      \"value\" : \"someCookieValue\"") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"headers\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someHeaderName\",") + (NEW_LINE)) + "      \"values\" : [ \"someHeaderValue\" ]") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"delay\" : {") + (NEW_LINE)) + "      \"timeUnit\" : \"MICROSECONDS\",") + (NEW_LINE)) + "      \"value\" : 1") + (NEW_LINE)) + "    },") + (NEW_LINE)) + "    \"connectionOptions\" : {") + (NEW_LINE)) + "      \"suppressContentLengthHeader\" : true,") + (NEW_LINE)) + "      \"contentLengthHeaderOverride\" : 50,") + (NEW_LINE)) + "      \"suppressConnectionHeader\" : true,") + (NEW_LINE)) + "      \"keepAliveOverride\" : true,") + (NEW_LINE)) + "      \"closeSocket\" : true") + (NEW_LINE)) + "    }") + (NEW_LINE)) + "  }") + (NEW_LINE)) + "}")), Is.is(""));
    }

    @Test
    public void shouldValidateInvalidCompleteExpectationMissingAction() {
        // when
        Assert.assertThat(jsonSchemaValidator.isValid((((((((((((((((((((((((((((((((((((((((((((((((((((((((("{" + (NEW_LINE)) + "  \"httpRequest\" : {") + (NEW_LINE)) + "    \"method\" : \"someMethod\",") + (NEW_LINE)) + "    \"path\" : \"somePath\",") + (NEW_LINE)) + "    \"queryStringParameters\" : [ {") + (NEW_LINE)) + "      \"name\" : \"queryStringParameterNameOne\",") + (NEW_LINE)) + "      \"values\" : [ \"queryStringParameterValueOne_One\", \"queryStringParameterValueOne_Two\" ]") + (NEW_LINE)) + "    }, {") + (NEW_LINE)) + "      \"name\" : \"queryStringParameterNameTwo\",") + (NEW_LINE)) + "      \"values\" : [ \"queryStringParameterValueTwo_One\" ]") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"body\" : {") + (NEW_LINE)) + "      \"type\" : \"STRING\",") + (NEW_LINE)) + "      \"string\" : \"someBody\"") + (NEW_LINE)) + "    },") + (NEW_LINE)) + "    \"cookies\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someCookieName\",") + (NEW_LINE)) + "      \"value\" : \"someCookieValue\"") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"headers\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someHeaderName\",") + (NEW_LINE)) + "      \"values\" : [ \"someHeaderValue\" ]") + (NEW_LINE)) + "    } ]") + (NEW_LINE)) + "  },") + (NEW_LINE)) + "  \"times\" : {") + (NEW_LINE)) + "    \"remainingTimes\" : 5,") + (NEW_LINE)) + "    \"unlimited\" : false") + (NEW_LINE)) + "  }") + (NEW_LINE)) + "}")), Is.is((("1 error:" + (NEW_LINE)) + " - oneOf of the following must be specified [\"httpResponse\", \"httpResponseTemplate\", \"httpResponseObjectCallback\", \"httpResponseClassCallback\", \"httpForward\", \"httpForwardTemplate\", \"httpForwardObjectCallback\", \"httpForwardClassCallback\", \"httpOverrideForwardedRequest\", \"httpError\"] but 0 found")));
    }

    @Test
    public void shouldValidateInvalidExtraField() {
        // when
        Assert.assertThat(jsonSchemaValidator.isValid((((("{" + (NEW_LINE)) + "    \"invalidField\" : \"randomValue\"") + (NEW_LINE)) + "  }")), Is.is((((("2 errors:" + (NEW_LINE)) + " - object instance has properties which are not allowed by the schema: [\"invalidField\"]") + (NEW_LINE)) + " - oneOf of the following must be specified [\"httpResponse\", \"httpResponseTemplate\", \"httpResponseObjectCallback\", \"httpResponseClassCallback\", \"httpForward\", \"httpForwardTemplate\", \"httpForwardObjectCallback\", \"httpForwardClassCallback\", \"httpOverrideForwardedRequest\", \"httpError\"] but 0 found")));
    }

    @Test
    public void shouldValidateMultipleInvalidFieldTypes() {
        // when
        Assert.assertThat(jsonSchemaValidator.isValid((((((("{" + (NEW_LINE)) + "    \"httpRequest\" : \"100\",") + (NEW_LINE)) + "    \"httpResponse\" : false") + (NEW_LINE)) + "  }")), Is.is((((("2 errors:" + (NEW_LINE)) + " - instance type (string) does not match any allowed primitive type (allowed: [\"object\"]) for field \"/httpRequest\"") + (NEW_LINE)) + " - instance type (boolean) does not match any allowed primitive type (allowed: [\"object\"]) for field \"/httpResponse\"")));
    }

    @Test
    public void shouldValidateInvalidListItemType() {
        // when
        Assert.assertThat(jsonSchemaValidator.isValid((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("{" + (NEW_LINE)) + "  \"httpRequest\" : {") + (NEW_LINE)) + "    \"method\" : \"someMethod\",") + (NEW_LINE)) + "    \"path\" : \"somePath\",") + (NEW_LINE)) + "    \"queryStringParameters\" : [ {") + (NEW_LINE)) + "      \"name\" : \"queryStringParameterNameOne\",") + (NEW_LINE)) + "      \"values\" : [ \"queryStringParameterValueOne_One\", \"queryStringParameterValueOne_Two\" ]") + (NEW_LINE)) + "    }, {") + (NEW_LINE)) + "      \"name\" : \"queryStringParameterNameTwo\",") + (NEW_LINE)) + "      \"values\" : [ \"queryStringParameterValueTwo_One\" ]") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"body\" : {") + (NEW_LINE)) + "      \"type\" : \"STRING\",") + (NEW_LINE)) + "      \"string\" : \"someBody\"") + (NEW_LINE)) + "    },") + (NEW_LINE)) + "    \"cookies\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someCookieName\",") + (NEW_LINE)) + "      \"value\" : \"someCookieValue\"") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"headers\" : [ \"invalidValueOne\", \"invalidValueTwo\" ]") + (NEW_LINE)) + "  },") + (NEW_LINE)) + "  \"httpResponse\" : {") + (NEW_LINE)) + "    \"statusCode\" : 304,") + (NEW_LINE)) + "    \"body\" : \"someBody\",") + (NEW_LINE)) + "    \"cookies\" : [ {") + (NEW_LINE)) + "      \"name\" : \"someCookieName\",") + (NEW_LINE)) + "      \"value\" : \"someCookieValue\"") + (NEW_LINE)) + "    } ],") + (NEW_LINE)) + "    \"headers\" : [ \"invalidValueOne\", \"invalidValueTwo\" ],") + (NEW_LINE)) + "    \"delay\" : {") + (NEW_LINE)) + "      \"timeUnit\" : \"MICROSECONDS\",") + (NEW_LINE)) + "      \"value\" : 1") + (NEW_LINE)) + "    },") + (NEW_LINE)) + "    \"connectionOptions\" : {") + (NEW_LINE)) + "      \"suppressContentLengthHeader\" : true,") + (NEW_LINE)) + "      \"contentLengthHeaderOverride\" : 50,") + (NEW_LINE)) + "      \"suppressConnectionHeader\" : true,") + (NEW_LINE)) + "      \"keepAliveOverride\" : true,") + (NEW_LINE)) + "      \"closeSocket\" : true") + (NEW_LINE)) + "    }") + (NEW_LINE)) + "  },") + (NEW_LINE)) + "  \"times\" : {") + (NEW_LINE)) + "    \"remainingTimes\" : 5,") + (NEW_LINE)) + "    \"unlimited\" : false") + (NEW_LINE)) + "  }") + (NEW_LINE)) + "}")), Is.is((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("2 errors:" + (NEW_LINE)) + " - for field \"/httpRequest/headers\" only one of the following example formats is allowed: ") + (NEW_LINE)) + (NEW_LINE)) + "    \"/httpRequest/headers\" : {") + (NEW_LINE)) + "        \"exampleHeaderName\" : [ \"exampleHeaderValue\" ]") + (NEW_LINE)) + "        \"exampleMultiValuedHeaderName\" : [ \"exampleHeaderValueOne\", \"exampleHeaderValueTwo\" ]") + (NEW_LINE)) + "    }") + (NEW_LINE)) + (NEW_LINE)) + "   or:") + (NEW_LINE)) + (NEW_LINE)) + "    \"/httpRequest/headers\" : [") + (NEW_LINE)) + "        {") + (NEW_LINE)) + "            \"name\" : \"exampleHeaderName\",") + (NEW_LINE)) + "            \"values\" : [ \"exampleHeaderValue\" ]") + (NEW_LINE)) + "        },") + (NEW_LINE)) + "        {") + (NEW_LINE)) + "            \"name\" : \"exampleMultiValuedHeaderName\",") + (NEW_LINE)) + "            \"values\" : [ \"exampleHeaderValueOne\", \"exampleHeaderValueTwo\" ]") + (NEW_LINE)) + "        }") + (NEW_LINE)) + "    ]") + (NEW_LINE)) + " - for field \"/httpResponse/headers\" only one of the following example formats is allowed: ") + (NEW_LINE)) + (NEW_LINE)) + "    \"/httpResponse/headers\" : {") + (NEW_LINE)) + "        \"exampleHeaderName\" : [ \"exampleHeaderValue\" ]") + (NEW_LINE)) + "        \"exampleMultiValuedHeaderName\" : [ \"exampleHeaderValueOne\", \"exampleHeaderValueTwo\" ]") + (NEW_LINE)) + "    }") + (NEW_LINE)) + (NEW_LINE)) + "   or:") + (NEW_LINE)) + (NEW_LINE)) + "    \"/httpResponse/headers\" : [") + (NEW_LINE)) + "        {") + (NEW_LINE)) + "            \"name\" : \"exampleHeaderName\",") + (NEW_LINE)) + "            \"values\" : [ \"exampleHeaderValue\" ]") + (NEW_LINE)) + "        },") + (NEW_LINE)) + "        {") + (NEW_LINE)) + "            \"name\" : \"exampleMultiValuedHeaderName\",") + (NEW_LINE)) + "            \"values\" : [ \"exampleHeaderValueOne\", \"exampleHeaderValueTwo\" ]") + (NEW_LINE)) + "        }") + (NEW_LINE)) + "    ]")));
    }
}

