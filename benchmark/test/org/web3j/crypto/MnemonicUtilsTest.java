package org.web3j.crypto;


import org.bouncycastle.util.encoders.Hex;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;


/**
 * Unit tests for {@link MnemonicUtils} utility class.
 */
@RunWith(Parameterized.class)
public class MnemonicUtilsTest {
    /**
     * Path to test vectors generated by the BIP 39 reference implementation. Each
     * test vector include input entropy, mnemonic and seed. The passphrase "TREZOR"
     * is used for all vectors.
     *
     * @see <a href="https://github.com/trezor/python-mnemonic/blob/master/vectors.json">Test vectors</a>
     */
    private static final String SAMPLE_FILE = "build/resources/test/mnemonics/test-vectors.txt";

    /**
     * The initial entropy for the current test vector. This entropy should be used
     * to generate mnemonic and seed.
     */
    private byte[] initialEntropy;

    /**
     * Expected mnemonic for the given {@link #initialEntropy}.
     */
    private String mnemonic;

    /**
     * Expected seed based on the calculated {@link #mnemonic} and default passphrase.
     */
    private byte[] seed;

    public MnemonicUtilsTest(String initialEntropy, String mnemonic, String seed) {
        this.initialEntropy = Hex.decode(initialEntropy);
        this.mnemonic = mnemonic;
        this.seed = Hex.decode(seed);
    }

    @Test
    public void generateMnemonicShouldGenerateExpectedMnemonicWords() {
        String actualMnemonic = MnemonicUtils.generateMnemonic(initialEntropy);
        Assert.assertEquals(mnemonic, actualMnemonic);
    }

    @Test
    public void generateSeedShouldGenerateExpectedSeeds() {
        byte[] actualSeed = MnemonicUtils.generateSeed(mnemonic, "TREZOR");
        Assert.assertArrayEquals(seed, actualSeed);
    }

    @Test
    public void generateEntropyShouldGenerateExpectedEntropy() {
        byte[] actualEntropy = MnemonicUtils.generateEntropy(mnemonic);
        Assert.assertArrayEquals(initialEntropy, actualEntropy);
    }
}

