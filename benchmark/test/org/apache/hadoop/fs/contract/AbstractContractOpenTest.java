/**
 * Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.apache.hadoop.fs.contract;


import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import org.apache.hadoop.fs.FSDataInputStream;
import org.apache.hadoop.fs.FileStatus;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.FutureDataInputStreamBuilder;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.fs.impl.FutureIOSupport;
import org.apache.hadoop.io.IOUtils;
import org.apache.hadoop.test.LambdaTestUtils;
import org.junit.Assert;
import org.junit.Test;


/**
 * Test Open operations.
 */
public abstract class AbstractContractOpenTest extends AbstractFSContractTestBase {
    private FSDataInputStream instream;

    @Test
    public void testOpenReadZeroByteFile() throws Throwable {
        describe("create & read a 0 byte file");
        Path path = path("zero.txt");
        ContractTestUtils.touch(getFileSystem(), path);
        instream = getFileSystem().open(path);
        Assert.assertEquals(0, instream.getPos());
        // expect initial read to fail
        assertMinusOne("initial byte read", instream.read());
    }

    @Test
    public void testFsIsEncrypted() throws Exception {
        describe("create an empty file and call FileStatus.isEncrypted()");
        final Path path = path("file");
        ContractTestUtils.createFile(getFileSystem(), path, false, new byte[0]);
        final FileStatus stat = getFileSystem().getFileStatus(path);
        Assert.assertFalse("Expecting false for stat.isEncrypted()", stat.isEncrypted());
    }

    @Test
    public void testOpenReadDir() throws Throwable {
        describe("create & read a directory");
        Path path = path("zero.dir");
        mkdirs(path);
        try {
            instream = getFileSystem().open(path);
            // at this point we've opened a directory
            Assert.fail("A directory has been opened for reading");
        } catch (FileNotFoundException e) {
            handleExpectedException(e);
        } catch (IOException e) {
            handleRelaxedException("opening a directory for reading", "FileNotFoundException", e);
        }
    }

    @Test
    public void testOpenReadDirWithChild() throws Throwable {
        describe("create & read a directory which has a child");
        Path path = path("zero.dir");
        mkdirs(path);
        Path path2 = new Path(path, "child");
        mkdirs(path2);
        try {
            instream = getFileSystem().open(path);
            // at this point we've opened a directory
            Assert.fail("A directory has been opened for reading");
        } catch (FileNotFoundException e) {
            handleExpectedException(e);
        } catch (IOException e) {
            handleRelaxedException("opening a directory for reading", "FileNotFoundException", e);
        }
    }

    @Test
    public void testOpenFileTwice() throws Throwable {
        describe("verify that two opened file streams are independent");
        Path path = path("testopenfiletwice.txt");
        byte[] block = ContractTestUtils.dataset(AbstractFSContractTestBase.TEST_FILE_LEN, 0, 255);
        // this file now has a simple rule: offset => value
        ContractTestUtils.createFile(getFileSystem(), path, true, block);
        // open first
        FSDataInputStream instream1 = getFileSystem().open(path);
        FSDataInputStream instream2 = null;
        try {
            int c = instream1.read();
            Assert.assertEquals(0, c);
            instream2 = getFileSystem().open(path);
            Assert.assertEquals("first read of instream 2", 0, instream2.read());
            Assert.assertEquals("second read of instream 1", 1, instream1.read());
            instream1.close();
            Assert.assertEquals("second read of instream 2", 1, instream2.read());
            // close instream1 again
            instream1.close();
        } finally {
            IOUtils.closeStream(instream1);
            IOUtils.closeStream(instream2);
        }
    }

    @Test
    public void testSequentialRead() throws Throwable {
        describe("verify that sequential read() operations return values");
        Path path = path("testsequentialread.txt");
        int len = 4;
        int base = 64;// 64

        byte[] block = ContractTestUtils.dataset(len, base, (base + len));
        // this file now has a simple rule: offset => (value | 0x40)
        ContractTestUtils.createFile(getFileSystem(), path, true, block);
        // open first
        instream = getFileSystem().open(path);
        Assert.assertEquals(base, instream.read());
        Assert.assertEquals((base + 1), instream.read());
        Assert.assertEquals((base + 2), instream.read());
        Assert.assertEquals((base + 3), instream.read());
        // and now, failures
        Assert.assertEquals((-1), instream.read());
        Assert.assertEquals((-1), instream.read());
        instream.close();
    }

    @Test
    public void testOpenFileReadZeroByte() throws Throwable {
        describe("create & read a 0 byte file through the builders");
        Path path = path("zero.txt");
        FileSystem fs = getFileSystem();
        fs.createFile(path).overwrite(true).build().close();
        try (FSDataInputStream is = fs.openFile(path).opt("fs.test.something", true).opt("fs.test.something2", 3).opt("fs.test.something3", "3").build().get()) {
            assertMinusOne("initial byte read", is.read());
        }
    }

    @Test
    public void testOpenFileUnknownOption() throws Throwable {
        describe("calling openFile fails when a 'must()' option is unknown");
        FutureDataInputStreamBuilder builder = getFileSystem().openFile(path("testOpenFileUnknownOption")).opt("fs.test.something", true).must("fs.test.something", true);
        LambdaTestUtils.intercept(IllegalArgumentException.class, () -> builder.build());
    }

    @Test
    public void testOpenFileLazyFail() throws Throwable {
        describe("openFile fails on a missing file in the get() and not before");
        FutureDataInputStreamBuilder builder = getFileSystem().openFile(path("testOpenFileLazyFail")).opt("fs.test.something", true);
        LambdaTestUtils.interceptFuture(FileNotFoundException.class, "", builder.build());
    }

    @Test
    public void testOpenFileFailExceptionally() throws Throwable {
        describe("openFile missing file chains into exceptionally()");
        FutureDataInputStreamBuilder builder = getFileSystem().openFile(path("testOpenFileFailExceptionally")).opt("fs.test.something", true);
        Assert.assertNull("exceptional uprating", builder.build().exceptionally(( ex) -> null).get());
    }

    @Test
    public void testAwaitFutureFailToFNFE() throws Throwable {
        describe("Verify that FutureIOSupport.awaitFuture extracts IOExceptions");
        FutureDataInputStreamBuilder builder = getFileSystem().openFile(path("testAwaitFutureFailToFNFE")).opt("fs.test.something", true);
        LambdaTestUtils.intercept(FileNotFoundException.class, () -> FutureIOSupport.awaitFuture(builder.build()));
    }

    @Test
    public void testAwaitFutureTimeoutFailToFNFE() throws Throwable {
        describe("Verify that FutureIOSupport.awaitFuture with a timeout works");
        FutureDataInputStreamBuilder builder = getFileSystem().openFile(path("testAwaitFutureFailToFNFE")).opt("fs.test.something", true);
        LambdaTestUtils.intercept(FileNotFoundException.class, () -> FutureIOSupport.awaitFuture(builder.build(), 10, TimeUnit.DAYS));
    }

    @Test
    public void testOpenFileExceptionallyTranslating() throws Throwable {
        describe("openFile missing file chains into exceptionally()");
        CompletableFuture<FSDataInputStream> f = getFileSystem().openFile(path("testOpenFileUnknownOption")).build();
        LambdaTestUtils.interceptFuture(RuntimeException.class, "exceptionally", f.exceptionally(( ex) -> {
            throw new RuntimeException("exceptionally", ex);
        }));
    }

    @Test
    public void testChainedFailureAwaitFuture() throws Throwable {
        describe("await Future handles chained failures");
        CompletableFuture<FSDataInputStream> f = getFileSystem().openFile(path("testOpenFileUnknownOption")).build();
        LambdaTestUtils.intercept(RuntimeException.class, "exceptionally", () -> FutureIOSupport.awaitFuture(f.exceptionally(( ex) -> {
            throw new RuntimeException("exceptionally", ex);
        })));
    }

    @Test
    public void testOpenFileApplyRead() throws Throwable {
        describe("use the apply sequence to read a whole file");
        Path path = path("testOpenFileApplyRead");
        FileSystem fs = getFileSystem();
        int len = 4096;
        ContractTestUtils.createFile(fs, path, true, ContractTestUtils.dataset(len, 64, 128));
        CompletableFuture<Long> readAllBytes = fs.openFile(path).build().thenApply(ContractTestUtils::readStream);
        Assert.assertEquals("Wrong number of bytes read value", len, ((long) (readAllBytes.get())));
    }

    @Test
    public void testOpenFileApplyAsyncRead() throws Throwable {
        describe("verify that async accept callbacks are evaluated");
        Path path = path("testOpenFileApplyAsyncRead");
        FileSystem fs = getFileSystem();
        ContractTestUtils.createFile(fs, path, true, ContractTestUtils.dataset(4, 64, 128));
        CompletableFuture<FSDataInputStream> future = fs.openFile(path).build();
        AtomicBoolean accepted = new AtomicBoolean(false);
        future.thenAcceptAsync(( i) -> accepted.set(true)).get();
        Assert.assertTrue("async accept operation not invoked", accepted.get());
    }
}

