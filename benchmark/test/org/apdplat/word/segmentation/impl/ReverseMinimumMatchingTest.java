/**
 * APDPlat - Application Product Development Platform
 * Copyright (c) 2013, ???, yang-shangchuan@qq.com
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.apdplat.word.segmentation.impl;


import java.util.ArrayList;
import java.util.List;
import org.apdplat.word.segmentation.Segmentation;
import org.apdplat.word.segmentation.Word;
import org.junit.Assert;
import org.junit.Test;


/**
 *
 *
 * @author ???
 */
public class ReverseMinimumMatchingTest {
    @Test
    public void testSeg() {
        Segmentation segmentation = new ReverseMinimumMatching();
        List<String> text = new ArrayList<>();
        text.add("????????");
        text.add("?");
        text.add("????");
        text.add("????APDPlat????????????");
        text.add("???????");
        text.add("????????");
        text.add("???????????????");
        text.add("??????????????");
        text.add("???????????????????");
        text.add("???????");
        text.add("????????");
        text.add("?????????????");
        text.add("?????");
        text.add("?????????????");
        text.add("????????????");
        text.add("????????,???????");
        text.add("???????");
        text.add("??????");
        text.add("????????");
        text.add("??????????");
        text.add("???????");
        text.add("??????");
        text.add("?????");
        text.add("?????????");
        text.add("???????");
        text.add("??????????");
        text.add("??????????");
        text.add("???????????");
        text.add("?????");
        text.add("???????");
        text.add("????????????");
        text.add("????????????");
        text.add("???????????");
        text.add("????????????");
        text.add("?????");
        text.add("??");
        text.add("???????????");
        text.add("???????????");
        List<String> expResult = new ArrayList<>();
        expResult.add("[??, ??, ??, ??]");
        expResult.add("[?]");
        expResult.add("[???, ?]");
        expResult.add("[???, ?, apdplat, ???, ??, ??, ??, ?, ??]");
        expResult.add("[?, ?, ?, ??, ??]");
        expResult.add("[??, ??, ??, ??]");
        expResult.add("[??, ?, ?, ??, ??, ??, ??, ??, ?]");
        expResult.add("[??, ??, ?, ??, ?, ??, ?, ??, ?]");
        expResult.add("[?, ???, ?, ??, ??, ??, ?, ??, ??, ??]");
        expResult.add("[??, ??, ?, ??]");
        expResult.add("[?, ??, ??, ?, ??]");
        expResult.add("[?, ??, ??, ?, ??, ??, ?, ??]");
        expResult.add("[?, ?, ??, ?]");
        expResult.add("[??, ?, ?, ?, ??, ??, ?, ??, ?]");
        expResult.add("[?, ?, ??, ?, ?, ??, ??, ??]");
        expResult.add("[?, ?, ??, ??, ??, ?, ??, ??, ??]");
        expResult.add("[???, ??, ??]");
        expResult.add("[??, ??, ?, ?]");
        expResult.add("[?, ??, ?, ???, ?]");
        expResult.add("[?, ??, ?, ??, ??, ??]");
        expResult.add("[?, ??, ??, ??]");
        expResult.add("[??, ??, ??]");
        expResult.add("[?, ??, ??]");
        expResult.add("[??, ??, ??, ?, ??]");
        expResult.add("[??, ?, ??, ??]");
        expResult.add("[??, ??, ??, ?, ?, ??]");
        expResult.add("[??, ??, ??, ??, ??]");
        expResult.add("[??, ?, ??, ??, ?, ?, ??]");
        expResult.add("[??, ?, ??]");
        expResult.add("[??, ?, ??, ??]");
        expResult.add("[?, ??, ??, ?, ??, ??, ??]");
        expResult.add("[?, ??, ??, ?, ??, ??, ??]");
        expResult.add("[??, ?, ?, ??, ?, ??, ??]");
        expResult.add("[??, ??, ??, ?, ?, ??, ??]");
        expResult.add("[?, ??, ??]");
        expResult.add("[?, ?]");
        expResult.add("[?, ??, ??, ??, ?, ?, ??]");
        expResult.add("[??, ??, ?, ??, ?, ??, ?]");
        for (int i = 0; i < (text.size()); i++) {
            List<Word> result = segmentation.seg(text.get(i));
            for (Word word : result) {
                word.setPartOfSpeech(null);
            }
            Assert.assertEquals(expResult.get(i).toString(), result.toString());
        }
    }
}

