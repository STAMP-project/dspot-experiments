package com.alibaba.json.bvt.util;


import com.alibaba.fastjson.util.RyuDouble;
import java.util.Random;
import junit.framework.TestCase;


public class RyuDoubleTest extends TestCase {
    public void test_for_ryu() throws Exception {
        Random random = new Random();
        for (int i = 0; i < ((1000 * 1000) * 10); ++i) {
            double value = random.nextDouble();
            String str1 = Double.toString(value);
            String str2 = RyuDouble.toString(value);
            if (!(str1.equals(str2))) {
                System.out.println(((str1 + " -> ") + str2));
                TestCase.assertTrue(((Double.parseDouble(str1)) == (Double.parseDouble(str2))));
            }
        }
    }

    public void test_0() throws Exception {
        double[] values = new double[]{ Double.NaN, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.MIN_VALUE, Double.MAX_VALUE, 0, 0.0, -0.0, Double.longBitsToDouble(-9223372036854775808L), Double.NaN, Long.MAX_VALUE, Long.MIN_VALUE, Integer.MAX_VALUE, Integer.MIN_VALUE, Double.longBitsToDouble(4503599627370496L), 9999999.999999998, 9.999999999999998E-4, 1.0E7, 0.001, Double.longBitsToDouble(9218868437227405311L), Double.longBitsToDouble(1), -2.1098088986959632E16, 4.940656E-318, 1.18575755E-316, 2.989102097996E-312, 9.0608011534336E15, 4.7083560247115121E18, 9.409340012568248E18, 1.8531501765868567E21, -3.347727380279489E33, 1.9430376160308388E16, -6.9741824662760956E19, 4.3816050601147837E18, 1.797693134862315E308, 1.79769313486231E308, 1.7976931348623E308, 1.797693134862E308, 1.79769313486E308, 1.7976931348E308, 1.797693134E308, 1.79769313E308, 1.7976931E308, 1.797693E308, 1.79769E308, 1.7976E308, 1.797E308, 1.79E308, 1.7E308, 1.0E308, 1.797693134862315, 1.79769313486231, 1.7976931348623, 1.797693134862, 1.79769313486, 1.7976931348, 1.797693134, 1.79769313, 1.7976931, 1.797693, 1.79769, 1.7976, 1.797, 1.79, 1.7, 1, -1.797693134862315, -1.79769313486231, -1.7976931348623, -1.797693134862, -1.79769313486, -1.7976931348, -1.797693134, -1.79769313, -1.7976931, -1.797693, -1.79769, -1.7976, -1.797, -1.79, -1.7, -1, 0.1, 0.01, 0.001, 1.0E-4, 1.0E-5, 1.0E-6, 1.0E-7, 1.0E-8, 1.0E-9, 1.0E-10, 1.0E-11, 1.0E-12, 1.0E-13, 1.0E-14, -0.1, -0.01, -0.001, -1.0E-4, -1.0E-5, -1.0E-6, -1.0E-7, -1.0E-8, -1.0E-9, -1.0E-10, -1.0E-11, -1.0E-12, -1.0E-13, -1.0E-14, 11.0, 110.0, 1100.0, 11000.0, 110000.0, 1100000.0, 1.1E7, 1.1E8, 1.1E9, 1.1E10, -11.0, -110.0, -1100.0, -11000.0, -110000.0, -1100000.0, -1.1E7, -1.1E8, -1.1E9, -1.1E10, 4.9E11, 4.9E101, 4.9E201, 4.9E301, 4.9E302, 4.9E303, 4.9E304, 4.9E305, 4.9E-9, 4.9E-99, 4.9E-199, 4.9E-299, 4.9E-300, 4.9E-301, 4.9E-302, 4.9E-303 };
        for (int i = 0; i < (values.length); i++) {
            double value = values[i];
            String str1 = Double.toString(value);
            String str2 = RyuDouble.toString(value);
            if (!(str1.equals(str2))) {
                boolean cmp = (Double.parseDouble(str1)) == (Double.parseDouble(str2));
                System.out.println(((((str1 + " -> ") + str2) + " : ") + cmp));
                TestCase.assertTrue(cmp);
            }
        }
    }

    public void test_1() throws Exception {
        double[] values = new double[]{ 0.1, 0.01, 0.001, 1.0E-4, 1.0E-5, 1.0E-6, 1.0E-7, 1.0E-8, 1.0E-9, 1.0E-10, 1.0E-11, 1.0E-12, 1.0E-13, 1.0E-14, 1.0E-15, 1.0E-16, 1.0E-17, 1.0E-18, 1.0E-19, 1.0E-20, 1.0E-21, 1.0E-22, 1.0E-23, 1.0E-24, 1.0E-25, 1.0E-26, 1.0E-27, 1.0E-28, 1.0E-29, 1.0E-30, 1.0E-31, 1.0E-32, 1.0E-33, 1.0E-34, 1.0E-35, 1.0E-36, 1.0E-37, 1.0E-38, 1.0E-39, 1.0E-40, 1.0E-41, 1.0E-42, 1.0E-43, 1.0E-44, 1.0E-45, 1.0E-46, 1.0E-47, 1.0E-48, 1.0E-49, 1.0E-50, 1.0E-51, 1.0E-52, 1.0E-53, 1.0E-54, 1.0E-55, 1.0E-56, 1.0E-57, 1.0E-57, -0.1, -0.01, -0.001, -1.0E-4, -1.0E-5, -1.0E-6, -1.0E-7, -1.0E-8, -1.0E-9, -1.0E-10, -1.0E-11, -1.0E-12, -1.0E-13, -1.0E-14, -1.0E-15, -1.0E-16, -1.0E-17, -1.0E-18, -1.0E-19, -1.0E-20, -1.0E-21, -1.0E-22, -1.0E-23, -1.0E-24, -1.0E-25, -1.0E-26, -1.0E-27, -1.0E-28, -1.0E-29, -1.0E-30, -1.0E-31, -1.0E-32, -1.0E-33, -1.0E-34, -1.0E-35, -1.0E-36, -1.0E-37, -1.0E-38, -1.0E-39, -1.0E-40, -1.0E-41, -1.0E-42, -1.0E-43, -1.0E-44, -1.0E-45, -1.0E-46, -1.0E-47, -1.0E-48, -1.0E-49, -1.0E-50, -1.0E-51, -1.0E-52, -1.0E-53, -1.0E-54, -1.0E-55, -1.0E-56, -1.0E-57, -1.0E-57 };
        for (int i = 0; i < (values.length); i++) {
            double value = values[i];
            String str1 = Double.toString(value);
            String str2 = RyuDouble.toString(value);
            if (!(str1.equals(str2))) {
                boolean cmp = (Double.parseDouble(str1)) == (Double.parseDouble(str2));
                System.out.println(((((str1 + " -> ") + str2) + " : ") + cmp));
                TestCase.assertTrue(cmp);
            }
        }
    }

    public void test_2() throws Exception {
        double[] values = new double[]{ 9.223372036854798E18, 9.223372036854798E18, 9.223372036854796E18, 9.223372036854796E18, 9.223372036854794E18, 9.223372036854794E18, 9.223372036854792E18, 9.223372036854792E18, 9.22337203685479E18, 9.22337203685479E18, 9.223372036854788E18, 9.223372036854788E18, 9.223372036854786E18, 9.223372036854786E18, 9.223372036854784E18, 9.223372036854784E18, 9.223372036854784E18, 9.223372036854782E18, 9.223372036854782E18, 9.22337203685478E18, 9.22337203685478E18, 9.223372036854778E18, 9.223372036854778E18, 9.223372036854776E18, 9.2233720368547748E18, 9.2233720368547738E18, 9.2233720368547727E18, 9.2233720368547717E18, 9.2233720368547707E18, 9.2233720368547697E18, 9.2233720368547686E18, 9.2233720368547676E18, 9.2233720368547666E18, 9.2233720368547656E18, 9.2233720368547645E18, 9.2233720368547635E18, 9.2233720368547625E18, 9.2233720368547625E18, 9.2233720368547615E18, 9.2233720368547604E18, 9.2233720368547594E18, 9.2233720368547584E18, 9.2233720368547574E18, 9.2233720368547564E18, 9.2233720368547553E18, 9.2233720368547543E18, 9.2233720368547533E18, 9.2233720368547523E18, 9.2233720368547512E18, 9.2233720368547502E18, 9.2233720368547492E18, 9.2233720368547482E18, 9.2233720368547471E18, 9.2233720368547461E18, 9.2233720368547451E18, 9.2233720368547441E18, 9.223372036854743E18, 9.223372036854742E18, 9.223372036854741E18, 9.22337203685474E18, 9.2233720368547389E18, 9.2233720368547379E18, 9.2233720368547369E18, 9.2233720368547359E18, 9.2233720368547348E18, 9.2233720368547338E18, 9.2233720368547328E18, 9.2233720368547318E18, 9.2233720368547308E18, 9.2233720368547297E18, 9.2233720368547287E18, 9.2233720368547277E18, 9.2233720368547267E18, 9.2233720368547256E18, 9.2233720368547246E18, 9.2233720368547236E18, 9.2233720368547226E18, 9.2233720368547215E18, 9.2233720368547205E18, 9.2233720368547205E18, 9.2233720368547195E18, 9.2233720368547185E18, 9.2233720368547174E18, 9.2233720368547164E18, 9.2233720368547154E18, 9.2233720368547144E18, 9.2233720368547133E18, 9.2233720368547123E18, 9.2233720368547113E18, 9.2233720368547103E18, 9.2233720368547092E18, 9.2233720368547082E18, 9.2233720368547072E18, 9.2233720368547062E18, 9.2233720368547052E18, 9.2233720368547041E18, 9.2233720368547031E18, 9.2233720368547021E18, 9.2233720368547011E18, 9.2233720368547E18 };
        for (int i = 0; i < (values.length); i++) {
            double value = values[i];
            String str1 = Double.toString(value);
            String str2 = RyuDouble.toString(value);
            if (!(str1.equals(str2))) {
                boolean cmp = (Double.parseDouble(str1)) == (Double.parseDouble(str2));
                System.out.println(((((str1 + " -> ") + str2) + " : ") + cmp));
                TestCase.assertTrue(cmp);
            }
        }
    }
}

