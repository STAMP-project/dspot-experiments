/**
 * Copyright 2015 Netflix, Inc.
 *
 *      Licensed under the Apache License, Version 2.0 (the "License");
 *      you may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.apache.org/licenses/LICENSE-2.0
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 */
package com.netflix.genie.web.jpa.specifications;


import JobEntity_.cluster;
import JobEntity_.clusterName;
import JobEntity_.command;
import JobEntity_.commandName;
import JobEntity_.finished;
import JobEntity_.grouping;
import JobEntity_.groupingInstance;
import JobEntity_.name;
import JobEntity_.started;
import JobEntity_.status;
import JobEntity_.tagSearchString;
import JobEntity_.uniqueId;
import JobEntity_.user;
import com.google.common.collect.Sets;
import com.netflix.genie.common.dto.JobStatus;
import com.netflix.genie.test.categories.UnitTest;
import com.netflix.genie.web.jpa.entities.ClusterEntity;
import com.netflix.genie.web.jpa.entities.CommandEntity;
import com.netflix.genie.web.jpa.entities.JobEntity;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Set;
import java.util.UUID;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Root;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import org.mockito.Mockito;


/**
 * Test the specifications generated by JobSpecs.
 *
 * @author tgianos
 */
@Category(UnitTest.class)
public class JpaJobSpecsUnitTests {
    private static final String ID = UUID.randomUUID().toString();

    private static final String JOB_NAME = "jobName";

    private static final String USER_NAME = "tgianos";

    private static final String CLUSTER_NAME = "hprod2";

    private static final ClusterEntity CLUSTER = Mockito.mock(ClusterEntity.class);

    private static final String COMMAND_NAME = "pig";

    private static final CommandEntity COMMAND = Mockito.mock(CommandEntity.class);

    private static final Set<String> TAGS = Sets.newHashSet();

    private static final Set<JobStatus> STATUSES = Sets.newHashSet();

    private static final String TAG = UUID.randomUUID().toString();

    private static final Instant MIN_STARTED = Instant.now();

    private static final Instant MAX_STARTED = JpaJobSpecsUnitTests.MIN_STARTED.plus(10, ChronoUnit.MILLIS);

    private static final Instant MIN_FINISHED = JpaJobSpecsUnitTests.MAX_STARTED.plus(10, ChronoUnit.MILLIS);

    private static final Instant MAX_FINISHED = JpaJobSpecsUnitTests.MIN_FINISHED.plus(10, ChronoUnit.MILLIS);

    private static final String GROUPING = UUID.randomUUID().toString();

    private static final String GROUPING_INSTANCE = UUID.randomUUID().toString();

    private Root<JobEntity> root;

    private CriteriaBuilder cb;

    private String tagLikeStatement;

    /**
     * Test the find specification.
     */
    @Test
    public void testFindWithAll() {
        JpaJobSpecs.getFindPredicate(this.root, this.cb, JpaJobSpecsUnitTests.ID, JpaJobSpecsUnitTests.JOB_NAME, JpaJobSpecsUnitTests.USER_NAME, JpaJobSpecsUnitTests.STATUSES, JpaJobSpecsUnitTests.TAGS, JpaJobSpecsUnitTests.CLUSTER_NAME, JpaJobSpecsUnitTests.CLUSTER, JpaJobSpecsUnitTests.COMMAND_NAME, JpaJobSpecsUnitTests.COMMAND, JpaJobSpecsUnitTests.MIN_STARTED, JpaJobSpecsUnitTests.MAX_STARTED, JpaJobSpecsUnitTests.MIN_FINISHED, JpaJobSpecsUnitTests.MAX_FINISHED, JpaJobSpecsUnitTests.GROUPING, JpaJobSpecsUnitTests.GROUPING_INSTANCE);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(uniqueId), JpaJobSpecsUnitTests.ID);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(name), JpaJobSpecsUnitTests.JOB_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(user), JpaJobSpecsUnitTests.USER_NAME);
        for (final JobStatus status : JpaJobSpecsUnitTests.STATUSES) {
            Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(status), status);
        }
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(clusterName), JpaJobSpecsUnitTests.CLUSTER_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(cluster), JpaJobSpecsUnitTests.CLUSTER);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(commandName), JpaJobSpecsUnitTests.COMMAND_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(command), JpaJobSpecsUnitTests.COMMAND);
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(tagSearchString), this.tagLikeStatement);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(started), JpaJobSpecsUnitTests.MIN_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(started), JpaJobSpecsUnitTests.MAX_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(finished), JpaJobSpecsUnitTests.MIN_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(finished), JpaJobSpecsUnitTests.MAX_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(grouping), JpaJobSpecsUnitTests.GROUPING);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(groupingInstance), JpaJobSpecsUnitTests.GROUPING_INSTANCE);
    }

    /**
     * Test the find specification.
     */
    @Test
    public void testFindWithAllLikes() {
        final String newId = (JpaJobSpecsUnitTests.ID) + "%";
        final String newName = (JpaJobSpecsUnitTests.JOB_NAME) + "%";
        final String newUserName = (JpaJobSpecsUnitTests.USER_NAME) + "%";
        final String newClusterName = (JpaJobSpecsUnitTests.CLUSTER_NAME) + "%";
        final String newCommandName = (JpaJobSpecsUnitTests.COMMAND_NAME) + "%";
        final String newGrouping = (JpaJobSpecsUnitTests.GROUPING) + "%";
        final String newGroupingInstance = (JpaJobSpecsUnitTests.GROUPING_INSTANCE) + "%";
        JpaJobSpecs.getFindPredicate(this.root, this.cb, newId, newName, newUserName, JpaJobSpecsUnitTests.STATUSES, JpaJobSpecsUnitTests.TAGS, newClusterName, JpaJobSpecsUnitTests.CLUSTER, newCommandName, JpaJobSpecsUnitTests.COMMAND, JpaJobSpecsUnitTests.MIN_STARTED, JpaJobSpecsUnitTests.MAX_STARTED, JpaJobSpecsUnitTests.MIN_FINISHED, JpaJobSpecsUnitTests.MAX_FINISHED, newGrouping, newGroupingInstance);
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(uniqueId), newId);
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(name), newName);
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(user), newUserName);
        for (final JobStatus status : JpaJobSpecsUnitTests.STATUSES) {
            Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(status), status);
        }
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(clusterName), newClusterName);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(cluster), JpaJobSpecsUnitTests.CLUSTER);
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(commandName), newCommandName);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(command), JpaJobSpecsUnitTests.COMMAND);
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(tagSearchString), this.tagLikeStatement);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(started), JpaJobSpecsUnitTests.MIN_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(started), JpaJobSpecsUnitTests.MAX_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(finished), JpaJobSpecsUnitTests.MIN_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(finished), JpaJobSpecsUnitTests.MAX_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(grouping), newGrouping);
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(groupingInstance), newGroupingInstance);
    }

    /**
     * Test the find specification.
     */
    @Test
    public void testFindWithOutId() {
        JpaJobSpecs.getFindPredicate(this.root, this.cb, null, JpaJobSpecsUnitTests.JOB_NAME, JpaJobSpecsUnitTests.USER_NAME, JpaJobSpecsUnitTests.STATUSES, JpaJobSpecsUnitTests.TAGS, JpaJobSpecsUnitTests.CLUSTER_NAME, JpaJobSpecsUnitTests.CLUSTER, JpaJobSpecsUnitTests.COMMAND_NAME, JpaJobSpecsUnitTests.COMMAND, JpaJobSpecsUnitTests.MIN_STARTED, JpaJobSpecsUnitTests.MAX_STARTED, JpaJobSpecsUnitTests.MIN_FINISHED, JpaJobSpecsUnitTests.MAX_FINISHED, JpaJobSpecsUnitTests.GROUPING, JpaJobSpecsUnitTests.GROUPING_INSTANCE);
        Mockito.verify(this.cb, Mockito.never()).like(this.root.get(uniqueId), JpaJobSpecsUnitTests.ID);
        Mockito.verify(this.cb, Mockito.never()).equal(this.root.get(uniqueId), JpaJobSpecsUnitTests.ID);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(name), JpaJobSpecsUnitTests.JOB_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(user), JpaJobSpecsUnitTests.USER_NAME);
        for (final JobStatus status : JpaJobSpecsUnitTests.STATUSES) {
            Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(status), status);
        }
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(clusterName), JpaJobSpecsUnitTests.CLUSTER_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(cluster), JpaJobSpecsUnitTests.CLUSTER);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(commandName), JpaJobSpecsUnitTests.COMMAND_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(command), JpaJobSpecsUnitTests.COMMAND);
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(tagSearchString), this.tagLikeStatement);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(started), JpaJobSpecsUnitTests.MIN_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(started), JpaJobSpecsUnitTests.MAX_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(finished), JpaJobSpecsUnitTests.MIN_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(finished), JpaJobSpecsUnitTests.MAX_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(grouping), JpaJobSpecsUnitTests.GROUPING);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(groupingInstance), JpaJobSpecsUnitTests.GROUPING_INSTANCE);
    }

    /**
     * Test the find specification.
     */
    @Test
    public void testFindWithOutJobName() {
        JpaJobSpecs.getFindPredicate(this.root, this.cb, JpaJobSpecsUnitTests.ID, null, JpaJobSpecsUnitTests.USER_NAME, JpaJobSpecsUnitTests.STATUSES, JpaJobSpecsUnitTests.TAGS, JpaJobSpecsUnitTests.CLUSTER_NAME, JpaJobSpecsUnitTests.CLUSTER, JpaJobSpecsUnitTests.COMMAND_NAME, JpaJobSpecsUnitTests.COMMAND, JpaJobSpecsUnitTests.MIN_STARTED, JpaJobSpecsUnitTests.MAX_STARTED, JpaJobSpecsUnitTests.MIN_FINISHED, JpaJobSpecsUnitTests.MAX_FINISHED, JpaJobSpecsUnitTests.GROUPING, JpaJobSpecsUnitTests.GROUPING_INSTANCE);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(uniqueId), JpaJobSpecsUnitTests.ID);
        Mockito.verify(this.cb, Mockito.never()).like(this.root.get(name), JpaJobSpecsUnitTests.JOB_NAME);
        Mockito.verify(this.cb, Mockito.never()).equal(this.root.get(name), JpaJobSpecsUnitTests.JOB_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(user), JpaJobSpecsUnitTests.USER_NAME);
        for (final JobStatus status : JpaJobSpecsUnitTests.STATUSES) {
            Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(status), status);
        }
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(clusterName), JpaJobSpecsUnitTests.CLUSTER_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(cluster), JpaJobSpecsUnitTests.CLUSTER);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(commandName), JpaJobSpecsUnitTests.COMMAND_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(command), JpaJobSpecsUnitTests.COMMAND);
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(tagSearchString), this.tagLikeStatement);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(started), JpaJobSpecsUnitTests.MIN_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(started), JpaJobSpecsUnitTests.MAX_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(finished), JpaJobSpecsUnitTests.MIN_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(finished), JpaJobSpecsUnitTests.MAX_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(grouping), JpaJobSpecsUnitTests.GROUPING);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(groupingInstance), JpaJobSpecsUnitTests.GROUPING_INSTANCE);
    }

    /**
     * Test the find specification.
     */
    @Test
    public void testFindWithOutUserName() {
        JpaJobSpecs.getFindPredicate(this.root, this.cb, JpaJobSpecsUnitTests.ID, JpaJobSpecsUnitTests.JOB_NAME, null, JpaJobSpecsUnitTests.STATUSES, JpaJobSpecsUnitTests.TAGS, JpaJobSpecsUnitTests.CLUSTER_NAME, JpaJobSpecsUnitTests.CLUSTER, JpaJobSpecsUnitTests.COMMAND_NAME, JpaJobSpecsUnitTests.COMMAND, JpaJobSpecsUnitTests.MIN_STARTED, JpaJobSpecsUnitTests.MAX_STARTED, JpaJobSpecsUnitTests.MIN_FINISHED, JpaJobSpecsUnitTests.MAX_FINISHED, JpaJobSpecsUnitTests.GROUPING, JpaJobSpecsUnitTests.GROUPING_INSTANCE);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(uniqueId), JpaJobSpecsUnitTests.ID);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(name), JpaJobSpecsUnitTests.JOB_NAME);
        Mockito.verify(this.cb, Mockito.never()).equal(this.root.get(user), JpaJobSpecsUnitTests.USER_NAME);
        Mockito.verify(this.cb, Mockito.never()).like(this.root.get(user), JpaJobSpecsUnitTests.USER_NAME);
        for (final JobStatus status : JpaJobSpecsUnitTests.STATUSES) {
            Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(status), status);
        }
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(clusterName), JpaJobSpecsUnitTests.CLUSTER_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(cluster), JpaJobSpecsUnitTests.CLUSTER);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(commandName), JpaJobSpecsUnitTests.COMMAND_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(command), JpaJobSpecsUnitTests.COMMAND);
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(tagSearchString), this.tagLikeStatement);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(started), JpaJobSpecsUnitTests.MIN_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(started), JpaJobSpecsUnitTests.MAX_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(finished), JpaJobSpecsUnitTests.MIN_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(finished), JpaJobSpecsUnitTests.MAX_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(grouping), JpaJobSpecsUnitTests.GROUPING);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(groupingInstance), JpaJobSpecsUnitTests.GROUPING_INSTANCE);
    }

    /**
     * Test the find specification.
     */
    @Test
    public void testFindWithOutStatus() {
        JpaJobSpecs.getFindPredicate(this.root, this.cb, JpaJobSpecsUnitTests.ID, JpaJobSpecsUnitTests.JOB_NAME, JpaJobSpecsUnitTests.USER_NAME, null, JpaJobSpecsUnitTests.TAGS, JpaJobSpecsUnitTests.CLUSTER_NAME, JpaJobSpecsUnitTests.CLUSTER, JpaJobSpecsUnitTests.COMMAND_NAME, JpaJobSpecsUnitTests.COMMAND, JpaJobSpecsUnitTests.MIN_STARTED, JpaJobSpecsUnitTests.MAX_STARTED, JpaJobSpecsUnitTests.MIN_FINISHED, JpaJobSpecsUnitTests.MAX_FINISHED, JpaJobSpecsUnitTests.GROUPING, JpaJobSpecsUnitTests.GROUPING_INSTANCE);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(uniqueId), JpaJobSpecsUnitTests.ID);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(name), JpaJobSpecsUnitTests.JOB_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(user), JpaJobSpecsUnitTests.USER_NAME);
        for (final JobStatus status : JpaJobSpecsUnitTests.STATUSES) {
            Mockito.verify(this.cb, Mockito.never()).equal(this.root.get(status), status);
        }
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(clusterName), JpaJobSpecsUnitTests.CLUSTER_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(cluster), JpaJobSpecsUnitTests.CLUSTER);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(commandName), JpaJobSpecsUnitTests.COMMAND_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(command), JpaJobSpecsUnitTests.COMMAND);
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(tagSearchString), this.tagLikeStatement);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(started), JpaJobSpecsUnitTests.MIN_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(started), JpaJobSpecsUnitTests.MAX_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(finished), JpaJobSpecsUnitTests.MIN_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(finished), JpaJobSpecsUnitTests.MAX_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(grouping), JpaJobSpecsUnitTests.GROUPING);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(groupingInstance), JpaJobSpecsUnitTests.GROUPING_INSTANCE);
    }

    /**
     * Test the find specification.
     */
    @Test
    public void testFindWithEmptyStatus() {
        JpaJobSpecs.getFindPredicate(this.root, this.cb, JpaJobSpecsUnitTests.ID, JpaJobSpecsUnitTests.JOB_NAME, JpaJobSpecsUnitTests.USER_NAME, Sets.newHashSet(), JpaJobSpecsUnitTests.TAGS, JpaJobSpecsUnitTests.CLUSTER_NAME, JpaJobSpecsUnitTests.CLUSTER, JpaJobSpecsUnitTests.COMMAND_NAME, JpaJobSpecsUnitTests.COMMAND, JpaJobSpecsUnitTests.MIN_STARTED, JpaJobSpecsUnitTests.MAX_STARTED, JpaJobSpecsUnitTests.MIN_FINISHED, JpaJobSpecsUnitTests.MAX_FINISHED, JpaJobSpecsUnitTests.GROUPING, JpaJobSpecsUnitTests.GROUPING_INSTANCE);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(uniqueId), JpaJobSpecsUnitTests.ID);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(name), JpaJobSpecsUnitTests.JOB_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(user), JpaJobSpecsUnitTests.USER_NAME);
        for (final JobStatus status : JpaJobSpecsUnitTests.STATUSES) {
            Mockito.verify(this.cb, Mockito.never()).equal(this.root.get(status), status);
        }
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(clusterName), JpaJobSpecsUnitTests.CLUSTER_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(cluster), JpaJobSpecsUnitTests.CLUSTER);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(commandName), JpaJobSpecsUnitTests.COMMAND_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(command), JpaJobSpecsUnitTests.COMMAND);
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(tagSearchString), this.tagLikeStatement);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(started), JpaJobSpecsUnitTests.MIN_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(started), JpaJobSpecsUnitTests.MAX_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(finished), JpaJobSpecsUnitTests.MIN_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(finished), JpaJobSpecsUnitTests.MAX_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(grouping), JpaJobSpecsUnitTests.GROUPING);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(groupingInstance), JpaJobSpecsUnitTests.GROUPING_INSTANCE);
    }

    /**
     * Test the find specification.
     */
    @Test
    public void testFindWithOutClusterName() {
        JpaJobSpecs.getFindPredicate(this.root, this.cb, JpaJobSpecsUnitTests.ID, JpaJobSpecsUnitTests.JOB_NAME, JpaJobSpecsUnitTests.USER_NAME, JpaJobSpecsUnitTests.STATUSES, JpaJobSpecsUnitTests.TAGS, null, JpaJobSpecsUnitTests.CLUSTER, JpaJobSpecsUnitTests.COMMAND_NAME, JpaJobSpecsUnitTests.COMMAND, JpaJobSpecsUnitTests.MIN_STARTED, JpaJobSpecsUnitTests.MAX_STARTED, JpaJobSpecsUnitTests.MIN_FINISHED, JpaJobSpecsUnitTests.MAX_FINISHED, JpaJobSpecsUnitTests.GROUPING, JpaJobSpecsUnitTests.GROUPING_INSTANCE);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(uniqueId), JpaJobSpecsUnitTests.ID);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(name), JpaJobSpecsUnitTests.JOB_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(user), JpaJobSpecsUnitTests.USER_NAME);
        for (final JobStatus status : JpaJobSpecsUnitTests.STATUSES) {
            Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(status), status);
        }
        Mockito.verify(this.cb, Mockito.never()).equal(this.root.get(clusterName), JpaJobSpecsUnitTests.CLUSTER_NAME);
        Mockito.verify(this.cb, Mockito.never()).like(this.root.get(clusterName), JpaJobSpecsUnitTests.CLUSTER_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(cluster), JpaJobSpecsUnitTests.CLUSTER);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(commandName), JpaJobSpecsUnitTests.COMMAND_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(command), JpaJobSpecsUnitTests.COMMAND);
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(tagSearchString), this.tagLikeStatement);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(started), JpaJobSpecsUnitTests.MIN_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(started), JpaJobSpecsUnitTests.MAX_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(finished), JpaJobSpecsUnitTests.MIN_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(finished), JpaJobSpecsUnitTests.MAX_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(grouping), JpaJobSpecsUnitTests.GROUPING);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(groupingInstance), JpaJobSpecsUnitTests.GROUPING_INSTANCE);
    }

    /**
     * Test the find specification.
     */
    @Test
    public void testFindWithOutClusterId() {
        JpaJobSpecs.getFindPredicate(this.root, this.cb, JpaJobSpecsUnitTests.ID, JpaJobSpecsUnitTests.JOB_NAME, JpaJobSpecsUnitTests.USER_NAME, JpaJobSpecsUnitTests.STATUSES, JpaJobSpecsUnitTests.TAGS, JpaJobSpecsUnitTests.CLUSTER_NAME, null, JpaJobSpecsUnitTests.COMMAND_NAME, JpaJobSpecsUnitTests.COMMAND, JpaJobSpecsUnitTests.MIN_STARTED, JpaJobSpecsUnitTests.MAX_STARTED, JpaJobSpecsUnitTests.MIN_FINISHED, JpaJobSpecsUnitTests.MAX_FINISHED, JpaJobSpecsUnitTests.GROUPING, JpaJobSpecsUnitTests.GROUPING_INSTANCE);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(uniqueId), JpaJobSpecsUnitTests.ID);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(name), JpaJobSpecsUnitTests.JOB_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(user), JpaJobSpecsUnitTests.USER_NAME);
        for (final JobStatus status : JpaJobSpecsUnitTests.STATUSES) {
            Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(status), status);
        }
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(clusterName), JpaJobSpecsUnitTests.CLUSTER_NAME);
        Mockito.verify(this.cb, Mockito.never()).equal(this.root.get(cluster), JpaJobSpecsUnitTests.CLUSTER);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(commandName), JpaJobSpecsUnitTests.COMMAND_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(command), JpaJobSpecsUnitTests.COMMAND);
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(tagSearchString), this.tagLikeStatement);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(started), JpaJobSpecsUnitTests.MIN_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(started), JpaJobSpecsUnitTests.MAX_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(finished), JpaJobSpecsUnitTests.MIN_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(finished), JpaJobSpecsUnitTests.MAX_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(grouping), JpaJobSpecsUnitTests.GROUPING);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(groupingInstance), JpaJobSpecsUnitTests.GROUPING_INSTANCE);
    }

    /**
     * Test the find specification.
     */
    @Test
    public void testFindWithOutCommandName() {
        JpaJobSpecs.getFindPredicate(this.root, this.cb, JpaJobSpecsUnitTests.ID, JpaJobSpecsUnitTests.JOB_NAME, JpaJobSpecsUnitTests.USER_NAME, JpaJobSpecsUnitTests.STATUSES, JpaJobSpecsUnitTests.TAGS, JpaJobSpecsUnitTests.CLUSTER_NAME, JpaJobSpecsUnitTests.CLUSTER, null, JpaJobSpecsUnitTests.COMMAND, JpaJobSpecsUnitTests.MIN_STARTED, JpaJobSpecsUnitTests.MAX_STARTED, JpaJobSpecsUnitTests.MIN_FINISHED, JpaJobSpecsUnitTests.MAX_FINISHED, JpaJobSpecsUnitTests.GROUPING, JpaJobSpecsUnitTests.GROUPING_INSTANCE);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(uniqueId), JpaJobSpecsUnitTests.ID);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(name), JpaJobSpecsUnitTests.JOB_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(user), JpaJobSpecsUnitTests.USER_NAME);
        for (final JobStatus status : JpaJobSpecsUnitTests.STATUSES) {
            Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(status), status);
        }
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(clusterName), JpaJobSpecsUnitTests.CLUSTER_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(cluster), JpaJobSpecsUnitTests.CLUSTER);
        Mockito.verify(this.cb, Mockito.never()).equal(this.root.get(commandName), JpaJobSpecsUnitTests.COMMAND_NAME);
        Mockito.verify(this.cb, Mockito.never()).like(this.root.get(commandName), JpaJobSpecsUnitTests.COMMAND_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(command), JpaJobSpecsUnitTests.COMMAND);
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(tagSearchString), this.tagLikeStatement);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(started), JpaJobSpecsUnitTests.MIN_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(started), JpaJobSpecsUnitTests.MAX_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(finished), JpaJobSpecsUnitTests.MIN_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(finished), JpaJobSpecsUnitTests.MAX_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(grouping), JpaJobSpecsUnitTests.GROUPING);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(groupingInstance), JpaJobSpecsUnitTests.GROUPING_INSTANCE);
    }

    /**
     * Test the find specification.
     */
    @Test
    public void testFindWithOutCommandId() {
        JpaJobSpecs.getFindPredicate(this.root, this.cb, JpaJobSpecsUnitTests.ID, JpaJobSpecsUnitTests.JOB_NAME, JpaJobSpecsUnitTests.USER_NAME, JpaJobSpecsUnitTests.STATUSES, JpaJobSpecsUnitTests.TAGS, JpaJobSpecsUnitTests.CLUSTER_NAME, JpaJobSpecsUnitTests.CLUSTER, JpaJobSpecsUnitTests.COMMAND_NAME, null, JpaJobSpecsUnitTests.MIN_STARTED, JpaJobSpecsUnitTests.MAX_STARTED, JpaJobSpecsUnitTests.MIN_FINISHED, JpaJobSpecsUnitTests.MAX_FINISHED, JpaJobSpecsUnitTests.GROUPING, JpaJobSpecsUnitTests.GROUPING_INSTANCE);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(uniqueId), JpaJobSpecsUnitTests.ID);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(name), JpaJobSpecsUnitTests.JOB_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(user), JpaJobSpecsUnitTests.USER_NAME);
        for (final JobStatus status : JpaJobSpecsUnitTests.STATUSES) {
            Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(status), status);
        }
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(clusterName), JpaJobSpecsUnitTests.CLUSTER_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(cluster), JpaJobSpecsUnitTests.CLUSTER);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(commandName), JpaJobSpecsUnitTests.COMMAND_NAME);
        Mockito.verify(this.cb, Mockito.never()).equal(this.root.get(command), JpaJobSpecsUnitTests.COMMAND);
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(tagSearchString), this.tagLikeStatement);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(started), JpaJobSpecsUnitTests.MIN_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(started), JpaJobSpecsUnitTests.MAX_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(finished), JpaJobSpecsUnitTests.MIN_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(finished), JpaJobSpecsUnitTests.MAX_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(grouping), JpaJobSpecsUnitTests.GROUPING);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(groupingInstance), JpaJobSpecsUnitTests.GROUPING_INSTANCE);
    }

    /**
     * Test the find specification.
     */
    @Test
    public void testFindWithOutTags() {
        JpaJobSpecs.getFindPredicate(this.root, this.cb, JpaJobSpecsUnitTests.ID, JpaJobSpecsUnitTests.JOB_NAME, JpaJobSpecsUnitTests.USER_NAME, JpaJobSpecsUnitTests.STATUSES, null, JpaJobSpecsUnitTests.CLUSTER_NAME, JpaJobSpecsUnitTests.CLUSTER, JpaJobSpecsUnitTests.COMMAND_NAME, JpaJobSpecsUnitTests.COMMAND, JpaJobSpecsUnitTests.MIN_STARTED, JpaJobSpecsUnitTests.MAX_STARTED, JpaJobSpecsUnitTests.MIN_FINISHED, JpaJobSpecsUnitTests.MAX_FINISHED, JpaJobSpecsUnitTests.GROUPING, JpaJobSpecsUnitTests.GROUPING_INSTANCE);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(uniqueId), JpaJobSpecsUnitTests.ID);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(name), JpaJobSpecsUnitTests.JOB_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(user), JpaJobSpecsUnitTests.USER_NAME);
        for (final JobStatus status : JpaJobSpecsUnitTests.STATUSES) {
            Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(status), status);
        }
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(clusterName), JpaJobSpecsUnitTests.CLUSTER_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(cluster), JpaJobSpecsUnitTests.CLUSTER);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(commandName), JpaJobSpecsUnitTests.COMMAND_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(command), JpaJobSpecsUnitTests.COMMAND);
        Mockito.verify(this.cb, Mockito.never()).like(this.root.get(tagSearchString), this.tagLikeStatement);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(started), JpaJobSpecsUnitTests.MIN_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(started), JpaJobSpecsUnitTests.MAX_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(finished), JpaJobSpecsUnitTests.MIN_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(finished), JpaJobSpecsUnitTests.MAX_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(grouping), JpaJobSpecsUnitTests.GROUPING);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(groupingInstance), JpaJobSpecsUnitTests.GROUPING_INSTANCE);
    }

    /**
     * Test the find specification.
     */
    @Test
    public void testFindWithOutMinStarted() {
        JpaJobSpecs.getFindPredicate(this.root, this.cb, JpaJobSpecsUnitTests.ID, JpaJobSpecsUnitTests.JOB_NAME, JpaJobSpecsUnitTests.USER_NAME, JpaJobSpecsUnitTests.STATUSES, JpaJobSpecsUnitTests.TAGS, JpaJobSpecsUnitTests.CLUSTER_NAME, JpaJobSpecsUnitTests.CLUSTER, JpaJobSpecsUnitTests.COMMAND_NAME, JpaJobSpecsUnitTests.COMMAND, null, JpaJobSpecsUnitTests.MAX_STARTED, JpaJobSpecsUnitTests.MIN_FINISHED, JpaJobSpecsUnitTests.MAX_FINISHED, JpaJobSpecsUnitTests.GROUPING, JpaJobSpecsUnitTests.GROUPING_INSTANCE);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(uniqueId), JpaJobSpecsUnitTests.ID);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(name), JpaJobSpecsUnitTests.JOB_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(user), JpaJobSpecsUnitTests.USER_NAME);
        for (final JobStatus status : JpaJobSpecsUnitTests.STATUSES) {
            Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(status), status);
        }
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(clusterName), JpaJobSpecsUnitTests.CLUSTER_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(cluster), JpaJobSpecsUnitTests.CLUSTER);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(commandName), JpaJobSpecsUnitTests.COMMAND_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(command), JpaJobSpecsUnitTests.COMMAND);
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(tagSearchString), this.tagLikeStatement);
        Mockito.verify(this.cb, Mockito.never()).greaterThanOrEqualTo(this.root.get(started), JpaJobSpecsUnitTests.MIN_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(started), JpaJobSpecsUnitTests.MAX_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(finished), JpaJobSpecsUnitTests.MIN_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(finished), JpaJobSpecsUnitTests.MAX_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(grouping), JpaJobSpecsUnitTests.GROUPING);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(groupingInstance), JpaJobSpecsUnitTests.GROUPING_INSTANCE);
    }

    /**
     * Test the find specification.
     */
    @Test
    public void testFindWithOutMaxStarted() {
        JpaJobSpecs.getFindPredicate(this.root, this.cb, JpaJobSpecsUnitTests.ID, JpaJobSpecsUnitTests.JOB_NAME, JpaJobSpecsUnitTests.USER_NAME, JpaJobSpecsUnitTests.STATUSES, JpaJobSpecsUnitTests.TAGS, JpaJobSpecsUnitTests.CLUSTER_NAME, JpaJobSpecsUnitTests.CLUSTER, JpaJobSpecsUnitTests.COMMAND_NAME, JpaJobSpecsUnitTests.COMMAND, JpaJobSpecsUnitTests.MIN_STARTED, null, JpaJobSpecsUnitTests.MIN_FINISHED, JpaJobSpecsUnitTests.MAX_FINISHED, JpaJobSpecsUnitTests.GROUPING, JpaJobSpecsUnitTests.GROUPING_INSTANCE);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(uniqueId), JpaJobSpecsUnitTests.ID);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(name), JpaJobSpecsUnitTests.JOB_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(user), JpaJobSpecsUnitTests.USER_NAME);
        for (final JobStatus status : JpaJobSpecsUnitTests.STATUSES) {
            Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(status), status);
        }
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(clusterName), JpaJobSpecsUnitTests.CLUSTER_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(cluster), JpaJobSpecsUnitTests.CLUSTER);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(commandName), JpaJobSpecsUnitTests.COMMAND_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(command), JpaJobSpecsUnitTests.COMMAND);
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(tagSearchString), this.tagLikeStatement);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(started), JpaJobSpecsUnitTests.MIN_STARTED);
        Mockito.verify(this.cb, Mockito.never()).lessThan(this.root.get(started), JpaJobSpecsUnitTests.MAX_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(finished), JpaJobSpecsUnitTests.MIN_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(finished), JpaJobSpecsUnitTests.MAX_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(grouping), JpaJobSpecsUnitTests.GROUPING);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(groupingInstance), JpaJobSpecsUnitTests.GROUPING_INSTANCE);
    }

    /**
     * Test the find specification.
     */
    @Test
    public void testFindWithOutMinFinished() {
        JpaJobSpecs.getFindPredicate(this.root, this.cb, JpaJobSpecsUnitTests.ID, JpaJobSpecsUnitTests.JOB_NAME, JpaJobSpecsUnitTests.USER_NAME, JpaJobSpecsUnitTests.STATUSES, JpaJobSpecsUnitTests.TAGS, JpaJobSpecsUnitTests.CLUSTER_NAME, JpaJobSpecsUnitTests.CLUSTER, JpaJobSpecsUnitTests.COMMAND_NAME, JpaJobSpecsUnitTests.COMMAND, JpaJobSpecsUnitTests.MIN_STARTED, JpaJobSpecsUnitTests.MAX_STARTED, null, JpaJobSpecsUnitTests.MAX_FINISHED, JpaJobSpecsUnitTests.GROUPING, JpaJobSpecsUnitTests.GROUPING_INSTANCE);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(uniqueId), JpaJobSpecsUnitTests.ID);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(name), JpaJobSpecsUnitTests.JOB_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(user), JpaJobSpecsUnitTests.USER_NAME);
        for (final JobStatus status : JpaJobSpecsUnitTests.STATUSES) {
            Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(status), status);
        }
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(clusterName), JpaJobSpecsUnitTests.CLUSTER_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(cluster), JpaJobSpecsUnitTests.CLUSTER);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(commandName), JpaJobSpecsUnitTests.COMMAND_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(command), JpaJobSpecsUnitTests.COMMAND);
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(tagSearchString), this.tagLikeStatement);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(started), JpaJobSpecsUnitTests.MIN_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(started), JpaJobSpecsUnitTests.MAX_STARTED);
        Mockito.verify(this.cb, Mockito.never()).greaterThanOrEqualTo(this.root.get(finished), JpaJobSpecsUnitTests.MIN_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(finished), JpaJobSpecsUnitTests.MAX_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(grouping), JpaJobSpecsUnitTests.GROUPING);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(groupingInstance), JpaJobSpecsUnitTests.GROUPING_INSTANCE);
    }

    /**
     * Test the find specification.
     */
    @Test
    public void testFindWithOutMaxFinished() {
        JpaJobSpecs.getFindPredicate(this.root, this.cb, JpaJobSpecsUnitTests.ID, JpaJobSpecsUnitTests.JOB_NAME, JpaJobSpecsUnitTests.USER_NAME, JpaJobSpecsUnitTests.STATUSES, JpaJobSpecsUnitTests.TAGS, JpaJobSpecsUnitTests.CLUSTER_NAME, JpaJobSpecsUnitTests.CLUSTER, JpaJobSpecsUnitTests.COMMAND_NAME, JpaJobSpecsUnitTests.COMMAND, JpaJobSpecsUnitTests.MIN_STARTED, JpaJobSpecsUnitTests.MAX_STARTED, JpaJobSpecsUnitTests.MIN_FINISHED, null, JpaJobSpecsUnitTests.GROUPING, JpaJobSpecsUnitTests.GROUPING_INSTANCE);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(uniqueId), JpaJobSpecsUnitTests.ID);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(name), JpaJobSpecsUnitTests.JOB_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(user), JpaJobSpecsUnitTests.USER_NAME);
        for (final JobStatus status : JpaJobSpecsUnitTests.STATUSES) {
            Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(status), status);
        }
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(clusterName), JpaJobSpecsUnitTests.CLUSTER_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(cluster), JpaJobSpecsUnitTests.CLUSTER);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(commandName), JpaJobSpecsUnitTests.COMMAND_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(command), JpaJobSpecsUnitTests.COMMAND);
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(tagSearchString), this.tagLikeStatement);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(started), JpaJobSpecsUnitTests.MIN_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(started), JpaJobSpecsUnitTests.MAX_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(finished), JpaJobSpecsUnitTests.MIN_FINISHED);
        Mockito.verify(this.cb, Mockito.never()).lessThan(this.root.get(finished), JpaJobSpecsUnitTests.MAX_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(grouping), JpaJobSpecsUnitTests.GROUPING);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(groupingInstance), JpaJobSpecsUnitTests.GROUPING_INSTANCE);
    }

    /**
     * Test the find specification.
     */
    @Test
    public void testFindWithEmptyTag() {
        JpaJobSpecsUnitTests.TAGS.add("");
        JpaJobSpecs.getFindPredicate(this.root, this.cb, JpaJobSpecsUnitTests.ID, JpaJobSpecsUnitTests.JOB_NAME, JpaJobSpecsUnitTests.USER_NAME, JpaJobSpecsUnitTests.STATUSES, JpaJobSpecsUnitTests.TAGS, JpaJobSpecsUnitTests.CLUSTER_NAME, JpaJobSpecsUnitTests.CLUSTER, JpaJobSpecsUnitTests.COMMAND_NAME, JpaJobSpecsUnitTests.COMMAND, JpaJobSpecsUnitTests.MIN_STARTED, JpaJobSpecsUnitTests.MAX_STARTED, JpaJobSpecsUnitTests.MIN_FINISHED, JpaJobSpecsUnitTests.MAX_FINISHED, JpaJobSpecsUnitTests.GROUPING, JpaJobSpecsUnitTests.GROUPING_INSTANCE);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(uniqueId), JpaJobSpecsUnitTests.ID);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(name), JpaJobSpecsUnitTests.JOB_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(user), JpaJobSpecsUnitTests.USER_NAME);
        for (final JobStatus status : JpaJobSpecsUnitTests.STATUSES) {
            Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(status), status);
        }
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(clusterName), JpaJobSpecsUnitTests.CLUSTER_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(cluster), JpaJobSpecsUnitTests.CLUSTER);
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(tagSearchString), this.tagLikeStatement);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(started), JpaJobSpecsUnitTests.MIN_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(started), JpaJobSpecsUnitTests.MAX_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(finished), JpaJobSpecsUnitTests.MIN_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(finished), JpaJobSpecsUnitTests.MAX_FINISHED);
    }

    /**
     * Test the find specification.
     */
    @Test
    public void testFindWithOutGrouping() {
        JpaJobSpecs.getFindPredicate(this.root, this.cb, JpaJobSpecsUnitTests.ID, JpaJobSpecsUnitTests.JOB_NAME, JpaJobSpecsUnitTests.USER_NAME, JpaJobSpecsUnitTests.STATUSES, JpaJobSpecsUnitTests.TAGS, JpaJobSpecsUnitTests.CLUSTER_NAME, JpaJobSpecsUnitTests.CLUSTER, JpaJobSpecsUnitTests.COMMAND_NAME, JpaJobSpecsUnitTests.COMMAND, JpaJobSpecsUnitTests.MIN_STARTED, JpaJobSpecsUnitTests.MAX_STARTED, JpaJobSpecsUnitTests.MIN_FINISHED, JpaJobSpecsUnitTests.MAX_FINISHED, null, JpaJobSpecsUnitTests.GROUPING_INSTANCE);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(uniqueId), JpaJobSpecsUnitTests.ID);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(name), JpaJobSpecsUnitTests.JOB_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(user), JpaJobSpecsUnitTests.USER_NAME);
        for (final JobStatus status : JpaJobSpecsUnitTests.STATUSES) {
            Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(status), status);
        }
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(clusterName), JpaJobSpecsUnitTests.CLUSTER_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(cluster), JpaJobSpecsUnitTests.CLUSTER);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(commandName), JpaJobSpecsUnitTests.COMMAND_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(command), JpaJobSpecsUnitTests.COMMAND);
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(tagSearchString), this.tagLikeStatement);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(started), JpaJobSpecsUnitTests.MIN_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(started), JpaJobSpecsUnitTests.MAX_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(finished), JpaJobSpecsUnitTests.MIN_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(finished), JpaJobSpecsUnitTests.MAX_FINISHED);
        Mockito.verify(this.cb, Mockito.never()).equal(this.root.get(grouping), JpaJobSpecsUnitTests.GROUPING);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(groupingInstance), JpaJobSpecsUnitTests.GROUPING_INSTANCE);
    }

    /**
     * Test the find specification.
     */
    @Test
    public void testFindWithOutGroupingInstance() {
        JpaJobSpecs.getFindPredicate(this.root, this.cb, JpaJobSpecsUnitTests.ID, JpaJobSpecsUnitTests.JOB_NAME, JpaJobSpecsUnitTests.USER_NAME, JpaJobSpecsUnitTests.STATUSES, JpaJobSpecsUnitTests.TAGS, JpaJobSpecsUnitTests.CLUSTER_NAME, JpaJobSpecsUnitTests.CLUSTER, JpaJobSpecsUnitTests.COMMAND_NAME, JpaJobSpecsUnitTests.COMMAND, JpaJobSpecsUnitTests.MIN_STARTED, JpaJobSpecsUnitTests.MAX_STARTED, JpaJobSpecsUnitTests.MIN_FINISHED, JpaJobSpecsUnitTests.MAX_FINISHED, JpaJobSpecsUnitTests.GROUPING, null);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(uniqueId), JpaJobSpecsUnitTests.ID);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(name), JpaJobSpecsUnitTests.JOB_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(user), JpaJobSpecsUnitTests.USER_NAME);
        for (final JobStatus status : JpaJobSpecsUnitTests.STATUSES) {
            Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(status), status);
        }
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(clusterName), JpaJobSpecsUnitTests.CLUSTER_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(cluster), JpaJobSpecsUnitTests.CLUSTER);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(commandName), JpaJobSpecsUnitTests.COMMAND_NAME);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(command), JpaJobSpecsUnitTests.COMMAND);
        Mockito.verify(this.cb, Mockito.times(1)).like(this.root.get(tagSearchString), this.tagLikeStatement);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(started), JpaJobSpecsUnitTests.MIN_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(started), JpaJobSpecsUnitTests.MAX_STARTED);
        Mockito.verify(this.cb, Mockito.times(1)).greaterThanOrEqualTo(this.root.get(finished), JpaJobSpecsUnitTests.MIN_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).lessThan(this.root.get(finished), JpaJobSpecsUnitTests.MAX_FINISHED);
        Mockito.verify(this.cb, Mockito.times(1)).equal(this.root.get(grouping), JpaJobSpecsUnitTests.GROUPING);
        Mockito.verify(this.cb, Mockito.never()).equal(this.root.get(groupingInstance), JpaJobSpecsUnitTests.GROUPING_INSTANCE);
    }
}

