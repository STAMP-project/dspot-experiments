/**
 * -
 * -\-\-
 * Helios Services
 * --
 * Copyright (C) 2016 Spotify AB
 * --
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * -/-/-
 */
package com.spotify.helios.servicescommon;


import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.spotify.helios.servicescommon.coordination.Paths;
import java.util.List;
import org.apache.curator.framework.api.ACLProvider;
import org.apache.zookeeper.data.ACL;
import org.apache.zookeeper.data.Id;
import org.hamcrest.Matchers;
import org.junit.Assert;
import org.junit.Test;


public class ZooKeeperAclProvidersTest {
    private static final String DIGEST_SCHEME = "digest";

    private static final String AGENT_USER = "agent-user";

    private static final String AGENT_PASSWORD = "agent-pass";

    private static final String AGENT_DIGEST = ZooKeeperAclProviders.digest(ZooKeeperAclProvidersTest.AGENT_USER, ZooKeeperAclProvidersTest.AGENT_PASSWORD);

    private static final Id AGENT_ID = new Id(ZooKeeperAclProvidersTest.DIGEST_SCHEME, (((ZooKeeperAclProvidersTest.AGENT_USER) + ":") + (ZooKeeperAclProvidersTest.AGENT_DIGEST)));

    private static final String MASTER_USER = "master-user";

    private static final String MASTER_PASSWORD = "master-pass";

    private static final String MASTER_DIGEST = ZooKeeperAclProviders.digest(ZooKeeperAclProvidersTest.MASTER_USER, ZooKeeperAclProvidersTest.MASTER_PASSWORD);

    private static final Id MASTER_ID = new Id(ZooKeeperAclProvidersTest.DIGEST_SCHEME, (((ZooKeeperAclProvidersTest.MASTER_USER) + ":") + (ZooKeeperAclProvidersTest.MASTER_DIGEST)));

    private ACLProvider aclProvider;

    @Test
    public void testDigest() {
        // Reference test value generated by running:
        // echo -n user:password | openssl dgst -sha1 -binary | base64
        Assert.assertEquals("tpUq/4Pn5A64fVZyQ0gOJ8ZWqkY=", ZooKeeperAclProviders.digest("user", "password"));
    }

    @Test
    public void testDefaultAcl() {
        Assert.assertEquals(Sets.newHashSet(new ACL(READ, ZooKeeperAclProvidersTest.AGENT_ID), new ACL(((((CREATE) | (READ)) | (WRITE)) | (DELETE)), ZooKeeperAclProvidersTest.MASTER_ID)), Sets.newHashSet(aclProvider.getDefaultAcl()));
    }

    // None but masters and agents should have any permissions to any paths
    @Test
    public void testOnlyAgentsAndMastersHaveAccess() {
        final List<String> paths = Lists.newArrayList("/", "/some/random/path", "/config/hosts");
        for (final String path : paths) {
            final List<ACL> acls = aclProvider.getAclForPath(path);
            for (final ACL acl : acls) {
                Assert.assertThat(acl.getId(), Matchers.anyOf(Matchers.equalTo(ZooKeeperAclProvidersTest.AGENT_ID), Matchers.equalTo(ZooKeeperAclProvidersTest.MASTER_ID)));
            }
        }
    }

    // Masters should have CRWD permissions on ALL nodes
    @Test
    public void testMasterPermissions() {
        final ACL acl = new ACL(((((CREATE) | (READ)) | (WRITE)) | (DELETE)), ZooKeeperAclProvidersTest.MASTER_ID);
        Assert.assertThat(aclProvider.getAclForPath("/"), Matchers.hasItem(acl));
        Assert.assertThat(aclProvider.getAclForPath("/some/random/path"), Matchers.hasItem(acl));
        Assert.assertThat(aclProvider.getAclForPath("/config/hosts/foo"), Matchers.hasItem(acl));
        Assert.assertThat(aclProvider.getAclForPath("/status/hosts/foo"), Matchers.hasItem(acl));
    }

    @Test
    public void testAgentPermissions() {
        // Verify that agents only have READ permissions on paths it shouldn't meddle with
        // (these tests are obviously not exhaustive)
        Assert.assertEquals(ZooKeeperAclProvidersTest.agentPerms(aclProvider.getAclForPath("/")), READ);
        Assert.assertEquals(ZooKeeperAclProvidersTest.agentPerms(aclProvider.getAclForPath("/random/path")), READ);
        Assert.assertEquals(ZooKeeperAclProvidersTest.agentPerms(aclProvider.getAclForPath("/config")), READ);
        Assert.assertEquals(ZooKeeperAclProvidersTest.agentPerms(aclProvider.getAclForPath("/status")), READ);
        Assert.assertEquals(ZooKeeperAclProvidersTest.agentPerms(aclProvider.getAclForPath(Paths.statusDeploymentGroupTasks())), READ);
        Assert.assertEquals(ZooKeeperAclProvidersTest.agentPerms(aclProvider.getAclForPath(Paths.configDeploymentGroups())), READ);
        Assert.assertEquals(ZooKeeperAclProvidersTest.agentPerms(aclProvider.getAclForPath(Paths.configDeploymentGroup("group"))), READ);
        Assert.assertEquals(ZooKeeperAclProvidersTest.agentPerms(aclProvider.getAclForPath(Paths.configHostJobs("host"))), READ);
        // Agents need limited permissions in the /config/hosts subtree
        Assert.assertEquals(ZooKeeperAclProvidersTest.agentPerms(aclProvider.getAclForPath(Paths.configHosts())), (((CREATE) | (READ)) | (DELETE)));
        Assert.assertEquals(ZooKeeperAclProvidersTest.agentPerms(aclProvider.getAclForPath(Paths.configHost("host"))), (((CREATE) | (READ)) | (DELETE)));
        Assert.assertEquals(ZooKeeperAclProvidersTest.agentPerms(aclProvider.getAclForPath(Paths.configHostId("host"))), (((CREATE) | (READ)) | (DELETE)));
        Assert.assertEquals(ZooKeeperAclProvidersTest.agentPerms(aclProvider.getAclForPath(Paths.configHostPorts("host"))), (((CREATE) | (READ)) | (DELETE)));
        Assert.assertEquals(ZooKeeperAclProvidersTest.agentPerms(aclProvider.getAclForPath(Paths.configHostPort("host", 123))), READ);
        // Agents need elevated permissions in the /status/hosts subtree
        Assert.assertEquals(ZooKeeperAclProvidersTest.agentPerms(aclProvider.getAclForPath(Paths.statusHosts())), (((CREATE) | (READ)) | (DELETE)));
        Assert.assertEquals(ZooKeeperAclProvidersTest.agentPerms(aclProvider.getAclForPath(Paths.statusHost("host"))), (((CREATE) | (READ)) | (DELETE)));
        Assert.assertEquals(ZooKeeperAclProvidersTest.agentPerms(aclProvider.getAclForPath(Paths.statusHostJobs("host"))), (((CREATE) | (READ)) | (DELETE)));
        Assert.assertEquals(ZooKeeperAclProvidersTest.agentPerms(aclProvider.getAclForPath(Paths.statusHostJob("host", "job"))), ((READ) | (WRITE)));
        Assert.assertEquals(ZooKeeperAclProvidersTest.agentPerms(aclProvider.getAclForPath(Paths.statusHostAgentInfo("host"))), ((READ) | (WRITE)));
        Assert.assertEquals(ZooKeeperAclProvidersTest.agentPerms(aclProvider.getAclForPath(Paths.statusHostLabels("host"))), ((READ) | (WRITE)));
        Assert.assertEquals(ZooKeeperAclProvidersTest.agentPerms(aclProvider.getAclForPath(Paths.statusHostEnvVars("host"))), ((READ) | (WRITE)));
        Assert.assertEquals(ZooKeeperAclProvidersTest.agentPerms(aclProvider.getAclForPath(Paths.statusHostUp("host"))), ((READ) | (WRITE)));
    }
}

