/**
 * This file is part of lanterna (http://code.google.com/p/lanterna/).
 *
 * lanterna is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright (C) 2010-2018 Martin Berglund
 */
package com.googlecode.lanterna;


import java.util.Arrays;
import java.util.Collections;
import org.junit.Assert;
import org.junit.Test;


public class TerminalTextUtilsTest {
    @Test
    public void japaneseCharactersAreDetectedAsCJK() {
        String[] charactersToTest = new String[]{ TerminalTextUtilsTest.HIRAGANA, TerminalTextUtilsTest.KATAKANA, TerminalTextUtilsTest.JOUYOU_KANJI };
        for (String characters : charactersToTest) {
            for (int i = 0; i < (characters.length()); i++) {
                char c = characters.charAt(i);
                boolean expected = true;
                boolean actual = TerminalTextUtils.isCharCJK(c);
                Assert.assertEquals((("Japanese character '" + c) + "' was not marked as a CJK character"), expected, actual);
            }
        }
    }

    @Test
    public void halfWidthKatakanaAreNotMarkedAsCJK() {
        // So here's a funny thing, these characters _ARE_ technically CJK (they are absolutely Japanese) but since they
        // are 'normal-width' we want to classify them as 'normal' character and not 2-columns wide.
        for (int i = 0; i < (TerminalTextUtilsTest.HALF_WIDTH_KATAKANA.length()); i++) {
            char c = TerminalTextUtilsTest.HALF_WIDTH_KATAKANA.charAt(i);
            boolean expected = false;
            boolean actual = TerminalTextUtils.isCharCJK(c);
            Assert.assertEquals((("Half-width katakana character '" + c) + "' was marked as a CJK character, but shouldn't be"), expected, actual);
        }
    }

    @Test
    public void fullWidthRomanjiIsReportedAsCJK() {
        // These are the complete inverse of the above; here are definitely non-Asian characters that we want to be
        // considered as CJK since they are double-width
        for (int i = 0; i < (TerminalTextUtilsTest.FULL_WIDTH_ROMANJI.length()); i++) {
            char c = TerminalTextUtilsTest.FULL_WIDTH_ROMANJI.charAt(i);
            boolean expected = true;
            boolean actual = TerminalTextUtils.isCharCJK(c);
            Assert.assertEquals((("Full-width romanji character '" + c) + "' was marked not as a CJK character"), expected, actual);
        }
    }

    @Test
    public void koreanCharactersAreDetectedAsCJK() {
        for (int i = 0; i < (TerminalTextUtilsTest.HANGUL.length()); i++) {
            char c = TerminalTextUtilsTest.HANGUL.charAt(i);
            boolean expected = true;
            boolean actual = TerminalTextUtils.isCharCJK(c);
            Assert.assertEquals((("Korean character '" + c) + "' was not marked as a CJK character"), expected, actual);
        }
    }

    @Test
    public void simplifiedChineseCharactersAreDetectedAsCJK() {
        for (int i = 0; i < (TerminalTextUtilsTest.SIMPLIFIED_CHINESE_2500_MOST_COMMON.length()); i++) {
            char c = TerminalTextUtilsTest.SIMPLIFIED_CHINESE_2500_MOST_COMMON.charAt(i);
            boolean expected = true;
            boolean actual = TerminalTextUtils.isCharCJK(c);
            Assert.assertEquals((("Simplified chinese character '" + c) + "' was not marked as a CJK character"), expected, actual);
        }
    }

    @Test
    public void getTrueWidthReturnsDoubleSizeForCJKCharacters() {
        String[] cjkCharacters = new String[]{ TerminalTextUtilsTest.HIRAGANA, TerminalTextUtilsTest.KATAKANA, TerminalTextUtilsTest.FULL_WIDTH_ROMANJI, TerminalTextUtilsTest.JOUYOU_KANJI, TerminalTextUtilsTest.HANGUL, TerminalTextUtilsTest.SIMPLIFIED_CHINESE_2500_MOST_COMMON };
        for (String characters : cjkCharacters) {
            for (int i = 0; i < (characters.length()); i++) {
                int expected = 2;
                int actual = TerminalTextUtils.getColumnWidth(characters.substring(i, (i + 1)));
                Assert.assertEquals((("CJK character '" + (characters.charAt(i))) + "' didn't return 2"), expected, actual);
            }
        }
        String[] nonCJKCharacters = new String[]{ TerminalTextUtilsTest.LATIN1, TerminalTextUtilsTest.HALF_WIDTH_KATAKANA };
        for (String characters : nonCJKCharacters) {
            for (int i = 0; i < (characters.length()); i++) {
                int expected = 1;
                int actual = TerminalTextUtils.getColumnWidth(characters.substring(i, (i + 1)));
                Assert.assertEquals((("Non-CJK character '" + (characters.charAt(i))) + "' didn't return 1"), expected, actual);
            }
        }
        // Some static tests
        Assert.assertEquals(0, TerminalTextUtils.getColumnWidth(""));
        Assert.assertEquals(9, TerminalTextUtils.getColumnWidth("123456789"));
        Assert.assertEquals(29, TerminalTextUtils.getColumnWidth("????: computer terminal?"));
    }

    @Test
    public void getColumnIndexGeneralTest() {
        String testString = "????: computer terminal?";
        Assert.assertEquals(0, TerminalTextUtils.getColumnIndex(testString, 0));
        Assert.assertEquals(2, TerminalTextUtils.getColumnIndex(testString, 1));
        Assert.assertEquals(4, TerminalTextUtils.getColumnIndex(testString, 2));
        Assert.assertEquals(6, TerminalTextUtils.getColumnIndex(testString, 3));
        Assert.assertEquals(8, TerminalTextUtils.getColumnIndex(testString, 4));
        Assert.assertEquals(9, TerminalTextUtils.getColumnIndex(testString, 5));
        Assert.assertEquals(10, TerminalTextUtils.getColumnIndex(testString, 6));
        Assert.assertEquals(11, TerminalTextUtils.getColumnIndex(testString, 7));
        Assert.assertEquals(12, TerminalTextUtils.getColumnIndex(testString, 8));
        Assert.assertEquals(13, TerminalTextUtils.getColumnIndex(testString, 9));
        Assert.assertEquals(14, TerminalTextUtils.getColumnIndex(testString, 10));
        Assert.assertEquals(27, TerminalTextUtils.getColumnIndex(testString, 23));
        Assert.assertEquals(29, TerminalTextUtils.getColumnIndex(testString, 24));
    }

    @Test
    public void getStringCharacterIndex() {
        String testString = "????: computer terminal?";
        Assert.assertEquals(0, TerminalTextUtils.getStringCharacterIndex(testString, 0));
        Assert.assertEquals(0, TerminalTextUtils.getStringCharacterIndex(testString, 1));
        Assert.assertEquals(1, TerminalTextUtils.getStringCharacterIndex(testString, 2));
        Assert.assertEquals(1, TerminalTextUtils.getStringCharacterIndex(testString, 3));
        Assert.assertEquals(2, TerminalTextUtils.getStringCharacterIndex(testString, 4));
        Assert.assertEquals(2, TerminalTextUtils.getStringCharacterIndex(testString, 5));
        Assert.assertEquals(3, TerminalTextUtils.getStringCharacterIndex(testString, 6));
        Assert.assertEquals(3, TerminalTextUtils.getStringCharacterIndex(testString, 7));
        Assert.assertEquals(4, TerminalTextUtils.getStringCharacterIndex(testString, 8));
        Assert.assertEquals(5, TerminalTextUtils.getStringCharacterIndex(testString, 9));
        Assert.assertEquals(6, TerminalTextUtils.getStringCharacterIndex(testString, 10));
        Assert.assertEquals(23, TerminalTextUtils.getStringCharacterIndex(testString, 27));
        Assert.assertEquals(23, TerminalTextUtils.getStringCharacterIndex(testString, 28));
        Assert.assertEquals(24, TerminalTextUtils.getStringCharacterIndex(testString, 29));
    }

    @Test
    public void fitStringGeneralTest() {
        String testString = "????: computer terminal?";
        Assert.assertEquals("", TerminalTextUtils.fitString(testString, 0));
        Assert.assertEquals(" ", TerminalTextUtils.fitString(testString, 1));
        Assert.assertEquals("?", TerminalTextUtils.fitString(testString, 2));
        Assert.assertEquals("? ", TerminalTextUtils.fitString(testString, 3));
        Assert.assertEquals("??", TerminalTextUtils.fitString(testString, 4));
        Assert.assertEquals("????", TerminalTextUtils.fitString(testString, 8));
        Assert.assertEquals("????:", TerminalTextUtils.fitString(testString, 9));
        Assert.assertEquals("????: ", TerminalTextUtils.fitString(testString, 10));
        Assert.assertEquals("????: c", TerminalTextUtils.fitString(testString, 11));
        testString = "???";
        Assert.assertEquals("???", TerminalTextUtils.fitString(testString, 0, 20));
        Assert.assertEquals(" ??", TerminalTextUtils.fitString(testString, 1, 20));
        Assert.assertEquals("??", TerminalTextUtils.fitString(testString, 2, 20));
        Assert.assertEquals(" ?", TerminalTextUtils.fitString(testString, 3, 20));
        Assert.assertEquals("?", TerminalTextUtils.fitString(testString, 4, 20));
        Assert.assertEquals(" ", TerminalTextUtils.fitString(testString, 5, 20));
        Assert.assertEquals("", TerminalTextUtils.fitString(testString, 6, 20));
    }

    @Test
    public void testWordWrapping() {
        Assert.assertEquals("Incorrect word wrapping", Collections.singletonList("abc abc"), TerminalTextUtils.getWordWrappedText(80, "abc abc"));
        Assert.assertEquals("Incorrect word wrapping", Arrays.asList("abc", "abc"), TerminalTextUtils.getWordWrappedText(5, "abc abc"));
        Assert.assertEquals("Incorrect word wrapping - 0 width", Collections.singletonList("abc abc"), TerminalTextUtils.getWordWrappedText(0, "abc abc"));
        Assert.assertEquals("Incorrect word wrapping", Arrays.asList("abc", "abc", "abc"), TerminalTextUtils.getWordWrappedText(3, "abc abc abc"));
        Assert.assertEquals("Incorrect word wrapping", Arrays.asList("abc", "abc", "abc"), TerminalTextUtils.getWordWrappedText(4, "abc abc abc"));
        Assert.assertEquals("Incorrect word wrapping", Arrays.asList("abc", "abc", "abc"), TerminalTextUtils.getWordWrappedText(5, "abc abc abc"));
        Assert.assertEquals("Incorrect word wrapping", Arrays.asList("abc", "abc", "abc"), TerminalTextUtils.getWordWrappedText(6, "abc abc abc"));
        Assert.assertEquals("Incorrect word wrapping", Arrays.asList("abc abc", "abc"), TerminalTextUtils.getWordWrappedText(7, "abc abc abc"));
        Assert.assertEquals("Incorrect word wrapping", Arrays.asList("abc abc", "abc"), TerminalTextUtils.getWordWrappedText(8, "abc abc abc"));
        Assert.assertEquals("Incorrect word wrapping", Arrays.asList("abc abc", "abc"), TerminalTextUtils.getWordWrappedText(9, "abc abc abc"));
        Assert.assertEquals("Incorrect word wrapping", Arrays.asList("abc abc", "abc"), TerminalTextUtils.getWordWrappedText(10, "abc abc abc"));
        Assert.assertEquals("Incorrect word wrapping", Collections.singletonList("abc abc abc"), TerminalTextUtils.getWordWrappedText(11, "abc abc abc"));
        Assert.assertEquals("Incorrect word wrapping", Arrays.asList("abc", "def"), TerminalTextUtils.getWordWrappedText(3, "abcdef"));
        Assert.assertEquals("Incorrect word wrapping", Arrays.asList("This is a rather", "long text that", "will demonstrate", "a more real-world", "example of how", "word-wrapping is", "applied on a", "single line"), TerminalTextUtils.getWordWrappedText(17, "This is a rather long text that will demonstrate a more real-world example of how word-wrapping is applied on a single line"));
        Assert.assertEquals("Incorrect word wrapping", Arrays.asList("This is a rather long text that", "will demonstrate how", "word-wrapping is applied on", "texts that are already", "split over multiple lines"), TerminalTextUtils.getWordWrappedText(32, "This is a rather long text that will demonstrate how", "word-wrapping is applied on texts that are already", "split over multiple lines"));
        Assert.assertEquals("Didn't skip over all the extra spaces", Arrays.asList("abc   ", "def"), TerminalTextUtils.getWordWrappedText(6, "abc        def"));
        Assert.assertEquals("Incorrect word wrapping - don't add a new line for only white space", Collections.singletonList("abc "), TerminalTextUtils.getWordWrappedText(4, "abc       "));
        Assert.assertEquals("Incorrect word wrapping - 1 blank at begin", Arrays.asList(" ", "abc", "abc"), TerminalTextUtils.getWordWrappedText(3, " abc abc"));
        Assert.assertEquals("Incorrect word wrapping - 2 blanks at begin", Arrays.asList(" ", "abc", "abc"), TerminalTextUtils.getWordWrappedText(3, "  abc abc"));
    }

    @Test
    public void testWordWrappingWithCJK() {
        Assert.assertEquals("Incorrect word wrapping", Collections.singletonList("?????"), TerminalTextUtils.getWordWrappedText(80, "?????"));
        Assert.assertEquals("Incorrect word wrapping", Arrays.asList("????", "?"), TerminalTextUtils.getWordWrappedText(8, "?????"));
        Assert.assertEquals("Incorrect word wrapping", Arrays.asList("???", "??"), TerminalTextUtils.getWordWrappedText(7, "?????"));
        Assert.assertEquals("Incorrect word wrapping - CJK @ 1 col", Arrays.asList("?", "?", "?", "?", "?"), TerminalTextUtils.getWordWrappedText(1, "?????"));
        Assert.assertEquals("Incorrect word wrapping - break between CJK and latin", Arrays.asList("a?", "bc"), TerminalTextUtils.getWordWrappedText(3, "a?bc"));
    }

    // Add a test for traditional Chinese characters here? If someone can contribute a list! The list of simplified
    // Chinese characters was difficult enough...
    private static final String LATIN1 = " !\"#$%&()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_" + ("`abcdefghijklmnopqrstuvwxyz{|}~??????????????????????????????" + "????????????????????????????????????????????????????????????????");

    private static final String HIRAGANA = "?????????????????????????????????????????????????????????" + "????????????????????????????????";

    private static final String KATAKANA = "?????????????????????????????????????????" + "???????????????????????????????????????????????????????";

    private static final String HALF_WIDTH_KATAKANA = "???????????????" + (("????????????????" + "????????????????") + "????????????????");

    private static final String FULL_WIDTH_ROMANJI = "??????????????????????????????????????????????????????????" + "??????????????????????????????????????";

    private static final String JOUYOU_KANJI = "??????????????????????????????????????" + (((((((((((((((((((((((((((((((((((("?????????????????????????????????????????????????????????" + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "?????????????????????????????????????????????????????????") + "??????????????????????????????????????????????");

    private static final String

    private static final String
}

