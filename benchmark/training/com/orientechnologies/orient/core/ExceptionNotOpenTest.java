package com.orientechnologies.orient.core;


import OTransaction.TXTYPE.NOTX;
import com.orientechnologies.orient.core.db.ODatabaseDocumentInternal;
import com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;
import com.orientechnologies.orient.core.exception.ODatabaseException;
import com.orientechnologies.orient.core.id.ORecordId;
import com.orientechnologies.orient.core.record.impl.ODocument;
import org.junit.Assert;
import org.junit.Test;


public class ExceptionNotOpenTest {
    @Test
    public void testExceptionNotOpenMemory() {
        ODatabaseDocumentInternal db = new ODatabaseDocumentTx("memory:testExceptionNotOpenMemory");
        try {
            db.save(new ODocument());
            Assert.fail();
        } catch (ODatabaseException ex) {
        }
        try {
            db.delete(new ODocument());
            Assert.fail();
        } catch (ODatabaseException ex) {
        }
        try {
            db.hide(new ORecordId());
            Assert.fail();
        } catch (ODatabaseException ex) {
        }
        try {
            db.begin();
            Assert.fail();
        } catch (ODatabaseException ex) {
        }
        try {
            db.begin(NOTX);
            Assert.fail();
        } catch (ODatabaseException ex) {
        }
        try {
            db.rollback();
            Assert.fail();
        } catch (ODatabaseException ex) {
        }
        try {
            db.commit();
            Assert.fail();
        } catch (ODatabaseException ex) {
        }
        try {
            db.getMetadata();
            Assert.fail();
        } catch (ODatabaseException ex) {
        }
    }

    @Test
    public void testExceptionNotOpenPlocal() {
        ODatabaseDocumentInternal db = new ODatabaseDocumentTx("plocal:./target/databaseCheck");
        try {
            db.save(new ODocument());
            Assert.fail();
        } catch (ODatabaseException ex) {
        }
        try {
            db.delete(new ODocument());
            Assert.fail();
        } catch (ODatabaseException ex) {
        }
        try {
            db.hide(new ORecordId());
            Assert.fail();
        } catch (ODatabaseException ex) {
        }
        try {
            db.begin();
            Assert.fail();
        } catch (ODatabaseException ex) {
        }
        try {
            db.begin(NOTX);
            Assert.fail();
        } catch (ODatabaseException ex) {
        }
        try {
            db.rollback();
            Assert.fail();
        } catch (ODatabaseException ex) {
        }
        try {
            db.commit();
            Assert.fail();
        } catch (ODatabaseException ex) {
        }
        try {
            db.getMetadata();
            Assert.fail();
        } catch (ODatabaseException ex) {
        }
    }
}

