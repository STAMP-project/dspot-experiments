/**
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.thoughtworks.go.agent;


import AgentAutoRegistrationPropertiesImpl.AGENT_AUTO_REGISTER_ENVIRONMENTS;
import AgentAutoRegistrationPropertiesImpl.AGENT_AUTO_REGISTER_HOSTNAME;
import AgentAutoRegistrationPropertiesImpl.AGENT_AUTO_REGISTER_KEY;
import AgentAutoRegistrationPropertiesImpl.AGENT_AUTO_REGISTER_RESOURCES;
import com.thoughtworks.go.config.AgentAutoRegistrationProperties;
import java.io.File;
import java.io.FileOutputStream;
import java.nio.charset.StandardCharsets;
import java.util.Properties;
import org.apache.commons.io.FileUtils;
import org.hamcrest.Matchers;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;


public class AgentAutoRegistrationPropertiesImplTest {
    @Rule
    public final TemporaryFolder folder = new TemporaryFolder();

    private File configFile;

    @Test
    public void shouldReturnAgentAutoRegisterPropertiesIfPresent() throws Exception {
        Properties properties = new Properties();
        properties.put(AGENT_AUTO_REGISTER_KEY, "foo");
        properties.put(AGENT_AUTO_REGISTER_RESOURCES, "foo, zoo");
        properties.put(AGENT_AUTO_REGISTER_ENVIRONMENTS, "foo, bar");
        properties.put(AGENT_AUTO_REGISTER_HOSTNAME, "agent01.example.com");
        properties.store(new FileOutputStream(configFile), "");
        AgentAutoRegistrationProperties reader = new AgentAutoRegistrationPropertiesImpl(configFile);
        Assert.assertThat(reader.agentAutoRegisterKey(), Matchers.is("foo"));
        Assert.assertThat(reader.agentAutoRegisterResources(), Matchers.is("foo, zoo"));
        Assert.assertThat(reader.agentAutoRegisterEnvironments(), Matchers.is("foo, bar"));
        Assert.assertThat(reader.agentAutoRegisterHostname(), Matchers.is("agent01.example.com"));
    }

    @Test
    public void shouldReturnEmptyStringIfPropertiesNotPresent() {
        AgentAutoRegistrationProperties reader = new AgentAutoRegistrationPropertiesImpl(configFile);
        Assert.assertThat(reader.agentAutoRegisterKey().isEmpty(), Matchers.is(true));
        Assert.assertThat(reader.agentAutoRegisterResources().isEmpty(), Matchers.is(true));
        Assert.assertThat(reader.agentAutoRegisterEnvironments().isEmpty(), Matchers.is(true));
        Assert.assertThat(reader.agentAutoRegisterHostname().isEmpty(), Matchers.is(true));
    }

    @Test
    public void shouldScrubTheAutoRegistrationProperties() throws Exception {
        String originalContents = "" + (((((((((((((("#\n" + "# file autogenerated by chef, any changes will be lost\n") + "#\n") + "# the registration key\n") + "agent.auto.register.key = some secret key\n") + "\n") + "# the resources on this agent\n") + "agent.auto.register.resources = some,resources\n") + "\n") + "# The hostname of this agent\n") + "agent.auto.register.hostname = agent42.example.com\n") + "\n") + "# The environments this agent belongs to\n") + "agent.auto.register.environments = production,blue\n") + "\n");
        FileUtils.writeStringToFile(configFile, originalContents, StandardCharsets.UTF_8);
        AgentAutoRegistrationProperties properties = new AgentAutoRegistrationPropertiesImpl(configFile);
        properties.scrubRegistrationProperties();
        String newContents = "" + (((((((((((((((((("#\n" + "# file autogenerated by chef, any changes will be lost\n") + "#\n") + "# the registration key\n") + "# The autoregister key has been intentionally removed by Go as a security measure.\n") + "# agent.auto.register.key = some secret key\n") + "\n") + "# the resources on this agent\n") + "# This property has been removed by Go after attempting to auto-register with the Go server.\n") + "# agent.auto.register.resources = some,resources\n") + "\n") + "# The hostname of this agent\n") + "# This property has been removed by Go after attempting to auto-register with the Go server.\n") + "# agent.auto.register.hostname = agent42.example.com\n") + "\n") + "# The environments this agent belongs to\n") + "# This property has been removed by Go after attempting to auto-register with the Go server.\n") + "# agent.auto.register.environments = production,blue\n") + "\n");
        Assert.assertThat(FileUtils.readFileToString(configFile, StandardCharsets.UTF_8), Matchers.is(newContents));
    }
}

