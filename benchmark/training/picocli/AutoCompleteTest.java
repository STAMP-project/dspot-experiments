/**
 * Copyright 2017 Remko Popma
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package picocli;


import AutoComplete.CommandDescriptor;
import AutoComplete.EXIT_CODE_COMMAND_SCRIPT_EXISTS;
import AutoComplete.EXIT_CODE_COMPLETION_SCRIPT_EXISTS;
import AutoComplete.EXIT_CODE_EXECUTION_ERROR;
import AutoComplete.EXIT_CODE_INVALID_INPUT;
import AutoComplete.EXIT_CODE_SUCCESS;
import CommandLine.VERSION;
import java.io.File;
import java.io.FileOutputStream;
import java.lang.reflect.Method;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.hamcrest.CoreMatchers;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TestRule;
import picocli.CommandLine.Command;
import picocli.CommandLine.Model.CommandSpec;
import picocli.CommandLine.Model.OptionSpec;
import picocli.CommandLine.Model.PositionalParamSpec;
import picocli.CommandLine.Option;
import picocli.CommandLine.Parameters;


/**
 * Tests the scripts generated by AutoComplete.
 */
// http://hayne.net/MacDev/Notes/unixFAQ.html#shellStartup
// https://apple.stackexchange.com/a/13019
public class AutoCompleteTest {
    @Rule
    public final ProvideSystemProperty ansiOFF = new ProvideSystemProperty("picocli.ansi", "false");

    // allows tests to set any kind of properties they like, without having to individually roll them back
    @Rule
    public final TestRule restoreSystemProperties = new RestoreSystemProperties();

    @Rule
    public final SystemErrRule systemErrRule = new SystemErrRule().enableLog().muteForSuccessfulTests();

    @Rule
    public final SystemOutRule systemOutRule = new SystemOutRule().enableLog().muteForSuccessfulTests();

    @Rule
    public final ExpectedSystemExit exit = ExpectedSystemExit.none();

    public static class BasicExample implements Runnable {
        @Option(names = { "-u", "--timeUnit" })
        private TimeUnit timeUnit;

        @Option(names = { "-t", "--timeout" })
        private long timeout;

        public void run() {
            System.out.printf("BasicExample was invoked with %d %s.%n", timeout, timeUnit);
        }

        public static void main(String[] args) {
            CommandLine.run(new AutoCompleteTest.BasicExample(), System.out, args);
        }
    }

    @Test
    public void basic() throws Exception {
        String script = AutoComplete.bash("basicExample", new CommandLine(new AutoCompleteTest.BasicExample()));
        String expected = String.format(AutoCompleteTest.loadTextFromClasspath("/basic.bash"), VERSION, AutoCompleteTest.spaced(TimeUnit.values()));
        Assert.assertEquals(expected, script);
    }

    public static class TopLevel {
        @Option(names = { "-V", "--version" }, help = true)
        boolean versionRequested;

        @Option(names = { "-h", "--help" }, help = true)
        boolean helpRequested;

        public static void main(String[] args) {
            CommandLine hierarchy = new CommandLine(new AutoCompleteTest.TopLevel()).addSubcommand("sub1", new AutoCompleteTest.Sub1()).addSubcommand("sub2", new CommandLine(new AutoCompleteTest.Sub2()).addSubcommand("subsub1", new AutoCompleteTest.Sub2Child1()).addSubcommand("subsub2", new AutoCompleteTest.Sub2Child2()));
            List<CommandLine> commandLines = hierarchy.parse(args);
            // Collections.reverse(commandLines);
            for (CommandLine cmdLine : commandLines) {
                Object command = cmdLine.getCommand();
                System.out.printf("Parsed command %s%n", AutoCompleteTest.toString(command));
            }
        }
    }

    static class Candidates extends ArrayList<String> {
        Candidates() {
            super(Arrays.asList("aaa", "bbb", "ccc"));
        }
    }

    @Command(description = "First level subcommand 1")
    public static class Sub1 {
        @Option(names = "--num", description = "a number")
        double number;

        @Option(names = "--str", description = "a String")
        String str;

        @Option(names = "--candidates", completionCandidates = AutoCompleteTest.Candidates.class, description = "with candidates")
        String str2;
    }

    @Command(description = "First level subcommand 2")
    public static class Sub2 {
        @Option(names = "--num2", description = "another number")
        int number2;

        @Option(names = { "--directory", "-d" }, description = "a directory")
        File directory;

        @Parameters(arity = "0..1")
        AutoCompleteTest.Possibilities possibilities;
    }

    @Command(description = "Second level sub-subcommand 1")
    public static class Sub2Child1 {
        @Option(names = { "-h", "--host" }, description = "a host")
        InetAddress host;
    }

    @Command(description = "Second level sub-subcommand 2")
    public static class Sub2Child2 {
        @Option(names = { "-u", "--timeUnit" })
        private TimeUnit timeUnit;

        @Option(names = { "-t", "--timeout" })
        private long timeout;

        @Parameters(completionCandidates = AutoCompleteTest.Candidates.class, description = "with candidates")
        String str2;
    }

    @Test
    public void nestedSubcommands() throws Exception {
        CommandLine hierarchy = new CommandLine(new AutoCompleteTest.TopLevel()).addSubcommand("sub1", new AutoCompleteTest.Sub1()).addSubcommand("sub2", new CommandLine(new AutoCompleteTest.Sub2()).addSubcommand("subsub1", new AutoCompleteTest.Sub2Child1()).addSubcommand("subsub2", new AutoCompleteTest.Sub2Child2()));
        String script = AutoComplete.bash("picocompletion-demo", hierarchy);
        String expected = String.format(AutoCompleteTest.loadTextFromClasspath("/picocompletion-demo_completion.bash"), VERSION, AutoCompleteTest.spaced(TimeUnit.values()));
        Assert.assertEquals(expected, script);
    }

    private static final String AUTO_COMPLETE_APP_USAGE = String.format(("" + (((((((((((((((((((((((((((((((("Usage: picocli.AutoComplete [-fhw] [-c=<factoryClass>] [-n=<commandName>]%n" + "                            [-o=<autoCompleteScript>] <commandLineFQCN>%n") + "Generates a bash completion script for the specified command class.%n") + "      <commandLineFQCN>      Fully qualified class name of the annotated @Command%n") + "                               class to generate a completion script for.%n") + "  -c, --factory=<factoryClass>%n") + "                             Optionally specify the fully qualified class name of%n") + "                               the custom factory to use to instantiate the command%n") + "                               class. When omitted, the default picocli factory is%n") + "                               used.%n") + "  -n, --name=<commandName>   Optionally specify the name of the command to create a%n") + "                               completion script for. When omitted, the annotated%n") + "                               class @Command 'name' attribute is used. If no%n") + "                               @Command 'name' attribute exists,%n") + "                               '<CLASS-SIMPLE-NAME>' (in lower-case) is used.%n") + "  -o, --completionScript=<autoCompleteScript>%n") + "                             Optionally specify the path of the completion script%n") + "                               file to generate. When omitted, a file named%n") + "                               '<commandName>_completion' is generated in the%n") + "                               current directory.%n") + "  -w, --writeCommandScript   Write a '<commandName>' sample command script to the%n") + "                               same directory as the completion script.%n") + "  -f, --force                Overwrite existing script files.%n") + "  -h, --help                 Display this help message and quit.%n") + "%n") + "Exit Code%n") + "Set the following system properties to control the exit code of this program:%n") + " \"picocli.autocomplete.systemExitOnSuccess\" - call `System.exit(0)` when%n") + "                                              execution completes normally%n") + " \"picocli.autocomplete.systemExitOnError\"   - call `System.exit(ERROR_CODE)`%n") + "                                              when an error occurs%n") + "If these system properties are not defined or have value \"false\", this program%n") + "completes without terminating the JVM.%n")));

    @Test
    public void testAutoCompleteAppHelp() {
        String[][] argsList = new String[][]{ new String[]{ "-h" }, new String[]{ "--help" } };
        for (final String[] args : argsList) {
            exit.expectSystemExitWithStatus(EXIT_CODE_SUCCESS);
            exit.checkAssertionAfterwards(new Assertion() {
                public void checkAssertion() {
                    Assert.assertEquals(args[0], AutoCompleteTest.AUTO_COMPLETE_APP_USAGE, systemOutRule.getLog());
                    systemOutRule.clearLog();
                }
            });
            System.setProperty("picocli.autocomplete.systemExitOnSuccess", "YES");
            AutoComplete.main(args);
        }
    }

    @Test
    public void testAutoCompleteAppHelp_NoSystemExit() {
        String[][] argsList = new String[][]{ new String[]{ "-h" }, new String[]{ "--help" } };
        System.setProperty("picocli.autocomplete.systemExitOnSuccess", "false");
        for (final String[] args : argsList) {
            AutoComplete.main(args);
            Assert.assertEquals(args[0], AutoCompleteTest.AUTO_COMPLETE_APP_USAGE, systemOutRule.getLog());
            systemOutRule.clearLog();
        }
    }

    @Test
    public void testAutoCompleteRequiresCommandLineFQCN() {
        exit.expectSystemExitWithStatus(EXIT_CODE_INVALID_INPUT);
        exit.checkAssertionAfterwards(new Assertion() {
            public void checkAssertion() {
                String expected = (String.format("Missing required parameter: <commandLineFQCN>%n")) + (AutoCompleteTest.AUTO_COMPLETE_APP_USAGE);
                Assert.assertEquals(expected, systemErrRule.getLog());
            }
        });
        System.setProperty("picocli.autocomplete.systemExitOnError", "true");
        AutoComplete.main();
    }

    @Test
    public void testAutoCompleteRequiresCommandLineFQCN_NoSystemExit() {
        AutoComplete.main();
        String expected = (String.format("Missing required parameter: <commandLineFQCN>%n")) + (AutoCompleteTest.AUTO_COMPLETE_APP_USAGE);
        Assert.assertEquals(expected, systemErrRule.getLog());
    }

    @Test
    public void testAutoCompleteAppCannotInstantiate() {
        @Command(name = "test")
        class TestApp {
            public TestApp(String noDefaultConstructor) {
                throw new RuntimeException();
            }
        }
        exit.expectSystemExitWithStatus(EXIT_CODE_EXECUTION_ERROR);
        exit.checkAssertionAfterwards(new Assertion() {
            public void checkAssertion() {
                String actual = systemErrRule.getLog();
                Assert.assertTrue(actual.startsWith("java.lang.NoSuchMethodException: picocli.AutoCompleteTest$1TestApp.<init>()"));
                Assert.assertTrue(actual.contains(AutoCompleteTest.AUTO_COMPLETE_APP_USAGE));
            }
        });
        System.setProperty("picocli.autocomplete.systemExitOnSuccess", "false");
        System.setProperty("picocli.autocomplete.systemExitOnError", "YES");
        AutoComplete.main(TestApp.class.getName());
    }

    @Test
    public void testAutoCompleteAppCannotInstantiate_NoSystemExit() {
        @Command(name = "test")
        class TestApp {
            public TestApp(String noDefaultConstructor) {
                throw new RuntimeException();
            }
        }
        AutoComplete.main(TestApp.class.getName());
        String actual = systemErrRule.getLog();
        Assert.assertTrue(actual.startsWith("java.lang.NoSuchMethodException: picocli.AutoCompleteTest$2TestApp.<init>()"));
        Assert.assertTrue(actual.contains(AutoCompleteTest.AUTO_COMPLETE_APP_USAGE));
    }

    @Test
    public void testAutoCompleteAppCompletionScriptFileWillNotOverwrite() throws Exception {
        File dir = new File(System.getProperty("java.io.tmpdir"));
        final File completionScript = new File(dir, "App_completion");
        if (completionScript.exists()) {
            Assert.assertTrue(completionScript.delete());
        }
        completionScript.deleteOnExit();
        // create the file
        FileOutputStream fous = new FileOutputStream(completionScript, false);
        fous.close();
        exit.expectSystemExitWithStatus(EXIT_CODE_COMPLETION_SCRIPT_EXISTS);
        exit.checkAssertionAfterwards(new Assertion() {
            public void checkAssertion() {
                String expected = String.format(("" + ("ERROR: picocli.AutoComplete: %s exists. Specify --force to overwrite.%n" + "%s")), completionScript.getAbsolutePath(), AutoCompleteTest.AUTO_COMPLETE_APP_USAGE);
                Assert.assertTrue(systemErrRule.getLog().startsWith(expected));
            }
        });
        System.setProperty("picocli.autocomplete.systemExitOnError", "");
        AutoComplete.main(String.format("-o=%s", completionScript.getAbsolutePath()), "picocli.AutoComplete$App");
    }

    @Test
    public void testAutoCompleteAppCompletionScriptFileWillNotOverwrite_NoSystemExit() throws Exception {
        File dir = new File(System.getProperty("java.io.tmpdir"));
        final File completionScript = new File(dir, "App_completion");
        if (completionScript.exists()) {
            Assert.assertTrue(completionScript.delete());
        }
        completionScript.deleteOnExit();
        // create the file
        FileOutputStream fous = new FileOutputStream(completionScript, false);
        fous.close();
        AutoComplete.main(String.format("-o=%s", completionScript.getAbsolutePath()), "picocli.AutoComplete$App");
        String expected = String.format(("" + ("ERROR: picocli.AutoComplete: %s exists. Specify --force to overwrite.%n" + "%s")), completionScript.getAbsolutePath(), AutoCompleteTest.AUTO_COMPLETE_APP_USAGE);
        Assert.assertTrue(systemErrRule.getLog().startsWith(expected));
    }

    @Test
    public void testAutoCompleteAppCommandScriptFileWillNotOverwrite() throws Exception {
        File dir = new File(System.getProperty("java.io.tmpdir"));
        final File commandScript = new File(dir, "picocli.AutoComplete");
        if (commandScript.exists()) {
            Assert.assertTrue(commandScript.delete());
        }
        commandScript.deleteOnExit();
        // create the file
        FileOutputStream fous = new FileOutputStream(commandScript, false);
        fous.close();
        File completionScript = new File(dir, ((commandScript.getName()) + "_completion"));
        exit.expectSystemExitWithStatus(EXIT_CODE_COMMAND_SCRIPT_EXISTS);
        exit.checkAssertionAfterwards(new Assertion() {
            public void checkAssertion() {
                String expected = String.format(("" + ("ERROR: picocli.AutoComplete: %s exists. Specify --force to overwrite.%n" + "%s")), commandScript.getAbsolutePath(), AutoCompleteTest.AUTO_COMPLETE_APP_USAGE);
                Assert.assertTrue(systemErrRule.getLog().startsWith(expected));
            }
        });
        System.setProperty("picocli.autocomplete.systemExitOnError", "true");
        AutoComplete.main("--writeCommandScript", String.format("-o=%s", completionScript.getAbsolutePath()), "picocli.AutoComplete$App");
    }

    @Test
    public void testAutoCompleteAppCommandScriptFileWillNotOverwrite_NoSystemExit() throws Exception {
        File dir = new File(System.getProperty("java.io.tmpdir"));
        final File commandScript = new File(dir, "picocli.AutoComplete");
        if (commandScript.exists()) {
            Assert.assertTrue(commandScript.delete());
        }
        commandScript.deleteOnExit();
        // create the file
        FileOutputStream fous = new FileOutputStream(commandScript, false);
        fous.close();
        File completionScript = new File(dir, ((commandScript.getName()) + "_completion"));
        AutoComplete.main("--writeCommandScript", String.format("-o=%s", completionScript.getAbsolutePath()), "picocli.AutoComplete$App");
        String expected = String.format(("" + ("ERROR: picocli.AutoComplete: %s exists. Specify --force to overwrite.%n" + "%s")), commandScript.getAbsolutePath(), AutoCompleteTest.AUTO_COMPLETE_APP_USAGE);
        Assert.assertTrue(systemErrRule.getLog().startsWith(expected));
    }

    @Test
    public void testAutoCompleteAppCommandScriptFileWillOverwriteIfRequested() throws Exception {
        File dir = new File(System.getProperty("java.io.tmpdir"));
        final File commandScript = new File(dir, "picocli.AutoComplete");
        if (commandScript.exists()) {
            Assert.assertTrue(commandScript.delete());
        }
        commandScript.deleteOnExit();
        // create the file
        FileOutputStream fous = new FileOutputStream(commandScript, false);
        fous.close();
        Assert.assertEquals(0, commandScript.length());
        File completionScript = new File(dir, ((commandScript.getName()) + "_completion"));
        exit.expectSystemExitWithStatus(EXIT_CODE_SUCCESS);
        exit.checkAssertionAfterwards(new Assertion() {
            public void checkAssertion() {
                Assert.assertEquals("", systemErrRule.getLog());
                Assert.assertNotEquals(0, commandScript.length());
                Assert.assertTrue(commandScript.delete());
            }
        });
        System.setProperty("picocli.autocomplete.systemExitOnSuccess", "true");
        AutoComplete.main("--writeCommandScript", "--force", String.format("-o=%s", completionScript.getAbsolutePath()), "picocli.AutoComplete$App");
    }

    @Test
    public void testAutoCompleteAppBothScriptFilesForceOverwrite() throws Exception {
        File dir = new File(System.getProperty("java.io.tmpdir"));
        final File commandScript = new File(dir, "picocli.AutoComplete");
        if (commandScript.exists()) {
            Assert.assertTrue(commandScript.delete());
        }
        commandScript.deleteOnExit();
        // create the file
        FileOutputStream fous1 = new FileOutputStream(commandScript, false);
        fous1.close();
        final File completionScript = new File(dir, ((commandScript.getName()) + "_completion"));
        if (completionScript.exists()) {
            Assert.assertTrue(completionScript.delete());
        }
        completionScript.deleteOnExit();
        // create the file
        FileOutputStream fous2 = new FileOutputStream(completionScript, false);
        fous2.close();
        exit.expectSystemExitWithStatus(EXIT_CODE_SUCCESS);
        exit.checkAssertionAfterwards(new Assertion() {
            public void checkAssertion() throws Exception {
                byte[] command = AutoCompleteTest.readBytes(commandScript);
                Assert.assertEquals(("" + (((("#!/usr/bin/env bash\n" + "\n") + "LIBS=path/to/libs\n") + "CP=\"${LIBS}/myApp.jar\"\n") + "java -cp \"${CP}\" \'picocli.AutoComplete$App\' $@")), new String(command, "UTF8"));
                byte[] completion = AutoCompleteTest.readBytes(completionScript);
                String expected = expectedCompletionScriptForAutoCompleteApp();
                Assert.assertEquals(expected, new String(completion, "UTF8"));
            }
        });
        System.setProperty("picocli.autocomplete.systemExitOnSuccess", "true");
        AutoComplete.main("--force", "--writeCommandScript", String.format("-o=%s", completionScript.getAbsolutePath()), "picocli.AutoComplete$App");
    }

    @Test
    public void testAutoCompleteAppBothScriptFilesForceOverwrite_NoSystemExit() throws Exception {
        File dir = new File(System.getProperty("java.io.tmpdir"));
        final File commandScript = new File(dir, "picocli.AutoComplete");
        if (commandScript.exists()) {
            Assert.assertTrue(commandScript.delete());
        }
        commandScript.deleteOnExit();
        // create the file
        FileOutputStream fous1 = new FileOutputStream(commandScript, false);
        fous1.close();
        final File completionScript = new File(dir, ((commandScript.getName()) + "_completion"));
        if (completionScript.exists()) {
            Assert.assertTrue(completionScript.delete());
        }
        completionScript.deleteOnExit();
        // create the file
        FileOutputStream fous2 = new FileOutputStream(completionScript, false);
        fous2.close();
        AutoComplete.main("--force", "--writeCommandScript", String.format("-o=%s", completionScript.getAbsolutePath()), "picocli.AutoComplete$App");
        byte[] command = AutoCompleteTest.readBytes(commandScript);
        Assert.assertEquals(("" + (((("#!/usr/bin/env bash\n" + "\n") + "LIBS=path/to/libs\n") + "CP=\"${LIBS}/myApp.jar\"\n") + "java -cp \"${CP}\" \'picocli.AutoComplete$App\' $@")), new String(command, "UTF8"));
        byte[] completion = AutoCompleteTest.readBytes(completionScript);
        String expected = expectedCompletionScriptForAutoCompleteApp();
        Assert.assertEquals(expected, new String(completion, "UTF8"));
    }

    @Test
    public void testAutoCompleteAppGeneratesScriptNameBasedOnCommandName() throws Exception {
        final String commandName = "bestCommandEver";
        final File completionScript = new File((commandName + "_completion"));
        if (completionScript.exists()) {
            Assert.assertTrue(completionScript.delete());
        }
        completionScript.deleteOnExit();
        exit.expectSystemExitWithStatus(EXIT_CODE_SUCCESS);
        exit.checkAssertionAfterwards(new Assertion() {
            public void checkAssertion() throws Exception {
                byte[] completion = AutoCompleteTest.readBytes(completionScript);
                Assert.assertTrue(completionScript.delete());
                String expected = expectedCompletionScriptForAutoCompleteApp().replaceAll("picocli\\.AutoComplete", commandName);
                Assert.assertEquals(expected, new String(completion, "UTF8"));
            }
        });
        System.setProperty("picocli.autocomplete.systemExitOnSuccess", "YES");
        AutoComplete.main(String.format("--name=%s", commandName), "picocli.AutoComplete$App");
    }

    @Test
    public void testAutoCompleteAppGeneratesScriptNameBasedOnCommandName_NoSystemExit() throws Exception {
        final String commandName = "bestCommandEver";
        final File completionScript = new File((commandName + "_completion"));
        if (completionScript.exists()) {
            Assert.assertTrue(completionScript.delete());
        }
        completionScript.deleteOnExit();
        AutoComplete.main(String.format("--name=%s", commandName), "picocli.AutoComplete$App");
        byte[] completion = AutoCompleteTest.readBytes(completionScript);
        Assert.assertTrue(completionScript.delete());
        String expected = expectedCompletionScriptForAutoCompleteApp().replaceAll("picocli\\.AutoComplete", commandName);
        Assert.assertEquals(expected, new String(completion, "UTF8"));
    }

    public static class NonDefaultCommand {
        @Option(names = { "-t", "--timeout" })
        private long timeout;

        public NonDefaultCommand(int i) {
        }
    }

    public static class MyFactory implements CommandLine.IFactory {
        @SuppressWarnings("unchecked")
        public <K> K create(Class<K> cls) {
            return ((K) (new AutoCompleteTest.NonDefaultCommand(123)));
        }
    }

    @Test
    public void testAutoCompleteAppUsesCustomFactory() throws Exception {
        final String commandName = "nondefault";
        final File completionScript = new File((commandName + "_completion"));
        if (completionScript.exists()) {
            Assert.assertTrue(completionScript.delete());
        }
        completionScript.deleteOnExit();
        exit.expectSystemExitWithStatus(EXIT_CODE_SUCCESS);
        exit.checkAssertionAfterwards(new Assertion() {
            public void checkAssertion() throws Exception {
                byte[] completion = AutoCompleteTest.readBytes(completionScript);
                Assert.assertTrue(completionScript.delete());
                String expected = expectedCompletionScriptForNonDefault().replaceAll("picocli\\.AutoComplete", commandName);
                Assert.assertEquals(expected, new String(completion, "UTF8"));
            }
        });
        System.setProperty("picocli.autocomplete.systemExitOnSuccess", "true");
        AutoComplete.main(String.format("--factory=%s", AutoCompleteTest.MyFactory.class.getName()), String.format("--name=%s", commandName), AutoCompleteTest.NonDefaultCommand.class.getName());
    }

    @Test
    public void testCommandDescriptor() {
        AutoComplete.CommandDescriptor descriptor = new AutoComplete.CommandDescriptor("aaa", "bbb");
        Assert.assertEquals(descriptor, descriptor);
        AutoComplete.CommandDescriptor other = new AutoComplete.CommandDescriptor("111", "222");
        Assert.assertNotEquals(descriptor, other);
        Assert.assertEquals(descriptor.hashCode(), descriptor.hashCode());
        Assert.assertEquals(other.hashCode(), other.hashCode());
        Assert.assertNotEquals(other.hashCode(), descriptor.hashCode());
    }

    @Test
    public void testBashRejectsNullScript() {
        try {
            AutoComplete.bash(null, new CommandLine(new AutoCompleteTest.TopLevel()));
            Assert.fail("Expected NPE");
        } catch (NullPointerException ok) {
            Assert.assertEquals("scriptName", ok.getMessage());
        }
    }

    @Test
    public void testBashRejectsNullCommandLine() {
        try {
            AutoComplete.bash("script", null);
            Assert.fail("Expected NPE");
        } catch (NullPointerException ok) {
            Assert.assertEquals("commandLine", ok.getMessage());
        }
    }

    @Test
    public void testBashAcceptsNullCommand() throws Exception {
        File temp = File.createTempFile("abc", "b");
        temp.deleteOnExit();
        AutoComplete.bash("script", temp, null, new CommandLine(new AutoCompleteTest.TopLevel()));
        Assert.assertTrue(((temp.length()) > 0));
    }

    @Test
    public void testBashRejectsNullOut() throws Exception {
        File commandFile = File.createTempFile("abc", "b");
        commandFile.deleteOnExit();
        try {
            AutoComplete.bash("script", null, commandFile, new CommandLine(new AutoCompleteTest.TopLevel()));
            Assert.fail("Expected NPE");
        } catch (NullPointerException ok) {
            Assert.assertEquals(null, ok.getMessage());
        }
    }

    @Command
    private static class PrivateCommandClass {}

    // Support generating autocompletion scripts for non-public @Command classes #306
    @Test
    public void test306_SupportGeneratingAutocompletionScriptForNonPublicCommandClasses() {
        File dir = new File(System.getProperty("java.io.tmpdir"));
        final File completionScript = new File(dir, "App_completion");
        if (completionScript.exists()) {
            Assert.assertTrue(completionScript.delete());
        }
        completionScript.deleteOnExit();
        exit.expectSystemExitWithStatus(EXIT_CODE_SUCCESS);
        exit.checkAssertionAfterwards(new Assertion() {
            public void checkAssertion() {
                Assert.assertEquals("", systemErrRule.getLog());
                Assert.assertEquals("", systemOutRule.getLog());
                completionScript.delete();
            }
        });
        System.setProperty("picocli.autocomplete.systemExitOnSuccess", "");
        AutoComplete.main(String.format("-o=%s", completionScript.getAbsolutePath()), AutoCompleteTest.PrivateCommandClass.class.getName());
    }

    @Test
    public void testComplete() {
        CommandLine hierarchy = new CommandLine(new AutoCompleteTest.TopLevel()).addSubcommand("sub1", new AutoCompleteTest.Sub1()).addSubcommand("sub2", new CommandLine(new AutoCompleteTest.Sub2()).addSubcommand("subsub1", new AutoCompleteTest.Sub2Child1()).addSubcommand("subsub2", new AutoCompleteTest.Sub2Child2()));
        CommandSpec spec = hierarchy.getCommandSpec();
        spec.parser().collectErrors(true);
        int cur = 500;
        AutoCompleteTest.test(spec, AutoCompleteTest.a(), 0, 0, cur, AutoCompleteTest.l("--help", "--version", "-V", "-h", "sub1", "sub2"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("-"), 0, 0, cur, AutoCompleteTest.l("--help", "--version", "-V", "-h", "sub1", "sub2"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("-"), 0, 1, cur, AutoCompleteTest.l("-help", "-version", "V", "h"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("-h"), 0, 1, cur, AutoCompleteTest.l("-help", "-version", "V", "h"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("-h"), 0, 2, cur, AutoCompleteTest.l(""));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("s"), 0, 1, cur, AutoCompleteTest.l("ub1", "ub2"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub1"), 0, 0, cur, AutoCompleteTest.l("--help", "--version", "-V", "-h", "sub1", "sub2"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub1"), 1, 0, cur, AutoCompleteTest.l("--candidates", "--num", "--str"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub1", "-"), 1, 0, cur, AutoCompleteTest.l("--candidates", "--num", "--str"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub1", "-"), 1, 1, cur, AutoCompleteTest.l("-candidates", "-num", "-str"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub1", "--"), 1, 1, cur, AutoCompleteTest.l("-candidates", "-num", "-str"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub1", "--"), 1, 2, cur, AutoCompleteTest.l("candidates", "num", "str"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub1", "--c"), 1, 2, cur, AutoCompleteTest.l("candidates", "num", "str"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub1", "--c"), 1, 3, cur, AutoCompleteTest.l("andidates"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub1", "--candidates"), 2, 0, cur, AutoCompleteTest.l("aaa", "bbb", "ccc"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub1", "--candidates"), 1, 12, cur, AutoCompleteTest.l(""));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub1", "--candidates="), 1, 11, cur, AutoCompleteTest.l("s"));// cursor before 's'

        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub1", "--candidates="), 1, 12, cur, AutoCompleteTest.l("=aaa", "=bbb", "=ccc"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub1", "--candidates="), 1, 13, cur, AutoCompleteTest.l("aaa", "bbb", "ccc"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub1", "--candidates=a"), 1, 13, cur, AutoCompleteTest.l("aaa", "bbb", "ccc"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub1", "--candidates=a"), 1, 14, cur, AutoCompleteTest.l("aa"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub1", "--candidates", "a"), 2, 1, cur, AutoCompleteTest.l("aa"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub1", "--candidates", "a"), 3, 0, cur, AutoCompleteTest.l("--candidates", "--num", "--str"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub1", "--candidates", "a", "-"), 3, 1, cur, AutoCompleteTest.l("-candidates", "-num", "-str"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub1", "--candidates", "a", "--"), 3, 2, cur, AutoCompleteTest.l("candidates", "num", "str"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub1", "--num"), 2, 0, cur, AutoCompleteTest.l());
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub1", "--str"), 2, 0, cur, AutoCompleteTest.l());
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2"), 1, 0, cur, AutoCompleteTest.l("--directory", "--num2", "-d", "Aaa", "Bbb", "Ccc", "subsub1", "subsub2"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "-"), 1, 1, cur, AutoCompleteTest.l("-directory", "-num2", "d"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "-d"), 2, 0, cur, AutoCompleteTest.l());
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "-d", "/"), 3, 0, cur, AutoCompleteTest.l("--directory", "--num2", "-d", "Aaa", "Bbb", "Ccc", "subsub1", "subsub2"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "-d", "/", "-"), 3, 1, cur, AutoCompleteTest.l("-directory", "-num2", "d"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "-d", "/", "--"), 3, 2, cur, AutoCompleteTest.l("directory", "num2"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "-d", "/", "--n"), 3, 3, cur, AutoCompleteTest.l("um2"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "-d", "/", "--num2"), 3, 6, cur, AutoCompleteTest.l(""));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "-d", "/", "--num2"), 4, 0, cur, AutoCompleteTest.l());
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "-d", "/", "--num2", "0"), 4, 1, cur, AutoCompleteTest.l());
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "-d", "/", "--num2", "0"), 5, 0, cur, AutoCompleteTest.l("--directory", "--num2", "-d", "Aaa", "Bbb", "Ccc", "subsub1", "subsub2"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "-d", "/", "--num2", "0", "s"), 5, 1, cur, AutoCompleteTest.l("ubsub1", "ubsub2"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "A"), 1, 1, cur, AutoCompleteTest.l("aa"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "Aaa"), 1, 3, cur, AutoCompleteTest.l(""));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "Aaa"), 2, 0, cur, AutoCompleteTest.l("--directory", "--num2", "-d", "Aaa", "Bbb", "Ccc", "subsub1", "subsub2"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "Aaa", "s"), 2, 1, cur, AutoCompleteTest.l("ubsub1", "ubsub2"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "Aaa", "subsub1"), 3, 0, cur, AutoCompleteTest.l("--host", "-h"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "subsub1"), 2, 0, cur, AutoCompleteTest.l("--host", "-h"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "subsub2"), 2, 0, cur, AutoCompleteTest.l("--timeUnit", "--timeout", "-t", "-u", "aaa", "bbb", "ccc"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "subsub2", "-"), 2, 1, cur, AutoCompleteTest.l("-timeUnit", "-timeout", "t", "u"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "subsub2", "-t"), 2, 2, cur, AutoCompleteTest.l(""));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "subsub2", "-t"), 3, 0, cur, AutoCompleteTest.l());
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "subsub2", "-t", "0"), 3, 1, cur, AutoCompleteTest.l());
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "subsub2", "-t", "0"), 4, 0, cur, AutoCompleteTest.l("--timeUnit", "--timeout", "-t", "-u", "aaa", "bbb", "ccc"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "subsub2", "-t", "0", "-"), 4, 1, cur, AutoCompleteTest.l("-timeUnit", "-timeout", "t", "u"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "subsub2", "-t", "0", "--"), 4, 2, cur, AutoCompleteTest.l("timeUnit", "timeout"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "subsub2", "-t", "0", "--t"), 4, 3, cur, AutoCompleteTest.l("imeUnit", "imeout"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "subsub2", "-t", "0", "-u"), 4, 2, cur, AutoCompleteTest.l(""));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "subsub2", "-t", "0", "-u"), 5, 0, cur, AutoCompleteTest.timeUnitValues());
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "subsub2", "-t", "0", "-u", "S"), 5, 1, cur, AutoCompleteTest.l("ECONDS"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "subsub2", "a"), 2, 1, cur, AutoCompleteTest.l("aa"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("sub2", "subsub2", "a"), 3, 0, cur, AutoCompleteTest.l("--timeUnit", "--timeout", "-t", "-u", "aaa", "bbb", "ccc"));
    }

    static class CharSequenceSort implements Comparator<CharSequence> {
        public int compare(CharSequence left, CharSequence right) {
            return left.toString().compareTo(right.toString());
        }
    }

    @Test(expected = NullPointerException.class)
    public void testCompleteDisallowsNullSpec() {
        AutoComplete.complete(null, new String[]{ "-x" }, 0, 0, 0, new ArrayList<CharSequence>());
    }

    @Test(expected = NullPointerException.class)
    public void testCompleteDisallowsNullArgs() {
        AutoComplete.complete(CommandSpec.create().addOption(OptionSpec.builder("-x").build()), null, 0, 0, 0, new ArrayList<CharSequence>());
    }

    @Test(expected = NullPointerException.class)
    public void testCompleteDisallowsNullCandidates() {
        AutoComplete.complete(CommandSpec.create().addOption(OptionSpec.builder("-x").build()), new String[]{ "-x" }, 0, 0, 0, null);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCompleteDisallowsNegativeArgIndex() {
        AutoComplete.complete(CommandSpec.create().addOption(OptionSpec.builder("-x").build()), new String[]{ "-x" }, (-1), 0, 0, new ArrayList<CharSequence>());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCompleteDisallowsTooLargeArgIndex() {
        AutoComplete.complete(CommandSpec.create().addOption(OptionSpec.builder("-x").build()), new String[]{ "-x" }, 2, 0, 0, new ArrayList<CharSequence>());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCompleteDisallowsNegativePositionInArg() {
        AutoComplete.complete(CommandSpec.create().addOption(OptionSpec.builder("-x").build()), new String[]{ "-x" }, 0, (-1), 0, new ArrayList<CharSequence>());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCompleteDisallowsTooLargePositionInArg() {
        AutoComplete.complete(CommandSpec.create().addOption(OptionSpec.builder("-x").build()), new String[]{ "-x" }, 0, 3, 0, new ArrayList<CharSequence>());
    }

    @Test
    public void testCompleteAllowsNormalValues() {
        List<CharSequence> candidates = new ArrayList<CharSequence>();
        AutoComplete.complete(CommandSpec.create().addOption(OptionSpec.builder("-x").build()), new String[]{ "-x" }, 0, 0, 0, candidates);
        Assert.assertFalse(candidates.isEmpty());
    }

    enum Possibilities {

        Aaa,
        Bbb,
        Ccc;}

    @Test
    public void testCompleteFindCompletionStartPoint() {
        class App {
            @Option(names = "-x", arity = "2")
            List<AutoCompleteTest.Possibilities> poss;
        }
        CommandSpec spec = CommandSpec.forAnnotatedObject(new App());
        int cur = 500;
        AutoCompleteTest.test(spec, AutoCompleteTest.a("-x"), 1, 0, cur, AutoCompleteTest.l("Aaa", "Bbb", "Ccc"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("-x", "A"), 1, 0, cur, AutoCompleteTest.l("Aaa", "Bbb", "Ccc"));// suggest 1st arg of same type

        AutoCompleteTest.test(spec, AutoCompleteTest.a("-x", "A"), 1, 1, cur, AutoCompleteTest.l("aa"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("-x", "Aaa"), 2, 0, cur, AutoCompleteTest.l("Aaa", "Bbb", "Ccc"));// suggest 2nd arg of same type

        AutoCompleteTest.test(spec, AutoCompleteTest.a("-x", "Aaa", "Bbb"), 3, 0, cur, AutoCompleteTest.l("-x"));// we have 2 args for first -x. Suggest -x again.

    }

    @Test
    public void testCompleteFindPositionalForTopLevelCommand() {
        class App {
            @Parameters
            List<AutoCompleteTest.Possibilities> poss;
        }
        CommandSpec spec = CommandSpec.forAnnotatedObject(new App());
        int cur = 500;
        AutoCompleteTest.test(spec, AutoCompleteTest.a(), 0, 0, cur, AutoCompleteTest.l("Aaa", "Bbb", "Ccc"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("A"), 0, 0, cur, AutoCompleteTest.l("Aaa", "Bbb", "Ccc"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("A"), 0, 1, cur, AutoCompleteTest.l("aa"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("Aaa"), 1, 0, cur, AutoCompleteTest.l("Aaa", "Bbb", "Ccc"));
        AutoCompleteTest.test(spec, AutoCompleteTest.a("Aaa", "Bbb"), 2, 0, cur, AutoCompleteTest.l("Aaa", "Bbb", "Ccc"));
    }

    @Test
    public void testBashify() {
        CommandSpec cmd = CommandSpec.create().addOption(OptionSpec.builder("-x").type(String.class).paramLabel("_A\tB C").completionCandidates(Arrays.asList("1")).build());
        String actual = AutoComplete.bash("bashify", new CommandLine(cmd));
        String expected = String.format(AutoCompleteTest.loadTextFromClasspath("/bashify_completion.bash"), VERSION);
        Assert.assertEquals(expected, actual);
    }

    @Test
    public void testBooleanArgFilter() {
        @Command(name = "booltest")
        class App {
            @Option(names = "-b")
            boolean primitive;

            @Option(names = "-B")
            Boolean object;
        }
        String actual = AutoComplete.bash("booltest", new CommandLine(new App()));
        Assert.assertThat(actual, CoreMatchers.containsString("FLAG_OPTS=\"-b -B\""));
    }

    @Test
    public void testCommandDescriptorEqualsUnrelatedObject() {
        Assert.assertFalse(new AutoComplete.CommandDescriptor("a", "b").equals("X"));
    }

    @Test
    public void testCommandDescriptorEquals() {
        AutoComplete.CommandDescriptor descriptor = new AutoComplete.CommandDescriptor("a", "b");
        Assert.assertTrue(descriptor.equals(descriptor));
        Assert.assertTrue(descriptor.equals(new AutoComplete.CommandDescriptor("a", "b")));
        Assert.assertFalse(descriptor.equals(new AutoComplete.CommandDescriptor("a", "x")));
        Assert.assertFalse(descriptor.equals(new AutoComplete.CommandDescriptor("x", "b")));
        Assert.assertFalse(descriptor.equals(new AutoComplete.CommandDescriptor("x", "x")));
    }

    @Test
    public void testIsPicocliModelObject() throws Exception {
        Method m = AutoComplete.class.getDeclaredMethod("isPicocliModelObject", Object.class);
        m.setAccessible(true);
        Assert.assertFalse(((Boolean) (m.invoke(null, "blah"))));
        Assert.assertTrue(((Boolean) (m.invoke(null, CommandSpec.create()))));
        Assert.assertTrue(((Boolean) (m.invoke(null, OptionSpec.builder("-x").build()))));
        Assert.assertTrue(((Boolean) (m.invoke(null, PositionalParamSpec.builder().build()))));
    }

    @Test
    public void testAddCandidatesForArgsFollowingObject() throws Exception {
        Method m = AutoComplete.class.getDeclaredMethod("addCandidatesForArgsFollowing", Object.class, List.class);
        m.setAccessible(true);
        List<String> candidates = new ArrayList<String>();
        m.invoke(null, null, candidates);
        Assert.assertTrue("null Object adds no candidates", candidates.isEmpty());
        m.invoke(null, new Object(), candidates);
        Assert.assertTrue("non-PicocliModelObject Object adds no candidates", candidates.isEmpty());
        List<String> completions = Arrays.asList("x", "y", "z");
        PositionalParamSpec positional = PositionalParamSpec.builder().completionCandidates(completions).build();
        m.invoke(null, positional, candidates);
        Assert.assertEquals("PositionalParamSpec adds completion candidates", completions, candidates);
    }

    @Test
    public void testAddCandidatesForArgsFollowingNullCommandAddsNoCandidates() throws Exception {
        Method m = AutoComplete.class.getDeclaredMethod("addCandidatesForArgsFollowing", CommandSpec.class, List.class);
        m.setAccessible(true);
        List<String> candidates = new ArrayList<String>();
        m.invoke(null, null, candidates);
        Assert.assertTrue("null CommandSpec adds no candidates", candidates.isEmpty());
    }

    @Test
    public void testAddCandidatesForArgsFollowingNullOptionAddsNoCandidates() throws Exception {
        Method m = AutoComplete.class.getDeclaredMethod("addCandidatesForArgsFollowing", OptionSpec.class, List.class);
        m.setAccessible(true);
        List<String> candidates = new ArrayList<String>();
        m.invoke(null, null, candidates);
        Assert.assertTrue("null OptionSpec adds no candidates", candidates.isEmpty());
    }

    @Test
    public void testAddCandidatesForArgsFollowingNullPositionalParamAddsNoCandidates() throws Exception {
        Method m = AutoComplete.class.getDeclaredMethod("addCandidatesForArgsFollowing", PositionalParamSpec.class, List.class);
        m.setAccessible(true);
        List<String> candidates = new ArrayList<String>();
        m.invoke(null, null, candidates);
        Assert.assertTrue("null PositionalParamSpec adds no candidates", candidates.isEmpty());
    }
}

