/**
 * Contributions to FindBugs
 * Copyright (C) 2009, Tom\u00e1s Pollak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
package edu.umd.cs.findbugs;


import java.io.File;
import java.io.IOException;
import org.junit.Assert;
import org.junit.Test;


/**
 * This test runs a FindBugs analysis on the spotbugsTestCases project and
 * checks if there are any unexpected bugs.
 *
 * The results are checked for the unexpected bugs of type
 * FB_MISSING_EXPECTED_WARNING or FB_UNEXPECTED_WARNING.
 *
 * @see ExpectWarning
 * @see NoWarning
 * @author Tom\u00e1s Pollak
 * @deprecated The annotation based approach is useless for lambdas. Write expectations using {@link BugInstanceMatcher} matchers
 */
// TODO : Rewrite tests using matchers
@Deprecated
public class DetectorsTest {
    private static final String FB_UNEXPECTED_WARNING = "FB_UNEXPECTED_WARNING";

    private static final String FB_MISSING_EXPECTED_WARNING = "FB_MISSING_EXPECTED_WARNING";

    private BugCollectionBugReporter bugReporter;

    private IFindBugsEngine engine;

    private File spotbugsTestCases;

    /**
     * detectors which are disabled by default but which must be used in test
     */
    private final String[] enabledDetectors = new String[]{ "CheckExpectedWarnings", "InefficientMemberAccess", "EmptyZipFileEntry" };

    /**
     * Test for expected warnings on javac compiler generated classes
     */
    @Test
    public void testAllRegressionFilesJavac() throws IOException, InterruptedException {
        setUpEngine("build/classes/java/main/");
        engine.execute();
        // If there are zero bugs, then something's wrong
        Assert.assertFalse("No bugs were reported. Something is wrong with the configuration", bugReporter.getBugCollection().getCollection().isEmpty());
    }

    /**
     * Test for expected warnings on ecj compiler (Eclipse) generated classes
     * Right now this test does nothing if Eclipse UI were not used to compile project.
     * The main purpose is for developers hacking in Eclipse to see if there are any unexpected
     * failures with Eclipse generated bytecode. It would be nice to make the test explicit by using
     * ecj command line compiler and *always* validate both bytecode kinds.
     */
    @Test
    public void testAllRegressionFilesEcj() throws IOException, InterruptedException {
        setUpEngine("classesEclipse/");
        engine.execute();
        // If there are zero bugs, then something's wrong
        if (bugReporter.getBugCollection().getCollection().isEmpty()) {
            // TODO better to add ecj compiler and to compile classes with it on build, not with UI.
            System.err.println("No bugs were reported. Probably Eclipse was not used to compile the project");
        }
    }
}

