/**
 * Hibernate, Relational Persistence for Idiomatic Java
 *
 * License: GNU Lesser General Public License (LGPL), version 2.1 or later.
 * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
 */
package org.hibernate.test.annotations.formula;


import java.io.Serializable;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.annotations.Formula;
import org.hibernate.criterion.Order;
import org.hibernate.dialect.H2Dialect;
import org.hibernate.testing.RequiresDialect;
import org.hibernate.testing.TestForIssue;
import org.hibernate.testing.junit4.BaseCoreFunctionalTestCase;
import org.junit.Assert;
import org.junit.Test;


/**
 * Test that the queries generated by {@link org.hibernate.annotations.Formula} properly ignore type names when escaping identifiers.
 * <p/>
 * Created by Michael Hum on 17/07/2015.
 */
@RequiresDialect(H2Dialect.class)
public class FormulaWithColumnTypesTest extends BaseCoreFunctionalTestCase {
    @Test
    @TestForIssue(jiraKey = "HHH-9951")
    public void testFormulaAnnotationWithTypeNames() {
        Session session = openSession();
        Transaction transaction = session.beginTransaction();
        FormulaWithColumnTypesTest.DisplayItem displayItem20 = new FormulaWithColumnTypesTest.DisplayItem();
        displayItem20.setDisplayCode("20");
        FormulaWithColumnTypesTest.DisplayItem displayItem03 = new FormulaWithColumnTypesTest.DisplayItem();
        displayItem03.setDisplayCode("03");
        FormulaWithColumnTypesTest.DisplayItem displayItem100 = new FormulaWithColumnTypesTest.DisplayItem();
        displayItem100.setDisplayCode("100");
        session.persist(displayItem20);
        session.persist(displayItem03);
        session.persist(displayItem100);
        transaction.commit();
        session.close();
        // 1. Default sorting by display code natural ordering (resulting in 3-100-20).
        session = openSession();
        transaction = session.beginTransaction();
        List displayItems = session.createCriteria(FormulaWithColumnTypesTest.DisplayItem.class).addOrder(Order.asc("displayCode")).list();
        Assert.assertNotNull(displayItems);
        Assert.assertEquals(displayItems.size(), 3);
        Assert.assertEquals("03", ((FormulaWithColumnTypesTest.DisplayItem) (displayItems.get(0))).getDisplayCode());
        Assert.assertEquals("100", ((FormulaWithColumnTypesTest.DisplayItem) (displayItems.get(1))).getDisplayCode());
        Assert.assertEquals("20", ((FormulaWithColumnTypesTest.DisplayItem) (displayItems.get(2))).getDisplayCode());
        transaction.commit();
        session.close();
        // 2. Sorting by the casted type (resulting in 3-20-100).
        session = openSession();
        transaction = session.beginTransaction();
        List displayItemsSortedByInteger = session.createCriteria(FormulaWithColumnTypesTest.DisplayItem.class).addOrder(Order.asc("displayCodeAsInteger")).list();
        Assert.assertNotNull(displayItemsSortedByInteger);
        Assert.assertEquals(displayItemsSortedByInteger.size(), 3);
        Assert.assertEquals("03", ((FormulaWithColumnTypesTest.DisplayItem) (displayItemsSortedByInteger.get(0))).getDisplayCode());
        Assert.assertEquals("20", ((FormulaWithColumnTypesTest.DisplayItem) (displayItemsSortedByInteger.get(1))).getDisplayCode());
        Assert.assertEquals("100", ((FormulaWithColumnTypesTest.DisplayItem) (displayItemsSortedByInteger.get(2))).getDisplayCode());
        transaction.commit();
        session.close();
    }

    /**
     * Test entity for formulas.
     * <p>
     * INTEGER is registered as a keyword for testing lower-case sensitivity.
     * FLOAT is registered as a valid column type with oracle dialects.
     * <p>
     * Created by Michael Hum on 17/07/2015.
     */
    @Entity(name = "DisplayItem")
    public static class DisplayItem implements Serializable {
        private int id;

        private String displayCode;

        private Integer displayCodeAsInteger;

        private Integer displayCodeAsFloat;

        @Id
        @GeneratedValue
        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        @Column(name = "DISPLAY_CODE")
        public String getDisplayCode() {
            return this.displayCode;
        }

        public void setDisplayCode(final String displayCode) {
            this.displayCode = displayCode;
        }

        @Formula("CAST(DISPLAY_CODE AS FLOAT)")
        public Integer getDisplayCodeAsFloat() {
            return displayCodeAsFloat;
        }

        public void setDisplayCodeAsFloat(final Integer displayCodeAsFloat) {
            this.displayCodeAsFloat = displayCodeAsFloat;
        }

        @Formula("CAST(DISPLAY_CODE AS INTEGER)")
        public Integer getDisplayCodeAsInteger() {
            return displayCodeAsInteger;
        }

        public void setDisplayCodeAsInteger(final Integer displayCodeAsInteger) {
            this.displayCodeAsInteger = displayCodeAsInteger;
        }
    }

    /**
     * Dialect for test case where we register a keyword and see if it gets escaped or not.
     * <p>
     * Created by Mike on 18/07/2015.
     */
    public static class ExtendedDialect extends H2Dialect {
        public ExtendedDialect() {
            super();
            registerKeyword("INTEGER");
        }
    }
}

