/**
 * LanguageTool, a natural language style checker
 * Copyright (C) 2017 Daniel Naber (http://www.danielnaber.de)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301
 * USA
 */
package org.languagetool.tagging.sr;


import java.io.IOException;
import org.junit.Test;
import org.languagetool.TestTools;


/**
 * Test for Serbian ekavian tagger
 *
 * @author Zolt?n Csala
 */
public class EkavianTaggerTest extends AbstractSerbianTaggerTest {
    /**
     * First we test if the tagger works fine with single words
     */
    @Test
    public void testTaggerRaditi() throws Exception {
        // to work
        assertHasLemmaAndPos("?????", "??????", "GL:GV:PZ:1L:0J");
        // ????????? ?????? ???????
        assertHasLemmaAndPos("??????", "??????", "PL:PN");
    }

    /**
     * Special case for auxiliary verb "jesam" (I am)
     */
    @Test
    public void testTaggerJesam() throws IOException {
        assertHasLemmaAndPos("??", "?????", "GL:PM:PZ:3L:0J");
        assertHasLemmaAndPos("????", "?????", "GL:PM:PZ:2L:0J");
        assertHasLemmaAndPos("???", "?????", "GL:PM:PZ:1L:0M");
    }

    @Test
    public void testTagger() throws IOException {
        TestTools.myAssert("????? ?? ??? ???.", "?????/[?????]PL:GN:PO -- ??/[?????]GL:PM:PZ:3L:0J -- ???/[???]PR:OP:PO:MU:0J:AK:ST|???/[???]PR:OP:PO:MU:0J:NO:NE|???/[???]PR:OP:PO:MU:0J:VO:NE|???/[?????]PR:OP:PO:MU:0J:VO:NE -- ???/[???]IM:ZA:MU:0J:AK:ST|???/[???]IM:ZA:MU:0J:NO|???/[???]PR:OP:PO:MU:0J:AK:ST|???/[???]PR:OP:PO:MU:0J:NO:NE|???/[???]PR:OP:PO:MU:0J:VO:NE|???/[????]PR:PC:PO:MU:0J:AK:ST|???/[????]PR:PC:PO:MU:0J:NO:NE|???/[????]PR:PC:PO:MU:0J:VO:NE", getTokenizer(), getTagger());
        TestTools.myAssert("O?? ?? ?????? ????.", "O??/[null]null -- ??/[?????]GL:PM:PZ:3L:0J -- ??????/[?????]PR:OP:PO:MU:0J:AK:ZI|??????/[?????]PR:OP:PO:MU:0J:GE:NE|??????/[?????]PR:OP:PO:SR:0J:GE:NE|??????/[?????]PR:OP:PO:SR:0M:AK:OR|??????/[?????]PR:OP:PO:SR:0M:NO:OR|??????/[?????]PR:OP:PO:SR:0M:VO:OR|??????/[?????]PR:OP:PO:ZE:0J:NO:OR|??????/[?????]PR:OP:PO:ZE:0J:VO:OR -- ????/[????]IM:ZA:ZE:0J:NO|????/[????]IM:ZA:ZE:0M:GE", getTokenizer(), getTagger());
        TestTools.myAssert("?????? ??? ????? ??????.", "??????/[???????]GL:GV:RA:0:0J:MU|??????/[?????]GL:GV:RA:0:0J:MU -- ???/[???]PR:OP:PO:MU:0J:AK:ST|???/[???]PR:OP:PO:MU:0J:NO:NE|???/[???]PR:OP:PO:MU:0J:VO:NE|???/[?????]GL:PM:PZ:1L:0J -- ?????/[?????]PE:GE|?????/[?????]PL:GN:PO -- ??????/[?????]IM:VL:MU:0J:GE|??????/[?????]IM:VL:MU:0M:GE", getTokenizer(), getTagger());
        TestTools.myAssert("??????? ?? ?????? ????? I, ???? ???????????.", "???????/[??????]IM:VL:ZE:0J:IN -- ??/[?????]GL:PM:PZ:3L:0J -- ??????/[???????]GL:GV:RA:0:0J:MU -- ?????/[?????]IM:VL:MU:0J:NO|?????/[?????]IM:VL:MU:0J:NO:ZI -- I/[I]BR:RI:ON|I/[i]BR:RI:ON|I/[i]RE:MO|I/[i]UZ|I/[i]VE:SA -- ????/[????]IM:ZA:MU:0J:NO -- ???????????/[???????????]IM:ZA:MU:0J:NO", getTokenizer(), getTagger());
        TestTools.myAssert("???? ????.", "????/[???]PR:OP:KM:SR:0M:AK:OR|????/[???]PR:OP:KM:SR:0M:NO:OR|????/[???]PR:OP:KM:SR:0M:VO:OR|????/[???]PR:OP:KM:ZE:0J:NO:OR|????/[???]PR:OP:KM:ZE:0J:VO:OR|????/[????]PR:OP:PO:SR:0M:AK:OR|????/[????]PR:OP:PO:SR:0M:NO:OR|????/[????]PR:OP:PO:SR:0M:VO:OR|????/[????]PR:OP:PO:ZE:0J:NO:OR|????/[????]PR:OP:PO:ZE:0J:VO:OR -- ????/[????]IM:ZA:ZE:0J:NO|????/[????]IM:ZA:ZE:0M:GE", getTokenizer(), getTagger());
        // Proof that Ekavian tagger does not tag Jekavian words (???????, ????????, ????????)
        TestTools.myAssert("??? ?? ????? ???? ??????, ????? ?????, ????? ??????.", "???/[???]IM:ZA:ZE:0J:NO|???/[???]IM:ZA:ZE:0M:GE -- ??/[?????]GL:PM:PZ:3L:0J -- ?????/[null]null -- ????/[????]ZM:PK:0:MU:0J:AK:ST|????/[????]ZM:PK:0:MU:0J:NO -- ??????/[null]null -- ?????/[null]null -- ?????/[?????]IM:ZA:MU:0J:AK:ST|?????/[?????]IM:ZA:MU:0J:NO -- ?????/[null]null -- ??????/[null]null", getTokenizer(), getTagger());
    }
}

