/**
 * LanguageTool, a natural language style checker
 * Copyright (C) 2013 Andriy Rysin
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301
 * USA
 */
package org.languagetool.rules.uk;


import java.io.IOException;
import org.junit.Assert;
import org.junit.Test;
import org.languagetool.JLanguageTool;
import org.languagetool.rules.RuleMatch;


public class TokenAgreementNounVerbRuleTest {
    private JLanguageTool langTool;

    private TokenAgreementNounVerbRule rule;

    @Test
    public void testRule() throws IOException {
        assertMatches(1, "????? ????????");
        assertMatches(1, "???? ??????");
        assertMatches(1, "? ????????");
        assertMatches(1, "?? ? ????? ?????? ????????? ????????? ?? ?????");
        // TODO:
        // assertMatches(1, "?? ????? ?????? ?????? ??????? ??????");
        // TODO:
        // assertEmptyMatch("???????? ??? ????????? ??????? ????????? ? ??????");
        // inf
        assertEmptyMatch("? ????? ???? ??????? ??????????? ?????? ???????");
        assertEmptyMatch("??? ??????? ???? ?????? ?????? ????? ????????? ?????");
        // correct sentences:
        assertEmptyMatch("??????? ??????");
        assertEmptyMatch("? ??????");
        assertEmptyMatch("? ????????");
        assertEmptyMatch("40 ????? ??????? ??????? ???????");
        // ???? + impers
        assertEmptyMatch("???? ????????? ???? ???????");
        // ???? + verb:past
        assertEmptyMatch("??? ???? ?????");
        assertEmptyMatch("????? ???????? ???? ????? ??????");
        assertEmptyMatch("??? ???? ????? ????");
        // ??? + v_naz
        assertEmptyMatch("?????? ??? ????-??? ????? ????? ?????");
        assertEmptyMatch("? ???? ?????? ? ?????");
        assertEmptyMatch("????????? ? ??????????? ????????????");
        // unknown name
        assertEmptyMatch("?????? ??????");
        assertEmptyMatch("????? ??????? ?????????");
        assertEmptyMatch("? ??? ????? ???? ???????");
        assertEmptyMatch("????? ????????");
        assertEmptyMatch("?? ???? ???? ??? ????");
        // ???? ????
        assertEmptyMatch("??? ????? ???? ???? ??????? ??????? ??? ?????.");
        // ??
        assertEmptyMatch("????, ?? ?? ????????? ?????");
        // TODO: would hide good occasions
        // assertEmptyMatch("?????? ??????????? ? ??????? ?? ???????? ????????.");
        // assertMatches(1, "?? ????? ???? ?????????");
        // TODO: ignore insert words
        // assertEmptyMatch("??? ?????????? ?????? ?????????? ?? ????????, ?????????, ??    ?????");
        // assertEmptyMatch("?????, ???????, ? ?????.");
        assertEmptyMatch(TokenAgreementNounVerbRuleTest.GOOD_TEXT);
        assertEmptyMatch("? ?? ???? ??????????");
    }

    @Test
    public void testProperNames() throws IOException {
        // posessive insert
        assertEmptyMatch("?????????????? ??? ?????????? ??????? ?????? ????????? ?????????");
        assertEmptyMatch("???????? ?????? ?????? ?????.");
        assertEmptyMatch("???????? ??????? ????? ?????????? ??????");
        assertEmptyMatch("?????? ?????? ?????????? ??????????.");
        assertEmptyMatch("??? ?????????? ????? ? ????? ????? ????? ?????");
        assertEmptyMatch("? ???? ???????? ???????? ?? ?????? ?????");
        assertEmptyMatch("???????? ?? ?????????? ???? ??????? 16 ?????????");
        // proper name insert
        assertEmptyMatch("?????? ?????? ??????? ???????????? ? ????????");
        assertEmptyMatch("???????? ????????? ????????? ?? ???????");
        // TODO:
        // assertEmptyMatch("??? ?????????????? ????? ?????????? ???????? ???????");
        // proper name passive place
        assertEmptyMatch("?? ? ??????? ??????? ????? ???? ????????");
        assertEmptyMatch("? ?????????? ???? ???????? ??????? ??????? ???????");
        assertEmptyMatch("?? ?????????????? ???? ???????? ??????? ??????? ?????");
        assertEmptyMatch("? ???? ??????? ??????? ???? ???????? ?????????????");
        assertEmptyMatch("???? ? ???? ??????? ???????? ??????????");
        assertEmptyMatch("??????? ????????? ???? ??????? ???????");
        assertEmptyMatch("???????? ???????? ? ??????????? ????? ??????? ???? ?? ?????????");
        assertEmptyMatch("? ?????????? ?????????? ???????? ?????? ????????? ??????");
        assertEmptyMatch("??????? ???????????? ??????? ????????? ???????????");
        // TODO
        // assertEmptyMatch("? ?????????? ???????? ???????? ?????? ???????? ???? ??????");
        assertEmptyMatch("? ?????? ????? ? ???????? ???????????? ???????????? ????");
        assertMatches(1, "??????? ???????? ?????, ??????????.");
        // TODO: next 2 fall into common exceptions
        // assertMatches(1, "???? ????? ???????? ???? ? ???????? ????? ??????????? ???? (!) ? ?????? ??????");
        // assertMatches(1, "?? ?????????? ??????? ? ??????????? ?????? ?????? ???????????? ????");
    }

    @Test
    public void testVerbInf() throws IOException {
        // modal verb + noun + verb:inf
        assertEmptyMatch("?? ????? ? ?????????");
        assertEmptyMatch("?? ? ??????? ?????");
        assertEmptyMatch("?? ? ?????? ?????? ????");
        assertEmptyMatch("?????????? ?????? ?? ????????? ???????????");
        assertMatches(1, "? ??????");
        // assertMatches(1, "?????? ??????");
        assertEmptyMatch("?? ??????? ? ?????? ?????? ?? ??????????");
        // noun + inf + ?? + verb/adj:rv_inf
        assertEmptyMatch("?? ?? ??????? ?? ???????");
        assertEmptyMatch("? ?????? ???? ?? ???? ??? ????? ????????.");
        assertEmptyMatch("?? ????????????? ?? ???????");
        assertEmptyMatch("????? ?? ? ??????????");
        assertEmptyMatch("?? ???????? ?? ????????? ?? ??????");
        assertMatches(1, "?? ???????? ?? ????????? ?? ??????? ??????");
        assertEmptyMatch("??, ???? ? ??????? ?? ???? ????");
        assertEmptyMatch("?? ????? ?? ???? ???????????");
        // rv_inf
        assertEmptyMatch("?? ?????? ?? ?????? ??? ??????");
        assertEmptyMatch("?? ??????? ? ???????");
        // TODO:
        // assertEmptyMatch("?? ? ???????? ?? ?????? ?? ???? ??????");
    }

    @Test
    public void testPlural() throws IOException {
        assertMatches(1, "21 ??????? ????????");
        assertMatches(1, "???? ??????? ????????");
        assertMatches(1, "????? ?????? ? ????????? ?????????? ?????? ???? ????????");
        assertMatches(1, "???????? ???????, ???? ???? ????????????? ?????????? ?? ????????? ????????? ????????");
        assertMatches(1, "???????? ??? ??????? ???? ?????????, ???? ??????? ????????? ???????");
        assertMatches(1, "??? ?? ??? ???????, ??????? ??????????? ? ??????? ????????? ?? ??????? ???????");
        assertMatches(1, "???? ?????????? ? ??????? ? ???????, ? ?????????? ???? ? ???????.");
        assertMatches(1, "?????????? ? ??????? ????????????? ???? ??????? ???? ?????");
        assertMatches(1, "?? ? ???? ???? ?????? ???? ?????");
        assertEmptyMatch("??? ???? ? ?????? ???????");
        assertEmptyMatch("?? ?? ???????, ?? ? ????? ?????");
        assertEmptyMatch("?? ????, ?? ????? ????????? ????? ?? ?????");
        assertEmptyMatch("????? ??????? ? ????? ????? ?????");
        assertEmptyMatch("??????????? ? ?????? ??????? ?????????????");
        assertEmptyMatch("???????????? ???? ? ??? ????? ????? ?????????? ?? ????????");
        assertEmptyMatch("????????, ???????, ????? ????????");
        assertEmptyMatch("??????? ? ??????? ??????? ???????????");
        assertEmptyMatch("??????? ? ???????? ????????? ???????");
        assertEmptyMatch("?????????? ???? ?? ??????? ?????????? ???????? ?????????");
        assertEmptyMatch("???? ? ??? ???????? ???? ?????????");
        assertEmptyMatch("???????? ?? ??????? ??????????? ?? ????? ??????????");
        assertEmptyMatch("??? ???????? ? ???????????????????? ???????");
        assertEmptyMatch("? ????????????, ? ????????? ??????????? ???????? ? ?????");
        assertEmptyMatch("? ????????, ? ??????? ???????? ????? ??????");
        assertEmptyMatch("?????? ?????????, ????? ??????????, ??????? ????????? ????????? ??????????? ???????????");
        assertEmptyMatch("27-?????? ????? ?? 54-????? ????????? ???? ??????????");
        assertEmptyMatch("27??????? ????? ?? 54?????? ????????? ???? ??????????");
        assertEmptyMatch("??????? ?????? ?? ??????? 30????????? ?????????? ?????????");
        // assertEmptyMatch("?. ?????? ? ?. ????? ?????????? ??????? ???????? ???? ?????????? ?????");
        // unknown proper nouns
        assertEmptyMatch("???????? ? ???? ??????? ?????????");
        assertEmptyMatch("? ????????, ? ???????? ????? ??????");
        // can't easily detect special case with ??????
        // assertMatches(1, "????? ???? ?????? ?? ??????? ?????? ?????? ????????? ? ???? ????????");
        assertEmptyMatch("??????????? ?? ?????????? ?????? ???? ????????? ???????");
        assertMatches(1, "?? ????????? ?????????, ?????? ?? ??????, ???? ?????????? ?? ??????????");
        assertEmptyMatch("??????, ????????? ?? ? ??????? ?????? ??????");
        assertEmptyMatch("?????? ?????????? ????? ?? ???? ????????? ????????");
        assertEmptyMatch("??? ???????, ? ????? ??????????? ?????????????");
        assertEmptyMatch("????????? (?? ????????????) ?? ????? ?????? ?????????");
        assertEmptyMatch("?? ???????, ??? ? ????????? ??????????");
        assertEmptyMatch("???????? ????, ? ? ??? ????????? ??????? ????????? ??????????");
        assertEmptyMatch("??????? ? ? ???????????? ???????? ?? ???????? ?????");
        // TODO: conj + adv + conj
        assertEmptyMatch("? ???????? ????????, ? ????? ? ??????? ?????");
        assertEmptyMatch("???? ???? ??????, ? ???????? ? ??? ?????? ?????????");
        assertEmptyMatch("??? ?????????, ? ????? ? ???????? ????? ????");
        // TODO:
        // assertEmptyMatch("????? ????????, ? ????? ???????????? ????? ???????? ?????? ????");
        // assertEmptyMatch("???????? ? ??????????, ? ?????? ? ???????? ????????? ???????? ??????? ?? ????.");
        // TODO: inserts
        // assertEmptyMatch("??? ???? ????????, ? ????, ? ????????? ?????????? ????????");
        // assertEmptyMatch("???????, ????? ?, ?????? ?????, ????? ?????? ?????????");
        // assertEmptyMatch("???? ??????, ? ???????? ? ???? ????????? ???? ?????????? ?????????????");
        // assertEmptyMatch("? ???????, ?, ??????????, ?????? ????????? ????????");
        // assertEmptyMatch("???????? ? ?? ??????? ???? ??????? ??????? ??????");
        // assertEmptyMatch("????????? 1917-?? ? ?????????????? ????? ???????, ??? ????????? ?? ???????????? ?????? ?? ???????.");
        // noun:v_naz noun:v_rod
        // TODO: conflicts with test below
        // assertMatches(1, "?????? ????????? ????????, ??????? ???? ?????????? ???? ??? ??????");
        assertEmptyMatch("?????? ????????? ??????, ??????????? ?????, ?????????? ????????");
        assertEmptyMatch("???????, ??????? ??????, ?????? ???? ??????????");
        assertEmptyMatch("??????? ??????, ?????? ???? ??????????");
        assertEmptyMatch("???????? ????? ??????, ???????? ????????, ?????? ?????? ??????????? ?? ????????? ?????");
        assertEmptyMatch("??? ?????, ???? ????????? ???????????");
        assertEmptyMatch("????????? ???, ???? ??????, ?????????????? ??????? ????? ? ??????????");
        assertEmptyMatch("??????????? ????? ????, ????-????????? ???????? ?????????? ??? ?? ?????? ??????? ?????");
        assertEmptyMatch("????? ??????? ?? ?? ??????? ????????");
        assertEmptyMatch("????? ????????? ?? ???? ????????? ???????.");
        // TODO: noun:v_naz noun:v_oru conj
        // assertEmptyMatch("??? ????????? ? ?????? ?????? ???????? ????? ??????????");
        // adj conj adj noun
        assertEmptyMatch("?????????? ? ?????? ????? ?????? ???????");
        assertEmptyMatch("? ?? ? ???? ????? ??????? ? ??????? ?????");
        // TODO: noun+verb + conj ...
        // assertEmptyMatch("??????? ??????? ? ??????????? ????? ?????????");
        // TODO: ignore quotes and parenthesis
        // assertEmptyMatch("???? ? ??????? ?? ???????? ??????? ???????????");
        // assertEmptyMatch("??????? ?? (???) ????????? ???? ??????????? 21 ??????.");
        // ????
        // assertEmptyMatch("??????? ???? ?????? ? ??????? ???????? ???????");
        // latin/cyr mix
        // assertEmptyMatch("??????? ?? ???i? ???? ???????? ?? ?????");
        assertEmptyMatch("?? ???? 50%+1 ????? ????????????? ? ????????? ???????");
        assertEmptyMatch("?????? ???? ?????? ?????? ?????");
        assertEmptyMatch("?? ???? 50% ???? ???? ????? ???????????");
        assertEmptyMatch("??????????? ????????????????? ???? ????? ??????? ??????? ???? ????");
        assertEmptyMatch("??????????/??????? ????????");
        // plural "semi-numeric"
        assertEmptyMatch("????? ?????????????");
        assertEmptyMatch("??? ????? ???????? ?? ?????? ????");
        assertEmptyMatch("????? ??? ???????? ??????? ??????");
        assertEmptyMatch("?????? ???? ?????? ???????? ????? ?????????? ?????????????");
        // numr
        assertEmptyMatch("????? ?????? ???????? ?????????");
        assertEmptyMatch("????? 121 ??????? ??????????? ?????");
        assertEmptyMatch("????? ????? ???????? ?????????");
        // TODO:
        // assertEmptyMatch("???? ??????? ? 31 ?????? ???????? ???????.");
    }

    @Test
    public void testMascFem() throws IOException {
        // masc-fem
        assertEmptyMatch("????????? ??????? ?????????????? ??????????? ??????????");
        assertEmptyMatch("???-??????? ????????? ? ?????????????");
        assertEmptyMatch("???????-??????? ????????? ? ?????????????");
        assertEmptyMatch("??????????????? ????????? ? ?????????????");
        assertEmptyMatch("??????????? ?????????, ??");
        assertEmptyMatch("??????? ????????");
        // compound
        assertEmptyMatch("?????-????????? ??????? ???????");
        assertMatches(1, "???????-??????? ????????? ? ?????????????");
        assertMatches(1, "???????? ????????? ? ?????????????");
    }

    @Test
    public void testIgnoreByIntent() throws IOException {
        // handled by xml rule
        // assertMatches(1, "???? ?? ???? ?????????? ??????");
        // assertMatches(1, "???? ????????? ????????");
        assertEmptyMatch("???? ?? ???? ?????????? ??????");
        assertEmptyMatch("???? ????????? ????????");
        assertEmptyMatch("??? ????? ???????????");
        assertEmptyMatch("????? ???????????");
        assertEmptyMatch("? ?????????? ?????? ??????? ???? ??????? ?????? ?? 80 ???????? ????????.");
        // ??? ???? ????????? ????? - ???????? ? xml
        // assertMatches(1, "???????? ????? ????????? 350 ??????");
        assertEmptyMatch("???????? ????? ????????? 350 ??????");
    }

    @Test
    public void testOverTheWord() throws IOException {
        assertEmptyMatch("??????? ?????????? ????????????");
        // TODO:
        // assertEmptyMatch("????? ???? ?????? ?????????? ??????");
    }

    @Test
    public void testCaseGovernment() throws IOException {
        assertEmptyMatch("???? ????????? ???? ????????");
        assertEmptyMatch("??? ?????????? ????????? ??????");
    }

    @Test
    public void testSpecialChars() throws IOException {
        assertEmptyMatch("\u0422\u0430\u0440\u0430\u0441 \u043f\u0440\u0438\u00ad\u0431\u0456\u0433.");
        RuleMatch[] matches = rule.match(langTool.getAnalyzedSentence("\u0422\u0430\u0440\u0430\u0441 \u043f\u0440\u0438\u00ad\u0431\u0456\u0433\u043b\u0430."));
        Assert.assertEquals(1, matches.length);
        matches = rule.match(langTool.getAnalyzedSentence("\u0422\u0430\u00ad\u0440\u0430\u0441 \u043f\u0440\u0438\u0431\u0456\u0433\u043b\u0430."));
        Assert.assertEquals(1, matches.length);
    }

    private static final String
}

