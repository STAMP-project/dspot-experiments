/**
 * LanguageTool, a natural language style checker
 * Copyright (C) 2013 Andriy Rysin
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301
 * USA
 */
package org.languagetool.rules.uk;


import java.io.IOException;
import java.util.Arrays;
import org.junit.Assert;
import org.junit.Test;
import org.languagetool.JLanguageTool;
import org.languagetool.rules.RuleMatch;


public class TokenAgreementAdjNounRuleTest {
    private JLanguageTool langTool;

    private TokenAgreementAdjNounRule rule;

    @Test
    public void testRule() throws IOException {
        // correct sentences:
        assertEmptyMatch("???????? ??");
        assertEmptyMatch("??????? ???????");
        assertEmptyMatch("?????????? ?????????");
        assertEmptyMatch("??'? ???????, ???? ???? ??? ??????????");
        assertEmptyMatch("? ?? ????? ????? ? ????, ??? ?????????? ??????? ? ??????????.");
        assertEmptyMatch("?????????????? ??????? ?????????");
        assertEmptyMatch("???????????? ?????? ??????.");
        assertEmptyMatch("???????? ?????.");
        assertEmptyMatch("(??????? ??????? ???? ??????");
        assertEmptyMatch("????????? ??????");
        assertEmptyMatch("??? ???-??????? ????-???????.");
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("??????? ??????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("????? ??????????? ???")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("????????? ??????????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?????? ??????.")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("???????? ????????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?????? ????????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("??????? ???????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("??????? ??????????????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("????????? ??? ????? ?????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("??????? ????????? ????? ? ??????? ?? ????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("???????? ??? ?? ???????? ?????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("? ????????? ??????? ??? ???????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("??? ????? ??????? ? ?????")).length);
        // ?? ?????? ????? ??????? "??????????" (????)
        // assertEquals(1, rule.match(langTool.getAnalyzedSentence("?????????? ???????")).length);
        RuleMatch[] matches0 = rule.match(langTool.getAnalyzedSentence("4 ?????????? ??????????"));
        Assert.assertEquals(1, matches0.length);
        Assert.assertTrue(("Message is wrong: " + (matches0[0].getMessage())), matches0[0].getMessage().contains("[?.?.: ???????, ?????????]"));
        Assert.assertEquals(Arrays.asList("?????????? ???????????", "?????????? ???????????", "??????????? ??????????"), matches0[0].getSuggestedReplacements());
        // from real examples
        // ?-?
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("??? ?????????? ????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("? ?????????? ???????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("? ??????? ???????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("? ????????? ??????????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?? ??????? ??????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("??????????? ??????")).length);
        // taken care by xml rule
        // assertEquals(1, rule.match(langTool.getAnalyzedSentence("408 ??????? ????????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("???????? ????????? ?????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?????????? ?????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("??????? ???????")).length);
        // assertEquals(1, rule.match(langTool.getAnalyzedSentence("??????????? ????? ??????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("? ?????????? ?? ????????? ?????????")).length);
        // relies on disambiguation
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("? ??????? ????.")).length);
        assertEmptyMatch("??????????? ???????? ???????? ?? ?????");
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("????? ?? 30 ????? ?? ????????? ????????? ????????? ...")).length);
        // missing/extra letter
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("????????? ??? ?????? ????????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("???????? ?????????? ??????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?? ?? ?????????? ????????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("???????? ???? ????????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("???????????? ????????????? ???????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("???????? ????????? ????????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("????-???? ????????????? ?????")).length);
        // case government
        // assertEquals(1, rule.match(langTool.getAnalyzedSentence("?? ?????????? ???????????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("??????????? ???????????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("???? ?????? ?????????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("????? ?????? ???????????? ????? ???????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("??? ????????? ? ?? ?????????????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?? ????????? ??????????????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("? ????????? ????????????????")).length);
        // wrong letter
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?????? ?????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?????????????? ?????? ?????? ???????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("???????? ????????? ??????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?? ???????, ?? ????????, ???????????? ?????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("? ??????????? ????")).length);
        // assertEquals(1, rule.match(langTool.getAnalyzedSentence("??? ?????????? ?????")).length);
        // wrong gender
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("? ?????????? ??????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("? ?????????? ?????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("????????? ??????? ???????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?? ??????? ??????????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("??????????? ? ??? ?? ???????? ???????????")).length);
        // assertEquals(1, rule.match(langTool.getAnalyzedSentence("??? ?????????? ?? ????????? ????????????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("??????????? ??????????? ??????????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?????????? ?? ????????? ???????????")).length);
        // we don't care much about adjp:actv:imperf
        // FIXME: ignored by adjp:actv:imperf + noun.*v_naz
        // assertEquals(1, rule.match(langTool.getAnalyzedSentence("???? ???????? ???????")).length);
        // assertEquals(1, rule.match(langTool.getAnalyzedSentence("?????????? ????????? ?????????")).length);
        // false v_rod with -?
        RuleMatch[] matches = rule.match(langTool.getAnalyzedSentence("?????????? ????????????"));
        Assert.assertEquals(1, matches.length);
        Assert.assertTrue("Missing message for v_rod/v_dav -?/?", matches[0].getMessage().contains("???????"));
        // false v_rod with -?
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("???????????? ??????")).length);
        // ne- together
        // TODO: fix later
        // matches = rule.match(langTool.getAnalyzedSentence("???????? ????????? ????????? ??????????"));
        // assertEquals(1, matches.length);
        // assertTrue("Missing message for ???? ???????? ??????", matches[0].getMessage().contains("?????? ??????"));
        // false :nv
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("???????????? ???????? ????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?? ???????? ????????? ????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("? ????????? 2015 ???? ?? ??????? ???? ?? ??????? ????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?? ???????? ??????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("????????? ??????")).length);
        // missing/extra space, dash etc
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("??????????? ?????? ??")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("???????????? ?????? ??")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("???????? ???????? ???????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?? ????????? ?????????")).length);
        // lowercase city
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("? ??????? ?????")).length);
        // barbarism
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?????????? ??????")).length);
        // will be caught by barbarism rule
        assertEmptyMatch("?? ?????????????? ?????");
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?????? ???????????? ????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("???? ??? ?? ??????? ??????????? ????????")).length);
        // FIXME: FN due to ignoring adj.v_oru + noun.*v_naz/zna
        // assertEquals(1, rule.match(langTool.getAnalyzedSentence("?? ?????? ?? ???????? ???????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?? ???????? ?????????? ?????????")).length);
        // adj not noun
        assertEmptyMatch("? ??????? ????????? ??????");
        // adj as noun
        assertEmptyMatch("??????? ??????????? ???????");
        assertEmptyMatch("??????? ?????");
        // pron
        assertEmptyMatch("????? ?????? ?????");
        assertEmptyMatch("??????? ???????? ?????");
        // pron + adj:n:v_rod
        assertEmptyMatch("?????? ??????? ??????");
        assertEmptyMatch("????? ??? ???? ??????? ????");
        // ????
        assertEmptyMatch("??? ?????????? ?????");
        assertEmptyMatch("????? ?????? ?????????");
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?'??? ????? ?????")).length);
        assertEmptyMatch("1/8-? ??????");
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("1/8-? ???????")).length);
        assertEmptyMatch("? 11-?? ????????");
        assertEmptyMatch("???????? 148-?? ?????");
        // ??????, ??'????...
        assertEmptyMatch("????????????????? ??????? 1000 ???. ??.");
        assertEmptyMatch("10 ?????? ?????? 1,5 ");
        assertEmptyMatch("????????? ???????? ??? 100 ?? 1000 ??????");
        assertEmptyMatch("?? ???? ???????? ????");
        // ??????
        assertEmptyMatch("200% ?????? ????????");
        // ????
        assertEmptyMatch("???????????? ???? ?????????");
        // ???????
        assertEmptyMatch("??????? ????? ????????? ??????");
        assertEmptyMatch("??????? ??????????");
        // insert - ??? ???? ????????? ??????
        // assertEmptyMatch("?? ????? ??? ???? ??????");
        // assertEquals(1, rule.match(langTool.getAnalyzedSentence("?? ????? ??? ???? ??????")).length);
        // adv
        assertEmptyMatch("????? ?????? ? ?????? ?????");
        assertEmptyMatch("?????????? ??????? ??????? ???????");
        assertEmptyMatch("? ?????????? ???????, ???????, ???????");
        assertEmptyMatch("????????? ??????????? ? ??????????");
        assertEmptyMatch("? ?????? ??????? ???????????? ????????");
        // ????
        assertEmptyMatch("??? ????????? ???? ????????");
        // ??????? ???, ?? ? ????, ???????? ????????? ???????
        assertEmptyMatch("??? ?????? ????????????????? ????? ????????");
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("??? ????????? ????")).length);
        // ???/???/?????? ????????
        assertEmptyMatch("33 ???????? ???????");
        assertEmptyMatch("?? ???? ????????????? ????????");
        assertEmptyMatch("???-??? ???????? ?????????");
        assertEmptyMatch("??? ?????? ????????? ????????");
        assertEmptyMatch("?????? ??????????? ???????? ???????");
        assertEmptyMatch("3-4 ??????? ?????? ????????");
        assertEmptyMatch("??????? ???????? ?????????");
        assertEmptyMatch("??? (?? ?????? ???) ?????? ?????????? ??????");
        assertEmptyMatch("??? ????? ????????");
        assertEmptyMatch("??? ??????? ?????");
        assertEmptyMatch("??? ?????? ?????");
        assertEmptyMatch("??? ????????? ?????? ?????");
        assertEmptyMatch("??? ???????? ??????????? ???????");
        assertEmptyMatch("??? ???????? ??????");
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("??? ??????? ???????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("??? ??????? ???????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("83,7 ?????????? ?????????")).length);
        // adj:p: + ?????
        assertEmptyMatch("????????? ???????-???");
        assertEmptyMatch("?????????? ???????-???");
        assertEmptyMatch("???????? ??????? ??????-?????");
        assertEmptyMatch("????? ???-??? ????? ???????????");
        assertEmptyMatch("?????????????? ????????????");
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("????????? ???????")).length);
        // 1?3-? ?????
        assertEmptyMatch("1?3-? ????? ????????? ? ???????");
        assertEmptyMatch("? 5?8-?? ??????");
        assertEmptyMatch("?? ???????????????? ????????");
        assertEmptyMatch("?? 14?16-?? ?????");
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("3-? ????? ?????????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("??????-??? ????????? ?????")).length);
        RuleMatch[] match = rule.match(langTool.getAnalyzedSentence("?????????? ???????? 22-? ?????"));
        Assert.assertEquals(1, match.length);
        Assert.assertTrue(match[0].getMessage().contains("??????? ????????? ????? ??????????? ??????????"));
        assertEmptyMatch("???????? ? ????????? ??????");
        assertEmptyMatch("?????? ? ???????? ?????");
        // time
        assertEmptyMatch("? ? 7-? ????? ??? ?????????");
        assertEmptyMatch("??????????? ?? 11-?? ?????");
        assertEmptyMatch("? ?????? ?????");
        assertEmptyMatch("?????????? ???");
        // years
        assertEmptyMatch("?????? 2003-?? ?????????");
        assertEmptyMatch("? 1990-? ?????? ???????");
        assertEmptyMatch("?? 2009-? ????????? ???????????");
        assertEmptyMatch("?????? ????? ??? 2011-? ????????? ????-100?");
        assertEmptyMatch("???? ? 1990-?? ??????? ???? ?????? ??????? ?????????");
        assertEmptyMatch("? 2009?2010-?? ??????? ??????? ????? ??????? 1/3 ????????");
        assertEmptyMatch("? 1920?1930-? ?????? ????? ??????? ???? ?? ??????????? ???????");
        assertEmptyMatch("?? ????? ?????????????? 2008?2009-?? ????? ?? ??? ??????");
        assertEmptyMatch("?????? ?? 1986?1988-? ?????? ???????? ??????? 40 ???? ???");
        assertEmptyMatch("?? ??????? ??????????? ??????? ??????? ???? ?????");
        assertEmptyMatch("??????? ????????????? ?????? 1950-60-? ?????? ???????????");
        assertEmptyMatch("?? ????? 80-90-?? ??????????? ...");
        assertEmptyMatch("?????? ??? ??????? ??????");
        assertEmptyMatch("? ?????????? ?? ?????????? ?????");
        assertEmptyMatch("??????? ???????? ????????????? ??????????????");
        assertEmptyMatch("????????? ??????? ????? ?????????????");
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?? 131-?? ???????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("? 12?? ??????")).length);
        assertEmptyMatch("?????????? ??????? ???? ????????????");
        assertEmptyMatch("?????? ??? ????????? ???? ????? ????");
        assertEmptyMatch("???????? ????? ? ??????");
        assertEmptyMatch("?????????? ?? ????????? ????? ?????");
        assertEmptyMatch("?? ????????????? ?????????? ?? ?????");
        assertEmptyMatch("????????? ????????? ?? 80");
        assertEmptyMatch("????? ???? ????? ?????? 40");
        assertEmptyMatch("? ?????????? ????? ?? 10?15");
        assertEmptyMatch("? ???????? ???????? ?? 3");
        assertEmptyMatch("????????? ???? ? ?'?????????? ?????");
        assertEmptyMatch("??????? ? 55-? ??????? ?????? ????????????? ???????");
        assertEmptyMatch("???? 5-? ????");
        assertEmptyMatch("????????? ????? 29-? ????? ???????");
        assertEmptyMatch("?? ???. ???????, 17-? ????? ????????");
        assertEmptyMatch("?????? ?????????? ????????, 35-? ???? ??????");
        // ///////// plurals /////////
        // plural + ???...
        assertEmptyMatch("?? ?????? ???????????");
        assertEmptyMatch("????? ?????????");
        assertEmptyMatch("?? ?????? ?????? ????????");
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?? ?????? ??????")).length);
        // plural
        assertEmptyMatch("??? ???? ???? ? ??????");
        assertEmptyMatch("???????? ????? i ??????");
        // latin i -  we want AlphabetMixedRule to take care of this
        assertEmptyMatch("????????? ?????????? ?? ????????? ????");
        assertEmptyMatch("????? ??????? ?? ???");
        assertEmptyMatch("????????? ??'?, ???????? ?? ?????");
        assertEmptyMatch("???????????, ?????????????? ???????");
        assertEmptyMatch("??? ??????, ??? ????????????? ???????");
        assertEmptyMatch("? ????? ???????? ???????");
        assertEmptyMatch("??????? ? ?????????? ?????");
        assertEmptyMatch("??????????? ? ?????????? ??????");
        assertEmptyMatch("?????? ??????? ???????????? ?????? ?? ?????");
        // TODO:
        // assertEmptyMatch("????????? ???????? ?????????, ??????? ??????");
        assertEmptyMatch("???????? ??????? ?????? ? ?????");
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("? ?????????? ?? ????????? ?????????")).length);
        assertEmptyMatch("??'?????? ????? ? ????????");
        assertEmptyMatch("?? ????????? ????? ? ????? ??????");
        assertEmptyMatch("???????? ??????? ? ??????????");
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("???????? ??????? ? ?????????")).length);
        // TODO: conflicts with the case when plural is spread out across the sentence
        // assertEquals(1, rule.match(langTool.getAnalyzedSentence("???????? ?? ????????? ????")).length);
        // "long" plural
        assertEmptyMatch("??? ? ?? ???????????? ??????");
        assertEmptyMatch("? ? ??????, ? ? ?????? ??????????");
        assertEmptyMatch("??????? ????????? ????????, ?????? ????????, ??????? ?????????");
        assertEmptyMatch("230 ??????? ?? ???????????? ? 120 ?? ??????????????? ??????????");
        assertEmptyMatch("??????? ???????? ??????");
        // reverse order
        assertEmptyMatch("??????? ?????? ??????????");
        assertEmptyMatch("??????? ?????? 6-?? ??????");
        assertEmptyMatch("??????????? ?????????? ????????");
        assertEmptyMatch("????? ?????? ??????? ??????");
        assertEmptyMatch("????? ?????? ??????? ??????");
        // ???? ??????
        assertEmptyMatch("???? ?? ???? ?????? ????????");
        // ?????
        assertEmptyMatch("????????? ????? ????????");
        assertEmptyMatch("? ??????? ????????????");
        assertEmptyMatch("?????????? ??. ?. ??????????????");
        assertEmptyMatch("4-? ??????????? ??. ???????? ?. ?????????????");
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("? ??????? ??????????? ????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("? ??????? ??????????? ?????")).length);
        assertEmptyMatch("????? ??????? ??????????? ??????????? ??????? ???????????");
        // ??????
        assertEmptyMatch("???????? ?????? 1620?1650 ?????");
        // ?????? ??
        assertEmptyMatch("?????? ?????? ?? 4 ??????");
        // stable multiword
        assertEmptyMatch("?? ????? ?????? ???????????");
        assertEmptyMatch("??????? ????? ?????");
        assertEmptyMatch("???? ?? ???????");
        assertEmptyMatch("??? ?? ??????? ????????");
        assertEmptyMatch("???????? ????");
        assertEmptyMatch("??????? ??????? ????????");
        assertEmptyMatch("???? ???????? ??????");
        assertEmptyMatch("??????????? ?? ????? ???????");
        assertEmptyMatch("????????? ??????? ????????");
        assertEmptyMatch("???????? ?? ?????? ????????, ??????????");
        assertEmptyMatch("??? ??? ?????? ???????? ?????????");
        assertEmptyMatch("?? ????? ?????? ?????");
        assertEmptyMatch("?????? ???????? ?????????");
        assertEmptyMatch("?????? ??????? ????????????? ????? ??????");
        assertEmptyMatch("?????? ????");
        // <adv>
        assertEmptyMatch("? ?????????? ?????????? ?????? ??? ?????????");
        assertEmptyMatch("? ?????? ??????????? ??????????");
        assertEmptyMatch("?? ??????? ????????? ???? $29,3 ????");
        // ??????
        assertEmptyMatch("????? ?? ?????? ??????? ????????");
        assertEmptyMatch("??????? ??????????? ????????? ????????");
        assertEmptyMatch("?????? ?????? ?????????");
        assertEmptyMatch("?????? ?????? ???????????");
        assertEmptyMatch("???????? ?????? ????????");
        // TODO: due to ignoring ?????? we missing these:
        // assertEquals(1, rule.match(langTool.getAnalyzedSentence("???? ?? ?????? ??????")).length);
        // ?????? ??????
        assertEmptyMatch("?????? ?????????????? ????? ?? ???????");
        assertEmptyMatch("?????? ????????? ?????? ?? ?????");
        assertEmptyMatch("?????? ???????? ?????");
        assertEmptyMatch("?? ????? ?????? ?????????? ?? ???????????");
        // TODO: streets
        // assertEmptyMatch("?????? ?? ?????????? ???????????? ?????????? ???????");
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?? ???????? ???????")).length);
        // ???????? ?.?. + ????????
        assertEmptyMatch("?????????? ????????");
        // adj as noun
        assertEmptyMatch("????? ????????? ??????");
        assertEmptyMatch("???????????????? ?????? ?????????? ?????????");
        assertEmptyMatch("???????? ?? ???????? ??????????");
        assertEmptyMatch("???? ? ?????? ????? ????????");
        assertEmptyMatch("???? ????? ????????? ????????");
        assertEmptyMatch("????? ?????????? ?????????");
        assertEmptyMatch("?????? ?????? ????");
        assertEmptyMatch("????????? ??? ?????????? ???????");
        assertEmptyMatch("?? ??????????? ??????? ??????? ????????");
        // ////// adjp ////////////
        // adjp:actv:imperf + noun (case government)
        // we ignore adjp:actv.*:bad - it's handled by simple replace rule
        assertEmptyMatch("?????????? ?????????");
        assertEmptyMatch("?????????? ???????");
        // adjp + (????) ? ????/?????
        assertEmptyMatch("??????????? ? ???? ???????");
        assertEmptyMatch("??????????? ? ??? ???? ???????");
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("???????????? ? ???? ???????")).length);
        // adjp + noun.*v_oru
        assertEmptyMatch("?????? ?????? ???????");
        assertEmptyMatch("??? ?????? ??????");
        assertEmptyMatch("???????????? ????????? ????????");
        assertEmptyMatch("????? ?????????? ???????? ?? ?????????");
        assertEmptyMatch("????? ???????? ??????? ??? ?????");
        assertEmptyMatch("???????? ??????? ?????");
        assertEmptyMatch("??????????? ????????? ???????? 20 ??????");
        assertEmptyMatch("?????????? ???????, ???? ?????????");
        assertEmptyMatch("?????????? ??????????? ??????????? ??????????");
        assertEmptyMatch("????????? ???????????? ??????");
        assertEmptyMatch("?????? ???????????? ???????? ??????? ????");
        // TODO:
        // assertEquals(1, rule.match(langTool.getAnalyzedSentence("?????? ?????? ???????")).length);
        // adjp + adj:v_oru + noun (case governed by adjp)
        assertEmptyMatch("??????????? ????? ???????");
        // adjp + ??????
        assertEmptyMatch("????????? ?????? ?????");
        // ????/?????/???????? + adj:v_oru + noun:v_dav (gender matches adj)
        assertEmptyMatch("???? ???? ?????????? ???????? ? ?????");
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("???? ???? ????????? ???????? ? ?????")).length);
        // modal
        assertEmptyMatch("????? ??????? ????? ???????");
        assertEmptyMatch("???? ?????? ???????????? ???????????");
        assertEmptyMatch("??? ?????? ????? ????? ???????");
        assertEmptyMatch("????? ?????? ??? ??? ???????? ???????? ????????");
        // ????/?????/???????? + adj:v_oru + noun:v_naz (gender matches adj)
        assertEmptyMatch("???? ???? ?????? ????????");
        assertEmptyMatch("???? ???? ? ?????? ????????");
        assertEmptyMatch("???? ????????? ?????????");
        assertEmptyMatch("???? ???? ???????????? ????? ?????????????");
        assertEmptyMatch("? ????????? ?????");
        assertEmptyMatch("???? ? ????? ? ???????? ????");
        assertEmptyMatch("? ???? ? ???? ????????? ????????.");
        assertEmptyMatch("????? ????????? ???? ?? ??????");
        // TODO: ignored by "??????? ???????????? ??????????" exception
        // assertEquals(1, rule.match(langTool.getAnalyzedSentence("???? ????????? ?????????")).length);
        // adj + noun agrees, verb + adj/noun agreement will be different rule
        // assertEquals(1, rule.match(langTool.getAnalyzedSentence("???? ?????? ?????")).length);
        // verb + a:v_oru + n:v_naz (case matches verb)
        assertEmptyMatch("?????? ?? ???????? ????????? ??????????");
        assertEmptyMatch("??????? ???????????? ?????????? ???? ??????");
        assertEmptyMatch("??????? ?????????? ???????????? ???????");
        assertEmptyMatch("??? ??????? ???????? ????? ?? ???????");
        assertEmptyMatch("????????? ?????? ?????????? ??????????");
        assertEmptyMatch("???? ???? ?? ????????? ????? ????????");
        assertEmptyMatch("?? ?????? ???? ???????????? ???????????");
        // TODO:
        // assertEmptyMatch("??????? ???????????? ???????????? ???? ??????");
        // verb + adj.v_oru + noun:v_zna (case matches adj)
        assertEmptyMatch("??? ???????? ?????????? ??????? ?????");
        assertEmptyMatch("??????? ????????? ??????");
        assertEmptyMatch("???????? ????????????? ???????");
        assertEmptyMatch("????????? ????????????? ????????");
        assertEmptyMatch("??????? ?????????? ????????????");
        assertEmptyMatch("?? ???????? ??????????? ????????? ???? ??????? 200 ?????");
        assertEmptyMatch("??????? ???????? ? ?????????? ????? ?????? ??????");
        // TODO:  ?? ??? ???? ?????????? ????????
        // TODO:
        // assertEquals(1, rule.match(langTool.getAnalyzedSentence("?????? ?????? ????????? ?????? ? ?????? ????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("???????? ????????????? ???????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?? ???????? ????????? ?????????????")).length);
        // ignored by verb + adj:v_oru + noun:v_naz
        // assertEquals(1, rule.match(langTool.getAnalyzedSentence("???????? ???????????? ???????")).length);
        // adjp + a:v_oru + noun: (case from adjp)
        assertEmptyMatch("??????????? ????? ???????");
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("??????????? ????? ?????????")).length);
        // adjp + noun (case government)
        assertEmptyMatch("?????????? ??????? ???????????");
        assertEmptyMatch("?????????? ??????? ?????????");
        assertEmptyMatch("?????????? ?????????? ??????????? ??????");
        assertEmptyMatch("?? ??? ??????????????? ??????????? ???????");
        assertEmptyMatch("???? ???? ????????? ????????????");
        assertEmptyMatch("??????????? ?????? ??????");
        assertEmptyMatch("?????? ?????? ??????? ???????");
        assertEmptyMatch("????? ???? ?????????????? ???????? ??????????");
        assertEmptyMatch("?????? ??????? ?????? ??");// TODO: ?????????? ??? ???? ???? ????? ????

        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?????????? ??????? ????????????")).length);
        // TODO:
        // assertEquals(1, rule.match(langTool.getAnalyzedSentence("???????? ??????? ?????")).length);
        // ////////// adj ///////////////
        // adj + noun (case government)
        assertEmptyMatch("??????? ?????");
        assertEmptyMatch("???????? ??????");
        assertEmptyMatch("? ??????? ??????????? ??????? ????????");
        assertEmptyMatch("????? ??????????? ????????");
        assertEmptyMatch("??????? ?????????");
        assertEmptyMatch("???? ??????????? ??????");
        assertEmptyMatch("?????????? ????? ?? ???");
        assertEmptyMatch("????? ??????? ????? ?????????");
        assertEmptyMatch("??????????, ?????????? ??????? ??????");
        assertEmptyMatch("???????? ?? ??????? ????????");
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("??????? ??????")).length);
        // adj + (case government) adj + noun (case match 1st adj)
        assertEmptyMatch("??????????? ??????????? ?????????");
        assertEmptyMatch("????????????? ???????????? ??????");
        assertEmptyMatch("????????????? ???????? ????????");
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("????????????? ???????????? ???????")).length);
        // assertEquals(1, rule.match(langTool.getAnalyzedSentence("????????????? ????????????? ??????")).length);
        // adj.*v_oru + noun.*v_naz (case matches adj) (+ verb)
        assertEmptyMatch("??????????????? ???????? ???? ???? ? ??????");
        assertEmptyMatch("?????????? ???????? ??? ?");
        assertEmptyMatch("?? ???? ??????????? ????? ? ? ??? ??????");
        assertEmptyMatch("???, ???????? ????????? ??????, ?? ?????? ??????????, ?????");
        assertEmptyMatch("????????? ?????? ????? ? ?? ??????");
        // ... -verb
        assertEmptyMatch("?? ????????? ??????? ?? ?????????????? ?????");
        assertEmptyMatch("????????? ???????? ?????????? ?????????");
        // adj.v_oru + noun.*v_naz (no case match) (+verb)
        assertEmptyMatch("??????? ??????? ????????");
        assertEmptyMatch("???????? ????????? ??????????? ???????? ? ?? ???????????");
        // adj.v_oru + noun:v_zna (+ verb)
        assertEmptyMatch("????? ????????? ????? ????? ?? ??????");
        assertEmptyMatch("??????? ???????? ????????? ??? ????");
        assertEmptyMatch("????? ?????????? ?????????? ?? ?????? ?????");
        // ?????????? ?????? prep+adj
        assertEmptyMatch("??? ???????? ?? ???????????? ?????");
        assertEmptyMatch("? ????????? ??? ??????? ??????? ?????????");
        assertEmptyMatch("??? ?????? ??? ????????? ?????????");
        assertEmptyMatch("??????? ??? ???????? ??????");
        assertEmptyMatch("??????????? ?? ?????????????????? ??????");
        assertEmptyMatch("?????? ? ?????????? ?????????");
        assertEmptyMatch("???????????? ??? ????????? ????????");
        assertEmptyMatch("???????????? ? ??? ????????? ????????");
        assertEmptyMatch("???????????? ??? ??????????? ????????");
        // TODO: ??????? "??????????? ? ??? ?? ???????? ???????????"
        assertEmptyMatch("?? ??????? ??? ???????????? ??????? ???");
        assertEmptyMatch("????? ? ????????????? ?????? ????????");
        assertEmptyMatch("??????? ?? ???????????????? ???? ? ??????");
        assertEmptyMatch("?????? ???????? ?? ?????????? ?????.");
        assertEmptyMatch("????????? ? ?????????? ?????????");
        assertEmptyMatch("????????? ?? 1999-?? ?????? ???????????????");
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("??? ? ????? ?? ??????????? ???????????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("???????? ?? ???????????? ??????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?????????? ? ?????????? ???????????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("?????? ? ?????????? ?????????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("??????????? ?? ?????????????????? ??????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("??????? ?? ???????? ????????")).length);
        // assertEmptyMatch("?? ??????? ????????????? ??? ????????? ????????");
        // ??? + adj:v_oru + noun:v_rod
        assertEmptyMatch("???????? ???????????????? ??????");
        assertEmptyMatch("???????? ????????? ???????");
        assertEmptyMatch("????? ???????? ??? ????????? ?????????? ?? ??????? ????");
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("???????? ????????????????? ??????")).length);
        Assert.assertEquals(1, rule.match(langTool.getAnalyzedSentence("???????? ????????? ???????")).length);
        // TODO: FN due to ignoring adj.v_oru + noun.*v_naz/zna
        // assertEquals(1, rule.match(langTool.getAnalyzedSentence("???????? ???????????????? ?????")).length);
        // TODO:
        // assertEmptyMatch("???????? ??????????? ?????????? ? ????'???");        // v_rod??
    }

    // we ignore all pronouns now but this may be useful in the future
    @Test
    public void testPronouns() throws IOException {
        // pron
        assertEmptyMatch("??? ?????");
        assertEmptyMatch("????? ??? ???? ?????");
        assertEmptyMatch("??? ????? ??????????");
        assertEmptyMatch("?????? ? ????? ??????????");
        assertEmptyMatch("??????????, ???? ??????");
        assertEmptyMatch("??? ????");
        assertEmptyMatch("????? ??? ??????");
        assertEmptyMatch("?????? ?????? ????");
        // this, that...
        assertEmptyMatch("?? ???? ????");
        assertEmptyMatch("??? ???? ????? ?? ???????");
        assertEmptyMatch("?? ?????????, ????? ?????? ???? ????????");
        assertEmptyMatch("??????? ???? ???????");
        // TODO: turn back on when we can handle pron
        // assertEquals(1, rule.match(langTool.getAnalyzedSentence("?? ????? ?????? ????????")).length);
        // assertEquals(1, rule.match(langTool.getAnalyzedSentence("?? ?????? ???? ??????????")).length);
    }

    @Test
    public void testSpecialChars() throws IOException {
        assertEmptyMatch("\u0437\u0435\u043b\u0435\u043d\u0438\u0439 \u043f\u043e\u0434\u0456\u00ad\u0443\u043c");
        RuleMatch[] matches = rule.match(langTool.getAnalyzedSentence("\u0437\u0435\u043b\u0435\u043d\u0438\u0439 \u043f\u043e\u00ad\u0434\u0456\u043b\u043a\u0430."));
        Assert.assertEquals(1, matches.length);
        matches = rule.match(langTool.getAnalyzedSentence("\u0437\u0435\u00ad\u043b\u0435\u043d\u0438\u0439 \u043f\u043e\u0434\u0456\u043b\u043a\u0430."));
        Assert.assertEquals(1, matches.length);
    }
}

