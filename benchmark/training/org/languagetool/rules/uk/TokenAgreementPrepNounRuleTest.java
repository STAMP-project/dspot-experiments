/**
 * LanguageTool, a natural language style checker
 * Copyright (C) 2013 Andriy Rysin
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301
 * USA
 */
package org.languagetool.rules.uk;


import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.languagetool.AnalyzedSentence;
import org.languagetool.JLanguageTool;
import org.languagetool.rules.RuleMatch;


public class TokenAgreementPrepNounRuleTest {
    private JLanguageTool langTool;

    private TokenAgreementPrepNounRule rule;

    @Test
    public void testRule() throws IOException {
        // correct sentences:
        assertEmptyMatch("??? ???????");
        assertEmptyMatch("??? ????");
        assertEmptyMatch("?? ?????");
        assertEmptyMatch("?? ?? ??????? ????????????????");
        assertEmptyMatch("???? ?????? ??????");
        assertEmptyMatch("? ??????? ??????????? ?????????");
        assertEmptyMatch("????? ???????? ?????");
        assertEmptyMatch("? ????? ??? ?????");
        assertEmptyMatch("?? ??????");
        assertEmptyMatch("? ????????? ??????");
        assertEmptyMatch("???? ????? ???????????? ?????????");
        assertEmptyMatch("??? ??? ?? ????????? ?? ??????");
        assertEmptyMatch("???? ? ??????????");
        assertEmptyMatch("???? ???? ????");
        assertEmptyMatch("?? ?? ???? ?? ??????");
        assertEmptyMatch("?? ?? ??????");
        assertEmptyMatch("?? ??????????? ?? ??? ???????");
        assertEmptyMatch("?? ????");
        assertEmptyMatch("?? ???");
        assertEmptyMatch("?????? ? ??????????");
        assertEmptyMatch("????? ????????? ???????");
        assertEmptyMatch("?????? ?? ???????? ?????? ????? ????????? ???????");
        assertEmptyMatch("??? ???? ???????? ???????????");
        assertEmptyMatch("?? ???? ??????? ??????? ? ?? ??????...");
        assertEmptyMatch("????????? ?? ??????");
        Assert.assertEquals(1, ruleMatch("??, ?????????? ?????? ??????? ??????").length);
        // TODO:
        assertEmptyMatch("??????? ?? ??????? ?????????");
        // TODO: temporary until we have a better logic
        assertEmptyMatch("??? ?? ?????????????");
        Assert.assertEquals(1, ruleMatch("??? ?? ?????????????").length);
        assertEmptyMatch("????? ?? ????????");
        assertEmptyMatch("?? ?????? ??????");
        assertEmptyMatch("?????????? ? ??????? ???????");
        assertEmptyMatch("??? ????? 1 ?? ???? 1");
        assertEmptyMatch("?? ????? ?????? ????");
        assertEmptyMatch("?? ????? ??????????");
        assertEmptyMatch("????? ????? 10");
        assertEmptyMatch("????? ????? ?? ???");
        assertEmptyMatch("?? ?????? 9-10");
        assertEmptyMatch("????????????? ?? ???? ?????????");
        assertEmptyMatch("????? ???? ?????? ???????");
        assertEmptyMatch("????? ?????? ?? ?????? ???????");
        assertEmptyMatch("??????? ?? ??? ??????? ??? ???????");
        assertEmptyMatch("??? ? ?? ?");
        assertEmptyMatch("?? ?? ?????");
        assertEmptyMatch("?? ???? ?????");
        assertEmptyMatch("? ???? ?? ??????, ??? ???? ?? ????");
        assertEmptyMatch("?? ??? ?????? ????????");
        assertEmptyMatch("??????? ?? ??????? ????? ?????????????? ?????????? ?????");
        assertEmptyMatch("???? ??????? ?????? ??????? ????");
        assertEmptyMatch("??? ??? ???? ??? ??????????");
        assertEmptyMatch("?? ?? ???? ??????? ?????? ??? ?? ??????????");
        // assertEmptyMatch("????? ??? ?????? ?? ????");  // ???????? ??? ??? ? ?? ????? ????????????? ??? ????? ??????? ????? ?????? ???????
        // assertEmptyMatch("?? ? ?????? ?????")).length); //TODO
        // assertEmptyMatch("?? ? ?????? ?????")).length);
        // assertEmptyMatch("?? ? ????? ?????")).length);
        // incorrect sentences:
        RuleMatch[] matches = ruleMatch("??? ????");
        // check match positions:
        Assert.assertEquals(1, matches.length);
        Assert.assertEquals(Arrays.asList("????"), matches[0].getSuggestedReplacements());
        Assert.assertTrue(("?? ??????? ?????????: " + (matches[0].getMessage())), matches[0].getMessage().contains("???????"));
        matches = ruleMatch("?? ? ??????? ????? ????? ?????????, ???????????? ?????????");
        Assert.assertEquals(1, matches.length);
        matches = ruleMatch("?? ??????");
        // check match positions:
        Assert.assertEquals(1, matches.length);
        Assert.assertEquals(3, matches[0].getFromPos());
        Assert.assertEquals(9, matches[0].getToPos());
        Assert.assertEquals(Arrays.asList("??????", "?????"), matches[0].getSuggestedReplacements());
        Assert.assertEquals(1, ruleMatch("? ?'????? ?????").length);
        Assert.assertEquals(1, ruleMatch("? ????? ?'????? ?????").length);
        AnalyzedSentence analyzedSentence = langTool.getAnalyzedSentence("??????? ?? ?????? ??????");
        RuleMatch[] match = rule.match(analyzedSentence);
        Assert.assertEquals(1, match.length);
        List<String> suggestedReplacements = match[0].getSuggestedReplacements();
        Assert.assertTrue(("Did not find ???????: " + suggestedReplacements), suggestedReplacements.contains("?????"));
        analyzedSentence = langTool.getAnalyzedSentence("? ???????!");
        match = rule.match(analyzedSentence);
        Assert.assertEquals(1, match.length);
        suggestedReplacements = match[0].getSuggestedReplacements();
        Assert.assertTrue(("Did not find ??????? ?????????: " + suggestedReplacements), suggestedReplacements.contains("???????"));
        matches = ruleMatch("?? ????????? ???????");
        // check match positions:
        Assert.assertEquals(1, matches.length);
        List<String> replacements = matches[0].getSuggestedReplacements();
        Assert.assertTrue(("Not found ????????? among: " + replacements), replacements.contains("?????????"));
        // ?????
        assertEmptyMatch("?? ??????");
        assertEmptyMatch("?? ??????");
        // ??????
        assertEmptyMatch("?? ??????");
        assertEmptyMatch("?? ???????????");
        assertEmptyMatch("?? ??????");
        assertEmptyMatch("?? ??????????");
        // invert
        assertEmptyMatch("?? ?? ????? ???????");
        // ??'?, ????????
        assertEmptyMatch("?????? ??'? ?? ???? ????");
        assertEmptyMatch("?? ?????? ???????? ???????? ?? ??????? ?????????? i ????? ????????.");
        // assertEmptyMatch("??????? ???? ????????????? ?? ??????? ????????????.");
        assertEmptyMatch("? ?????? ???? ?? ????? ????? ??????? ??????? ???????? ? ????????? ????.");
        // assertEmptyMatch("??????? ? ? 20 ?? 20-?");
        // assertEmptyMatch("????? ?????? ??? 84-? ?? 104 ???????");
        assertEmptyMatch("?? ???????? ?????????? ????? ??????????");
        // TODO:
        // assertEmptyMatch("??? ????????????? ??? ???-??????? ????-???????.");
        matches = ruleMatch("????????? ?? ???????? ??????? ????????");
        Assert.assertEquals(1, matches.length);
        matches = ruleMatch("??? ????? ???????? ?? ??????????? ???????");
        Assert.assertEquals(1, matches.length);
        matches = ruleMatch("?????? ? ?????????");
        Assert.assertEquals(1, matches.length);
        matches = ruleMatch("???????????? ? ?? ??????????");
        Assert.assertEquals(1, matches.length);
        // matches = ruleMatch("?????? ? ???????");
        // System.out.println(langTool.getAnalyzedSentence("?????? ? ???????"));
        // // check match positions:
        // assertEquals(1, matches.length);
        matches = ruleMatch("? ???? ??????? ????.");
        Assert.assertEquals(1, matches.length);
        matches = ruleMatch("  ? ???? ??????? ????.");
        Assert.assertEquals(1, matches.length);
        matches = ruleMatch("? ?? ?? ???? ??????? ?????.");
        Assert.assertEquals(1, matches.length);
        matches = ruleMatch("????? ?? ???, ??");
        Assert.assertEquals(1, matches.length);
        assertEmptyMatch("????????? ? ?? ?");
        matches = ruleMatch("? ? ??? ????, ??????? ??!");
        Assert.assertEquals(1, matches.length);
        // matches = ruleMatch("?? ????: ? ????????? ?????? ???? ???????? ??? ?????? ??????");
        // assertEquals(1, matches.length);
    }

    @Test
    public void testRuleFlexibleOrder() throws IOException {
        Assert.assertEquals(1, ruleMatch("?? ????? ????????? ???????").length);
        // we ignore adv, otherwise logic gets too complicated
        // assertEquals(1, ruleMatch("?? ?????? ????????? ???????").length);
        assertEmptyMatch("????????? ?? ???????? ??????? ???????");
        assertEmptyMatch("?? ????????? ??????? ????");
        assertEmptyMatch("??? ??????? ???? ????????");
        assertEmptyMatch("?? ???? ?? ??????? ??????");
        Assert.assertEquals(1, ruleMatch("?? ???? ?? ??????? ??????").length);
        assertEmptyMatch("??? ???? ???????? ?????");
        assertEmptyMatch("??????? ???? ??? ????? ???????");
        assertEmptyMatch("?? ????? ????????? ???");
        assertEmptyMatch("???? ?? ???? ???? ???????????");
        // TODO:
        // assertEmptyMatch("?? ????? ?? ?? ????????");
        Assert.assertEquals(1, ruleMatch("??????? ?? ??????? ????? ?????????????? ?????????? ?????").length);
        Assert.assertEquals(1, ruleMatch("?? ??? ??? ???? ?????? ????").length);
        assertEmptyMatch("??? ???? ? ??? ???? ????????");
        Assert.assertEquals(1, ruleMatch("? ???? ????????? ??????").length);
        assertEmptyMatch("?? ?? ????? ? ???? ????????? ???????");
        assertEmptyMatch("? ???????? ?? ??????? ?? ??? ?? ????????");
    }

    @Test
    public void testSpecialChars() throws IOException {
        assertEmptyMatch("\u0434\u043e \u0457\u043c \u043f\u043e\u0434\u0456\u00ad\u0431\u043d\u0438\u0445");
        RuleMatch[] matches = ruleMatch("\u043e \u0441\u043f\u0440\u0430\u0432\u0435\u0434\u043b\u0438\u00ad\u0432\u043e\u0441\u0442\u0438.");
        Assert.assertEquals(1, matches.length);
        matches = ruleMatch("\u043f\u043e \u043d\u0435\u0301\u0440\u0432\u0430\u043c, \u043f\u043e \u043c\u043e\u00ad\u0441\u0442\u0430\u043c, \u043f\u043e \u0432\u043e\u0440\u043e\u0442\u0430\u043c");
        // check match positions:
        Assert.assertEquals(3, matches.length);
        Assert.assertEquals(3, matches[0].getFromPos());
        Assert.assertEquals(10, matches[0].getToPos());
        Assert.assertEquals(Arrays.asList("??????", "?????"), matches[0].getSuggestedReplacements());
        // assertEquals(3, matches[1].getFromPos());
        Assert.assertEquals(15, matches[1].getFromPos());
        Assert.assertEquals(Arrays.asList("??????", "?????"), matches[1].getSuggestedReplacements());
        // assertEquals(1, matches[1].getFromPos());
        Assert.assertEquals(27, matches[2].getFromPos());
        Assert.assertEquals(Arrays.asList("???????", "???????", "??????"), matches[2].getSuggestedReplacements());
    }

    @Test
    public void testUnusualCharacters() throws IOException {
        String txt = "\u043e \u0441\u0442\u0456\u043d\u00ad\n\u043a\u0443";
        RuleMatch[] matches = ruleMatch(txt);
        Assert.assertEquals(0, matches.length);
    }
}

