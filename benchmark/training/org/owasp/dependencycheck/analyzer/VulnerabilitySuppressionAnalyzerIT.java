/**
 * This file is part of dependency-check-core.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Copyright (c) 2014 Jeremy Long. All Rights Reserved.
 */
package org.owasp.dependencycheck.analyzer;


import Settings.KEYS.ANALYZER_CENTRAL_ENABLED;
import Settings.KEYS.ANALYZER_NEXUS_ENABLED;
import Settings.KEYS.AUTO_UPDATE;
import Settings.KEYS.SUPPRESSION_FILE;
import java.io.File;
import org.junit.Assert;
import org.junit.Test;
import org.owasp.dependencycheck.BaseDBTestCase;
import org.owasp.dependencycheck.BaseTest;
import org.owasp.dependencycheck.Engine;
import org.owasp.dependencycheck.dependency.Dependency;

import static AnalysisPhase.POST_FINDING_ANALYSIS;


/**
 * Testing the vulnerability suppression analyzer.
 *
 * @author Jeremy Long
 */
public class VulnerabilitySuppressionAnalyzerIT extends BaseDBTestCase {
    /**
     * Test of getName method, of class VulnerabilitySuppressionAnalyzer.
     */
    @Test
    public void testGetName() {
        VulnerabilitySuppressionAnalyzer instance = new VulnerabilitySuppressionAnalyzer();
        instance.initialize(getSettings());
        String expResult = "Vulnerability Suppression Analyzer";
        String result = instance.getName();
        Assert.assertEquals(expResult, result);
    }

    /**
     * Test of getAnalysisPhase method, of class
     * VulnerabilitySuppressionAnalyzer.
     */
    @Test
    public void testGetAnalysisPhase() {
        VulnerabilitySuppressionAnalyzer instance = new VulnerabilitySuppressionAnalyzer();
        instance.initialize(getSettings());
        AnalysisPhase expResult = POST_FINDING_ANALYSIS;
        AnalysisPhase result = instance.getAnalysisPhase();
        Assert.assertEquals(expResult, result);
    }

    /**
     * Test of analyze method, of class VulnerabilitySuppressionAnalyzer.
     */
    @Test
    public void testAnalyze() throws Exception {
        // File file = new File(this.getClass().getClassLoader().getResource("commons-fileupload-1.2.1.jar").getPath());
        File file = BaseTest.getResourceAsFile(this, "commons-fileupload-1.2.1.jar");
        // File suppression = new File(this.getClass().getClassLoader().getResource("commons-fileupload-1.2.1.suppression.xml").getPath());
        File suppression = BaseTest.getResourceAsFile(this, "commons-fileupload-1.2.1.suppression.xml");
        getSettings().setBoolean(AUTO_UPDATE, false);
        getSettings().setBoolean(ANALYZER_NEXUS_ENABLED, false);
        getSettings().setBoolean(ANALYZER_CENTRAL_ENABLED, false);
        try (Engine engine = new Engine(getSettings())) {
            engine.scan(file);
            engine.analyzeDependencies();
            Dependency dependency = getDependency(engine, file);
            int cveSize = dependency.getVulnerabilities().size();
            int cpeSize = dependency.getVulnerableSoftwareIdentifiers().size();
            Assert.assertTrue((cveSize > 0));
            Assert.assertTrue((cpeSize > 0));
            getSettings().setString(SUPPRESSION_FILE, suppression.getAbsolutePath());
            VulnerabilitySuppressionAnalyzer instance = new VulnerabilitySuppressionAnalyzer();
            instance.initialize(getSettings());
            instance.prepare(engine);
            instance.analyze(dependency, engine);
            cveSize -= 1;
            cpeSize -= 1;
            Assert.assertEquals(cveSize, dependency.getVulnerabilities().size());
            Assert.assertEquals(cpeSize, dependency.getVulnerableSoftwareIdentifiers().size());
        }
    }
}

