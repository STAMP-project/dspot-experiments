/**
 * *****************************************************************************
 * Copyright (c) 2015-2018 Skymind, Inc.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Apache License, Version 2.0 which is available at
 * https://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * ****************************************************************************
 */
package org.nd4j.jita.allocator.impl;


import AllocationStatus.DEVICE;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Arrays;
import java.util.Random;
import java.util.concurrent.atomic.AtomicLong;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import org.nd4j.jita.allocator.utils.AllocationUtils;
import org.nd4j.linalg.api.blas.BlasBufferUtil;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.factory.BlasWrapper;
import org.nd4j.linalg.factory.Nd4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * PLEASE NOTE: THIS TEST SHOULD BE USED ONLY MANUALLY WITH EXISTENT GPU/GPUS
 *
 * @author raver119@gmail.com
 */
@Ignore
public class AtomicAllocatorTest {
    private static AtomicAllocator allocator;

    private static Logger log = LoggerFactory.getLogger(AtomicAllocatorTest.class);

    @Test
    public void testOnes() throws Exception {
        INDArray array = Nd4j.ones(10);
        Assert.assertEquals(1.0F, array.getFloat(5), 0.001);
    }

    @Test
    public void testScalar1() throws Exception {
        INDArray array = Nd4j.scalar(17.0F);
        // allocator.getPointer(array);
        System.out.println(("Scalar array: " + array));
    }

    @Test
    public void testPinnedScalarDiv() throws Exception {
        // simple way to stop test if we're not on CUDA backend here
        Assert.assertEquals("JcublasLevel1", Nd4j.getBlasWrapper().level1().getClass().getSimpleName());
        // reset to default MemoryStrategy, most probable is Pinned
        INDArray array1 = Nd4j.create(new float[]{ 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F });
        INDArray array2 = Nd4j.create(new float[]{ 2.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F });
        array2.divi(0.5F);
        System.out.println(("Divi result: " + (array2.getFloat(0))));
        Assert.assertEquals(4.0F, array2.getFloat(0), 0.01F);
    }

    @Test
    public void testInit() throws Exception {
        // NativeOps nativeOps = new NativeOps();
        // nativeOps.initializeDevicesAndFunctions();
    }

    @Test
    public void testSerialization1() throws Exception {
        // Nd4j.dtype = DataType.DOUBLE;
        INDArray test = Nd4j.ones(1, 10);
        INDArray[] arr = // Nd4j.ones(5,10).getRow(2)
        new INDArray[]{ Nd4j.ones(1, 10) }// Nd4j.ones(5,10).getRow(2)
        ;
        System.out.println("X1 ---------------------------");
        for (INDArray a : arr) {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            try (ObjectOutputStream oos = new ObjectOutputStream(baos)) {
                oos.writeObject(a);
                oos.flush();
            }
            System.out.println("X2 ---------------------------");
            byte[] bytes = baos.toByteArray();
            ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
            ObjectInputStream ois = new ObjectInputStream(bais);
            System.out.println("X3 ---------------------------");
            INDArray aDeserialized = ((INDArray) (ois.readObject()));
            System.out.println("X4 ---------------------------");
            Assert.assertEquals(test, aDeserialized);
            System.out.println(("Deserialized: " + aDeserialized));
        }
    }

    @Test
    public void testDeserialization2() throws Exception {
        Nd4j.getRandom().setSeed(12345);
        INDArray arr = Nd4j.rand(1, 20);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try (ObjectOutputStream oos = new ObjectOutputStream(baos)) {
            oos.writeObject(arr);
            oos.flush();
        }
        byte[] bytes = baos.toByteArray();
        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
        ObjectInputStream ois = new ObjectInputStream(bais);
        System.out.println("X3 ---------------------------");
        INDArray aDeserialized = ((INDArray) (ois.readObject()));
        Assert.assertEquals(arr, aDeserialized);
        Assert.assertEquals(arr, aDeserialized.dup());
    }

    @Test
    public void testGpuBlas1() throws Exception {
        INDArray array1 = Nd4j.create(new float[]{ 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F });
        INDArray array2 = Nd4j.create(new float[]{});
        double dotWrapped = 0;
        long time1 = 0;
        long time2 = 0;
        long[] exec = new long[100];
        for (int x = 0; x < 10000; x++) {
            time1 = System.nanoTime();
            dotWrapped = Nd4j.getBlasWrapper().dot(array1, array2);
            time2 = System.nanoTime();
            Assert.assertEquals(879.2554931640625, dotWrapped, 0.001);
            if ((x % 500) == 0)
                AtomicAllocatorTest.log.info((("Execution time: [" + (time2 - time1)) + "] ns"));

            // exec[x] = time2 - time1;
        }
        AtomicAllocatorTest.log.info((("SDOT execution time: [" + (time2 - time1)) + "] ns"));
        Assert.assertEquals(879.2554931640625, dotWrapped, 0.001);
    }

    @Test
    public void testGpuBlas2() throws Exception {
        Assert.assertEquals("JcublasLevel1", Nd4j.getBlasWrapper().level1().getClass().getSimpleName());
        INDArray array1 = Nd4j.create(new float[]{});
        INDArray array2 = Nd4j.create(new float[]{});
        // we could use that just to warm up arrays :)
        for (int x = 0; x < 100; x++) {
            Nd4j.getBlasWrapper().dot(array1, array2);
        }
        AtomicAllocatorTest.log.warn(("A: " + (array2.getClass().getSimpleName())));
        long time1 = System.nanoTime();
        Nd4j.getBlasWrapper().axpy(new Float(0.75F), array1, array2);
        long time2 = System.nanoTime();
        AtomicAllocatorTest.log.info((("AXPY execution time: [" + (time2 - time1)) + "] ns"));
        // 3572174 ns average on warm zero copy
        // 471798 ns lowest on device
        Assert.assertEquals(1.7674999237060547, array2.getDouble(0), 1.0E-5);
        System.out.println("X1 --------");
        Assert.assertEquals(1.7674999237060547, array2.getDouble(1), 1.0E-5);
        array1.putScalar(0, 1.15);
        AtomicAllocatorTest.log.info("X2 -------------");
        Assert.assertEquals(1.15F, array1.getFloat(0), 0.001);
        Nd4j.getBlasWrapper().axpy(new Float(0.75F), array1, array2);
        AtomicAllocatorTest.log.info("X3 -------------");
        Assert.assertNotEquals(0, array2.getDouble(0), 1.0E-5);
        Assert.assertNotEquals(1.7574999332427979, array2.getDouble(0), 1.0E-5);
        Assert.assertEquals(2.629999876022339, array2.getDouble(0), 1.0E-5);
        Assert.assertEquals(2.5249998569488525, array2.getDouble(1), 1.0E-5);
    }

    @Test
    public void testGpuBlas3() throws Exception {
        INDArray array1 = Nd4j.create(new float[]{ 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F });
        INDArray array2 = Nd4j.create(new float[]{});
        System.out.println(("Array1 length: " + (array1.length())));
        BlasWrapper blasWrapper = Nd4j.getBlasWrapper();
        // Warmup
        for (int i = 0; i < 500; i++) {
            blasWrapper.axpy(new Float(0.75F), array1, array2);
        }
        long time1 = System.nanoTime();
        int count = 50000;
        for (int i = 0; i < count; i++) {
            blasWrapper.axpy(new Float(0.75F), array1, array2);
        }
        long time2 = System.nanoTime();
        System.out.println((("Average Execution time: [" + ((time2 - time1) / count)) + "] ns"));
    }

    @Test
    public void testGpuBlas4() throws Exception {
        INDArray array1 = Nd4j.create(new float[]{});
        // Warmup
        for (int i = 0; i < 50000; i++) {
            BlasBufferUtil.getBlasStride(array1);
        }
        long time1 = System.nanoTime();
        int count = 50000;
        for (int i = 0; i < count; i++) {
            BlasBufferUtil.getBlasStride(array1);
        }
        long time2 = System.nanoTime();
        System.out.println((("Average Execution time: [" + ((time2 - time1) / count)) + "] ns"));
    }

    @Test
    public void testGpuBlas5() throws Exception {
        INDArray array1 = Nd4j.ones(((1024 * 1024) * 28));// Nd4j.ones(877334528/3); //

        AtomicAllocatorTest.log.info(("Big array size: " + (array1.length())));
        Assert.assertEquals(1.0F, array1.getFloat(10292443), 1.0E-4F);
    }

    @Test
    public void testGpuBlas7() throws Exception {
        INDArray nd = Nd4j.create(2, 2);
        AllocationPoint point = AtomicAllocator.getInstance().getAllocationPoint(nd.data().getTrackingPoint());
        Assert.assertEquals(DEVICE, point.getAllocationStatus());
    }

    @Test
    public void testGpuVariance() throws Exception {
        INDArray twoByThree = Nd4j.linspace(1, 4, 4).reshape(2, 2);
        INDArray columnVar = twoByThree.var(true, 0);
        INDArray assertion = Nd4j.create(new double[]{ 2, 2 });
        Assert.assertEquals(assertion, columnVar);
    }

    @Test
    public void testGpuBlas6akaPartialAllocationsTest() throws Exception {
        Assert.assertEquals("JcublasLevel1", Nd4j.getBlasWrapper().level1().getClass().getSimpleName());
        Random rnd = new Random(42);
        int trackingBefore = AtomicAllocatorTest.allocator.getTotalTrackingPoints();
        int zeroBefore = ((int) (AtomicAllocatorTest.allocator.getMemoryHandler().getAllocatedHostObjects()));
        INDArray array1 = Nd4j.create(100, 757);
        INDArray array2 = Nd4j.create(100, 757);
        for (int y = 0; y < (array1.rows()); y++) {
            float[] srcArray1 = new float[757];
            float[] srcArray2 = new float[757];
            for (int x = 0; x < (srcArray1.length); x++) {
                srcArray1[x] = rnd.nextFloat();
                srcArray2[x] = rnd.nextFloat();
            }
            INDArray arrayX = Nd4j.create(srcArray1);
            array1.putRow(y, arrayX);
            array2.putRow(y, Nd4j.create(srcArray2));
            INDArray slice1 = array1.slice(y);
            // log.info("X3: " + arrayX.getDouble(3));
            Assert.assertEquals(arrayX.getDouble(3), slice1.getDouble(3), 1.0E-5);
            // log.info("Cycles passed: " + (y + 1));
            // assertTrue(y < 2);
        }
        // + 200 comes from fact, that putRow being called, accesses row on buffer level, triggering array registration
        // however as we can see, they do not get allocated
        // assertEquals(trackingBefore + 2 + 200, allocator.getTotalTrackingPoints());
        // assertEquals(zeroBefore, allocator.getMemoryHandler().getAllocatedHostObjects());
        /* for (int x = 0; x < 20; x++) {
        ((BaseCudaDataBuffer) array1.data()).getPointer(array1.elementWiseStride(), array1.offset(), array1.length());

        allocator.tackDevice((BaseCudaDataBuffer) array1.data(), AllocationUtils.buildAllocationShape(array1));
        }
        assertEquals(1, allocator.getTotalZeroAllocations());

        for (int x = 0; x < 20; x++) {
        ((BaseCudaDataBuffer) array2.data()).getPointer(array2.elementWiseStride(), array2.offset(), array2.length());

        allocator.tackDevice((BaseCudaDataBuffer) array2.data(), AllocationUtils.buildAllocationShape(array2));
        }

        assertEquals(2, allocator.getTotalZeroAllocations());
         */
        // assertEquals(AllocationStatus.UNDEFINED, ((BaseCudaDataBuffer) array1.data()).getAllocationPoint().getAllocationStatus());
        AtomicAllocatorTest.log.info(("Original shape: " + (AllocationUtils.buildAllocationShape(array1))));
        INDArray slice1 = array1.slice(10);
        INDArray slice2 = array2.slice(10);
        INDArray slice3 = slice1.slice(0);
        AtomicAllocatorTest.log.info(("slice1 offset: " + (slice1.offset())));
        AtomicAllocatorTest.log.info(("slice3 offset: " + (slice3.offset())));
        AtomicAllocatorTest.log.info(("slice3 length: " + (slice3.length())));
        Assert.assertNotEquals(0, slice1.offset());
        Assert.assertEquals(null, array1.data().underlyingDataBuffer().underlyingDataBuffer());
        Assert.assertTrue(((slice1.data().originalDataBuffer()) == (array1.data().originalDataBuffer())));
        Assert.assertNotEquals(null, slice1.data().originalDataBuffer());
        Assert.assertTrue(((slice2.data().underlyingDataBuffer()) == (array2.data())));
        double[] results = new double[]{ 196.73057556152344, 187.9628448486328, 185.44927978515625, 195.71868896484375, 201.3914031982422, 206.9940948486328, 186.59426879882812, 178.36427307128906, 188.29483032226562, 183.08912658691406, 193.56333923339844, 189.89263916015625, 189.0192108154297, 193.63824462890625, 201.99197387695312, 187.71295166015625, 197.52166748046875, 180.9663848876953, 189.44374084472656, 186.75148010253906 };
        for (int x = 0; x < 20; x++) {
            slice1 = array1.slice(x);
            slice2 = array2.slice(x);
            double dotWrapped = Nd4j.getBlasWrapper().dot(slice1, slice2);
            AtomicAllocatorTest.log.info(("Offset: " + (slice1.offset())));
            Assert.assertEquals(results[x], dotWrapped, 0.001);
            AtomicAllocatorTest.log.info(((("Cycle [" + x) + "] passed. Dot: ") + dotWrapped));
        }
        // + 200 comes from fact, that putRow being called, accesses row on buffer level, triggering array registration
        // however as we can see, they do not get allocated
        // assertEquals(trackingBefore + 2 + 200, allocator.getTotalTrackingPoints());
        // assertEquals(zeroBefore + 2, allocator.getMemoryHandler().getAllocatedHostObjects());
        AtomicAllocatorTest.log.info(("Slice shape: " + (AllocationUtils.buildAllocationShape(slice1))));
        AllocationPoint point = AtomicAllocatorTest.allocator.getAllocationPoint(array1.data().originalDataBuffer().getTrackingPoint());
        Assert.assertEquals(DEVICE, point.getAllocationStatus());
    }

    @Test
    public void testGpuBlas7akaMultipleThreadsMultipleDevicesDifferentData() throws Exception {
        AtomicAllocatorTest.GpuThreadInternalData[] threads = new AtomicAllocatorTest.GpuThreadInternalData[4];
        for (int x = 0; x < (threads.length); x++) {
            AtomicAllocatorTest.GpuThreadInternalData thread = new AtomicAllocatorTest.GpuThreadInternalData();
            thread.start();
            threads[x] = thread;
        }
        for (int x = 0; x < (threads.length); x++) {
            threads[x].join();
        }
        AtomicAllocatorTest.log.info("Finished");
    }

    @Test
    public void testGpuBlas8akaMultipleThreadsMultipleDevicesSameData() throws Exception {
        Random rnd = new Random(42);
        INDArray array1 = Nd4j.create(100, 757);
        INDArray array2 = Nd4j.create(100, 757);
        for (int y = 0; y < (array1.rows()); y++) {
            float[] srcArray1 = new float[757];
            float[] srcArray2 = new float[757];
            for (int x = 0; x < (srcArray1.length); x++) {
                srcArray1[x] = rnd.nextFloat();
                srcArray2[x] = rnd.nextFloat();
            }
            array1.putRow(y, Nd4j.create(srcArray1));
            array2.putRow(y, Nd4j.create(srcArray2));
        }
        AtomicAllocatorTest.GpuThreadExternalData[] threads = new AtomicAllocatorTest.GpuThreadExternalData[4];
        for (int x = 0; x < (threads.length); x++) {
            AtomicAllocatorTest.GpuThreadExternalData thread = new AtomicAllocatorTest.GpuThreadExternalData(array1, array2);
            thread.start();
            threads[x] = thread;
        }
        for (int x = 0; x < (threads.length); x++) {
            threads[x].join();
        }
        AtomicAllocatorTest.log.info("Finished");
    }

    /**
     * This test addresses original offsets tracking.
     *
     * @throws Exception
     * 		
     */
    @Test
    public void testINDArrayOffsets1() throws Exception {
        INDArray array = Nd4j.create(10, 10, 10);
        System.out.println("");
        System.out.println("");
        System.out.println("Slice1 init");
        INDArray slice1 = array.slice(1);
        System.out.println("");
        AtomicAllocatorTest.log.info(("Slice1 shape: " + (Arrays.toString(slice1.shape()))));
        AtomicAllocatorTest.log.info(("Slice1 offset: " + (slice1.offset())));
        AtomicAllocatorTest.log.info(("Slice1 original offset: " + (slice1.originalOffset())));
        System.out.println("");
        System.out.println("");
        System.out.println("Slice2 init");
        INDArray slice2 = slice1.slice(0);
        System.out.println("");
        AtomicAllocatorTest.log.info(("Slice2 shape: " + (Arrays.toString(slice2.shape()))));
        AtomicAllocatorTest.log.info(("Slice2 offset: " + (slice2.offset())));
        AtomicAllocatorTest.log.info(("Slice2 original offset: " + (slice2.originalOffset())));
        System.out.println("");
        System.out.println("");
        System.out.println("Slice3 init");
        INDArray slice3 = slice1.slice(1);
        System.out.println("");
        AtomicAllocatorTest.log.info(("Slice3 shape: " + (Arrays.toString(slice3.shape()))));
        AtomicAllocatorTest.log.info(("Slice3 offset: " + (slice3.offset())));
        AtomicAllocatorTest.log.info(("Slice3 original offset: " + (slice3.originalOffset())));
        Assert.assertEquals(100, slice1.originalOffset());
        Assert.assertEquals(100, slice2.originalOffset());
        Assert.assertEquals(110, slice3.originalOffset());
    }

    @Test
    public void testINDArrayOffsets2() throws Exception {
        INDArray array = Nd4j.linspace(0, 24, 25).reshape(5, 5);
        Assert.assertEquals(6.0F, array.getFloat(6), 0.01F);
        INDArray slice1 = array.slice(3);
        Assert.assertEquals(15.0F, slice1.getFloat(0), 0.01F);
        Assert.assertEquals(array.data().getTrackingPoint(), slice1.data().getTrackingPoint());
    }

    private class GpuThreadInternalData extends Thread implements Runnable {
        @Override
        public void run() {
            AtomicAllocatorTest.log.info(((((((this.getName()) + "/") + (this.getId())) + " started on device [") + (AtomicAllocator.getInstance().getDeviceId())) + "]"));
            Random rnd = new Random(42);
            INDArray array1 = Nd4j.create(100, 757);
            INDArray array2 = Nd4j.create(100, 757);
            for (int y = 0; y < (array1.rows()); y++) {
                float[] srcArray1 = new float[757];
                float[] srcArray2 = new float[757];
                for (int x = 0; x < (srcArray1.length); x++) {
                    srcArray1[x] = rnd.nextFloat();
                    srcArray2[x] = rnd.nextFloat();
                }
                array1.putRow(y, Nd4j.create(srcArray1));
                array2.putRow(y, Nd4j.create(srcArray2));
            }
            double[] results = new double[]{ 196.73057556152344, 187.9628448486328, 185.44927978515625, 195.71868896484375, 201.3914031982422, 206.9940948486328, 186.59426879882812, 178.36427307128906, 188.29483032226562, 183.08912658691406, 193.56333923339844, 189.89263916015625, 189.0192108154297, 193.63824462890625, 201.99197387695312, 187.71295166015625, 197.52166748046875, 180.9663848876953, 189.44374084472656, 186.75148010253906 };
            INDArray slice1 = null;
            INDArray slice2 = null;
            long time1 = 0;
            long time2 = 0;
            int cnt = 0;
            for (int i = 0; i < 100; i++) {
                for (int x = 0; x < 20; x++) {
                    slice1 = array1.slice(x);
                    slice2 = array2.slice(x);
                    time1 = System.nanoTime();
                    double dotWrapped = Nd4j.getBlasWrapper().dot(slice1, slice2);
                    time2 = System.nanoTime();
                    Assert.assertEquals(results[x], dotWrapped, 0.001);
                    // log.info("Cycle [" + x + "] passed. Dot: " + dotWrapped);
                    cnt++;
                }
            }
            AtomicAllocatorTest.log.info((((("Data deviceId: [" + (AtomicAllocatorTest.allocator.getDeviceId(slice1))) + "]; Last time: [") + (time2 - time1)) + "] ns"));
        }
    }

    private class GpuThreadExternalData extends Thread implements Runnable {
        private INDArray array1;

        private INDArray array2;

        public GpuThreadExternalData(INDArray array1, INDArray array2) {
            this.array1 = array1;
            this.array2 = array2;
        }

        @Override
        public void run() {
            /*  */
            AtomicAllocatorTest.log.info(((((((this.getName()) + "/") + (this.getId())) + " started on device [") + (AtomicAllocator.getInstance().getDeviceId())) + "]"));
            double[] results = new double[]{ 196.73057556152344, 187.9628448486328, 185.44927978515625, 195.71868896484375, 201.3914031982422, 206.9940948486328, 186.59426879882812, 178.36427307128906, 188.29483032226562, 183.08912658691406, 193.56333923339844, 189.89263916015625, 189.0192108154297, 193.63824462890625, 201.99197387695312, 187.71295166015625, 197.52166748046875, 180.9663848876953, 189.44374084472656, 186.75148010253906 };
            INDArray slice1 = null;
            INDArray slice2 = null;
            long time1 = 0;
            long time2 = 0;
            int cnt = 0;
            for (int i = 0; i < 100; i++) {
                for (int x = 0; x < 20; x++) {
                    slice1 = array1.slice(x);
                    slice2 = array2.slice(x);
                    time1 = System.nanoTime();
                    double dotWrapped = Nd4j.getBlasWrapper().dot(slice1, slice2);
                    time2 = System.nanoTime();
                    Assert.assertEquals(results[x], dotWrapped, 0.001);
                    // log.info("Cycle [" + x + "] passed. Dot: " + dotWrapped);
                    cnt++;
                }
            }
            AtomicAllocatorTest.log.info((((("Data deviceId: [" + (AtomicAllocatorTest.allocator.getDeviceId(slice1))) + "]; Last time: [") + (time2 - time1)) + "] ns"));
        }
    }

    private class GpuThreadOpsBroadcastData extends AtomicAllocatorTest.GpuThreadSyntheticData {
        public GpuThreadOpsBroadcastData(int threadId) {
            super(threadId);
        }

        @Override
        public void run() {
            AtomicAllocatorTest.log.info(((((((this.getName()) + "/") + (this.getId())) + " started on device [") + (AtomicAllocator.getInstance().getDeviceId())) + "]"));
            AtomicLong cnt = new AtomicLong(0);
            AtomicLong cntX = new AtomicLong(0);
            while (true) {
                INDArray array1 = Nd4j.zeros(15, 15);
                INDArray array2 = Nd4j.create(new float[]{ 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F });
                int idx = 0;
                long time1 = 0;
                long time2 = 0;
                for (int x = 0; x < 30; x++) {
                    time1 = System.nanoTime();
                    array1.addiRowVector(array2);
                    time2 = System.nanoTime();
                    cntX.incrementAndGet();
                }
                if (((cnt.incrementAndGet()) % 1000) == 0) {
                    AtomicAllocatorTest.log.info((((("AddiRowVector execution time: [" + (time2 - time1)) + "] ns on device [") + (AtomicAllocatorTest.allocator.getDeviceId(array1))) + "]"));
                    for (int y = 0; y < 15; y++) {
                        for (int x = 0; x < 15; x++) {
                            Assert.assertEquals(60.0F, array1.getRow(y).getFloat(x), 0.01);
                        }
                    }
                    if ((threadId) == 0) {
                        AtomicAllocatorTest.log.info(("Total calls: " + ((cntX.get()) * 4)));
                        AtomicAllocatorTest.log.info(("Total memory allocated on device [0]: " + (AtomicAllocatorTest.allocator.getTotalAllocatedDeviceMemory(0))));
                    }
                    try {
                        Thread.sleep(5000);
                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                }
            } 
        }
    }

    private class GpuThreadOpsIndexReduce3Data extends AtomicAllocatorTest.GpuThreadSyntheticData {
        public GpuThreadOpsIndexReduce3Data(int threadId) {
            super(threadId);
        }

        @Override
        public void run() {
            AtomicAllocatorTest.log.info(((((((this.getName()) + "/") + (this.getId())) + " started on device [") + (AtomicAllocator.getInstance().getDeviceId())) + "]"));
            AtomicLong cnt = new AtomicLong(0);
            AtomicLong cntX = new AtomicLong(0);
            while (true) {
                INDArray array1 = Nd4j.create(new float[]{ 0.0F, 1.0F, 2.0F, 3.0F, 4.0F });
                INDArray array2 = Nd4j.create(new float[]{ 0.5F, 1.5F, 2.5F, 3.5F, 4.5F });
                float result = 0;
                long time1 = 0;
                long time2 = 0;
                for (int x = 0; x < 30; x++) {
                    time1 = System.nanoTime();
                    result = Nd4j.getExecutioner().execAndReturn(new org.nd4j.linalg.api.ops.impl.reduce.distances.ManhattanDistance(array1, array2)).getFinalResult().floatValue();
                    time2 = System.nanoTime();
                    cntX.incrementAndGet();
                }
                if (((cnt.incrementAndGet()) % 1000) == 0) {
                    AtomicAllocatorTest.log.info((((("Reduce3 execution time: [" + (time2 - time1)) + "] ns on device [") + (AtomicAllocatorTest.allocator.getDeviceId(array1))) + "]"));
                    Assert.assertEquals(2.5, result, 0.001F);
                    if ((threadId) == 0) {
                        AtomicAllocatorTest.log.info(("Total calls: " + ((cntX.get()) * 4)));
                        AtomicAllocatorTest.log.info(("Total memory allocated on device [0]: " + (AtomicAllocatorTest.allocator.getTotalAllocatedDeviceMemory(0))));
                    }
                    try {
                        Thread.sleep(5000);
                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                }
            } 
        }
    }

    private class GpuThreadOpsIndexReduceData extends AtomicAllocatorTest.GpuThreadSyntheticData {
        public GpuThreadOpsIndexReduceData(int threadId) {
            super(threadId);
        }

        @Override
        public void run() {
            AtomicAllocatorTest.log.info(((((((this.getName()) + "/") + (this.getId())) + " started on device [") + (AtomicAllocator.getInstance().getDeviceId())) + "]"));
            AtomicLong cnt = new AtomicLong(0);
            AtomicLong cntX = new AtomicLong(0);
            while (true) {
                INDArray array1 = Nd4j.linspace(1, 1024, 1024);
                int idx = 0;
                long time1 = 0;
                long time2 = 0;
                for (int x = 0; x < 30; x++) {
                    time1 = System.nanoTime();
                    idx = getFinalResult();
                    time2 = System.nanoTime();
                    cntX.incrementAndGet();
                }
                if (((cnt.incrementAndGet()) % 1000) == 0) {
                    AtomicAllocatorTest.log.info((((("IndexReduce execution time: [" + (time2 - time1)) + "] ns on device [") + (AtomicAllocatorTest.allocator.getDeviceId(array1))) + "]"));
                    Assert.assertEquals(1023, idx);
                    if ((threadId) == 0) {
                        AtomicAllocatorTest.log.info(("Total calls: " + ((cntX.get()) * 4)));
                        AtomicAllocatorTest.log.info(("Total memory allocated on device [0]: " + (AtomicAllocatorTest.allocator.getTotalAllocatedDeviceMemory(0))));
                    }
                    try {
                        Thread.sleep(5000);
                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                }
            } 
        }
    }

    private class GpuThreadOpsTransformData extends AtomicAllocatorTest.GpuThreadSyntheticData {
        public GpuThreadOpsTransformData(int threadId) {
            super(threadId);
        }

        @Override
        public void run() {
            AtomicAllocatorTest.log.info(((((((this.getName()) + "/") + (this.getId())) + " started on device [") + (AtomicAllocator.getInstance().getDeviceId())) + "]"));
            AtomicLong cnt = new AtomicLong(0);
            AtomicLong cntX = new AtomicLong(0);
            while (true) {
                INDArray array1 = Nd4j.create(new float[]{});
                INDArray array2 = Nd4j.create(new float[]{});
                long time1 = 0;
                long time2 = 0;
                for (int x = 0; x < 30; x++) {
                    time1 = System.nanoTime();
                    Nd4j.getExecutioner().exec(new org.nd4j.linalg.api.ops.impl.transforms.Abs(array1, array2));
                    time2 = System.nanoTime();
                    cntX.incrementAndGet();
                }
                if (((cnt.incrementAndGet()) % 1000) == 0) {
                    AtomicAllocatorTest.log.info((((("Abs execution time: [" + (time2 - time1)) + "] ns on device [") + (AtomicAllocatorTest.allocator.getDeviceId(array1))) + "]"));
                    Assert.assertEquals(1.01F, array2.getFloat(0), 0.01);
                    if ((threadId) == 0) {
                        AtomicAllocatorTest.log.info(("Total calls: " + ((cntX.get()) * 4)));
                        AtomicAllocatorTest.log.info(("Total memory allocated on device [0]: " + (AtomicAllocatorTest.allocator.getTotalAllocatedDeviceMemory(0))));
                    }
                    try {
                        Thread.sleep(5000);
                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                }
            } 
        }
    }

    private class GpuThreadOpsPairwiseData extends AtomicAllocatorTest.GpuThreadSyntheticData {
        public GpuThreadOpsPairwiseData(int threadId) {
            super(threadId);
        }

        @Override
        public void run() {
            AtomicAllocatorTest.log.info(((((((this.getName()) + "/") + (this.getId())) + " started on device [") + (AtomicAllocator.getInstance().getDeviceId())) + "]"));
            AtomicLong cnt = new AtomicLong(0);
            AtomicLong cntX = new AtomicLong(0);
            while (true) {
                INDArray array1 = Nd4j.create(new float[]{ 1.5F, 1.5F, 1.5F, 1.5F, 1.5F, 1.5F, 1.5F, 1.5F, 1.5F, 1.5F, 1.5F, 1.5F, 1.5F, 1.5F, 1.5F });
                INDArray array2 = Nd4j.create(new float[]{ 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F });
                long time1 = 0;
                long time2 = 0;
                for (int x = 0; x < 30; x++) {
                    time1 = System.nanoTime();
                    array1.rdiviRowVector(array2);
                    time2 = System.nanoTime();
                    cntX.incrementAndGet();
                }
                if (((cnt.incrementAndGet()) % 100) == 0) {
                    AtomicAllocatorTest.log.info((((("rDivi execution time: [" + (time2 - time1)) + "] ns on device [") + (AtomicAllocatorTest.allocator.getDeviceId(array1))) + "]"));
                    Assert.assertEquals(1.5F, array1.getRow(0).getFloat(0), 0.01);
                    if ((threadId) == 0) {
                        AtomicAllocatorTest.log.info(("Total calls: " + ((cntX.get()) * 4)));
                        AtomicAllocatorTest.log.info(("Total memory allocated on device [0]: " + (AtomicAllocatorTest.allocator.getTotalAllocatedDeviceMemory(0))));
                    }
                    try {
                        Thread.sleep(1000);
                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                }
            } 
        }
    }

    private class GpuThreadOpsReduceData2 extends AtomicAllocatorTest.GpuThreadSyntheticData {
        public GpuThreadOpsReduceData2(int threadId) {
            super(threadId);
        }

        @Override
        public void run() {
            AtomicAllocatorTest.log.info(((((((this.getName()) + "/") + (this.getId())) + " started on device [") + (AtomicAllocator.getInstance().getDeviceId())) + "]"));
            AtomicLong cnt = new AtomicLong(0);
            AtomicLong cntX = new AtomicLong(0);
            while (true) {
                Number sum = null;
                INDArray array1 = Nd4j.create(new float[]{ 2.01F, 2.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F, 1.01F });
                long time1 = 0;
                long time2 = 0;
                for (int x = 0; x < 30; x++) {
                    time1 = System.nanoTime();
                    sum = array1.sumNumber();
                    time2 = System.nanoTime();
                    cntX.incrementAndGet();
                }
                if (((cnt.incrementAndGet()) % 1000) == 0) {
                    AtomicAllocatorTest.log.info((((("SUM(-1) execution time: [" + (time2 - time1)) + "] ns on device [") + (AtomicAllocatorTest.allocator.getDeviceId(array1))) + "]"));
                    Assert.assertEquals(17.15F, sum.floatValue(), 0.01F);
                    if ((threadId) == 0) {
                        AtomicAllocatorTest.log.info(("Total calls: " + ((cntX.get()) * 4)));
                        AtomicAllocatorTest.log.info(("Total memory allocated on device [0]: " + (AtomicAllocatorTest.allocator.getTotalAllocatedDeviceMemory(0))));
                    }
                    try {
                        Thread.sleep(5000);
                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                }
            } 
        }
    }

    private class GpuThreadOpsReduceData extends AtomicAllocatorTest.GpuThreadSyntheticData {
        public GpuThreadOpsReduceData(int threadId) {
            super(threadId);
        }

        @Override
        public void run() {
            AtomicAllocatorTest.log.info(((((((this.getName()) + "/") + (this.getId())) + " started on device [") + (AtomicAllocator.getInstance().getDeviceId())) + "]"));
            AtomicLong cnt = new AtomicLong(0);
            AtomicLong cntX = new AtomicLong(0);
            while (true) {
                INDArray sum = null;
                INDArray array1 = Nd4j.create(Nd4j.linspace(1, 8, 8).data(), new int[]{ 2, 2, 2 });
                INDArray array2 = Nd4j.create(new float[]{ 3, 7, 11, 15 }, new int[]{ 2, 2 });
                long time1 = 0;
                long time2 = 0;
                for (int x = 0; x < 30; x++) {
                    time1 = System.nanoTime();
                    sum = array1.sum((-1));
                    time2 = System.nanoTime();
                    cntX.incrementAndGet();
                }
                if (((cnt.incrementAndGet()) % 1000) == 0) {
                    AtomicAllocatorTest.log.info((((("SUM(-1) execution time: [" + (time2 - time1)) + "] ns on device [") + (AtomicAllocatorTest.allocator.getDeviceId(array1))) + "]"));
                    Assert.assertEquals(array2, sum);
                    if ((threadId) == 0) {
                        AtomicAllocatorTest.log.info(("Total calls: " + ((cntX.get()) * 4)));
                        AtomicAllocatorTest.log.info(("Total memory allocated on device [0]: " + (AtomicAllocatorTest.allocator.getTotalAllocatedDeviceMemory(0))));
                    }
                    try {
                        Thread.sleep(5000);
                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                }
            } 
        }
    }

    private class GpuThreadSyntheticData extends Thread implements Runnable {
        protected int threadId;

        public GpuThreadSyntheticData(int threadId) {
            this.threadId = threadId;
            this.setDaemon(true);
        }

        protected float[] arr1 = new float[]{};

        protected float[] arr2 = new float[]{};

        @Override
        public void run() {
            AtomicAllocatorTest.log.info(((((((this.getName()) + "/") + (this.getId())) + " started on device [") + (AtomicAllocator.getInstance().getDeviceId())) + "]"));
            AtomicLong cnt = new AtomicLong(0);
            AtomicLong cntX = new AtomicLong(0);
            while (true) {
                // float[] arr1 = new float[]{1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f};
                INDArray array1 = Nd4j.create(arr1);// Nd4j.create(1000);//Nd4j.create(arr1);

                // DataBuffer buffer = Nd4j.createBuffer(1000);
                INDArray array2 = Nd4j.create(arr2);
                // now we call for those arrays multiple times, to force them to get moved
                long time1 = 0;
                long time2 = 0;
                for (int x = 0; x < 30; x++) {
                    time1 = System.nanoTime();
                    Nd4j.getBlasWrapper().axpy(new Float(0.75F), array1, array2);
                    // allocator.getPointer(array1);
                    time2 = System.nanoTime();
                    cntX.incrementAndGet();
                }
                if (((cnt.incrementAndGet()) % 20000) == 0) {
                    AtomicAllocatorTest.log.info((((("Axpy execution time: [" + (time2 - time1)) + "] ns on device [") + (AtomicAllocatorTest.allocator.getDeviceId())) + "]"));
                    // assertEquals(1.01f, array1.getDouble(0), 0.00001);
                    Assert.assertEquals(23.734994888305664, array2.getDouble(0), 1.0E-5);
                    Assert.assertEquals(23.734994888305664, array2.getDouble(1), 1.0E-5);
                    if ((threadId) == 0) {
                        AtomicAllocatorTest.log.info(("Total calls: " + ((cntX.get()) * 4)));
                        AtomicAllocatorTest.log.info(("Total memory allocated on device [0]: " + (AtomicAllocatorTest.allocator.getTotalAllocatedDeviceMemory(0))));
                    }
                    try {
                        Thread.sleep(70000);
                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                }
            } 
        }
    }
}

