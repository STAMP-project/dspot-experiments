/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.mahout.math;


import com.google.common.base.Charsets;
import java.io.UnsupportedEncodingException;
import org.junit.Assert;
import org.junit.Test;


public class MurmurHashTest extends MahoutTestCase {
    @Test
    public void testForLotsOfChange64() throws UnsupportedEncodingException {
        long h1 = MurmurHash.hash64A("abc".getBytes(Charsets.UTF_8), 0);
        long h2 = MurmurHash.hash64A("abc ".getBytes(Charsets.UTF_8), 0);
        int flipCount = Long.bitCount((h1 ^ h2));
        Assert.assertTrue(("Small changes should result in lots of bit flips, only found " + flipCount), (flipCount > 25));
    }

    @Test
    public void testHash64() {
        // test data generated by running MurmurHash2_64.cpp
        Assert.assertEquals(-7148968302806999301L, MurmurHash.hash64A("abc".getBytes(Charsets.UTF_8), 0));
        Assert.assertEquals(-3258132553591018531L, MurmurHash.hash64A("abc def ghi jkl ".getBytes(Charsets.UTF_8), 0));
        Assert.assertEquals(-3659305164543091524L, MurmurHash.hash64A("abc def ghi jkl moreGoo".getBytes(Charsets.UTF_8), 0));
    }

    @Test
    public void testForLotsOfChange32() throws UnsupportedEncodingException {
        int h1 = MurmurHash.hash("abc".getBytes(Charsets.UTF_8), 0);
        int h2 = MurmurHash.hash("abc ".getBytes(Charsets.UTF_8), 0);
        int flipCount = Integer.bitCount((h1 ^ h2));
        Assert.assertTrue(("Small changes should result in lots of bit flips, only found " + flipCount), (flipCount > 14));
    }

    // tests lifted from http://dmy999.com/article/50/murmurhash-2-java-port
    // code was marked with this notice:
    // released to the public domain - dmy999@gmail.com
    // expected values are generated from the output of a C driver that
    // ran against the same input
    @Test
    public void testChangingSeed() {
        // use a fixed key
        byte[] key = new byte[]{ 78, ((byte) (227)), ((byte) (145)), 0, 16, ((byte) (143)), ((byte) (255)) };
        int[] expected = new int[]{ -285688270, -2130059578, -1699790446, -1044599012, -2112017180, -731983393, 1812158375, 567601221, -90711216, 790201800, 1567193130, 225332101, -405155989, 863923017, -513775292, -859731224 };
        for (int i = 0; i < (expected.length); i++) {
            int expectedHash = expected[i];
            int hash = MurmurHash.hash(key, i);
            Assert.assertEquals(("i = " + i), expectedHash, hash);
        }
    }

    @Test
    public void testChangingKey() {
        byte[] key = new byte[133];
        int[] expected = new int[]{ -683430389, -239836730, -1537577749, -619323389, -2022235740, -1023121935, -77231196, 450859954, -469075663, 1034235312, -1085131503, 519762547, -433536547, -1711061793, -1877173764, 1524738628 };
        for (int i = 0; i < 16; i++) {
            // keep seed constant, generate a known key pattern
            MurmurHashTest.setKey(key, i);
            int expectedHash = expected[i];
            int hash = MurmurHash.hash(key, 305441741);
            Assert.assertEquals(("i = " + i), expectedHash, hash);
        }
    }

    @Test
    public void testChangingKeyLength() {
        int[] expected = new int[]{ -1597558898, 700643710, 13274042, -2009565066, -503067063, 1490508114, -1417347394, -1743438747, -877427851, 1856086667, -1694855339, -74903882, -1793668023, 1678289131, -1156394010, 16479513 };
        // vary the key and the length
        for (int i = 0; i < 16; i++) {
            byte[] key = new byte[i];
            MurmurHashTest.setKey(key, i);
            int expectedHash = expected[i];
            int hash = MurmurHash.hash(key, 2020649727);
            Assert.assertEquals(("i = " + i), expectedHash, hash);
        }
    }
}

