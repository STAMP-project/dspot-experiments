/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.druid.java.util.metrics;


import java.util.ArrayList;
import java.util.List;
import org.apache.druid.java.util.common.logger.Logger;
import org.junit.Assert;
import org.junit.Test;


public class AllocationMetricCollectorTest {
    private static final Logger log = new Logger(AllocationMetricCollectorTest.class);

    private final List<Thread> threads = new ArrayList<>();

    private final int objectHeader64BitSize = 16;

    /**
     * Test a calculated delta is larger than objects size generated by this method.
     *
     * @throws InterruptedException
     * 		
     */
    @SuppressWarnings("OptionalIsPresent")
    @Test
    public void testDelta() throws InterruptedException {
        AllocationMetricCollector collector = AllocationMetricCollectors.getAllocationMetricCollector();
        if (collector == null) {
            return;
        }
        long delta = collector.calculateDelta();
        Assert.assertNotNull(delta);
        Assert.assertTrue((delta > 0));
        AllocationMetricCollectorTest.log.info("First delta: %s", delta);
        int generatedSize2 = generateObjectsConcurrently(1000);
        long delta2 = collector.calculateDelta();
        Assert.assertTrue((delta2 > generatedSize2));
        AllocationMetricCollectorTest.log.info("Second delta: %s", delta2);
        int generatedSize3 = generateObjectsConcurrently(100000);
        long delta3 = collector.calculateDelta();
        Assert.assertTrue((delta3 > generatedSize3));
        AllocationMetricCollectorTest.log.info("Third delta: %s", delta3);
    }
}

