/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Camel Api Route test generated by camel-component-util-maven-plugin
 * Generated on: Wed Jul 09 19:57:11 PDT 2014
 */
package org.apache.camel.component.linkedin;


import java.util.HashMap;
import java.util.Map;
import org.apache.camel.component.linkedin.api.model.Companies;
import org.apache.camel.component.linkedin.api.model.Connections;
import org.apache.camel.component.linkedin.api.model.GroupMemberships;
import org.apache.camel.component.linkedin.api.model.Groups;
import org.apache.camel.component.linkedin.api.model.JobBookmarks;
import org.apache.camel.component.linkedin.api.model.JobSuggestions;
import org.apache.camel.component.linkedin.api.model.NetworkStats;
import org.apache.camel.component.linkedin.api.model.Person;
import org.apache.camel.component.linkedin.api.model.Updates;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * Test class for {@link org.apache.camel.component.linkedin.api.PeopleResource} APIs.
 */
public class PeopleResourceIntegrationTest extends AbstractLinkedInTestSupport {
    private static final Logger LOG = LoggerFactory.getLogger(PeopleResourceIntegrationTest.class);

    private static final String PATH_PREFIX = "people";

    @Test
    public void testGetConnections() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // use defaults
        /* // parameter type is String
        headers.put("CamelLinkedIn.fields", null);
        // parameter type is Boolean
        headers.put("CamelLinkedIn.secure_urls", null);
         */
        final Connections result = requestBodyAndHeaders("direct://GETCONNECTIONS", null, headers);
        assertNotNull("getConnections result", result);
        PeopleResourceIntegrationTest.LOG.debug(("getConnections: " + result));
    }

    @Test
    public void testGetFollowedCompanies() throws Exception {
        // using String message body for single parameter "fields"
        final Companies result = requestBody("direct://GETFOLLOWEDCOMPANIES", "");
        assertNotNull("getFollowedCompanies result", result);
        PeopleResourceIntegrationTest.LOG.debug(("getFollowedCompanies: " + result));
    }

    @Test
    public void testGetGroupMemberships() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // use defaults
        /* // parameter type is org.apache.camel.component.linkedin.api.model.MembershipState
        headers.put("CamelLinkedIn.membership_state", null);
        // parameter type is String
        headers.put("CamelLinkedIn.fields", null);
        // parameter type is Long
        headers.put("CamelLinkedIn.count", null);
        // parameter type is Long
        headers.put("CamelLinkedIn.start", null);
         */
        final GroupMemberships result = requestBodyAndHeaders("direct://GETGROUPMEMBERSHIPS", null, headers);
        assertNotNull("getGroupMemberships result", result);
        PeopleResourceIntegrationTest.LOG.debug(("getGroupMemberships: " + result));
    }

    @Test
    public void testGetJobBookmarks() throws Exception {
        final JobBookmarks result = requestBody("direct://GETJOBBOOKMARKS", null);
        assertNotNull("getJobBookmarks result", result);
        PeopleResourceIntegrationTest.LOG.debug(("getJobBookmarks: " + result));
    }

    @Test
    public void testGetNetworkStats() throws Exception {
        final NetworkStats result = requestBody("direct://GETNETWORKSTATS", null);
        assertNotNull("getNetworkStats result", result);
        PeopleResourceIntegrationTest.LOG.debug(("getNetworkStats: " + result));
    }

    @Test
    public void testGetNetworkUpdates() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // use defaults
        /* // parameter type is String
        headers.put("CamelLinkedIn.scope", null);
        // parameter type is org.apache.camel.component.linkedin.api.Type
        headers.put("CamelLinkedIn.type", null);
        // parameter type is Long
        headers.put("CamelLinkedIn.count", null);
        // parameter type is Long
        headers.put("CamelLinkedIn.start", null);
        // parameter type is Long
        headers.put("CamelLinkedIn.after", null);
        // parameter type is Long
        headers.put("CamelLinkedIn.before", null);
        // parameter type is Boolean
        headers.put("CamelLinkedIn.show_hidden_members", null);
        // parameter type is String
        headers.put("CamelLinkedIn.fields", null);
        // parameter type is Boolean
        headers.put("CamelLinkedIn.secure_urls", null);
         */
        final Updates result = requestBodyAndHeaders("direct://GETNETWORKUPDATES", null, headers);
        assertNotNull("getNetworkUpdates result", result);
        PeopleResourceIntegrationTest.LOG.debug(("getNetworkUpdates: " + result));
    }

    @Test
    public void testGetPerson() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is String
        headers.put("CamelLinkedIn.fields", "");
        // parameter type is Boolean
        headers.put("CamelLinkedIn.secure_urls", true);
        final Person result = requestBodyAndHeaders("direct://GETPERSON", null, headers);
        assertNotNull("getPerson result", result);
        PeopleResourceIntegrationTest.LOG.debug(("getPerson: " + result));
    }

    @Test
    public void testGetSuggestedCompanies() throws Exception {
        // using String message body for single parameter "fields"
        final Companies result = requestBody("direct://GETSUGGESTEDCOMPANIES", "");
        assertNotNull("getSuggestedCompanies result", result);
        PeopleResourceIntegrationTest.LOG.debug(("getSuggestedCompanies: " + result));
    }

    @Test
    public void testGetSuggestedGroups() throws Exception {
        // using String message body for single parameter "fields"
        final Groups result = requestBody("direct://GETSUGGESTEDGROUPS", "");
        assertNotNull("getSuggestedGroups result", result);
        PeopleResourceIntegrationTest.LOG.debug(("getSuggestedGroups: " + result));
    }

    @Test
    public void testGetSuggestedJobs() throws Exception {
        // using String message body for single parameter "fields"
        final JobSuggestions result = requestBody("direct://GETSUGGESTEDJOBS", "");
        assertNotNull("getSuggestedJobs result", result);
        PeopleResourceIntegrationTest.LOG.debug(("getSuggestedJobs: " + result));
    }
}

