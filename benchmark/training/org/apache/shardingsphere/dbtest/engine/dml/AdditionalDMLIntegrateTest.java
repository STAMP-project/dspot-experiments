/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.shardingsphere.dbtest.engine.dml;


import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.ParseException;
import javax.xml.bind.JAXBException;
import org.apache.shardingsphere.core.constant.DatabaseType;
import org.apache.shardingsphere.dbtest.cases.assertion.dml.DMLIntegrateTestCaseAssertion;
import org.apache.shardingsphere.dbtest.env.DatabaseTypeEnvironment;
import org.apache.shardingsphere.dbtest.env.IntegrateTestEnvironment;
import org.apache.shardingsphere.test.sql.SQLCaseType;
import org.junit.Test;


public final class AdditionalDMLIntegrateTest extends BaseDMLIntegrateTest {
    private static IntegrateTestEnvironment integrateTestEnvironment = IntegrateTestEnvironment.getInstance();

    private final DMLIntegrateTestCaseAssertion assertion;

    public AdditionalDMLIntegrateTest(final String sqlCaseId, final String path, final DMLIntegrateTestCaseAssertion assertion, final String shardingRuleType, final DatabaseTypeEnvironment databaseTypeEnvironment, final SQLCaseType caseType) throws IOException, SQLException, ParseException, JAXBException {
        super(sqlCaseId, path, assertion, shardingRuleType, databaseTypeEnvironment, caseType);
        this.assertion = assertion;
    }

    @Test
    public void executeUpdateWithAutoGeneratedKeys() throws IOException, SQLException, ParseException, JAXBException {
        // TODO fix masterslave
        if ((!(getDatabaseTypeEnvironment().isEnabled())) || ("masterslave".equals(getShardingRuleType()))) {
            return;
        }
        int actualUpdateCount;
        try (Connection connection = getDataSource().getConnection()) {
            actualUpdateCount = ((SQLCaseType.Literal) == (getCaseType())) ? executeUpdateForStatementWithAutoGeneratedKeys(connection) : executeUpdateForPreparedStatementWithAutoGeneratedKeys(connection);
        }
        assertDataSet(actualUpdateCount);
    }

    @Test
    public void assertExecuteUpdateWithColumnIndexes() throws IOException, SQLException, ParseException, JAXBException {
        // TODO fix masterslave
        if (((!(getDatabaseTypeEnvironment().isEnabled())) || ((DatabaseType.PostgreSQL) == (getDatabaseTypeEnvironment().getDatabaseType()))) || ("masterslave".equals(getShardingRuleType()))) {
            return;
        }
        int actualUpdateCount;
        try (Connection connection = getDataSource().getConnection()) {
            actualUpdateCount = ((SQLCaseType.Literal) == (getCaseType())) ? executeUpdateForStatementWithColumnIndexes(connection) : executeUpdateForPreparedStatementWithColumnIndexes(connection);
        }
        assertDataSet(actualUpdateCount);
    }

    @Test
    public void assertExecuteUpdateWithColumnNames() throws IOException, SQLException, ParseException, JAXBException {
        // TODO fix masterslave
        if (((!(getDatabaseTypeEnvironment().isEnabled())) || ((DatabaseType.PostgreSQL) == (getDatabaseTypeEnvironment().getDatabaseType()))) || ("masterslave".equals(getShardingRuleType()))) {
            return;
        }
        int actualUpdateCount;
        try (Connection connection = getDataSource().getConnection()) {
            actualUpdateCount = ((SQLCaseType.Literal) == (getCaseType())) ? executeUpdateForStatementWithColumnNames(connection) : executeUpdateForPreparedStatementWithColumnNames(connection);
        }
        assertDataSet(actualUpdateCount);
    }

    @Test
    public void assertExecuteWithoutAutoGeneratedKeys() throws IOException, SQLException, ParseException, JAXBException {
        // TODO fix masterslave
        if ((!(getDatabaseTypeEnvironment().isEnabled())) || ("masterslave".equals(getShardingRuleType()))) {
            return;
        }
        int actualUpdateCount;
        try (Connection connection = getDataSource().getConnection()) {
            actualUpdateCount = ((SQLCaseType.Literal) == (getCaseType())) ? executeForStatementWithoutAutoGeneratedKeys(connection) : executeForPreparedStatementWithoutAutoGeneratedKeys(connection);
        }
        assertDataSet(actualUpdateCount);
    }

    @Test
    public void assertExecuteWithAutoGeneratedKeys() throws IOException, SQLException, ParseException, JAXBException {
        // TODO fix masterslave
        if ((!(getDatabaseTypeEnvironment().isEnabled())) || ("masterslave".equals(getShardingRuleType()))) {
            return;
        }
        int actualUpdateCount;
        try (Connection connection = getDataSource().getConnection()) {
            actualUpdateCount = ((SQLCaseType.Literal) == (getCaseType())) ? executeForStatementWithAutoGeneratedKeys(connection) : executeForPreparedStatementWithAutoGeneratedKeys(connection);
        }
        assertDataSet(actualUpdateCount);
    }

    @Test
    public void assertExecuteWithColumnIndexes() throws IOException, SQLException, ParseException, JAXBException {
        // TODO fix masterslave
        if (((!(getDatabaseTypeEnvironment().isEnabled())) || ((DatabaseType.PostgreSQL) == (getDatabaseTypeEnvironment().getDatabaseType()))) || ("masterslave".equals(getShardingRuleType()))) {
            return;
        }
        int actualUpdateCount;
        try (Connection connection = getDataSource().getConnection()) {
            actualUpdateCount = ((SQLCaseType.Literal) == (getCaseType())) ? executeForStatementWithColumnIndexes(connection) : executeForPreparedStatementWithColumnIndexes(connection);
        }
        assertDataSet(actualUpdateCount);
    }

    @Test
    public void assertExecuteWithColumnNames() throws IOException, SQLException, ParseException, JAXBException {
        // TODO fix masterslave
        if (((!(getDatabaseTypeEnvironment().isEnabled())) || ((DatabaseType.PostgreSQL) == (getDatabaseTypeEnvironment().getDatabaseType()))) || ("masterslave".equals(getShardingRuleType()))) {
            return;
        }
        int actualUpdateCount;
        try (Connection connection = getDataSource().getConnection()) {
            actualUpdateCount = ((SQLCaseType.Literal) == (getCaseType())) ? executeForStatementWithColumnNames(connection) : executeForPreparedStatementWithColumnNames(connection);
        }
        assertDataSet(actualUpdateCount);
    }
}

