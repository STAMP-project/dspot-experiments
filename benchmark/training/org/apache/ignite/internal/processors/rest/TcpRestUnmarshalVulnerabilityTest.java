/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ignite.internal.processors.rest;


import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import org.apache.ignite.IgniteSystemProperties;
import org.apache.ignite.internal.client.marshaller.jdk.GridClientJdkMarshaller;
import org.apache.ignite.internal.processors.rest.client.message.GridClientMessage;
import org.apache.ignite.internal.util.typedef.internal.U;
import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;
import org.junit.Test;


/**
 * Tests for whitelist and blacklist ot avoiding deserialization vulnerability.
 */
public class TcpRestUnmarshalVulnerabilityTest extends GridCommonAbstractTest {
    /**
     * Marshaller.
     */
    private static final GridClientJdkMarshaller MARSH = new GridClientJdkMarshaller();

    /**
     * Shared value.
     */
    private static final AtomicBoolean SHARED = new AtomicBoolean();

    /**
     * Port.
     */
    private static int port;

    /**
     * Host.
     */
    private static String host;

    /**
     *
     *
     * @throws Exception
     * 		If failed.
     */
    @Test
    public void testNoLists() throws Exception {
        testExploit(true);
    }

    /**
     *
     *
     * @throws Exception
     * 		If failed.
     */
    @Test
    public void testWhiteListIncluded() throws Exception {
        String path = U.resolveIgnitePath("modules/core/src/test/config/class_list_exploit_included.txt").getPath();
        System.setProperty(IgniteSystemProperties.IGNITE_MARSHALLER_WHITELIST, path);
        testExploit(true);
    }

    /**
     *
     *
     * @throws Exception
     * 		If failed.
     */
    @Test
    public void testWhiteListExcluded() throws Exception {
        String path = U.resolveIgnitePath("modules/core/src/test/config/class_list_exploit_excluded.txt").getPath();
        System.setProperty(IgniteSystemProperties.IGNITE_MARSHALLER_WHITELIST, path);
        testExploit(false);
    }

    /**
     *
     *
     * @throws Exception
     * 		If failed.
     */
    @Test
    public void testBlackListIncluded() throws Exception {
        String path = U.resolveIgnitePath("modules/core/src/test/config/class_list_exploit_included.txt").getPath();
        System.setProperty(IgniteSystemProperties.IGNITE_MARSHALLER_BLACKLIST, path);
        testExploit(false);
    }

    /**
     *
     *
     * @throws Exception
     * 		If failed.
     */
    @Test
    public void testBlackListExcluded() throws Exception {
        String path = U.resolveIgnitePath("modules/core/src/test/config/class_list_exploit_excluded.txt").getPath();
        System.setProperty(IgniteSystemProperties.IGNITE_MARSHALLER_BLACKLIST, path);
        testExploit(true);
    }

    /**
     *
     *
     * @throws Exception
     * 		If failed.
     */
    @Test
    public void testBothListIncluded() throws Exception {
        String path = U.resolveIgnitePath("modules/core/src/test/config/class_list_exploit_included.txt").getPath();
        System.setProperty(IgniteSystemProperties.IGNITE_MARSHALLER_WHITELIST, path);
        System.setProperty(IgniteSystemProperties.IGNITE_MARSHALLER_BLACKLIST, path);
        testExploit(false);
    }

    /**
     *
     */
    private static class Exploit implements GridClientMessage {
        /**
         *
         *
         * @param is
         * 		Input stream.
         */
        private void readObject(ObjectInputStream is) throws IOException, ClassNotFoundException {
            TcpRestUnmarshalVulnerabilityTest.SHARED.set(true);
        }

        /**
         * {@inheritDoc }
         */
        @Override
        public long requestId() {
            return 0;
        }

        /**
         * {@inheritDoc }
         */
        @Override
        public void requestId(long reqId) {
            // No-op.
        }

        /**
         * {@inheritDoc }
         */
        @Override
        public UUID clientId() {
            return null;
        }

        /**
         * {@inheritDoc }
         */
        @Override
        public void clientId(UUID id) {
            // No-op.
        }

        /**
         * {@inheritDoc }
         */
        @Override
        public UUID destinationId() {
            return null;
        }

        /**
         * {@inheritDoc }
         */
        @Override
        public void destinationId(UUID id) {
            // No-op.
        }

        /**
         * {@inheritDoc }
         */
        @Override
        public byte[] sessionToken() {
            return new byte[0];
        }

        /**
         * {@inheritDoc }
         */
        @Override
        public void sessionToken(byte[] sesTok) {
            // No-op.
        }
    }
}

