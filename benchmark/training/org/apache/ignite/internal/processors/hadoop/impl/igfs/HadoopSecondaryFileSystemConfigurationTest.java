/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ignite.internal.processors.hadoop.impl.igfs;


import IgfsIpcEndpointType.TCP;
import java.net.URI;
import org.apache.hadoop.fs.FileSystem;
import org.apache.ignite.igfs.IgfsIpcEndpointConfiguration;
import org.apache.ignite.igfs.IgfsMode;
import org.apache.ignite.internal.processors.igfs.IgfsCommonAbstractTest;
import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder;
import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;
import org.junit.Test;


/**
 * Tests secondary file system configuration.
 */
public class HadoopSecondaryFileSystemConfigurationTest extends IgfsCommonAbstractTest {
    /**
     * IGFS scheme
     */
    static final String IGFS_SCHEME = "igfs";

    /**
     * Primary file system authority.
     */
    private static final String PRIMARY_AUTHORITY = "igfs@";

    /**
     * Autogenerated secondary file system configuration path.
     */
    private static final String PRIMARY_CFG_PATH = "/work/core-site-primary-test.xml";

    /**
     * Secondary file system authority.
     */
    private static final String SECONDARY_AUTHORITY = "igfs_secondary@127.0.0.1:11500";

    /**
     * Autogenerated secondary file system configuration path.
     */
    static final String SECONDARY_CFG_PATH = "/work/core-site-test.xml";

    /**
     * Secondary endpoint configuration.
     */
    protected static final IgfsIpcEndpointConfiguration SECONDARY_ENDPOINT_CFG;

    /**
     * Group size.
     */
    public static final int GRP_SIZE = 128;

    /**
     * IP finder.
     */
    private static final TcpDiscoveryIpFinder IP_FINDER = new TcpDiscoveryVmIpFinder(true);

    /**
     * Primary file system URI.
     */
    protected URI primaryFsUri;

    /**
     * Primary file system.
     */
    private FileSystem primaryFs;

    /**
     * Full path of primary Fs configuration
     */
    private String primaryConfFullPath;

    /**
     * Input primary Fs uri
     */
    private String primaryFsUriStr;

    /**
     * Input URI scheme for configuration
     */
    private String primaryCfgScheme;

    /**
     * Input URI authority for configuration
     */
    private String primaryCfgAuthority;

    /**
     * if to pass configuration
     */
    private boolean passPrimaryConfiguration;

    /**
     * Full path of s Fs configuration
     */
    private String secondaryConfFullPath;

    /**
     * /Input URI scheme for configuration
     */
    private String secondaryFsUriStr;

    /**
     * Input URI scheme for configuration
     */
    private String secondaryCfgScheme;

    /**
     * Input URI authority for configuration
     */
    private String secondaryCfgAuthority;

    /**
     * if to pass configuration
     */
    private boolean passSecondaryConfiguration;

    /**
     * Default IGFS mode.
     */
    protected final IgfsMode mode;

    /**
     * Skip embedded mode flag.
     */
    private final boolean skipEmbed;

    /**
     * Skip local shmem flag.
     */
    private final boolean skipLocShmem;

    static {
        SECONDARY_ENDPOINT_CFG = new IgfsIpcEndpointConfiguration();
        HadoopSecondaryFileSystemConfigurationTest.SECONDARY_ENDPOINT_CFG.setType(TCP);
        HadoopSecondaryFileSystemConfigurationTest.SECONDARY_ENDPOINT_CFG.setPort(11500);
    }

    /**
     * Constructor.
     *
     * @param mode
     * 		Default IGFS mode.
     * @param skipEmbed
     * 		Whether to skip embedded mode.
     * @param skipLocShmem
     * 		Whether to skip local shmem mode.
     */
    protected HadoopSecondaryFileSystemConfigurationTest(IgfsMode mode, boolean skipEmbed, boolean skipLocShmem) {
        this.mode = mode;
        this.skipEmbed = skipEmbed;
        this.skipLocShmem = skipLocShmem;
    }

    /**
     * Default constructor.
     */
    public HadoopSecondaryFileSystemConfigurationTest() {
        this(PROXY, true, false);
    }

    /**
     * Case #SecondaryFileSystemProvider(null, path)
     *
     * @throws Exception
     * 		On failure.
     */
    @Test
    public void testFsConfigurationOnly() throws Exception {
        primaryCfgScheme = HadoopSecondaryFileSystemConfigurationTest.IGFS_SCHEME;
        primaryCfgAuthority = HadoopSecondaryFileSystemConfigurationTest.PRIMARY_AUTHORITY;
        passPrimaryConfiguration = true;
        primaryFsUriStr = null;
        // wrong secondary URI in the configuration:
        secondaryCfgScheme = HadoopSecondaryFileSystemConfigurationTest.IGFS_SCHEME;
        secondaryCfgAuthority = HadoopSecondaryFileSystemConfigurationTest.SECONDARY_AUTHORITY;
        passSecondaryConfiguration = true;
        secondaryFsUriStr = null;
        check();
    }

    /**
     * Case #SecondaryFileSystemProvider(uri, path), when 'uri' parameter overrides
     * the Fs uri set in the configuration.
     *
     * @throws Exception
     * 		On failure.
     */
    @Test
    public void testFsUriOverridesUriInConfiguration() throws Exception {
        // wrong primary URI in the configuration:
        primaryCfgScheme = "foo";
        primaryCfgAuthority = "moo:zoo@bee";
        passPrimaryConfiguration = true;
        primaryFsUriStr = HadoopSecondaryFileSystemConfigurationTest.mkUri(HadoopSecondaryFileSystemConfigurationTest.IGFS_SCHEME, HadoopSecondaryFileSystemConfigurationTest.PRIMARY_AUTHORITY);
        // wrong secondary URI in the configuration:
        secondaryCfgScheme = "foo";
        secondaryCfgAuthority = "moo:zoo@bee";
        passSecondaryConfiguration = true;
        secondaryFsUriStr = HadoopSecondaryFileSystemConfigurationTest.mkUri(HadoopSecondaryFileSystemConfigurationTest.IGFS_SCHEME, HadoopSecondaryFileSystemConfigurationTest.SECONDARY_AUTHORITY);
        check();
    }
}

