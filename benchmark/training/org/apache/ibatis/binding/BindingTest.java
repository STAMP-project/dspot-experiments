/**
 * Copyright 2009-2012 the original author or authors.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
package org.apache.ibatis.binding;


import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javassist.util.proxy.Proxy;
import net.sf.cglib.proxy.Factory;
import org.apache.ibatis.domain.blog.Author;
import org.apache.ibatis.domain.blog.Blog;
import org.apache.ibatis.domain.blog.DraftPost;
import org.apache.ibatis.domain.blog.Post;
import org.apache.ibatis.domain.blog.Section;
import org.apache.ibatis.executor.result.DefaultResultHandler;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.junit.Assert;
import org.junit.Test;


public class BindingTest {
    private static SqlSessionFactory sqlSessionFactory;

    @Test
    public void shouldSelectBlogWithPostsUsingSubSelect() throws Exception {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            Blog b = mapper.selectBlogWithPostsUsingSubSelect(1);
            Assert.assertEquals(1, b.getId());
            session.close();
            Assert.assertNotNull(b.getAuthor());
            Assert.assertEquals(101, b.getAuthor().getId());
            Assert.assertEquals("jim", b.getAuthor().getUsername());
            Assert.assertEquals("********", b.getAuthor().getPassword());
            Assert.assertEquals(2, b.getPosts().size());
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldFindPostsInList() throws Exception {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundAuthorMapper mapper = session.getMapper(BoundAuthorMapper.class);
            List<Post> posts = mapper.findPostsInList(new ArrayList<Integer>() {
                {
                    add(1);
                    add(3);
                    add(5);
                }
            });
            Assert.assertEquals(3, posts.size());
            session.rollback();
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldFindPostsInArray() throws Exception {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundAuthorMapper mapper = session.getMapper(BoundAuthorMapper.class);
            Integer[] params = new Integer[]{ 1, 3, 5 };
            List<Post> posts = mapper.findPostsInArray(params);
            Assert.assertEquals(3, posts.size());
            session.rollback();
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldfindThreeSpecificPosts() throws Exception {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundAuthorMapper mapper = session.getMapper(BoundAuthorMapper.class);
            List<Post> posts = mapper.findThreeSpecificPosts(1, new RowBounds(1, 1), 3, 5);
            Assert.assertEquals(1, posts.size());
            Assert.assertEquals(3, posts.get(0).getId());
            session.rollback();
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldInsertAuthorWithSelectKey() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundAuthorMapper mapper = session.getMapper(BoundAuthorMapper.class);
            Author author = new Author((-1), "cbegin", "******", "cbegin@nowhere.com", "N/A", Section.NEWS);
            int rows = mapper.insertAuthor(author);
            Assert.assertEquals(1, rows);
            session.rollback();
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldInsertAuthorWithSelectKeyAndDynamicParams() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundAuthorMapper mapper = session.getMapper(BoundAuthorMapper.class);
            Author author = new Author((-1), "cbegin", "******", "cbegin@nowhere.com", "N/A", Section.NEWS);
            int rows = mapper.insertAuthorDynamic(author);
            Assert.assertEquals(1, rows);
            Assert.assertFalse(((-1) == (author.getId())));// id must be autogenerated

            Author author2 = mapper.selectAuthor(author.getId());
            Assert.assertNotNull(author2);
            Assert.assertEquals(author.getEmail(), author2.getEmail());
            session.rollback();
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldSelectRandom() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            Integer x = mapper.selectRandom();
            Assert.assertNotNull(x);
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldExecuteBoundSelectListOfBlogsStatement() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            List<Blog> blogs = mapper.selectBlogs();
            Assert.assertEquals(2, blogs.size());
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldExecuteBoundSelectMapOfBlogsById() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            Map<Integer, Blog> blogs = mapper.selectBlogsAsMapById();
            Assert.assertEquals(2, blogs.size());
            for (Map.Entry<Integer, Blog> blogEntry : blogs.entrySet()) {
                Assert.assertEquals(blogEntry.getKey(), ((Integer) (blogEntry.getValue().getId())));
            }
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldExecuteMultipleBoundSelectOfBlogsByIdInWithProvidedResultHandlerBetweenSessions() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            final DefaultResultHandler handler = new DefaultResultHandler();
            session.select("selectBlogsAsMapById", handler);
            // new session
            session.close();
            session = BindingTest.sqlSessionFactory.openSession();
            final DefaultResultHandler moreHandler = new DefaultResultHandler();
            session.select("selectBlogsAsMapById", moreHandler);
            Assert.assertEquals(2, handler.getResultList().size());
            Assert.assertEquals(2, moreHandler.getResultList().size());
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldExecuteMultipleBoundSelectOfBlogsByIdInWithProvidedResultHandlerInSameSession() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            final DefaultResultHandler handler = new DefaultResultHandler();
            session.select("selectBlogsAsMapById", handler);
            final DefaultResultHandler moreHandler = new DefaultResultHandler();
            session.select("selectBlogsAsMapById", moreHandler);
            Assert.assertEquals(2, handler.getResultList().size());
            Assert.assertEquals(2, moreHandler.getResultList().size());
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldExecuteMultipleBoundSelectMapOfBlogsByIdInSameSessionWithoutClearingLocalCache() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            Map<Integer, Blog> blogs = mapper.selectBlogsAsMapById();
            Map<Integer, Blog> moreBlogs = mapper.selectBlogsAsMapById();
            Assert.assertEquals(2, blogs.size());
            Assert.assertEquals(2, moreBlogs.size());
            for (Map.Entry<Integer, Blog> blogEntry : blogs.entrySet()) {
                Assert.assertEquals(blogEntry.getKey(), ((Integer) (blogEntry.getValue().getId())));
            }
            for (Map.Entry<Integer, Blog> blogEntry : moreBlogs.entrySet()) {
                Assert.assertEquals(blogEntry.getKey(), ((Integer) (blogEntry.getValue().getId())));
            }
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldExecuteMultipleBoundSelectMapOfBlogsByIdBetweenTwoSessionsWithGlobalCacheEnabled() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            Map<Integer, Blog> blogs = mapper.selectBlogsAsMapById();
            session.close();
            // New Session
            session = BindingTest.sqlSessionFactory.openSession();
            mapper = session.getMapper(BoundBlogMapper.class);
            Map<Integer, Blog> moreBlogs = mapper.selectBlogsAsMapById();
            Assert.assertEquals(2, blogs.size());
            Assert.assertEquals(2, moreBlogs.size());
            for (Map.Entry<Integer, Blog> blogEntry : blogs.entrySet()) {
                Assert.assertEquals(blogEntry.getKey(), ((Integer) (blogEntry.getValue().getId())));
            }
            for (Map.Entry<Integer, Blog> blogEntry : moreBlogs.entrySet()) {
                Assert.assertEquals(blogEntry.getKey(), ((Integer) (blogEntry.getValue().getId())));
            }
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldSelectListOfBlogsUsingXMLConfig() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            List<Blog> blogs = mapper.selectBlogsFromXML();
            Assert.assertEquals(2, blogs.size());
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldExecuteBoundSelectListOfBlogsStatementUsingProvider() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            List<Blog> blogs = mapper.selectBlogsUsingProvider();
            Assert.assertEquals(2, blogs.size());
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldExecuteBoundSelectListOfBlogsAsMaps() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            List<Map<String, Object>> blogs = mapper.selectBlogsAsMaps();
            Assert.assertEquals(2, blogs.size());
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldSelectListOfPostsLike() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            List<Post> posts = mapper.selectPostsLike(new RowBounds(1, 1), "%a%");
            Assert.assertEquals(1, posts.size());
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldSelectListOfPostsLikeTwoParameters() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            List<Post> posts = mapper.selectPostsLikeSubjectAndBody(new RowBounds(1, 1), "%a%", "%a%");
            Assert.assertEquals(1, posts.size());
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldExecuteBoundSelectOneBlogStatement() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            Blog blog = mapper.selectBlog(1);
            Assert.assertEquals(1, blog.getId());
            Assert.assertEquals("Jim Business", blog.getTitle());
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldExecuteBoundSelectOneBlogStatementWithConstructor() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            Blog blog = mapper.selectBlogUsingConstructor(1);
            Assert.assertEquals(1, blog.getId());
            Assert.assertEquals("Jim Business", blog.getTitle());
            Assert.assertNotNull("author should not be null", blog.getAuthor());
            List<Post> posts = blog.getPosts();
            Assert.assertTrue("posts should not be empty", ((posts != null) && (!(posts.isEmpty()))));
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldExecuteBoundSelectBlogUsingConstructorWithResultMap() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            Blog blog = mapper.selectBlogUsingConstructorWithResultMap(1);
            Assert.assertEquals(1, blog.getId());
            Assert.assertEquals("Jim Business", blog.getTitle());
            Assert.assertNotNull("author should not be null", blog.getAuthor());
            List<Post> posts = blog.getPosts();
            Assert.assertTrue("posts should not be empty", ((posts != null) && (!(posts.isEmpty()))));
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldExecuteBoundSelectBlogUsingConstructorWithResultMapAndProperties() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            Blog blog = mapper.selectBlogUsingConstructorWithResultMapAndProperties(1);
            Assert.assertEquals(1, blog.getId());
            Assert.assertEquals("Jim Business", blog.getTitle());
            Assert.assertNotNull("author should not be null", blog.getAuthor());
            Author author = blog.getAuthor();
            Assert.assertEquals(101, author.getId());
            Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
            Assert.assertEquals("jim", author.getUsername());
            List<Post> posts = blog.getPosts();
            Assert.assertTrue("posts should not be empty", (posts != null));
            Assert.assertEquals(2, posts.size());
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldExecuteBoundSelectOneBlogStatementWithConstructorUsingXMLConfig() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            Blog blog = mapper.selectBlogByIdUsingConstructor(1);
            Assert.assertEquals(1, blog.getId());
            Assert.assertEquals("Jim Business", blog.getTitle());
            Assert.assertNotNull("author should not be null", blog.getAuthor());
            List<Post> posts = blog.getPosts();
            Assert.assertTrue("posts should not be empty", ((posts != null) && (!(posts.isEmpty()))));
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldSelectOneBlogAsMap() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            Map<String, Object> blog = mapper.selectBlogAsMap(new HashMap<String, Object>() {
                {
                    put("id", 1);
                }
            });
            Assert.assertEquals(1, blog.get("ID"));
            Assert.assertEquals("Jim Business", blog.get("TITLE"));
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldSelectOneAuthor() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundAuthorMapper mapper = session.getMapper(BoundAuthorMapper.class);
            Author author = mapper.selectAuthor(101);
            Assert.assertEquals(101, author.getId());
            Assert.assertEquals("jim", author.getUsername());
            Assert.assertEquals("********", author.getPassword());
            Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
            Assert.assertEquals("", author.getBio());
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldSelectOneAuthorFromCache() {
        Author author1 = selectOneAuthor();
        Author author2 = selectOneAuthor();
        Assert.assertTrue("Same (cached) instance should be returned unless rollback is called.", (author1 == author2));
    }

    @Test
    public void shouldSelectOneAuthorByConstructor() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundAuthorMapper mapper = session.getMapper(BoundAuthorMapper.class);
            Author author = mapper.selectAuthorConstructor(101);
            Assert.assertEquals(101, author.getId());
            Assert.assertEquals("jim", author.getUsername());
            Assert.assertEquals("********", author.getPassword());
            Assert.assertEquals("jim@ibatis.apache.org", author.getEmail());
            Assert.assertEquals("", author.getBio());
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldSelectDraftTypedPosts() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            List<Post> posts = mapper.selectPosts();
            Assert.assertEquals(5, posts.size());
            Assert.assertTrue(((posts.get(0)) instanceof DraftPost));
            Assert.assertFalse(((posts.get(1)) instanceof DraftPost));
            Assert.assertTrue(((posts.get(2)) instanceof DraftPost));
            Assert.assertFalse(((posts.get(3)) instanceof DraftPost));
            Assert.assertFalse(((posts.get(4)) instanceof DraftPost));
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldSelectDraftTypedPostsWithResultMap() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            List<Post> posts = mapper.selectPostsWithResultMap();
            Assert.assertEquals(5, posts.size());
            Assert.assertTrue(((posts.get(0)) instanceof DraftPost));
            Assert.assertFalse(((posts.get(1)) instanceof DraftPost));
            Assert.assertTrue(((posts.get(2)) instanceof DraftPost));
            Assert.assertFalse(((posts.get(3)) instanceof DraftPost));
            Assert.assertFalse(((posts.get(4)) instanceof DraftPost));
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldReturnANotNullToString() throws Exception {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            Assert.assertNotNull(mapper.toString());
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldReturnANotNullHashCode() throws Exception {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            Assert.assertNotNull(mapper.hashCode());
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldCompareTwoMappers() throws Exception {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            BoundBlogMapper mapper2 = session.getMapper(BoundBlogMapper.class);
            Assert.assertFalse(mapper.equals(mapper2));
        } finally {
            session.close();
        }
    }

    @Test(expected = Exception.class)
    public void shouldFailWhenSelectingOneBlogWithNonExistentParam() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            mapper.selectBlogByNonExistentParam(1);
        } finally {
            session.close();
        }
    }

    @Test(expected = Exception.class)
    public void shouldFailWhenSelectingOneBlogWithNullParam() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            mapper.selectBlogByNullParam(null);
        } finally {
            session.close();
        }
    }

    // Decided that maps are dynamic so no existent params do not fail
    @Test
    public void shouldFailWhenSelectingOneBlogWithNonExistentNestedParam() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            mapper.selectBlogByNonExistentNestedParam(1, Collections.<String, Object>emptyMap());
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldSelectBlogWithDefault30ParamNames() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            Blog blog = mapper.selectBlogByDefault30ParamNames(1, "Jim Business");
            Assert.assertNotNull(blog);
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldSelectBlogWithDefault31ParamNames() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            Blog blog = mapper.selectBlogByDefault31ParamNames(1, "Jim Business");
            Assert.assertNotNull(blog);
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldSelectBlogWithAParamNamedValue() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            Blog blog = mapper.selectBlogWithAParamNamedValue("id", 1, "Jim Business");
            Assert.assertNotNull(blog);
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldCacheMapperMethod() throws Exception {
        final SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            // Create another mapper instance with a method cache we can test against:
            final MapperProxyFactory<BoundBlogMapper> mapperProxyFactory = new MapperProxyFactory<BoundBlogMapper>(BoundBlogMapper.class);
            Assert.assertEquals(BoundBlogMapper.class, mapperProxyFactory.getMapperInterface());
            final BoundBlogMapper mapper = mapperProxyFactory.newInstance(session);
            Assert.assertNotSame(mapper, mapperProxyFactory.newInstance(session));
            Assert.assertTrue(mapperProxyFactory.getMethodCache().isEmpty());
            // Mapper methods we will call later:
            final Method selectBlog = BoundBlogMapper.class.getMethod("selectBlog", Integer.TYPE);
            final Method selectBlogByIdUsingConstructor = BoundBlogMapper.class.getMethod("selectBlogByIdUsingConstructor", Integer.TYPE);
            // Call mapper method and verify it is cached:
            mapper.selectBlog(1);
            Assert.assertEquals(1, mapperProxyFactory.getMethodCache().size());
            Assert.assertTrue(mapperProxyFactory.getMethodCache().containsKey(selectBlog));
            final MapperMethod cachedSelectBlog = mapperProxyFactory.getMethodCache().get(selectBlog);
            // Call mapper method again and verify the cache is unchanged:
            session.clearCache();
            mapper.selectBlog(1);
            Assert.assertEquals(1, mapperProxyFactory.getMethodCache().size());
            Assert.assertSame(cachedSelectBlog, mapperProxyFactory.getMethodCache().get(selectBlog));
            // Call another mapper method and verify that it shows up in the cache as well:
            session.clearCache();
            mapper.selectBlogByIdUsingConstructor(1);
            Assert.assertEquals(2, mapperProxyFactory.getMethodCache().size());
            Assert.assertSame(cachedSelectBlog, mapperProxyFactory.getMethodCache().get(selectBlog));
            Assert.assertTrue(mapperProxyFactory.getMethodCache().containsKey(selectBlogByIdUsingConstructor));
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldGetBlogsWithAuthorsAndPosts() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            List<Blog> blogs = mapper.selectBlogsWithAutorAndPosts();
            Assert.assertEquals(2, blogs.size());
            Assert.assertTrue(((blogs.get(0)) instanceof Proxy));
            Assert.assertEquals(101, blogs.get(0).getAuthor().getId());
            Assert.assertEquals(1, blogs.get(0).getPosts().size());
            Assert.assertEquals(1, blogs.get(0).getPosts().get(0).getId());
            Assert.assertTrue(((blogs.get(1)) instanceof Proxy));
            Assert.assertEquals(102, blogs.get(1).getAuthor().getId());
            Assert.assertEquals(1, blogs.get(1).getPosts().size());
            Assert.assertEquals(2, blogs.get(1).getPosts().get(0).getId());
        } finally {
            session.close();
        }
    }

    @Test
    public void shouldGetBlogsWithAuthorsAndPostsEagerly() {
        SqlSession session = BindingTest.sqlSessionFactory.openSession();
        try {
            BoundBlogMapper mapper = session.getMapper(BoundBlogMapper.class);
            List<Blog> blogs = mapper.selectBlogsWithAutorAndPostsEagerly();
            Assert.assertEquals(2, blogs.size());
            Assert.assertFalse(((blogs.get(0)) instanceof Factory));
            Assert.assertEquals(101, blogs.get(0).getAuthor().getId());
            Assert.assertEquals(1, blogs.get(0).getPosts().size());
            Assert.assertEquals(1, blogs.get(0).getPosts().get(0).getId());
            Assert.assertFalse(((blogs.get(1)) instanceof Factory));
            Assert.assertEquals(102, blogs.get(1).getAuthor().getId());
            Assert.assertEquals(1, blogs.get(1).getPosts().size());
            Assert.assertEquals(2, blogs.get(1).getPosts().get(0).getId());
        } finally {
            session.close();
        }
    }
}

