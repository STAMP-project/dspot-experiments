/**
 * (c) 2014 - 2017 Open Source Geospatial Foundation - all rights reserved
 * (c) 2001 - 2013 OpenPlans
 * This code is licensed under the GPL 2.0 license, available at the root
 * application directory.
 */
package org.geoserver.kml;


import KMLMapOutputFormat.MIME_TYPE;
import MockData.BASIC_POLYGONS;
import MockData.POINTS;
import de.micromata.opengis.kml.v_2_2_0.Kml;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.URL;
import java.net.URLDecoder;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipInputStream;
import javax.xml.XMLConstants;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.custommonkey.xmlunit.XMLAssert;
import org.custommonkey.xmlunit.XMLUnit;
import org.custommonkey.xmlunit.XpathEngine;
import org.geoserver.catalog.FeatureTypeInfo;
import org.geoserver.config.GeoServer;
import org.geoserver.config.GeoServerInfo;
import org.geoserver.ows.util.KvpUtils;
import org.geoserver.wms.GetMapRequest;
import org.geoserver.wms.WMSMapContent;
import org.geoserver.wms.WMSTestSupport;
import org.geotools.referencing.crs.DefaultGeographicCRS;
import org.junit.Assert;
import org.junit.Test;
import org.springframework.mock.web.MockHttpServletResponse;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import static KMLMapOutputFormat.MIME_TYPE;


/**
 * Some functional tests for kml reflector
 *
 * @author David Winslow (OpenGeo)
 * @author Gabriel Roldan (OpenGeo)
 * @author Markus Innerebner (EURAC Research)
 * @version $Id$
 */
public class KMLReflectorTest extends WMSTestSupport {
    /**
     * Verify that NetworkLink's generated by the reflector do not include a BBOX parameter, since
     * that would override the BBOX provided by Google Earth.
     *
     * @see <a href="https://osgeo-org.atlassian.net/browse/GEOS-2185">GEOS-2185</a>
     */
    @Test
    public void testNoBBOXInHREF() throws Exception {
        final String layerName = BASIC_POLYGONS.getLocalPart();
        final XpathEngine xpath = XMLUnit.newXpathEngine();
        String requestURL = "wms/kml?mode=refresh&layers=" + layerName;
        Document dom = getAsDOM(requestURL);
        print(dom);
        assertXpathEvaluatesTo("1", "count(kml:kml/kml:Document)", dom);
        assertXpathEvaluatesTo("1", "count(kml:kml/kml:Document/kml:NetworkLink)", dom);
        assertXpathEvaluatesTo("1", "count(kml:kml/kml:Document/kml:LookAt)", dom);
        assertXpathEvaluatesTo(layerName, "kml:kml/kml:Document/kml:NetworkLink[1]/kml:name", dom);
        assertXpathEvaluatesTo("1", "kml:kml/kml:Document/kml:NetworkLink[1]/kml:open", dom);
        assertXpathEvaluatesTo("1", "kml:kml/kml:Document/kml:NetworkLink[1]/kml:visibility", dom);
        assertXpathEvaluatesTo("onStop", "kml:kml/kml:Document/kml:NetworkLink[1]/kml:Url/kml:viewRefreshMode", dom);
        assertXpathEvaluatesTo("1.0", "kml:kml/kml:Document/kml:NetworkLink[1]/kml:Url/kml:viewRefreshTime", dom);
        assertXpathEvaluatesTo("1.0", "kml:kml/kml:Document/kml:NetworkLink[1]/kml:Url/kml:viewBoundScale", dom);
        Map<String, Object> expectedKVP = KvpUtils.parseQueryString("http://localhost:80/geoserver/wms?format_options=MODE%3Arefresh%3Bautofit%3Atrue%3BKMPLACEMARK%3Afalse%3BKMATTR%3Atrue%3BKMSCORE%3A40%3BSUPEROVERLAY%3Afalse&service=wms&srs=EPSG%3A4326&width=2048&styles=BasicPolygons&height=2048&transparent=false&request=GetMap&layers=cite%3ABasicPolygons&format=application%2Fvnd.google-earth.kml+xml&version=1.1.1");
        Map<String, Object> resultedKVP = KvpUtils.parseQueryString(xpath.evaluate("kml:kml/kml:Document/kml:NetworkLink[1]/kml:Url/kml:href", dom));
        KMLReflectorTest.assertMapsEqual(expectedKVP, resultedKVP);
        String href = xpath.evaluate("kml:kml/kml:Document/kml:NetworkLink/kml:Link/kml:href", dom);
        Pattern badPattern = Pattern.compile("&bbox=", Pattern.CASE_INSENSITIVE);
        Assert.assertFalse(badPattern.matcher(href).matches());
    }

    /**
     * Verify that NetworkLink's generated by the reflector do not include a BBOX parameter, since
     * that would override the BBOX provided by Google Earth.
     *
     * @see <a href="https://osgeo-org.atlassian.net/browse/GEOS-2185">GEOS-2185</a>
     */
    @Test
    public void testBBOXInHREF() throws Exception {
        final XpathEngine xpath = XMLUnit.newXpathEngine();
        String requestURL = ("wms/kml?layers=" + (getLayerId(BASIC_POLYGONS))) + "&bbox=-1,-1,-0.5,-0.5&mode=download";
        Document dom = getAsDOM(requestURL);
        // print(dom);
        Assert.assertEquals(1, xpath.getMatchingNodes("//kml:Placemark", dom).getLength());
    }

    @Test
    public void testDownloadMultiLayer() throws Exception {
        String requestURL = (("wms/kml?&layers=" + (getLayerId(MockData.LAKES))) + ",") + (getLayerId(MockData.FORESTS));
        MockHttpServletResponse response = getAsServletResponse(requestURL);
        Assert.assertEquals(MIME_TYPE, response.getContentType());
        Assert.assertEquals("attachment; filename=cite-Lakes_cite-Forests.kml", response.getHeader("Content-Disposition"));
        Document dom = dom(getBinaryInputStream(response));
        print(dom);
        assertXpathEvaluatesTo("1", "count(kml:kml/kml:Document)", dom);
        assertXpathEvaluatesTo("2", "count(kml:kml/kml:Document/kml:NetworkLink)", dom);
        assertXpathEvaluatesTo("2", "count(kml:kml/kml:Document/kml:NetworkLink/kml:LookAt)", dom);
    }

    /**
     * Do some spot checks on the KML generated when an overlay hierarchy is requested.
     */
    @Test
    public void testSuperOverlayReflection() throws Exception {
        final String layerName = ((BASIC_POLYGONS.getPrefix()) + ":") + (BASIC_POLYGONS.getLocalPart());
        final String requestUrl = ("wms/kml?layers=" + layerName) + "&styles=&mode=superoverlay";
        Document dom = getAsDOM(requestUrl);
        // print(dom);
        Assert.assertEquals("kml", dom.getDocumentElement().getLocalName());
        assertXpathExists("kml:kml/kml:Document/kml:Folder/kml:NetworkLink/kml:Link/kml:href", dom);
        assertXpathExists("kml:kml/kml:Document/kml:LookAt/kml:longitude", dom);
    }

    @Test
    public void testWmsRepeatedLayerWithNonStandardStyleAndCqlFiler() throws Exception {
        final String layerName = ((BASIC_POLYGONS.getPrefix()) + ":") + (BASIC_POLYGONS.getLocalPart());
        final String titleName = BASIC_POLYGONS.getLocalPart();
        final String abstractValue = "abstract about " + titleName;
        String requestUrl = ((("wms/kml?mode=refresh&layers=" + layerName) + ",") + layerName) + "&styles=Default,Default&cql_filter=att1<10;att1>1000";
        Document dom = getAsDOM(requestUrl);
        Assert.assertEquals("kml", dom.getDocumentElement().getLocalName());
        assertXpathEvaluatesTo("2", "count(kml:kml/kml:Document/kml:NetworkLink)", dom);
        assertXpathEvaluatesTo(titleName, "kml:kml/kml:Document/kml:NetworkLink[1]/kml:name", dom);
        assertXpathEvaluatesTo(abstractValue, "kml:kml/kml:Document/kml:NetworkLink[1]/kml:description", dom);
        assertXpathEvaluatesTo(titleName, "kml:kml/kml:Document/kml:NetworkLink[2]/kml:name", dom);
        assertXpathEvaluatesTo(abstractValue, "kml:kml/kml:Document/kml:NetworkLink[2]/kml:description", dom);
        XpathEngine xpath = XMLUnit.newXpathEngine();
        String url1 = xpath.evaluate("/kml:kml/kml:Document/kml:NetworkLink[1]/kml:Url/kml:href", dom);
        String url2 = xpath.evaluate("/kml:kml/kml:Document/kml:NetworkLink[2]/kml:Url/kml:href", dom);
        Assert.assertNotNull(url1);
        Assert.assertNotNull(url2);
        Map<String, Object> kvp1 = KvpUtils.parseQueryString(url1);
        Map<String, Object> kvp2 = KvpUtils.parseQueryString(url2);
        Assert.assertEquals(layerName, kvp1.get("layers"));
        Assert.assertEquals(layerName, kvp2.get("layers"));
        Assert.assertEquals("Default", kvp1.get("styles"));
        Assert.assertEquals("Default", kvp2.get("styles"));
        Assert.assertEquals("att1<10", kvp1.get("cql_filter"));
        Assert.assertEquals("att1>1000", kvp2.get("cql_filter"));
    }

    /**
     *
     *
     * @see {@link KMLReflector#organizeFormatOptionsParams(Map, Map)}
     */
    @Test
    public void testKmlFormatOptionsAsKVP() throws Exception {
        final String layerName = ((BASIC_POLYGONS.getPrefix()) + ":") + (BASIC_POLYGONS.getLocalPart());
        final String baseUrl = ("wms/kml?layers=" + layerName) + "&styles=&mode=superoverlay";
        final String requestUrl = baseUrl + "&kmltitle=myCustomLayerTitle&kmscore=10&legend=true&kmattr=true";
        Document dom = getAsDOM(requestUrl);
        XpathEngine xpath = XMLUnit.newXpathEngine();
        // print(dom);
        // all the kvp parameters (which should be set as format_options now are correctly parsed)
        String result = xpath.evaluate("//kml:NetworkLink/kml:Link/kml:href", dom);
        Map<String, Object> kvp = KvpUtils.parseQueryString(result);
        List<String> formatOptions = Arrays.asList(((String) (kvp.get("format_options"))).split(";"));
        Assert.assertEquals(9, formatOptions.size());
        Assert.assertTrue(formatOptions.contains("LEGEND:true"));
        Assert.assertTrue(formatOptions.contains("SUPEROVERLAY:true"));
        Assert.assertTrue(formatOptions.contains("AUTOFIT:true"));
        Assert.assertTrue(formatOptions.contains("KMPLACEMARK:false"));
        Assert.assertTrue(formatOptions.contains("OVERLAYMODE:auto"));
        Assert.assertTrue(formatOptions.contains("KMSCORE:10"));
        Assert.assertTrue(formatOptions.contains("MODE:superoverlay"));
        Assert.assertTrue(formatOptions.contains("KMATTR:true"));
        Assert.assertTrue(formatOptions.contains("KMLTITLE:myCustomLayerTitle"));
    }

    @Test
    public void testKmlTitleFormatOption() throws Exception {
        final String layerName = ((BASIC_POLYGONS.getPrefix()) + ":") + (BASIC_POLYGONS.getLocalPart());
        final String requestUrl = ("wms/kml?layers=" + layerName) + "&styles=&mode=superoverlay&format_options=kmltitle:myCustomLayerTitle";
        // System.out.println(getAsServletResponse(requestUrl).getContentType());
        Document dom = getAsDOM(requestUrl);
        // print(dom);
        Assert.assertEquals("kml", dom.getDocumentElement().getLocalName());
        assertXpathEvaluatesTo("myCustomLayerTitle", "/kml:kml/kml:Document/kml:name", dom);
    }

    @Test
    public void testKmlRefreshFormatOption() throws Exception {
        final String layerName = ((BASIC_POLYGONS.getPrefix()) + ":") + (BASIC_POLYGONS.getLocalPart());
        String requestUrl = ("wms/kml?layers=" + layerName) + "&format_options=kmlrefresh:expires";
        Document dom = getAsDOM(requestUrl);
        // print(dom);
        Assert.assertEquals("kml", dom.getDocumentElement().getLocalName());
        assertXpathEvaluatesTo("onExpire", "/kml:kml/kml:Document/kml:NetworkLink/kml:Url/kml:refreshMode", dom);
        requestUrl = ("wms/kml?layers=" + layerName) + "&format_options=kmlrefresh:60";
        dom = getAsDOM(requestUrl);
        assertXpathEvaluatesTo("onInterval", "/kml:kml/kml:Document/kml:NetworkLink/kml:Url/kml:refreshMode", dom);
        assertXpathEvaluatesTo("60.0", "/kml:kml/kml:Document/kml:NetworkLink/kml:Url/kml:refreshInterval", dom);
    }

    @Test
    public void testKmlVisibleFormatOption() throws Exception {
        final String layerName = ((BASIC_POLYGONS.getPrefix()) + ":") + (BASIC_POLYGONS.getLocalPart());
        String requestUrl = ("wms/kml?layers=" + layerName) + "&format_options=kmlvisible:true";
        Document dom = getAsDOM(requestUrl);
        // print(dom);
        Assert.assertEquals("kml", dom.getDocumentElement().getLocalName());
        assertXpathEvaluatesTo("1", "/kml:kml/kml:Document/kml:NetworkLink/kml:visibility", dom);
        requestUrl = ("wms/kml?layers=" + layerName) + "&format_options=kmlvisible:false";
        dom = getAsDOM(requestUrl);
        Assert.assertEquals("kml", dom.getDocumentElement().getLocalName());
        assertXpathEvaluatesTo("0", "/kml:kml/kml:Document/kml:NetworkLink/kml:visibility", dom);
    }

    /**
     * See https://osgeo-org.atlassian.net/browse/GEOS-1947
     */
    @Test
    public void testExternalGraphicBackround() throws Exception {
        final String requestUrl = ("wms/kml?layers=" + (getLayerId(MockData.BRIDGES))) + "&styles=Bridge&mode=download";
        Document dom = getAsDOM(requestUrl);
        // print(dom);
        // make sure we are generating icon styles, but that we're not sticking a color onto them
        XMLAssert.assertXpathEvaluatesTo("1", "count(//kml:Style/kml:IconStyle/kml:Icon/kml:href)", dom);
        XMLAssert.assertXpathEvaluatesTo("0", "count(//kml:Style/kml:IconStyle/kml:Icon/kml:color)", dom);
    }

    /**
     * See https://osgeo-org.atlassian.net/browse/GEOS-3994
     */
    @Test
    public void testExternalGraphicSubdir() throws Exception {
        final String requestUrl = ("wms/kml?layers=" + (getLayerId(MockData.BRIDGES))) + "&styles=BridgeSubdir&mode=download";
        Document dom = getAsDOM(requestUrl);
        // print(dom);
        // make sure we are generating icon styles with the subdir path
        XMLAssert.assertXpathEvaluatesTo("http://localhost:8080/geoserver/styles/graphics/bridgesubdir.png", "//kml:Style[1]/kml:IconStyle/kml:Icon/kml:href", dom);
    }

    /**
     * See https://osgeo-org.atlassian.net/browse/GEOS-3965
     */
    @Test
    public void testProxyBaseURL() throws Exception {
        GeoServer gs = getGeoServer();
        try {
            GeoServerInfo info = gs.getGlobal();
            info.getSettings().setProxyBaseUrl("http://myhost:9999/gs");
            gs.save(info);
            final String requestUrl = ("wms/kml?layers=" + (getLayerId(MockData.BRIDGES))) + "&styles=Bridge&mode=download";
            Document dom = getAsDOM(requestUrl);
            // make sure we are using the proxy base URL
            XMLAssert.assertXpathEvaluatesTo("http://myhost:9999/gs/styles/bridge.png", "//kml:Style/kml:IconStyle/kml:Icon/kml:href", dom);
        } finally {
            GeoServerInfo info = gs.getGlobal();
            info.getSettings().setProxyBaseUrl(null);
            gs.save(info);
        }
    }

    @Test
    public void testFilteredData() throws Exception {
        // the style selects a single feature
        final String requestUrl = ("wms/kml?layers=" + (getLayerId(BASIC_POLYGONS))) + "&styles=SingleFeature&mode=download";
        Document dom = getAsDOM(requestUrl);
        // print(dom);
        // check we have indeed a single feature
        assertXpathEvaluatesTo("1", "count(//kml:Placemark)", dom);
    }

    @Test
    public void testForceRasterKml() throws Exception {
        final String requestUrl = (("wms/reflect?layers=" + (getLayerId(BASIC_POLYGONS))) + "&styles=&format_options=KMSCORE:0;mode:refresh&format= ") + (MIME_TYPE);
        Document dom = getAsDOM(requestUrl);
        // print(dom);
        assertXpathEvaluatesTo("1", "count(//kml:Folder/kml:GroundOverlay)", dom);
        String href = XMLUnit.newXpathEngine().evaluate("//kml:Folder/kml:GroundOverlay/kml:Icon/kml:href", dom);
        Assert.assertTrue(href.startsWith("http://localhost:8080/geoserver/wms"));
        Assert.assertTrue(href.contains("request=GetMap"));
        Assert.assertTrue(href.contains("format=image%2Fpng"));
    }

    @Test
    public void testForceRasterKmz() throws Exception {
        final String requestUrl = (("wms/reflect?layers=" + (getLayerId(BASIC_POLYGONS))) + "&styles=&format_options=KMSCORE:0;mode:refresh&format= ") + (KMZMapOutputFormat.MIME_TYPE);
        MockHttpServletResponse response = getAsServletResponse(requestUrl);
        Assert.assertEquals(KMZMapOutputFormat.MIME_TYPE, response.getContentType());
        Assert.assertEquals("attachment; filename=cite-BasicPolygons.kmz", response.getHeader("Content-Disposition"));
        ZipInputStream zis = new ZipInputStream(getBinaryInputStream(response));
        try {
            // first entry, the kml document itself
            ZipEntry entry = zis.getNextEntry();
            Assert.assertEquals("wms.kml", entry.getName());
            // we need to clone the input stream, as dom(is) closes the stream
            byte[] data = IOUtils.toByteArray(zis);
            Document dom = dom(new ByteArrayInputStream(data));
            assertXpathEvaluatesTo("1", "count(//kml:Folder/kml:GroundOverlay)", dom);
            String href = XMLUnit.newXpathEngine().evaluate("//kml:Folder/kml:GroundOverlay/kml:Icon/kml:href", dom);
            Assert.assertEquals("images/layers_0.png", href);
            zis.closeEntry();
            // the images folder
            entry = zis.getNextEntry();
            Assert.assertEquals("images/", entry.getName());
            zis.closeEntry();
            // the ground overlay for the raster layer
            entry = zis.getNextEntry();
            Assert.assertEquals("images/layers_0.png", entry.getName());
            zis.closeEntry();
            Assert.assertNull(zis.getNextEntry());
        } finally {
            zis.close();
        }
    }

    @Test
    public void testRasterTransformerSLD() throws Exception {
        URL url = getClass().getResource("allsymbolizers.sld");
        String urlExternal = URLDecoder.decode(url.toExternalForm(), "UTF-8");
        final String requestUrl = (((("wms/reflect?layers=" + (getLayerId(BASIC_POLYGONS))) + "&format_options=KMSCORE:0;mode:refresh&format= ") + (MIME_TYPE)) + "&sld=") + urlExternal;
        Document dom = getAsDOM(requestUrl);
        // print(dom);
        assertXpathEvaluatesTo("1", "count(//kml:Folder/kml:GroundOverlay)", dom);
        String href = XMLUnit.newXpathEngine().evaluate("//kml:Folder/kml:GroundOverlay/kml:Icon/kml:href", dom);
        href = URLDecoder.decode(href, "UTF-8");
        Assert.assertTrue(href.startsWith("http://localhost:8080/geoserver/wms"));
        Assert.assertTrue(href.contains("request=GetMap"));
        Assert.assertTrue(href.contains("format=image/png"));
        Assert.assertTrue(href.contains(("&sld=" + urlExternal)));
    }

    @Test
    public void testRasterPlacemarkTrue() throws Exception {
        doTestRasterPlacemark(true);
    }

    @Test
    public void testRasterPlacemarkFalse() throws Exception {
        doTestRasterPlacemark(false);
    }

    @Test
    public void testStyleConverter() throws Exception {
        // the style selects a single feature
        final String requestUrl = ("wms/kml?layers=" + (getLayerId(BASIC_POLYGONS))) + "&styles=allsymbolizers&mode=download";
        Document doc = getAsDOM(requestUrl);
        // print(doc);
        XMLAssert.assertXpathEvaluatesTo("1", "count(//kml:Placemark[1]/kml:Style)", doc);
        XMLAssert.assertXpathEvaluatesTo("0", "count(//kml:Placemark[1]/kml:Style/kml:IconStyle/kml:Icon/kml:color)", doc);
        XMLAssert.assertXpathEvaluatesTo("http://localhost:8080/geoserver/kml/icon/allsymbolizers?0.0.0=", "//kml:Placemark[1]/kml:Style/kml:IconStyle/kml:Icon/kml:href", doc);
        XMLAssert.assertXpathEvaluatesTo("b24d4dff", "//kml:Placemark[1]/kml:Style/kml:PolyStyle/kml:color", doc);
        XMLAssert.assertXpathEvaluatesTo("ffba3e00", "//kml:Placemark[1]/kml:Style/kml:LineStyle/kml:color", doc);
        XMLAssert.assertXpathEvaluatesTo("2.0", "//kml:Placemark[1]/kml:Style/kml:LineStyle/kml:width", doc);
        XMLAssert.assertXpathEvaluatesTo("1.4", "//kml:Placemark[1]/kml:Style/kml:LabelStyle/kml:scale", doc);
    }

    @Test
    public void testLabelFromTextSymbolizer() throws Exception {
        // the style selects a single feature
        final String requestUrl = ("wms/kml?layers=" + (getLayerId(MockData.NAMED_PLACES))) + "&styles=labels&mode=download";
        Document doc = getAsDOM(requestUrl);
        // print(doc);
        XMLAssert.assertXpathEvaluatesTo("2", "count(//kml:Placemark)", doc);
        XMLAssert.assertXpathEvaluatesTo("1", "count(//kml:Placemark[kml:name='Ashton'])", doc);
        XMLAssert.assertXpathEvaluatesTo("1", "count(//kml:Placemark[kml:name='Goose Island'])", doc);
    }

    /**
     * See https://osgeo-org.atlassian.net/browse/GEOS-2670
     */
    @Test
    public void testDynamicSymbolizer() throws Exception {
        final String requestUrl = ("wms/kml?layers=" + (getLayerId(MockData.STREAMS))) + "&styles=dynamicsymbolizer&mode=download";
        Document document = getAsDOM(requestUrl);
        Assert.assertEquals("kml", document.getDocumentElement().getNodeName());
        XMLAssert.assertXpathEvaluatesTo("http://127.0.0.1/Cam Stream", "//kml:Style[1]/kml:IconStyle/kml:Icon/kml:href", document);
    }

    @Test
    public void testRelativeDynamicSymbolizer() throws Exception {
        final String requestUrl = ("wms/kml?layers=" + (getLayerId(MockData.STREAMS))) + "&styles=relativeds&mode=download";
        Document document = getAsDOM(requestUrl);
        Assert.assertEquals("kml", document.getDocumentElement().getNodeName());
        XMLAssert.assertXpathEvaluatesTo("http://localhost:8080/geoserver/styles/icons/Cam%20Stream", "//kml:Style[1]/kml:IconStyle/kml:Icon/kml:href", document);
    }

    @Test
    public void testLegend() throws Exception {
        String layerId = getLayerId(BASIC_POLYGONS);
        final String requestUrl = (("wms/kml?layers=" + layerId) + "&styles=polygon&mode=download&format_options=legend:true")// 
         + "&legend_options=fontStyle:bold;fontColor:ff0000;fontSize:18";
        Document doc = getAsDOM(requestUrl);
        // print(doc);
        Assert.assertEquals("kml", doc.getDocumentElement().getNodeName());
        // the icon itself
        XpathEngine xpath = XMLUnit.newXpathEngine();
        String href = xpath.evaluate("//kml:ScreenOverlay/kml:Icon/kml:href", doc);
        Assert.assertTrue(href.contains("request=GetLegendGraphic"));
        Assert.assertTrue(href.contains("layer=cite%3ABasicPolygons"));
        Assert.assertTrue(href.contains("style=polygon"));
        Assert.assertTrue(href.contains("LEGEND_OPTIONS=fontStyle%3Abold%3BfontColor%3Aff0000%3BfontSize%3A18"));
        // overlay location
        XMLAssert.assertXpathEvaluatesTo("0.0", "//kml:ScreenOverlay/kml:overlayXY/@x", doc);
        XMLAssert.assertXpathEvaluatesTo("0.0", "//kml:ScreenOverlay/kml:overlayXY/@y", doc);
        XMLAssert.assertXpathEvaluatesTo("pixels", "//kml:ScreenOverlay/kml:overlayXY/@xunits", doc);
        XMLAssert.assertXpathEvaluatesTo("pixels", "//kml:ScreenOverlay/kml:overlayXY/@yunits", doc);
        XMLAssert.assertXpathEvaluatesTo("10.0", "//kml:ScreenOverlay/kml:screenXY/@x", doc);
        XMLAssert.assertXpathEvaluatesTo("20.0", "//kml:ScreenOverlay/kml:screenXY/@y", doc);
        XMLAssert.assertXpathEvaluatesTo("pixels", "//kml:ScreenOverlay/kml:screenXY/@xunits", doc);
        XMLAssert.assertXpathEvaluatesTo("pixels", "//kml:ScreenOverlay/kml:screenXY/@yunits", doc);
    }

    @Test
    public void testLookatOptions() throws Exception {
        String layerId = getLayerId(BASIC_POLYGONS);
        final String requestUrl = (("wms/kml?layers=" + layerId) + "&styles=polygon&mode=download") + "&format_options=lookatbbox:-20,-20,20,20;altitude:10;heading:0;tilt:30;range:100;altitudemode:absolute";
        Document doc = getAsDOM(requestUrl);
        // print(doc);
        // overlay location
        XMLAssert.assertXpathEvaluatesTo("0.0", "//kml:Document/kml:LookAt/kml:longitude", doc);
        XMLAssert.assertXpathEvaluatesTo("0.0", "//kml:Document/kml:LookAt/kml:latitude", doc);
        XMLAssert.assertXpathEvaluatesTo("10.0", "//kml:Document/kml:LookAt/kml:altitude", doc);
        XMLAssert.assertXpathEvaluatesTo("0.0", "//kml:Document/kml:LookAt/kml:heading", doc);
        XMLAssert.assertXpathEvaluatesTo("30.0", "//kml:Document/kml:LookAt/kml:tilt", doc);
        XMLAssert.assertXpathEvaluatesTo("100.0", "//kml:Document/kml:LookAt/kml:range", doc);
        XMLAssert.assertXpathEvaluatesTo("absolute", "//kml:Document/kml:LookAt/kml:altitudeMode", doc);
    }

    @Test
    public void testExtendedData() throws Exception {
        String layerId = getLayerId(MockData.AGGREGATEGEOFEATURE);
        final String requestUrl = ("wms/kml?layers=" + layerId) + "&mode=download&extendedData=true&kmattr=false&kmscore=100";
        Document doc = getAsDOM(requestUrl);
        // print(doc);
        // there is one schema
        XMLAssert.assertXpathEvaluatesTo("1", "count(//kml:Document/kml:Schema)", doc);
        // check we only have the non geom properties
        XMLAssert.assertXpathEvaluatesTo("6", "count(//kml:Document/kml:Schema/kml:SimpleField)", doc);
        XMLAssert.assertXpathEvaluatesTo("0", "count(//kml:Document/kml:Schema/kml:SimpleField[@name='multiPointProperty'])", doc);
        XMLAssert.assertXpathEvaluatesTo("0", "count(//kml:Document/kml:Schema/kml:SimpleField[@name='multiCurveProperty'])", doc);
        XMLAssert.assertXpathEvaluatesTo("0", "count(//kml:Document/kml:Schema/kml:SimpleField[@name='multiSurfaceProperty'])", doc);
        // check the type mapping
        XMLAssert.assertXpathEvaluatesTo("string", "//kml:Document/kml:Schema/kml:SimpleField[@name='description']/@type", doc);
        XMLAssert.assertXpathEvaluatesTo("double", "//kml:Document/kml:Schema/kml:SimpleField[@name='doubleProperty']/@type", doc);
        XMLAssert.assertXpathEvaluatesTo("int", "//kml:Document/kml:Schema/kml:SimpleField[@name='intRangeProperty']/@type", doc);
        XMLAssert.assertXpathEvaluatesTo("string", "//kml:Document/kml:Schema/kml:SimpleField[@name='strProperty']/@type", doc);
        XMLAssert.assertXpathEvaluatesTo("string", "//kml:Document/kml:Schema/kml:SimpleField[@name='featureCode']/@type", doc);
        // check the extended data of one feature
        String sd = "//kml:Placemark[@id='AggregateGeoFeature.f005']/kml:ExtendedData/kml:SchemaData/kml:SimpleData";
        XMLAssert.assertXpathEvaluatesTo("description-f005", (sd + "[@name='description']"), doc);
        XMLAssert.assertXpathEvaluatesTo("name-f005", (sd + "[@name='name']"), doc);
        XMLAssert.assertXpathEvaluatesTo("2012.78", (sd + "[@name='doubleProperty']"), doc);
        XMLAssert.assertXpathEvaluatesTo(("Ma quande lingues coalesce, li grammatica del resultant " + ("lingue es plu simplic e regulari quam ti del coalescent lingues. Li nov lingua " + "franca va esser plu simplic e regulari quam li existent Europan lingues.")), (sd + "[@name='strProperty']"), doc);
        XMLAssert.assertXpathEvaluatesTo("BK030", (sd + "[@name='featureCode']"), doc);
    }

    @Test
    public void testHeightTemplate() throws Exception {
        File template = null;
        try {
            String layerId = getLayerId(MockData.LAKES);
            FeatureTypeInfo resource = getCatalog().getResourceByName(layerId, FeatureTypeInfo.class);
            File parent = getDataDirectory().findOrCreateResourceDir(resource);
            template = new File(parent, "height.ftl");
            FileUtils.write(template, "${FID.value}");
            final String requestUrl = ("wms/kml?layers=" + layerId) + "&mode=download";
            Document doc = getAsDOM(requestUrl);
            // print(doc);
            String base = "//kml:Placemark[@id='Lakes.1107531835962']/kml:MultiGeometry";
            XMLAssert.assertXpathEvaluatesTo("1", (("count(" + base) + ")"), doc);
            XMLAssert.assertXpathEvaluatesTo("1", (base + "/kml:Point/kml:extrude"), doc);
            XMLAssert.assertXpathEvaluatesTo("relativeToGround", (base + "/kml:Point/kml:altitudeMode"), doc);
            XMLAssert.assertXpathEvaluatesTo("0.0017851936218678816,-0.0010838268792710709,101.0", (base + "/kml:Point/kml:coordinates"), doc);
            XMLAssert.assertXpathEvaluatesTo("1", (base + "/kml:Polygon/kml:extrude"), doc);
            XMLAssert.assertXpathEvaluatesTo("relativeToGround", (base + "/kml:Polygon/kml:altitudeMode"), doc);
            assertXPathCoordinates("LinearRing", "6.0E-4,-0.0018,101.0 0.0010,-6.0E-4,101.0 0.0024,-1.0E-4,101.0 0.0031,-0.0015,101.0 6.0E-4,-0.0018,101.0", (base + "/kml:Polygon/kml:outerBoundaryIs/kml:LinearRing/kml:coordinates"), doc);
        } finally {
            if (template != null) {
                template.delete();
            }
        }
    }

    @Test
    public void testHeightTemplatePoint() throws Exception {
        File template = null;
        try {
            String layerId = getLayerId(POINTS);
            FeatureTypeInfo resource = getCatalog().getResourceByName(layerId, FeatureTypeInfo.class);
            File parent = getDataDirectory().findOrCreateResourceDir(resource);
            template = new File(parent, "height.ftl");
            FileUtils.write(template, "${altitude.value}");
            final String requestUrl = ("wms/kml?layers=" + layerId) + "&mode=download";
            Document doc = getAsDOM(requestUrl);
            String base = "//kml:Placemark[@id='Points.0']/kml:Point";
            XMLAssert.assertXpathEvaluatesTo("1", (("count(" + base) + ")"), doc);
            XMLAssert.assertXpathEvaluatesTo("1", (base + "/kml:extrude"), doc);
            XMLAssert.assertXpathEvaluatesTo("relativeToGround", (base + "/kml:altitudeMode"), doc);
        } finally {
            if (template != null) {
                template.delete();
            }
        }
    }

    @Test
    public void testHeightTemplateNoExtrude() throws Exception {
        File template = null;
        try {
            String layerId = getLayerId(MockData.LAKES);
            FeatureTypeInfo resource = getCatalog().getResourceByName(layerId, FeatureTypeInfo.class);
            File parent = getDataDirectory().findOrCreateResourceDir(resource);
            template = new File(parent, "height.ftl");
            FileUtils.write(template, "${FID.value}");
            final String requestUrl = ("wms/kml?layers=" + layerId) + "&mode=download&extrude=false";
            Document doc = getAsDOM(requestUrl);
            // print(doc);
            String base = "//kml:Placemark[@id='Lakes.1107531835962']/kml:MultiGeometry";
            XMLAssert.assertXpathEvaluatesTo("1", (("count(" + base) + ")"), doc);
            XMLAssert.assertXpathEvaluatesTo("0", (base + "/kml:Point/kml:extrude"), doc);
            XMLAssert.assertXpathEvaluatesTo("relativeToGround", (base + "/kml:Point/kml:altitudeMode"), doc);
            XMLAssert.assertXpathEvaluatesTo("0.0017851936218678816,-0.0010838268792710709,101.0", (base + "/kml:Point/kml:coordinates"), doc);
            XMLAssert.assertXpathEvaluatesTo("0", (base + "/kml:Polygon/kml:extrude"), doc);
            XMLAssert.assertXpathEvaluatesTo("relativeToGround", (base + "/kml:Polygon/kml:altitudeMode"), doc);
            // Coordinate Formatting in JDK 1.7.0 does not include trailing 0 - see GEOS-5973
            // JDK 1.6: 0.0010
            // JDK 1.7: 0.001
            assertXPathCoordinates("kml:LinearRing", "6.0E-4,-0.0018,101.0 0.001,-6.0E-4,101.0 0.0024,-1.0E-4,101.0 0.0031,-0.0015,101.0 6.0E-4,-0.0018,101.0", (base + "/kml:Polygon/kml:outerBoundaryIs/kml:LinearRing/kml:coordinates"), doc);
        } finally {
            if (template != null) {
                template.delete();
            }
        }
    }

    /**
     * Verify that when GE asks for coordinates larger than 180 we still manage gracefully
     */
    @Test
    public void testCoordinateShift() throws Exception {
        Document document = getAsDOM((("wms/kml?layers=" + (getLayerId(BASIC_POLYGONS))) + "&mode=download&bbox=150,-90,380,90"));
        // print(document);
        Assert.assertEquals(3, document.getElementsByTagName("Placemark").getLength());
    }

    @Test
    public void testValidKML() throws Exception {
        GetMapRequest req = createGetMapRequest(MockData.STREAMS);
        req.setWidth(256);
        req.setHeight(256);
        WMSMapContent mapContent = new WMSMapContent(req);
        mapContent.addLayer(createMapLayer(MockData.STREAMS, "big-local-image"));
        mapContent.getViewport().setBounds(new org.geotools.geometry.jts.ReferencedEnvelope((-180), 0, (-90), 90, DefaultGeographicCRS.WGS84));
        mapContent.setMapHeight(256);
        mapContent.setMapWidth(256);
        KMLMapOutputFormat of = new KMLMapOutputFormat(getWMS());
        KMLMap map = of.produceMap(mapContent);
        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        new KMLEncoder().encode(map.getKml(), bout, null);
        // Explicitly check for known bugs in the JavaAPIforKml library.
        // https://osgeo-org.atlassian.net/browse/GEOS-7963
        // https://github.com/micromata/javaapiforkml/issues/9
        Document document = dom(new ByteArrayInputStream(bout.toByteArray()));
        // print(document);
        XMLAssert.assertXpathNotExists("//kml:IconStyle/kml:Icon/kml:refreshInterval", document);
        XMLAssert.assertXpathNotExists("//kml:IconStyle/kml:Icon/kml:viewRefreshTime", document);
        XMLAssert.assertXpathNotExists("//kml:IconStyle/kml:Icon/kml:viewBoundScale", document);
        // Validate against the KML 2.2 schema.
        Unmarshaller unmarshaller = JAXBContext.newInstance(Kml.class).createUnmarshaller();
        unmarshaller.setSchema(SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI).newSchema(new Source[]{ new StreamSource(getClass().getResource("/org/geoserver/kml/xAL.xsd").toExternalForm()), new StreamSource(getClass().getResource("/schema/ogckml/ogckml22.xsd").toExternalForm()) }));
        unmarshaller.unmarshal(document);
    }

    @Test
    public void testExternalImageSize() throws Exception {
        GetMapRequest req = createGetMapRequest(MockData.STREAMS);
        req.setWidth(256);
        req.setHeight(256);
        WMSMapContent mapContent = new WMSMapContent(req);
        mapContent.addLayer(createMapLayer(MockData.STREAMS, "big-local-image"));
        mapContent.getViewport().setBounds(new org.geotools.geometry.jts.ReferencedEnvelope((-180), 0, (-90), 90, DefaultGeographicCRS.WGS84));
        mapContent.setMapHeight(256);
        mapContent.setMapWidth(256);
        KMLMapOutputFormat of = new KMLMapOutputFormat(getWMS());
        KMLMap map = of.produceMap(mapContent);
        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        new KMLEncoder().encode(map.getKml(), bout, null);
        Document document = dom(new ByteArrayInputStream(bout.toByteArray()));
        Assert.assertEquals("kml", document.getDocumentElement().getNodeName());
        Assert.assertEquals(1, document.getElementsByTagName("Style").getLength());
        XMLAssert.assertXpathExists("//kml:IconStyle/kml:scale", document);
        XPath xPath = XPathFactory.newInstance().newXPath();
        initXPath(xPath);
        Double scale = ((Double) (xPath.evaluate("//kml:IconStyle/kml:scale", document.getDocumentElement(), XPathConstants.NUMBER)));
        Assert.assertEquals((42.0 / 16.0), scale, 0.01);
    }

    @Test
    public void testKmzEmbededPointImageSize() throws Exception {
        WMSMapContent mapContent = createMapContext(POINTS, "big-mark");
        File temp = File.createTempFile("test", "kmz", new File("target"));
        temp.delete();
        temp.mkdir();
        temp.deleteOnExit();
        File zip = new File(temp, "kmz.zip");
        zip.deleteOnExit();
        // create hte map producer
        KMZMapOutputFormat mapProducer = new KMZMapOutputFormat(getWMS());
        KMLMap map = mapProducer.produceMap(mapContent);
        FileOutputStream output = new FileOutputStream(zip);
        new KMLMapResponse(new KMLEncoder(), getWMS()).write(map, output, null);
        output.flush();
        output.close();
        Assert.assertTrue(zip.exists());
        // unzip and test it
        ZipFile zipFile = new ZipFile(zip);
        ZipEntry kmlEntry = zipFile.getEntry("wms.kml");
        InputStream kmlStream = zipFile.getInputStream(kmlEntry);
        Document kmlResult = XMLUnit.buildTestDocument(new InputSource(kmlStream));
        Double scale = Double.parseDouble(XMLUnit.newXpathEngine().getMatchingNodes("(//kml:Style)[1]/kml:IconStyle/kml:scale", kmlResult).item(0).getTextContent());
        Assert.assertEquals((49.0 / 16.0), scale, 0.01);
        zipFile.close();
    }

    /**
     * Method testLookatOptionsWithRefreshMode tests if the two altitude values are obtained from
     * the corresponding bounding box. The first value (//kml:Document/kml:LookAt/kml:altitude) is
     * calculated from the initial bounding box. The second value
     * (//kml:Document/kml:NetworkLink/kml:LookAt/kml:altitude) is calculated from the bounding box
     * passed to the WMS request. Test fails if those values are identical.
     *
     * @see <a href="https://osgeo-org.atlassian.net/browse/GEOS-6410">GEOS-6410</a>
     */
    @Test
    public void testLookatOptionsWithRefreshMode() throws Exception {
        String layerId = getLayerId(BASIC_POLYGONS);
        final String requestUrl = ("wms/kml?layers=" + layerId) + "&styles=polygon&mode=refresh&bbox=10.56,46.99,11.50,47.26";
        Document doc = getAsDOM(requestUrl);
        // we expect that those values should not be the same, because first value is obtained from
        // initial bbox of the layer, while the second value from the bbox of the request
        XMLAssert.assertXpathValuesNotEqual("//kml:Document/kml:LookAt/kml:altitude", "//kml:Document/kml:NetworkLink/kml:LookAt/kml:altitude", doc);
    }

    /**
     * Method testWMSTimeRequest tests if the time parameter of the request is also passed to the
     * KML WMS request.
     *
     * @see <a href="https://osgeo-org.atlassian.net/browse/GEOS-6411">GEOS-6411</a>
     */
    @Test
    public void testWMSTimeRequest() throws Exception {
        String layerId = getLayerId(BASIC_POLYGONS);
        String expectedTS = "time=2014-03-01";
        final String requestUrl = (("wms/kml?layers=" + layerId) + "&styles=polygon&mode=refresh&bbox=10.56,46.99,11.50,47.26&") + expectedTS;
        Document doc = getAsDOM(requestUrl);
        // we expect that those values should not be the same, because first value is obtained from
        // initial bbox of the layer, while the second value from the bbox of the request
        NodeList nodes = doc.getElementsByTagName("href");
        for (int i = 0; i < (nodes.getLength()); ++i) {
            Element e = ((Element) (nodes.item(i)));
            String actualTS = e.getTextContent();
            Assert.assertTrue("Time parameter missing", actualTS.contains(expectedTS));
        }
    }

    /**
     * Method testWMSElevationRequest tests if the elevation parameter of the request is also passed
     * to the KML WMS request.
     *
     * @see <a href="https://osgeo-org.atlassian.net/browse/GEOS-6411">GEOS-6411</a>
     */
    @Test
    public void testWMSElevationRequest() throws Exception {
        String layerId = getLayerId(BASIC_POLYGONS);
        String expectedTS = "elevation=500";
        final String requestUrl = (("wms/kml?layers=" + layerId) + "&styles=polygon&mode=refresh&bbox=10.56,46.99,11.50,47.26&") + expectedTS;
        Document doc = getAsDOM(requestUrl);
        // we expect that those values should not be the same, because first value is obtained from
        // initial bbox of the layer, while the second value from the bbox of the request
        NodeList nodes = doc.getElementsByTagName("href");
        for (int i = 0; i < (nodes.getLength()); ++i) {
            Element e = ((Element) (nodes.item(i)));
            String actualTS = e.getTextContent();
            Assert.assertTrue("Elevation parameter missing", actualTS.contains(expectedTS));
        }
    }
}

