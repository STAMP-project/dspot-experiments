/**
 * Copyright 2018-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.data.elasticsearch.core;


import java.net.ConnectException;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.IntFunction;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.dao.DataAccessResourceFailureException;
import org.springframework.data.annotation.Id;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.elasticsearch.ElasticsearchVersion;
import org.springframework.data.elasticsearch.ElasticsearchVersionRule;
import org.springframework.data.elasticsearch.TestUtils;
import org.springframework.data.elasticsearch.annotations.Document;
import org.springframework.data.elasticsearch.core.query.Criteria;
import org.springframework.data.elasticsearch.core.query.CriteriaQuery;
import org.springframework.data.elasticsearch.core.query.IndexQuery;
import org.springframework.data.elasticsearch.entities.SampleEntity;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import reactor.core.publisher.Mono;


/**
 * Integration tests for {@link ReactiveElasticsearchTemplate}.
 *
 * @author Christoph Strobl
 * @author Mark Paluch
 * @unknown Golden Fool - Robin Hobb
 */
@RunWith(SpringRunner.class)
@ContextConfiguration("classpath:infrastructure.xml")
public class ReactiveElasticsearchTemplateTests {
    @Rule
    public ElasticsearchVersionRule elasticsearchVersion = ElasticsearchVersionRule.any();

    static final String DEFAULT_INDEX = "test-index-sample";

    static final String ALTERNATE_INDEX = "reactive-template-tests-alternate-index";

    private ElasticsearchRestTemplate restTemplate;

    private ReactiveElasticsearchTemplate template;

    // DATAES-504
    @Test
    public void executeShouldProvideResource() {
        // 
        // 
        // 
        Mono.from(template.execute(( client) -> client.ping())).as(StepVerifier::create).expectNext(true).verifyComplete();
    }

    // DATAES-504
    @Test
    public void executeShouldConvertExceptions() {
        // 
        // 
        // 
        Mono.from(template.execute(( client) -> {
            throw new RuntimeException(new ConnectException("we're doomed"));
        })).as(StepVerifier::create).expectError(DataAccessResourceFailureException.class).verify();
    }

    // DATAES-504
    @Test
    public void insertWithIdShouldWork() {
        SampleEntity sampleEntity = randomEntity("foo bar");
        // 
        // 
        // 
        template.save(sampleEntity).as(StepVerifier::create).expectNextCount(1).verifyComplete();
        restTemplate.refresh(SampleEntity.class);
        List<SampleEntity> result = restTemplate.queryForList(new CriteriaQuery(Criteria.where("message").is(getMessage())), SampleEntity.class);
        assertThat(result).hasSize(1);
    }

    // DATAES-504
    @Test
    public void insertWithAutogeneratedIdShouldUpdateEntityId() {
        SampleEntity sampleEntity = builder().message("wohoo").build();
        // 
        // 
        // 
        template.save(sampleEntity).as(StepVerifier::create).consumeNextWith(( it) -> {
            assertThat(it.getId()).isNotNull();
            restTemplate.refresh(.class);
            assertThat(TestUtils.documentWithId(it.getId()).existsIn(DEFAULT_INDEX)).isTrue();
        }).verifyComplete();
    }

    // DATAES-504
    @Test
    public void insertWithExplicitIndexNameShouldOverwriteMetadata() {
        SampleEntity sampleEntity = randomEntity("in another index");
        // 
        // 
        // 
        template.save(sampleEntity, ReactiveElasticsearchTemplateTests.ALTERNATE_INDEX).as(StepVerifier::create).expectNextCount(1).verifyComplete();
        restTemplate.refresh(ReactiveElasticsearchTemplateTests.DEFAULT_INDEX);
        restTemplate.refresh(ReactiveElasticsearchTemplateTests.ALTERNATE_INDEX);
        assertThat(TestUtils.documentWithId(getId()).existsIn(ReactiveElasticsearchTemplateTests.DEFAULT_INDEX)).isFalse();
        assertThat(TestUtils.documentWithId(getId()).existsIn(ReactiveElasticsearchTemplateTests.ALTERNATE_INDEX)).isTrue();
    }

    // DATAES-504
    @Test
    public void insertShouldAcceptPlainMapStructureAsSource() {
        Map<String, Object> map = new LinkedHashMap<>(Collections.singletonMap("foo", "bar"));
        // 
        // 
        template.save(map, ReactiveElasticsearchTemplateTests.ALTERNATE_INDEX, "singleton-map").as(StepVerifier::create).consumeNextWith(( actual) -> {
            assertThat(map).containsKey("id");
        }).verifyComplete();
    }

    // DATAES-504
    @Test(expected = IllegalArgumentException.class)
    public void insertShouldErrorOnNullEntity() {
        template.save(null);
    }

    // DATAES-519
    @Test
    public void findByIdShouldCompleteWhenIndexDoesNotExist() {
        // 
        // 
        template.findById("foo", SampleEntity.class, "no-such-index").as(StepVerifier::create).verifyComplete();
    }

    // DATAES-504
    @Test
    public void findByIdShouldReturnEntity() {
        SampleEntity sampleEntity = randomEntity("some message");
        index(sampleEntity);
        // 
        // 
        // 
        template.findById(getId(), SampleEntity.class).as(StepVerifier::create).expectNext(sampleEntity).verifyComplete();
    }

    // DATAES-504
    @Test
    public void findByIdWhenIdIsAutogeneratedShouldHaveIdSetCorrectly() {
        SampleEntity sampleEntity = new SampleEntity();
        setMessage("some message");
        index(sampleEntity);
        assertThat(getId()).isNotNull();
        // 
        // 
        // 
        template.findById(getId(), SampleEntity.class).as(StepVerifier::create).consumeNextWith(( it) -> assertThat(it.getId()).isEqualTo(sampleEntity.getId())).verifyComplete();
    }

    // DATAES-504
    @Test
    public void findByIdShouldCompleteWhenNotingFound() {
        SampleEntity sampleEntity = randomEntity("some message");
        index(sampleEntity);
        // 
        // 
        template.findById("foo", SampleEntity.class).as(StepVerifier::create).verifyComplete();
    }

    // DATAES-504
    @Test(expected = IllegalArgumentException.class)
    public void findByIdShouldErrorForNullId() {
        template.findById(null, SampleEntity.class);
    }

    // DATAES-504
    @Test
    public void findByIdWithExplicitIndexNameShouldOverwriteMetadata() {
        SampleEntity sampleEntity = randomEntity("some message");
        IndexQuery indexQuery = getIndexQuery(sampleEntity);
        indexQuery.setIndexName(ReactiveElasticsearchTemplateTests.ALTERNATE_INDEX);
        restTemplate.index(indexQuery);
        restTemplate.refresh(SampleEntity.class);
        restTemplate.refresh(ReactiveElasticsearchTemplateTests.DEFAULT_INDEX);
        restTemplate.refresh(ReactiveElasticsearchTemplateTests.ALTERNATE_INDEX);
        // 
        // 
        template.findById(getId(), SampleEntity.class).as(StepVerifier::create).verifyComplete();
        // 
        // 
        // 
        template.findById(getId(), SampleEntity.class, ReactiveElasticsearchTemplateTests.ALTERNATE_INDEX).as(StepVerifier::create).expectNextCount(1).verifyComplete();
    }

    // DATAES-519
    @Test
    public void existsShouldReturnFalseWhenIndexDoesNotExist() {
        // 
        // 
        // 
        template.exists("foo", SampleEntity.class, "no-such-index").as(StepVerifier::create).expectNext(false).verifyComplete();
    }

    // DATAES-504
    @Test
    public void existsShouldReturnTrueWhenFound() {
        SampleEntity sampleEntity = randomEntity("some message");
        index(sampleEntity);
        // 
        // 
        // 
        template.exists(getId(), SampleEntity.class).as(StepVerifier::create).expectNext(true).verifyComplete();
    }

    // DATAES-504
    @Test
    public void existsShouldReturnFalseWhenNotFound() {
        SampleEntity sampleEntity = randomEntity("some message");
        index(sampleEntity);
        // 
        // 
        // 
        template.exists("foo", SampleEntity.class).as(StepVerifier::create).expectNext(false).verifyComplete();
    }

    // DATAES-519
    @Test
    public void findShouldCompleteWhenIndexDoesNotExist() {
        // 
        // 
        template.find(new CriteriaQuery(Criteria.where("message").is("some message")), SampleEntity.class, "no-such-index").as(StepVerifier::create).verifyComplete();
    }

    // DATAES-504
    @Test
    public void findShouldApplyCriteria() {
        SampleEntity sampleEntity = randomEntity("some message");
        index(sampleEntity);
        CriteriaQuery criteriaQuery = new CriteriaQuery(Criteria.where("message").is("some message"));
        // 
        // 
        // 
        template.find(criteriaQuery, SampleEntity.class).as(StepVerifier::create).expectNext(sampleEntity).verifyComplete();
    }

    // DATAES-504
    @Test
    public void findShouldReturnEmptyFluxIfNothingFound() {
        SampleEntity sampleEntity = randomEntity("some message");
        index(sampleEntity);
        CriteriaQuery criteriaQuery = new CriteriaQuery(Criteria.where("message").is("foo"));
        // 
        // 
        template.find(criteriaQuery, SampleEntity.class).as(StepVerifier::create).verifyComplete();
    }

    // DATAES-504
    @Test
    public void shouldAllowStringBasedQuery() {
        index(randomEntity("test message"), randomEntity("test test"), randomEntity("some message"));
        // 
        // 
        // 
        template.find(new org.springframework.data.elasticsearch.core.query.StringQuery(matchAllQuery().toString()), SampleEntity.class).as(StepVerifier::create).expectNextCount(3).verifyComplete();
    }

    // DATAES-504
    @Test
    public void shouldExecuteGivenCriteriaQuery() {
        SampleEntity shouldMatch = randomEntity("test message");
        SampleEntity shouldNotMatch = randomEntity("the dog ate my homework");
        index(shouldMatch, shouldNotMatch);
        CriteriaQuery query = new CriteriaQuery(new Criteria("message").contains("test"));
        // 
        // 
        // 
        template.find(query, SampleEntity.class).as(StepVerifier::create).expectNext(shouldMatch).verifyComplete();
    }

    // DATAES-504
    @Test
    public void shouldReturnListForGivenCriteria() {
        SampleEntity sampleEntity1 = randomEntity("test message");
        SampleEntity sampleEntity2 = randomEntity("test test");
        SampleEntity sampleEntity3 = randomEntity("some message");
        index(sampleEntity1, sampleEntity2, sampleEntity3);
        CriteriaQuery query = new CriteriaQuery(new Criteria("message").contains("some").and("message").contains("message"));
        // 
        // 
        // 
        template.find(query, SampleEntity.class).as(StepVerifier::create).expectNext(sampleEntity3).verifyComplete();
    }

    // DATAES-504
    @Test
    public void shouldReturnProjectedTargetEntity() {
        SampleEntity sampleEntity1 = randomEntity("test message");
        SampleEntity sampleEntity2 = randomEntity("test test");
        SampleEntity sampleEntity3 = randomEntity("some message");
        index(sampleEntity1, sampleEntity2, sampleEntity3);
        CriteriaQuery query = new CriteriaQuery(new Criteria("message").contains("some").and("message").contains("message"));
        // 
        // 
        // 
        template.find(query, SampleEntity.class, ReactiveElasticsearchTemplateTests.Message.class).as(StepVerifier::create).expectNext(new ReactiveElasticsearchTemplateTests.Message(getMessage())).verifyComplete();
    }

    // DATAES-518
    @Test
    public void findShouldApplyPagingCorrectly() {
        List<SampleEntity> source = IntStream.range(0, 100).mapToObj(( it) -> randomEntity(("entity - " + it))).collect(Collectors.toList());
        index(source.toArray(new SampleEntity[0]));
        CriteriaQuery query = // 
        // 
        new CriteriaQuery(new Criteria("message").contains("entity")).addSort(Sort.by("message")).setPageable(PageRequest.of(0, 20));
        // 
        // 
        template.find(query, SampleEntity.class).as(StepVerifier::create).expectNextCount(20).verifyComplete();
    }

    // DATAES-518
    @Test
    public void findWithoutPagingShouldReadAll() {
        List<SampleEntity> source = IntStream.range(0, 100).mapToObj(( it) -> randomEntity(("entity - " + it))).collect(Collectors.toList());
        index(source.toArray(new SampleEntity[0]));
        CriteriaQuery query = // 
        // 
        new CriteriaQuery(new Criteria("message").contains("entity")).addSort(Sort.by("message")).setPageable(Pageable.unpaged());
        // 
        // 
        template.find(query, SampleEntity.class).as(StepVerifier::create).expectNextCount(100).verifyComplete();
    }

    // DATAES-519
    @Test
    public void countShouldReturnZeroWhenIndexDoesNotExist() {
        // 
        // 
        // 
        template.count(SampleEntity.class).as(StepVerifier::create).expectNext(0L).verifyComplete();
    }

    // DATAES-504
    @Test
    public void countShouldReturnCountAllWhenGivenNoQuery() {
        index(randomEntity("test message"), randomEntity("test test"), randomEntity("some message"));
        // 
        // 
        // 
        template.count(SampleEntity.class).as(StepVerifier::create).expectNext(3L).verifyComplete();
    }

    // DATAES-504
    @Test
    public void countShouldReturnCountMatchingDocuments() {
        index(randomEntity("test message"), randomEntity("test test"), randomEntity("some message"));
        CriteriaQuery query = new CriteriaQuery(new Criteria("message").contains("test"));
        // 
        // 
        // 
        template.count(query, SampleEntity.class).as(StepVerifier::create).expectNext(2L).verifyComplete();
    }

    // DATAES-519
    @Test
    public void deleteByIdShouldCompleteWhenIndexDoesNotExist() {
        // 
        // 
        template.deleteById("does-not-exists", SampleEntity.class, "no-such-index").as(StepVerifier::create).verifyComplete();
    }

    // DATAES-504
    @Test
    public void deleteByIdShouldRemoveExistingDocumentById() {
        SampleEntity sampleEntity = randomEntity("test message");
        index(sampleEntity);
        // 
        // 
        // 
        template.deleteById(getId(), SampleEntity.class).as(StepVerifier::create).expectNext(getId()).verifyComplete();
    }

    // DATAES-504
    @Test
    public void deleteShouldRemoveExistingDocumentByIdUsingIndexName() {
        SampleEntity sampleEntity = randomEntity("test message");
        index(sampleEntity);
        // 
        // 
        // 
        template.deleteById(getId(), ReactiveElasticsearchTemplateTests.DEFAULT_INDEX, "test-type").as(StepVerifier::create).expectNext(getId()).verifyComplete();
    }

    // DATAES-504
    @Test
    public void deleteShouldRemoveExistingDocument() {
        SampleEntity sampleEntity = randomEntity("test message");
        index(sampleEntity);
        // 
        // 
        // 
        template.delete(sampleEntity).as(StepVerifier::create).expectNext(getId()).verifyComplete();
    }

    // DATAES-504
    @Test
    public void deleteByIdShouldCompleteWhenNothingDeleted() {
        SampleEntity sampleEntity = randomEntity("test message");
        // 
        // 
        template.delete(sampleEntity).as(StepVerifier::create).verifyComplete();
    }

    // DATAES-519
    @Test
    @ElasticsearchVersion(asOf = "6.5.0")
    public void deleteByQueryShouldReturnZeroWhenIndexDoesNotExist() {
        CriteriaQuery query = new CriteriaQuery(new Criteria("message").contains("test"));
        // 
        // 
        // 
        template.deleteBy(query, SampleEntity.class).as(StepVerifier::create).expectNext(0L).verifyComplete();
    }

    // DATAES-504
    @Test
    @ElasticsearchVersion(asOf = "6.5.0")
    public void deleteByQueryShouldReturnNumberOfDeletedDocuments() {
        index(randomEntity("test message"), randomEntity("test test"), randomEntity("some message"));
        CriteriaQuery query = new CriteriaQuery(new Criteria("message").contains("test"));
        // 
        // 
        // 
        template.deleteBy(query, SampleEntity.class).as(StepVerifier::create).expectNext(2L).verifyComplete();
    }

    // DATAES-504
    @Test
    @ElasticsearchVersion(asOf = "6.5.0")
    public void deleteByQueryShouldReturnZeroIfNothingDeleted() {
        index(randomEntity("test message"));
        CriteriaQuery query = new CriteriaQuery(new Criteria("message").contains("luke"));
        // 
        // 
        // 
        template.deleteBy(query, SampleEntity.class).as(StepVerifier::create).expectNext(0L).verifyComplete();
    }

    @Data
    @Document(indexName = "marvel", type = "characters")
    static class Person {
        @Id
        private String id;

        private String name;

        private int age;

        public Person() {
        }

        public Person(String name, int age) {
            this.name = name;
            this.age = age;
        }
    }

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    static class Message {
        String message;
    }
}

