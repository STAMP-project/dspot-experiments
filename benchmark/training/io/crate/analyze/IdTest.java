/**
 * Licensed to CRATE Technology GmbH ("Crate") under one or more contributor
 * license agreements.  See the NOTICE file distributed with this work for
 * additional information regarding copyright ownership.  Crate licenses
 * this file to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.  You may
 * obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * However, if you have executed another commercial license agreement
 * with Crate these terms will supersede the license and you may use the
 * software solely pursuant to the terms of the relevant commercial agreement.
 */
package io.crate.analyze;


import com.google.common.collect.ImmutableList;
import io.crate.metadata.ColumnIdent;
import io.crate.test.integration.CrateUnitTest;
import java.util.Collections;
import java.util.NoSuchElementException;
import org.hamcrest.Matchers;
import org.hamcrest.core.Is;
import org.junit.Test;


public class IdTest extends CrateUnitTest {
    private static final ColumnIdent _ID = IdTest.ci("_id");

    private static final ImmutableList<ColumnIdent> _ID_LIST = ImmutableList.of(IdTest._ID);

    private static final ImmutableList<String> EMPTY_PK_VALUES = ImmutableList.of();

    @Test
    public void testAutoGenerated() throws Exception {
        String id1 = IdTest.generateId(IdTest._ID_LIST, IdTest.EMPTY_PK_VALUES, IdTest._ID);
        String id2 = IdTest.generateId(IdTest._ID_LIST, IdTest.EMPTY_PK_VALUES, IdTest._ID);
        assertThat(id1, Matchers.not(Matchers.equalTo(id2)));
    }

    @Test
    public void testAutoGeneratedWithRouting() throws Exception {
        // routing is actually not relevant for _id
        String id1 = IdTest.generateId(IdTest._ID_LIST, IdTest.EMPTY_PK_VALUES, IdTest.ci("foo"));
        String id2 = IdTest.generateId(IdTest._ID_LIST, IdTest.EMPTY_PK_VALUES, IdTest.ci("foo"));
        assertThat(id1, Matchers.not(Matchers.equalTo(id2)));
    }

    @Test
    public void testSinglePrimaryKey() throws Exception {
        String id = IdTest.generateId(ImmutableList.of(IdTest.ci("id")), ImmutableList.of("1"), IdTest.ci("id"));
        assertThat(id, Is.is("1"));
    }

    @Test
    public void testSinglePrimaryKeyWithoutValue() throws Exception {
        expectedException.expect(NoSuchElementException.class);
        IdTest.generateId(ImmutableList.of(IdTest.ci("id")), Collections.emptyList(), IdTest.ci("id"));
    }

    @Test
    public void testMultiplePrimaryKey() throws Exception {
        String id = IdTest.generateId(ImmutableList.of(IdTest.ci("id"), IdTest.ci("name")), ImmutableList.of("1", "foo"), null);
        assertThat(id, Is.is("AgExA2Zvbw=="));
    }

    @Test
    public void testMultiplePrimaryKeyWithClusteredBy() throws Exception {
        String id = IdTest.generateId(ImmutableList.of(IdTest.ci("id"), IdTest.ci("name")), ImmutableList.of("1", "foo"), IdTest.ci("name"));
        assertThat(id, Is.is("AgNmb28BMQ=="));
    }

    @Test
    public void testNull() throws Exception {
        expectedException.expect(IllegalArgumentException.class);
        expectedException.expectMessage("A primary key value must not be NULL");
        IdTest.generateId(ImmutableList.of(IdTest.ci("id")), Collections.singletonList(null), IdTest.ci("id"));
    }
}

