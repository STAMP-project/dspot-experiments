/**
 * JBoss, Home of Professional Open Source.
 * Copyright 2014 Red Hat, Inc., and individual contributors
 * as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package io.undertow.server.handlers.file;


import io.undertow.predicate.Predicates;
import io.undertow.server.handlers.CanonicalPathHandler;
import io.undertow.server.handlers.PathHandler;
import io.undertow.server.handlers.encoding.ContentEncodingRepository;
import io.undertow.server.handlers.encoding.GzipEncodingProvider;
import io.undertow.testutils.DefaultServer;
import io.undertow.testutils.TestHttpClient;
import java.io.IOException;
import java.net.URISyntaxException;
import java.nio.file.Path;
import java.nio.file.Paths;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.junit.Test;
import org.junit.runner.RunWith;


/**
 *
 *
 * @author Stuart Douglas
 */
@RunWith(DefaultServer.class)
public class PreCompressedResourceTestCase {
    @Test
    public void testContentEncodedResource() throws IOException, URISyntaxException {
        HttpGet get = new HttpGet(((DefaultServer.getDefaultServerURL()) + "/path/page.html"));
        TestHttpClient client = new TestHttpClient();
        Path rootPath = Paths.get(getClass().getResource("page.html").toURI()).getParent();
        try (CloseableHttpClient compClient = HttpClientBuilder.create().build()) {
            DefaultServer.setRootHandler(new CanonicalPathHandler().setNext(new PathHandler().addPrefixPath("/path", setDirectoryListingEnabled(true))));
            // assert response without compression
            final String plainResponse = assertResponse(client.execute(get), false);
            // assert compressed response, that doesn't exists, so returns plain
            assertResponse(compClient.execute(get), false, plainResponse);
            // generate compressed resource with extension .gz
            generatePreCompressedResource("gz");
            // assert compressed response that was pre compressed
            assertResponse(compClient.execute(get), true, plainResponse, "gz");
        } finally {
            client.getConnectionManager().shutdown();
        }
    }

    @Test
    public void testCorrectResourceSelected() throws IOException, URISyntaxException {
        HttpGet get = new HttpGet(((DefaultServer.getDefaultServerURL()) + "/path/page.html"));
        TestHttpClient client = new TestHttpClient();
        Path rootPath = Paths.get(getClass().getResource("page.html").toURI()).getParent();
        try (CloseableHttpClient compClient = HttpClientBuilder.create().build()) {
            DefaultServer.setRootHandler(new CanonicalPathHandler().setNext(new PathHandler().addPrefixPath("/path", new io.undertow.server.handlers.encoding.EncodingHandler(new ContentEncodingRepository().addEncodingHandler("gzip", new GzipEncodingProvider(), 50, Predicates.truePredicate())).setNext(setDirectoryListingEnabled(true)))));
            // assert response without compression
            final String plainResponse = assertResponse(client.execute(get), false);
            // assert compressed response generated by filter
            assertResponse(compClient.execute(get), true, plainResponse);
            // generate resources
            generatePreCompressedResource("gzip");
            generatePreCompressedResource("nonsense");
            generatePreCompressedResource("gzip.nonsense");
            // assert compressed response that was pre compressed
            assertResponse(compClient.execute(get), true, plainResponse, "gzip");
        } finally {
            client.getConnectionManager().shutdown();
        }
    }
}

