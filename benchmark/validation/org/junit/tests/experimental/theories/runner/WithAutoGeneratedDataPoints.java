package org.junit.tests.experimental.theories.runner;


import org.junit.Assert;
import org.junit.Test;
import org.junit.experimental.theories.DataPoint;
import org.junit.experimental.theories.Theories;
import org.junit.runner.RunWith;
import org.junit.tests.experimental.theories.TheoryTestUtils;


public class WithAutoGeneratedDataPoints {
    private enum ENUM {

        VALUE,
        OTHER_VALUE,
        THIRD_VALUE;}

    @RunWith(Theories.class)
    public static class TheoryTestClassWithAutogeneratedParameterValues {
        public void theory(WithAutoGeneratedDataPoints.ENUM e) {
        }

        public void theory(boolean b) {
        }
    }

    @Test
    public void shouldAutomaticallyGenerateEnumDataPoints() throws Throwable {
        Assert.assertEquals(WithAutoGeneratedDataPoints.ENUM.values().length, TheoryTestUtils.potentialAssignments(WithAutoGeneratedDataPoints.TheoryTestClassWithAutogeneratedParameterValues.class.getMethod("theory", WithAutoGeneratedDataPoints.ENUM.class)).size());
    }

    @Test
    public void shouldAutomaticallyGenerateBooleanDataPoints() throws Throwable {
        Assert.assertEquals(2, TheoryTestUtils.potentialAssignments(WithAutoGeneratedDataPoints.TheoryTestClassWithAutogeneratedParameterValues.class.getMethod("theory", boolean.class)).size());
    }

    @RunWith(Theories.class)
    public static class TheoryTestClassWithSpecificEnumDataPoint {
        @DataPoint
        public static WithAutoGeneratedDataPoints.ENUM value = WithAutoGeneratedDataPoints.ENUM.OTHER_VALUE;

        public void theory(WithAutoGeneratedDataPoints.ENUM e) {
        }
    }

    @Test
    public void shouldNotAutogenerateEnumDataPointsWhenSpecificDataPointGiven() throws Throwable {
        Assert.assertEquals(1, TheoryTestUtils.potentialAssignments(WithAutoGeneratedDataPoints.TheoryTestClassWithSpecificEnumDataPoint.class.getMethod("theory", WithAutoGeneratedDataPoints.ENUM.class)).size());
    }

    @RunWith(Theories.class)
    public static class TheoryTestClassWithSpecificBooleanDataPoint {
        @DataPoint
        public static boolean value = true;

        public void theory(boolean b) {
        }
    }

    @Test
    public void shouldNotAutogenerateBooleanDataPointsWhenSpecificDataPointGiven() throws Throwable {
        Assert.assertEquals(1, TheoryTestUtils.potentialAssignments(WithAutoGeneratedDataPoints.TheoryTestClassWithSpecificBooleanDataPoint.class.getMethod("theory", boolean.class)).size());
    }
}

