/**
 * Copyright 2012-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.boot.autoconfigure.security;


import SecurityProperties.User;
import org.junit.Test;
import org.springframework.boot.context.properties.bind.Bindable;
import org.springframework.boot.context.properties.bind.Binder;
import org.springframework.boot.context.properties.source.MapConfigurationPropertySource;


/**
 * Tests for {@link SecurityProperties}.
 *
 * @author Dave Syer
 * @author Madhura Bhave
 */
public class SecurityPropertiesTests {
    private SecurityProperties security = new SecurityProperties();

    private Binder binder;

    private MapConfigurationPropertySource source = new MapConfigurationPropertySource();

    @Test
    public void validateDefaultFilterOrderMatchesMetadata() {
        assertThat(this.security.getFilter().getOrder()).isEqualTo((-100));
    }

    @Test
    public void filterOrderShouldBind() {
        this.source.put("spring.security.filter.order", "55");
        this.binder.bind("spring.security", Bindable.ofInstance(this.security));
        assertThat(this.security.getFilter().getOrder()).isEqualTo(55);
    }

    @Test
    public void userWhenNotConfiguredShouldUseDefaultNameAndGeneratedPassword() {
        SecurityProperties.User user = this.security.getUser();
        assertThat(user.getName()).isEqualTo("user");
        assertThat(user.getPassword()).isNotNull();
        assertThat(user.isPasswordGenerated()).isTrue();
        assertThat(user.getRoles()).isEmpty();
    }

    @Test
    public void userShouldBindProperly() {
        this.source.put("spring.security.user.name", "foo");
        this.source.put("spring.security.user.password", "password");
        this.source.put("spring.security.user.roles", "ADMIN,USER");
        this.binder.bind("spring.security", Bindable.ofInstance(this.security));
        SecurityProperties.User user = this.security.getUser();
        assertThat(user.getName()).isEqualTo("foo");
        assertThat(user.getPassword()).isEqualTo("password");
        assertThat(user.isPasswordGenerated()).isFalse();
        assertThat(user.getRoles()).containsExactly("ADMIN", "USER");
    }

    @Test
    public void passwordAutogeneratedIfEmpty() {
        this.source.put("spring.security.user.password", "");
        this.binder.bind("spring.security", Bindable.ofInstance(this.security));
        assertThat(this.security.getUser().isPasswordGenerated()).isTrue();
    }
}

