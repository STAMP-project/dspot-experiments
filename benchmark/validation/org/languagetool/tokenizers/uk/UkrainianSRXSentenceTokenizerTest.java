/**
 * LanguageTool, a natural language style checker
 * Copyright (C) 2005 Daniel Naber (http://www.danielnaber.de)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301
 * USA
 */
package org.languagetool.tokenizers.uk;


import org.junit.Test;
import org.languagetool.language.Ukrainian;
import org.languagetool.tokenizers.SRXSentenceTokenizer;


public class UkrainianSRXSentenceTokenizerTest {
    private final SRXSentenceTokenizer stokenizer = new SRXSentenceTokenizer(new Ukrainian());

    @Test
    public final void testTokenize() {
        testSplit("?? ?????? ???????.");
        testSplit("???? ???????? ? ?????. ", "??? ??? ?? ???? ?? ???????????.");
        testSplit("????-??? ? ?????? ? ???-??????, ?? ????? ? ???????? 1970-? ??. ? ??? ? ??????????????.");
        testSplit("????? ?? ???????, ??? ? XV ??. ??????????? ??????? ??????? ?????.");
        testSplit("?? ??????? 1994 ?. ????????? ???? ??????? ???????? 4,8 ????. ???.");
        testSplit("????, ???. ????????????, ???. 43, ??. 4.");
        testSplit("?.????????");
        testSplit("?.?.????????");
        testSplit("??????? ?. ?. ???????.");
        testSplit("?. ?. ??????? ??????? ??????.");
        testSplit("???? ??????? ? ?. ???????? ? ?. ?. ??????? ????????? ? ?????? ???????? ????.");
        testSplit("???? ??????? ? ?.???????? ? ?.?.?????? ????????? ? ?????? ???????? ????.");
        testSplit("\u041a\u043e\u043c\u0435\u043d\u0434\u0430\u043d\u0442 \u043f\u0440\u0435\u043f\u043e\u0434\u043e\u0431\u043d\u0438\u0439 \u0421.\u00a0\u041c\u043e\u043a\u0456\u0442\u0456\u043c\u0456");
        testSplit("\u041a\u043e\u043c\u0435\u043d\u0434\u0430\u043d\u0442 \u043f\u0440\u0435\u043f\u043e\u0434\u043e\u0431\u043d\u0438\u0439 \u0421.\u00a0\u0421.\u00a0\u041c\u043e\u043a\u0456\u0442\u0456\u043c\u0456 1.");
        testSplit("\u041a\u043e\u043c\u0435\u043d\u0434\u0430\u043d\u0442 \u043f\u0440\u0435\u043f\u043e\u0434\u043e\u0431\u043d\u0438\u0439 \u0421.\u00a0\u0421. \u041c\u043e\u043a\u0456\u0442\u0456\u043c\u0456 2.");
        testSplit("?????: ????. ???????????, ????. ????????, ???. ???????.");
        testSplit("????????? ???????? ? ?. ??????.");
        testSplit("300 ?. ?? ?. ?.");
        testSplit("? 300 ?. ?? ?.?., ? ?? ??? ????.");
        testSplit("???????? (???. ????????) ? ???????? ??????.");
        testSplit("?????? ????? (????. Kvitka Cisyk ????? Kacey Cisyk ??? ????????? ?.?.); 4 ?????? 1953?., ?????, ???-???? ? 29 ??????? 1998 ?., ?????????, ???-????) ? ???????????? ???????? ???????????? ??????????.");
        testSplit("?? ????????? ??. ?????? ???'?????? ????? ????.");
        testSplit("?? ????????? ??. ????. ????????????.");
        testSplit("?? ?????? ???????? ?????????????? ???'?????? ????? ????.");
        testSplit("?? ?????? ???????.");
        testSplit("??????? ??????? ? ?. ?.");
        testSplit("??????? ??????? ? ?. ?. ? ?. ?.");
        testSplit("???. ????. 24.");
        testSplit("\u0412\u0456\u0434 \u0430\u043d\u0433\u043b.\n  File.");
        testSplit("\u0412\u0456\u0434 \u0444\u0440.  \nparachute.");
        testSplit("? ??? ??????? ????????? ????????????...  ????? ??????, ??????, ?????? ?????????");
        testSplit("(???? ???? ?? ???????. - ???.)");
        testSplit("?????? 33 ???. 356 ?????");
        testSplit("?????? 33 ???. (?? ??????? ???????)");
        testSplit("? ???? ?????????   1,2 ???. ? ????????.");
        testSplit("? ?. ?????");
        testSplit("?????? (?. 200)");
        testSplit("?????????: ??. ??????");
        testSplit("?????? ????? (?. ?????????, ?????????? ???.)");
        testSplit("U.S. Marine");
        testSplit("B.B. King");
        testSplit("?????? ??. ???? ? ?????? ??. ????");
        testSplit("??????? (??????????-????????.  ?  ???.) ????? ??????????.");
        testSplit("???????? (? ??????.  - ???.), ??????.");
        testSplit(" ([27]???. ??????? ? 9, 2008)");
    }

    @Test
    public void testTokenizeWithSplit() {
        testSplit("?????? 33 ???.", "? ????? ? ??????");
        testSplit("?? ???? 7,5 ???.", "? ??????? ???? ???????.");
        testSplit("???????? 30 ?. ", "???????.");
        testSplit("????????? 30 ?/?. ", "???????.");
        testSplit("??????? 100 ?. ", "? ??? ??? ???????.");
        testSplit("??????? ????? 67 ???. ??.  ?. ", "? 1954 ???? ??? ??????????...");
        testSplit("?? 0,6?C. ", "??? ?? ??? ?????.");// ??? ?

        testSplit("?? 0,6??. ", "??? ?? ??? ?????.");// ??? ?

        testSplit("?? 0,6 ?C. ", "??? ?? ??? ?????.");// ??? ?

        testSplit("?? 0,6 ??. ", "??? ?? ??? ?????.");// ??? ?

        testSplit("??????? ? ???. ", "????? ?? ?????? ???.");
        testSplit("????? ??????? ???? ? ???. ", "? ??????? ???????? ?????.");
        testSplit("????? ????? XIII?XIX ??.", "?????? ????? ???? ??????????.");
    }

    @Test
    public void testTokenizeWithSpecialChars() {
        testSplit("\u0432\u0456\u0434\u0431\u0443\u0432 \u0443 \u0442\u044e\u0440\u043c\u0430\u0445.\u202f\u041d\u0435\u0449\u043e\u0434\u0430\u0432\u043d\u043e \u043f\u0438\u0441\u044c\u043c\u0435\u043d\u043d\u0438\u043a");
        testSplit("\u0437\u0430\u043a\u0440\u0438\u0442\u043e \u0431\u0456\u0431\u043b\u0456\u043e\u0442\u0435\u043a\u0443 \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u043e\u0457 \u043b\u0456\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0438.\u202f ", "?????? ?????? ???????? ? ????????????...");
        // still no split for initials
        testSplit("\u0417 \u043e\u0441\u043e\u0431\u043b\u0438\u0432\u0438\u043c \u043e\u0431\u0443\u0440\u0435\u043d\u043d\u044f\u043c \u0441\u043f\u0440\u0438\u0439\u043c\u0430\u0432 \u0421.\u202f \u0428\u0435\u043b\u0443\u0445\u0438\u043d \u043b\u0435\u0433\u0456\u0442\u0438\u043c\u0456\u0437\u0430\u0446\u0456\u044e");
    }
}

