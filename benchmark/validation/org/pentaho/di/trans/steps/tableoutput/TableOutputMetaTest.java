/**
 * ! ******************************************************************************
 *
 * Pentaho Data Integration
 *
 * Copyright (C) 2002-2017 by Hitachi Vantara : http://www.pentaho.com
 *
 * ******************************************************************************
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * ****************************************************************************
 */
package org.pentaho.di.trans.steps.tableoutput;


import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.mockito.Mockito;
import org.pentaho.di.core.database.DatabaseInterface;
import org.pentaho.di.core.database.DatabaseMeta;
import org.pentaho.di.core.exception.KettleException;
import org.pentaho.di.core.row.RowMeta;
import org.pentaho.di.repository.Repository;
import org.pentaho.di.repository.StringObjectId;
import org.pentaho.di.trans.steps.loadsave.MemoryRepository;
import org.pentaho.di.utils.TestUtils;
import org.pentaho.metastore.api.IMetaStore;


public class TableOutputMetaTest {
    private List<DatabaseMeta> databases;

    private IMetaStore metaStore;

    /**
     *
     *
     * @see <a href=http://jira.pentaho.com/browse/BACKLOG-377>http://jira.pentaho.com/browse/BACKLOG-377</a>
     * @throws KettleException
     * 		
     */
    @Test
    public void testReadRep() throws KettleException {
        // check variable
        String commitSize = "${test}";
        Repository rep = new MemoryRepository();
        rep.saveStepAttribute(null, null, "commit", commitSize);
        TableOutputMeta tableOutputMeta = new TableOutputMeta();
        tableOutputMeta.readRep(rep, metaStore, null, databases);
        Assert.assertEquals(commitSize, tableOutputMeta.getCommitSize());
        // check integer size
        int commitSizeInt = 1;
        Repository rep2 = new MemoryRepository();
        rep2.saveStepAttribute(null, null, "commit", commitSizeInt);
        TableOutputMeta tableOutputMeta2 = new TableOutputMeta();
        tableOutputMeta2.readRep(rep2, metaStore, null, databases);
        Assert.assertEquals(String.valueOf(commitSizeInt), tableOutputMeta2.getCommitSize());
    }

    @Test
    public void testIsReturningGeneratedKeys() throws Exception {
        TableOutputMeta tableOutputMeta = new TableOutputMeta();
        TableOutputMeta tableOutputMetaSpy = Mockito.spy(tableOutputMeta);
        DatabaseMeta databaseMeta = Mockito.mock(DatabaseMeta.class);
        Mockito.doReturn(true).when(databaseMeta).supportsAutoGeneratedKeys();
        Mockito.doReturn(databaseMeta).when(tableOutputMetaSpy).getDatabaseMeta();
        tableOutputMetaSpy.setReturningGeneratedKeys(true);
        Assert.assertTrue(tableOutputMetaSpy.isReturningGeneratedKeys());
        Mockito.doReturn(false).when(databaseMeta).supportsAutoGeneratedKeys();
        Assert.assertFalse(tableOutputMetaSpy.isReturningGeneratedKeys());
        tableOutputMetaSpy.setReturningGeneratedKeys(true);
        Assert.assertFalse(tableOutputMetaSpy.isReturningGeneratedKeys());
        tableOutputMetaSpy.setReturningGeneratedKeys(false);
        Assert.assertFalse(tableOutputMetaSpy.isReturningGeneratedKeys());
    }

    @Test
    public void testProvidesModeler() throws Exception {
        TableOutputMeta tableOutputMeta = new TableOutputMeta();
        tableOutputMeta.setFieldDatabase(new String[]{ "f1", "f2", "f3" });
        tableOutputMeta.setFieldStream(new String[]{ "s4", "s5", "s6" });
        TableOutputData tableOutputData = new TableOutputData();
        tableOutputData.insertRowMeta = Mockito.mock(RowMeta.class);
        Assert.assertEquals(tableOutputData.insertRowMeta, tableOutputMeta.getRowMeta(tableOutputData));
        tableOutputMeta.setSpecifyFields(false);
        Assert.assertEquals(0, tableOutputMeta.getDatabaseFields().size());
        Assert.assertEquals(0, tableOutputMeta.getStreamFields().size());
        tableOutputMeta.setSpecifyFields(true);
        Assert.assertEquals(3, tableOutputMeta.getDatabaseFields().size());
        Assert.assertEquals("f1", tableOutputMeta.getDatabaseFields().get(0));
        Assert.assertEquals("f2", tableOutputMeta.getDatabaseFields().get(1));
        Assert.assertEquals("f3", tableOutputMeta.getDatabaseFields().get(2));
        Assert.assertEquals(3, tableOutputMeta.getStreamFields().size());
        Assert.assertEquals("s4", tableOutputMeta.getStreamFields().get(0));
        Assert.assertEquals("s5", tableOutputMeta.getStreamFields().get(1));
        Assert.assertEquals("s6", tableOutputMeta.getStreamFields().get(2));
    }

    @Test
    public void testLoadXml() throws Exception {
        TableOutputMeta tableOutputMeta = new TableOutputMeta();
        tableOutputMeta.loadXML(getTestNode(), databases, metaStore);
        Assert.assertEquals("1000", tableOutputMeta.getCommitSize());
        Assert.assertEquals(null, tableOutputMeta.getGeneratedKeyField());
        Assert.assertEquals("public", tableOutputMeta.getSchemaName());
        Assert.assertEquals("sales_csv", tableOutputMeta.getTableName());
        Assert.assertEquals(null, tableOutputMeta.getPartitioningField());
        Assert.assertTrue(tableOutputMeta.truncateTable());
        Assert.assertTrue(tableOutputMeta.specifyFields());
        Assert.assertFalse(tableOutputMeta.ignoreErrors());
        Assert.assertFalse(tableOutputMeta.isPartitioningEnabled());
        Assert.assertTrue(tableOutputMeta.useBatchUpdate());
        Assert.assertFalse(tableOutputMeta.isTableNameInField());
        Assert.assertTrue(tableOutputMeta.isTableNameInTable());
        Assert.assertFalse(tableOutputMeta.isReturningGeneratedKeys());
        String expectedXml = "" + (((((((((((((((((((((((((((((("    <connection/>\n" + "    <schema>public</schema>\n") + "    <table>sales_csv</table>\n") + "    <commit>1000</commit>\n") + "    <truncate>Y</truncate>\n") + "    <ignore_errors>N</ignore_errors>\n") + "    <use_batch>Y</use_batch>\n") + "    <specify_fields>Y</specify_fields>\n") + "    <partitioning_enabled>N</partitioning_enabled>\n") + "    <partitioning_field/>\n") + "    <partitioning_daily>N</partitioning_daily>\n") + "    <partitioning_monthly>Y</partitioning_monthly>\n") + "    <tablename_in_field>N</tablename_in_field>\n") + "    <tablename_field/>\n") + "    <tablename_in_table>Y</tablename_in_table>\n") + "    <return_keys>N</return_keys>\n") + "    <return_field/>\n") + "    <fields>\n") + "        <field>\n") + "          <column_name>ORDERNUMBER</column_name>\n") + "          <stream_name>ORDERNUMBER</stream_name>\n") + "        </field>\n") + "        <field>\n") + "          <column_name>QUANTITYORDERED</column_name>\n") + "          <stream_name>QUANTITYORDERED</stream_name>\n") + "        </field>\n") + "        <field>\n") + "          <column_name>PRICEEACH</column_name>\n") + "          <stream_name>PRICEEACH</stream_name>\n") + "        </field>\n") + "    </fields>\n");
        String actualXml = TestUtils.toUnixLineSeparators(tableOutputMeta.getXML());
        Assert.assertEquals(expectedXml, actualXml);
    }

    @Test
    public void testSaveRep() throws Exception {
        TableOutputMeta tableOutputMeta = new TableOutputMeta();
        tableOutputMeta.loadXML(getTestNode(), databases, metaStore);
        StringObjectId id_step = new StringObjectId("stepid");
        StringObjectId id_transformation = new StringObjectId("transid");
        Repository rep = Mockito.mock(Repository.class);
        tableOutputMeta.saveRep(rep, metaStore, id_transformation, id_step);
        Mockito.verify(rep).saveDatabaseMetaStepAttribute(id_transformation, id_step, "id_connection", null);
        Mockito.verify(rep).saveStepAttribute(id_transformation, id_step, "schema", "public");
        Mockito.verify(rep).saveStepAttribute(id_transformation, id_step, "table", "sales_csv");
        Mockito.verify(rep).saveStepAttribute(id_transformation, id_step, "commit", "1000");
        Mockito.verify(rep).saveStepAttribute(id_transformation, id_step, "truncate", true);
        Mockito.verify(rep).saveStepAttribute(id_transformation, id_step, "ignore_errors", false);
        Mockito.verify(rep).saveStepAttribute(id_transformation, id_step, "use_batch", true);
        Mockito.verify(rep).saveStepAttribute(id_transformation, id_step, "specify_fields", true);
        Mockito.verify(rep).saveStepAttribute(id_transformation, id_step, "partitioning_enabled", false);
        Mockito.verify(rep).saveStepAttribute(id_transformation, id_step, "partitioning_field", null);
        Mockito.verify(rep).saveStepAttribute(id_transformation, id_step, "partitioning_daily", false);
        Mockito.verify(rep).saveStepAttribute(id_transformation, id_step, "partitioning_monthly", true);
        Mockito.verify(rep).saveStepAttribute(id_transformation, id_step, "tablename_in_field", false);
        Mockito.verify(rep).saveStepAttribute(id_transformation, id_step, "tablename_field", null);
        Mockito.verify(rep).saveStepAttribute(id_transformation, id_step, "tablename_in_table", true);
        Mockito.verify(rep).saveStepAttribute(id_transformation, id_step, "return_keys", false);
        Mockito.verify(rep).saveStepAttribute(id_transformation, id_step, "return_field", null);
        Mockito.verify(rep).saveStepAttribute(id_transformation, id_step, 0, "column_name", "ORDERNUMBER");
        Mockito.verify(rep).saveStepAttribute(id_transformation, id_step, 0, "stream_name", "ORDERNUMBER");
        Mockito.verify(rep).saveStepAttribute(id_transformation, id_step, 1, "column_name", "QUANTITYORDERED");
        Mockito.verify(rep).saveStepAttribute(id_transformation, id_step, 1, "stream_name", "QUANTITYORDERED");
        Mockito.verify(rep).saveStepAttribute(id_transformation, id_step, 2, "column_name", "PRICEEACH");
        Mockito.verify(rep).saveStepAttribute(id_transformation, id_step, 2, "stream_name", "PRICEEACH");
        Mockito.verifyNoMoreInteractions(rep);
    }

    @Test
    public void testSetupDefault() throws Exception {
        TableOutputMeta tableOutputMeta = new TableOutputMeta();
        tableOutputMeta.setDefault();
        Assert.assertEquals("", tableOutputMeta.getTableName());
        Assert.assertEquals("1000", tableOutputMeta.getCommitSize());
        Assert.assertFalse(tableOutputMeta.isPartitioningEnabled());
        Assert.assertTrue(tableOutputMeta.isPartitioningMonthly());
        Assert.assertEquals("", tableOutputMeta.getPartitioningField());
        Assert.assertTrue(tableOutputMeta.isTableNameInTable());
        Assert.assertEquals("", tableOutputMeta.getTableNameField());
        Assert.assertFalse(tableOutputMeta.specifyFields());
    }

    @Test
    public void testClone() throws Exception {
        TableOutputMeta tableOutputMeta = new TableOutputMeta();
        tableOutputMeta.setDefault();
        tableOutputMeta.setFieldStream(new String[]{ "1", "2", "3" });
        tableOutputMeta.setFieldDatabase(new String[]{ "d1", "d2", "d3" });
        TableOutputMeta clone = ((TableOutputMeta) (tableOutputMeta.clone()));
        Assert.assertNotSame(clone, tableOutputMeta);
        Assert.assertEquals(clone.getXML(), tableOutputMeta.getXML());
    }

    @Test
    public void testSupportsErrorHandling() throws Exception {
        TableOutputMeta tableOutputMeta = new TableOutputMeta();
        DatabaseMeta dbMeta = Mockito.mock(DatabaseMeta.class);
        tableOutputMeta.setDatabaseMeta(dbMeta);
        DatabaseInterface databaseInterface = Mockito.mock(DatabaseInterface.class);
        Mockito.when(dbMeta.getDatabaseInterface()).thenReturn(databaseInterface);
        Mockito.when(databaseInterface.supportsErrorHandling()).thenReturn(true, false);
        Assert.assertTrue(tableOutputMeta.supportsErrorHandling());
        Assert.assertFalse(tableOutputMeta.supportsErrorHandling());
        tableOutputMeta.setDatabaseMeta(null);
        Assert.assertTrue(tableOutputMeta.supportsErrorHandling());
    }
}

